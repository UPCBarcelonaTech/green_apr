Sleep 1m start
GPR[SSLI]-1659843880109
GPR[ESLI]-1659843940113
Running SimFix Chart 7b
Timezone: America/Los_Angeles
Seed 260
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Chart/7/seed_260/
Project lc: chart
New out script/workingdir/SimFix/chart/chart_7_buggy
The file script/workingdir/SimFix/chart/chart_7_buggy does not exist!
script/workingdir/SimFix/chart/chart_7_buggy
Current directory: script/workingdir/SimFix/chart/chart_7_buggy
classpath:  script/workingdir/SimFix/chart/chart_7_buggy/lib/servlet.jar:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/SimFix/chart/chart_7_buggy/build:script/workingdir/SimFix/chart/chart_7_buggy/build-tests
Src java:  /source
Classes Java:  /build
Src Test:  /tests
Classes Test:  /build-tests
GPR[SSLB]-1659843958542
GPR[ESLB]-1659844018546
Calling SimFix: at script/workingdir/SimFix/chart/chart_7_buggy
ant
build
build-tests
ChangeLog
checkstyle
d4j-info
defects4j.build.properties
experimental
lib
licence-LGPL.txt
maven-jfreechart-project.xml
NEWS
README.txt
source
swt
tests
content current dir: ant build build-tests ChangeLog checkstyle d4j-info defects4j.build.properties experimental lib licence-LGPL.txt maven-jfreechart-project.xml NEWS README.txt source swt tests
Node: host-44
Date init: Sat 06 Aug 2022 08:47:01 PM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659844021794
=================================================
Project : chart_7	start : 22/08/06 20:47

GPR[ESUP]-1659844024561
MM Purify? false
GPR[SFL]-1659844025127
GPR[EFL]-1659844025170
GPR[SFP]-1659844025170
TIMEOUT : 18000000
GPR[SSUN]-1659844025179
org.jfree.data.time.TimePeriodValues,552
GPR[ESUN]-1659844027053
GPR[SSUN]-1659844027053
org.jfree.data.time.TimePeriodValues,267
========
if(start<maxStart){
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844029147
GPR[SPVAP]-1659844029147
GPR[EPVAP]-1659844031409
GPR[EPVS]-1659844031409
========
if(middle<minStart){
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844031411
GPR[SPVAP]-1659844031411
GPR[EPVAP]-1659844034407
GPR[SPVATF]-1659844034407
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844035516
GPR[EPVS]-1659844035516
========
if(start<minMiddle){
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844035518
GPR[SPVAP]-1659844035518
GPR[EPVAP]-1659844036235
GPR[EPVS]-1659844036236
========
if(start<maxMiddle){
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844036238
GPR[SPVAP]-1659844036238
GPR[EPVAP]-1659844036967
GPR[EPVS]-1659844036967
========
if(end<minStart){
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844036969
GPR[SPVAP]-1659844036969
GPR[EPVAP]-1659844038230
GPR[SPVATF]-1659844038230
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844039314
GPR[EPVS]-1659844039314
========
if(start<minEnd){
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844039315
GPR[SPVAP]-1659844039315
GPR[EPVAP]-1659844040037
GPR[EPVS]-1659844040037
========
if(start<maxEnd){
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844040039
GPR[SPVAP]-1659844040039
GPR[EPVAP]-1659844040739
GPR[EPVS]-1659844040739
========
if(start<end){
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844040744
GPR[SPVAP]-1659844040744
GPR[EPVAP]-1659844042006
GPR[SPVATF]-1659844042006
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844043149
GPR[EPVS]-1659844043149
========
this.start=start;
if(start<minStart){
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844043151
GPR[SPVAP]-1659844043151
GPR[EPVAP]-1659844043889
GPR[EPVS]-1659844043889
========
this.minStart=end;
if(start<minStart){
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844043891
GPR[SPVAP]-1659844043891
GPR[EPVAP]-1659844044595
GPR[EPVS]-1659844044595
========
if(start<=minStart){
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844044603
GPR[SPVAP]-1659844044603
GPR[EPVAP]-1659844045847
GPR[SPVATF]-1659844045847
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844046929
GPR[EPVS]-1659844046929
========
if(start<=end){
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844046931
GPR[SPVAP]-1659844046931
GPR[EPVAP]-1659844048170
GPR[SPVATF]-1659844048170
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844049254
GPR[EPVS]-1659844049254
========
if(start<FOREGROUND){
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844049258
GPR[SPVAP]-1659844049258
GPR[EPVAP]-1659844049969
GPR[EPVS]-1659844049969
========
if(start<BACKGROUND){
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844049976
GPR[SPVAP]-1659844049976
GPR[EPVAP]-1659844050676
GPR[EPVS]-1659844050676
GPR[ESUN]-1659844050683
GPR[SSUN]-1659844050683
org.jfree.data.time.TimePeriodValues,292
========
if(middle<maxMiddle){
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844052778
GPR[SPVAP]-1659844052778
GPR[EPVAP]-1659844054985
GPR[EPVS]-1659844054985
========
if(start<minMiddle){
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844054987
GPR[SPVAP]-1659844054987
GPR[EPVAP]-1659844058003
GPR[SPVATF]-1659844058003
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844059099
GPR[EPVS]-1659844059099
========
if(middle<minStart){
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844059100
GPR[SPVAP]-1659844059100
GPR[EPVAP]-1659844059820
GPR[EPVS]-1659844059820
========
if(middle<maxStart){
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844059821
GPR[SPVAP]-1659844059821
GPR[EPVAP]-1659844060590
GPR[EPVS]-1659844060590
========
if(end<minMiddle){
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844060591
GPR[SPVAP]-1659844060591
GPR[EPVAP]-1659844061841
GPR[SPVATF]-1659844061841
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844062940
GPR[EPVS]-1659844062940
========
if(middle<minEnd){
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844062942
GPR[SPVAP]-1659844062942
GPR[EPVAP]-1659844063655
GPR[EPVS]-1659844063655
========
if(middle<maxEnd){
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844063657
GPR[SPVAP]-1659844063657
GPR[EPVAP]-1659844064360
GPR[EPVS]-1659844064360
========
if(middle<FOREGROUND){
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844064371
GPR[SPVAP]-1659844064371
GPR[EPVAP]-1659844065103
GPR[EPVS]-1659844065103
========
if(middle<BACKGROUND){
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844065108
GPR[SPVAP]-1659844065108
GPR[EPVAP]-1659844065813
GPR[EPVS]-1659844065813
========
removeValue(index);
if(middle<minMiddle){
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844065815
GPR[SPVAP]-1659844065815
GPR[EPVAP]-1659844066525
GPR[EPVS]-1659844066525
========
removeRow(index);
if(middle<minMiddle){
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844066527
GPR[SPVAP]-1659844066527
GPR[EPVAP]-1659844067249
GPR[EPVS]-1659844067249
GPR[ESUN]-1659844067259
GPR[SSUN]-1659844067259
org.jfree.data.time.TimePeriodValues,317
========
if(end<maxEnd){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844069371
GPR[SPVAP]-1659844069371
GPR[EPVAP]-1659844071663
GPR[EPVS]-1659844071663
========
if(start<minEnd){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844071664
GPR[SPVAP]-1659844071664
GPR[EPVAP]-1659844076490
GPR[SPVATF]-1659844076490
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844077632
GPR[EPVS]-1659844077632
========
if(end<minStart){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844077634
GPR[SPVAP]-1659844077634
GPR[EPVAP]-1659844078342
GPR[EPVS]-1659844078342
========
if(end<maxStart){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844078344
GPR[SPVAP]-1659844078344
GPR[EPVAP]-1659844079070
GPR[EPVS]-1659844079070
========
if(middle<minEnd){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844079072
GPR[SPVAP]-1659844079072
GPR[EPVAP]-1659844080342
GPR[SPVATF]-1659844080342
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844081447
GPR[EPVS]-1659844081447
========
if(end<minMiddle){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844081448
GPR[SPVAP]-1659844081448
GPR[EPVAP]-1659844082158
GPR[EPVS]-1659844082158
========
if(end<maxMiddle){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844082160
GPR[SPVAP]-1659844082160
GPR[EPVAP]-1659844082867
GPR[EPVS]-1659844082867
========
this.minEnd=start;
if(end<minEnd){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844082869
GPR[SPVAP]-1659844082869
GPR[EPVAP]-1659844083609
GPR[EPVS]-1659844083609
========
this.end=end;
if(end<minEnd){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844083610
GPR[SPVAP]-1659844083610
GPR[EPVAP]-1659844084318
GPR[EPVS]-1659844084318
========
if(end<=minEnd){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844084322
GPR[SPVAP]-1659844084322
GPR[EPVAP]-1659844085564
GPR[SPVATF]-1659844085564
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844086704
GPR[EPVS]-1659844086704
========
if(minEnd<=end){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844086705
GPR[SPVAP]-1659844086705
GPR[EPVAP]-1659844087951
GPR[SPVATF]-1659844087951
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844089094
GPR[EPVS]-1659844089094
========
if(start<=minEnd){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844089095
GPR[SPVAP]-1659844089096
GPR[EPVAP]-1659844090316
GPR[SPVATF]-1659844090316
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844091436
GPR[EPVS]-1659844091436
========
if(end<FOREGROUND){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844091438
GPR[SPVAP]-1659844091438
GPR[EPVAP]-1659844092156
GPR[EPVS]-1659844092156
========
if(end<BACKGROUND){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844092161
GPR[SPVAP]-1659844092161
GPR[EPVAP]-1659844092863
GPR[EPVS]-1659844092863
========
removeValue(index);
if(end<minEnd){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844092865
GPR[SPVAP]-1659844092865
GPR[EPVAP]-1659844093566
GPR[EPVS]-1659844093566
========
removeRow(index);
if(end<minEnd){
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844093572
GPR[SPVAP]-1659844093572
GPR[EPVAP]-1659844094299
GPR[EPVS]-1659844094299
GPR[ESUN]-1659844094304
GPR[SSUN]-1659844094304
org.jfree.data.time.SimpleTimePeriod,76
Find no block!
GPR[SSUN]-1659844094767
org.jfree.data.time.SimpleTimePeriod,77
========
if(start>end){
if(start<=end){
return new SegmentRange(start,end);
}else {
return null;
}
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659844096500
GPR[SPVAP]-1659844096500
GPR[EPVAP]-1659844098743
GPR[EPVS]-1659844098743
========
if(start>minStart){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659844098745
GPR[SPVAP]-1659844098745
GPR[EPVAP]-1659844099646
GPR[EPVS]-1659844099646
========
if(start>maxStart){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659844099647
GPR[SPVAP]-1659844099647
GPR[EPVAP]-1659844100529
GPR[EPVS]-1659844100529
========
if(start>minEnd){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659844100530
GPR[SPVAP]-1659844100530
GPR[EPVAP]-1659844101458
GPR[EPVS]-1659844101458
========
if(end>start){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659844101460
GPR[SPVAP]-1659844101460
GPR[EPVAP]-1659844104490
GPR[SPVATF]-1659844104490
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844105610
GPR[EPVS]-1659844105610
========
if(start>maxEnd){
throw new IllegalArgumentException("Requires start <= end.");
}

========
MM Copying to MM
GPR[SPVS]-1659844105611
GPR[SPVAP]-1659844105611
GPR[EPVAP]-1659844106331
GPR[EPVS]-1659844106331
GPR[ESUN]-1659844106331
GPR[SSUN]-1659844106331
org.jfree.data.time.SimpleTimePeriod,80
========
if(start>end){
if(start<=end){
return new SegmentRange(start,end);
}else {
return null;
}
throw new IllegalArgumentException("Requires start <= end.");
}
this.start=start;
this.end=end;

========
MM Copying to MM
GPR[SPVS]-1659844108197
GPR[SPVAP]-1659844108197
GPR[EPVAP]-1659844110460
GPR[EPVS]-1659844110460
========
if(start>minStart){
throw new IllegalArgumentException("Requires start <= end.");
}
this.start=start;
this.end=end;

========
MM Copying to MM
GPR[SPVS]-1659844110462
GPR[SPVAP]-1659844110462
GPR[EPVAP]-1659844111408
GPR[EPVS]-1659844111408
========
if(start>serialVersionUID){
throw new IllegalArgumentException("Requires start <= end.");
}
this.start=start;
this.end=end;

========
MM Copying to MM
GPR[SPVS]-1659844111410
GPR[SPVAP]-1659844111410
GPR[EPVAP]-1659844114347
GPR[SPVATF]-1659844114347
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844115437
GPR[EPVS]-1659844115437
========
if(start>maxStart){
throw new IllegalArgumentException("Requires start <= end.");
}
this.start=start;
this.end=end;

========
MM Copying to MM
GPR[SPVS]-1659844115438
GPR[SPVAP]-1659844115438
GPR[EPVAP]-1659844116120
GPR[EPVS]-1659844116120
========
if(start>minEnd){
throw new IllegalArgumentException("Requires start <= end.");
}
this.start=start;
this.end=end;

========
MM Copying to MM
GPR[SPVS]-1659844116121
GPR[SPVAP]-1659844116121
GPR[EPVAP]-1659844116854
GPR[EPVS]-1659844116854
========
if(end>serialVersionUID){
throw new IllegalArgumentException("Requires start <= end.");
}
this.start=start;
this.end=end;

========
MM Copying to MM
GPR[SPVS]-1659844116855
GPR[SPVAP]-1659844116855
GPR[EPVAP]-1659844118074
GPR[SPVATF]-1659844118074
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844119159
GPR[EPVS]-1659844119159
========
if(start>maxEnd){
throw new IllegalArgumentException("Requires start <= end.");
}
this.start=start;
this.end=end;

========
MM Copying to MM
GPR[SPVS]-1659844119160
GPR[SPVAP]-1659844119160
GPR[EPVAP]-1659844119859
GPR[EPVS]-1659844119859
GPR[ESUN]-1659844119859
GPR[SSUN]-1659844119859
org.jfree.data.time.SimpleTimePeriod,81
GPR[ESUN]-1659844120259
GPR[SSUN]-1659844120259
org.jfree.data.time.SimpleTimePeriod,82
Find no block!
GPR[SSUN]-1659844120560
org.jfree.data.time.SimpleTimePeriod,100
GPR[ESUN]-1659844122367
GPR[SSUN]-1659844122367
org.jfree.data.time.SimpleTimePeriod,120
GPR[ESUN]-1659844124090
GPR[SSUN]-1659844124090
org.jfree.data.time.Year,96
Find no block!
GPR[SSUN]-1659844124388
org.jfree.data.time.Year,97
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844126197
GPR[SPVAP]-1659844126197
GPR[EPVAP]-1659844130475
GPR[SPVATF]-1659844130475
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844131596
GPR[EPVS]-1659844131596
========
if((year>=1900)&&(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844131598
GPR[SPVAP]-1659844131598
GPR[EPVAP]-1659844132872
GPR[SPVATF]-1659844132872
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844134007
GPR[EPVS]-1659844134007
========
if((year>=1900)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844134008
GPR[SPVAP]-1659844134008
GPR[EPVAP]-1659844135224
GPR[SPVATF]-1659844135224
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844136333
GPR[EPVS]-1659844136333
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844136335
GPR[SPVAP]-1659844136335
GPR[EPVAP]-1659844137576
GPR[SPVATF]-1659844137576
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844138666
GPR[EPVS]-1659844138666
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659844138667
GPR[SPVAP]-1659844138667
GPR[EPVAP]-1659844139946
GPR[SPVATF]-1659844139946
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844141037
GPR[EPVS]-1659844141037
========
if((year>=1900)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844141038
GPR[SPVAP]-1659844141038
GPR[EPVAP]-1659844142250
GPR[SPVATF]-1659844142250
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844143331
GPR[EPVS]-1659844143331
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844143332
GPR[SPVAP]-1659844143332
GPR[EPVAP]-1659844144548
GPR[SPVATF]-1659844144548
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844145672
GPR[EPVS]-1659844145672
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659844145673
GPR[SPVAP]-1659844145673
GPR[EPVAP]-1659844148513
GPR[SPVATF]-1659844148513
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844149603
GPR[EPVS]-1659844149603
========
if((year>=1900)&&(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659844149604
GPR[SPVAP]-1659844149604
GPR[EPVAP]-1659844150837
GPR[SPVATF]-1659844150837
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844151955
GPR[EPVS]-1659844151955
========
if((year>=1900)||(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844151956
GPR[SPVAP]-1659844151956
GPR[EPVAP]-1659844153214
GPR[SPVATF]-1659844153214
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844154302
GPR[EPVS]-1659844154302
========
if((year>=1900)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659844154303
GPR[SPVAP]-1659844154303
GPR[EPVAP]-1659844155514
GPR[SPVATF]-1659844155514
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844156603
GPR[EPVS]-1659844156603
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659844156604
GPR[SPVAP]-1659844156604
GPR[EPVAP]-1659844157836
GPR[SPVATF]-1659844157836
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844158968
GPR[EPVS]-1659844158968
========
if((year>=1900)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659844158970
GPR[SPVAP]-1659844158970
GPR[EPVAP]-1659844160195
GPR[SPVATF]-1659844160195
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844161333
GPR[EPVS]-1659844161333
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659844161334
GPR[SPVAP]-1659844161334
GPR[EPVAP]-1659844162579
GPR[SPVATF]-1659844162579
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844163684
GPR[EPVS]-1659844163684
========
if((year>=1900)||(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}

========
MM Copying to MM
GPR[SPVS]-1659844163685
GPR[SPVAP]-1659844163685
GPR[EPVAP]-1659844164929
GPR[SPVATF]-1659844164929
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844166027
GPR[EPVS]-1659844166027
========
if((day<SerialDate.MINIMUM_YEAR_SUPPORTED)||(day>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844166031
GPR[SPVAP]-1659844166031
GPR[EPVAP]-1659844166714
GPR[EPVS]-1659844166714
========
if((year>=1)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844166715
GPR[SPVAP]-1659844166715
GPR[EPVAP]-1659844167950
GPR[SPVATF]-1659844167950
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844169045
GPR[EPVS]-1659844169045
========
if((year>=1)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844169046
GPR[SPVAP]-1659844169046
GPR[EPVAP]-1659844170259
GPR[SPVATF]-1659844170259
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844171364
GPR[EPVS]-1659844171364
========
if((day<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844171365
GPR[SPVAP]-1659844171365
GPR[EPVAP]-1659844172041
GPR[EPVS]-1659844172042
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(day>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844172043
GPR[SPVAP]-1659844172043
GPR[EPVAP]-1659844172725
GPR[EPVS]-1659844172726
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659844172726
GPR[SPVAP]-1659844172726
GPR[EPVAP]-1659844173937
GPR[SPVATF]-1659844173937
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844175029
GPR[EPVS]-1659844175029
========
if((year>=1)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844175031
GPR[SPVAP]-1659844175031
GPR[EPVAP]-1659844176309
GPR[SPVATF]-1659844176309
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844177441
GPR[EPVS]-1659844177441
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659844177442
GPR[SPVAP]-1659844177442
GPR[EPVAP]-1659844178664
GPR[SPVATF]-1659844178664
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844179779
GPR[EPVS]-1659844179779
========
if((year>=1)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659844179780
GPR[SPVAP]-1659844179780
GPR[EPVAP]-1659844181014
GPR[SPVATF]-1659844181015
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844182115
GPR[EPVS]-1659844182115
========
if((year>=1)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659844182116
GPR[SPVAP]-1659844182116
GPR[EPVAP]-1659844183336
GPR[SPVATF]-1659844183336
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844184497
GPR[EPVS]-1659844184497
========
if((year>=1)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659844184499
GPR[SPVAP]-1659844184499
GPR[EPVAP]-1659844185710
GPR[SPVATF]-1659844185710
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844186815
GPR[EPVS]-1659844186815
========
if((month<SerialDate.MINIMUM_YEAR_SUPPORTED)||(month>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844186817
GPR[SPVAP]-1659844186817
GPR[EPVAP]-1659844187507
GPR[EPVS]-1659844187511
========
if((year<1)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844187512
GPR[SPVAP]-1659844187512
GPR[EPVAP]-1659844188741
GPR[SPVATF]-1659844188741
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844189846
GPR[EPVS]-1659844189846
========
if((year<1)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844189847
GPR[SPVAP]-1659844189847
GPR[EPVAP]-1659844191086
GPR[SPVATF]-1659844191086
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844192204
GPR[EPVS]-1659844192204
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844192206
GPR[SPVAP]-1659844192206
GPR[EPVAP]-1659844193428
GPR[SPVATF]-1659844193428
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844194541
GPR[EPVS]-1659844194541
========
if((month<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844194542
GPR[SPVAP]-1659844194542
GPR[EPVAP]-1659844195262
GPR[EPVS]-1659844195262
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(month>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844195264
GPR[SPVAP]-1659844195264
GPR[EPVAP]-1659844195967
GPR[EPVS]-1659844195967
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844195968
GPR[SPVAP]-1659844195968
GPR[EPVAP]-1659844197188
GPR[SPVATF]-1659844197188
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844198283
GPR[EPVS]-1659844198283
========
this.year=month;
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844198284
GPR[SPVAP]-1659844198284
GPR[EPVAP]-1659844198974
GPR[EPVS]-1659844198974
========
this.year=year;
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844198976
GPR[SPVAP]-1659844198976
GPR[EPVAP]-1659844199664
GPR[EPVS]-1659844199664
========
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844199666
GPR[SPVAP]-1659844199666
GPR[EPVAP]-1659844200902
GPR[SPVATF]-1659844200902
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844202044
GPR[EPVS]-1659844202044
========
if((year<1)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844202045
GPR[SPVAP]-1659844202046
GPR[EPVAP]-1659844203279
GPR[SPVATF]-1659844203279
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844204402
GPR[EPVS]-1659844204402
========
peg(Calendar.getInstance());
if((year<1)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844204403
GPR[SPVAP]-1659844204403
GPR[EPVAP]-1659844205625
GPR[SPVATF]-1659844205625
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844206737
GPR[EPVS]-1659844206738
========
if((year<1)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844206739
GPR[SPVAP]-1659844206739
GPR[EPVAP]-1659844207950
GPR[SPVATF]-1659844207950
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844209061
GPR[EPVS]-1659844209061
========
peg(Calendar.getInstance());
if((year<1)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844209063
GPR[SPVAP]-1659844209063
GPR[EPVAP]-1659844210305
GPR[SPVATF]-1659844210305
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844211392
GPR[EPVS]-1659844211392
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844211394
GPR[SPVAP]-1659844211394
GPR[EPVAP]-1659844212606
GPR[SPVATF]-1659844212606
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844213716
GPR[EPVS]-1659844213716
========
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844213717
GPR[SPVAP]-1659844213717
GPR[EPVAP]-1659844214926
GPR[SPVATF]-1659844214926
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844216037
GPR[EPVS]-1659844216037
========
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844216038
GPR[SPVAP]-1659844216038
GPR[EPVAP]-1659844217236
GPR[SPVATF]-1659844217236
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844220350
GPR[EPVS]-1659844220350
========
peg(Calendar.getInstance());
if((year<1)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844220351
GPR[SPVAP]-1659844220351
GPR[EPVAP]-1659844221557
GPR[SPVATF]-1659844221557
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844222649
GPR[EPVS]-1659844222649
========
peg(Calendar.getInstance());
if((year<1)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844222650
GPR[SPVAP]-1659844222650
GPR[EPVAP]-1659844223898
GPR[SPVATF]-1659844223898
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844224979
GPR[EPVS]-1659844224979
========
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844224981
GPR[SPVAP]-1659844224981
GPR[EPVAP]-1659844226196
GPR[SPVATF]-1659844226196
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844227275
GPR[EPVS]-1659844227275
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)||(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844227278
GPR[SPVAP]-1659844227278
GPR[EPVAP]-1659844227979
GPR[EPVS]-1659844227979
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844227981
GPR[SPVAP]-1659844227981
GPR[EPVAP]-1659844228667
GPR[EPVS]-1659844228667
========
if((year<FIRST_WEEK_IN_YEAR)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844228668
GPR[SPVAP]-1659844228668
GPR[EPVAP]-1659844229366
GPR[EPVS]-1659844229366
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844229367
GPR[SPVAP]-1659844229367
GPR[EPVAP]-1659844230052
GPR[EPVS]-1659844230052
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844230053
GPR[SPVAP]-1659844230053
GPR[EPVAP]-1659844230764
GPR[EPVS]-1659844230764
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844230766
GPR[SPVAP]-1659844230766
GPR[EPVAP]-1659844231452
GPR[EPVS]-1659844231452
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844231453
GPR[SPVAP]-1659844231453
GPR[EPVAP]-1659844232658
GPR[SPVATF]-1659844232658
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844233763
GPR[EPVS]-1659844233763
========
this.year=(byte)week;
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844233764
GPR[SPVAP]-1659844233764
GPR[EPVAP]-1659844234462
GPR[EPVS]-1659844234462
========
this.year=(short)year;
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844234463
GPR[SPVAP]-1659844234463
GPR[EPVAP]-1659844235678
GPR[SPVATF]-1659844235679
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844236797
GPR[EPVS]-1659844236797
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844236799
GPR[SPVAP]-1659844236799
GPR[EPVAP]-1659844237482
GPR[EPVS]-1659844237482
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844237484
GPR[SPVAP]-1659844237484
GPR[EPVAP]-1659844238182
GPR[EPVS]-1659844238182
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844238183
GPR[SPVAP]-1659844238183
GPR[EPVAP]-1659844239401
GPR[SPVATF]-1659844239401
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844240493
GPR[EPVS]-1659844240493
========
this.year=(short)year;
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844240495
GPR[SPVAP]-1659844240495
GPR[EPVAP]-1659844241705
GPR[SPVATF]-1659844241705
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844242817
GPR[EPVS]-1659844242818
========
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844242819
GPR[SPVAP]-1659844242819
GPR[EPVAP]-1659844244031
GPR[SPVATF]-1659844244031
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844245169
GPR[EPVS]-1659844245169
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844245170
GPR[SPVAP]-1659844245170
GPR[EPVAP]-1659844245855
GPR[EPVS]-1659844245855
========
if((year<FIRST_WEEK_IN_YEAR)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844245856
GPR[SPVAP]-1659844245856
GPR[EPVAP]-1659844246541
GPR[EPVS]-1659844246541
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844246542
GPR[SPVAP]-1659844246542
GPR[EPVAP]-1659844247227
GPR[EPVS]-1659844247227
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844247228
GPR[SPVAP]-1659844247228
GPR[EPVAP]-1659844247919
GPR[EPVS]-1659844247919
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844247920
GPR[SPVAP]-1659844247920
GPR[EPVAP]-1659844248606
GPR[EPVS]-1659844248606
========
this.year=(short)year;
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844248607
GPR[SPVAP]-1659844248607
GPR[EPVAP]-1659844249294
GPR[EPVS]-1659844249294
========
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844249296
GPR[SPVAP]-1659844249296
GPR[EPVAP]-1659844249983
GPR[EPVS]-1659844249983
========
this.year=(short)year;
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844249984
GPR[SPVAP]-1659844249985
GPR[EPVAP]-1659844251195
GPR[SPVATF]-1659844251195
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844252311
GPR[EPVS]-1659844252311
========
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844252313
GPR[SPVAP]-1659844252313
GPR[EPVAP]-1659844253532
GPR[SPVATF]-1659844253532
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844254624
GPR[EPVS]-1659844254624
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844254625
GPR[SPVAP]-1659844254625
GPR[EPVAP]-1659844255829
GPR[SPVATF]-1659844255829
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844256930
GPR[EPVS]-1659844256930
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844256932
GPR[SPVAP]-1659844256932
GPR[EPVAP]-1659844257632
GPR[EPVS]-1659844257632
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844257633
GPR[SPVAP]-1659844257633
GPR[EPVAP]-1659844258320
GPR[EPVS]-1659844258320
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844258321
GPR[SPVAP]-1659844258321
GPR[EPVAP]-1659844259006
GPR[EPVS]-1659844259006
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844259008
GPR[SPVAP]-1659844259008
GPR[EPVAP]-1659844259688
GPR[EPVS]-1659844259688
========
this.year=(short)year;
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844259689
GPR[SPVAP]-1659844259689
GPR[EPVAP]-1659844260423
GPR[EPVS]-1659844260423
========
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844260424
GPR[SPVAP]-1659844260424
GPR[EPVAP]-1659844261111
GPR[EPVS]-1659844261112
========
this.year=(short)year;
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844261113
GPR[SPVAP]-1659844261113
GPR[EPVAP]-1659844262386
GPR[SPVATF]-1659844262386
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844263484
GPR[EPVS]-1659844263484
========
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844263486
GPR[SPVAP]-1659844263486
GPR[EPVAP]-1659844264705
GPR[SPVATF]-1659844264705
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844265849
GPR[EPVS]-1659844265849
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844265850
GPR[SPVAP]-1659844265850
GPR[EPVAP]-1659844267065
GPR[SPVATF]-1659844267065
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844268201
GPR[EPVS]-1659844268201
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844268202
GPR[SPVAP]-1659844268202
GPR[EPVAP]-1659844268910
GPR[EPVS]-1659844268910
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844268911
GPR[SPVAP]-1659844268911
GPR[EPVAP]-1659844269601
GPR[EPVS]-1659844269601
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844269603
GPR[SPVAP]-1659844269603
GPR[EPVAP]-1659844270292
GPR[EPVS]-1659844270292
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844270293
GPR[SPVAP]-1659844270293
GPR[EPVAP]-1659844270974
GPR[EPVS]-1659844270974
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844270975
GPR[SPVAP]-1659844270975
GPR[EPVAP]-1659844271662
GPR[EPVS]-1659844271662
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844271663
GPR[SPVAP]-1659844271663
GPR[EPVAP]-1659844272356
GPR[EPVS]-1659844272356
========
this.year=(short)year;
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844272357
GPR[SPVAP]-1659844272357
GPR[EPVAP]-1659844273047
GPR[EPVS]-1659844273047
========
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844273048
GPR[SPVAP]-1659844273048
GPR[EPVAP]-1659844273740
GPR[EPVS]-1659844273740
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844273741
GPR[SPVAP]-1659844273741
GPR[EPVAP]-1659844274428
GPR[EPVS]-1659844274428
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844274429
GPR[SPVAP]-1659844274429
GPR[EPVAP]-1659844275633
GPR[SPVATF]-1659844275633
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844276769
GPR[EPVS]-1659844276769
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844276770
GPR[SPVAP]-1659844276770
GPR[EPVAP]-1659844277450
GPR[EPVS]-1659844277450
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844277451
GPR[SPVAP]-1659844277451
GPR[EPVAP]-1659844278155
GPR[EPVS]-1659844278155
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844278156
GPR[SPVAP]-1659844278156
GPR[EPVAP]-1659844278849
GPR[EPVS]-1659844278849
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844278850
GPR[SPVAP]-1659844278850
GPR[EPVAP]-1659844279540
GPR[EPVS]-1659844279540
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844279542
GPR[SPVAP]-1659844279542
GPR[EPVAP]-1659844280239
GPR[EPVS]-1659844280239
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844280240
GPR[SPVAP]-1659844280240
GPR[EPVAP]-1659844280936
GPR[EPVS]-1659844280936
========
this.year=(short)year;
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844280937
GPR[SPVAP]-1659844280937
GPR[EPVAP]-1659844281621
GPR[EPVS]-1659844281621
========
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844281622
GPR[SPVAP]-1659844281622
GPR[EPVAP]-1659844282316
GPR[EPVS]-1659844282316
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844282317
GPR[SPVAP]-1659844282317
GPR[EPVAP]-1659844283018
GPR[EPVS]-1659844283018
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844283019
GPR[SPVAP]-1659844283019
GPR[EPVAP]-1659844284258
GPR[SPVATF]-1659844284258
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844285360
GPR[EPVS]-1659844285360
========
this.year=(short)year;
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844285362
GPR[SPVAP]-1659844285362
GPR[EPVAP]-1659844286050
GPR[EPVS]-1659844286050
========
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844286051
GPR[SPVAP]-1659844286051
GPR[EPVAP]-1659844286750
GPR[EPVS]-1659844286750
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844286751
GPR[SPVAP]-1659844286751
GPR[EPVAP]-1659844287442
GPR[EPVS]-1659844287442
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_WEEK_IN_YEAR)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844287443
GPR[SPVAP]-1659844287443
GPR[EPVAP]-1659844288133
GPR[EPVS]-1659844288133
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}

========
MM Copying to MM
GPR[SPVS]-1659844288134
GPR[SPVAP]-1659844288134
GPR[EPVAP]-1659844288834
GPR[EPVS]-1659844288834
========
if((quarter<SerialDate.MINIMUM_YEAR_SUPPORTED)||(quarter>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844288835
GPR[SPVAP]-1659844288835
GPR[EPVAP]-1659844289527
GPR[EPVS]-1659844289527
========
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844289529
GPR[SPVAP]-1659844289529
GPR[EPVAP]-1659844291828
GPR[EPVS]-1659844291828
========
if((year<FIRST_QUARTER)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844291836
GPR[SPVAP]-1659844291836
GPR[EPVAP]-1659844292736
GPR[EPVS]-1659844292736
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844292737
GPR[SPVAP]-1659844292737
GPR[EPVAP]-1659844293442
GPR[EPVS]-1659844293442
========
if((quarter<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844293444
GPR[SPVAP]-1659844293444
GPR[EPVAP]-1659844294135
GPR[EPVS]-1659844294135
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(quarter>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844294136
GPR[SPVAP]-1659844294136
GPR[EPVAP]-1659844294827
GPR[EPVS]-1659844294827
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844294829
GPR[SPVAP]-1659844294829
GPR[EPVAP]-1659844296087
GPR[SPVATF]-1659844296087
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844297181
GPR[EPVS]-1659844297181
========
this.year=(byte)quarter;
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844297182
GPR[SPVAP]-1659844297182
GPR[EPVAP]-1659844297864
GPR[EPVS]-1659844297864
========
if((year<FIRST_QUARTER)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844297865
GPR[SPVAP]-1659844297865
GPR[EPVAP]-1659844298556
GPR[EPVS]-1659844298556
========
this.year=(short)year;
if((year<FIRST_QUARTER)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844298558
GPR[SPVAP]-1659844298558
GPR[EPVAP]-1659844299256
GPR[EPVS]-1659844299256
========
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844299258
GPR[SPVAP]-1659844299258
GPR[EPVAP]-1659844299941
GPR[EPVS]-1659844299941
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844299942
GPR[SPVAP]-1659844299942
GPR[EPVAP]-1659844300631
GPR[EPVS]-1659844300631
========
this.year=(short)year;
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844300632
GPR[SPVAP]-1659844300632
GPR[EPVAP]-1659844301335
GPR[EPVS]-1659844301335
========
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844301337
GPR[SPVAP]-1659844301337
GPR[EPVAP]-1659844302024
GPR[EPVS]-1659844302024
========
this.year=(short)year;
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844302025
GPR[SPVAP]-1659844302025
GPR[EPVAP]-1659844303230
GPR[SPVATF]-1659844303230
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844304332
GPR[EPVS]-1659844304332
========
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844304334
GPR[SPVAP]-1659844304334
GPR[EPVAP]-1659844305545
GPR[SPVATF]-1659844305545
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844306653
GPR[EPVS]-1659844306653
========
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844306654
GPR[SPVAP]-1659844306654
GPR[EPVAP]-1659844307344
GPR[EPVS]-1659844307344
========
this.year=(short)year;
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844307346
GPR[SPVAP]-1659844307346
GPR[EPVAP]-1659844308027
GPR[EPVS]-1659844308027
========
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844308028
GPR[SPVAP]-1659844308028
GPR[EPVAP]-1659844308726
GPR[EPVS]-1659844308726
========
this.year=(short)year;
if((year<FIRST_QUARTER)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844308728
GPR[SPVAP]-1659844308728
GPR[EPVAP]-1659844309414
GPR[EPVS]-1659844309414
========
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844309415
GPR[SPVAP]-1659844309415
GPR[EPVAP]-1659844310099
GPR[EPVS]-1659844310100
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844310101
GPR[SPVAP]-1659844310101
GPR[EPVAP]-1659844310778
GPR[EPVS]-1659844310778
========
this.year=(short)year;
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844310780
GPR[SPVAP]-1659844310780
GPR[EPVAP]-1659844311463
GPR[EPVS]-1659844311463
========
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844311465
GPR[SPVAP]-1659844311465
GPR[EPVAP]-1659844312155
GPR[EPVS]-1659844312155
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844312156
GPR[SPVAP]-1659844312156
GPR[EPVAP]-1659844312847
GPR[EPVS]-1659844312847
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844312848
GPR[SPVAP]-1659844312848
GPR[EPVAP]-1659844314078
GPR[SPVATF]-1659844314078
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844315210
GPR[EPVS]-1659844315210
========
this.year=(short)year;
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844315211
GPR[SPVAP]-1659844315211
GPR[EPVAP]-1659844315903
GPR[EPVS]-1659844315903
========
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844315905
GPR[SPVAP]-1659844315905
GPR[EPVAP]-1659844316615
GPR[EPVS]-1659844316615
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}

========
MM Copying to MM
GPR[SPVS]-1659844316616
GPR[SPVAP]-1659844316616
GPR[EPVAP]-1659844317308
GPR[EPVS]-1659844317308
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<FIRST_QUARTER)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844317309
GPR[SPVAP]-1659844317309
GPR[EPVAP]-1659844317987
GPR[EPVS]-1659844317987
========
this.year=(short)year;
peg(Calendar.getInstance());
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}

========
MM Copying to MM
GPR[SPVS]-1659844317988
GPR[SPVAP]-1659844317988
GPR[EPVAP]-1659844318688
GPR[EPVS]-1659844318688
GPR[ESUN]-1659844318688
GPR[SSUN]-1659844318688
org.jfree.data.time.Year,103
========
if((month<SerialDate.MINIMUM_YEAR_SUPPORTED)||(month>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844320761
GPR[SPVAP]-1659844320761
GPR[EPVAP]-1659844323117
GPR[EPVS]-1659844323117
========
if((year<1)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844323118
GPR[SPVAP]-1659844323118
GPR[EPVAP]-1659844326141
GPR[SPVATF]-1659844326141
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844327303
GPR[EPVS]-1659844327303
========
if((year<1)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844327306
GPR[SPVAP]-1659844327306
GPR[EPVAP]-1659844328607
GPR[SPVATF]-1659844328607
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844329721
GPR[EPVS]-1659844329721
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844329722
GPR[SPVAP]-1659844329722
GPR[EPVAP]-1659844330999
GPR[SPVATF]-1659844330999
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844332099
GPR[EPVS]-1659844332099
========
if((month<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844332100
GPR[SPVAP]-1659844332100
GPR[EPVAP]-1659844332796
GPR[EPVS]-1659844332796
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(month>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844332798
GPR[SPVAP]-1659844332798
GPR[EPVAP]-1659844333484
GPR[EPVS]-1659844333484
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844333485
GPR[SPVAP]-1659844333485
GPR[EPVAP]-1659844334736
GPR[SPVATF]-1659844334736
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844335868
GPR[EPVS]-1659844335868
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844335869
GPR[SPVAP]-1659844335869
GPR[EPVAP]-1659844336556
GPR[EPVS]-1659844336556
========
if((year<1)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844336558
GPR[SPVAP]-1659844336558
GPR[EPVAP]-1659844337755
GPR[SPVATF]-1659844337755
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844338833
GPR[EPVS]-1659844338833
========
if((year<1)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844338835
GPR[SPVAP]-1659844338835
GPR[EPVAP]-1659844340061
GPR[SPVATF]-1659844340061
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844341177
GPR[EPVS]-1659844341177
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844341178
GPR[SPVAP]-1659844341178
GPR[EPVAP]-1659844342389
GPR[SPVATF]-1659844342389
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844343520
GPR[EPVS]-1659844343520
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)||(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844343521
GPR[SPVAP]-1659844343521
GPR[EPVAP]-1659844344246
GPR[EPVS]-1659844344246
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844344247
GPR[SPVAP]-1659844344247
GPR[EPVAP]-1659844345485
GPR[SPVATF]-1659844345485
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844346570
GPR[EPVS]-1659844346570
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844346571
GPR[SPVAP]-1659844346571
GPR[EPVAP]-1659844347292
GPR[EPVS]-1659844347292
========
if((year<FIRST_WEEK_IN_YEAR)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844347293
GPR[SPVAP]-1659844347293
GPR[EPVAP]-1659844347978
GPR[EPVS]-1659844347978
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844347980
GPR[SPVAP]-1659844347980
GPR[EPVAP]-1659844348711
GPR[EPVS]-1659844348711
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844348713
GPR[SPVAP]-1659844348713
GPR[EPVAP]-1659844349479
GPR[EPVS]-1659844349479
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844349480
GPR[SPVAP]-1659844349480
GPR[EPVAP]-1659844350167
GPR[EPVS]-1659844350167
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844350168
GPR[SPVAP]-1659844350168
GPR[EPVAP]-1659844351421
GPR[SPVATF]-1659844351421
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844352520
GPR[EPVS]-1659844352520
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844352522
GPR[SPVAP]-1659844352522
GPR[EPVAP]-1659844353737
GPR[SPVATF]-1659844353737
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844354863
GPR[EPVS]-1659844354863
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844354865
GPR[SPVAP]-1659844354865
GPR[EPVAP]-1659844355556
GPR[EPVS]-1659844355556
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844355558
GPR[SPVAP]-1659844355558
GPR[EPVAP]-1659844356261
GPR[EPVS]-1659844356261
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844356263
GPR[SPVAP]-1659844356263
GPR[EPVAP]-1659844357497
GPR[SPVATF]-1659844357497
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844358625
GPR[EPVS]-1659844358625
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844358628
GPR[SPVAP]-1659844358628
GPR[EPVAP]-1659844359859
GPR[SPVATF]-1659844359859
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844360962
GPR[EPVS]-1659844360962
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844360963
GPR[SPVAP]-1659844360963
GPR[EPVAP]-1659844361665
GPR[EPVS]-1659844361665
========
if((year<FIRST_WEEK_IN_YEAR)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844361667
GPR[SPVAP]-1659844361667
GPR[EPVAP]-1659844362372
GPR[EPVS]-1659844362372
========
if((year<FIRST_WEEK_IN_YEAR)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844362374
GPR[SPVAP]-1659844362374
GPR[EPVAP]-1659844363059
GPR[EPVS]-1659844363059
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844363060
GPR[SPVAP]-1659844363060
GPR[EPVAP]-1659844363744
GPR[EPVS]-1659844363744
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844363746
GPR[SPVAP]-1659844363746
GPR[EPVAP]-1659844364567
GPR[EPVS]-1659844364567
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844364575
GPR[SPVAP]-1659844364575
GPR[EPVAP]-1659844367328
GPR[SPVATF]-1659844367328
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844368437
GPR[EPVS]-1659844368437
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844368438
GPR[SPVAP]-1659844368438
GPR[EPVAP]-1659844369138
GPR[EPVS]-1659844369138
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844369140
GPR[SPVAP]-1659844369140
GPR[EPVAP]-1659844369830
GPR[EPVS]-1659844369830
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844369831
GPR[SPVAP]-1659844369831
GPR[EPVAP]-1659844370518
GPR[EPVS]-1659844370518
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844370520
GPR[SPVAP]-1659844370520
GPR[EPVAP]-1659844371236
GPR[EPVS]-1659844371236
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844371238
GPR[SPVAP]-1659844371238
GPR[EPVAP]-1659844372488
GPR[SPVATF]-1659844372488
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844373603
GPR[EPVS]-1659844373603
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844373605
GPR[SPVAP]-1659844373605
GPR[EPVAP]-1659844374287
GPR[EPVS]-1659844374287
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844374288
GPR[SPVAP]-1659844374288
GPR[EPVAP]-1659844374990
GPR[EPVS]-1659844374990
========
if((year<FIRST_WEEK_IN_YEAR)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844374991
GPR[SPVAP]-1659844374991
GPR[EPVAP]-1659844375687
GPR[EPVS]-1659844375687
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844375688
GPR[SPVAP]-1659844375688
GPR[EPVAP]-1659844376459
GPR[EPVS]-1659844376459
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844376460
GPR[SPVAP]-1659844376460
GPR[EPVAP]-1659844377139
GPR[EPVS]-1659844377140
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844377141
GPR[SPVAP]-1659844377141
GPR[EPVAP]-1659844377829
GPR[EPVS]-1659844377829
========
if((year<FIRST_WEEK_IN_YEAR)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844377831
GPR[SPVAP]-1659844377831
GPR[EPVAP]-1659844378535
GPR[EPVS]-1659844378535
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844378537
GPR[SPVAP]-1659844378537
GPR[EPVAP]-1659844379225
GPR[EPVS]-1659844379225
========
if((year<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844379226
GPR[SPVAP]-1659844379226
GPR[EPVAP]-1659844379915
GPR[EPVS]-1659844379915
========
if((quarter<SerialDate.MINIMUM_YEAR_SUPPORTED)||(quarter>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844379917
GPR[SPVAP]-1659844379917
GPR[EPVAP]-1659844380622
GPR[EPVS]-1659844380622
========
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844380623
GPR[SPVAP]-1659844380623
GPR[EPVAP]-1659844381314
GPR[EPVS]-1659844381314
========
if((year<FIRST_QUARTER)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844381315
GPR[SPVAP]-1659844381315
GPR[EPVAP]-1659844382000
GPR[EPVS]-1659844382000
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844382001
GPR[SPVAP]-1659844382001
GPR[EPVAP]-1659844382678
GPR[EPVS]-1659844382678
========
if((quarter<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844382679
GPR[SPVAP]-1659844382679
GPR[EPVAP]-1659844383382
GPR[EPVS]-1659844383382
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(quarter>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844383383
GPR[SPVAP]-1659844383383
GPR[EPVAP]-1659844384099
GPR[EPVS]-1659844384099
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844384100
GPR[SPVAP]-1659844384100
GPR[EPVAP]-1659844385347
GPR[SPVATF]-1659844385347
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844386474
GPR[EPVS]-1659844386474
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(byte)quarter;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844386476
GPR[SPVAP]-1659844386476
GPR[EPVAP]-1659844387156
GPR[EPVS]-1659844387156
========
if((year<FIRST_QUARTER)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844387157
GPR[SPVAP]-1659844387157
GPR[EPVAP]-1659844387846
GPR[EPVS]-1659844387846
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844387847
GPR[SPVAP]-1659844387847
GPR[EPVAP]-1659844388527
GPR[EPVS]-1659844388527
========
if((year<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844388528
GPR[SPVAP]-1659844388528
GPR[EPVAP]-1659844389211
GPR[EPVS]-1659844389211
========
if((year>=1900)&&(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844389213
GPR[SPVAP]-1659844389213
GPR[EPVAP]-1659844390459
GPR[SPVATF]-1659844390459
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844391568
GPR[EPVS]-1659844391568
========
if((year>=1900)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844391570
GPR[SPVAP]-1659844391570
GPR[EPVAP]-1659844392801
GPR[SPVATF]-1659844392801
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844393896
GPR[EPVS]-1659844393896
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844393898
GPR[SPVAP]-1659844393898
GPR[EPVAP]-1659844395108
GPR[SPVATF]-1659844395108
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844396195
GPR[EPVS]-1659844396195
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844396197
GPR[SPVAP]-1659844396197
GPR[EPVAP]-1659844397407
GPR[SPVATF]-1659844397407
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844398505
GPR[EPVS]-1659844398505
========
if((year>=1900)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844398507
GPR[SPVAP]-1659844398507
GPR[EPVAP]-1659844399744
GPR[SPVATF]-1659844399744
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844400870
GPR[EPVS]-1659844400870
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844400871
GPR[SPVAP]-1659844400871
GPR[EPVAP]-1659844402080
GPR[SPVATF]-1659844402080
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844403182
GPR[EPVS]-1659844403182
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844403184
GPR[SPVAP]-1659844403184
GPR[EPVAP]-1659844404387
GPR[SPVATF]-1659844404387
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844405536
GPR[EPVS]-1659844405536
========
if((year>=1900)&&(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844405538
GPR[SPVAP]-1659844405538
GPR[EPVAP]-1659844406768
GPR[SPVATF]-1659844406768
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844407876
GPR[EPVS]-1659844407876
========
if((year>=1900)||(year<=9999)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844407878
GPR[SPVAP]-1659844407878
GPR[EPVAP]-1659844409088
GPR[SPVATF]-1659844409088
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844410214
GPR[EPVS]-1659844410214
========
if((year>=1900)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844410215
GPR[SPVAP]-1659844410215
GPR[EPVAP]-1659844411422
GPR[SPVATF]-1659844411422
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844412520
GPR[EPVS]-1659844412520
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844412522
GPR[SPVAP]-1659844412522
GPR[EPVAP]-1659844413781
GPR[SPVATF]-1659844413781
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844414893
GPR[EPVS]-1659844414893
========
if((year>=1900)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844414894
GPR[SPVAP]-1659844414894
GPR[EPVAP]-1659844416102
GPR[SPVATF]-1659844416102
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844417208
GPR[EPVS]-1659844417208
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844417209
GPR[SPVAP]-1659844417209
GPR[EPVAP]-1659844418419
GPR[SPVATF]-1659844418419
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844419524
GPR[EPVS]-1659844419524
========
if((year>=1900)||(year<=9999)){
throw new IllegalArgumentException("The \'year\' argument must be in range 1900 to 9999.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844419526
GPR[SPVAP]-1659844419526
GPR[EPVAP]-1659844420828
GPR[SPVATF]-1659844420828
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844421969
GPR[EPVS]-1659844421969
========
if((day<SerialDate.MINIMUM_YEAR_SUPPORTED)||(day>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844421971
GPR[SPVAP]-1659844421971
GPR[EPVAP]-1659844422668
GPR[EPVS]-1659844422668
========
if((year>=1)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844422669
GPR[SPVAP]-1659844422669
GPR[EPVAP]-1659844423897
GPR[SPVATF]-1659844423897
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844425007
GPR[EPVS]-1659844425007
========
if((year>=1)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844425008
GPR[SPVAP]-1659844425008
GPR[EPVAP]-1659844426227
GPR[SPVATF]-1659844426227
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844427334
GPR[EPVS]-1659844427334
========
if((day<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844427336
GPR[SPVAP]-1659844427336
GPR[EPVAP]-1659844428022
GPR[EPVS]-1659844428022
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(day>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844428023
GPR[SPVAP]-1659844428023
GPR[EPVAP]-1659844428706
GPR[EPVS]-1659844428706
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844428708
GPR[SPVAP]-1659844428708
GPR[EPVAP]-1659844429898
GPR[SPVATF]-1659844429898
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844431043
GPR[EPVS]-1659844431043
========
if((year>=1)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844431045
GPR[SPVAP]-1659844431045
GPR[EPVAP]-1659844432250
GPR[SPVATF]-1659844432250
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844433349
GPR[EPVS]-1659844433349
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844433351
GPR[SPVAP]-1659844433351
GPR[EPVAP]-1659844434581
GPR[SPVATF]-1659844434581
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844435737
GPR[EPVS]-1659844435737
========
if((year>=1)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844435739
GPR[SPVAP]-1659844435739
GPR[EPVAP]-1659844438547
GPR[SPVATF]-1659844438547
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844439757
GPR[EPVS]-1659844439757
========
if((year>=1)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844439758
GPR[SPVAP]-1659844439758
GPR[EPVAP]-1659844440993
GPR[SPVATF]-1659844440993
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844442140
GPR[EPVS]-1659844442140
========
if((year>=1)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Invalid \'day\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844442141
GPR[SPVAP]-1659844442141
GPR[EPVAP]-1659844443393
GPR[SPVATF]-1659844443393
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844444501
GPR[EPVS]-1659844444501
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Null \'serialDate\' argument.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844444502
GPR[SPVAP]-1659844444502
GPR[EPVAP]-1659844445719
GPR[SPVATF]-1659844445719
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844446835
GPR[EPVS]-1659844446835
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=year.getYear();
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844446837
GPR[SPVAP]-1659844446837
GPR[EPVAP]-1659844447528
GPR[EPVS]-1659844447528
========
if((month<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>12)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844447530
GPR[SPVAP]-1659844447530
GPR[EPVAP]-1659844448215
GPR[EPVS]-1659844448215
========
if((month<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844448216
GPR[SPVAP]-1659844448216
GPR[EPVAP]-1659844448909
GPR[EPVS]-1659844448909
========
if((year<1)||(month>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844448910
GPR[SPVAP]-1659844448910
GPR[EPVAP]-1659844449593
GPR[EPVS]-1659844449593
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(month>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844449594
GPR[SPVAP]-1659844449594
GPR[EPVAP]-1659844450289
GPR[EPVS]-1659844450289
========
if((month<SerialDate.MINIMUM_YEAR_SUPPORTED)||(month>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844450290
GPR[SPVAP]-1659844450290
GPR[EPVAP]-1659844451008
GPR[EPVS]-1659844451008
========
if((month<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>12)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844451010
GPR[SPVAP]-1659844451010
GPR[EPVAP]-1659844451712
GPR[EPVS]-1659844451712
========
if((year<1)||(month>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Month outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844451714
GPR[SPVAP]-1659844451714
GPR[EPVAP]-1659844452453
GPR[EPVS]-1659844452453
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
this.year=(short)year.getYear();
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844452456
GPR[SPVAP]-1659844452456
GPR[EPVAP]-1659844453150
GPR[EPVS]-1659844453150
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844453153
GPR[SPVAP]-1659844453153
GPR[EPVAP]-1659844453862
GPR[EPVS]-1659844453862
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844453864
GPR[SPVAP]-1659844453864
GPR[EPVAP]-1659844454553
GPR[EPVS]-1659844454553
========
if((week<FIRST_WEEK_IN_YEAR)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844454554
GPR[SPVAP]-1659844454554
GPR[EPVAP]-1659844455246
GPR[EPVS]-1659844455246
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844455248
GPR[SPVAP]-1659844455248
GPR[EPVAP]-1659844455932
GPR[EPVS]-1659844455932
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844455934
GPR[SPVAP]-1659844455934
GPR[EPVAP]-1659844456627
GPR[EPVS]-1659844456627
========
if((year<FIRST_WEEK_IN_YEAR)||(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844456628
GPR[SPVAP]-1659844456628
GPR[EPVAP]-1659844457320
GPR[EPVS]-1659844457320
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844457321
GPR[SPVAP]-1659844457321
GPR[EPVAP]-1659844458011
GPR[EPVS]-1659844458011
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844458012
GPR[SPVAP]-1659844458012
GPR[EPVAP]-1659844458704
GPR[EPVS]-1659844458704
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844458705
GPR[SPVAP]-1659844458705
GPR[EPVAP]-1659844459410
GPR[EPVS]-1659844459410
========
if((week<FIRST_WEEK_IN_YEAR)||(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844459411
GPR[SPVAP]-1659844459411
GPR[EPVAP]-1659844460114
GPR[EPVS]-1659844460114
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844460115
GPR[SPVAP]-1659844460115
GPR[EPVAP]-1659844460819
GPR[EPVS]-1659844460819
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)||(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844460820
GPR[SPVAP]-1659844460820
GPR[EPVAP]-1659844461519
GPR[EPVS]-1659844461519
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844461520
GPR[SPVAP]-1659844461520
GPR[EPVAP]-1659844462210
GPR[EPVS]-1659844462210
========
if((week<FIRST_WEEK_IN_YEAR)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844462211
GPR[SPVAP]-1659844462211
GPR[EPVAP]-1659844462898
GPR[EPVS]-1659844462898
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844462900
GPR[SPVAP]-1659844462900
GPR[EPVAP]-1659844463578
GPR[EPVS]-1659844463578
========
if((week<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844463579
GPR[SPVAP]-1659844463579
GPR[EPVAP]-1659844464289
GPR[EPVS]-1659844464289
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844464290
GPR[SPVAP]-1659844464290
GPR[EPVAP]-1659844464983
GPR[EPVS]-1659844464983
========
if((week<FIRST_WEEK_IN_YEAR)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844464985
GPR[SPVAP]-1659844464985
GPR[EPVAP]-1659844465670
GPR[EPVS]-1659844465670
========
if((year<FIRST_WEEK_IN_YEAR)&&(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844465671
GPR[SPVAP]-1659844465671
GPR[EPVAP]-1659844466368
GPR[EPVS]-1659844466368
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844466369
GPR[SPVAP]-1659844466369
GPR[EPVAP]-1659844467084
GPR[EPVS]-1659844467084
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844467085
GPR[SPVAP]-1659844467085
GPR[EPVAP]-1659844467766
GPR[EPVS]-1659844467766
========
if((year<FIRST_WEEK_IN_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844467768
GPR[SPVAP]-1659844467768
GPR[EPVAP]-1659844468455
GPR[EPVS]-1659844468455
========
if((year<FIRST_WEEK_IN_YEAR)||(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844468457
GPR[SPVAP]-1659844468457
GPR[EPVAP]-1659844469143
GPR[EPVS]-1659844469143
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844469144
GPR[SPVAP]-1659844469144
GPR[EPVAP]-1659844469823
GPR[EPVS]-1659844469823
========
if((week<FIRST_WEEK_IN_YEAR)&&(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844469825
GPR[SPVAP]-1659844469825
GPR[EPVAP]-1659844470619
GPR[EPVS]-1659844470619
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844470621
GPR[SPVAP]-1659844470621
GPR[EPVAP]-1659844471309
GPR[EPVS]-1659844471309
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844471311
GPR[SPVAP]-1659844471311
GPR[EPVAP]-1659844472010
GPR[EPVS]-1659844472010
========
if((week<FIRST_WEEK_IN_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844472011
GPR[SPVAP]-1659844472011
GPR[EPVAP]-1659844472702
GPR[EPVS]-1659844472702
========
if((week<FIRST_WEEK_IN_YEAR)||(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844472703
GPR[SPVAP]-1659844472703
GPR[EPVAP]-1659844473398
GPR[EPVS]-1659844473398
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844473399
GPR[SPVAP]-1659844473399
GPR[EPVAP]-1659844474097
GPR[EPVS]-1659844474097
========
if((week<FIRST_WEEK_IN_YEAR)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844474099
GPR[SPVAP]-1659844474099
GPR[EPVAP]-1659844474784
GPR[EPVS]-1659844474784
========
if((week<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844474785
GPR[SPVAP]-1659844474785
GPR[EPVAP]-1659844475483
GPR[EPVS]-1659844475483
========
if((week<FIRST_WEEK_IN_YEAR)&&(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844475484
GPR[SPVAP]-1659844475484
GPR[EPVAP]-1659844476166
GPR[EPVS]-1659844476166
========
if((week<FIRST_WEEK_IN_YEAR)||(year>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844476168
GPR[SPVAP]-1659844476168
GPR[EPVAP]-1659844476866
GPR[EPVS]-1659844476866
========
if((year<FIRST_WEEK_IN_YEAR)&&(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844476868
GPR[SPVAP]-1659844476868
GPR[EPVAP]-1659844477551
GPR[EPVS]-1659844477551
========
if((year<FIRST_WEEK_IN_YEAR)&&(week>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844477553
GPR[SPVAP]-1659844477553
GPR[EPVAP]-1659844478286
GPR[EPVS]-1659844478286
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)&&(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844478287
GPR[SPVAP]-1659844478287
GPR[EPVAP]-1659844479026
GPR[EPVS]-1659844479026
========
if((year<FIRST_WEEK_IN_YEAR)||(week>LAST_WEEK_IN_YEAR)){
throw new IllegalArgumentException("The \'week\' argument must be in the range 1 - 53.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844479028
GPR[SPVAP]-1659844479028
GPR[EPVAP]-1659844479735
GPR[EPVS]-1659844479735
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year.getYear();
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844479739
GPR[SPVAP]-1659844479739
GPR[EPVAP]-1659844480449
GPR[EPVS]-1659844480449
========
if((quarter<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844480451
GPR[SPVAP]-1659844480451
GPR[EPVAP]-1659844481139
GPR[EPVS]-1659844481139
========
if((quarter<FIRST_QUARTER)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844481140
GPR[SPVAP]-1659844481140
GPR[EPVAP]-1659844481884
GPR[EPVS]-1659844481884
========
if((quarter<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844481887
GPR[SPVAP]-1659844481887
GPR[EPVAP]-1659844482569
GPR[EPVS]-1659844482570
========
if((year<FIRST_QUARTER)||(quarter>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844482571
GPR[SPVAP]-1659844482571
GPR[EPVAP]-1659844483250
GPR[EPVS]-1659844483250
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844483251
GPR[SPVAP]-1659844483251
GPR[EPVAP]-1659844483947
GPR[EPVS]-1659844483948
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(quarter>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844483949
GPR[SPVAP]-1659844483949
GPR[EPVAP]-1659844484668
GPR[EPVS]-1659844484668
========
if((quarter<FIRST_QUARTER)||(quarter>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844484670
GPR[SPVAP]-1659844484670
GPR[EPVAP]-1659844485346
GPR[EPVS]-1659844485346
========
if((quarter<SerialDate.MINIMUM_YEAR_SUPPORTED)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844485347
GPR[SPVAP]-1659844485347
GPR[EPVAP]-1659844486034
GPR[EPVS]-1659844486034
========
if((quarter<SerialDate.MINIMUM_YEAR_SUPPORTED)||(quarter>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844486036
GPR[SPVAP]-1659844486036
GPR[EPVAP]-1659844486717
GPR[EPVS]-1659844486717
========
if((quarter<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844486718
GPR[SPVAP]-1659844486718
GPR[EPVAP]-1659844487399
GPR[EPVS]-1659844487399
========
if((quarter<SerialDate.MINIMUM_YEAR_SUPPORTED)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844487400
GPR[SPVAP]-1659844487400
GPR[EPVAP]-1659844488097
GPR[EPVS]-1659844488097
========
if((quarter<FIRST_QUARTER)||(year>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844488101
GPR[SPVAP]-1659844488101
GPR[EPVAP]-1659844488808
GPR[EPVS]-1659844488808
========
if((year<FIRST_QUARTER)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844488810
GPR[SPVAP]-1659844488810
GPR[EPVAP]-1659844489508
GPR[EPVS]-1659844489508
========
if((year<FIRST_QUARTER)||(quarter>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844489509
GPR[SPVAP]-1659844489509
GPR[EPVAP]-1659844490215
GPR[EPVS]-1659844490215
========
if((year<SerialDate.MINIMUM_YEAR_SUPPORTED)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844490217
GPR[SPVAP]-1659844490217
GPR[EPVAP]-1659844490911
GPR[EPVS]-1659844490911
========
if((quarter<FIRST_QUARTER)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Year constructor: year ("+year);
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844490913
GPR[SPVAP]-1659844490913
GPR[EPVAP]-1659844491594
GPR[EPVS]-1659844491594
========
if((quarter<FIRST_QUARTER)||(quarter>SerialDate.MAXIMUM_YEAR_SUPPORTED)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844491595
GPR[SPVAP]-1659844491595
GPR[EPVAP]-1659844492285
GPR[EPVS]-1659844492285
========
if((quarter<SerialDate.MINIMUM_YEAR_SUPPORTED)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844492287
GPR[SPVAP]-1659844492287
GPR[EPVAP]-1659844492990
GPR[EPVS]-1659844492990
========
if((quarter<FIRST_QUARTER)||(year>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844492992
GPR[SPVAP]-1659844492992
GPR[EPVAP]-1659844493701
GPR[EPVS]-1659844493701
========
if((year<FIRST_QUARTER)||(quarter>LAST_QUARTER)){
throw new IllegalArgumentException("Quarter outside valid range.");
}
this.year=(short)year;
peg(Calendar.getInstance());

========
MM Copying to MM
GPR[SPVS]-1659844493702
GPR[SPVAP]-1659844493703
GPR[EPVAP]-1659844494391
GPR[EPVS]-1659844494391
GPR[ESUN]-1659844494394
GPR[SSUN]-1659844494394
org.jfree.data.time.Year,104
GPR[ESUN]-1659844494832
GPR[SSUN]-1659844494832
org.jfree.data.time.Year,105
Find no block!
GPR[SSUN]-1659844495129
org.jfree.data.time.Year,150
========
return this.firstMillisecond+999L;

========
MM Copying to MM
GPR[SPVS]-1659844496856
GPR[SPVAP]-1659844496856
GPR[EPVAP]-1659844501180
GPR[SPVATF]-1659844501180
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844502334
GPR[EPVS]-1659844502334
GPR[ESUN]-1659844502335
GPR[SSUN]-1659844502335
org.jfree.data.time.Year,164
GPR[ESUN]-1659844504263
GPR[SSUN]-1659844504263
org.jfree.data.time.Year,176
========
peg(calendar);
this.firstMillisecond=getFirstMillisecond(calendar);
this.lastMillisecond=getLastMillisecond(calendar);

========
MM Copying to MM
GPR[SPVS]-1659844506098
GPR[SPVAP]-1659844506098
GPR[EPVAP]-1659844512073
GPR[SPVATF]-1659844512073
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844513188
GPR[EPVS]-1659844513188
========
notifyListeners(new AxisChangeEvent(this));
this.firstMillisecond=getFirstMillisecond(calendar);
this.lastMillisecond=getLastMillisecond(calendar);

========
MM Copying to MM
GPR[SPVS]-1659844513189
GPR[SPVAP]-1659844513189
GPR[EPVAP]-1659844513892
GPR[EPVS]-1659844513892
GPR[ESUN]-1659844513897
GPR[SSUN]-1659844513897
org.jfree.data.time.Year,177
GPR[ESUN]-1659844514375
GPR[SSUN]-1659844514375
org.jfree.data.time.Year,178
Find no block!
GPR[SSUN]-1659844514727
org.jfree.data.time.Year,233
========
calendar.set(this.year,Calendar.DECEMBER,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844516849
GPR[SPVAP]-1659844516849
GPR[EPVAP]-1659844521160
GPR[SPVATF]-1659844521160
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844522278
GPR[EPVS]-1659844522278
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844522280
GPR[SPVAP]-1659844522280
GPR[EPVAP]-1659844522991
GPR[EPVS]-1659844522991
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844522992
GPR[SPVAP]-1659844522992
GPR[EPVAP]-1659844523719
GPR[EPVS]-1659844523719
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844523720
GPR[SPVAP]-1659844523720
GPR[EPVAP]-1659844524404
GPR[EPVS]-1659844524404
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844524405
GPR[SPVAP]-1659844524405
GPR[EPVAP]-1659844525115
GPR[EPVS]-1659844525115
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844525117
GPR[SPVAP]-1659844525117
GPR[EPVAP]-1659844526345
GPR[SPVATF]-1659844526345
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844527473
GPR[EPVS]-1659844527473
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844527474
GPR[SPVAP]-1659844527474
GPR[EPVAP]-1659844528173
GPR[EPVS]-1659844528173
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844528174
GPR[SPVAP]-1659844528174
GPR[EPVAP]-1659844529410
GPR[SPVATF]-1659844529410
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844530553
GPR[EPVS]-1659844530553
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844530555
GPR[SPVAP]-1659844530555
GPR[EPVAP]-1659844531794
GPR[SPVATF]-1659844531794
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844532926
GPR[EPVS]-1659844532926
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844532927
GPR[SPVAP]-1659844532927
GPR[EPVAP]-1659844534190
GPR[SPVATF]-1659844534190
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844535340
GPR[EPVS]-1659844535340
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844535341
GPR[SPVAP]-1659844535341
GPR[EPVAP]-1659844536561
GPR[SPVATF]-1659844536561
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844537657
GPR[EPVS]-1659844537657
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844537658
GPR[SPVAP]-1659844537658
GPR[EPVAP]-1659844538931
GPR[SPVATF]-1659844538931
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844540033
GPR[EPVS]-1659844540033
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844540034
GPR[SPVAP]-1659844540034
GPR[EPVAP]-1659844541284
GPR[SPVATF]-1659844541284
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844542401
GPR[EPVS]-1659844542401
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844542404
GPR[SPVAP]-1659844542404
GPR[EPVAP]-1659844543096
GPR[EPVS]-1659844543096
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844543097
GPR[SPVAP]-1659844543097
GPR[EPVAP]-1659844543793
GPR[EPVS]-1659844543793
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844543794
GPR[SPVAP]-1659844543794
GPR[EPVAP]-1659844544485
GPR[EPVS]-1659844544485
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844544486
GPR[SPVAP]-1659844544486
GPR[EPVAP]-1659844545172
GPR[EPVS]-1659844545172
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844545173
GPR[SPVAP]-1659844545173
GPR[EPVAP]-1659844545874
GPR[EPVS]-1659844545874
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844545875
GPR[SPVAP]-1659844545875
GPR[EPVAP]-1659844546586
GPR[EPVS]-1659844546586
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844546587
GPR[SPVAP]-1659844546587
GPR[EPVAP]-1659844547271
GPR[EPVS]-1659844547271
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844547272
GPR[SPVAP]-1659844547272
GPR[EPVAP]-1659844547937
GPR[EPVS]-1659844547937
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844547938
GPR[SPVAP]-1659844547938
GPR[EPVAP]-1659844548623
GPR[EPVS]-1659844548623
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844548624
GPR[SPVAP]-1659844548624
GPR[EPVAP]-1659844549314
GPR[EPVS]-1659844549314
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844553336
GPR[SPVAP]-1659844553336
GPR[EPVAP]-1659844554044
GPR[EPVS]-1659844554044
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844554046
GPR[SPVAP]-1659844554046
GPR[EPVAP]-1659844554748
GPR[EPVS]-1659844554748
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844554749
GPR[SPVAP]-1659844554749
GPR[EPVAP]-1659844555460
GPR[EPVS]-1659844555460
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844555461
GPR[SPVAP]-1659844555461
GPR[EPVAP]-1659844556148
GPR[EPVS]-1659844556148
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844556149
GPR[SPVAP]-1659844556149
GPR[EPVAP]-1659844556832
GPR[EPVS]-1659844556832
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844556833
GPR[SPVAP]-1659844556833
GPR[EPVAP]-1659844557515
GPR[EPVS]-1659844557515
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844557516
GPR[SPVAP]-1659844557516
GPR[EPVAP]-1659844558206
GPR[EPVS]-1659844558206
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844558207
GPR[SPVAP]-1659844558207
GPR[EPVAP]-1659844558889
GPR[EPVS]-1659844558889
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844558891
GPR[SPVAP]-1659844558891
GPR[EPVAP]-1659844559583
GPR[EPVS]-1659844559583
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844559584
GPR[SPVAP]-1659844559584
GPR[EPVAP]-1659844560267
GPR[EPVS]-1659844560267
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844560268
GPR[SPVAP]-1659844560268
GPR[EPVAP]-1659844560952
GPR[EPVS]-1659844560952
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844560954
GPR[SPVAP]-1659844560954
GPR[EPVAP]-1659844561640
GPR[EPVS]-1659844561640
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844561641
GPR[SPVAP]-1659844561641
GPR[EPVAP]-1659844562340
GPR[EPVS]-1659844562340
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844562341
GPR[SPVAP]-1659844562341
GPR[EPVAP]-1659844563036
GPR[EPVS]-1659844563036
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844563037
GPR[SPVAP]-1659844563037
GPR[EPVAP]-1659844563719
GPR[EPVS]-1659844563719
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844563720
GPR[SPVAP]-1659844563720
GPR[EPVAP]-1659844564400
GPR[EPVS]-1659844564400
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844564401
GPR[SPVAP]-1659844564401
GPR[EPVAP]-1659844565098
GPR[EPVS]-1659844565098
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844565099
GPR[SPVAP]-1659844565099
GPR[EPVAP]-1659844565792
GPR[EPVS]-1659844565792
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844565793
GPR[SPVAP]-1659844565793
GPR[EPVAP]-1659844566511
GPR[EPVS]-1659844566511
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844566513
GPR[SPVAP]-1659844566513
GPR[EPVAP]-1659844567199
GPR[EPVS]-1659844567199
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844567201
GPR[SPVAP]-1659844567201
GPR[EPVAP]-1659844567892
GPR[EPVS]-1659844567892
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844567893
GPR[SPVAP]-1659844567893
GPR[EPVAP]-1659844568575
GPR[EPVS]-1659844568575
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844568576
GPR[SPVAP]-1659844568576
GPR[EPVAP]-1659844569307
GPR[EPVS]-1659844569307
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844569309
GPR[SPVAP]-1659844569309
GPR[EPVAP]-1659844569999
GPR[EPVS]-1659844569999
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844570000
GPR[SPVAP]-1659844570000
GPR[EPVAP]-1659844570683
GPR[EPVS]-1659844570683
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844570685
GPR[SPVAP]-1659844570685
GPR[EPVAP]-1659844571389
GPR[EPVS]-1659844571389
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844571390
GPR[SPVAP]-1659844571390
GPR[EPVAP]-1659844572072
GPR[EPVS]-1659844572072
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844572074
GPR[SPVAP]-1659844572074
GPR[EPVAP]-1659844572776
GPR[EPVS]-1659844572776
========
c.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844572777
GPR[SPVAP]-1659844572777
GPR[EPVAP]-1659844573471
GPR[EPVS]-1659844573471
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844573472
GPR[SPVAP]-1659844573472
GPR[EPVAP]-1659844574183
GPR[EPVS]-1659844574183
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844574184
GPR[SPVAP]-1659844574184
GPR[EPVAP]-1659844574879
GPR[EPVS]-1659844574879
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844574880
GPR[SPVAP]-1659844574880
GPR[EPVAP]-1659844575574
GPR[EPVS]-1659844575574
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
c.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844575575
GPR[SPVAP]-1659844575575
GPR[EPVAP]-1659844576274
GPR[EPVS]-1659844576274
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MINUTE,0);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844576275
GPR[SPVAP]-1659844576275
GPR[EPVAP]-1659844576982
GPR[EPVS]-1659844576982
========
calendar.set(year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844576984
GPR[SPVAP]-1659844576984
GPR[EPVAP]-1659844578215
GPR[SPVATF]-1659844578216
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844579403
GPR[EPVS]-1659844579403
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime();

========
MM Copying to MM
GPR[SPVS]-1659844579405
GPR[SPVAP]-1659844579405
GPR[EPVAP]-1659844580105
GPR[EPVS]-1659844580105
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844580107
GPR[SPVAP]-1659844580107
GPR[EPVAP]-1659844583082
GPR[SPVATF]-1659844583082
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844584285
GPR[EPVS]-1659844584285
========
cal.set(this.year,Calendar.JANUARY,1,0,0,0);
cal.set(Calendar.MILLISECOND,0);
return cal.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844584287
GPR[SPVAP]-1659844584287
GPR[EPVAP]-1659844584988
GPR[EPVS]-1659844584988
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
cal.set(Calendar.MILLISECOND,0);
return cal.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844584989
GPR[SPVAP]-1659844584989
GPR[EPVAP]-1659844585695
GPR[EPVS]-1659844585695
========
cal.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844585696
GPR[SPVAP]-1659844585696
GPR[EPVAP]-1659844586391
GPR[EPVS]-1659844586391
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
cal.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844586392
GPR[SPVAP]-1659844586392
GPR[EPVAP]-1659844587116
GPR[EPVS]-1659844587116
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.add(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844587117
GPR[SPVAP]-1659844587117
GPR[EPVAP]-1659844588332
GPR[SPVATF]-1659844588332
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844589476
GPR[EPVS]-1659844589476
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return cal.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844589477
GPR[SPVAP]-1659844589477
GPR[EPVAP]-1659844590171
GPR[EPVS]-1659844590171
========
prevYearCalendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844590173
GPR[SPVAP]-1659844590173
GPR[EPVAP]-1659844590898
GPR[EPVS]-1659844590898
========
notifyListeners(new AxisChangeEvent(this));
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844590899
GPR[SPVAP]-1659844590899
GPR[EPVAP]-1659844591603
GPR[EPVS]-1659844591603
========
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844591605
GPR[SPVAP]-1659844591605
GPR[EPVAP]-1659844592299
GPR[EPVS]-1659844592299
========
this.mapDatasetToDomainAxis(0,0);
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844592300
GPR[SPVAP]-1659844592300
GPR[EPVAP]-1659844593051
GPR[EPVS]-1659844593051
========
peg(calendar);
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844593053
GPR[SPVAP]-1659844593053
GPR[EPVAP]-1659844594288
GPR[SPVATF]-1659844594288
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844595403
GPR[EPVS]-1659844595403
========
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return (this.calendar.getTime());

========
MM Copying to MM
GPR[SPVS]-1659844595405
GPR[SPVAP]-1659844595405
GPR[EPVAP]-1659844596095
GPR[EPVS]-1659844596095
========
fireChangeEvent();
calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844596097
GPR[SPVAP]-1659844596097
GPR[EPVAP]-1659844596786
GPR[EPVS]-1659844596786
========
case Types.TIME :

calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844596788
GPR[SPVAP]-1659844596788
GPR[EPVAP]-1659844597386
GPR[EPVS]-1659844597386
========
case Types.NULL :

calendar.set(this.year,Calendar.JANUARY,1,0,0,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844597387
GPR[SPVAP]-1659844597387
GPR[EPVAP]-1659844597993
GPR[EPVS]-1659844597993
GPR[ESUN]-1659844597994
GPR[SSUN]-1659844597994
org.jfree.data.time.Year,234
GPR[ESUN]-1659844598484
GPR[SSUN]-1659844598484
org.jfree.data.time.Year,237
GPR[ESUN]-1659844598789
GPR[SSUN]-1659844598789
org.jfree.data.time.Year,252
========
calendar.set(this.year,Calendar.JANUARY,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844600794
GPR[SPVAP]-1659844600794
GPR[EPVAP]-1659844605081
GPR[SPVATF]-1659844605081
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844606187
GPR[EPVS]-1659844606187
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844606189
GPR[SPVAP]-1659844606189
GPR[EPVAP]-1659844606882
GPR[EPVS]-1659844606882
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844606883
GPR[SPVAP]-1659844606883
GPR[EPVAP]-1659844607603
GPR[EPVS]-1659844607603
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844607604
GPR[SPVAP]-1659844607604
GPR[EPVAP]-1659844608310
GPR[EPVS]-1659844608310
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844608311
GPR[SPVAP]-1659844608311
GPR[EPVAP]-1659844608999
GPR[EPVS]-1659844608999
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844609000
GPR[SPVAP]-1659844609000
GPR[EPVAP]-1659844610260
GPR[SPVATF]-1659844610260
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844611342
GPR[EPVS]-1659844611342
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844611343
GPR[SPVAP]-1659844611343
GPR[EPVAP]-1659844612032
GPR[EPVS]-1659844612032
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844612033
GPR[SPVAP]-1659844612033
GPR[EPVAP]-1659844613251
GPR[SPVATF]-1659844613251
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844614398
GPR[EPVS]-1659844614398
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844614398
GPR[SPVAP]-1659844614398
GPR[EPVAP]-1659844615644
GPR[SPVATF]-1659844615644
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844616779
GPR[EPVS]-1659844616779
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844616780
GPR[SPVAP]-1659844616780
GPR[EPVAP]-1659844618037
GPR[SPVATF]-1659844618037
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844619176
GPR[EPVS]-1659844619176
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844619177
GPR[SPVAP]-1659844619177
GPR[EPVAP]-1659844620398
GPR[SPVATF]-1659844620398
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844621513
GPR[EPVS]-1659844621513
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844621514
GPR[SPVAP]-1659844621514
GPR[EPVAP]-1659844622758
GPR[SPVATF]-1659844622758
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844623844
GPR[EPVS]-1659844623844
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844623845
GPR[SPVAP]-1659844623845
GPR[EPVAP]-1659844625063
GPR[SPVATF]-1659844625063
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844626192
GPR[EPVS]-1659844626192
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844626194
GPR[SPVAP]-1659844626194
GPR[EPVAP]-1659844626898
GPR[EPVS]-1659844626898
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844626899
GPR[SPVAP]-1659844626899
GPR[EPVAP]-1659844627591
GPR[EPVS]-1659844627591
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844627593
GPR[SPVAP]-1659844627593
GPR[EPVAP]-1659844628309
GPR[EPVS]-1659844628309
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844628310
GPR[SPVAP]-1659844628310
GPR[EPVAP]-1659844628989
GPR[EPVS]-1659844628989
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844628990
GPR[SPVAP]-1659844628990
GPR[EPVAP]-1659844629693
GPR[EPVS]-1659844629693
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844629694
GPR[SPVAP]-1659844629694
GPR[EPVAP]-1659844630390
GPR[EPVS]-1659844630390
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844630391
GPR[SPVAP]-1659844630391
GPR[EPVAP]-1659844631082
GPR[EPVS]-1659844631082
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844631083
GPR[SPVAP]-1659844631083
GPR[EPVAP]-1659844631783
GPR[EPVS]-1659844631783
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844631784
GPR[SPVAP]-1659844631784
GPR[EPVAP]-1659844632478
GPR[EPVS]-1659844632478
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844632479
GPR[SPVAP]-1659844632479
GPR[EPVAP]-1659844633171
GPR[EPVS]-1659844633171
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844633172
GPR[SPVAP]-1659844633172
GPR[EPVAP]-1659844633884
GPR[EPVS]-1659844633884
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844633885
GPR[SPVAP]-1659844633885
GPR[EPVAP]-1659844634580
GPR[EPVS]-1659844634580
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844634581
GPR[SPVAP]-1659844634581
GPR[EPVAP]-1659844635275
GPR[EPVS]-1659844635275
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844635276
GPR[SPVAP]-1659844635276
GPR[EPVAP]-1659844635962
GPR[EPVS]-1659844635962
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844635963
GPR[SPVAP]-1659844635963
GPR[EPVAP]-1659844636654
GPR[EPVS]-1659844636654
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844636656
GPR[SPVAP]-1659844636656
GPR[EPVAP]-1659844637339
GPR[EPVS]-1659844637339
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844637340
GPR[SPVAP]-1659844637340
GPR[EPVAP]-1659844638027
GPR[EPVS]-1659844638027
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844638028
GPR[SPVAP]-1659844638028
GPR[EPVAP]-1659844638707
GPR[EPVS]-1659844638707
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844638708
GPR[SPVAP]-1659844638708
GPR[EPVAP]-1659844639408
GPR[EPVS]-1659844639408
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844639409
GPR[SPVAP]-1659844639409
GPR[EPVAP]-1659844640092
GPR[EPVS]-1659844640092
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844640093
GPR[SPVAP]-1659844640093
GPR[EPVAP]-1659844640784
GPR[EPVS]-1659844640784
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844640785
GPR[SPVAP]-1659844640785
GPR[EPVAP]-1659844641472
GPR[EPVS]-1659844641472
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844641473
GPR[SPVAP]-1659844641473
GPR[EPVAP]-1659844642150
GPR[EPVS]-1659844642150
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844642151
GPR[SPVAP]-1659844642151
GPR[EPVAP]-1659844642867
GPR[EPVS]-1659844642867
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844642868
GPR[SPVAP]-1659844642868
GPR[EPVAP]-1659844643568
GPR[EPVS]-1659844643568
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844643569
GPR[SPVAP]-1659844643569
GPR[EPVAP]-1659844644251
GPR[EPVS]-1659844644251
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844644252
GPR[SPVAP]-1659844644252
GPR[EPVAP]-1659844644932
GPR[EPVS]-1659844644932
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844644933
GPR[SPVAP]-1659844644933
GPR[EPVAP]-1659844645620
GPR[EPVS]-1659844645620
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844645621
GPR[SPVAP]-1659844645621
GPR[EPVAP]-1659844646299
GPR[EPVS]-1659844646299
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844646300
GPR[SPVAP]-1659844646300
GPR[EPVAP]-1659844646983
GPR[EPVS]-1659844646983
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844646984
GPR[SPVAP]-1659844646984
GPR[EPVAP]-1659844647665
GPR[EPVS]-1659844647665
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844647666
GPR[SPVAP]-1659844647666
GPR[EPVAP]-1659844648372
GPR[EPVS]-1659844648372
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844648373
GPR[SPVAP]-1659844648373
GPR[EPVAP]-1659844649058
GPR[EPVS]-1659844649058
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844649059
GPR[SPVAP]-1659844649059
GPR[EPVAP]-1659844649760
GPR[EPVS]-1659844649760
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844649762
GPR[SPVAP]-1659844649762
GPR[EPVAP]-1659844650481
GPR[EPVS]-1659844650481
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844650482
GPR[SPVAP]-1659844650482
GPR[EPVAP]-1659844651181
GPR[EPVS]-1659844651181
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844651182
GPR[SPVAP]-1659844651182
GPR[EPVAP]-1659844651870
GPR[EPVS]-1659844651870
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844651871
GPR[SPVAP]-1659844651871
GPR[EPVAP]-1659844652585
GPR[EPVS]-1659844652585
========
c.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844652586
GPR[SPVAP]-1659844652586
GPR[EPVAP]-1659844653278
GPR[EPVS]-1659844653279
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844653280
GPR[SPVAP]-1659844653280
GPR[EPVAP]-1659844653981
GPR[EPVS]-1659844653981
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844653982
GPR[SPVAP]-1659844653982
GPR[EPVAP]-1659844654681
GPR[EPVS]-1659844654681
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844654682
GPR[SPVAP]-1659844654682
GPR[EPVAP]-1659844656885
GPR[EPVS]-1659844656885
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
c.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844656893
GPR[SPVAP]-1659844656893
GPR[EPVAP]-1659844657792
GPR[EPVS]-1659844657792
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MINUTE,999);
calendar.set(Calendar.SECOND,0);
calendar.set(Calendar.MILLISECOND,0);
return c.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844657793
GPR[SPVAP]-1659844657793
GPR[EPVAP]-1659844658509
GPR[EPVS]-1659844658509
========
calendar.set(year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844658511
GPR[SPVAP]-1659844658511
GPR[EPVAP]-1659844659762
GPR[SPVATF]-1659844659762
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844660913
GPR[EPVS]-1659844660913
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime();

========
MM Copying to MM
GPR[SPVS]-1659844660915
GPR[SPVAP]-1659844660915
GPR[EPVAP]-1659844661627
GPR[EPVS]-1659844661627
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844661628
GPR[SPVAP]-1659844661628
GPR[EPVAP]-1659844662863
GPR[SPVATF]-1659844662863
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844664012
GPR[EPVS]-1659844664012
========
cal.set(this.year,Calendar.DECEMBER,31,23,59,59);
cal.set(Calendar.MILLISECOND,999);
return cal.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844664014
GPR[SPVAP]-1659844664014
GPR[EPVAP]-1659844664703
GPR[EPVS]-1659844664703
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
cal.set(Calendar.MILLISECOND,999);
return cal.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844664704
GPR[SPVAP]-1659844664704
GPR[EPVAP]-1659844665391
GPR[EPVS]-1659844665391
========
cal.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844665392
GPR[SPVAP]-1659844665392
GPR[EPVAP]-1659844666079
GPR[EPVS]-1659844666079
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
cal.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844666080
GPR[SPVAP]-1659844666080
GPR[EPVAP]-1659844666784
GPR[EPVS]-1659844666784
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.add(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844666785
GPR[SPVAP]-1659844666785
GPR[EPVAP]-1659844668016
GPR[SPVATF]-1659844668016
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844669106
GPR[EPVS]-1659844669106
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return cal.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844669107
GPR[SPVAP]-1659844669107
GPR[EPVAP]-1659844669803
GPR[EPVS]-1659844669803
========
prevYearCalendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844669806
GPR[SPVAP]-1659844669806
GPR[EPVAP]-1659844670515
GPR[EPVS]-1659844670515
========
notifyListeners(new AxisChangeEvent(this));
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844670517
GPR[SPVAP]-1659844670517
GPR[EPVAP]-1659844671226
GPR[EPVS]-1659844671226
========
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT,false);
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844671227
GPR[SPVAP]-1659844671227
GPR[EPVAP]-1659844671910
GPR[EPVS]-1659844671910
========
this.mapDatasetToDomainAxis(0,0);
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844671911
GPR[SPVAP]-1659844671911
GPR[EPVAP]-1659844672604
GPR[EPVS]-1659844672604
========
peg(calendar);
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844672606
GPR[SPVAP]-1659844672606
GPR[EPVAP]-1659844673839
GPR[SPVATF]-1659844673839
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844674953
GPR[EPVS]-1659844674953
========
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return (this.calendar.getTime());

========
MM Copying to MM
GPR[SPVS]-1659844674955
GPR[SPVAP]-1659844674955
GPR[EPVAP]-1659844675633
GPR[EPVS]-1659844675633
========
fireChangeEvent();
calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844675634
GPR[SPVAP]-1659844675634
GPR[EPVAP]-1659844676318
GPR[EPVS]-1659844676318
========
case Types.TIME :

calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844676320
GPR[SPVAP]-1659844676320
GPR[EPVAP]-1659844676904
GPR[EPVS]-1659844676904
========
case Types.NULL :

calendar.set(this.year,Calendar.DECEMBER,31,23,59,59);
calendar.set(Calendar.MILLISECOND,999);
return calendar.getTime().getTime();

========
MM Copying to MM
GPR[SPVS]-1659844676905
GPR[SPVAP]-1659844676905
GPR[EPVAP]-1659844677508
GPR[EPVS]-1659844677508
GPR[ESUN]-1659844677509
GPR[SSUN]-1659844677509
org.jfree.data.time.Year,253
GPR[ESUN]-1659844678193
GPR[SSUN]-1659844678193
org.jfree.data.time.Year,256
GPR[ESUN]-1659844678507
GPR[SSUN]-1659844678507
org.jfree.data.time.TimePeriodValues,363
========
TimePeriodValue item=new TimePeriodValue(period,value);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844681036
GPR[SPVAP]-1659844681036
GPR[EPVAP]-1659844685372
GPR[SPVATF]-1659844685372
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844686485
GPR[EPVS]-1659844686485
========
TimePeriodValue item=new TimePeriodValue(period,value);
this.data.add(item);
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844686486
GPR[SPVAP]-1659844686486
GPR[EPVAP]-1659844687775
GPR[SPVATF]-1659844687775
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844688909
GPR[EPVS]-1659844688909
========
fireSeriesChanged();
TimePeriodValue item=new TimePeriodValue(period,value);
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844688910
GPR[SPVAP]-1659844688910
GPR[EPVAP]-1659844690141
GPR[SPVATF]-1659844690141
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844691268
GPR[EPVS]-1659844691268
========
TimePeriodValue item=new TimePeriodValue(period,value);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844691270
GPR[SPVAP]-1659844691270
GPR[EPVAP]-1659844692516
GPR[SPVATF]-1659844692516
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844693622
GPR[EPVS]-1659844693622
========
fireSeriesChanged();
TimePeriodValue item=new TimePeriodValue(period,value);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844693622
GPR[SPVAP]-1659844693622
GPR[EPVAP]-1659844694883
GPR[SPVATF]-1659844694883
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844695996
GPR[EPVS]-1659844695996
========
fireSeriesChanged();
TimePeriodValue item=new TimePeriodValue(period,value);
this.data.add(item);
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844695997
GPR[SPVAP]-1659844695997
GPR[EPVAP]-1659844697220
GPR[SPVATF]-1659844697220
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844698317
GPR[EPVS]-1659844698317
========
fireSeriesChanged();
TimePeriodValue item=new TimePeriodValue(period,value);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844698319
GPR[SPVAP]-1659844698319
GPR[EPVAP]-1659844699549
GPR[SPVATF]-1659844699549
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844700640
GPR[EPVS]-1659844700640
========
this.minStartIndex+=minStartIndex;
TimePeriodValue item=new TimePeriodValue(period,value);
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844700642
GPR[SPVAP]-1659844700642
GPR[EPVAP]-1659844701862
GPR[SPVATF]-1659844701862
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844702941
GPR[EPVS]-1659844702941
========
minStartIndex++;
TimePeriodValue item=new TimePeriodValue(period,value);
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844702944
GPR[SPVAP]-1659844702944
GPR[EPVAP]-1659844704163
GPR[SPVATF]-1659844704163
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844705466
GPR[EPVS]-1659844705466
========
TimePeriodValue item=new TimePeriodValue(period,value);
setPosition(item);

========
MM Copying to MM
GPR[SPVS]-1659844705467
GPR[SPVAP]-1659844705467
GPR[EPVAP]-1659844706182
GPR[EPVS]-1659844706182
========
TimePeriodValue item=new TimePeriodValue(period,value);
add(createLegendItemBlock(item));

========
MM Copying to MM
GPR[SPVS]-1659844706185
GPR[SPVAP]-1659844706185
GPR[EPVAP]-1659844706902
GPR[EPVS]-1659844706902
========
TimePeriodValue item=new TimePeriodValue(period,value);
this.value=value;
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844706905
GPR[SPVAP]-1659844706905
GPR[EPVAP]-1659844707604
GPR[EPVS]-1659844707604
========
TimePeriodValue item=new TimePeriodValue(period,value);
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844707606
GPR[SPVAP]-1659844707606
GPR[EPVAP]-1659844708875
GPR[SPVATF]-1659844708875
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844710007
GPR[EPVS]-1659844710007
========
TimePeriodValue item=new TimePeriodValue(period,value);
this.data.add(DEFAULT_RANGE_DESCRIPTION);
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844710008
GPR[SPVAP]-1659844710008
GPR[EPVAP]-1659844711244
GPR[SPVATF]-1659844711244
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844712329
GPR[EPVS]-1659844712329
========
TimePeriodValue item=new TimePeriodValue(period,value);
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
this.data.add(DEFAULT_RANGE_DESCRIPTION);
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844712330
GPR[SPVAP]-1659844712330
GPR[EPVAP]-1659844713571
GPR[SPVATF]-1659844713571
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844714686
GPR[EPVS]-1659844714686
========
TimePeriodValue item=new TimePeriodValue(period,value);
setBackground(item);

========
MM Copying to MM
GPR[SPVS]-1659844714687
GPR[SPVAP]-1659844714687
GPR[EPVAP]-1659844715398
GPR[EPVS]-1659844715398
========
fireChangeEvent();
TimePeriodValue item=new TimePeriodValue(period,value);
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844715399
GPR[SPVAP]-1659844715399
GPR[EPVAP]-1659844716108
GPR[EPVS]-1659844716108
========
fireChartChanged();
TimePeriodValue item=new TimePeriodValue(period,value);
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844716109
GPR[SPVAP]-1659844716109
GPR[EPVAP]-1659844716816
GPR[EPVS]-1659844716816
========
fireDatasetChanged();
TimePeriodValue item=new TimePeriodValue(period,value);
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844716817
GPR[SPVAP]-1659844716817
GPR[EPVAP]-1659844717528
GPR[EPVS]-1659844717528
========
TimePeriodValue item=new TimePeriodValue(period,value);
if(value<=0.0){
throw new IllegalArgumentException("Requires \'value\' > 0.0.");
}
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844717534
GPR[SPVAP]-1659844717534
GPR[EPVAP]-1659844718779
GPR[SPVATF]-1659844718779
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844719894
GPR[EPVS]-1659844719894
========
TimePeriodValue item=new TimePeriodValue(period,value);
if(value<=0.0){
throw new IllegalArgumentException("Requires \'value\' > 0.0.");
}
this.value=value;
add(item);

========
MM Copying to MM
GPR[SPVS]-1659844719895
GPR[SPVAP]-1659844719895
GPR[EPVAP]-1659844720620
GPR[EPVS]-1659844720620
GPR[ESUN]-1659844720627
GPR[SSUN]-1659844720627
org.jfree.data.time.TimePeriodValues,364
GPR[ESUN]-1659844721104
GPR[SSUN]-1659844721104
org.jfree.data.time.TimePeriodValues,365
Find no block!
GPR[SSUN]-1659844721421
org.jfree.data.time.TimePeriodValues,375
GPR[ESUN]-1659844721771
GPR[SSUN]-1659844721771
org.jfree.data.time.TimePeriodValues,376
GPR[ESUN]-1659844722088
GPR[SSUN]-1659844722088
org.jfree.data.time.TimePeriodValues,377
Find no block!
GPR[SSUN]-1659844722420
org.jfree.data.time.TimePeriodValue,88
========
this.value=value;
this(period,new Double(value));

========
MM Copying to MM
GPR[SPVS]-1659844724319
GPR[SPVAP]-1659844724319
GPR[EPVAP]-1659844726595
GPR[EPVS]-1659844726595
GPR[ESUN]-1659844726600
GPR[SSUN]-1659844726600
org.jfree.data.time.TimePeriodValue,89
Find no block!
GPR[SSUN]-1659844729114
org.jfree.data.time.RegularTimePeriod,70
Find no block!
GPR[SSUN]-1659844729438
org.jfree.data.time.RegularTimePeriod,161
Find no block!
GPR[SSUN]-1659844729730
org.jfree.data.time.RegularTimePeriod,182
GPR[ESUN]-1659844731511
GPR[SSUN]-1659844731511
org.jfree.data.time.RegularTimePeriod,194
GPR[ESUN]-1659844733287
GPR[SSUN]-1659844733287
org.jfree.data.time.TimePeriodValue,70
Find no block!
GPR[SSUN]-1659844733600
org.jfree.data.time.TimePeriodValue,71
========
if(period==TimePeriodAnchor.END){
throw new IllegalArgumentException("Null \'period\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659844735365
GPR[SPVAP]-1659844735365
GPR[EPVAP]-1659844737588
GPR[EPVS]-1659844737588
========
if(period==null){
throw new IllegalStateException("TimePeriodAnchor unknown.");
}

========
MM Copying to MM
GPR[SPVS]-1659844737589
GPR[SPVAP]-1659844737589
GPR[EPVAP]-1659844740602
GPR[SPVATF]-1659844740602
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844741718
GPR[EPVS]-1659844741718
========
if(period!=null){
throw new IllegalArgumentException("Null \'period\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659844741719
GPR[SPVAP]-1659844741719
GPR[EPVAP]-1659844742944
GPR[SPVATF]-1659844742944
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844744070
GPR[EPVS]-1659844744070
========
if(timePeriodValue.period!=null){
throw new IllegalArgumentException("Null \'period\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659844744071
GPR[SPVAP]-1659844744071
GPR[EPVAP]-1659844744749
GPR[EPVS]-1659844744749
========
if(timePeriodValue.period==null){
throw new IllegalArgumentException("Null \'period\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659844744751
GPR[SPVAP]-1659844744751
GPR[EPVAP]-1659844745453
GPR[EPVS]-1659844745453
========
if(period==null){
if(this.period!=null?!this.period.equals(timePeriodValue.period):timePeriodValue.period!=null){
return false;
}
throw new IllegalArgumentException("Null \'period\' argument.");
}

========
MM Copying to MM
GPR[SPVS]-1659844745454
GPR[SPVAP]-1659844745454
GPR[EPVAP]-1659844746144
GPR[EPVS]-1659844746144
GPR[ESUN]-1659844746144
GPR[SSUN]-1659844746144
org.jfree.data.time.TimePeriodValue,74
========
if(period==null){
throw new IllegalArgumentException("Null \'key\' argument.");
}
this.period=period;
this.value=value;

========
MM Copying to MM
GPR[SPVS]-1659844748124
GPR[SPVAP]-1659844748124
GPR[EPVAP]-1659844752503
GPR[SPVATF]-1659844752503
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844753624
GPR[EPVS]-1659844753624
========
if(period==null){
throw new IllegalArgumentException("Null \'value\' argument.");
}
this.period=period;
this.value=value;

========
MM Copying to MM
GPR[SPVS]-1659844753626
GPR[SPVAP]-1659844753626
GPR[EPVAP]-1659844754854
GPR[SPVATF]-1659844754854
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844755944
GPR[EPVS]-1659844755944
========
notifyListeners(new DialLayerChangeEvent(this));
if(period==null){
throw new IllegalArgumentException("Null \'period\' argument.");
}
this.period=period;
this.value=value;

========
MM Copying to MM
GPR[SPVS]-1659844755945
GPR[SPVAP]-1659844755945
GPR[EPVAP]-1659844756643
GPR[EPVS]-1659844756643
========
if(period!=null){
throw new IllegalArgumentException("Null \'period\' argument.");
}
this.period=period;
this.value=value;

========
MM Copying to MM
GPR[SPVS]-1659844756644
GPR[SPVAP]-1659844756644
GPR[EPVAP]-1659844757871
GPR[SPVATF]-1659844757871
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844758960
GPR[EPVS]-1659844758960
========
if(timePeriodValue.period!=null){
throw new IllegalArgumentException("Null \'period\' argument.");
}
this.period=period;
this.value=value;

========
MM Copying to MM
GPR[SPVS]-1659844758961
GPR[SPVAP]-1659844758961
GPR[EPVAP]-1659844759647
GPR[EPVS]-1659844759647
========
if(timePeriodValue.period==null){
throw new IllegalArgumentException("Null \'period\' argument.");
}
this.period=period;
this.value=value;

========
MM Copying to MM
GPR[SPVS]-1659844759648
GPR[SPVAP]-1659844759648
GPR[EPVAP]-1659844760328
GPR[EPVS]-1659844760328
========
if(period==null){
if(this.period!=null?!this.period.equals(timePeriodValue.period):timePeriodValue.period!=null){
return false;
}
throw new IllegalArgumentException("Null \'period\' argument.");
}
this.period=period;
this.value=value;

========
MM Copying to MM
GPR[SPVS]-1659844760329
GPR[SPVAP]-1659844760329
GPR[EPVAP]-1659844761044
GPR[EPVS]-1659844761044
GPR[ESUN]-1659844761045
GPR[SSUN]-1659844761045
org.jfree.data.time.TimePeriodValue,75
GPR[ESUN]-1659844761487
GPR[SSUN]-1659844761487
org.jfree.data.time.TimePeriodValue,76
Find no block!
GPR[SSUN]-1659844761822
org.jfree.data.time.TimePeriodValue,97
GPR[ESUN]-1659844763657
GPR[SSUN]-1659844763657
org.jfree.data.time.TimePeriodValues,205
========
if((index<0)||(index>=getSubtitleCount())){
throw new IllegalArgumentException("Index out of range.");
}
return (TimePeriodValue)this.data.get(index);

========
MM Copying to MM
GPR[SPVS]-1659844765937
GPR[SPVAP]-1659844765937
GPR[EPVAP]-1659844768229
GPR[EPVS]-1659844768229
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds");
}
return (TimePeriodValue)this.data.get(index);

========
MM Copying to MM
GPR[SPVS]-1659844768230
GPR[SPVAP]-1659844768230
GPR[EPVAP]-1659844769142
GPR[EPVS]-1659844769142
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
return (TimePeriodValue)this.data.get(index);

========
MM Copying to MM
GPR[SPVS]-1659844769143
GPR[SPVAP]-1659844769143
GPR[EPVAP]-1659844770049
GPR[EPVS]-1659844770049
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Index \'series\' out of range.");
}
return (TimePeriodValue)this.data.get(index);

========
MM Copying to MM
GPR[SPVS]-1659844770051
GPR[SPVAP]-1659844770051
GPR[EPVAP]-1659844770955
GPR[EPVS]-1659844770955
========
if((index<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("The \'series\' argument is out of bounds ("+series);
}
return (TimePeriodValue)this.data.get(index);

========
MM Copying to MM
GPR[SPVS]-1659844770957
GPR[SPVAP]-1659844770957
GPR[EPVAP]-1659844771939
GPR[EPVS]-1659844771939
========
if(index<0||series>=getSeriesCount()){
throw new IllegalArgumentException("Invalid series index: "+series);
}
return (TimePeriodValue)this.data.get(index);

========
MM Copying to MM
GPR[SPVS]-1659844771942
GPR[SPVAP]-1659844771942
GPR[EPVAP]-1659844772859
GPR[EPVS]-1659844772859
GPR[ESUN]-1659844772862
GPR[SSUN]-1659844772862
org.jfree.data.time.TimePeriodValues,243
========
if(item!=null){
throw new IllegalArgumentException("Null item not allowed.");
}

========
MM Copying to MM
GPR[SPVS]-1659844774776
GPR[SPVAP]-1659844774776
GPR[EPVAP]-1659844779144
GPR[SPVATF]-1659844779144
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844780241
GPR[EPVS]-1659844780241
GPR[ESUN]-1659844780241
GPR[SSUN]-1659844780241
org.jfree.data.time.TimePeriodValues,246
========
if(item!=null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844783579
GPR[SPVAP]-1659844783579
GPR[EPVAP]-1659844787847
GPR[SPVATF]-1659844787847
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844788948
GPR[EPVS]-1659844788948
========
if(item==null){
throw new IllegalArgumentException("Null \'series\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844788949
GPR[SPVAP]-1659844788949
GPR[EPVAP]-1659844790215
GPR[SPVATF]-1659844790215
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844791349
GPR[EPVS]-1659844791349
========
fireDatasetChanged();
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844791350
GPR[SPVAP]-1659844791350
GPR[EPVAP]-1659844792048
GPR[EPVS]-1659844792048
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
copy.data=new ArrayList();
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844792049
GPR[SPVAP]-1659844792049
GPR[EPVAP]-1659844792755
GPR[EPVS]-1659844792755
========
if(item==null){
throw new IllegalArgumentException("Null \'task\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844792756
GPR[SPVAP]-1659844792756
GPR[EPVAP]-1659844794030
GPR[SPVATF]-1659844794030
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844795121
GPR[EPVS]-1659844795121
========
if(item==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844795122
GPR[SPVAP]-1659844795122
GPR[EPVAP]-1659844796381
GPR[SPVATF]-1659844796381
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844797535
GPR[EPVS]-1659844797535
========
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844797536
GPR[SPVAP]-1659844797536
GPR[EPVAP]-1659844798772
GPR[SPVATF]-1659844798772
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844801760
GPR[EPVS]-1659844801760
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data=new java.util.ArrayList();
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844801761
GPR[SPVAP]-1659844801761
GPR[EPVAP]-1659844803001
GPR[SPVATF]-1659844803001
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844804122
GPR[EPVS]-1659844804122
========
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
if(item==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844804123
GPR[SPVAP]-1659844804123
GPR[EPVAP]-1659844805382
GPR[SPVATF]-1659844805382
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844806477
GPR[EPVS]-1659844806477
========
if(item==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.data=new java.util.ArrayList();
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844806478
GPR[SPVAP]-1659844806478
GPR[EPVAP]-1659844807701
GPR[SPVATF]-1659844807701
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844808874
GPR[EPVS]-1659844808874
========
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data=new java.util.ArrayList();
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844808875
GPR[SPVAP]-1659844808875
GPR[EPVAP]-1659844810155
GPR[SPVATF]-1659844810155
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844811285
GPR[EPVS]-1659844811285
========
if(DEFAULT_RANGE_DESCRIPTION==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
if(item==null){
throw new IllegalArgumentException("Null \'paint\' argument.");
}
this.data=new java.util.ArrayList();
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844811286
GPR[SPVAP]-1659844811286
GPR[EPVAP]-1659844812558
GPR[SPVATF]-1659844812558
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844813697
GPR[EPVS]-1659844813697
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
if(minStartIndex<0){
throw new IllegalArgumentException("Negative \'maximum\' argument.");
}
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844813698
GPR[SPVAP]-1659844813698
GPR[EPVAP]-1659844814947
GPR[SPVATF]-1659844814947
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844816099
GPR[EPVS]-1659844816099
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
this.minStartIndex=minStartIndex;
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844816100
GPR[SPVAP]-1659844816100
GPR[EPVAP]-1659844817348
GPR[SPVATF]-1659844817348
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844818475
GPR[EPVS]-1659844818475
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
if(minStartIndex<0){
throw new IllegalArgumentException("Negative \'maximum\' argument.");
}
this.minStartIndex=minStartIndex;
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844818476
GPR[SPVAP]-1659844818476
GPR[EPVAP]-1659844819720
GPR[SPVATF]-1659844819720
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844820863
GPR[EPVS]-1659844820863
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
if(minStartIndex<minStartIndex){
throw new IllegalArgumentException("Requires start <= end.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844820865
GPR[SPVAP]-1659844820865
GPR[EPVAP]-1659844822132
GPR[SPVATF]-1659844822132
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844823233
GPR[EPVS]-1659844823233
========
if(item==null){
throw new IllegalArgumentException("Null \'period\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844823234
GPR[SPVAP]-1659844823234
GPR[EPVAP]-1659844824485
GPR[SPVATF]-1659844824485
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844825589
GPR[EPVS]-1659844825589
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.setBorder(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844825590
GPR[SPVAP]-1659844825590
GPR[EPVAP]-1659844826286
GPR[EPVS]-1659844826286
========
if(item==null){
throw new SeriesException("TimeSeries.update(TimePeriod, Number):  period does not exist.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844826287
GPR[SPVAP]-1659844826287
GPR[EPVAP]-1659844827525
GPR[SPVATF]-1659844827525
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844828637
GPR[EPVS]-1659844828637
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
if((minStartIndex<0)||(series>getSeriesCount())){
throw new IllegalArgumentException("Index outside valid range.");
}
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844828639
GPR[SPVAP]-1659844828639
GPR[EPVAP]-1659844829352
GPR[EPVS]-1659844829352
========
if(item==null){
throw new IllegalArgumentException("Null \'subtitle\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844829353
GPR[SPVAP]-1659844829353
GPR[EPVAP]-1659844830583
GPR[SPVATF]-1659844830583
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844831669
GPR[EPVS]-1659844831669
========
if(minStartIndex<0||index>getSubtitleCount()){
throw new IllegalArgumentException("The \'index\' argument is out of range.");
}
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844831670
GPR[SPVAP]-1659844831670
GPR[EPVAP]-1659844832370
GPR[EPVS]-1659844832370
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(data);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844832371
GPR[SPVAP]-1659844832371
GPR[EPVAP]-1659844833657
GPR[SPVATF]-1659844833657
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844834809
GPR[EPVS]-1659844834809
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
this.data=new java.util.ArrayList();
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844834810
GPR[SPVAP]-1659844834810
GPR[EPVAP]-1659844836075
GPR[SPVATF]-1659844836075
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844837196
GPR[EPVS]-1659844837196
========
if(item!=null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
this.data=new java.util.ArrayList();
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844837198
GPR[SPVAP]-1659844837198
GPR[EPVAP]-1659844838471
GPR[SPVATF]-1659844838471
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844839613
GPR[EPVS]-1659844839613
========
if(item==null){
throw new IllegalArgumentException("Null \'listener\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844839614
GPR[SPVAP]-1659844839614
GPR[EPVAP]-1659844840876
GPR[SPVATF]-1659844840876
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844842001
GPR[EPVS]-1659844842001
========
if(item==null){
throw new IllegalArgumentException("Null \'record\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844842003
GPR[SPVAP]-1659844842003
GPR[EPVAP]-1659844843242
GPR[SPVATF]-1659844843242
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844844341
GPR[EPVS]-1659844844341
========
if(item==null){
throw new IllegalArgumentException("Null \'entity\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844844342
GPR[SPVAP]-1659844844342
GPR[EPVAP]-1659844845612
GPR[SPVATF]-1659844845612
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844846734
GPR[EPVS]-1659844846734
========
if(item==null){
throw new IllegalArgumentException("Null \'subtask\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844846735
GPR[SPVAP]-1659844846735
GPR[EPVAP]-1659844848000
GPR[SPVATF]-1659844848000
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844849150
GPR[EPVS]-1659844849150
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
if((minStartIndex<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("TaskSeriesCollection.remove(): index outside valid range.");
}
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844849151
GPR[SPVAP]-1659844849151
GPR[EPVAP]-1659844849893
GPR[EPVS]-1659844849893
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
if((minStartIndex<0)||(series>=getSeriesCount())){
throw new IllegalArgumentException("Series index out of bounds.");
}
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844849894
GPR[SPVAP]-1659844849894
GPR[EPVAP]-1659844850638
GPR[EPVS]-1659844850638
========
if(item==null){
throw new IllegalArgumentException("Null \'interval\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844850640
GPR[SPVAP]-1659844850640
GPR[EPVAP]-1659844851916
GPR[SPVATF]-1659844851916
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844853037
GPR[EPVS]-1659844853037
========
if(item==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844853039
GPR[SPVAP]-1659844853039
GPR[EPVAP]-1659844854342
GPR[SPVATF]-1659844854342
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844855445
GPR[EPVS]-1659844855445
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(DEFAULT_RANGE_DESCRIPTION);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844855446
GPR[SPVAP]-1659844855446
GPR[EPVAP]-1659844856694
GPR[SPVATF]-1659844856694
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844857816
GPR[EPVS]-1659844857816
========
if(item==null){
throw new IllegalArgumentException("Null \'text\' argument.");
}
this.data.add(DEFAULT_RANGE_DESCRIPTION);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844857818
GPR[SPVAP]-1659844857818
GPR[EPVAP]-1659844859061
GPR[SPVATF]-1659844859061
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844860201
GPR[EPVS]-1659844860201
========
if(item==null){
throw new IllegalArgumentException("Null \'annotation\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844860202
GPR[SPVAP]-1659844860202
GPR[EPVAP]-1659844861439
GPR[SPVATF]-1659844861440
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844862567
GPR[EPVS]-1659844862567
========
if(item==null){
throw new IllegalArgumentException("Null \'layer\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844862568
GPR[SPVAP]-1659844862568
GPR[EPVAP]-1659844863818
GPR[SPVATF]-1659844863818
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844864902
GPR[EPVS]-1659844864902
========
if(item==null){
throw new IllegalArgumentException("Null \'pointer\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844864903
GPR[SPVAP]-1659844864903
GPR[EPVAP]-1659844866188
GPR[SPVATF]-1659844866188
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844867300
GPR[EPVS]-1659844867300
========
if(item==null){
throw new IllegalArgumentException("Cannot add null series.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844867301
GPR[SPVAP]-1659844867301
GPR[EPVAP]-1659844868555
GPR[SPVATF]-1659844868555
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844869644
GPR[EPVS]-1659844869644
========
if(item==null){
throw new IllegalArgumentException("Null \'subcategory\' axis.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844869645
GPR[SPVAP]-1659844869645
GPR[EPVAP]-1659844870974
GPR[SPVATF]-1659844870974
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844873893
GPR[EPVS]-1659844873893
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
copy.data=new java.util.ArrayList();
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844873895
GPR[SPVAP]-1659844873895
GPR[EPVAP]-1659844874603
GPR[EPVS]-1659844874603
========
if(item==null){
if(minStartIndex>=0){
return (TimeSeriesDataItem)this.data.get(index);
}else {
return null;
}
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844874605
GPR[SPVAP]-1659844874605
GPR[EPVAP]-1659844875314
GPR[EPVS]-1659844875314
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
clone.data=new java.util.ArrayList();
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844875316
GPR[SPVAP]-1659844875316
GPR[EPVAP]-1659844876034
GPR[EPVS]-1659844876034
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
clone.data=new java.util.ArrayList(getSeriesCount());
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844876035
GPR[SPVAP]-1659844876035
GPR[EPVAP]-1659844876734
GPR[EPVS]-1659844876734
========
if(item==null){
throw new IllegalArgumentException("Null \'scale\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844876735
GPR[SPVAP]-1659844876735
GPR[EPVAP]-1659844878021
GPR[SPVATF]-1659844878021
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844879155
GPR[EPVS]-1659844879155
========
fireChangeEvent();
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844879156
GPR[SPVAP]-1659844879156
GPR[EPVAP]-1659844879882
GPR[EPVS]-1659844879882
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add((OptionalLibraryHolder)this.data.get(minStartIndex).getLibrary());
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844879883
GPR[SPVAP]-1659844879884
GPR[EPVAP]-1659844880610
GPR[EPVS]-1659844880610
========
if(item==null){
throw new NullPointerException("Library classname must be given.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844880612
GPR[SPVAP]-1659844880612
GPR[EPVAP]-1659844881902
GPR[SPVATF]-1659844881902
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844883073
GPR[EPVS]-1659844883073
========
if(item==null){
throw new NullPointerException("Library must be given.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844883074
GPR[SPVAP]-1659844883074
GPR[EPVAP]-1659844884338
GPR[SPVATF]-1659844884338
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844885495
GPR[EPVS]-1659844885495
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
clone.entities=new java.util.ArrayList(this.entities.size());
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844885496
GPR[SPVAP]-1659844885496
GPR[EPVAP]-1659844886204
GPR[EPVS]-1659844886204
========
if(item==null){
throw new NullPointerException();
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844886205
GPR[SPVAP]-1659844886205
GPR[EPVAP]-1659844887480
GPR[SPVATF]-1659844887480
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844888627
GPR[EPVS]-1659844888627
========
clone.subplotInfo=new java.util.ArrayList(this.subplotInfo.size());
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844888628
GPR[SPVAP]-1659844888628
GPR[EPVAP]-1659844889340
GPR[EPVS]-1659844889340
========
if(item==null){
throw new NullPointerException("Null \'unit\' argument.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844889342
GPR[SPVAP]-1659844889342
GPR[EPVAP]-1659844890631
GPR[SPVATF]-1659844890631
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844891770
GPR[EPVS]-1659844891770
========
Collections.sort(this.data);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844891771
GPR[SPVAP]-1659844891771
GPR[EPVAP]-1659844892475
GPR[EPVS]-1659844892475
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add((Task)(TaskSeries)this.data.get(minStartIndex).getTasks().iterator().next().getDescription());
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844892477
GPR[SPVAP]-1659844892477
GPR[EPVAP]-1659844893184
GPR[EPVS]-1659844893184
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.append(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844893185
GPR[SPVAP]-1659844893185
GPR[EPVAP]-1659844893919
GPR[EPVS]-1659844893919
========
if(item==null){
if(DEFAULT_RANGE_DESCRIPTION==null){
return new String[0];
}
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844893921
GPR[SPVAP]-1659844893921
GPR[EPVAP]-1659844894670
GPR[EPVS]-1659844894670
========
clone.intervalDelegate=(IntervalXYDelegate)this.intervalDelegate.clone();
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844894671
GPR[SPVAP]-1659844894671
GPR[EPVAP]-1659844895384
GPR[EPVS]-1659844895384
========
this.minStartIndex+=minStartIndex;
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844895387
GPR[SPVAP]-1659844895387
GPR[EPVAP]-1659844896642
GPR[SPVATF]-1659844896642
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844897797
GPR[EPVS]-1659844897797
========
if(getDomainAxis()!=null){
axis.configure();
}
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844897798
GPR[SPVAP]-1659844897798
GPR[EPVAP]-1659844898511
GPR[EPVS]-1659844898511
========
this.minStartIndex+=minStartIndex;
if(getDomainAxis()!=null){
axis.configure();
}
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844898513
GPR[SPVAP]-1659844898513
GPR[EPVAP]-1659844899222
GPR[EPVS]-1659844899222
========
if(getRangeAxis()!=null){
axis.configure();
}
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844899223
GPR[SPVAP]-1659844899223
GPR[EPVAP]-1659844899936
GPR[EPVS]-1659844899936
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
setValue(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844899938
GPR[SPVAP]-1659844899938
GPR[EPVAP]-1659844900661
GPR[EPVS]-1659844900661
========
if(minStartIndex<0){
throw new IllegalArgumentException("Requires index >= 0.");
}
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844900666
GPR[SPVAP]-1659844900666
GPR[EPVAP]-1659844901911
GPR[SPVATF]-1659844901911
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844903000
GPR[EPVS]-1659844903000
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add((Number)data.listIterator().next());
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844903001
GPR[SPVAP]-1659844903001
GPR[EPVAP]-1659844904259
GPR[SPVATF]-1659844904259
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844905355
GPR[EPVS]-1659844905355
========
minStartIndex=categoryIndex+1;
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844905356
GPR[SPVAP]-1659844905356
GPR[EPVAP]-1659844906058
GPR[EPVS]-1659844906058
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
clone.columnKeys=new java.util.ArrayList(this.columnKeys);
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844906059
GPR[SPVAP]-1659844906059
GPR[EPVAP]-1659844906752
GPR[EPVS]-1659844906752
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
clone.rowKeys=new java.util.ArrayList(this.rowKeys);
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844906753
GPR[SPVAP]-1659844906753
GPR[EPVAP]-1659844907458
GPR[EPVS]-1659844907458
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
clone.rows=new java.util.ArrayList(this.rows.size());
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844907459
GPR[SPVAP]-1659844907459
GPR[EPVAP]-1659844908176
GPR[EPVS]-1659844908176
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data!=null?this.data.add(item):null;
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844908180
GPR[SPVAP]-1659844908180
GPR[EPVAP]-1659844908803
GPR[EPVS]-1659844908803
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.domain!=null?this.data.add(item):null;
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844908805
GPR[SPVAP]-1659844908805
GPR[EPVAP]-1659844909405
GPR[EPVS]-1659844909405
========
minStartIndex=29*result+(this.range!=null?this.range.hashCode():0);
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844909406
GPR[SPVAP]-1659844909406
GPR[EPVAP]-1659844910110
GPR[EPVS]-1659844910110
========
minStartIndex=29*result+this.data.hashCode();
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844910112
GPR[SPVAP]-1659844910112
GPR[EPVAP]-1659844910817
GPR[EPVS]-1659844910817
========
minStartIndex=29*result+this.minStartIndex;
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844910819
GPR[SPVAP]-1659844910819
GPR[EPVAP]-1659844911523
GPR[EPVS]-1659844911523
========
minStartIndex=29*result+this.maxStartIndex;
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844911524
GPR[SPVAP]-1659844911525
GPR[EPVAP]-1659844912267
GPR[EPVS]-1659844912267
========
minStartIndex=29*result+this.minMiddleIndex;
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844912268
GPR[SPVAP]-1659844912268
GPR[EPVAP]-1659844912968
GPR[EPVS]-1659844912968
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
case Types.TIME :

this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844912970
GPR[SPVAP]-1659844912970
GPR[EPVAP]-1659844913568
GPR[EPVS]-1659844913568
========
case Types.NULL :

if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844913569
GPR[SPVAP]-1659844913569
GPR[EPVAP]-1659844914188
GPR[EPVS]-1659844914188
========
if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
case Types.BIGINT :

this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844914191
GPR[SPVAP]-1659844914191
GPR[EPVAP]-1659844914789
GPR[EPVS]-1659844914789
========
case Types.DATE :

if(item==null){
throw new IllegalArgumentException("Null item not allowed.");
}
this.data.add(item);
updateBounds(item.getPeriod(),this.data.size()-1);
fireSeriesChanged();

========
MM Copying to MM
GPR[SPVS]-1659844914790
GPR[SPVAP]-1659844914790
GPR[EPVAP]-1659844915403
GPR[EPVS]-1659844915403
GPR[ESUN]-1659844915403
GPR[SSUN]-1659844915403
org.jfree.data.time.TimePeriodValues,247
GPR[ESUN]-1659844915961
GPR[SSUN]-1659844915961
org.jfree.data.time.TimePeriodValues,248
GPR[ESUN]-1659844916296
GPR[SSUN]-1659844916296
org.jfree.data.time.TimePeriodValues,249
Find no block!
GPR[SSUN]-1659844916608
org.jfree.data.time.TimePeriodValues,259
========
long start=period.getStart().getTime();
long end=period.getEnd().getTime();
long middle=t0+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844918459
GPR[SPVAP]-1659844918459
GPR[EPVAP]-1659844920699
GPR[EPVS]-1659844920699
========
long start=minMiddle.getStart().getTime();
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844920701
GPR[SPVAP]-1659844920701
GPR[EPVAP]-1659844921623
GPR[EPVS]-1659844921623
========
long start=period.getStart().getTime();
long end=maxMiddle.getEnd().getTime();
long middle=start+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844921624
GPR[SPVAP]-1659844921624
GPR[EPVAP]-1659844922528
GPR[EPVS]-1659844922528
========
middle=new Range(serialVersionUID+(end-s1)/2,start+(period.getEnd().getTime()-s2)/2);
long start=period.getStart().getTime();
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844922529
GPR[SPVAP]-1659844922529
GPR[EPVAP]-1659844923424
GPR[EPVS]-1659844923424
========
long start=period.getStart().getTime();
long end=period.getEnd().getTime();
long middle=s+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844923426
GPR[SPVAP]-1659844923426
GPR[EPVAP]-1659844924327
GPR[EPVS]-1659844924327
========
if(serialVersionUID<end){
this.minMiddleIndex=index;
}
long start=period.getStart().getTime();
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844924328
GPR[SPVAP]-1659844924328
GPR[EPVAP]-1659844925221
GPR[EPVS]-1659844925221
========
if(serialVersionUID>start+(end-s)/2){
this.middle=index;
}
long start=period.getStart().getTime();
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844925222
GPR[SPVAP]-1659844925222
GPR[EPVAP]-1659844926140
GPR[EPVS]-1659844926140
========
int start=period.getStart().getTime();
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844926142
GPR[SPVAP]-1659844926142
GPR[EPVAP]-1659844927043
GPR[EPVS]-1659844927043
========
long start=period.getStart().getTime();
long end=period.getEnd().getTime();
long middle=currentMillis+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844927045
GPR[SPVAP]-1659844927045
GPR[EPVAP]-1659844927950
GPR[EPVS]-1659844927950
========
if(start<0){
elapsed*=-1L;
DEFAULT_RANGE_DESCRIPTION="-";
}else {
signPrefix=this.DEFAULT_RANGE_DESCRIPTION;
}
long start=period.getStart().getTime();
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844927951
GPR[SPVAP]-1659844927951
GPR[EPVAP]-1659844928848
GPR[EPVS]-1659844928848
========
int start=period.getStart().getTime();
int end=period.getEnd().getTime();
long middle=start+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844928857
GPR[SPVAP]-1659844928857
GPR[EPVAP]-1659844929786
GPR[EPVS]-1659844929786
========
long start=period.getStart().getTime();
int end=period.getEnd().getTime();
long middle=start+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844929787
GPR[SPVAP]-1659844929787
GPR[EPVAP]-1659844930749
GPR[EPVS]-1659844930749
========
double start=period.getStart().getTime();
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844930755
GPR[SPVAP]-1659844930755
GPR[EPVAP]-1659844931730
GPR[EPVS]-1659844931730
========
if(start<=end){
return new SegmentRange(start,end);
}else {
return null;
}
long start=period.getStart().getTime();
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844931732
GPR[SPVAP]-1659844931732
GPR[EPVAP]-1659844932614
GPR[EPVS]-1659844932614
========
Calendar.getInstance().set(getYYYY(),getMonth()-1,getDayOfMonth(),0,0,0);
long start=period.getStart().getTime();
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844932616
GPR[SPVAP]-1659844932616
GPR[EPVAP]-1659844933521
GPR[EPVS]-1659844933521
========
case Types.TIME :

long start=period.getStart().getTime();
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);

========
MM Copying to MM
GPR[SPVS]-1659844933523
GPR[SPVAP]-1659844933523
GPR[EPVAP]-1659844934160
GPR[EPVS]-1659844934160
GPR[ESUN]-1659844934160
GPR[SSUN]-1659844934160
org.jfree.data.time.TimePeriodValues,260
GPR[ESUN]-1659844934551
GPR[SSUN]-1659844934551
org.jfree.data.time.TimePeriodValues,261
========
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(middle<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844936648
GPR[SPVAP]-1659844936648
GPR[EPVAP]-1659844940966
GPR[SPVATF]-1659844940966
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844942108
GPR[EPVS]-1659844942108
========
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844942110
GPR[SPVAP]-1659844942110
GPR[EPVAP]-1659844943379
GPR[SPVATF]-1659844943379
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844944510
GPR[EPVS]-1659844944510
========
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
if(middle<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844944511
GPR[SPVAP]-1659844944511
GPR[EPVAP]-1659844947687
GPR[SPVATF]-1659844947687
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844948795
GPR[EPVS]-1659844948795
========
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(end<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844948797
GPR[SPVAP]-1659844948797
GPR[EPVAP]-1659844950082
GPR[SPVATF]-1659844950082
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844951179
GPR[EPVS]-1659844951179
========
if(minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844951185
GPR[SPVAP]-1659844951185
GPR[EPVAP]-1659844952439
GPR[SPVATF]-1659844952439
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844953540
GPR[EPVS]-1659844953540
========
if(this.minStartIndex>=minStartIndex){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844953542
GPR[SPVAP]-1659844953542
GPR[EPVAP]-1659844954779
GPR[SPVATF]-1659844954779
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844955881
GPR[EPVS]-1659844955881
========
case 1 :

if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844955889
GPR[SPVAP]-1659844955889
GPR[EPVAP]-1659844956485
GPR[EPVS]-1659844956485
========
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
return (TickUnit)this.data.get(Math.min(minStartIndex,this.tickUnits.size()-1));
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844956493
GPR[SPVAP]-1659844956493
GPR[EPVAP]-1659844957211
GPR[EPVS]-1659844957211
========
if(minStart>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844957213
GPR[SPVAP]-1659844957213
GPR[EPVAP]-1659844957964
GPR[EPVS]-1659844957964
========
fireChartChanged();
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844957965
GPR[SPVAP]-1659844957965
GPR[EPVAP]-1659844958673
GPR[EPVS]-1659844958673
========
if(this.minStartIndex>=0){
try{
overwritten=(XYDataItem)(XYDataItem)this.data.get(minStartIndex).clone();
}catch (CloneNotSupportedException e) {
  throw new SeriesException("Couldn't clone XYDataItem!");
}

long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844958675
GPR[SPVAP]-1659844958675
GPR[EPVAP]-1659844959388
GPR[EPVS]-1659844959388
========
if(this.minStartIndex>=0){
overwritten=(TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(minStartIndex).clone();
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844959390
GPR[SPVAP]-1659844959390
GPR[EPVAP]-1659844960109
GPR[EPVS]-1659844960109
========
if(this.minStartIndex>=0){
removeAgedItems(false);
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844960110
GPR[SPVAP]-1659844960110
GPR[EPVAP]-1659844960822
GPR[EPVS]-1659844960822
========
if(this.minStartIndex>=0){
fireSeriesChanged();
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844960823
GPR[SPVAP]-1659844960823
GPR[EPVAP]-1659844962124
GPR[SPVATF]-1659844962124
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844963217
GPR[EPVS]-1659844963217
========
if(this.minStartIndex>=0){
overwritten=(TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(minStartIndex).clone();
removeAgedItems(false);
fireSeriesChanged();

long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844963218
GPR[SPVAP]-1659844963218
GPR[EPVAP]-1659844963919
GPR[EPVS]-1659844963919
========
if(minStartIndex>=0){
fireSeriesChanged();
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844963920
GPR[SPVAP]-1659844963920
GPR[EPVAP]-1659844965167
GPR[SPVATF]-1659844965167
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844966257
GPR[EPVS]-1659844966257
========
case (DateTickUnit.SECOND) :

long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844968094
GPR[SPVAP]-1659844968094
GPR[EPVAP]-1659844968706
GPR[EPVS]-1659844968706
========
long end=minMiddle.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844968707
GPR[SPVAP]-1659844968707
GPR[EPVAP]-1659844969403
GPR[EPVS]-1659844969403
========
long end=maxMiddle.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844969404
GPR[SPVAP]-1659844969404
GPR[EPVAP]-1659844970108
GPR[EPVS]-1659844970108
========
int end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844970110
GPR[SPVAP]-1659844970110
GPR[EPVAP]-1659844970805
GPR[EPVS]-1659844970805
========
case (DateTickUnit.YEAR) :

long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844970807
GPR[SPVAP]-1659844970807
GPR[EPVAP]-1659844971406
GPR[EPVS]-1659844971406
========
long end=period.getEnd().getTime();
long middle=currentMillis+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844971410
GPR[SPVAP]-1659844971410
GPR[EPVAP]-1659844972136
GPR[EPVS]-1659844972136
========
if(minStart<0){
elapsed*=-1L;
DEFAULT_RANGE_DESCRIPTION="-";
}else {
signPrefix=this.DEFAULT_RANGE_DESCRIPTION;
}
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844972137
GPR[SPVAP]-1659844972137
GPR[EPVAP]-1659844972838
GPR[EPVS]-1659844972838
========
double end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844972841
GPR[SPVAP]-1659844972841
GPR[EPVAP]-1659844973547
GPR[EPVS]-1659844973547
========
if(minStart<=end){
return new SegmentRange(start,end);
}else {
return null;
}
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844973552
GPR[SPVAP]-1659844973552
GPR[EPVAP]-1659844974267
GPR[EPVS]-1659844974267
========
new GregorianCalendar(new SimpleTimeZone(TimeZone.getDefault().getRawOffset(),"UTC-"+offset)).set(1900,0,1,0,0,0);
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844974270
GPR[SPVAP]-1659844974270
GPR[EPVAP]-1659844974970
GPR[EPVS]-1659844974970
========
new GregorianCalendar(new SimpleTimeZone(TimeZone.getDefault().getRawOffset(),"UTC-"+offset)).set(Calendar.MILLISECOND,0);
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844974971
GPR[SPVAP]-1659844974971
GPR[EPVAP]-1659844975678
GPR[EPVS]-1659844975678
========
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=minStartIndex){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844975682
GPR[SPVAP]-1659844975682
GPR[EPVAP]-1659844976921
GPR[SPVATF]-1659844976921
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844978070
GPR[EPVS]-1659844978070
========
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844978075
GPR[SPVAP]-1659844978075
GPR[EPVAP]-1659844979329
GPR[SPVATF]-1659844979329
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844980476
GPR[EPVS]-1659844980476
========
if((DialLayer)this.data.get(index)!=null){
layer.removeChangeListener(this);
}
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844980478
GPR[SPVAP]-1659844980478
GPR[EPVAP]-1659844981179
GPR[EPVS]-1659844981179
========
this.data.remove(index);
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844981180
GPR[SPVAP]-1659844981180
GPR[EPVAP]-1659844982440
GPR[SPVATF]-1659844982440
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844983589
GPR[EPVS]-1659844983589
========
fireChangeEvent();
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844983590
GPR[SPVAP]-1659844983590
GPR[EPVAP]-1659844984302
GPR[EPVS]-1659844984302
========
if((DialPointer)this.data.get(index)!=null){
pointer.removeChangeListener(this);
}
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844984303
GPR[SPVAP]-1659844984303
GPR[EPVAP]-1659844985003
GPR[EPVS]-1659844985003
========
this.data.remove(index);
fireChangeEvent();
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844985004
GPR[SPVAP]-1659844985004
GPR[EPVAP]-1659844985731
GPR[EPVS]-1659844985731
========
fireSeriesChanged();
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844985733
GPR[SPVAP]-1659844985733
GPR[EPVAP]-1659844987004
GPR[SPVATF]-1659844987004
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844988187
GPR[EPVS]-1659844988187
========
int end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844988189
GPR[SPVAP]-1659844988189
GPR[EPVAP]-1659844988894
GPR[EPVS]-1659844988894
========
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
return (TickUnit)this.data.get(Math.min(minStartIndex,this.tickUnits.size()-1));
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844988895
GPR[SPVAP]-1659844988895
GPR[EPVAP]-1659844989617
GPR[EPVS]-1659844989617
========
case 1 :

long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844989619
GPR[SPVAP]-1659844989619
GPR[EPVAP]-1659844990222
GPR[EPVS]-1659844990222
========
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(index>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844990225
GPR[SPVAP]-1659844990225
GPR[EPVAP]-1659844991460
GPR[SPVATF]-1659844991460
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844992637
GPR[EPVS]-1659844992637
========
if(minStart>=0){
return (KeyedObjects)this.data.get(minStartIndex).getObject(index);
}else {
return null;
}
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844992642
GPR[SPVAP]-1659844992642
GPR[EPVAP]-1659844993359
GPR[EPVS]-1659844993359
========
if(index<0||index>=getDatasetCount()){
throw new IllegalArgumentException("Index "+index);
}
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844993361
GPR[SPVAP]-1659844993361
GPR[EPVAP]-1659844994070
GPR[EPVS]-1659844994070
========
Calendar.getInstance().set(getYYYY(),getMonth()-1,getDayOfMonth(),0,0,0);
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844994072
GPR[SPVAP]-1659844994072
GPR[EPVAP]-1659844994780
GPR[EPVS]-1659844994780
========
if(getRenderer(index)==null){
return ;
}
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844994782
GPR[SPVAP]-1659844994782
GPR[EPVAP]-1659844995523
GPR[EPVS]-1659844995523
========
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(getRenderer(minStartIndex)==null){
return ;
}
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844995526
GPR[SPVAP]-1659844995526
GPR[EPVAP]-1659844996234
GPR[EPVS]-1659844996234
========
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(getRenderer(minStartIndex)==null){
return ;
}
if(minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844996236
GPR[SPVAP]-1659844996236
GPR[EPVAP]-1659844996946
GPR[EPVS]-1659844996946
========
long end=period.getEnd().getTime();
int middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844996949
GPR[SPVAP]-1659844996949
GPR[EPVAP]-1659844997648
GPR[EPVS]-1659844997648
========
if(DEFAULT_RANGE_DESCRIPTION.startsWith("/")){
return name.substring(1);
}
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844997650
GPR[SPVAP]-1659844997650
GPR[EPVAP]-1659844998353
GPR[EPVS]-1659844998353
========
if(index==-1){
return DEFAULT_RANGE_DESCRIPTION;
}
long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844998354
GPR[SPVAP]-1659844998354
GPR[EPVAP]-1659844999062
GPR[EPVS]-1659844999062
========
case Types.TIME :

long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844999067
GPR[SPVAP]-1659844999067
GPR[EPVAP]-1659844999661
GPR[EPVS]-1659844999661
========
case Types.CHAR :

long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659844999663
GPR[SPVAP]-1659844999663
GPR[EPVAP]-1659845000295
GPR[EPVS]-1659845000295
========
default :

long end=period.getEnd().getTime();
long middle=start+((end-start)/2);
if(this.minStartIndex>=0){
long minStart=getDataItem(this.minStartIndex).getPeriod().getStart().getTime();
if(start<minStart){
this.minStartIndex=index;
}
}else {
this.minStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845000297
GPR[SPVAP]-1659845000297
GPR[EPVAP]-1659845000890
GPR[EPVS]-1659845000890
GPR[ESUN]-1659845000890
GPR[SSUN]-1659845000890
org.jfree.data.time.TimePeriodValues,263
GPR[ESUN]-1659845001358
GPR[SSUN]-1659845001358
org.jfree.data.time.TimePeriodValues,264
GPR[ESUN]-1659845001801
GPR[SSUN]-1659845001801
org.jfree.data.time.TimePeriodValues,266
GPR[ESUN]-1659845002160
GPR[SSUN]-1659845002160
org.jfree.data.time.TimePeriodValues,269
Find no block!
GPR[SSUN]-1659845002495
org.jfree.data.time.TimePeriodValues,271
GPR[ESUN]-1659845002810
GPR[SSUN]-1659845002810
org.jfree.data.time.TimePeriodValues,274
========
if(middle>maxStart){
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845004701
GPR[SPVAP]-1659845004701
GPR[EPVAP]-1659845009044
GPR[SPVATF]-1659845009044
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845010146
GPR[EPVS]-1659845010146
========
if(end>maxStart){
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845010148
GPR[SPVAP]-1659845010148
GPR[EPVAP]-1659845011438
GPR[SPVATF]-1659845011438
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845012560
GPR[EPVS]-1659845012560
========
this.start=start;
if(start>maxStart){
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845012562
GPR[SPVAP]-1659845012562
GPR[EPVAP]-1659845013284
GPR[EPVS]-1659845013284
========
this.maxStart=end;
if(start>maxStart){
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845013285
GPR[SPVAP]-1659845013285
GPR[EPVAP]-1659845013985
GPR[EPVS]-1659845013985
========
if(this.maxStartIndex>=0){
long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
if(middle>maxStart){
this.maxStartIndex=index;
}
}else {
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845015799
GPR[SPVAP]-1659845015799
GPR[EPVAP]-1659845017058
GPR[SPVATF]-1659845017058
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845020035
GPR[EPVS]-1659845020035
========
if(this.maxStartIndex>=0){
long maxStart=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
if(start>maxStart){
this.maxStartIndex=index;
}
}else {
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845020037
GPR[SPVAP]-1659845020037
GPR[EPVAP]-1659845021253
GPR[SPVATF]-1659845021253
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845022355
GPR[EPVS]-1659845022355
========
if(this.maxStartIndex>=0){
long maxStart=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
if(middle>maxStart){
this.maxStartIndex=index;
}
}else {
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845022357
GPR[SPVAP]-1659845022357
GPR[EPVAP]-1659845023583
GPR[SPVATF]-1659845023583
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845024681
GPR[EPVS]-1659845024681
========
if(this.maxStartIndex>=0){
long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
if(end>maxStart){
this.maxStartIndex=index;
}
}else {
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845024682
GPR[SPVAP]-1659845024682
GPR[EPVAP]-1659845025946
GPR[SPVATF]-1659845025946
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845027046
GPR[EPVS]-1659845027046
========
if(maxStartIndex>=0){
long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
if(start>maxStart){
this.maxStartIndex=index;
}
}else {
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845027051
GPR[SPVAP]-1659845027051
GPR[EPVAP]-1659845028306
GPR[SPVATF]-1659845028306
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845029441
GPR[EPVS]-1659845029441
========
if(this.maxStartIndex>=maxStartIndex){
long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
if(start>maxStart){
this.maxStartIndex=index;
}
}else {
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845029443
GPR[SPVAP]-1659845029443
GPR[EPVAP]-1659845030687
GPR[SPVATF]-1659845030687
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845031837
GPR[EPVS]-1659845031837
========
case 1 :

if(this.maxStartIndex>=0){
long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
if(start>maxStart){
this.maxStartIndex=index;
}
}else {
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845031844
GPR[SPVAP]-1659845031844
GPR[EPVAP]-1659845032450
GPR[EPVS]-1659845032450
========
if(this.maxStartIndex>=0){
long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
if(start>maxStart){
this.maxStartIndex=index;
}
}else {
return (TickUnit)this.data.get(Math.min(maxStartIndex,this.tickUnits.size()-1));
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845032454
GPR[SPVAP]-1659845032454
GPR[EPVAP]-1659845033151
GPR[EPVS]-1659845033151
========
if(maxStart>=0){
long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
if(start>maxStart){
this.maxStartIndex=index;
}
}else {
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845033152
GPR[SPVAP]-1659845033152
GPR[EPVAP]-1659845033870
GPR[EPVS]-1659845033870
========
fireChartChanged();
if(this.maxStartIndex>=0){
long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
if(start>maxStart){
this.maxStartIndex=index;
}
}else {
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845033871
GPR[SPVAP]-1659845033871
GPR[EPVAP]-1659845034582
GPR[EPVS]-1659845034582
========
if(this.maxStartIndex>=0){
try{
overwritten=(XYDataItem)(XYDataItem)this.data.get(maxStartIndex).clone();
}catch (CloneNotSupportedException e) {
  throw new SeriesException("Couldn't clone XYDataItem!");
}

long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
if(start>maxStart){
this.maxStartIndex=index;
}
}else {
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845034583
GPR[SPVAP]-1659845034583
GPR[EPVAP]-1659845035304
GPR[EPVS]-1659845035305
========
if(this.maxStartIndex>=0){
overwritten=(TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(maxStartIndex).clone();
long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
if(start>maxStart){
this.maxStartIndex=index;
}
}else {
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845035307
GPR[SPVAP]-1659845035307
GPR[EPVAP]-1659845036010
GPR[EPVS]-1659845036010
========
if(this.maxStartIndex>=0){
removeAgedItems(false);
long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
if(start>maxStart){
this.maxStartIndex=index;
}
}else {
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845036011
GPR[SPVAP]-1659845036011
GPR[EPVAP]-1659845036717
GPR[EPVS]-1659845036717
========
if(this.maxStartIndex>=0){
fireSeriesChanged();
long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
if(start>maxStart){
this.maxStartIndex=index;
}
}else {
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845036718
GPR[SPVAP]-1659845036718
GPR[EPVAP]-1659845037988
GPR[SPVATF]-1659845037988
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845039084
GPR[EPVS]-1659845039084
========
if(this.maxStartIndex>=0){
overwritten=(TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(maxStartIndex).clone();
removeAgedItems(false);
fireSeriesChanged();

long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
if(start>maxStart){
this.maxStartIndex=index;
}
}else {
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845039086
GPR[SPVAP]-1659845039086
GPR[EPVAP]-1659845039784
GPR[EPVS]-1659845039784
========
if(maxStartIndex>=0){
fireSeriesChanged();
long maxStart=getDataItem(this.maxStartIndex).getPeriod().getStart().getTime();
if(start>maxStart){
this.maxStartIndex=index;
}
}else {
this.maxStartIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845039786
GPR[SPVAP]-1659845039786
GPR[EPVAP]-1659845041038
GPR[SPVATF]-1659845041038
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845042128
GPR[EPVS]-1659845042128
GPR[ESUN]-1659845042132
GPR[SSUN]-1659845042132
org.jfree.data.time.TimePeriodValues,275
GPR[ESUN]-1659845042576
GPR[SSUN]-1659845042576
org.jfree.data.time.TimePeriodValues,277
GPR[ESUN]-1659845042889
GPR[SSUN]-1659845042889
org.jfree.data.time.TimePeriodValues,278
GPR[ESUN]-1659845043173
GPR[SSUN]-1659845043173
org.jfree.data.time.TimePeriodValues,280
Find no block!
GPR[SSUN]-1659845043518
org.jfree.data.time.TimePeriodValues,282
GPR[ESUN]-1659845043833
GPR[SSUN]-1659845043833
org.jfree.data.time.TimePeriodValues,285
========
if(this.minMiddleIndex>=0){
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(s<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845046016
GPR[SPVAP]-1659845046016
GPR[EPVAP]-1659845050467
GPR[SPVATF]-1659845050467
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845051556
GPR[EPVS]-1659845051556
========
if(this.minMiddleIndex>=0){
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(start<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845051558
GPR[SPVAP]-1659845051558
GPR[EPVAP]-1659845052849
GPR[SPVATF]-1659845052849
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845053981
GPR[EPVS]-1659845053981
========
if(this.minMiddleIndex>=0){
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(end<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845053983
GPR[SPVAP]-1659845053983
GPR[EPVAP]-1659845055215
GPR[SPVATF]-1659845055215
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845056300
GPR[EPVS]-1659845056300
========
case 1 :

if(this.minMiddleIndex>=0){
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(middle<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845056318
GPR[SPVAP]-1659845056318
GPR[EPVAP]-1659845056949
GPR[EPVS]-1659845056949
========
if(minMiddleIndex>=0){
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(middle<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845056953
GPR[SPVAP]-1659845056953
GPR[EPVAP]-1659845058198
GPR[SPVATF]-1659845058198
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845059331
GPR[EPVS]-1659845059331
========
if(this.minMiddleIndex>=0){
try{
overwritten=(XYDataItem)(XYDataItem)this.data.get(minMiddleIndex).clone();
}catch (CloneNotSupportedException e) {
  throw new SeriesException("Couldn't clone XYDataItem!");
}

long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(middle<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845059332
GPR[SPVAP]-1659845059332
GPR[EPVAP]-1659845060078
GPR[EPVS]-1659845060078
========
if(this.minMiddleIndex>=0){
overwritten=(TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(minMiddleIndex).clone();
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(middle<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845060080
GPR[SPVAP]-1659845060080
GPR[EPVAP]-1659845060782
GPR[EPVS]-1659845060782
========
if(this.minMiddleIndex>=0){
removeAgedItems(false);
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(middle<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845060784
GPR[SPVAP]-1659845060784
GPR[EPVAP]-1659845061502
GPR[EPVS]-1659845061502
========
if(this.minMiddleIndex>=0){
fireSeriesChanged();
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(middle<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845061504
GPR[SPVAP]-1659845061504
GPR[EPVAP]-1659845062741
GPR[SPVATF]-1659845062741
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845063928
GPR[EPVS]-1659845063928
========
if(this.minMiddleIndex>=0){
overwritten=(TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(minMiddleIndex).clone();
removeAgedItems(false);
fireSeriesChanged();

long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(middle<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845063929
GPR[SPVAP]-1659845063929
GPR[EPVAP]-1659845064628
GPR[EPVS]-1659845064628
========
if(minMiddleIndex>=0){
fireSeriesChanged();
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(middle<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845064629
GPR[SPVAP]-1659845064629
GPR[EPVAP]-1659845065894
GPR[SPVATF]-1659845065894
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845066998
GPR[EPVS]-1659845066998
========
if(s>=0){
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(middle<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845067003
GPR[SPVAP]-1659845067003
GPR[EPVAP]-1659845067718
GPR[EPVS]-1659845067718
========
if(minMiddle==null){
return ;
}
if(this.minMiddleIndex>=0){
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(middle<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845067721
GPR[SPVAP]-1659845067721
GPR[EPVAP]-1659845068434
GPR[EPVS]-1659845068434
========
if(minMiddle==null){
return ;
}
if(minMiddleIndex>=0){
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(middle<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845068435
GPR[SPVAP]-1659845068435
GPR[EPVAP]-1659845069151
GPR[EPVS]-1659845069151
========
if(s<0){
throw new IllegalArgumentException("Requires index >= 0.");
}
if(this.minMiddleIndex>=0){
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(middle<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845069154
GPR[SPVAP]-1659845069154
GPR[EPVAP]-1659845069866
GPR[EPVS]-1659845069866
========
this.minMiddle=Math.max(this.size,s+1);
if(this.minMiddleIndex>=0){
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long minMiddle=s+(e-s)/2;
if(middle<minMiddle){
this.minMiddleIndex=index;
}
}else {
this.minMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845069867
GPR[SPVAP]-1659845069867
GPR[EPVAP]-1659845070593
GPR[EPVS]-1659845070593
GPR[ESUN]-1659845070598
GPR[SSUN]-1659845070598
org.jfree.data.time.TimePeriodValues,286
GPR[ESUN]-1659845071039
GPR[SSUN]-1659845071039
org.jfree.data.time.TimePeriodValues,288
GPR[ESUN]-1659845071328
GPR[SSUN]-1659845071328
org.jfree.data.time.TimePeriodValues,290
GPR[ESUN]-1659845071640
GPR[SSUN]-1659845071640
org.jfree.data.time.TimePeriodValues,291
GPR[ESUN]-1659845071940
GPR[SSUN]-1659845071940
org.jfree.data.time.TimePeriodValues,294
Find no block!
GPR[SSUN]-1659845072226
org.jfree.data.time.TimePeriodValues,296
GPR[ESUN]-1659845072557
GPR[SSUN]-1659845072557
org.jfree.data.time.TimePeriodValues,299
========
if(start>maxMiddle){
this.maxMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845074399
GPR[SPVAP]-1659845074399
GPR[EPVAP]-1659845078782
GPR[SPVATF]-1659845078782
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845079894
GPR[EPVS]-1659845079894
========
if(end>maxMiddle){
this.maxMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845079895
GPR[SPVAP]-1659845079895
GPR[EPVAP]-1659845081174
GPR[SPVATF]-1659845081174
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845082272
GPR[EPVS]-1659845082272
========
removeValue(index);
if(middle>maxMiddle){
this.maxMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845082282
GPR[SPVAP]-1659845082282
GPR[EPVAP]-1659845083016
GPR[EPVS]-1659845083016
========
removeRow(index);
if(middle>maxMiddle){
this.maxMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845083018
GPR[SPVAP]-1659845083018
GPR[EPVAP]-1659845083734
GPR[EPVS]-1659845083734
========
if(this.maxMiddleIndex>=0){
long s=getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime();
long maxMiddle=s+(e-s)/2;
if(middle>maxMiddle){
this.maxMiddleIndex=index;
}
}else {
this.maxMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845085553
GPR[SPVAP]-1659845085553
GPR[EPVAP]-1659845086789
GPR[SPVATF]-1659845086789
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 0
GPR[EPVATF]-1659845087913
GPR[SPVATR]-1659845087914
TESTING : chart_7
MM messageFailing tests: 0
GPR[EPVATR]-1659845098564
GPR[EPVS]-1659845098564
GPR[PF]-1659845098564
sourceFile  script/workingdir/SimFix/chart/chart_7_buggy/source/org/jfree/data/time/TimePeriodValues.java
location   script/workingdir/SimFix/chart/chart_7_buggy
MM Out patch at /experiment_home///results/SimFix/Chart/7/seed_260/patch/chart/7/0/patch_1073398_1_ts_1659845098564.diff
MM Command diff diff -w -b  --label=/source/org/jfree/data/time/TimePeriodValues.java --label=/source/org/jfree/data/time/TimePeriodValues.java /tmp/tmpDirMM4870064128888980205/TimePeriodValues.java  /experiment_home///results/SimFix/Chart/7/seed_260/patch/chart/7/0/1_TimePeriodValues.java  --unified=3  > /experiment_home///results/SimFix/Chart/7/seed_260/patch/chart/7/0/patch_1073398_1_ts_1659845098564.diff
MMOut command diff: []
========
if(this.maxMiddleIndex>=0){
long s=getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long maxMiddle=s+(e-s)/2;
if(middle>maxMiddle){
this.maxMiddleIndex=index;
}
}else {
this.maxMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845098576
GPR[SPVAP]-1659845098576
GPR[EPVAP]-1659845099875
GPR[SPVATF]-1659845099875
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 0
GPR[EPVATF]-1659845100973
GPR[SPVATR]-1659845100974
TESTING : chart_7
MM messageFailing tests: 0
GPR[EPVATR]-1659845111447
GPR[EPVS]-1659845111447
GPR[PF]-1659845111447
sourceFile  script/workingdir/SimFix/chart/chart_7_buggy/source/org/jfree/data/time/TimePeriodValues.java
location   script/workingdir/SimFix/chart/chart_7_buggy
MM Out patch at /experiment_home///results/SimFix/Chart/7/seed_260/patch/chart/7/0/patch_1086278_2_ts_1659845111447.diff
MM Command diff diff -w -b  --label=/source/org/jfree/data/time/TimePeriodValues.java --label=/source/org/jfree/data/time/TimePeriodValues.java /tmp/tmpDirMM3060412319959370763/TimePeriodValues.java  /experiment_home///results/SimFix/Chart/7/seed_260/patch/chart/7/0/2_TimePeriodValues.java  --unified=3  > /experiment_home///results/SimFix/Chart/7/seed_260/patch/chart/7/0/patch_1086278_2_ts_1659845111447.diff
MMOut command diff: []
========
if(this.maxMiddleIndex>=0){
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.maxMiddleIndex).getPeriod().getEnd().getTime();
long maxMiddle=s+(e-s)/2;
if(middle>maxMiddle){
this.maxMiddleIndex=index;
}
}else {
this.maxMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845111455
GPR[SPVAP]-1659845111455
GPR[EPVAP]-1659845112706
GPR[SPVATF]-1659845112706
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 0
GPR[EPVATF]-1659845113797
GPR[SPVATR]-1659845113798
TESTING : chart_7
MM messageFailing tests: 0
GPR[EPVATR]-1659845124088
GPR[EPVS]-1659845124088
GPR[PF]-1659845124088
sourceFile  script/workingdir/SimFix/chart/chart_7_buggy/source/org/jfree/data/time/TimePeriodValues.java
location   script/workingdir/SimFix/chart/chart_7_buggy
MM Out patch at /experiment_home///results/SimFix/Chart/7/seed_260/patch/chart/7/0/patch_1098919_3_ts_1659845124088.diff
MM Command diff diff -w -b  --label=/source/org/jfree/data/time/TimePeriodValues.java --label=/source/org/jfree/data/time/TimePeriodValues.java /tmp/tmpDirMM7446827422275952168/TimePeriodValues.java  /experiment_home///results/SimFix/Chart/7/seed_260/patch/chart/7/0/3_TimePeriodValues.java  --unified=3  > /experiment_home///results/SimFix/Chart/7/seed_260/patch/chart/7/0/patch_1098919_3_ts_1659845124088.diff
MMOut command diff: []
========
if(this.maxMiddleIndex>=0){
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long maxMiddle=s+(e-s)/2;
if(start>maxMiddle){
this.maxMiddleIndex=index;
}
}else {
this.maxMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845124096
GPR[SPVAP]-1659845124096
GPR[EPVAP]-1659845125353
GPR[SPVATF]-1659845125353
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845126479
GPR[EPVS]-1659845126479
========
if(this.maxMiddleIndex>=0){
long s=getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long maxMiddle=s+(e-s)/2;
if(start>maxMiddle){
this.maxMiddleIndex=index;
}
}else {
this.maxMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845126480
GPR[SPVAP]-1659845126480
GPR[EPVAP]-1659845127722
GPR[SPVATF]-1659845127722
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 0
GPR[EPVATF]-1659845128820
GPR[SPVATR]-1659845128821
TESTING : chart_7
MM message  - org.jfree.data.time.junit.TimePeriodValuesCollectionTests::testGetDomainBoundsWithoutInterval
MM messageFailing tests: 1
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659845138893
GPR[EPVS]-1659845138893
========
if(this.maxMiddleIndex>=0){
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long maxMiddle=s+(e-s)/2;
if(end>maxMiddle){
this.maxMiddleIndex=index;
}
}else {
this.maxMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845138895
GPR[SPVAP]-1659845138895
GPR[EPVAP]-1659845140115
GPR[SPVATF]-1659845140115
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845141233
GPR[EPVS]-1659845141233
========
if(this.maxMiddleIndex>=0){
long s=getDataItem(this.maxMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long maxMiddle=s+(e-s)/2;
if(end>maxMiddle){
this.maxMiddleIndex=index;
}
}else {
this.maxMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845141234
GPR[SPVAP]-1659845141234
GPR[EPVAP]-1659845142522
GPR[SPVATF]-1659845142522
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845143613
GPR[EPVS]-1659845143613
========
case 1 :

if(this.maxMiddleIndex>=0){
long s=getDataItem(this.minMiddleIndex).getPeriod().getStart().getTime();
long e=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
long maxMiddle=s+(e-s)/2;
if(middle>maxMiddle){
this.maxMiddleIndex=index;
}
}else {
this.maxMiddleIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845143639
GPR[SPVAP]-1659845143639
GPR[EPVAP]-1659845144234
GPR[EPVS]-1659845144234
GPR[ESUN]-1659845144249
GPR[SSUN]-1659845144249
org.jfree.data.time.TimePeriodValues,300
GPR[ESUN]-1659845144725
GPR[SSUN]-1659845144725
org.jfree.data.time.TimePeriodValues,302
GPR[ESUN]-1659845145025
GPR[SSUN]-1659845145025
org.jfree.data.time.TimePeriodValues,304
GPR[ESUN]-1659845145345
GPR[SSUN]-1659845145345
org.jfree.data.time.TimePeriodValues,305
GPR[ESUN]-1659845145642
GPR[SSUN]-1659845145642
org.jfree.data.time.TimePeriodValues,306
GPR[ESUN]-1659845145938
GPR[SSUN]-1659845145938
org.jfree.data.time.TimePeriodValues,308
Find no block!
GPR[SSUN]-1659845146281
org.jfree.data.time.TimePeriodValues,310
GPR[ESUN]-1659845146611
GPR[SSUN]-1659845146611
org.jfree.data.time.TimePeriodValues,313
========
if(this.minEndIndex>=0){
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(middle<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845148724
GPR[SPVAP]-1659845148724
GPR[EPVAP]-1659845153018
GPR[SPVATF]-1659845153018
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845154113
GPR[EPVS]-1659845154113
========
if(this.minEndIndex>=0){
long minEnd=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845154115
GPR[SPVAP]-1659845154115
GPR[EPVAP]-1659845155416
GPR[SPVATF]-1659845155416
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845156557
GPR[EPVS]-1659845156557
========
if(this.minEndIndex>=0){
long minEnd=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
if(middle<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845156558
GPR[SPVAP]-1659845156558
GPR[EPVAP]-1659845157803
GPR[SPVATF]-1659845157803
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845158889
GPR[EPVS]-1659845158889
========
if(this.minEndIndex>=0){
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(start<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845158891
GPR[SPVAP]-1659845158891
GPR[EPVAP]-1659845160124
GPR[SPVATF]-1659845160124
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845161212
GPR[EPVS]-1659845161212
========
case 1 :

if(this.minEndIndex>=0){
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845161223
GPR[SPVAP]-1659845161223
GPR[EPVAP]-1659845161845
GPR[EPVS]-1659845161845
========
if(this.minEndIndex>=minEndIndex){
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845161849
GPR[SPVAP]-1659845161849
GPR[EPVAP]-1659845164974
GPR[SPVATF]-1659845164974
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845166063
GPR[EPVS]-1659845166063
========
if(minEndIndex>=0){
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845166066
GPR[SPVAP]-1659845166066
GPR[EPVAP]-1659845167294
GPR[SPVATF]-1659845167294
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845168393
GPR[EPVS]-1659845168393
========
if(this.minEndIndex>=0){
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
return (TickUnit)this.data.get(Math.min(minEndIndex,this.tickUnits.size()-1));
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845168394
GPR[SPVAP]-1659845168394
GPR[EPVAP]-1659845169104
GPR[EPVS]-1659845169104
========
if(minEnd>=0){
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845169106
GPR[SPVAP]-1659845169106
GPR[EPVAP]-1659845169847
GPR[EPVS]-1659845169847
========
fireChartChanged();
if(this.minEndIndex>=0){
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845169849
GPR[SPVAP]-1659845169849
GPR[EPVAP]-1659845170570
GPR[EPVS]-1659845170570
========
if(this.minEndIndex>=0){
try{
overwritten=(XYDataItem)(XYDataItem)this.data.get(minEndIndex).clone();
}catch (CloneNotSupportedException e) {
  throw new SeriesException("Couldn't clone XYDataItem!");
}

long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845170571
GPR[SPVAP]-1659845170571
GPR[EPVAP]-1659845171280
GPR[EPVS]-1659845171280
========
if(this.minEndIndex>=0){
overwritten=(TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(minEndIndex).clone();
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845171282
GPR[SPVAP]-1659845171282
GPR[EPVAP]-1659845171982
GPR[EPVS]-1659845171982
========
if(this.minEndIndex>=0){
removeAgedItems(false);
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845171982
GPR[SPVAP]-1659845171983
GPR[EPVAP]-1659845172687
GPR[EPVS]-1659845172687
========
if(this.minEndIndex>=0){
fireSeriesChanged();
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845172688
GPR[SPVAP]-1659845172688
GPR[EPVAP]-1659845173960
GPR[SPVATF]-1659845173960
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845175054
GPR[EPVS]-1659845175054
========
if(this.minEndIndex>=0){
overwritten=(TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(minEndIndex).clone();
removeAgedItems(false);
fireSeriesChanged();

long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845175055
GPR[SPVAP]-1659845175055
GPR[EPVAP]-1659845175759
GPR[EPVS]-1659845175760
========
if(minEndIndex>=0){
fireSeriesChanged();
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845175761
GPR[SPVAP]-1659845175761
GPR[EPVAP]-1659845177034
GPR[SPVATF]-1659845177034
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845178136
GPR[EPVS]-1659845178136
========
if(this.minEndIndex>0){
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845178139
GPR[SPVAP]-1659845178139
GPR[EPVAP]-1659845179375
GPR[SPVATF]-1659845179375
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845180485
GPR[EPVS]-1659845180485
========
if(index>=0){
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845180486
GPR[SPVAP]-1659845180486
GPR[EPVAP]-1659845181734
GPR[SPVATF]-1659845181734
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845182842
GPR[EPVS]-1659845182842
========
if(this.minEndIndex>=0){
if(index<DEFAULT_RANGE_DESCRIPTION.length()-1){
input=DEFAULT_RANGE_DESCRIPTION.substring(index+1);
}else {
moreInputToProcess=false;
}
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845182843
GPR[SPVAP]-1659845182843
GPR[EPVAP]-1659845183551
GPR[EPVS]-1659845183551
========
if(index>0){
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845183552
GPR[SPVAP]-1659845183552
GPR[EPVAP]-1659845184774
GPR[SPVATF]-1659845184774
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845185862
GPR[EPVS]-1659845185862
========
if(this.minEndIndex>minEndIndex){
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845185863
GPR[SPVAP]-1659845185863
GPR[EPVAP]-1659845187114
GPR[SPVATF]-1659845187114
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845188229
GPR[EPVS]-1659845188229
========
if(index>=minEndIndex){
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845188231
GPR[SPVAP]-1659845188231
GPR[EPVAP]-1659845189473
GPR[SPVATF]-1659845189473
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845190566
GPR[EPVS]-1659845190566
========
if(index>minEndIndex){
long minEnd=getDataItem(this.minEndIndex).getPeriod().getEnd().getTime();
if(end<minEnd){
this.minEndIndex=index;
}
}else {
this.minEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845190567
GPR[SPVAP]-1659845190567
GPR[EPVAP]-1659845191836
GPR[SPVATF]-1659845191836
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845192956
GPR[EPVS]-1659845192956
GPR[ESUN]-1659845192959
GPR[SSUN]-1659845192959
org.jfree.data.time.TimePeriodValues,314
GPR[ESUN]-1659845193404
GPR[SSUN]-1659845193404
org.jfree.data.time.TimePeriodValues,316
GPR[ESUN]-1659845193749
GPR[SSUN]-1659845193749
org.jfree.data.time.TimePeriodValues,319
Find no block!
GPR[SSUN]-1659845194064
org.jfree.data.time.TimePeriodValues,321
GPR[ESUN]-1659845194375
GPR[SSUN]-1659845194375
org.jfree.data.time.TimePeriodValues,324
========
if(start>maxEnd){
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845196240
GPR[SPVAP]-1659845196240
GPR[EPVAP]-1659845200536
GPR[SPVATF]-1659845200536
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845201626
GPR[EPVS]-1659845201626
========
if(middle>maxEnd){
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845201627
GPR[SPVAP]-1659845201627
GPR[EPVAP]-1659845202885
GPR[SPVATF]-1659845202885
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845204001
GPR[EPVS]-1659845204001
========
if(maxEnd>end){
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845204004
GPR[SPVAP]-1659845204004
GPR[EPVAP]-1659845205257
GPR[SPVATF]-1659845205257
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845206378
GPR[EPVS]-1659845206378
========
this.maxEnd=start;
if(end>maxEnd){
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845206380
GPR[SPVAP]-1659845206380
GPR[EPVAP]-1659845207136
GPR[EPVS]-1659845207136
========
this.end=end;
if(end>maxEnd){
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845207137
GPR[SPVAP]-1659845207137
GPR[EPVAP]-1659845207840
GPR[EPVS]-1659845207840
========
if(this.maxEndIndex>=0){
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(middle>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845209686
GPR[SPVAP]-1659845209686
GPR[EPVAP]-1659845211007
GPR[SPVATF]-1659845211007
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845212105
GPR[EPVS]-1659845212105
========
if(this.maxEndIndex>=0){
long maxEnd=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845212106
GPR[SPVAP]-1659845212106
GPR[EPVAP]-1659845213365
GPR[SPVATF]-1659845213365
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845214472
GPR[EPVS]-1659845214472
========
if(this.maxEndIndex>=0){
long maxEnd=getDataItem(this.minMiddleIndex).getPeriod().getEnd().getTime();
if(middle>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845214474
GPR[SPVAP]-1659845214474
GPR[EPVAP]-1659845215732
GPR[SPVATF]-1659845215732
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845216830
GPR[EPVS]-1659845216830
========
if(this.maxEndIndex>=0){
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(start>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845216831
GPR[SPVAP]-1659845216831
GPR[EPVAP]-1659845218082
GPR[SPVATF]-1659845218082
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845219199
GPR[EPVS]-1659845219199
========
if(maxEndIndex>=0){
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845219204
GPR[SPVAP]-1659845219204
GPR[EPVAP]-1659845220470
GPR[SPVATF]-1659845220470
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845221587
GPR[EPVS]-1659845221587
========
if(this.maxEndIndex>=maxEndIndex){
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845221589
GPR[SPVAP]-1659845221589
GPR[EPVAP]-1659845222870
GPR[SPVATF]-1659845222870
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845223989
GPR[EPVS]-1659845223989
========
case 1 :

if(this.maxEndIndex>=0){
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845223996
GPR[SPVAP]-1659845223996
GPR[EPVAP]-1659845224604
GPR[EPVS]-1659845224604
========
if(this.maxEndIndex>=0){
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
return (TickUnit)this.data.get(Math.min(maxEndIndex,this.tickUnits.size()-1));
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845224609
GPR[SPVAP]-1659845224609
GPR[EPVAP]-1659845225313
GPR[EPVS]-1659845225313
========
if(maxEnd>=0){
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845225315
GPR[SPVAP]-1659845225315
GPR[EPVAP]-1659845226017
GPR[EPVS]-1659845226017
========
fireChartChanged();
if(this.maxEndIndex>=0){
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845226018
GPR[SPVAP]-1659845226018
GPR[EPVAP]-1659845226731
GPR[EPVS]-1659845226731
========
if(this.maxEndIndex>=0){
try{
overwritten=(XYDataItem)(XYDataItem)this.data.get(maxEndIndex).clone();
}catch (CloneNotSupportedException e) {
  throw new SeriesException("Couldn't clone XYDataItem!");
}

long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845226733
GPR[SPVAP]-1659845226733
GPR[EPVAP]-1659845227468
GPR[EPVS]-1659845227468
========
if(this.maxEndIndex>=0){
overwritten=(TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(maxEndIndex).clone();
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845227470
GPR[SPVAP]-1659845227470
GPR[EPVAP]-1659845228183
GPR[EPVS]-1659845228183
========
if(this.maxEndIndex>=0){
removeAgedItems(false);
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845228184
GPR[SPVAP]-1659845228184
GPR[EPVAP]-1659845228886
GPR[EPVS]-1659845228886
========
if(this.maxEndIndex>=0){
fireSeriesChanged();
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845228887
GPR[SPVAP]-1659845228887
GPR[EPVAP]-1659845230153
GPR[SPVATF]-1659845230153
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845231257
GPR[EPVS]-1659845231257
========
if(this.maxEndIndex>=0){
overwritten=(TimeSeriesDataItem)(TimeSeriesDataItem)this.data.get(maxEndIndex).clone();
removeAgedItems(false);
fireSeriesChanged();

long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845231258
GPR[SPVAP]-1659845231258
GPR[EPVAP]-1659845232006
GPR[EPVS]-1659845232006
========
if(maxEndIndex>=0){
fireSeriesChanged();
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845232007
GPR[SPVAP]-1659845232007
GPR[EPVAP]-1659845233237
GPR[SPVATF]-1659845233237
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845234392
GPR[EPVS]-1659845234392
========
if(this.maxEndIndex>0){
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845234395
GPR[SPVAP]-1659845234395
GPR[EPVAP]-1659845235654
GPR[SPVATF]-1659845235654
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845238565
GPR[EPVS]-1659845238565
========
if(index>=0){
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845238566
GPR[SPVAP]-1659845238566
GPR[EPVAP]-1659845239795
GPR[SPVATF]-1659845239795
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845240879
GPR[EPVS]-1659845240879
========
if(this.maxEndIndex>=0){
if(index<DEFAULT_RANGE_DESCRIPTION.length()-1){
input=DEFAULT_RANGE_DESCRIPTION.substring(index+1);
}else {
moreInputToProcess=false;
}
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845240880
GPR[SPVAP]-1659845240880
GPR[EPVAP]-1659845241578
GPR[EPVS]-1659845241578
========
if(index>0){
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845241579
GPR[SPVAP]-1659845241579
GPR[EPVAP]-1659845242824
GPR[SPVATF]-1659845242824
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845243906
GPR[EPVS]-1659845243906
========
if(this.maxEndIndex>maxEndIndex){
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845243908
GPR[SPVAP]-1659845243908
GPR[EPVAP]-1659845245125
GPR[SPVATF]-1659845245125
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845246217
GPR[EPVS]-1659845246217
========
if(index>=maxEndIndex){
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845246219
GPR[SPVAP]-1659845246219
GPR[EPVAP]-1659845247494
GPR[SPVATF]-1659845247494
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845248618
GPR[EPVS]-1659845248618
========
if(index>maxEndIndex){
long maxEnd=getDataItem(this.maxEndIndex).getPeriod().getEnd().getTime();
if(end>maxEnd){
this.maxEndIndex=index;
}
}else {
this.maxEndIndex=index;
}

========
MM Copying to MM
GPR[SPVS]-1659845248618
GPR[SPVAP]-1659845248618
GPR[EPVAP]-1659845249903
GPR[SPVATF]-1659845249903
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845250989
GPR[EPVS]-1659845250989
GPR[ESUN]-1659845250992
GPR[SSUN]-1659845250992
org.jfree.data.time.TimePeriodValues,325
GPR[ESUN]-1659845251479
GPR[SSUN]-1659845251479
org.jfree.data.time.TimePeriodValues,327
GPR[ESUN]-1659845251789
GPR[SSUN]-1659845251789
org.jfree.data.time.TimePeriodValues,328
GPR[ESUN]-1659845252102
GPR[SSUN]-1659845252102
org.jfree.data.time.TimePeriodValues,330
Find no block!
GPR[SSUN]-1659845252406
org.jfree.data.time.TimePeriodValues,332
GPR[ESUN]-1659845252736
GPR[SSUN]-1659845252736
org.jfree.data.time.TimePeriodValues,335
Find no block!
GPR[SSUN]-1659845253032
org.jfree.data.general.Series,313
========
if(this.notify){
this.includeBaseInRange=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845254863
GPR[SPVAP]-1659845254863
GPR[EPVAP]-1659845257059
GPR[EPVS]-1659845257059
========
if(this.notify){
this.plotLines=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845257060
GPR[SPVAP]-1659845257060
GPR[EPVAP]-1659845258165
GPR[EPVS]-1659845258165
========
if(this.notify){
this.drawXError=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845258166
GPR[SPVAP]-1659845258166
GPR[EPVAP]-1659845259230
GPR[EPVS]-1659845259230
========
if(this.notify){
this.drawYError=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845259231
GPR[SPVAP]-1659845259231
GPR[EPVAP]-1659845260282
GPR[EPVS]-1659845260282
========
if(this.notify){
this.drawSeriesLineAsPath=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845260283
GPR[SPVAP]-1659845260283
GPR[EPVAP]-1659845261362
GPR[EPVS]-1659845261362
========
if(this.notify){
this.useYInterval=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845261363
GPR[SPVAP]-1659845261363
GPR[EPVAP]-1659845262452
GPR[EPVS]-1659845262452
========
if(this.notify){
this.verticalTickLabels=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845262453
GPR[SPVAP]-1659845262453
GPR[EPVAP]-1659845263503
GPR[EPVS]-1659845263503
========
if(this.notify){
this.inverted=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845263505
GPR[SPVAP]-1659845263505
GPR[EPVAP]-1659845264564
GPR[EPVS]-1659845264564
========
if(this.notify){
this.visible=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845264565
GPR[SPVAP]-1659845264565
GPR[EPVAP]-1659845265613
GPR[EPVS]-1659845265613
========
if(this.notify){
this.tickLabelsVisible=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845265614
GPR[SPVAP]-1659845265614
GPR[EPVAP]-1659845266691
GPR[EPVS]-1659845266691
========
if(this.notify){
this.tickMarksVisible=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845266692
GPR[SPVAP]-1659845266692
GPR[EPVAP]-1659845267790
GPR[EPVS]-1659845267790
========
if(this.notify){
this.gridBandsVisible=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845267791
GPR[SPVAP]-1659845267791
GPR[EPVAP]-1659845268832
GPR[EPVS]-1659845268832
========
if(this.notify){
this.autoRangeIncludesZero=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845268833
GPR[SPVAP]-1659845268833
GPR[EPVAP]-1659845269925
GPR[EPVS]-1659845269925
========
if(this.notify){
notifyListeners(new AxisChangeEvent(this));
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845269926
GPR[SPVAP]-1659845269926
GPR[EPVAP]-1659845270992
GPR[EPVS]-1659845270992
========
if(this.notify){
this.autoRangeIncludesZero=notify;
notifyListeners(new AxisChangeEvent(this));

notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845270993
GPR[SPVAP]-1659845270993
GPR[EPVAP]-1659845272026
GPR[EPVS]-1659845272026
========
if(this.notify){
this.autoRangeStickyZero=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845272027
GPR[SPVAP]-1659845272027
GPR[EPVAP]-1659845273092
GPR[EPVS]-1659845273092
========
if(this.notify){
this.autoRangeStickyZero=notify;
notifyListeners(new AxisChangeEvent(this));

notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845273093
GPR[SPVAP]-1659845273093
GPR[EPVAP]-1659845274183
GPR[EPVS]-1659845274183
========
if(this.notify){
this.text=description;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845274184
GPR[SPVAP]-1659845274184
GPR[EPVAP]-1659845275220
GPR[EPVS]-1659845275220
========
notifyListeners(new DialLayerChangeEvent(this));
if(this.notify){
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845275221
GPR[SPVAP]-1659845275222
GPR[EPVAP]-1659845276292
GPR[EPVS]-1659845276292
========
notifyListeners(new AxisChangeEvent(this));
if(this.notify){
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845276295
GPR[SPVAP]-1659845276295
GPR[EPVAP]-1659845277351
GPR[EPVS]-1659845277351
========
if(this.notify){
this.notify=notify;
notifyListeners(new SeriesChangeEvent(this));
}

========
MM Copying to MM
GPR[SPVS]-1659845277353
GPR[SPVAP]-1659845277353
GPR[EPVAP]-1659845280598
GPR[SPVATF]-1659845280598
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845281708
GPR[EPVS]-1659845281708
GPR[ESUN]-1659845281709
GPR[SSUN]-1659845281709
org.jfree.data.general.Series,314
GPR[ESUN]-1659845282139
GPR[SSUN]-1659845282139
org.jfree.data.general.Series,316
Find no block!
GPR[SSUN]-1659845282430
org.jfree.data.general.Series,326
========
if(listenerList[i]!=SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}

========
MM Copying to MM
GPR[SPVS]-1659845284786
GPR[SPVAP]-1659845284786
GPR[EPVAP]-1659845289046
GPR[SPVATF]-1659845289046
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845290158
GPR[EPVS]-1659845290158
========
if(clone.datasets[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}

========
MM Copying to MM
GPR[SPVS]-1659845290159
GPR[SPVAP]-1659845290159
GPR[EPVAP]-1659845290862
GPR[EPVS]-1659845290862
========
if(listenerList[i]==null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}

========
MM Copying to MM
GPR[SPVS]-1659845290863
GPR[SPVAP]-1659845290863
GPR[EPVAP]-1659845292140
GPR[SPVATF]-1659845292140
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845293245
GPR[EPVS]-1659845293245
========
if(listenerList[i]!=null){
((SeriesChangeListener)listenerList[i+1]).seriesChanged(event);
}

========
MM Copying to MM
GPR[SPVS]-1659845293246
GPR[SPVAP]-1659845293246
GPR[EPVAP]-1659845294459
GPR[SPVATF]-1659845294459
TESTING : org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM:   - org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845295545
GPR[EPVS]-1659845295545
========
if(listenerList[i]==SeriesChangeListener.class){
((SeriesChangeListener)listenerList[i+1]).setPaint(event);
}

========
MM Copying to MM
GPR[SPVS]-1659845295547
GPR[SPVAP]-1659845295547
GPR[EPVAP]-1659845296251
GPR[EPVS]-1659845296251
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f1f25f050fa, pid=2105318, tid=139772119869184
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 5265 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007f1f25f050fa [0x00007f1f25f04700+0x9fa]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/chart/chart_7_buggy/hs_err_pid2105318.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Chart/7 results at /experiment_home///results/SimFix/Chart/7/seed_260/
\n\nNode: host-44\n
\n\nDate: Sat 06 Aug 2022 09:08:16 PM PDT\n
Removing checked out dir script/workingdir/SimFix/chart/chart_7_buggy
GPR[SSLE]-1659845296293
GPR[ESLE]-1659845356296
