Sleep 1m start
GPR[SSLI]-1659910396041
GPR[ESLI]-1659910456047
Running Nopol Closure 113b with approach: smt
Timezone: America/Los_Angeles
Seed 261
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/113/seed_261/
The file script/workingdir/Nopol/Closure_113 does not exist!
script/workingdir/Nopol/Closure_113
script/workingdir/Nopol/Closure_113
classpath:  script/workingdir/Nopol/Closure_113/build/classes:script/workingdir/Nopol/Closure_113/lib/args4j.jar:script/workingdir/Nopol/Closure_113/lib/guava.jar:script/workingdir/Nopol/Closure_113/lib/json.jar:script/workingdir/Nopol/Closure_113/lib/jsr305.jar:script/workingdir/Nopol/Closure_113/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_113/build/lib/rhino.jar:script/workingdir/Nopol/Closure_113/lib/ant.jar:script/workingdir/Nopol/Closure_113/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_113/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_113/lib/jarjar.jar:script/workingdir/Nopol/Closure_113/lib/junit.jar:script/workingdir/Nopol/Closure_113/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659910474105
GPR[ESLB]-1659910534112
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_113//build/classes:script/workingdir/Nopol/Closure_113//build/test:script/workingdir/Nopol/Closure_113/build/classes:script/workingdir/Nopol/Closure_113/lib/args4j.jar:script/workingdir/Nopol/Closure_113/lib/guava.jar:script/workingdir/Nopol/Closure_113/lib/json.jar:script/workingdir/Nopol/Closure_113/lib/jsr305.jar:script/workingdir/Nopol/Closure_113/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_113/build/lib/rhino.jar:script/workingdir/Nopol/Closure_113/lib/ant.jar:script/workingdir/Nopol/Closure_113/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_113/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_113/lib/jarjar.jar:script/workingdir/Nopol/Closure_113/lib/junit.jar:script/workingdir/Nopol/Closure_113/build/test
Node: host-46
Date init: Sun 07 Aug 2022 03:15:34 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_113/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_113/build/classes/, file:script/workingdir/Nopol/Closure_113/build/test/, file:script/workingdir/Nopol/Closure_113/build/classes/, file:script/workingdir/Nopol/Closure_113/lib/args4j.jar, file:script/workingdir/Nopol/Closure_113/lib/guava.jar, file:script/workingdir/Nopol/Closure_113/lib/json.jar, file:script/workingdir/Nopol/Closure_113/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_113/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_113/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_113/lib/ant.jar, file:script/workingdir/Nopol/Closure_113/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_113/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_113/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_113/lib/junit.jar, file:script/workingdir/Nopol/Closure_113/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckEventfulObjectDisposalTest, com.google.javascript.jscomp.CheckEventfulObjectDisposalTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizedConditionTest, com.google.javascript.jscomp.MinimizedConditionTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PerformanceTrackerTest, com.google.javascript.jscomp.PerformanceTrackerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_113/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckEventfulObjectDisposalTest, com.google.javascript.jscomp.CheckEventfulObjectDisposalTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizedConditionTest, com.google.javascript.jscomp.MinimizedConditionTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PerformanceTrackerTest, com.google.javascript.jscomp.PerformanceTrackerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/113/seed_261/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659910540025
GPR[ESUP]-1659910540025
GPR[SFL]-1659910540025
GPR[EFL]-1659910588586
GPR[SFP]-1659910588586
GPR[SSUN]-1659910592533
-1966087783
GPR[ESUN]-1659910593083
GPR[SSUN]-1659910593083
-1966087783
GPR[SPVATF]-1659910593327
GPR[EPVATF]-1659910593381
[58420] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910593381
GPR[SSUN]-1659910593381
-1659631726
GPR[ESUN]-1659910593599
GPR[SSUN]-1659910593600
130004992
GPR[ESUN]-1659910593800
GPR[SSUN]-1659910593800
130004992
GPR[SPVATF]-1659910593995
GPR[EPVATF]-1659910594023
[59062] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910594023
GPR[SSUN]-1659910594023
130004992
GPR[ESUN]-1659910594215
GPR[SSUN]-1659910594215
-1966087783
GPR[SPVATF]-1659910594422
GPR[EPVATF]-1659910594444
[59483] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910594444
GPR[SSUN]-1659910594444
-1966087783
GPR[SPVATF]-1659910594654
GPR[EPVATF]-1659910594676
[59715] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910594676
GPR[SSUN]-1659910594676
GPR[ESUN]-1659910594676
GPR[SSUN]-1659910594677
GPR[ESUN]-1659910594677
GPR[SSUN]-1659910594677
890942016
GPR[ESUN]-1659910594894
GPR[SSUN]-1659910594894
890942016
GPR[SPVATF]-1659910595098
GPR[EPVATF]-1659910595118
[60157] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910595118
GPR[SSUN]-1659910595118
890942016
GPR[SPVATF]-1659910595343
GPR[EPVATF]-1659910595363
[60402] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910595364
GPR[EPVATF]-1659910595383
[60422] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910595383
GPR[SSUN]-1659910595383
890942016
GPR[ESUN]-1659910595603
GPR[SSUN]-1659910595603
890942016
GPR[ESUN]-1659910595816
GPR[SSUN]-1659910595816
-1966087783
GPR[ESUN]-1659910596024
GPR[SSUN]-1659910596024
-1966087783
GPR[SPVATF]-1659910596322
GPR[EPVATF]-1659910596341
[61380] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910596342
GPR[EPVATF]-1659910596359
[61399] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910596360
GPR[SSUN]-1659910596360
-1966087783
GPR[ESUN]-1659910596569
GPR[SSUN]-1659910596569
-1966087783
GPR[SPVATF]-1659910596774
GPR[EPVATF]-1659910596794
[61833] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910596795
GPR[EPVATF]-1659910596813
[61853] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910596814
GPR[SSUN]-1659910596814
-1966087783
GPR[ESUN]-1659910597017
GPR[SSUN]-1659910597017
-1966087783
GPR[ESUN]-1659910597222
GPR[SSUN]-1659910597222
-1966087783
GPR[ESUN]-1659910597452
GPR[SSUN]-1659910597452
1613130706
GPR[ESUN]-1659910597688
GPR[SSUN]-1659910597688
1613130706
GPR[ESUN]-1659910597907
GPR[SSUN]-1659910597907
1613130706
GPR[SPVATF]-1659910598140
GPR[EPVATF]-1659910598347
[63387] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910598348
GPR[SSUN]-1659910598348
707639929
GPR[SPVATF]-1659910598616
GPR[EPVATF]-1659910598855
GPR[SPS]-1659910598855
[64919] ERROR ConstraintModelBuilder - Unable to compile the change: 
class ProcessClosurePrimitives extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback implements com.google.javascript.jscomp.HotSwapCompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType NULL_ARGUMENT_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NULL_ARGUMENT_ERROR", "method \"{0}\" called without an argument");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_OBJECTLIT_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EXPECTED_OBJECTLIT_ERROR", "method \"{0}\" expected an object literal argument");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_STRING_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EXPECTED_STRING_ERROR", "method \"{0}\" expected an object string argument");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_ARGUMENT_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_ARGUMENT_ERROR", "method \"{0}\" called with invalid argument");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_STYLE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR", "Invalid CSS name map style {0}");

    static final com.google.javascript.jscomp.DiagnosticType TOO_MANY_ARGUMENTS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_TOO_MANY_ARGUMENTS_ERROR", "method \"{0}\" called with more than one argument");

    static final com.google.javascript.jscomp.DiagnosticType DUPLICATE_NAMESPACE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_DUPLICATE_NAMESPACE_ERROR", "namespace \"{0}\" cannot be provided twice");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_NAMESPACE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_FUNCTION_NAMESPACE_ERROR", "\"{0}\" cannot be both provided and declared as a function");

    static final com.google.javascript.jscomp.DiagnosticType MISSING_PROVIDE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_MISSING_PROVIDE_ERROR", "required \"{0}\" namespace never provided");

    static final com.google.javascript.jscomp.DiagnosticType LATE_PROVIDE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_LATE_PROVIDE_ERROR", "required \"{0}\" namespace not provided yet");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_PROVIDE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_PROVIDE_ERROR", "\"{0}\" is not a valid JS identifier name");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_DEFINE_NAME_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_DEFINE_NAME_ERROR", "\"{0}\" is not a valid JS identifier name");

    static final com.google.javascript.jscomp.DiagnosticType MISSING_DEFINE_ANNOTATION = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_MISSING_DEFINE_ANNOTATION", "Missing @define annotation");

    static final com.google.javascript.jscomp.DiagnosticType XMODULE_REQUIRE_ERROR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_XMODULE_REQUIRE_ERROR", "namespace \"{0}\" provided in module {1} " + "but required in module {2}");

    static final com.google.javascript.jscomp.DiagnosticType NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR", "goog.setCssNameMapping only takes an object literal with string values");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_CSS_RENAMING_MAP = com.google.javascript.jscomp.DiagnosticType.warning("INVALID_CSS_RENAMING_MAP", "Invalid entries in css renaming map: {0}");

    static final com.google.javascript.jscomp.DiagnosticType BASE_CLASS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_BASE_CLASS_ERROR", "incorrect use of goog.base: {0}");

    static final java.lang.String GOOG = "goog";

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.JSModuleGraph moduleGraph;

    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName> providedNames = com.google.common.collect.Maps.newLinkedHashMap();

    private final java.util.List<com.google.javascript.jscomp.ProcessClosurePrimitives.UnrecognizedRequire> unrecognizedRequires = com.google.common.collect.Lists.newArrayList();

    private final java.util.Set<java.lang.String> exportedVariables = com.google.common.collect.Sets.newHashSet();

    private final com.google.javascript.jscomp.CheckLevel requiresLevel;

    private final com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable;

    private final java.util.List<com.google.javascript.rhino.Node> defineCalls = com.google.common.collect.Lists.newArrayList();

    ProcessClosurePrimitives(com.google.javascript.jscomp.AbstractCompiler compiler, @javax.annotation.Nullable
    com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable, com.google.javascript.jscomp.CheckLevel requiresLevel) {
        this.compiler = compiler;
        this.preprocessorSymbolTable = preprocessorSymbolTable;
        this.moduleGraph = compiler.getModuleGraph();
        this.requiresLevel = requiresLevel;
        providedNames.put(com.google.javascript.jscomp.ProcessClosurePrimitives.GOOG, new com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName(com.google.javascript.jscomp.ProcessClosurePrimitives.GOOG, null, null, false));
    }

    java.util.Set<java.lang.String> getExportedVariableNames() {
        return exportedVariables;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        new com.google.javascript.jscomp.NodeTraversal(compiler, this).traverse(root);
        for (com.google.javascript.rhino.Node n : defineCalls) {
            replaceGoogDefines(n);
        }
        for (com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName pn : providedNames.values()) {
            pn.replace();
        }
        if (requiresLevel.isOn()) {
            for (com.google.javascript.jscomp.ProcessClosurePrimitives.UnrecognizedRequire r : unrecognizedRequires) {
                com.google.javascript.jscomp.DiagnosticType error;
                com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName expectedName = providedNames.get(r.namespace);
                if ((expectedName != null) && (expectedName.firstNode != null)) {
                    error = com.google.javascript.jscomp.ProcessClosurePrimitives.LATE_PROVIDE_ERROR;
                } else {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(0).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.defineCalls",com.google.javascript.jscomp.ProcessClosurePrimitives.this.defineCalls);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_DEFINE_NAME_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_DEFINE_NAME_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.FUNCTION_NAMESPACE_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.FUNCTION_NAMESPACE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.DUPLICATE_NAMESPACE_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.DUPLICATE_NAMESPACE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_STYLE_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_STYLE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_PROVIDE_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_PROVIDE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_PROVIDE_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_PROVIDE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.GOOG",com.google.javascript.jscomp.ProcessClosurePrimitives.GOOG);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.moduleGraph",com.google.javascript.jscomp.ProcessClosurePrimitives.this.moduleGraph);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.compiler",com.google.javascript.jscomp.ProcessClosurePrimitives.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_CSS_RENAMING_MAP",com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_CSS_RENAMING_MAP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("root",root);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.requiresLevel",com.google.javascript.jscomp.ProcessClosurePrimitives.this.requiresLevel);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.TOO_MANY_ARGUMENTS_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.TOO_MANY_ARGUMENTS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_DEFINE_ANNOTATION",com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_DEFINE_ANNOTATION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.unrecognizedRequires",com.google.javascript.jscomp.ProcessClosurePrimitives.this.unrecognizedRequires);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_STRING_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_STRING_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.exportedVariables",com.google.javascript.jscomp.ProcessClosurePrimitives.this.exportedVariables);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.BASE_CLASS_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.BASE_CLASS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("expectedName",expectedName);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_OBJECTLIT_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_OBJECTLIT_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.NULL_ARGUMENT_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.NULL_ARGUMENT_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.preprocessorSymbolTable",com.google.javascript.jscomp.ProcessClosurePrimitives.this.preprocessorSymbolTable);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.providedNames",com.google.javascript.jscomp.ProcessClosurePrimitives.this.providedNames);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.LATE_PROVIDE_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.LATE_PROVIDE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.XMODULE_REQUIRE_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.XMODULE_REQUIRE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("externs",externs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_ARGUMENT_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_ARGUMENT_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(0).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        error = com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_PROVIDE_ERROR;

                }
                compiler.report(com.google.javascript.jscomp.JSError.make(r.inputName, r.requireNode, requiresLevel, error, r.namespace));
            }
        }
    }

    private void replaceGoogDefines(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.common.base.Preconditions.checkState(parent.isExprResult());
        java.lang.String name = n.getChildAtIndex(1).getString();
        com.google.javascript.rhino.Node value = n.getChildAtIndex(2).detachFromParent();
        com.google.javascript.rhino.Node replacement = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration(compiler.getCodingConvention(), name, value, n.getJSDocInfo());
        replacement.useSourceInfoIfMissingFromForTree(n);
        parent.getParent().replaceChild(parent, replacement);
        compiler.reportCodeChange();
    }

    @java.lang.Override
    public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
        this.compiler.process(this);
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                boolean isExpr = parent.isExprResult();
                com.google.javascript.rhino.Node left = n.getFirstChild();
                if (left.isGetProp()) {
                    com.google.javascript.rhino.Node name = left.getFirstChild();
                    if (name.isName() && com.google.javascript.jscomp.ProcessClosurePrimitives.GOOG.equals(name.getString())) {
                        java.lang.String methodName = name.getNext().getString();
                        if ("base".equals(methodName)) {
                            processBaseClassCall(t, n);
                        } else if (!isExpr) {
                            break;
                        } else if ("define".equals(methodName)) {
                            processDefineCall(t, n, parent);
                        } else if ("require".equals(methodName)) {
                            processRequireCall(t, n, parent);
                        } else if ("provide".equals(methodName)) {
                            processProvideCall(t, n, parent);
                        } else if ("exportSymbol".equals(methodName)) {
                            com.google.javascript.rhino.Node arg = left.getNext();
                            if (arg.isString()) {
                                int dot = arg.getString().indexOf('.');
                                if (dot == (-1)) {
                                    exportedVariables.add(arg.getString());
                                } else {
                                    exportedVariables.add(arg.getString().substring(0, dot));
                                }
                            }
                        } else if ("addDependency".equals(methodName)) {
                            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
                            java.util.List<java.lang.String> typeDecls = convention.identifyTypeDeclarationCall(n);
                            if (typeDecls != null) {
                                for (java.lang.String typeDecl : typeDecls) {
                                    compiler.getTypeRegistry().forwardDeclareType(typeDecl);
                                }
                            }
                            parent.replaceChild(n, com.google.javascript.rhino.IR.number(0));
                            compiler.reportCodeChange();
                        } else if ("setCssNameMapping".equals(methodName)) {
                            processSetCssNameMapping(t, n, parent);
                        }
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.NAME :
                handleCandidateProvideDefinition(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                handleTypedefDefinition(t, n);
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (t.inGlobalScope() && (!com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n))) {
                    java.lang.String name = n.getFirstChild().getString();
                    com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName pn = providedNames.get(name);
                    if (pn != null) {
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.FUNCTION_NAMESPACE_ERROR, name));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                if (((n.getFirstChild().isName() && (!parent.isCall())) && (!parent.isAssign())) && "goog.base".equals(n.getQualifiedName())) {
                    reportBadBaseClassUse(t, n, "May only be called directly.");
                }
                break;
        }
    }

    private void processRequireCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node arg = left.getNext();
        if (verifyLastArgumentIsString(t, left, arg)) {
            java.lang.String ns = arg.getString();
            com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName provided = providedNames.get(ns);
            if ((provided == null) || (!provided.isExplicitlyProvided())) {
                unrecognizedRequires.add(new com.google.javascript.jscomp.ProcessClosurePrimitives.UnrecognizedRequire(n, ns, t.getSourceName()));
            } else {
                com.google.javascript.jscomp.JSModule providedModule = provided.explicitModule;
                com.google.common.base.Preconditions.checkNotNull(providedModule);
                com.google.javascript.jscomp.JSModule module = t.getModule();
                if (((moduleGraph != null) && (module != providedModule)) && (!moduleGraph.dependsOn(module, providedModule))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName()));
                }
            }
            maybeAddToSymbolTable(left);
            maybeAddStringNodeToSymbolTable(arg);
            if (provided != null) {
                parent.detachFromParent();
                compiler.reportCodeChange();
            }
        }
    }

    private void processProvideCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node arg = left.getNext();
        if (verifyProvide(t, left, arg)) {
            java.lang.String ns = arg.getString();
            maybeAddToSymbolTable(left);
            maybeAddStringNodeToSymbolTable(arg);
            if (providedNames.containsKey(ns)) {
                com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName previouslyProvided = providedNames.get(ns);
                if (!previouslyProvided.isExplicitlyProvided()) {
                    previouslyProvided.addProvide(parent, t.getModule(), true);
                } else {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.DUPLICATE_NAMESPACE_ERROR, ns));
                }
            } else {
                registerAnyProvidedPrefixes(ns, parent, t.getModule());
                providedNames.put(ns, new com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName(ns, parent, t.getModule(), true));
            }
        }
    }

    private void processDefineCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node args = left.getNext();
        if (verifyDefine(t, parent, left, args)) {
            com.google.javascript.rhino.Node nameNode = args;
            java.lang.String name = args.getString();
            com.google.javascript.rhino.Node value = args.getNext();
            maybeAddToSymbolTable(left);
            maybeAddStringNodeToSymbolTable(nameNode);
            this.defineCalls.add(n);
        }
    }

    private void handleTypedefDefinition(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo info = n.getFirstChild().getJSDocInfo();
        if ((t.inGlobalScope() && (info != null)) && info.hasTypedefType()) {
            java.lang.String name = n.getFirstChild().getQualifiedName();
            if (name != null) {
                com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName pn = providedNames.get(name);
                if (pn != null) {
                    pn.addDefinition(n, t.getModule());
                }
            }
        }
    }

    private void handleCandidateProvideDefinition(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (t.inGlobalScope()) {
            java.lang.String name = null;
            if (n.isName() && parent.isVar()) {
                name = n.getString();
            } else if (n.isAssign() && parent.isExprResult()) {
                name = n.getFirstChild().getQualifiedName();
            }
            if (name != null) {
                if (parent.getBooleanProp(com.google.javascript.rhino.Node.IS_NAMESPACE)) {
                    processProvideFromPreviousPass(t, name, parent);
                } else {
                    com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName pn = providedNames.get(name);
                    if (pn != null) {
                        pn.addDefinition(parent, t.getModule());
                    }
                }
            }
        }
    }

    private void processBaseClassCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node callee = n.getFirstChild();
        com.google.javascript.rhino.Node thisArg = callee.getNext();
        if ((thisArg == null) || (!thisArg.isThis())) {
            reportBadBaseClassUse(t, n, "First argument must be 'this'.");
            return;
        }
        com.google.javascript.rhino.Node enclosingFnNameNode = getEnclosingDeclNameNode(t);
        if (enclosingFnNameNode == null) {
            reportBadBaseClassUse(t, n, "Could not find enclosing method.");
            return;
        }
        java.lang.String enclosingQname = enclosingFnNameNode.getQualifiedName();
        if (enclosingQname.indexOf(".prototype.") == (-1)) {
            com.google.javascript.rhino.Node enclosingParent = enclosingFnNameNode.getParent();
            com.google.javascript.rhino.Node maybeInheritsExpr = (enclosingParent.isAssign() ? enclosingParent.getParent() : enclosingParent).getNext();
            com.google.javascript.rhino.Node baseClassNode = null;
            if (((maybeInheritsExpr != null) && maybeInheritsExpr.isExprResult()) && maybeInheritsExpr.getFirstChild().isCall()) {
                com.google.javascript.rhino.Node callNode = maybeInheritsExpr.getFirstChild();
                if ("goog.inherits".equals(callNode.getFirstChild().getQualifiedName()) && callNode.getLastChild().isQualifiedName()) {
                    baseClassNode = callNode.getLastChild();
                }
            }
            if (baseClassNode == null) {
                reportBadBaseClassUse(t, n, "Could not find goog.inherits for base class");
                return;
            }
            n.replaceChild(callee, com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), java.lang.String.format("%s.call", baseClassNode.getQualifiedName()), callee, "goog.base"));
            compiler.reportCodeChange();
        } else {
            com.google.javascript.rhino.Node methodNameNode = thisArg.getNext();
            if ((methodNameNode == null) || (!methodNameNode.isString())) {
                reportBadBaseClassUse(t, n, "Second argument must name a method.");
                return;
            }
            java.lang.String methodName = methodNameNode.getString();
            java.lang.String ending = ".prototype." + methodName;
            if ((enclosingQname == null) || (!enclosingQname.endsWith(ending))) {
                reportBadBaseClassUse(t, n, "Enclosing method does not match " + methodName);
                return;
            }
            com.google.javascript.rhino.Node className = enclosingFnNameNode.getFirstChild().getFirstChild();
            n.replaceChild(callee, com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), java.lang.String.format("%s.superClass_.%s.call", className.getQualifiedName(), methodName), callee, "goog.base"));
            n.removeChild(methodNameNode);
            compiler.reportCodeChange();
        }
    }

    private com.google.javascript.rhino.Node getEnclosingDeclNameNode(com.google.javascript.jscomp.NodeTraversal t) {
        com.google.javascript.rhino.Node scopeRoot = t.getScopeRoot();
        if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(scopeRoot)) {
            return scopeRoot.getFirstChild();
        } else {
            com.google.javascript.rhino.Node parent = scopeRoot.getParent();
            if (parent != null) {
                if (parent.isAssign() || ((parent.getLastChild() == scopeRoot) && parent.getFirstChild().isQualifiedName())) {
                    return parent.getFirstChild();
                } else if (parent.isName()) {
                    return parent;
                }
            }
        }
        return null;
    }

    private void reportBadBaseClassUse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String extraMessage) {
        compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.BASE_CLASS_ERROR, extraMessage));
    }

    private void processProvideFromPreviousPass(com.google.javascript.jscomp.NodeTraversal t, java.lang.String name, com.google.javascript.rhino.Node parent) {
        if (!providedNames.containsKey(name)) {
            com.google.javascript.rhino.Node expr = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.EXPR_RESULT);
            expr.copyInformationFromForTree(parent);
            parent.getParent().addChildBefore(expr, parent);
            compiler.reportCodeChange();
            com.google.javascript.jscomp.JSModule module = t.getModule();
            registerAnyProvidedPrefixes(name, expr, module);
            com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName provided = new com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName(name, expr, module, true);
            providedNames.put(name, provided);
            provided.addDefinition(parent, module);
        } else if (com.google.javascript.jscomp.ProcessClosurePrimitives.isNamespacePlaceholder(parent)) {
            parent.getParent().removeChild(parent);
            compiler.reportCodeChange();
        }
    }

    private void processSetCssNameMapping(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node arg = left.getNext();
        if (verifySetCssNameMapping(t, left, arg)) {
            final java.util.Map<java.lang.String, java.lang.String> cssNames = com.google.common.collect.Maps.newHashMap();
            for (com.google.javascript.rhino.Node key = arg.getFirstChild(); key != null; key = key.getNext()) {
                com.google.javascript.rhino.Node value = key.getFirstChild();
                if (((!key.isStringKey()) || (value == null)) || (!value.isString())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR));
                    return;
                }
                cssNames.put(key.getString(), value.getString());
            }
            java.lang.String styleStr = "BY_PART";
            if (arg.getNext() != null) {
                styleStr = arg.getNext().getString();
            }
            final com.google.javascript.jscomp.CssRenamingMap.Style style;
            try {
                style = com.google.javascript.jscomp.CssRenamingMap.Style.valueOf(styleStr);
            } catch (java.lang.IllegalArgumentException e) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_STYLE_ERROR, styleStr));
                return;
            }
            if (style == com.google.javascript.jscomp.CssRenamingMap.Style.BY_PART) {
                java.util.List<java.lang.String> errors = com.google.common.collect.Lists.newArrayList();
                for (java.lang.String key : cssNames.keySet()) {
                    if (key.contains("-")) {
                        errors.add(key);
                    }
                }
                if (errors.size() != 0) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_CSS_RENAMING_MAP, errors.toString()));
                }
            } else if (style == com.google.javascript.jscomp.CssRenamingMap.Style.BY_WHOLE) {
                java.util.List<java.lang.String> errors = com.google.common.collect.Lists.newArrayList();
                for (java.util.Map.Entry<java.lang.String, java.lang.String> b : cssNames.entrySet()) {
                    if (b.getKey().length() > 10) {
                        continue;
                    }
                    for (java.util.Map.Entry<java.lang.String, java.lang.String> a : cssNames.entrySet()) {
                        java.lang.String combined = cssNames.get((a.getKey() + "-") + b.getKey());
                        if ((combined != null) && (!combined.equals((a.getValue() + "-") + b.getValue()))) {
                            errors.add(((((((("map(" + a.getKey()) + "-") + b.getKey()) + ") != map(") + a.getKey()) + ")-map(") + b.getKey()) + ")");
                        }
                    }
                }
                if (errors.size() != 0) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_CSS_RENAMING_MAP, errors.toString()));
                }
            }
            com.google.javascript.jscomp.CssRenamingMap cssRenamingMap = new com.google.javascript.jscomp.CssRenamingMap() {
                @java.lang.Override
                public java.lang.String get(java.lang.String value) {
                    if (cssNames.containsKey(value)) {
                        return cssNames.get(value);
                    } else {
                        return value;
                    }
                }

                @java.lang.Override
                public com.google.javascript.jscomp.CssRenamingMap.Style getStyle() {
                    return style;
                }
            };
            compiler.setCssRenamingMap(cssRenamingMap);
            parent.getParent().removeChild(parent);
            compiler.reportCodeChange();
        }
    }

    private boolean verifyProvide(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node methodName, com.google.javascript.rhino.Node arg) {
        if (!verifyLastArgumentIsString(t, methodName, arg)) {
            return false;
        }
        for (java.lang.String part : arg.getString().split("\\.")) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidPropertyName(part)) {
                compiler.report(t.makeError(arg, com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_PROVIDE_ERROR, part));
                return false;
            }
        }
        return true;
    }

    private boolean verifyDefine(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node expr, com.google.javascript.rhino.Node methodName, com.google.javascript.rhino.Node args) {
        com.google.javascript.rhino.Node arg = args;
        if ((!verifyNotNull(t, methodName, arg)) || (!verifyOfType(t, methodName, arg, com.google.javascript.rhino.Token.STRING))) {
            return false;
        }
        arg = arg.getNext();
        if ((!verifyNotNull(t, methodName, arg)) || (!verifyIsLast(t, methodName, arg))) {
            return false;
        }
        java.lang.String name = args.getString();
        for (java.lang.String part : name.split("\\.")) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidQualifiedName(part)) {
                compiler.report(t.makeError(args, com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_DEFINE_NAME_ERROR, name));
                return false;
            }
        }
        com.google.javascript.rhino.JSDocInfo info = expr.getFirstChild().getJSDocInfo();
        if ((info == null) || (!info.isDefine())) {
            compiler.report(t.makeError(expr, com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_DEFINE_ANNOTATION));
            return false;
        }
        return true;
    }

    private boolean verifyLastArgumentIsString(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node methodName, com.google.javascript.rhino.Node arg) {
        return (verifyNotNull(t, methodName, arg) && verifyOfType(t, methodName, arg, com.google.javascript.rhino.Token.STRING)) && verifyIsLast(t, methodName, arg);
    }

    private boolean verifyNotNull(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node methodName, com.google.javascript.rhino.Node arg) {
        if (arg == null) {
            compiler.report(t.makeError(methodName, com.google.javascript.jscomp.ProcessClosurePrimitives.NULL_ARGUMENT_ERROR, methodName.getQualifiedName()));
            return false;
        }
        return true;
    }

    private boolean verifyOfType(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node methodName, com.google.javascript.rhino.Node arg, int desiredType) {
        if (arg.getType() != desiredType) {
            compiler.report(t.makeError(methodName, com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_ARGUMENT_ERROR, methodName.getQualifiedName()));
            return false;
        }
        return true;
    }

    private boolean verifyIsLast(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node methodName, com.google.javascript.rhino.Node arg) {
        if (arg.getNext() != null) {
            compiler.report(t.makeError(methodName, com.google.javascript.jscomp.ProcessClosurePrimitives.TOO_MANY_ARGUMENTS_ERROR, methodName.getQualifiedName()));
            return false;
        }
        return true;
    }

    private boolean verifySetCssNameMapping(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node methodName, com.google.javascript.rhino.Node firstArg) {
        com.google.javascript.jscomp.DiagnosticType diagnostic = null;
        if (firstArg == null) {
            diagnostic = com.google.javascript.jscomp.ProcessClosurePrimitives.NULL_ARGUMENT_ERROR;
        } else if (!firstArg.isObjectLit()) {
            diagnostic = com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_OBJECTLIT_ERROR;
        } else if (firstArg.getNext() != null) {
            com.google.javascript.rhino.Node secondArg = firstArg.getNext();
            if (!secondArg.isString()) {
                diagnostic = com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
            } else if (secondArg.getNext() != null) {
                diagnostic = com.google.javascript.jscomp.ProcessClosurePrimitives.TOO_MANY_ARGUMENTS_ERROR;
            }
        }
        if (diagnostic != null) {
            compiler.report(t.makeError(methodName, diagnostic, methodName.getQualifiedName()));
            return false;
        }
        return true;
    }

    private void registerAnyProvidedPrefixes(java.lang.String ns, com.google.javascript.rhino.Node node, com.google.javascript.jscomp.JSModule module) {
        int pos = ns.indexOf('.');
        while (pos != (-1)) {
            java.lang.String prefixNs = ns.substring(0, pos);
            pos = ns.indexOf('.', pos + 1);
            if (providedNames.containsKey(prefixNs)) {
                providedNames.get(prefixNs).addProvide(node, module, false);
            } else {
                providedNames.put(prefixNs, new com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName(prefixNs, node, module, false));
            }
        } 
    }

    private class ProvidedName {
        private final java.lang.String namespace;

        private final com.google.javascript.rhino.Node firstNode;

        private final com.google.javascript.jscomp.JSModule firstModule;

        private com.google.javascript.rhino.Node explicitNode = null;

        private com.google.javascript.jscomp.JSModule explicitModule = null;

        private com.google.javascript.rhino.Node candidateDefinition = null;

        private com.google.javascript.jscomp.JSModule minimumModule = null;

        private com.google.javascript.rhino.Node replacementNode = null;

        ProvidedName(java.lang.String namespace, com.google.javascript.rhino.Node node, com.google.javascript.jscomp.JSModule module, boolean explicit) {
            com.google.common.base.Preconditions.checkArgument((node == null) || node.isExprResult());
            this.namespace = namespace;
            this.firstNode = node;
            this.firstModule = module;
            addProvide(node, module, explicit);
        }

        void addProvide(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.JSModule module, boolean explicit) {
            if (explicit) {
                com.google.common.base.Preconditions.checkState(explicitNode == null);
                com.google.common.base.Preconditions.checkArgument(node.isExprResult());
                explicitNode = node;
                explicitModule = module;
            }
            updateMinimumModule(module);
        }

        boolean isExplicitlyProvided() {
            return explicitNode != null;
        }

        void addDefinition(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.JSModule module) {
            com.google.common.base.Preconditions.checkArgument((node.isExprResult() || node.isFunction()) || node.isVar());
            com.google.common.base.Preconditions.checkArgument(explicitNode != node);
            if ((candidateDefinition == null) || (!node.isExprResult())) {
                candidateDefinition = node;
                updateMinimumModule(module);
            }
        }

        private void updateMinimumModule(com.google.javascript.jscomp.JSModule newModule) {
            if (minimumModule == null) {
                minimumModule = newModule;
            } else if (moduleGraph != null) {
                minimumModule = moduleGraph.getDeepestCommonDependencyInclusive(minimumModule, newModule);
            } else {
                com.google.common.base.Preconditions.checkState(newModule == minimumModule, "Missing module graph");
            }
        }

        void replace() {
            if (firstNode == null) {
                replacementNode = candidateDefinition;
                return;
            }
            if ((candidateDefinition != null) && (explicitNode != null)) {
                explicitNode.detachFromParent();
                compiler.reportCodeChange();
                replacementNode = candidateDefinition;
                if (candidateDefinition.isExprResult() && (!candidateDefinition.getFirstChild().isQualifiedName())) {
                    candidateDefinition.putBooleanProp(com.google.javascript.rhino.Node.IS_NAMESPACE, true);
                    com.google.javascript.rhino.Node assignNode = candidateDefinition.getFirstChild();
                    com.google.javascript.rhino.Node nameNode = assignNode.getFirstChild();
                    if (nameNode.isName()) {
                        com.google.javascript.rhino.Node valueNode = nameNode.getNext();
                        assignNode.removeChild(nameNode);
                        assignNode.removeChild(valueNode);
                        nameNode.addChildToFront(valueNode);
                        com.google.javascript.rhino.Node varNode = com.google.javascript.rhino.IR.var(nameNode);
                        varNode.copyInformationFrom(candidateDefinition);
                        candidateDefinition.getParent().replaceChild(candidateDefinition, varNode);
                        nameNode.setJSDocInfo(assignNode.getJSDocInfo());
                        compiler.reportCodeChange();
                        replacementNode = varNode;
                    }
                }
            } else {
                replacementNode = createDeclarationNode();
                if (firstModule == minimumModule) {
                    firstNode.getParent().addChildBefore(replacementNode, firstNode);
                } else {
                    int indexOfDot = namespace.lastIndexOf('.');
                    if (indexOfDot == (-1)) {
                        compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
                    } else {
                        com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));
                        com.google.common.base.Preconditions.checkNotNull(parentName);
                        com.google.common.base.Preconditions.checkNotNull(parentName.replacementNode);
                        parentName.replacementNode.getParent().addChildAfter(replacementNode, parentName.replacementNode);
                    }
                }
                if (explicitNode != null) {
                    explicitNode.detachFromParent();
                }
                compiler.reportCodeChange();
            }
        }

        private com.google.javascript.rhino.Node createDeclarationNode() {
            if (namespace.indexOf('.') == (-1)) {
                return makeVarDeclNode();
            } else {
                return makeAssignmentExprNode();
            }
        }

        private com.google.javascript.rhino.Node makeVarDeclNode() {
            com.google.javascript.rhino.Node name = com.google.javascript.rhino.IR.name(namespace);
            name.addChildToFront(createNamespaceLiteral());
            com.google.javascript.rhino.Node decl = com.google.javascript.rhino.IR.var(name);
            decl.putBooleanProp(com.google.javascript.rhino.Node.IS_NAMESPACE, true);
            if (compiler.getCodingConvention().isConstant(namespace)) {
                name.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            if (candidateDefinition == null) {
                name.setJSDocInfo(createConstantJsDoc());
            }
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.ProcessClosurePrimitives.isNamespacePlaceholder(decl));
            setSourceInfo(decl);
            return decl;
        }

        private com.google.javascript.rhino.Node createNamespaceLiteral() {
            com.google.javascript.rhino.Node objlit = com.google.javascript.rhino.IR.objectlit();
            objlit.setJSType(compiler.getTypeRegistry().createAnonymousObjectType(null));
            return objlit;
        }

        private com.google.javascript.rhino.Node makeAssignmentExprNode() {
            com.google.javascript.rhino.Node decl = com.google.javascript.rhino.IR.exprResult(com.google.javascript.rhino.IR.assign(com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), namespace, firstNode, namespace), createNamespaceLiteral()));
            decl.putBooleanProp(com.google.javascript.rhino.Node.IS_NAMESPACE, true);
            if (candidateDefinition == null) {
                decl.getFirstChild().setJSDocInfo(createConstantJsDoc());
            }
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.ProcessClosurePrimitives.isNamespacePlaceholder(decl));
            setSourceInfo(decl);
            return decl;
        }

        private com.google.javascript.rhino.JSDocInfo createConstantJsDoc() {
            com.google.javascript.rhino.JSDocInfoBuilder builder = new com.google.javascript.rhino.JSDocInfoBuilder(false);
            builder.recordConstancy();
            return builder.build(null);
        }

        private void setSourceInfo(com.google.javascript.rhino.Node newNode) {
            com.google.javascript.rhino.Node provideStringNode = getProvideStringNode();
            int offset = getSourceInfoOffset(provideStringNode);
            com.google.javascript.rhino.Node sourceInfoNode = (provideStringNode == null) ? firstNode : provideStringNode;
            newNode.copyInformationFromForTree(sourceInfoNode);
            if (offset != 0) {
                newNode.setSourceEncodedPositionForTree(sourceInfoNode.getSourcePosition() + offset);
            }
        }

        private int getSourceInfoOffset(com.google.javascript.rhino.Node provideStringNode) {
            if (provideStringNode == null) {
                return 0;
            }
            int indexOfLastDot = namespace.lastIndexOf('.');
            return 2 + indexOfLastDot;
        }

        private com.google.javascript.rhino.Node getProvideStringNode() {
            return (firstNode.getFirstChild() != null) && com.google.javascript.jscomp.NodeUtil.isExprCall(firstNode) ? firstNode.getFirstChild().getLastChild() : null;
        }
    }

    private static boolean isNamespacePlaceholder(com.google.javascript.rhino.Node n) {
        if (!n.getBooleanProp(com.google.javascript.rhino.Node.IS_NAMESPACE)) {
            return false;
        }
        com.google.javascript.rhino.Node value = null;
        if (n.isExprResult()) {
            com.google.javascript.rhino.Node assign = n.getFirstChild();
            value = assign.getLastChild();
        } else if (n.isVar()) {
            com.google.javascript.rhino.Node name = n.getFirstChild();
            value = name.getFirstChild();
        }
        return ((value != null) && value.isObjectLit()) && (!value.hasChildren());
    }

    private void maybeAddStringNodeToSymbolTable(com.google.javascript.rhino.Node n) {
        if (preprocessorSymbolTable == null) {
            return;
        }
        java.lang.String name = n.getString();
        com.google.javascript.rhino.Node syntheticRef = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), name, n, name);
        final int forQuote = 1;
        final int forDot = 1;
        com.google.javascript.rhino.Node current = null;
        for (current = syntheticRef; current.isGetProp(); current = current.getFirstChild()) {
            int fullLen = current.getQualifiedName().length();
            int namespaceLen = current.getFirstChild().getQualifiedName().length();
            current.setSourceEncodedPosition(n.getSourcePosition() + forQuote);
            current.setLength(fullLen);
            current.getLastChild().setSourceEncodedPosition(((n.getSourcePosition() + namespaceLen) + forQuote) + forDot);
            current.getLastChild().setLength(current.getLastChild().getString().length());
        }
        current.setSourceEncodedPosition(n.getSourcePosition() + forQuote);
        current.setLength(current.getString().length());
        maybeAddToSymbolTable(syntheticRef);
    }

    private void maybeAddToSymbolTable(com.google.javascript.rhino.Node n) {
        if (preprocessorSymbolTable != null) {
            preprocessorSymbolTable.addReference(n);
        }
    }

    private class UnrecognizedRequire {
        final com.google.javascript.rhino.Node requireNode;

        final java.lang.String namespace;

        final java.lang.String inputName;

        UnrecognizedRequire(com.google.javascript.rhino.Node requireNode, java.lang.String namespace, java.lang.String inputName) {
            this.requireNode = requireNode;
            this.namespace = namespace;
            this.inputName = inputName;
        }
    }
}
[64920] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659910599881
GPR[SSUN]-1659910599881
234947553
GPR[ESUN]-1659910600083
GPR[SSUN]-1659910600083
234947553
GPR[SPVATF]-1659910600284
GPR[EPVATF]-1659910600300
[65339] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910600300
GPR[EPVATF]-1659910600315
[65355] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910600316
GPR[SSUN]-1659910600316
234947553
GPR[ESUN]-1659910600516
GPR[SSUN]-1659910600516
234947553
GPR[SPVATF]-1659910600717
GPR[EPVATF]-1659910600732
[65771] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910600732
GPR[EPVATF]-1659910600746
[65785] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910600747
GPR[SSUN]-1659910600747
234947553
GPR[SPVATF]-1659910600952
GPR[EPVATF]-1659910600967
[66006] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910600967
GPR[SSUN]-1659910600967
234947553
GPR[ESUN]-1659910601162
GPR[SSUN]-1659910601162
234947553
GPR[ESUN]-1659910601361
GPR[SSUN]-1659910601361
234947553
GPR[SPVATF]-1659910601571
GPR[EPVATF]-1659910601586
[66625] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910601586
GPR[SSUN]-1659910601586
234947553
GPR[SPVATF]-1659910601787
GPR[EPVATF]-1659910601802
[66841] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910601802
GPR[SSUN]-1659910601802
234947553
GPR[SPVATF]-1659910602001
GPR[EPVATF]-1659910603120
[68160] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910603121
GPR[SSUN]-1659910603121
234947553
GPR[ESUN]-1659910603348
GPR[SSUN]-1659910603348
234947553
GPR[ESUN]-1659910603546
GPR[SSUN]-1659910603546
234947553
GPR[SPVATF]-1659910603743
GPR[EPVATF]-1659910603773
[68812] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910603773
GPR[SSUN]-1659910603773
234947553
GPR[SPVATF]-1659910603976
GPR[EPVATF]-1659910603989
[69029] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910603990
GPR[SSUN]-1659910603990
234947553
GPR[ESUN]-1659910604189
GPR[SSUN]-1659910604189
234947553
GPR[SPVATF]-1659910604392
GPR[EPVATF]-1659910604407
[69446] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910604407
GPR[SSUN]-1659910604407
234947553
GPR[SPVATF]-1659910604603
GPR[EPVATF]-1659910604617
[69657] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910604618
GPR[SSUN]-1659910604618
234947553
GPR[ESUN]-1659910604809
GPR[SSUN]-1659910604809
890942016
GPR[SPVATF]-1659910605010
GPR[EPVATF]-1659910605028
[70067] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910605028
GPR[EPVATF]-1659910605045
[70084] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910605045
GPR[SSUN]-1659910605045
890942016
GPR[SPVATF]-1659910605254
GPR[EPVATF]-1659910605272
[70311] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910605272
GPR[SSUN]-1659910605272
890942016
GPR[ESUN]-1659910605474
GPR[SSUN]-1659910605474
890942016
GPR[SPVATF]-1659910605678
GPR[EPVATF]-1659910605695
[70734] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910605695
GPR[SSUN]-1659910605695
890942016
GPR[SPVATF]-1659910605901
GPR[EPVATF]-1659910605920
[70959] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910605920
GPR[EPVATF]-1659910605938
[70977] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910605938
GPR[SSUN]-1659910605938
890942016
GPR[SPVATF]-1659910606137
GPR[EPVATF]-1659910606156
[71195] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910606156
GPR[SSUN]-1659910606156
890942016
GPR[SPVATF]-1659910606359
GPR[EPVATF]-1659910606377
[71416] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910606377
GPR[EPVATF]-1659910606395
[71434] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910606395
GPR[SSUN]-1659910606395
890942016
GPR[ESUN]-1659910606594
GPR[SSUN]-1659910606595
890942016
GPR[SPVATF]-1659910606792
GPR[EPVATF]-1659910606810
[71849] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910606810
GPR[SSUN]-1659910606810
890942016
GPR[SPVATF]-1659910607010
GPR[EPVATF]-1659910607027
[72066] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910607027
GPR[SSUN]-1659910607027
890942016
GPR[SPVATF]-1659910607226
GPR[EPVATF]-1659910607244
[72283] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910607244
GPR[SSUN]-1659910607244
890942016
GPR[ESUN]-1659910607439
GPR[SSUN]-1659910607439
1613130706
GPR[SPVATF]-1659910607671
GPR[EPVATF]-1659910607893
[72932] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910607894
GPR[EPVATF]-1659910608108
[73147] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910608109
GPR[SSUN]-1659910608109
1613130706
GPR[SPVATF]-1659910608325
GPR[EPVATF]-1659910608517
[73556] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910608518
GPR[EPVATF]-1659910608712
[73751] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910608712
GPR[SSUN]-1659910608713
1613130706
GPR[SPVATF]-1659910608942
GPR[EPVATF]-1659910609130
[74169] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910609130
GPR[SSUN]-1659910609130
707639929
GPR[ESUN]-1659910609380
GPR[SSUN]-1659910609380
707639929
GPR[SPVATF]-1659910609628
GPR[EPVATF]-1659910609857
GPR[SPS]-1659910609857
[75579] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:172.
GPR[EPS]-1659910610540
GPR[ESUN]-1659910610541
GPR[SSUN]-1659910610541
707639929
GPR[SPVATF]-1659910610807
GPR[EPVATF]-1659910611033
GPR[SPS]-1659910611033
[76637] ERROR ConstraintModelBuilder - Unable to compile the change: 
class ProcessClosurePrimitives extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback implements com.google.javascript.jscomp.HotSwapCompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType NULL_ARGUMENT_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NULL_ARGUMENT_ERROR", "method \"{0}\" called without an argument");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_OBJECTLIT_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EXPECTED_OBJECTLIT_ERROR", "method \"{0}\" expected an object literal argument");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_STRING_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EXPECTED_STRING_ERROR", "method \"{0}\" expected an object string argument");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_ARGUMENT_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_ARGUMENT_ERROR", "method \"{0}\" called with invalid argument");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_STYLE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_CSS_NAME_MAP_STYLE_ERROR", "Invalid CSS name map style {0}");

    static final com.google.javascript.jscomp.DiagnosticType TOO_MANY_ARGUMENTS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_TOO_MANY_ARGUMENTS_ERROR", "method \"{0}\" called with more than one argument");

    static final com.google.javascript.jscomp.DiagnosticType DUPLICATE_NAMESPACE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_DUPLICATE_NAMESPACE_ERROR", "namespace \"{0}\" cannot be provided twice");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_NAMESPACE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_FUNCTION_NAMESPACE_ERROR", "\"{0}\" cannot be both provided and declared as a function");

    static final com.google.javascript.jscomp.DiagnosticType MISSING_PROVIDE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_MISSING_PROVIDE_ERROR", "required \"{0}\" namespace never provided");

    static final com.google.javascript.jscomp.DiagnosticType LATE_PROVIDE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_LATE_PROVIDE_ERROR", "required \"{0}\" namespace not provided yet");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_PROVIDE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_PROVIDE_ERROR", "\"{0}\" is not a valid JS identifier name");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_DEFINE_NAME_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_DEFINE_NAME_ERROR", "\"{0}\" is not a valid JS identifier name");

    static final com.google.javascript.jscomp.DiagnosticType MISSING_DEFINE_ANNOTATION = com.google.javascript.jscomp.DiagnosticType.error("JSC_INVALID_MISSING_DEFINE_ANNOTATION", "Missing @define annotation");

    static final com.google.javascript.jscomp.DiagnosticType XMODULE_REQUIRE_ERROR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_XMODULE_REQUIRE_ERROR", "namespace \"{0}\" provided in module {1} " + "but required in module {2}");

    static final com.google.javascript.jscomp.DiagnosticType NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR", "goog.setCssNameMapping only takes an object literal with string values");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_CSS_RENAMING_MAP = com.google.javascript.jscomp.DiagnosticType.warning("INVALID_CSS_RENAMING_MAP", "Invalid entries in css renaming map: {0}");

    static final com.google.javascript.jscomp.DiagnosticType BASE_CLASS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_BASE_CLASS_ERROR", "incorrect use of goog.base: {0}");

    static final java.lang.String GOOG = "goog";

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.JSModuleGraph moduleGraph;

    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName> providedNames = com.google.common.collect.Maps.newLinkedHashMap();

    private final java.util.List<com.google.javascript.jscomp.ProcessClosurePrimitives.UnrecognizedRequire> unrecognizedRequires = com.google.common.collect.Lists.newArrayList();

    private final java.util.Set<java.lang.String> exportedVariables = com.google.common.collect.Sets.newHashSet();

    private final com.google.javascript.jscomp.CheckLevel requiresLevel;

    private final com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable;

    private final java.util.List<com.google.javascript.rhino.Node> defineCalls = com.google.common.collect.Lists.newArrayList();

    ProcessClosurePrimitives(com.google.javascript.jscomp.AbstractCompiler compiler, @javax.annotation.Nullable
    com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable, com.google.javascript.jscomp.CheckLevel requiresLevel) {
        this.compiler = compiler;
        this.preprocessorSymbolTable = preprocessorSymbolTable;
        this.moduleGraph = compiler.getModuleGraph();
        this.requiresLevel = requiresLevel;
        providedNames.put(com.google.javascript.jscomp.ProcessClosurePrimitives.GOOG, new com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName(com.google.javascript.jscomp.ProcessClosurePrimitives.GOOG, null, null, false));
    }

    java.util.Set<java.lang.String> getExportedVariableNames() {
        return exportedVariables;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        new com.google.javascript.jscomp.NodeTraversal(compiler, this).traverse(root);
        for (com.google.javascript.rhino.Node n : defineCalls) {
            replaceGoogDefines(n);
        }
        for (com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName pn : providedNames.values()) {
            pn.replace();
        }
        if (requiresLevel.isOn()) {
            for (com.google.javascript.jscomp.ProcessClosurePrimitives.UnrecognizedRequire r : unrecognizedRequires) {
                com.google.javascript.jscomp.DiagnosticType error;
                com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName expectedName = providedNames.get(r.namespace);
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(2).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.defineCalls",com.google.javascript.jscomp.ProcessClosurePrimitives.this.defineCalls);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_DEFINE_NAME_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_DEFINE_NAME_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.FUNCTION_NAMESPACE_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.FUNCTION_NAMESPACE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("(expectedName != null)",(expectedName != null));} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.DUPLICATE_NAMESPACE_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.DUPLICATE_NAMESPACE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_STYLE_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_STYLE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_PROVIDE_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_PROVIDE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_PROVIDE_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_PROVIDE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.GOOG",com.google.javascript.jscomp.ProcessClosurePrimitives.GOOG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.moduleGraph",com.google.javascript.jscomp.ProcessClosurePrimitives.this.moduleGraph);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("(expectedName.firstNode != null)",(expectedName.firstNode != null));} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.compiler",com.google.javascript.jscomp.ProcessClosurePrimitives.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_CSS_RENAMING_MAP",com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_CSS_RENAMING_MAP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("root",root);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.requiresLevel",com.google.javascript.jscomp.ProcessClosurePrimitives.this.requiresLevel);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.TOO_MANY_ARGUMENTS_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.TOO_MANY_ARGUMENTS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_DEFINE_ANNOTATION",com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_DEFINE_ANNOTATION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.unrecognizedRequires",com.google.javascript.jscomp.ProcessClosurePrimitives.this.unrecognizedRequires);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_STRING_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_STRING_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.exportedVariables",com.google.javascript.jscomp.ProcessClosurePrimitives.this.exportedVariables);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.BASE_CLASS_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.BASE_CLASS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("expectedName",expectedName);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_OBJECTLIT_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_OBJECTLIT_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.NULL_ARGUMENT_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.NULL_ARGUMENT_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.preprocessorSymbolTable",com.google.javascript.jscomp.ProcessClosurePrimitives.this.preprocessorSymbolTable);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.this.providedNames",com.google.javascript.jscomp.ProcessClosurePrimitives.this.providedNames);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.LATE_PROVIDE_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.LATE_PROVIDE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("(expectedName != null) && (expectedName.firstNode != null)",(expectedName != null) && (expectedName.firstNode != null));} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.XMODULE_REQUIRE_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.XMODULE_REQUIRE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("externs",externs);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectInput("com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_ARGUMENT_ERROR",com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_ARGUMENT_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(2).collectionEnds();
                }
                if (runtimeAngelicValue) if ((expectedName != null) && (expectedName.firstNode != null)) {
                    error = com.google.javascript.jscomp.ProcessClosurePrimitives.LATE_PROVIDE_ERROR;
                } else {
                    error = com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_PROVIDE_ERROR;
                }
                compiler.report(com.google.javascript.jscomp.JSError.make(r.inputName, r.requireNode, requiresLevel, error, r.namespace));
            }
        }
    }

    private void replaceGoogDefines(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.common.base.Preconditions.checkState(parent.isExprResult());
        java.lang.String name = n.getChildAtIndex(1).getString();
        com.google.javascript.rhino.Node value = n.getChildAtIndex(2).detachFromParent();
        com.google.javascript.rhino.Node replacement = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNodeDeclaration(compiler.getCodingConvention(), name, value, n.getJSDocInfo());
        replacement.useSourceInfoIfMissingFromForTree(n);
        parent.getParent().replaceChild(parent, replacement);
        compiler.reportCodeChange();
    }

    @java.lang.Override
    public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
        this.compiler.process(this);
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                boolean isExpr = parent.isExprResult();
                com.google.javascript.rhino.Node left = n.getFirstChild();
                if (left.isGetProp()) {
                    com.google.javascript.rhino.Node name = left.getFirstChild();
                    if (name.isName() && com.google.javascript.jscomp.ProcessClosurePrimitives.GOOG.equals(name.getString())) {
                        java.lang.String methodName = name.getNext().getString();
                        if ("base".equals(methodName)) {
                            processBaseClassCall(t, n);
                        } else if (!isExpr) {
                            break;
                        } else if ("define".equals(methodName)) {
                            processDefineCall(t, n, parent);
                        } else if ("require".equals(methodName)) {
                            processRequireCall(t, n, parent);
                        } else if ("provide".equals(methodName)) {
                            processProvideCall(t, n, parent);
                        } else if ("exportSymbol".equals(methodName)) {
                            com.google.javascript.rhino.Node arg = left.getNext();
                            if (arg.isString()) {
                                int dot = arg.getString().indexOf('.');
                                if (dot == (-1)) {
                                    exportedVariables.add(arg.getString());
                                } else {
                                    exportedVariables.add(arg.getString().substring(0, dot));
                                }
                            }
                        } else if ("addDependency".equals(methodName)) {
                            com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
                            java.util.List<java.lang.String> typeDecls = convention.identifyTypeDeclarationCall(n);
                            if (typeDecls != null) {
                                for (java.lang.String typeDecl : typeDecls) {
                                    compiler.getTypeRegistry().forwardDeclareType(typeDecl);
                                }
                            }
                            parent.replaceChild(n, com.google.javascript.rhino.IR.number(0));
                            compiler.reportCodeChange();
                        } else if ("setCssNameMapping".equals(methodName)) {
                            processSetCssNameMapping(t, n, parent);
                        }
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.NAME :
                handleCandidateProvideDefinition(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                handleTypedefDefinition(t, n);
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (t.inGlobalScope() && (!com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n))) {
                    java.lang.String name = n.getFirstChild().getString();
                    com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName pn = providedNames.get(name);
                    if (pn != null) {
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.FUNCTION_NAMESPACE_ERROR, name));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                if (((n.getFirstChild().isName() && (!parent.isCall())) && (!parent.isAssign())) && "goog.base".equals(n.getQualifiedName())) {
                    reportBadBaseClassUse(t, n, "May only be called directly.");
                }
                break;
        }
    }

    private void processRequireCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node arg = left.getNext();
        if (verifyLastArgumentIsString(t, left, arg)) {
            java.lang.String ns = arg.getString();
            com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName provided = providedNames.get(ns);
            if ((provided == null) || (!provided.isExplicitlyProvided())) {
                unrecognizedRequires.add(new com.google.javascript.jscomp.ProcessClosurePrimitives.UnrecognizedRequire(n, ns, t.getSourceName()));
            } else {
                com.google.javascript.jscomp.JSModule providedModule = provided.explicitModule;
                com.google.common.base.Preconditions.checkNotNull(providedModule);
                com.google.javascript.jscomp.JSModule module = t.getModule();
                if (((moduleGraph != null) && (module != providedModule)) && (!moduleGraph.dependsOn(module, providedModule))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.XMODULE_REQUIRE_ERROR, ns, providedModule.getName(), module.getName()));
                }
            }
            maybeAddToSymbolTable(left);
            maybeAddStringNodeToSymbolTable(arg);
            if (provided != null) {
                parent.detachFromParent();
                compiler.reportCodeChange();
            }
        }
    }

    private void processProvideCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node arg = left.getNext();
        if (verifyProvide(t, left, arg)) {
            java.lang.String ns = arg.getString();
            maybeAddToSymbolTable(left);
            maybeAddStringNodeToSymbolTable(arg);
            if (providedNames.containsKey(ns)) {
                com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName previouslyProvided = providedNames.get(ns);
                if (!previouslyProvided.isExplicitlyProvided()) {
                    previouslyProvided.addProvide(parent, t.getModule(), true);
                } else {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.DUPLICATE_NAMESPACE_ERROR, ns));
                }
            } else {
                registerAnyProvidedPrefixes(ns, parent, t.getModule());
                providedNames.put(ns, new com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName(ns, parent, t.getModule(), true));
            }
        }
    }

    private void processDefineCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node args = left.getNext();
        if (verifyDefine(t, parent, left, args)) {
            com.google.javascript.rhino.Node nameNode = args;
            java.lang.String name = args.getString();
            com.google.javascript.rhino.Node value = args.getNext();
            maybeAddToSymbolTable(left);
            maybeAddStringNodeToSymbolTable(nameNode);
            this.defineCalls.add(n);
        }
    }

    private void handleTypedefDefinition(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo info = n.getFirstChild().getJSDocInfo();
        if ((t.inGlobalScope() && (info != null)) && info.hasTypedefType()) {
            java.lang.String name = n.getFirstChild().getQualifiedName();
            if (name != null) {
                com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName pn = providedNames.get(name);
                if (pn != null) {
                    pn.addDefinition(n, t.getModule());
                }
            }
        }
    }

    private void handleCandidateProvideDefinition(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (t.inGlobalScope()) {
            java.lang.String name = null;
            if (n.isName() && parent.isVar()) {
                name = n.getString();
            } else if (n.isAssign() && parent.isExprResult()) {
                name = n.getFirstChild().getQualifiedName();
            }
            if (name != null) {
                if (parent.getBooleanProp(com.google.javascript.rhino.Node.IS_NAMESPACE)) {
                    processProvideFromPreviousPass(t, name, parent);
                } else {
                    com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName pn = providedNames.get(name);
                    if (pn != null) {
                        pn.addDefinition(parent, t.getModule());
                    }
                }
            }
        }
    }

    private void processBaseClassCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node callee = n.getFirstChild();
        com.google.javascript.rhino.Node thisArg = callee.getNext();
        if ((thisArg == null) || (!thisArg.isThis())) {
            reportBadBaseClassUse(t, n, "First argument must be 'this'.");
            return;
        }
        com.google.javascript.rhino.Node enclosingFnNameNode = getEnclosingDeclNameNode(t);
        if (enclosingFnNameNode == null) {
            reportBadBaseClassUse(t, n, "Could not find enclosing method.");
            return;
        }
        java.lang.String enclosingQname = enclosingFnNameNode.getQualifiedName();
        if (enclosingQname.indexOf(".prototype.") == (-1)) {
            com.google.javascript.rhino.Node enclosingParent = enclosingFnNameNode.getParent();
            com.google.javascript.rhino.Node maybeInheritsExpr = (enclosingParent.isAssign() ? enclosingParent.getParent() : enclosingParent).getNext();
            com.google.javascript.rhino.Node baseClassNode = null;
            if (((maybeInheritsExpr != null) && maybeInheritsExpr.isExprResult()) && maybeInheritsExpr.getFirstChild().isCall()) {
                com.google.javascript.rhino.Node callNode = maybeInheritsExpr.getFirstChild();
                if ("goog.inherits".equals(callNode.getFirstChild().getQualifiedName()) && callNode.getLastChild().isQualifiedName()) {
                    baseClassNode = callNode.getLastChild();
                }
            }
            if (baseClassNode == null) {
                reportBadBaseClassUse(t, n, "Could not find goog.inherits for base class");
                return;
            }
            n.replaceChild(callee, com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), java.lang.String.format("%s.call", baseClassNode.getQualifiedName()), callee, "goog.base"));
            compiler.reportCodeChange();
        } else {
            com.google.javascript.rhino.Node methodNameNode = thisArg.getNext();
            if ((methodNameNode == null) || (!methodNameNode.isString())) {
                reportBadBaseClassUse(t, n, "Second argument must name a method.");
                return;
            }
            java.lang.String methodName = methodNameNode.getString();
            java.lang.String ending = ".prototype." + methodName;
            if ((enclosingQname == null) || (!enclosingQname.endsWith(ending))) {
                reportBadBaseClassUse(t, n, "Enclosing method does not match " + methodName);
                return;
            }
            com.google.javascript.rhino.Node className = enclosingFnNameNode.getFirstChild().getFirstChild();
            n.replaceChild(callee, com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), java.lang.String.format("%s.superClass_.%s.call", className.getQualifiedName(), methodName), callee, "goog.base"));
            n.removeChild(methodNameNode);
            compiler.reportCodeChange();
        }
    }

    private com.google.javascript.rhino.Node getEnclosingDeclNameNode(com.google.javascript.jscomp.NodeTraversal t) {
        com.google.javascript.rhino.Node scopeRoot = t.getScopeRoot();
        if (com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(scopeRoot)) {
            return scopeRoot.getFirstChild();
        } else {
            com.google.javascript.rhino.Node parent = scopeRoot.getParent();
            if (parent != null) {
                if (parent.isAssign() || ((parent.getLastChild() == scopeRoot) && parent.getFirstChild().isQualifiedName())) {
                    return parent.getFirstChild();
                } else if (parent.isName()) {
                    return parent;
                }
            }
        }
        return null;
    }

    private void reportBadBaseClassUse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String extraMessage) {
        compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.BASE_CLASS_ERROR, extraMessage));
    }

    private void processProvideFromPreviousPass(com.google.javascript.jscomp.NodeTraversal t, java.lang.String name, com.google.javascript.rhino.Node parent) {
        if (!providedNames.containsKey(name)) {
            com.google.javascript.rhino.Node expr = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.EXPR_RESULT);
            expr.copyInformationFromForTree(parent);
            parent.getParent().addChildBefore(expr, parent);
            compiler.reportCodeChange();
            com.google.javascript.jscomp.JSModule module = t.getModule();
            registerAnyProvidedPrefixes(name, expr, module);
            com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName provided = new com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName(name, expr, module, true);
            providedNames.put(name, provided);
            provided.addDefinition(parent, module);
        } else if (com.google.javascript.jscomp.ProcessClosurePrimitives.isNamespacePlaceholder(parent)) {
            parent.getParent().removeChild(parent);
            compiler.reportCodeChange();
        }
    }

    private void processSetCssNameMapping(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node arg = left.getNext();
        if (verifySetCssNameMapping(t, left, arg)) {
            final java.util.Map<java.lang.String, java.lang.String> cssNames = com.google.common.collect.Maps.newHashMap();
            for (com.google.javascript.rhino.Node key = arg.getFirstChild(); key != null; key = key.getNext()) {
                com.google.javascript.rhino.Node value = key.getFirstChild();
                if (((!key.isStringKey()) || (value == null)) || (!value.isString())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR));
                    return;
                }
                cssNames.put(key.getString(), value.getString());
            }
            java.lang.String styleStr = "BY_PART";
            if (arg.getNext() != null) {
                styleStr = arg.getNext().getString();
            }
            final com.google.javascript.jscomp.CssRenamingMap.Style style;
            try {
                style = com.google.javascript.jscomp.CssRenamingMap.Style.valueOf(styleStr);
            } catch (java.lang.IllegalArgumentException e) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_STYLE_ERROR, styleStr));
                return;
            }
            if (style == com.google.javascript.jscomp.CssRenamingMap.Style.BY_PART) {
                java.util.List<java.lang.String> errors = com.google.common.collect.Lists.newArrayList();
                for (java.lang.String key : cssNames.keySet()) {
                    if (key.contains("-")) {
                        errors.add(key);
                    }
                }
                if (errors.size() != 0) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_CSS_RENAMING_MAP, errors.toString()));
                }
            } else if (style == com.google.javascript.jscomp.CssRenamingMap.Style.BY_WHOLE) {
                java.util.List<java.lang.String> errors = com.google.common.collect.Lists.newArrayList();
                for (java.util.Map.Entry<java.lang.String, java.lang.String> b : cssNames.entrySet()) {
                    if (b.getKey().length() > 10) {
                        continue;
                    }
                    for (java.util.Map.Entry<java.lang.String, java.lang.String> a : cssNames.entrySet()) {
                        java.lang.String combined = cssNames.get((a.getKey() + "-") + b.getKey());
                        if ((combined != null) && (!combined.equals((a.getValue() + "-") + b.getValue()))) {
                            errors.add(((((((("map(" + a.getKey()) + "-") + b.getKey()) + ") != map(") + a.getKey()) + ")-map(") + b.getKey()) + ")");
                        }
                    }
                }
                if (errors.size() != 0) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_CSS_RENAMING_MAP, errors.toString()));
                }
            }
            com.google.javascript.jscomp.CssRenamingMap cssRenamingMap = new com.google.javascript.jscomp.CssRenamingMap() {
                @java.lang.Override
                public java.lang.String get(java.lang.String value) {
                    if (cssNames.containsKey(value)) {
                        return cssNames.get(value);
                    } else {
                        return value;
                    }
                }

                @java.lang.Override
                public com.google.javascript.jscomp.CssRenamingMap.Style getStyle() {
                    return style;
                }
            };
            compiler.setCssRenamingMap(cssRenamingMap);
            parent.getParent().removeChild(parent);
            compiler.reportCodeChange();
        }
    }

    private boolean verifyProvide(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node methodName, com.google.javascript.rhino.Node arg) {
        if (!verifyLastArgumentIsString(t, methodName, arg)) {
            return false;
        }
        for (java.lang.String part : arg.getString().split("\\.")) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidPropertyName(part)) {
                compiler.report(t.makeError(arg, com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_PROVIDE_ERROR, part));
                return false;
            }
        }
        return true;
    }

    private boolean verifyDefine(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node expr, com.google.javascript.rhino.Node methodName, com.google.javascript.rhino.Node args) {
        com.google.javascript.rhino.Node arg = args;
        if ((!verifyNotNull(t, methodName, arg)) || (!verifyOfType(t, methodName, arg, com.google.javascript.rhino.Token.STRING))) {
            return false;
        }
        arg = arg.getNext();
        if ((!verifyNotNull(t, methodName, arg)) || (!verifyIsLast(t, methodName, arg))) {
            return false;
        }
        java.lang.String name = args.getString();
        for (java.lang.String part : name.split("\\.")) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidQualifiedName(part)) {
                compiler.report(t.makeError(args, com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_DEFINE_NAME_ERROR, name));
                return false;
            }
        }
        com.google.javascript.rhino.JSDocInfo info = expr.getFirstChild().getJSDocInfo();
        if ((info == null) || (!info.isDefine())) {
            compiler.report(t.makeError(expr, com.google.javascript.jscomp.ProcessClosurePrimitives.MISSING_DEFINE_ANNOTATION));
            return false;
        }
        return true;
    }

    private boolean verifyLastArgumentIsString(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node methodName, com.google.javascript.rhino.Node arg) {
        return (verifyNotNull(t, methodName, arg) && verifyOfType(t, methodName, arg, com.google.javascript.rhino.Token.STRING)) && verifyIsLast(t, methodName, arg);
    }

    private boolean verifyNotNull(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node methodName, com.google.javascript.rhino.Node arg) {
        if (arg == null) {
            compiler.report(t.makeError(methodName, com.google.javascript.jscomp.ProcessClosurePrimitives.NULL_ARGUMENT_ERROR, methodName.getQualifiedName()));
            return false;
        }
        return true;
    }

    private boolean verifyOfType(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node methodName, com.google.javascript.rhino.Node arg, int desiredType) {
        if (arg.getType() != desiredType) {
            compiler.report(t.makeError(methodName, com.google.javascript.jscomp.ProcessClosurePrimitives.INVALID_ARGUMENT_ERROR, methodName.getQualifiedName()));
            return false;
        }
        return true;
    }

    private boolean verifyIsLast(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node methodName, com.google.javascript.rhino.Node arg) {
        if (arg.getNext() != null) {
            compiler.report(t.makeError(methodName, com.google.javascript.jscomp.ProcessClosurePrimitives.TOO_MANY_ARGUMENTS_ERROR, methodName.getQualifiedName()));
            return false;
        }
        return true;
    }

    private boolean verifySetCssNameMapping(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node methodName, com.google.javascript.rhino.Node firstArg) {
        com.google.javascript.jscomp.DiagnosticType diagnostic = null;
        if (firstArg == null) {
            diagnostic = com.google.javascript.jscomp.ProcessClosurePrimitives.NULL_ARGUMENT_ERROR;
        } else if (!firstArg.isObjectLit()) {
            diagnostic = com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_OBJECTLIT_ERROR;
        } else if (firstArg.getNext() != null) {
            com.google.javascript.rhino.Node secondArg = firstArg.getNext();
            if (!secondArg.isString()) {
                diagnostic = com.google.javascript.jscomp.ProcessClosurePrimitives.EXPECTED_STRING_ERROR;
            } else if (secondArg.getNext() != null) {
                diagnostic = com.google.javascript.jscomp.ProcessClosurePrimitives.TOO_MANY_ARGUMENTS_ERROR;
            }
        }
        if (diagnostic != null) {
            compiler.report(t.makeError(methodName, diagnostic, methodName.getQualifiedName()));
            return false;
        }
        return true;
    }

    private void registerAnyProvidedPrefixes(java.lang.String ns, com.google.javascript.rhino.Node node, com.google.javascript.jscomp.JSModule module) {
        int pos = ns.indexOf('.');
        while (pos != (-1)) {
            java.lang.String prefixNs = ns.substring(0, pos);
            pos = ns.indexOf('.', pos + 1);
            if (providedNames.containsKey(prefixNs)) {
                providedNames.get(prefixNs).addProvide(node, module, false);
            } else {
                providedNames.put(prefixNs, new com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName(prefixNs, node, module, false));
            }
        } 
    }

    private class ProvidedName {
        private final java.lang.String namespace;

        private final com.google.javascript.rhino.Node firstNode;

        private final com.google.javascript.jscomp.JSModule firstModule;

        private com.google.javascript.rhino.Node explicitNode = null;

        private com.google.javascript.jscomp.JSModule explicitModule = null;

        private com.google.javascript.rhino.Node candidateDefinition = null;

        private com.google.javascript.jscomp.JSModule minimumModule = null;

        private com.google.javascript.rhino.Node replacementNode = null;

        ProvidedName(java.lang.String namespace, com.google.javascript.rhino.Node node, com.google.javascript.jscomp.JSModule module, boolean explicit) {
            com.google.common.base.Preconditions.checkArgument((node == null) || node.isExprResult());
            this.namespace = namespace;
            this.firstNode = node;
            this.firstModule = module;
            addProvide(node, module, explicit);
        }

        void addProvide(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.JSModule module, boolean explicit) {
            if (explicit) {
                com.google.common.base.Preconditions.checkState(explicitNode == null);
                com.google.common.base.Preconditions.checkArgument(node.isExprResult());
                explicitNode = node;
                explicitModule = module;
            }
            updateMinimumModule(module);
        }

        boolean isExplicitlyProvided() {
            return explicitNode != null;
        }

        void addDefinition(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.JSModule module) {
            com.google.common.base.Preconditions.checkArgument((node.isExprResult() || node.isFunction()) || node.isVar());
            com.google.common.base.Preconditions.checkArgument(explicitNode != node);
            if ((candidateDefinition == null) || (!node.isExprResult())) {
                candidateDefinition = node;
                updateMinimumModule(module);
            }
        }

        private void updateMinimumModule(com.google.javascript.jscomp.JSModule newModule) {
            if (minimumModule == null) {
                minimumModule = newModule;
            } else if (moduleGraph != null) {
                minimumModule = moduleGraph.getDeepestCommonDependencyInclusive(minimumModule, newModule);
            } else {
                com.google.common.base.Preconditions.checkState(newModule == minimumModule, "Missing module graph");
            }
        }

        void replace() {
            if (firstNode == null) {
                replacementNode = candidateDefinition;
                return;
            }
            if ((candidateDefinition != null) && (explicitNode != null)) {
                explicitNode.detachFromParent();
                compiler.reportCodeChange();
                replacementNode = candidateDefinition;
                if (candidateDefinition.isExprResult() && (!candidateDefinition.getFirstChild().isQualifiedName())) {
                    candidateDefinition.putBooleanProp(com.google.javascript.rhino.Node.IS_NAMESPACE, true);
                    com.google.javascript.rhino.Node assignNode = candidateDefinition.getFirstChild();
                    com.google.javascript.rhino.Node nameNode = assignNode.getFirstChild();
                    if (nameNode.isName()) {
                        com.google.javascript.rhino.Node valueNode = nameNode.getNext();
                        assignNode.removeChild(nameNode);
                        assignNode.removeChild(valueNode);
                        nameNode.addChildToFront(valueNode);
                        com.google.javascript.rhino.Node varNode = com.google.javascript.rhino.IR.var(nameNode);
                        varNode.copyInformationFrom(candidateDefinition);
                        candidateDefinition.getParent().replaceChild(candidateDefinition, varNode);
                        nameNode.setJSDocInfo(assignNode.getJSDocInfo());
                        compiler.reportCodeChange();
                        replacementNode = varNode;
                    }
                }
            } else {
                replacementNode = createDeclarationNode();
                if (firstModule == minimumModule) {
                    firstNode.getParent().addChildBefore(replacementNode, firstNode);
                } else {
                    int indexOfDot = namespace.lastIndexOf('.');
                    if (indexOfDot == (-1)) {
                        compiler.getNodeForCodeInsertion(minimumModule).addChildToBack(replacementNode);
                    } else {
                        com.google.javascript.jscomp.ProcessClosurePrimitives.ProvidedName parentName = providedNames.get(namespace.substring(0, indexOfDot));
                        com.google.common.base.Preconditions.checkNotNull(parentName);
                        com.google.common.base.Preconditions.checkNotNull(parentName.replacementNode);
                        parentName.replacementNode.getParent().addChildAfter(replacementNode, parentName.replacementNode);
                    }
                }
                if (explicitNode != null) {
                    explicitNode.detachFromParent();
                }
                compiler.reportCodeChange();
            }
        }

        private com.google.javascript.rhino.Node createDeclarationNode() {
            if (namespace.indexOf('.') == (-1)) {
                return makeVarDeclNode();
            } else {
                return makeAssignmentExprNode();
            }
        }

        private com.google.javascript.rhino.Node makeVarDeclNode() {
            com.google.javascript.rhino.Node name = com.google.javascript.rhino.IR.name(namespace);
            name.addChildToFront(createNamespaceLiteral());
            com.google.javascript.rhino.Node decl = com.google.javascript.rhino.IR.var(name);
            decl.putBooleanProp(com.google.javascript.rhino.Node.IS_NAMESPACE, true);
            if (compiler.getCodingConvention().isConstant(namespace)) {
                name.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            if (candidateDefinition == null) {
                name.setJSDocInfo(createConstantJsDoc());
            }
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.ProcessClosurePrimitives.isNamespacePlaceholder(decl));
            setSourceInfo(decl);
            return decl;
        }

        private com.google.javascript.rhino.Node createNamespaceLiteral() {
            com.google.javascript.rhino.Node objlit = com.google.javascript.rhino.IR.objectlit();
            objlit.setJSType(compiler.getTypeRegistry().createAnonymousObjectType(null));
            return objlit;
        }

        private com.google.javascript.rhino.Node makeAssignmentExprNode() {
            com.google.javascript.rhino.Node decl = com.google.javascript.rhino.IR.exprResult(com.google.javascript.rhino.IR.assign(com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), namespace, firstNode, namespace), createNamespaceLiteral()));
            decl.putBooleanProp(com.google.javascript.rhino.Node.IS_NAMESPACE, true);
            if (candidateDefinition == null) {
                decl.getFirstChild().setJSDocInfo(createConstantJsDoc());
            }
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.ProcessClosurePrimitives.isNamespacePlaceholder(decl));
            setSourceInfo(decl);
            return decl;
        }

        private com.google.javascript.rhino.JSDocInfo createConstantJsDoc() {
            com.google.javascript.rhino.JSDocInfoBuilder builder = new com.google.javascript.rhino.JSDocInfoBuilder(false);
            builder.recordConstancy();
            return builder.build(null);
        }

        private void setSourceInfo(com.google.javascript.rhino.Node newNode) {
            com.google.javascript.rhino.Node provideStringNode = getProvideStringNode();
            int offset = getSourceInfoOffset(provideStringNode);
            com.google.javascript.rhino.Node sourceInfoNode = (provideStringNode == null) ? firstNode : provideStringNode;
            newNode.copyInformationFromForTree(sourceInfoNode);
            if (offset != 0) {
                newNode.setSourceEncodedPositionForTree(sourceInfoNode.getSourcePosition() + offset);
            }
        }

        private int getSourceInfoOffset(com.google.javascript.rhino.Node provideStringNode) {
            if (provideStringNode == null) {
                return 0;
            }
            int indexOfLastDot = namespace.lastIndexOf('.');
            return 2 + indexOfLastDot;
        }

        private com.google.javascript.rhino.Node getProvideStringNode() {
            return (firstNode.getFirstChild() != null) && com.google.javascript.jscomp.NodeUtil.isExprCall(firstNode) ? firstNode.getFirstChild().getLastChild() : null;
        }
    }

    private static boolean isNamespacePlaceholder(com.google.javascript.rhino.Node n) {
        if (!n.getBooleanProp(com.google.javascript.rhino.Node.IS_NAMESPACE)) {
            return false;
        }
        com.google.javascript.rhino.Node value = null;
        if (n.isExprResult()) {
            com.google.javascript.rhino.Node assign = n.getFirstChild();
            value = assign.getLastChild();
        } else if (n.isVar()) {
            com.google.javascript.rhino.Node name = n.getFirstChild();
            value = name.getFirstChild();
        }
        return ((value != null) && value.isObjectLit()) && (!value.hasChildren());
    }

    private void maybeAddStringNodeToSymbolTable(com.google.javascript.rhino.Node n) {
        if (preprocessorSymbolTable == null) {
            return;
        }
        java.lang.String name = n.getString();
        com.google.javascript.rhino.Node syntheticRef = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(compiler.getCodingConvention(), name, n, name);
        final int forQuote = 1;
        final int forDot = 1;
        com.google.javascript.rhino.Node current = null;
        for (current = syntheticRef; current.isGetProp(); current = current.getFirstChild()) {
            int fullLen = current.getQualifiedName().length();
            int namespaceLen = current.getFirstChild().getQualifiedName().length();
            current.setSourceEncodedPosition(n.getSourcePosition() + forQuote);
            current.setLength(fullLen);
            current.getLastChild().setSourceEncodedPosition(((n.getSourcePosition() + namespaceLen) + forQuote) + forDot);
            current.getLastChild().setLength(current.getLastChild().getString().length());
        }
        current.setSourceEncodedPosition(n.getSourcePosition() + forQuote);
        current.setLength(current.getString().length());
        maybeAddToSymbolTable(syntheticRef);
    }

    private void maybeAddToSymbolTable(com.google.javascript.rhino.Node n) {
        if (preprocessorSymbolTable != null) {
            preprocessorSymbolTable.addReference(n);
        }
    }

    private class UnrecognizedRequire {
        final com.google.javascript.rhino.Node requireNode;

        final java.lang.String namespace;

        final java.lang.String inputName;

        UnrecognizedRequire(com.google.javascript.rhino.Node requireNode, java.lang.String namespace, java.lang.String inputName) {
            this.requireNode = requireNode;
            this.namespace = namespace;
            this.inputName = inputName;
        }
    }
}
[76637] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659910611599
GPR[EPVATF]-1659910611821
GPR[SPS]-1659910611821
[78148] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:165.
GPR[EPS]-1659910613109
GPR[ESUN]-1659910613109
GPR[SSUN]-1659910613109
707639929
GPR[ESUN]-1659910613377
GPR[SSUN]-1659910613377
707639929
GPR[SPVATF]-1659910613639
GPR[EPVATF]-1659910613862
GPR[SPS]-1659910613862
[79487] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:302.
GPR[EPS]-1659910614448
GPR[ESUN]-1659910614448
GPR[SSUN]-1659910614448
1613130706
GPR[SPVATF]-1659910614665
GPR[EPVATF]-1659910614849
[79888] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910614850
GPR[EPVATF]-1659910615041
[80080] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910615041
GPR[SSUN]-1659910615041
1613130706
GPR[SPVATF]-1659910615257
GPR[EPVATF]-1659910615445
[80484] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910615445
GPR[EPVATF]-1659910615629
[80668] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910615629
GPR[SSUN]-1659910615629
1613130706
GPR[ESUN]-1659910615847
GPR[SSUN]-1659910615847
1613130706
GPR[ESUN]-1659910616092
GPR[SSUN]-1659910616092
1613130706
GPR[ESUN]-1659910616304
GPR[SSUN]-1659910616304
1613130706
GPR[ESUN]-1659910616519
GPR[SSUN]-1659910616519
1613130706
GPR[SPVATF]-1659910616869
GPR[EPVATF]-1659910617056
[82096] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910617057
GPR[EPVATF]-1659910617245
[82284] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910617245
GPR[SSUN]-1659910617245
1613130706
GPR[SPVATF]-1659910617463
GPR[EPVATF]-1659910617652
[82691] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910617652
GPR[SSUN]-1659910617652
1613130706
GPR[ESUN]-1659910617870
GPR[SSUN]-1659910617870
1613130706
GPR[SPVATF]-1659910618085
GPR[EPVATF]-1659910618276
[83315] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910618277
GPR[EPVATF]-1659910618467
[83506] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910618468
GPR[SSUN]-1659910618468
1613130706
GPR[ESUN]-1659910618690
GPR[SSUN]-1659910618690
1613130706
GPR[SPVATF]-1659910618909
GPR[EPVATF]-1659910619096
[84135] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910619097
GPR[EPVATF]-1659910619291
[84330] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910619291
GPR[SSUN]-1659910619291
-1966087783
GPR[ESUN]-1659910619513
GPR[SSUN]-1659910619513
-1966087783
GPR[SPVATF]-1659910619712
GPR[EPVATF]-1659910619732
[84771] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910619732
GPR[EPVATF]-1659910619751
[84790] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910619751
GPR[SSUN]-1659910619751
-1966087783
GPR[SPVATF]-1659910619950
GPR[EPVATF]-1659910619970
[85009] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910619970
GPR[SSUN]-1659910619970
-1966087783
GPR[SPVATF]-1659910620166
GPR[EPVATF]-1659910620188
[85227] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910620189
GPR[EPVATF]-1659910620210
[85249] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910620210
GPR[SSUN]-1659910620210
-1966087783
GPR[SPVATF]-1659910620407
GPR[EPVATF]-1659910620429
[85468] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910620429
GPR[EPVATF]-1659910620450
[85489] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910620450
GPR[SSUN]-1659910620450
-1966087783
GPR[SPVATF]-1659910620651
GPR[EPVATF]-1659910620672
[85711] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910620673
GPR[EPVATF]-1659910620693
[85733] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910620694
GPR[SSUN]-1659910620694
-1966087783
GPR[ESUN]-1659910620891
GPR[SSUN]-1659910620891
-1966087783
GPR[ESUN]-1659910621091
GPR[SSUN]-1659910621091
-1966087783
GPR[SPVATF]-1659910621295
GPR[EPVATF]-1659910621316
[86355] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910621316
GPR[EPVATF]-1659910621337
[86376] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910621337
GPR[SSUN]-1659910621337
-1966087783
GPR[SPVATF]-1659910621535
GPR[EPVATF]-1659910621579
[86618] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910621579
GPR[EPVATF]-1659910621600
[86639] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910621600
GPR[SSUN]-1659910621600
-1966087783
GPR[ESUN]-1659910621799
GPR[SSUN]-1659910621799
-1966087783
GPR[SPVATF]-1659910621999
GPR[EPVATF]-1659910622022
[87061] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910622022
GPR[SSUN]-1659910622022
-1966087783
GPR[SPVATF]-1659910622228
GPR[EPVATF]-1659910622249
[87289] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910622250
GPR[SSUN]-1659910622250
-1966087783
GPR[ESUN]-1659910622464
GPR[SSUN]-1659910622464
-1966087783
GPR[SPVATF]-1659910622676
GPR[EPVATF]-1659910622697
[87736] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910622697
GPR[SSUN]-1659910622697
-1966087783
GPR[ESUN]-1659910622898
GPR[SSUN]-1659910622898
-1966087783
GPR[ESUN]-1659910623090
GPR[SSUN]-1659910623090
-1966087783
GPR[SPVATF]-1659910623285
GPR[EPVATF]-1659910623307
[88346] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910623307
GPR[SSUN]-1659910623307
-1966087783
GPR[SPVATF]-1659910623504
GPR[EPVATF]-1659910623525
[88564] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910623525
GPR[SSUN]-1659910623525
-1966087783
GPR[SPVATF]-1659910623722
GPR[EPVATF]-1659910623739
[88778] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910623739
GPR[SSUN]-1659910623739
-1966087783
GPR[SPVATF]-1659910623938
GPR[EPVATF]-1659910623956
[88995] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910623956
GPR[SSUN]-1659910623956
-1966087783
GPR[SPVATF]-1659910624150
GPR[EPVATF]-1659910624167
[89207] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910624168
GPR[SSUN]-1659910624168
-1966087783
GPR[SPVATF]-1659910624364
GPR[EPVATF]-1659910624380
[89420] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910624381
GPR[SSUN]-1659910624381
-1966087783
GPR[SPVATF]-1659910624577
GPR[EPVATF]-1659910624595
[89634] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910624595
GPR[SSUN]-1659910624595
-1966087783
GPR[SPVATF]-1659910624791
GPR[EPVATF]-1659910624808
[89847] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910624808
GPR[SSUN]-1659910624808
-1966087783
GPR[SPVATF]-1659910625006
GPR[EPVATF]-1659910625022
[90061] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910625023
GPR[EPVATF]-1659910625039
[90078] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910625040
GPR[SSUN]-1659910625040
-1966087783
GPR[ESUN]-1659910625243
GPR[SSUN]-1659910625243
707639929
GPR[SPVATF]-1659910625491
GPR[EPVATF]-1659910626469
GPR[SPS]-1659910626469
[92094] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:329.
GPR[EPS]-1659910627056
GPR[SPVATF]-1659910627056
GPR[EPVATF]-1659910627279
GPR[SPS]-1659910627279
GPR[EPS]-1659910629103
GPR[SPVATR]-1659910629103
[94142] INFO TestPatch - Applying patch: com.google.javascript.jscomp.ProcessClosurePrimitives:329: CONDITIONAL (10 < ns.length()) || (com.google.javascript.jscomp.ProcessClosurePrimitives.this.unrecognizedRequires.size() <= com.google.javascript.jscomp.ProcessClosurePrimitives.this.exportedVariables.size())
[94552] INFO TestPatch - Running test suite to check the patch "(10 < ns.length()) || (com.google.javascript.jscomp.ProcessClosurePrimitives.this.unrecognizedRequires.size() <= com.google.javascript.jscomp.ProcessClosurePrimitives.this.exportedVariables.size())" is working
GPR[EPVATR]-1659910629980
[95019] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659910629980
[95035] INFO NoPol - --- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java
@@ -328,3 +328,3 @@
       // let them be caught in the subsequent run.
-      if (provided != null) {
+      if ((10 < ns.length()) || (com.google.javascript.jscomp.ProcessClosurePrimitives.this.unrecognizedRequires.size() <= com.google.javascript.jscomp.ProcessClosurePrimitives.this.exportedVariables.size())) {
         parent.detachFromParent();

Saving patch at /experiment_home///results/Nopol/Closure/113/seed_261/patch_89971_1ts_1659910629996.diff
GPR[ESUN]-1659910629997
GPR[SSUN]-1659910629997
707639929
GPR[SPVATF]-1659910630253
GPR[EPVATF]-1659910630473
GPR[SPS]-1659910630473
[96083] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:322.
GPR[EPS]-1659910631044
GPR[ESUN]-1659910631044
GPR[SSUN]-1659910631044
707639929
GPR[SPVATF]-1659910631314
GPR[EPVATF]-1659910631537
GPR[SPS]-1659910631537
[97147] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:321.
GPR[EPS]-1659910632108
GPR[ESUN]-1659910632108
GPR[SSUN]-1659910632108
707639929
GPR[SPVATF]-1659910632366
GPR[EPVATF]-1659910632584
GPR[SPS]-1659910632584
[98216] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:301.
GPR[EPS]-1659910633177
GPR[SPVATF]-1659910633177
GPR[EPVATF]-1659910633397
GPR[SPS]-1659910633397
[99021] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:301.
GPR[EPS]-1659910633982
GPR[ESUN]-1659910633982
GPR[SSUN]-1659910633982
707639929
GPR[ESUN]-1659910634234
GPR[SSUN]-1659910634234
707639929
GPR[ESUN]-1659910634480
GPR[SSUN]-1659910634480
707639929
GPR[ESUN]-1659910634731
GPR[SSUN]-1659910634731
707639929
GPR[SPVATF]-1659910634987
GPR[EPVATF]-1659910635211
GPR[SPS]-1659910635211
[100805] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:298.
GPR[EPS]-1659910635766
GPR[SPVATF]-1659910635766
GPR[EPVATF]-1659910636002
GPR[SPS]-1659910636002
[101590] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:298.
GPR[EPS]-1659910636551
GPR[ESUN]-1659910636552
GPR[SSUN]-1659910636552
707639929
GPR[ESUN]-1659910636806
GPR[SSUN]-1659910636806
707639929
GPR[ESUN]-1659910637053
GPR[SSUN]-1659910637053
707639929
GPR[SPVATF]-1659910637302
GPR[EPVATF]-1659910637521
GPR[SPS]-1659910637521
[103114] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:223.
GPR[EPS]-1659910638075
GPR[ESUN]-1659910638075
GPR[SSUN]-1659910638075
-132053243
GPR[SPVATF]-1659910638291
GPR[EPVATF]-1659910638308
[103348] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910638309
GPR[SSUN]-1659910638309
-132053243
GPR[SPVATF]-1659910638505
GPR[EPVATF]-1659910638523
[103562] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910638523
GPR[SSUN]-1659910638523
-132053243
GPR[SPVATF]-1659910638719
GPR[EPVATF]-1659910638736
[103775] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910638736
GPR[SSUN]-1659910638736
-132053243
GPR[SPVATF]-1659910638933
GPR[EPVATF]-1659910638951
[103990] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910638951
GPR[EPVATF]-1659910638967
[104006] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910638967
GPR[SSUN]-1659910638967
-132053243
GPR[ESUN]-1659910639163
GPR[SSUN]-1659910639163
-132053243
GPR[ESUN]-1659910639356
GPR[SSUN]-1659910639356
-132053243
GPR[SPVATF]-1659910639555
GPR[EPVATF]-1659910639573
[104612] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910639573
GPR[EPVATF]-1659910639590
[104629] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910639590
GPR[SSUN]-1659910639590
-132053243
GPR[ESUN]-1659910639789
GPR[SSUN]-1659910639789
-132053243
GPR[ESUN]-1659910639986
GPR[SSUN]-1659910639986
-132053243
GPR[ESUN]-1659910640184
GPR[SSUN]-1659910640184
-132053243
GPR[SPVATF]-1659910640382
GPR[EPVATF]-1659910640400
[105439] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910640400
GPR[EPVATF]-1659910640417
[105456] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910640417
GPR[SSUN]-1659910640417
-132053243
GPR[SPVATF]-1659910640618
GPR[EPVATF]-1659910640635
[105675] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910640636
GPR[SSUN]-1659910640636
-132053243
GPR[SPVATF]-1659910640851
GPR[EPVATF]-1659910640869
[105908] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910640869
GPR[SSUN]-1659910640869
-132053243
GPR[SPVATF]-1659910641068
GPR[EPVATF]-1659910641086
[106125] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910641086
GPR[SSUN]-1659910641086
-132053243
GPR[SPVATF]-1659910641302
GPR[EPVATF]-1659910641320
[106359] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910641320
GPR[EPVATF]-1659910641337
[106376] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910641337
GPR[SSUN]-1659910641337
-132053243
GPR[ESUN]-1659910641536
GPR[SSUN]-1659910641536
-132053243
GPR[SPVATF]-1659910641731
GPR[EPVATF]-1659910641749
[106788] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910641750
GPR[EPVATF]-1659910641768
[106807] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910641768
GPR[SSUN]-1659910641768
-132053243
GPR[ESUN]-1659910641967
GPR[SSUN]-1659910641967
-132053243
GPR[SPVATF]-1659910642160
GPR[EPVATF]-1659910642179
[107218] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910642179
GPR[SSUN]-1659910642179
-132053243
GPR[SPVATF]-1659910642380
GPR[EPVATF]-1659910642397
[107436] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910642397
GPR[SSUN]-1659910642397
-132053243
GPR[SPVATF]-1659910642595
GPR[EPVATF]-1659910642614
[107653] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910642614
GPR[SSUN]-1659910642614
-132053243
GPR[SPVATF]-1659910642811
GPR[EPVATF]-1659910642830
[107869] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910642830
GPR[SSUN]-1659910642830
-132053243
GPR[SPVATF]-1659910643031
GPR[EPVATF]-1659910643049
[108088] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910643049
GPR[SSUN]-1659910643049
-132053243
GPR[ESUN]-1659910643247
GPR[SSUN]-1659910643247
-1966087783
GPR[ESUN]-1659910643445
GPR[SSUN]-1659910643445
-1966087783
GPR[SPVATF]-1659910643646
GPR[EPVATF]-1659910643666
[108705] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910643666
GPR[EPVATF]-1659910643685
[108724] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910643685
GPR[SSUN]-1659910643685
GPR[ESUN]-1659910643685
GPR[SSUN]-1659910643685
GPR[ESUN]-1659910643685
GPR[SSUN]-1659910643685
GPR[ESUN]-1659910643685
GPR[SSUN]-1659910643685
GPR[ESUN]-1659910643685
GPR[SSUN]-1659910643685
GPR[ESUN]-1659910643685
GPR[SSUN]-1659910643685
GPR[ESUN]-1659910643685
GPR[SSUN]-1659910643685
GPR[ESUN]-1659910643685
GPR[SSUN]-1659910643685
-1219825086
GPR[SPVATF]-1659910643916
GPR[EPVATF]-1659910644137
GPR[SPS]-1659910644137
[109679] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:195.
GPR[EPS]-1659910644640
GPR[ESUN]-1659910644640
GPR[SSUN]-1659910644640
-1219825086
GPR[SPVATF]-1659910644876
GPR[EPVATF]-1659910645097
GPR[SPS]-1659910645097
[110618] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:194.
GPR[EPS]-1659910645579
GPR[ESUN]-1659910645579
GPR[SSUN]-1659910645579
-1219825086
GPR[SPVATF]-1659910645813
GPR[EPVATF]-1659910646036
GPR[SPS]-1659910646036
[112255] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:199.
GPR[EPS]-1659910647216
GPR[ESUN]-1659910647216
GPR[SSUN]-1659910647216
-1219825086
GPR[SPVATF]-1659910647455
GPR[EPVATF]-1659910647675
GPR[SPS]-1659910647675
[113219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:191.
GPR[EPS]-1659910648180
GPR[SPVATF]-1659910648180
GPR[EPVATF]-1659910648401
GPR[SPS]-1659910648401
[113923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:191.
GPR[EPS]-1659910648884
GPR[ESUN]-1659910648884
GPR[SSUN]-1659910648884
-1219825086
GPR[SPVATF]-1659910649118
GPR[EPVATF]-1659910649338
GPR[SPS]-1659910649338
GPR[EPS]-1659910651089
GPR[SPVATR]-1659910651089
[116128] INFO TestPatch - Applying patch: com.google.javascript.jscomp.VarCheck:188: PRECONDITION (((0) != (com.google.javascript.jscomp.VarCheck.this.varsToDeclareInExterns.size())) && (com.google.javascript.jscomp.VarCheck.VIOLATED_MODULE_DEP_ERROR!=null)) || (1 == varName.length())
[116457] INFO TestPatch - Running test suite to check the patch "(((0) != (com.google.javascript.jscomp.VarCheck.this.varsToDeclareInExterns.size())) && (com.google.javascript.jscomp.VarCheck.VIOLATED_MODULE_DEP_ERROR!=null)) || (1 == varName.length())" is working
GPR[EPVATR]-1659910652203
[117260] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659910652221
[117262] INFO NoPol - --- a/src/com/google/javascript/jscomp/VarCheck.java
+++ b/src/com/google/javascript/jscomp/VarCheck.java
@@ -187,3 +187,5 @@
         if (!strictExternCheck || !t.getInput().isExtern()) {
-          t.report(n, UNDEFINED_VAR_ERROR, varName);
+          if ((((0) != (com.google.javascript.jscomp.VarCheck.this.varsToDeclareInExterns.size())) && (com.google.javascript.jscomp.VarCheck.VIOLATED_MODULE_DEP_ERROR!=null)) || (1 == varName.length())) {
+            t.report(n, UNDEFINED_VAR_ERROR, varName);
+          }
         }

Saving patch at /experiment_home///results/Nopol/Closure/113/seed_261/patch_112198_2ts_1659910652223.diff
GPR[ESUN]-1659910652223
GPR[SSUN]-1659910652223
-1219825086
GPR[SPVATF]-1659910652458
GPR[EPVATF]-1659910652684
GPR[SPS]-1659910652684
GPR[EPS]-1659910654416
GPR[SPVATR]-1659910654416
[119456] INFO TestPatch - Applying patch: com.google.javascript.jscomp.VarCheck:187: PRECONDITION (!(com.google.javascript.jscomp.VarCheck.this.varsToDeclareInExterns.isEmpty())) || (varName.length() <= 1)
[119784] INFO TestPatch - Running test suite to check the patch "(!(com.google.javascript.jscomp.VarCheck.this.varsToDeclareInExterns.isEmpty())) || (varName.length() <= 1)" is working
GPR[EPVATR]-1659910655564
[120603] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659910655564
[120605] INFO NoPol - --- a/src/com/google/javascript/jscomp/VarCheck.java
+++ b/src/com/google/javascript/jscomp/VarCheck.java
@@ -186,4 +186,6 @@
         // The extern checks are stricter, don't report a second error.
-        if (!strictExternCheck || !t.getInput().isExtern()) {
-          t.report(n, UNDEFINED_VAR_ERROR, varName);
+        if ((!(com.google.javascript.jscomp.VarCheck.this.varsToDeclareInExterns.isEmpty())) || (varName.length() <= 1)) {
+          if (!strictExternCheck || !t.getInput().isExtern()) {
+            t.report(n, UNDEFINED_VAR_ERROR, varName);
+          }
         }

Saving patch at /experiment_home///results/Nopol/Closure/113/seed_261/patch_115541_3ts_1659910655566.diff
GPR[SPVATF]-1659910655567
GPR[EPVATF]-1659910655799
GPR[SPS]-1659910655799
GPR[EPS]-1659910657547
GPR[SPVATR]-1659910657547
[122586] INFO TestPatch - Applying patch: com.google.javascript.jscomp.VarCheck:187: CONDITIONAL (!(com.google.javascript.jscomp.VarCheck.this.varsToDeclareInExterns.isEmpty())) || (varName.length() <= 1)
[122919] INFO TestPatch - Running test suite to check the patch "(!(com.google.javascript.jscomp.VarCheck.this.varsToDeclareInExterns.isEmpty())) || (varName.length() <= 1)" is working
GPR[EPVATR]-1659910658762
[123801] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659910658763
[123803] INFO NoPol - --- a/src/com/google/javascript/jscomp/VarCheck.java
+++ b/src/com/google/javascript/jscomp/VarCheck.java
@@ -186,3 +186,3 @@
         // The extern checks are stricter, don't report a second error.
-        if (!strictExternCheck || !t.getInput().isExtern()) {
+        if ((!(com.google.javascript.jscomp.VarCheck.this.varsToDeclareInExterns.isEmpty())) || (varName.length() <= 1)) {
           t.report(n, UNDEFINED_VAR_ERROR, varName);

Saving patch at /experiment_home///results/Nopol/Closure/113/seed_261/patch_118739_4ts_1659910658764.diff
GPR[ESUN]-1659910658765
GPR[SSUN]-1659910658765
-1219825086
GPR[SPVATF]-1659910659004
GPR[EPVATF]-1659910659236
GPR[SPS]-1659910659236
GPR[EPS]-1659910669864
GPR[SPVATF]-1659910669864
GPR[EPVATF]-1659910670104
GPR[SPS]-1659910670104
GPR[EPS]-1659910681020
GPR[ESUN]-1659910681020
GPR[SSUN]-1659910681020
-1219825086
GPR[SPVATF]-1659910681255
GPR[EPVATF]-1659910681492
GPR[SPS]-1659910681492
GPR[EPS]-1659910692232
GPR[SPVATF]-1659910692233
GPR[EPVATF]-1659910692472
GPR[SPS]-1659910692472
GPR[EPS]-1659910704212
GPR[ESUN]-1659910704212
GPR[SSUN]-1659910704212
-1219825086
GPR[ESUN]-1659910704525
GPR[SSUN]-1659910704525
-1219825086
GPR[ESUN]-1659910704753
GPR[SSUN]-1659910704753
-1219825086
GPR[SPVATF]-1659910704986
GPR[EPVATF]-1659910705226
GPR[SPS]-1659910705226
[170757] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:258.
GPR[EPS]-1659910705718
GPR[ESUN]-1659910705718
GPR[SSUN]-1659910705718
-1219825086
GPR[SPVATF]-1659910705951
GPR[EPVATF]-1659910706194
GPR[SPS]-1659910706194
[171718] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:257.
GPR[EPS]-1659910706679
GPR[ESUN]-1659910706679
GPR[SSUN]-1659910706679
-1219825086
GPR[SPVATF]-1659910706912
GPR[EPVATF]-1659910707152
GPR[SPS]-1659910707152
[172675] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:255.
GPR[EPS]-1659910707636
GPR[ESUN]-1659910707636
GPR[SSUN]-1659910707636
-1219825086
GPR[SPVATF]-1659910707937
GPR[EPVATF]-1659910708182
GPR[SPS]-1659910708182
[173707] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:251.
GPR[EPS]-1659910708668
GPR[SPVATF]-1659910708668
GPR[EPVATF]-1659910709799
GPR[SPS]-1659910709799
[175694] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:251.
GPR[EPS]-1659910710655
GPR[ESUN]-1659910710655
GPR[SSUN]-1659910710655
-1219825086
GPR[ESUN]-1659910710884
GPR[SSUN]-1659910710884
79711797
GPR[ESUN]-1659910711159
GPR[SSUN]-1659910711159
79711797
GPR[SPVATF]-1659910711444
GPR[EPVATF]-1659910711795
GPR[SPS]-1659910711795
[177362] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope:442.
GPR[EPS]-1659910712323
GPR[ESUN]-1659910712323
GPR[SSUN]-1659910712323
79711797
GPR[ESUN]-1659910712572
GPR[SSUN]-1659910712572
-1966087783
GPR[SPVATF]-1659910712768
GPR[EPVATF]-1659910712787
[177826] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910712787
GPR[EPVATF]-1659910712803
[177842] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910712803
GPR[SSUN]-1659910712803
-1966087783
GPR[ESUN]-1659910713001
GPR[SSUN]-1659910713001
707639929
GPR[SPVATF]-1659910713264
GPR[EPVATF]-1659910713498
GPR[SPS]-1659910713498
[179090] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:1173.
GPR[EPS]-1659910714051
GPR[ESUN]-1659910714051
GPR[SSUN]-1659910714051
707639929
GPR[ESUN]-1659910714308
GPR[SSUN]-1659910714308
707639929
GPR[ESUN]-1659910714563
GPR[SSUN]-1659910714563
707639929
GPR[SPVATF]-1659910714813
GPR[EPVATF]-1659910715062
GPR[SPS]-1659910715062
[180643] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:1212.
GPR[EPS]-1659910715604
GPR[SPVATF]-1659910715604
GPR[EPVATF]-1659910715834
GPR[SPS]-1659910715834
[181439] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:1212.
GPR[EPS]-1659910716400
GPR[ESUN]-1659910716400
GPR[SSUN]-1659910716400
707639929
GPR[SPVATF]-1659910716654
GPR[EPVATF]-1659910716892
GPR[SPS]-1659910716892
[182488] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:1172.
GPR[EPS]-1659910717449
GPR[SPVATF]-1659910717449
GPR[EPVATF]-1659910717686
GPR[SPS]-1659910717686
[183277] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:1172.
GPR[EPS]-1659910718238
GPR[ESUN]-1659910718238
GPR[SSUN]-1659910718238
-534884160
GPR[ESUN]-1659910718606
GPR[SSUN]-1659910718606
-534884160
GPR[SPVATF]-1659910718980
GPR[EPVATF]-1659910719217
GPR[SPS]-1659910719217
[185139] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2441.
GPR[EPS]-1659910720100
GPR[ESUN]-1659910720101
GPR[SSUN]-1659910720101
-534884160
GPR[SPVATF]-1659910720469
GPR[EPVATF]-1659910720712
GPR[SPS]-1659910720712
[186606] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2440.
GPR[EPS]-1659910721567
GPR[SPVATF]-1659910721567
GPR[EPVATF]-1659910721816
GPR[SPS]-1659910721816
[187653] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2440.
GPR[EPS]-1659910722614
GPR[ESUN]-1659910722614
GPR[SSUN]-1659910722614
707639929
GPR[ESUN]-1659910722869
GPR[SSUN]-1659910722869
707639929
GPR[SPVATF]-1659910723120
GPR[EPVATF]-1659910723364
GPR[SPS]-1659910723364
[188951] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:806.
GPR[EPS]-1659910723913
GPR[SPVATF]-1659910723913
GPR[EPVATF]-1659910724154
GPR[SPS]-1659910724154
[189757] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:806.
GPR[EPS]-1659910724718
GPR[ESUN]-1659910724718
GPR[SSUN]-1659910724718
707639929
GPR[ESUN]-1659910724968
GPR[SSUN]-1659910724968
707639929
GPR[SPVATF]-1659910725215
GPR[EPVATF]-1659910725453
GPR[SPS]-1659910725453
[191044] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:793.
GPR[EPS]-1659910726005
GPR[SPVATF]-1659910726006
GPR[EPVATF]-1659910726242
GPR[SPS]-1659910726242
[191828] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:793.
GPR[EPS]-1659910726789
GPR[ESUN]-1659910726789
GPR[SSUN]-1659910726789
707639929
GPR[ESUN]-1659910727044
GPR[SSUN]-1659910727044
707639929
GPR[SPVATF]-1659910727313
GPR[EPVATF]-1659910727556
GPR[SPS]-1659910727556
[193139] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:779.
GPR[EPS]-1659910728100
GPR[SPVATF]-1659910728100
GPR[EPVATF]-1659910728343
GPR[SPS]-1659910728343
[193929] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:779.
GPR[EPS]-1659910728890
GPR[ESUN]-1659910728890
GPR[SSUN]-1659910728890
-534884160
GPR[ESUN]-1659910729246
GPR[SSUN]-1659910729246
-534884160
GPR[SPVATF]-1659910729601
GPR[EPVATF]-1659910729837
GPR[SPS]-1659910729837
[195744] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1094.
GPR[EPS]-1659910730705
GPR[ESUN]-1659910730705
GPR[SSUN]-1659910730705
-534884160
GPR[SPVATF]-1659910731069
GPR[EPVATF]-1659910731311
GPR[SPS]-1659910731311
[197141] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1093.
GPR[EPS]-1659910732102
GPR[ESUN]-1659910732102
GPR[SSUN]-1659910732102
-534884160
GPR[SPVATF]-1659910732482
GPR[EPVATF]-1659910732725
GPR[SPS]-1659910732725
[198535] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1092.
GPR[EPS]-1659910733496
GPR[ESUN]-1659910733496
GPR[SSUN]-1659910733496
-534884160
GPR[ESUN]-1659910733854
GPR[SSUN]-1659910733854
-534884160
GPR[SPVATF]-1659910734208
GPR[EPVATF]-1659910734454
GPR[SPS]-1659910734454
[200286] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1088.
GPR[EPS]-1659910735247
GPR[SPVATF]-1659910735247
GPR[EPVATF]-1659910735491
GPR[SPS]-1659910735491
[201309] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1088.
GPR[EPS]-1659910736270
GPR[ESUN]-1659910736270
GPR[SSUN]-1659910736270
-534884160
GPR[ESUN]-1659910736623
GPR[SSUN]-1659910736623
-478581474
GPR[ESUN]-1659910736821
GPR[SSUN]-1659910736822
-478581474
GPR[ESUN]-1659910737018
GPR[SSUN]-1659910737018
-478581474
GPR[ESUN]-1659910737212
GPR[SSUN]-1659910737212
-478581474
GPR[SPVATF]-1659910737428
GPR[EPVATF]-1659910737673
GPR[SPS]-1659910737673
[203142] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntheticAst:51.
GPR[EPS]-1659910738103
GPR[ESUN]-1659910738103
GPR[SSUN]-1659910738103
-478581474
GPR[SPVATF]-1659910738302
GPR[EPVATF]-1659910738564
GPR[SPS]-1659910738564
[204025] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntheticAst:50.
GPR[EPS]-1659910738986
GPR[ESUN]-1659910738986
GPR[SSUN]-1659910738986
-478581474
GPR[SPVATF]-1659910739190
GPR[EPVATF]-1659910739434
GPR[SPS]-1659910739434
[204903] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntheticAst:49.
GPR[EPS]-1659910739864
GPR[ESUN]-1659910739864
GPR[SSUN]-1659910739864
-478581474
GPR[ESUN]-1659910740064
GPR[SSUN]-1659910740064
-600752576
GPR[ESUN]-1659910740261
GPR[SSUN]-1659910740261
707639929
GPR[SPVATF]-1659910740507
GPR[EPVATF]-1659910740757
GPR[SPS]-1659910740757
[206394] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:222.
GPR[EPS]-1659910741355
GPR[SPVATF]-1659910741355
GPR[EPVATF]-1659910741602
GPR[SPS]-1659910741602
[207208] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:222.
GPR[EPS]-1659910742169
GPR[ESUN]-1659910742169
GPR[SSUN]-1659910742169
707639929
GPR[SPVATF]-1659910742420
GPR[EPVATF]-1659910742676
GPR[SPS]-1659910742676
[208271] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:220.
GPR[EPS]-1659910743232
GPR[SPVATF]-1659910743232
GPR[EPVATF]-1659910743476
GPR[SPS]-1659910743476
[209061] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:220.
GPR[EPS]-1659910744022
GPR[ESUN]-1659910744022
GPR[SSUN]-1659910744022
GPR[ESUN]-1659910744022
GPR[SSUN]-1659910744022
707639929
GPR[SPVATF]-1659910744270
GPR[EPVATF]-1659910744518
GPR[SPS]-1659910744518
[210145] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:217.
GPR[EPS]-1659910745107
GPR[SPVATF]-1659910745107
GPR[EPVATF]-1659910746307
GPR[SPS]-1659910746307
[211917] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:217.
GPR[EPS]-1659910746878
GPR[ESUN]-1659910746878
GPR[SSUN]-1659910746878
707639929
GPR[ESUN]-1659910747131
GPR[SSUN]-1659910747132
711965926
GPR[ESUN]-1659910747321
GPR[SSUN]-1659910747321
711965926
GPR[SPVATF]-1659910747505
GPR[EPVATF]-1659910747888
GPR[SPS]-1659910747888
[213347] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:36.
GPR[EPS]-1659910748308
GPR[ESUN]-1659910748309
GPR[SSUN]-1659910748309
-132053243
GPR[ESUN]-1659910748508
GPR[SSUN]-1659910748508
-132053243
GPR[SPVATF]-1659910748708
GPR[EPVATF]-1659910748727
[213766] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910748727
GPR[SSUN]-1659910748727
707639929
GPR[SPVATF]-1659910748983
GPR[EPVATF]-1659910749235
GPR[SPS]-1659910749235
[214833] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:215.
GPR[EPS]-1659910749794
GPR[SPVATF]-1659910749794
GPR[EPVATF]-1659910750031
GPR[SPS]-1659910750031
[215633] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:215.
GPR[EPS]-1659910750594
GPR[ESUN]-1659910750594
GPR[SSUN]-1659910750594
707639929
GPR[ESUN]-1659910750843
GPR[SSUN]-1659910750843
GPR[ESUN]-1659910750843
GPR[SSUN]-1659910750843
GPR[ESUN]-1659910750843
GPR[SSUN]-1659910750843
GPR[ESUN]-1659910750843
GPR[SSUN]-1659910750843
GPR[ESUN]-1659910750843
GPR[SSUN]-1659910750843
707639929
GPR[SPVATF]-1659910751094
GPR[EPVATF]-1659910751344
GPR[SPS]-1659910751344
[216932] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:209.
GPR[EPS]-1659910751893
GPR[SPVATF]-1659910751893
GPR[EPVATF]-1659910752133
GPR[SPS]-1659910752133
[217725] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:209.
GPR[EPS]-1659910752686
GPR[ESUN]-1659910752686
GPR[SSUN]-1659910752686
707639929
GPR[ESUN]-1659910752934
GPR[SSUN]-1659910752934
707639929
GPR[SPVATF]-1659910753181
GPR[EPVATF]-1659910753434
GPR[SPS]-1659910753434
[219056] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:207.
GPR[EPS]-1659910754017
GPR[SPVATF]-1659910754017
GPR[EPVATF]-1659910754254
GPR[SPS]-1659910754254
[219843] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:207.
GPR[EPS]-1659910754804
GPR[ESUN]-1659910754804
GPR[SSUN]-1659910754804
707639929
GPR[ESUN]-1659910755053
GPR[SSUN]-1659910755053
707639929
GPR[ESUN]-1659910755298
GPR[SSUN]-1659910755298
-861565004
GPR[SPVATF]-1659910755488
GPR[EPVATF]-1659910755737
GPR[SPS]-1659910755737
[221208] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.BasicErrorManager:47.
GPR[EPS]-1659910756169
GPR[ESUN]-1659910756169
GPR[SSUN]-1659910756169
1331276989
GPR[ESUN]-1659910756385
GPR[SSUN]-1659910756385
1331276989
GPR[SPVATF]-1659910756599
GPR[EPVATF]-1659910756842
GPR[SPS]-1659910756842
GPR[EPS]-1659910792083
GPR[ESUN]-1659910792083
GPR[SSUN]-1659910792083
1331276989
GPR[ESUN]-1659910792413
GPR[SSUN]-1659910792413
707639929
GPR[SPVATF]-1659910792677
GPR[EPVATF]-1659910792933
GPR[SPS]-1659910792933
[258546] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:282.
GPR[EPS]-1659910793507
GPR[SPVATF]-1659910793507
GPR[EPVATF]-1659910793764
GPR[SPS]-1659910793764
[259372] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:282.
GPR[EPS]-1659910794333
GPR[ESUN]-1659910794333
GPR[SSUN]-1659910794333
-1219825086
GPR[SPVATF]-1659910794567
GPR[EPVATF]-1659910794829
GPR[SPS]-1659910794829
[260364] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck$NameRefInExternsCheck:274.
GPR[EPS]-1659910795325
GPR[ESUN]-1659910795325
GPR[SSUN]-1659910795325
-1219825086
GPR[SPVATF]-1659910795561
GPR[EPVATF]-1659910795818
GPR[SPS]-1659910795818
[261332] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck$NameRefInExternsCheck:269.
GPR[EPS]-1659910796293
GPR[ESUN]-1659910796293
GPR[SSUN]-1659910796293
707639929
GPR[ESUN]-1659910796543
GPR[SSUN]-1659910796543
707639929
GPR[SPVATF]-1659910796794
GPR[EPVATF]-1659910797051
GPR[SPS]-1659910797051
[262636] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:389.
GPR[EPS]-1659910797597
GPR[SPVATF]-1659910797597
GPR[EPVATF]-1659910797857
GPR[SPS]-1659910797857
[263481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:389.
GPR[EPS]-1659910798442
GPR[ESUN]-1659910798442
GPR[SSUN]-1659910798442
707639929
GPR[ESUN]-1659910798691
GPR[SSUN]-1659910798691
707639929
GPR[SPVATF]-1659910798936
GPR[EPVATF]-1659910799194
GPR[SPS]-1659910799194
[264798] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:266.
GPR[EPS]-1659910799759
GPR[ESUN]-1659910799759
GPR[SSUN]-1659910799759
707639929
GPR[SPVATF]-1659910800004
GPR[EPVATF]-1659910800259
GPR[SPS]-1659910800259
[265852] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:265.
GPR[EPS]-1659910800813
GPR[ESUN]-1659910800813
GPR[SSUN]-1659910800813
707639929
GPR[SPVATF]-1659910801081
GPR[EPVATF]-1659910801410
GPR[SPS]-1659910801410
[267068] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:409.
GPR[EPS]-1659910802029
GPR[SPVATF]-1659910802029
GPR[EPVATF]-1659910802274
GPR[SPS]-1659910802274
[267906] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:409.
GPR[EPS]-1659910802868
GPR[ESUN]-1659910802868
GPR[SSUN]-1659910802868
707639929
GPR[SPVATF]-1659910803120
GPR[EPVATF]-1659910803378
GPR[SPS]-1659910803378
[268972] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:414.
GPR[EPS]-1659910803933
GPR[SPVATF]-1659910803933
GPR[EPVATF]-1659910804187
GPR[SPS]-1659910804187
[269766] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:414.
GPR[EPS]-1659910804727
GPR[ESUN]-1659910804727
GPR[SSUN]-1659910804727
707639929
GPR[SPVATF]-1659910804975
GPR[EPVATF]-1659910805229
GPR[SPS]-1659910805229
[270821] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:407.
GPR[EPS]-1659910805782
GPR[SPVATF]-1659910805783
GPR[EPVATF]-1659910806037
GPR[SPS]-1659910806037
[271633] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:407.
GPR[EPS]-1659910806594
GPR[ESUN]-1659910806594
GPR[SSUN]-1659910806594
707639929
GPR[ESUN]-1659910806894
GPR[SSUN]-1659910806894
707639929
GPR[ESUN]-1659910807144
GPR[SSUN]-1659910807144
707639929
GPR[SPVATF]-1659910807394
GPR[EPVATF]-1659910807660
GPR[SPS]-1659910807660
[273243] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:405.
GPR[EPS]-1659910808204
GPR[SPVATF]-1659910808204
GPR[EPVATF]-1659910808464
GPR[SPS]-1659910808464
[274050] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:405.
GPR[EPS]-1659910809011
GPR[ESUN]-1659910809011
GPR[SSUN]-1659910809011
707639929
GPR[SPVATF]-1659910809262
GPR[EPVATF]-1659910809522
GPR[SPS]-1659910809522
[275114] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:262.
GPR[EPS]-1659910810075
GPR[ESUN]-1659910810075
GPR[SSUN]-1659910810075
707639929
GPR[SPVATF]-1659910810324
GPR[EPVATF]-1659910810585
GPR[SPS]-1659910810585
[276214] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:261.
GPR[EPS]-1659910811175
GPR[ESUN]-1659910811175
GPR[SSUN]-1659910811175
707639929
GPR[SPVATF]-1659910811435
GPR[EPVATF]-1659910811701
GPR[SPS]-1659910811701
[277299] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:162.
GPR[EPS]-1659910812260
GPR[ESUN]-1659910812260
GPR[SSUN]-1659910812260
707639929
GPR[SPVATF]-1659910812519
GPR[EPVATF]-1659910812793
GPR[SPS]-1659910812793
[278392] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives$ProvidedName:968.
GPR[EPS]-1659910813353
GPR[ESUN]-1659910813353
GPR[SSUN]-1659910813353
707639929
GPR[SPVATF]-1659910813611
GPR[EPVATF]-1659910813876
GPR[SPS]-1659910813876
[279480] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives$ProvidedName:967.
GPR[EPS]-1659910814441
GPR[ESUN]-1659910814441
GPR[SSUN]-1659910814441
707639929
GPR[SPVATF]-1659910814699
GPR[EPVATF]-1659910814970
GPR[SPS]-1659910814970
[280634] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives$ProvidedName:965.
GPR[EPS]-1659910815595
GPR[SPVATF]-1659910815595
GPR[EPVATF]-1659910815868
GPR[SPS]-1659910815868
[281477] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives$ProvidedName:965.
GPR[EPS]-1659910816438
GPR[ESUN]-1659910816438
GPR[SSUN]-1659910816438
707639929
GPR[ESUN]-1659910816699
GPR[SSUN]-1659910816699
707639929
GPR[SPVATF]-1659910816951
GPR[EPVATF]-1659910817226
GPR[SPS]-1659910817226
[282830] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives$ProvidedName:945.
GPR[EPS]-1659910817791
GPR[ESUN]-1659910817791
GPR[SSUN]-1659910817791
707639929
GPR[SPVATF]-1659910818066
GPR[EPVATF]-1659910818332
GPR[SPS]-1659910818332
[283943] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives$ProvidedName:944.
GPR[EPS]-1659910818904
GPR[SPVATF]-1659910818905
GPR[EPVATF]-1659910819168
GPR[SPS]-1659910819168
[284798] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives$ProvidedName:944.
GPR[EPS]-1659910819759
GPR[ESUN]-1659910819760
GPR[SSUN]-1659910819760
707639929
GPR[ESUN]-1659910820013
GPR[SSUN]-1659910820013
707639929
GPR[SPVATF]-1659910820262
GPR[EPVATF]-1659910820536
GPR[SPS]-1659910820536
[286143] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives$ProvidedName:919.
GPR[EPS]-1659910821104
GPR[ESUN]-1659910821104
GPR[SSUN]-1659910821104
707639929
GPR[SPVATF]-1659910821352
GPR[EPVATF]-1659910821647
GPR[SPS]-1659910821647
[287247] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives$ProvidedName:913.
GPR[EPS]-1659910822208
GPR[SPVATF]-1659910822209
GPR[EPVATF]-1659910822484
GPR[SPS]-1659910822484
[288082] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives$ProvidedName:913.
GPR[EPS]-1659910823043
GPR[ESUN]-1659910823044
GPR[SSUN]-1659910823044
707639929
GPR[ESUN]-1659910823296
GPR[SSUN]-1659910823296
707639929
GPR[SPVATF]-1659910823549
GPR[EPVATF]-1659910823832
GPR[SPS]-1659910823832
[289492] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:203.
GPR[EPS]-1659910824453
GPR[ESUN]-1659910824453
GPR[SSUN]-1659910824453
707639929
GPR[ESUN]-1659910824712
GPR[SSUN]-1659910824712
707639929
GPR[SPVATF]-1659910824972
GPR[EPVATF]-1659910825248
GPR[SPS]-1659910825248
[290861] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:161.
GPR[EPS]-1659910825822
GPR[SPVATF]-1659910825823
GPR[EPVATF]-1659910826101
GPR[SPS]-1659910826101
[291709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:161.
GPR[EPS]-1659910826670
GPR[ESUN]-1659910826670
GPR[SSUN]-1659910826670
707639929
GPR[ESUN]-1659910826929
GPR[SSUN]-1659910826929
707639929
GPR[SPVATF]-1659910827182
GPR[EPVATF]-1659910827464
GPR[SPS]-1659910827464
[293072] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:158.
GPR[EPS]-1659910828033
GPR[ESUN]-1659910828034
GPR[SSUN]-1659910828034
707639929
GPR[SPVATF]-1659910828293
GPR[EPVATF]-1659910828603
GPR[SPS]-1659910828603
[294303] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:157.
GPR[EPS]-1659910829264
GPR[ESUN]-1659910829265
GPR[SSUN]-1659910829265
707639929
GPR[SPVATF]-1659910829516
GPR[EPVATF]-1659910829796
GPR[SPS]-1659910829796
[295401] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:153.
GPR[EPS]-1659910830362
GPR[ESUN]-1659910830362
GPR[SSUN]-1659910830362
707639929
GPR[SPVATF]-1659910830613
GPR[EPVATF]-1659910830902
GPR[SPS]-1659910830902
[296507] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ProcessClosurePrimitives:151.
GPR[EPS]-1659910831468
GPR[ESUN]-1659910831468
GPR[SSUN]-1659910831468
-1219825086
GPR[SPVATF]-1659910831706
GPR[EPVATF]-1659910831982
GPR[SPS]-1659910831982
[297508] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:206.
GPR[EPS]-1659910832469
GPR[ESUN]-1659910832469
GPR[SSUN]-1659910832469
-1219825086
GPR[SPVATF]-1659910832707
GPR[EPVATF]-1659910832990
GPR[SPS]-1659910832990
[298582] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:204.
GPR[EPS]-1659910833543
GPR[SPVATF]-1659910833544
GPR[EPVATF]-1659910833823
GPR[SPS]-1659910833823
[299360] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:204.
GPR[EPS]-1659910834321
GPR[ESUN]-1659910834321
GPR[SSUN]-1659910834321
-1219825086
GPR[ESUN]-1659910834558
GPR[SSUN]-1659910834558
-1219825086
GPR[ESUN]-1659910834794
GPR[SSUN]-1659910834794
-1219825086
GPR[SPVATF]-1659910835024
GPR[EPVATF]-1659910835302
GPR[SPS]-1659910835302
[300834] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:131.
GPR[EPS]-1659910835795
GPR[ESUN]-1659910835795
GPR[SSUN]-1659910835795
-1219825086
GPR[ESUN]-1659910836035
GPR[SSUN]-1659910836035
-1219825086
GPR[SPVATF]-1659910836268
GPR[EPVATF]-1659910837630
GPR[SPS]-1659910837630
[303019] ERROR ConstraintModelBuilder - Unable to compile the change: 
class VarCheck extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback implements com.google.javascript.jscomp.HotSwapCompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNDEFINED_VAR_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_UNDEFINED_VARIABLE", "variable {0} is undeclared");

    static final com.google.javascript.jscomp.DiagnosticType VIOLATED_MODULE_DEP_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_VIOLATED_MODULE_DEPENDENCY", "module {0} cannot reference {2}, defined in " + "module {1}, since {1} loads after {0}");

    static final com.google.javascript.jscomp.DiagnosticType MISSING_MODULE_DEP_ERROR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MISSING_MODULE_DEPENDENCY", "missing module dependency; module {0} should depend " + "on module {1} because it references {2}");

    static final com.google.javascript.jscomp.DiagnosticType STRICT_MODULE_DEP_ERROR = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_STRICT_MODULE_DEPENDENCY", "module {0} cannot reference {2}, defined in " + "module {1}");

    static final com.google.javascript.jscomp.DiagnosticType NAME_REFERENCE_IN_EXTERNS_ERROR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NAME_REFERENCE_IN_EXTERNS", "accessing name {0} in externs has no effect. " + "Perhaps you forgot to add a var keyword?");

    static final com.google.javascript.jscomp.DiagnosticType UNDEFINED_EXTERN_VAR_ERROR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNDEFINED_EXTERN_VAR_ERROR", "name {0} is not defined in the externs.");

    static final com.google.javascript.jscomp.DiagnosticType VAR_MULTIPLY_DECLARED_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_VAR_MULTIPLY_DECLARED_ERROR", "Variable {0} first declared in {1}");

    static final com.google.javascript.jscomp.DiagnosticType VAR_ARGUMENTS_SHADOWED_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_VAR_ARGUMENTS_SHADOWED_ERROR", "Shadowing \"arguments\" is not allowed");

    private static final java.lang.String ARGUMENTS = "arguments";

    private final java.util.Set<java.lang.String> varsToDeclareInExterns = com.google.common.collect.Sets.newHashSet();

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final boolean sanityCheck;

    private final boolean strictExternCheck;

    VarCheck(com.google.javascript.jscomp.AbstractCompiler compiler) {
        this(compiler, false);
    }

    VarCheck(com.google.javascript.jscomp.AbstractCompiler compiler, boolean sanityCheck) {
        this.compiler = compiler;
        this.strictExternCheck = compiler.getErrorLevel(com.google.javascript.jscomp.JSError.make("", 0, 0, com.google.javascript.jscomp.VarCheck.UNDEFINED_EXTERN_VAR_ERROR)) == com.google.javascript.jscomp.CheckLevel.ERROR;
        this.sanityCheck = sanityCheck;
    }

    private com.google.javascript.jscomp.ScopeCreator createScopeCreator() {
        if (sanityCheck) {
            return new com.google.javascript.jscomp.SyntacticScopeCreator(compiler);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(109).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.VarCheck.UNDEFINED_VAR_ERROR",com.google.javascript.jscomp.VarCheck.UNDEFINED_VAR_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR",com.google.javascript.jscomp.VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.VarCheck.this.strictExternCheck",com.google.javascript.jscomp.VarCheck.this.strictExternCheck);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.VarCheck.this.varsToDeclareInExterns",com.google.javascript.jscomp.VarCheck.this.varsToDeclareInExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.VarCheck.STRICT_MODULE_DEP_ERROR",com.google.javascript.jscomp.VarCheck.STRICT_MODULE_DEP_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.VarCheck.this.sanityCheck",com.google.javascript.jscomp.VarCheck.this.sanityCheck);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.VarCheck.VIOLATED_MODULE_DEP_ERROR",com.google.javascript.jscomp.VarCheck.VIOLATED_MODULE_DEP_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.VarCheck.this.compiler",com.google.javascript.jscomp.VarCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.VarCheck.VAR_MULTIPLY_DECLARED_ERROR",com.google.javascript.jscomp.VarCheck.VAR_MULTIPLY_DECLARED_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.VarCheck.MISSING_MODULE_DEP_ERROR",com.google.javascript.jscomp.VarCheck.MISSING_MODULE_DEP_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.VarCheck.UNDEFINED_EXTERN_VAR_ERROR",com.google.javascript.jscomp.VarCheck.UNDEFINED_EXTERN_VAR_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.VarCheck.ARGUMENTS",com.google.javascript.jscomp.VarCheck.ARGUMENTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectInput("com.google.javascript.jscomp.VarCheck.VAR_ARGUMENTS_SHADOWED_ERROR",com.google.javascript.jscomp.VarCheck.VAR_ARGUMENTS_SHADOWED_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(109).collectionEnds();
            }
            if (runtimeAngelicValue)
                return new com.google.javascript.jscomp.SyntacticScopeCreator(compiler, new com.google.javascript.jscomp.VarCheck.RedeclarationCheckHandler());

        }
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.ScopeCreator scopeCreator = createScopeCreator();
        if (!sanityCheck) {
            com.google.javascript.jscomp.NodeTraversal traversal = new com.google.javascript.jscomp.NodeTraversal(compiler, new com.google.javascript.jscomp.VarCheck.NameRefInExternsCheck(), scopeCreator);
            traversal.traverse(externs);
        }
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        t.traverseRoots(com.google.common.collect.Lists.newArrayList(externs, root));
        for (java.lang.String varName : varsToDeclareInExterns) {
            createSynthesizedExternVar(varName);
        }
    }

    @java.lang.Override
    public void hotSwapScript(com.google.javascript.rhino.Node scriptRoot, com.google.javascript.rhino.Node originalRoot) {
        com.google.common.base.Preconditions.checkState(scriptRoot.isScript());
        com.google.javascript.jscomp.ScopeCreator scopeCreator = createScopeCreator();
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        com.google.javascript.jscomp.Scope topScope = scopeCreator.createScope(compiler.getRoot(), null);
        t.traverseWithScope(scriptRoot, topScope);
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if (!n.isName()) {
            return;
        }
        java.lang.String varName = n.getString();
        if (varName.isEmpty()) {
            com.google.common.base.Preconditions.checkState(parent.isFunction());
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isFunctionExpression(parent));
            return;
        }
        if ((parent.isVar() || com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(parent)) && varsToDeclareInExterns.contains(varName)) {
            createSynthesizedExternVar(varName);
            n.addSuppression("duplicate");
        }
        com.google.javascript.jscomp.Scope scope = t.getScope();
        com.google.javascript.jscomp.Scope.Var var = scope.getVar(varName);
        if (var == null) {
            if (com.google.javascript.jscomp.NodeUtil.isFunctionExpression(parent)) {
            } else if (!(scope.isLocal() && com.google.javascript.jscomp.VarCheck.ARGUMENTS.equals(varName))) {
                if ((!strictExternCheck) || (!t.getInput().isExtern())) {
                    t.report(n, com.google.javascript.jscomp.VarCheck.UNDEFINED_VAR_ERROR, varName);
                }
                if (sanityCheck) {
                    throw new java.lang.IllegalStateException("Unexpected variable " + varName);
                } else {
                    createSynthesizedExternVar(varName);
                    scope.getGlobalScope().declare(varName, n, null, compiler.getSynthesizedExternsInput());
                }
            }
            return;
        }
        com.google.javascript.jscomp.CompilerInput currInput = t.getInput();
        com.google.javascript.jscomp.CompilerInput varInput = var.input;
        if (((currInput == varInput) || (currInput == null)) || (varInput == null)) {
            return;
        }
        com.google.javascript.jscomp.JSModule currModule = currInput.getModule();
        com.google.javascript.jscomp.JSModule varModule = varInput.getModule();
        com.google.javascript.jscomp.JSModuleGraph moduleGraph = compiler.getModuleGraph();
        if ((((!sanityCheck) && (varModule != currModule)) && (varModule != null)) && (currModule != null)) {
            if (moduleGraph.dependsOn(currModule, varModule)) {
            } else if (scope.isGlobal()) {
                if (moduleGraph.dependsOn(varModule, currModule)) {
                    t.report(n, com.google.javascript.jscomp.VarCheck.VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);
                } else {
                    t.report(n, com.google.javascript.jscomp.VarCheck.MISSING_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);
                }
            } else {
                t.report(n, com.google.javascript.jscomp.VarCheck.STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName);
            }
        }
    }

    private void createSynthesizedExternVar(java.lang.String varName) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(varName);
        if (compiler.getCodingConvention().isConstant(varName)) {
            nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
        getSynthesizedExternsRoot().addChildToBack(com.google.javascript.rhino.IR.var(nameNode));
        varsToDeclareInExterns.remove(varName);
        compiler.reportCodeChange();
    }

    private class NameRefInExternsCheck extends com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback {
        @java.lang.Override
        public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            if (n.isName()) {
                switch (parent.getType()) {
                    case com.google.javascript.rhino.Token.VAR :
                    case com.google.javascript.rhino.Token.FUNCTION :
                    case com.google.javascript.rhino.Token.PARAM_LIST :
                        break;
                    case com.google.javascript.rhino.Token.GETPROP :
                        if (n == parent.getFirstChild()) {
                            com.google.javascript.jscomp.Scope scope = t.getScope();
                            com.google.javascript.jscomp.Scope.Var var = scope.getVar(n.getString());
                            if (var == null) {
                                t.report(n, com.google.javascript.jscomp.VarCheck.UNDEFINED_EXTERN_VAR_ERROR, n.getString());
                                varsToDeclareInExterns.add(n.getString());
                            }
                        }
                        break;
                    default :
                        t.report(n, com.google.javascript.jscomp.VarCheck.NAME_REFERENCE_IN_EXTERNS_ERROR, n.getString());
                        com.google.javascript.jscomp.Scope scope = t.getScope();
                        com.google.javascript.jscomp.Scope.Var var = scope.getVar(n.getString());
                        if (var == null) {
                            varsToDeclareInExterns.add(n.getString());
                        }
                        break;
                }
            }
        }
    }

    static boolean hasDuplicateDeclarationSuppression(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.Scope.Var origVar) {
        com.google.common.base.Preconditions.checkState(n.isName());
        com.google.javascript.rhino.Node parent = n.getParent();
        com.google.javascript.rhino.Node origParent = origVar.getParentNode();
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info == null) {
            info = parent.getJSDocInfo();
        }
        if ((info != null) && info.getSuppressions().contains("duplicate")) {
            return true;
        }
        info = origVar.nameNode.getJSDocInfo();
        if (info == null) {
            info = origParent.getJSDocInfo();
        }
        return (info != null) && info.getSuppressions().contains("duplicate");
    }

    private class RedeclarationCheckHandler implements com.google.javascript.jscomp.SyntacticScopeCreator.RedeclarationHandler {
        @java.lang.Override
        public void onRedeclaration(com.google.javascript.jscomp.Scope s, java.lang.String name, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CompilerInput input) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (s.isGlobal()) {
                com.google.javascript.jscomp.Scope.Var origVar = s.getVar(name);
                com.google.javascript.rhino.Node origParent = origVar.getParentNode();
                if (origParent.isCatch() && parent.isCatch()) {
                    return;
                }
                boolean allowDupe = com.google.javascript.jscomp.VarCheck.hasDuplicateDeclarationSuppression(n, origVar);
                if (!allowDupe) {
                    compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.NodeUtil.getSourceName(n), n, com.google.javascript.jscomp.VarCheck.VAR_MULTIPLY_DECLARED_ERROR, name, origVar.input != null ? origVar.input.getName() : "??"));
                }
            } else if (name.equals(com.google.javascript.jscomp.VarCheck.ARGUMENTS) && (!com.google.javascript.jscomp.NodeUtil.isVarDeclaration(n))) {
                compiler.report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.NodeUtil.getSourceName(n), n, com.google.javascript.jscomp.VarCheck.VAR_ARGUMENTS_SHADOWED_ERROR));
            }
        }
    }

    private com.google.javascript.rhino.Node getSynthesizedExternsRoot() {
        return compiler.getSynthesizedExternsInput().getAstRoot(compiler);
    }
}
[303020] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659910837981
GPR[SSUN]-1659910837981
-1219825086
GPR[ESUN]-1659910838214
GPR[SSUN]-1659910838214
-1219825086
GPR[SPVATF]-1659910838451
GPR[EPVATF]-1659910838723
GPR[SPS]-1659910838723
[304253] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck$NameRefInExternsCheck:268.
GPR[EPS]-1659910839214
GPR[SPVATF]-1659910839215
GPR[EPVATF]-1659910839604
GPR[SPS]-1659910839604
[305267] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck$NameRefInExternsCheck:268.
GPR[EPS]-1659910840228
GPR[ESUN]-1659910840228
GPR[SSUN]-1659910840228
-1219825086
GPR[SPVATF]-1659910840495
GPR[EPVATF]-1659910840907
GPR[SPS]-1659910840907
[306447] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:181.
GPR[EPS]-1659910841408
GPR[SPVATF]-1659910841408
GPR[EPVATF]-1659910841666
GPR[SPS]-1659910841666
[307201] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:181.
GPR[EPS]-1659910842162
GPR[ESUN]-1659910842162
GPR[SSUN]-1659910842162
-1219825086
GPR[ESUN]-1659910842402
GPR[SSUN]-1659910842402
-1219825086
GPR[ESUN]-1659910842633
GPR[SSUN]-1659910842633
-1219825086
GPR[SPVATF]-1659910842865
GPR[EPVATF]-1659910843124
GPR[SPS]-1659910843124
[308677] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:170.
GPR[EPS]-1659910843639
GPR[SPVATF]-1659910843639
GPR[EPVATF]-1659910843887
GPR[SPS]-1659910843887
[309418] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:170.
GPR[EPS]-1659910844379
GPR[ESUN]-1659910844379
GPR[SSUN]-1659910844379
-1219825086
GPR[SPVATF]-1659910844615
GPR[EPVATF]-1659910844860
GPR[SPS]-1659910844860
[310391] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:162.
GPR[EPS]-1659910845352
GPR[SPVATF]-1659910845352
GPR[EPVATF]-1659910845593
GPR[SPS]-1659910845593
[311121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:162.
GPR[EPS]-1659910846082
GPR[ESUN]-1659910846082
GPR[SSUN]-1659910846082
-1219825086
GPR[ESUN]-1659910846316
GPR[SSUN]-1659910846316
-1219825086
GPR[ESUN]-1659910846550
GPR[SSUN]-1659910846550
-1219825086
GPR[SPVATF]-1659910846781
GPR[EPVATF]-1659910847031
GPR[SPS]-1659910847031
[312561] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:136.
GPR[EPS]-1659910847522
GPR[ESUN]-1659910847522
GPR[SSUN]-1659910847522
-1219825086
GPR[SPVATF]-1659910847756
GPR[EPVATF]-1659910848005
GPR[SPS]-1659910848005
[313530] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:156.
GPR[EPS]-1659910848491
GPR[ESUN]-1659910848491
GPR[SSUN]-1659910848492
-1219825086
GPR[SPVATF]-1659910848726
GPR[EPVATF]-1659910848974
GPR[SPS]-1659910848974
[314531] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:155.
GPR[EPS]-1659910849492
GPR[SPVATF]-1659910849492
GPR[EPVATF]-1659910849737
GPR[SPS]-1659910849737
GPR[EPS]-1659910862998
GPR[ESUN]-1659910862998
GPR[SSUN]-1659910862998
-1219825086
GPR[SPVATF]-1659910863291
GPR[EPVATF]-1659910863583
GPR[SPS]-1659910863583
GPR[EPS]-1659910876126
GPR[ESUN]-1659910876126
GPR[SSUN]-1659910876126
-1219825086
GPR[ESUN]-1659910876370
GPR[SSUN]-1659910876370
-1219825086
GPR[SPVATF]-1659910876605
GPR[EPVATF]-1659910876856
GPR[SPS]-1659910876856
[342394] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:128.
GPR[EPS]-1659910877356
GPR[SPVATF]-1659910877356
GPR[EPVATF]-1659910877604
GPR[SPS]-1659910877604
[343135] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:128.
GPR[EPS]-1659910878096
GPR[ESUN]-1659910878096
GPR[SSUN]-1659910878096
-1219825086
GPR[ESUN]-1659910878330
GPR[SSUN]-1659910878330
-1219825086
GPR[SPVATF]-1659910878566
GPR[EPVATF]-1659910878822
GPR[SPS]-1659910878822
[344357] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.VarCheck:114.
GPR[EPS]-1659910879318
GPR[ESUN]-1659910879318
GPR[SSUN]-1659910879318
-534884160
GPR[ESUN]-1659910879692
GPR[SSUN]-1659910879692
-534884160
GPR[SPVATF]-1659910880057
GPR[EPVATF]-1659910880312
GPR[SPS]-1659910880312
[346190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2153.
GPR[EPS]-1659910881151
GPR[ESUN]-1659910881151
GPR[SSUN]-1659910881151
2433571
GPR[SPVATF]-1659910881408
GPR[EPVATF]-1659910881681
[346720] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910881681
GPR[EPVATF]-1659910881894
[346933] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910881894
GPR[SSUN]-1659910881894
2433571
GPR[ESUN]-1659910882141
GPR[SSUN]-1659910882141
2433571
GPR[ESUN]-1659910882382
GPR[SSUN]-1659910882382
-1117079791
GPR[ESUN]-1659910882584
GPR[SSUN]-1659910882584
-1117079791
GPR[SPVATF]-1659910882789
GPR[EPVATF]-1659910883006
[348045] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910883006
GPR[SSUN]-1659910883006
-1117079791
GPR[SPVATF]-1659910883212
GPR[EPVATF]-1659910883422
[348461] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910883422
GPR[SSUN]-1659910883422
-1117079791
GPR[SPVATF]-1659910883629
GPR[EPVATF]-1659910883837
[348876] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910883837
GPR[SSUN]-1659910883837
-1117079791
GPR[SPVATF]-1659910884043
GPR[EPVATF]-1659910884257
[349296] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910884257
GPR[SSUN]-1659910884257
-1117079791
GPR[ESUN]-1659910884463
GPR[SSUN]-1659910884463
-1117079791
GPR[SPVATF]-1659910884668
GPR[EPVATF]-1659910884882
[349921] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910884882
GPR[SSUN]-1659910884882
-1117079791
GPR[SPVATF]-1659910885092
GPR[EPVATF]-1659910885309
[350348] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910885309
GPR[SSUN]-1659910885309
-600752576
GPR[ESUN]-1659910885513
GPR[SSUN]-1659910885513
-1117079791
GPR[ESUN]-1659910885728
GPR[SSUN]-1659910885728
-1117079791
GPR[SPVATF]-1659910885933
GPR[EPVATF]-1659910886148
[351187] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910886148
GPR[EPVATF]-1659910886368
[351407] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910886368
GPR[SSUN]-1659910886368
-1117079791
GPR[SPVATF]-1659910886576
GPR[EPVATF]-1659910886789
[351828] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910886789
GPR[SSUN]-1659910886789
-1117079791
GPR[SPVATF]-1659910887000
GPR[EPVATF]-1659910887215
[352254] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910887216
GPR[SSUN]-1659910887216
-1345859678
GPR[ESUN]-1659910887485
GPR[SSUN]-1659910887485
-1345859678
GPR[SPVATF]-1659910887752
GPR[EPVATF]-1659910888040
GPR[SPS]-1659910888040
[353673] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:757.
GPR[EPS]-1659910888634
GPR[ESUN]-1659910888634
GPR[SSUN]-1659910888634
2433571
GPR[ESUN]-1659910888878
GPR[SSUN]-1659910888878
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
GPR[ESUN]-1659910888879
GPR[SSUN]-1659910888879
-1117079791
GPR[ESUN]-1659910889084
GPR[SSUN]-1659910889084
-1117079791
GPR[SPVATF]-1659910889286
GPR[EPVATF]-1659910889577
GPR[SPS]-1659910889577
[355129] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:378.
GPR[EPS]-1659910890090
GPR[ESUN]-1659910890090
GPR[SSUN]-1659910890091
-1117079791
GPR[SPVATF]-1659910890298
GPR[EPVATF]-1659910890590
GPR[SPS]-1659910890590
[356081] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:377.
GPR[EPS]-1659910891042
GPR[ESUN]-1659910891042
GPR[SSUN]-1659910891042
-1117079791
GPR[SPVATF]-1659910891251
GPR[EPVATF]-1659910891551
GPR[SPS]-1659910891551
[357037] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:376.
GPR[EPS]-1659910891999
GPR[ESUN]-1659910891999
GPR[SSUN]-1659910891999
-1117079791
GPR[SPVATF]-1659910892207
GPR[EPVATF]-1659910892504
GPR[SPS]-1659910892504
[357986] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:375.
GPR[EPS]-1659910892947
GPR[ESUN]-1659910892947
GPR[SSUN]-1659910892947
-1117079791
GPR[ESUN]-1659910893159
GPR[SSUN]-1659910893159
-1117079791
GPR[SPVATF]-1659910893361
GPR[EPVATF]-1659910893657
GPR[SPS]-1659910893657
[359143] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:261.
GPR[EPS]-1659910894104
GPR[ESUN]-1659910894104
GPR[SSUN]-1659910894104
2433571
GPR[SPVATF]-1659910894351
GPR[EPVATF]-1659910894649
GPR[SPS]-1659910894650
[360367] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1547.
GPR[EPS]-1659910895328
GPR[SPVATF]-1659910895328
GPR[EPVATF]-1659910895633
GPR[SPS]-1659910895633
[361301] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1547.
GPR[EPS]-1659910896262
GPR[ESUN]-1659910896262
GPR[SSUN]-1659910896262
2433571
GPR[SPVATF]-1659910896509
GPR[EPVATF]-1659910896815
GPR[SPS]-1659910896815
[362524] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1546.
GPR[EPS]-1659910897485
GPR[SPVATF]-1659910897485
GPR[EPVATF]-1659910897790
GPR[SPS]-1659910897790
[363449] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1546.
GPR[EPS]-1659910898410
GPR[ESUN]-1659910898410
GPR[SSUN]-1659910898410
2433571
GPR[SPVATF]-1659910898658
GPR[EPVATF]-1659910898963
GPR[SPS]-1659910898963
[364619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1543.
GPR[EPS]-1659910899580
GPR[SPVATF]-1659910899580
GPR[EPVATF]-1659910899898
GPR[SPS]-1659910899898
[365552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1543.
GPR[EPS]-1659910900513
GPR[ESUN]-1659910900513
GPR[SSUN]-1659910900514
2433571
GPR[ESUN]-1659910900761
GPR[SSUN]-1659910900761
2433571
GPR[ESUN]-1659910901005
GPR[SSUN]-1659910901006
2433571
GPR[SPVATF]-1659910901246
GPR[EPVATF]-1659910901563
GPR[SPS]-1659910901563
[367227] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1533.
GPR[EPS]-1659910902188
GPR[SPVATF]-1659910902188
GPR[EPVATF]-1659910902494
GPR[SPS]-1659910902494
[368194] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1533.
GPR[EPS]-1659910903155
GPR[ESUN]-1659910903155
GPR[SSUN]-1659910903155
1331276989
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
GPR[ESUN]-1659910903374
GPR[SSUN]-1659910903374
-1345859678
GPR[SPVATF]-1659910903635
GPR[EPVATF]-1659910903861
[368900] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910903862
GPR[EPVATF]-1659910904093
[369133] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910904094
GPR[SSUN]-1659910904094
GPR[ESUN]-1659910904094
GPR[SSUN]-1659910904094
704176156
GPR[ESUN]-1659910904303
GPR[SSUN]-1659910904303
704176156
GPR[SPVATF]-1659910904510
GPR[EPVATF]-1659910904743
[369782] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910904743
GPR[EPVATF]-1659910904972
[370011] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910904972
GPR[SSUN]-1659910904972
704176156
GPR[SPVATF]-1659910905178
GPR[EPVATF]-1659910905410
[370449] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910905410
GPR[SSUN]-1659910905410
704176156
GPR[SPVATF]-1659910905620
GPR[EPVATF]-1659910905852
[370891] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910905852
GPR[SSUN]-1659910905852
704176156
GPR[ESUN]-1659910906057
GPR[SSUN]-1659910906057
GPR[ESUN]-1659910906057
GPR[SSUN]-1659910906057
-1117079791
GPR[ESUN]-1659910906255
GPR[SSUN]-1659910906255
-1117079791
GPR[SPVATF]-1659910906454
GPR[EPVATF]-1659910906767
GPR[SPS]-1659910906767
[372257] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:369.
GPR[EPS]-1659910907218
GPR[ESUN]-1659910907218
GPR[SSUN]-1659910907218
-1117079791
GPR[SPVATF]-1659910907422
GPR[EPVATF]-1659910907727
GPR[SPS]-1659910907727
[373211] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:368.
GPR[EPS]-1659910908172
GPR[ESUN]-1659910908172
GPR[SSUN]-1659910908172
-1117079791
GPR[SPVATF]-1659910908377
GPR[EPVATF]-1659910908614
[373653] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910908614
GPR[SSUN]-1659910908614
-1345859678
GPR[ESUN]-1659910908885
GPR[SSUN]-1659910908885
-1345859678
GPR[SPVATF]-1659910909152
GPR[EPVATF]-1659910909388
[374427] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910909388
GPR[SSUN]-1659910909388
-1345859678
GPR[SPVATF]-1659910909650
GPR[EPVATF]-1659910909882
[374921] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910909882
GPR[SSUN]-1659910909882
-1345859678
GPR[SPVATF]-1659910910195
GPR[EPVATF]-1659910910429
[375468] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910910429
GPR[EPVATF]-1659910910662
[375701] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910910662
GPR[SSUN]-1659910910662
-1345859678
GPR[ESUN]-1659910910931
GPR[SSUN]-1659910910931
-1345859678
GPR[SPVATF]-1659910911200
GPR[EPVATF]-1659910911436
[376475] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910911436
GPR[EPVATF]-1659910911673
[376712] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910911673
GPR[SSUN]-1659910911673
-1345859678
GPR[SPVATF]-1659910911940
GPR[EPVATF]-1659910912179
[377218] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910912179
GPR[SSUN]-1659910912179
-1345859678
GPR[ESUN]-1659910912449
GPR[SSUN]-1659910912449
-1345859678
GPR[ESUN]-1659910912712
GPR[SSUN]-1659910912712
GPR[ESUN]-1659910912712
GPR[SSUN]-1659910912712
GPR[ESUN]-1659910912712
GPR[SSUN]-1659910912712
GPR[ESUN]-1659910912712
GPR[SSUN]-1659910912712
GPR[ESUN]-1659910912712
GPR[SSUN]-1659910912712
GPR[ESUN]-1659910912712
GPR[SSUN]-1659910912712
GPR[ESUN]-1659910912712
GPR[SSUN]-1659910912712
GPR[ESUN]-1659910912712
GPR[SSUN]-1659910912713
GPR[ESUN]-1659910912713
GPR[SSUN]-1659910912713
GPR[ESUN]-1659910912713
GPR[SSUN]-1659910912713
-1345859678
GPR[SPVATF]-1659910912983
GPR[EPVATF]-1659910913227
[378266] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910913228
GPR[EPVATF]-1659910913469
[378508] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910913469
GPR[SSUN]-1659910913469
GPR[ESUN]-1659910913469
GPR[SSUN]-1659910913469
-1117079791
GPR[ESUN]-1659910913675
GPR[SSUN]-1659910913675
-1117079791
GPR[SPVATF]-1659910913879
GPR[EPVATF]-1659910914164
GPR[SPS]-1659910914164
[379650] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:229.
GPR[EPS]-1659910914611
GPR[ESUN]-1659910914611
GPR[SSUN]-1659910914611
GPR[ESUN]-1659910914611
GPR[SSUN]-1659910914611
2433571
GPR[ESUN]-1659910914858
GPR[SSUN]-1659910914858
2433571
GPR[SPVATF]-1659910915103
GPR[EPVATF]-1659910915433
GPR[SPS]-1659910915433
[381185] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:600.
GPR[EPS]-1659910916146
GPR[SPVATF]-1659910916146
GPR[EPVATF]-1659910916470
GPR[SPS]-1659910916470
[382186] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:600.
GPR[EPS]-1659910917147
GPR[ESUN]-1659910917147
GPR[SSUN]-1659910917147
2433571
GPR[SPVATF]-1659910917397
GPR[EPVATF]-1659910917733
GPR[SPS]-1659910917733
[383397] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:599.
GPR[EPS]-1659910918358
GPR[ESUN]-1659910918358
GPR[SSUN]-1659910918358
2433571
GPR[SPVATF]-1659910918606
GPR[EPVATF]-1659910918931
GPR[SPS]-1659910918931
[384583] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:598.
GPR[EPS]-1659910919544
GPR[ESUN]-1659910919544
GPR[SSUN]-1659910919544
2433571
GPR[SPVATF]-1659910919787
GPR[EPVATF]-1659910920115
GPR[SPS]-1659910920115
[385774] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:597.
GPR[EPS]-1659910920735
GPR[ESUN]-1659910920735
GPR[SSUN]-1659910920735
2433571
GPR[SPVATF]-1659910920986
GPR[EPVATF]-1659910921312
GPR[SPS]-1659910921312
[386964] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:596.
GPR[EPS]-1659910921925
GPR[ESUN]-1659910921925
GPR[SSUN]-1659910921925
2433571
GPR[SPVATF]-1659910922171
GPR[EPVATF]-1659910922499
GPR[SPS]-1659910922499
[388210] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:595.
GPR[EPS]-1659910923171
GPR[ESUN]-1659910923171
GPR[SSUN]-1659910923171
-1117079791
GPR[ESUN]-1659910923379
GPR[SSUN]-1659910923379
-1117079791
GPR[SPVATF]-1659910923580
GPR[EPVATF]-1659910923836
[388875] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659910923836
GPR[EPVATF]-1659910924076
[389115] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910924076
GPR[SSUN]-1659910924077
-1117079791
GPR[SPVATF]-1659910924300
GPR[EPVATF]-1659910924549
[389588] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910924549
GPR[SSUN]-1659910924549
-1117079791
GPR[SPVATF]-1659910924764
GPR[EPVATF]-1659910925012
[390051] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910925012
GPR[SSUN]-1659910925012
-1117079791
GPR[ESUN]-1659910925229
GPR[SSUN]-1659910925229
-1117079791
GPR[SPVATF]-1659910925439
GPR[EPVATF]-1659910925685
[390725] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659910925686
GPR[SSUN]-1659910925686
-1117079791
GPR[ESUN]-1659910925899
GPR[SSUN]-1659910925899
-1117079791
GPR[SPVATF]-1659910926103
GPR[EPVATF]-1659910926437
GPR[SPS]-1659910926437
[391941] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:280.
GPR[EPS]-1659910926902
GPR[ESUN]-1659910926902
GPR[SSUN]-1659910926902
-1117079791
GPR[SPVATF]-1659910927111
GPR[EPVATF]-1659910927453
GPR[SPS]-1659910927453
[392943] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:279.
GPR[EPS]-1659910927904
GPR[ESUN]-1659910927904
GPR[SSUN]-1659910927904
-1117079791
GPR[ESUN]-1659910928108
GPR[SSUN]-1659910928108
-1117079791
GPR[ESUN]-1659910928313
GPR[SSUN]-1659910928313
-1117079791
GPR[SPVATF]-1659910928516
GPR[EPVATF]-1659910928806
GPR[SPS]-1659910928806
[394300] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:643.
GPR[EPS]-1659910929262
GPR[ESUN]-1659910929262
GPR[SSUN]-1659910929262
-1117079791
GPR[SPVATF]-1659910929470
GPR[EPVATF]-1659910929765
GPR[SPS]-1659910929765
[395271] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:640.
GPR[EPS]-1659910930232
GPR[ESUN]-1659910930232
GPR[SSUN]-1659910930232
-1117079791
GPR[SPVATF]-1659910930480
GPR[EPVATF]-1659910930778
GPR[SPS]-1659910930778
[396279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:639.
GPR[EPS]-1659910931240
GPR[ESUN]-1659910931240
GPR[SSUN]-1659910931240
-1117079791
GPR[SPVATF]-1659910931453
GPR[EPVATF]-1659910931805
GPR[SPS]-1659910931805
[397308] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:811.
GPR[EPS]-1659910932269
GPR[ESUN]-1659910932269
GPR[SSUN]-1659910932269
-534884160
GPR[ESUN]-1659910932644
GPR[SSUN]-1659910932644
1331276989
GPR[ESUN]-1659910932864
GPR[SSUN]-1659910932864
GPR[ESUN]-1659910932864
GPR[SSUN]-1659910932864
GPR[ESUN]-1659910932864
GPR[SSUN]-1659910932864
GPR[ESUN]-1659910932864
GPR[SSUN]-1659910932864
GPR[ESUN]-1659910932864
GPR[SSUN]-1659910932864
GPR[ESUN]-1659910932864
GPR[SSUN]-1659910932864
GPR[ESUN]-1659910932864
GPR[SSUN]-1659910932864
GPR[ESUN]-1659910932864
GPR[SSUN]-1659910932864
GPR[ESUN]-1659910932864
GPR[SSUN]-1659910932864
GPR[ESUN]-1659910932864
GPR[SSUN]-1659910932864
GPR[ESUN]-1659910932864
GPR[SSUN]-1659910932864
-1117079791
GPR[ESUN]-1659910933072
GPR[SSUN]-1659910933072
-1117079791
GPR[SPVATF]-1659910933282
GPR[EPVATF]-1659910933639
GPR[SPS]-1659910933639
[399137] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:477.
GPR[EPS]-1659910934098
GPR[ESUN]-1659910934098
GPR[SSUN]-1659910934098
-1117079791
GPR[SPVATF]-1659910934311
GPR[EPVATF]-1659910934656
GPR[SPS]-1659910934656
[400169] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:476.
GPR[EPS]-1659910935130
GPR[ESUN]-1659910935130
GPR[SSUN]-1659910935130
-1117079791
GPR[SPVATF]-1659910935344
GPR[EPVATF]-1659910935701
GPR[SPS]-1659910935701
[401204] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:475.
GPR[EPS]-1659910936165
GPR[ESUN]-1659910936165
GPR[SSUN]-1659910936165
-1117079791
GPR[ESUN]-1659910936375
GPR[SSUN]-1659910936375
-1117079791
GPR[SPVATF]-1659910936578
GPR[EPVATF]-1659910936935
GPR[SPS]-1659910936936
[402431] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:126.
GPR[EPS]-1659910937392
GPR[ESUN]-1659910937392
GPR[SSUN]-1659910937392
704176156
GPR[ESUN]-1659910937602
GPR[SSUN]-1659910937602
704176156
GPR[SPVATF]-1659910937806
GPR[EPVATF]-1659910938169
GPR[SPS]-1659910938169
[403722] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:175.
GPR[EPS]-1659910938683
GPR[SPVATF]-1659910938683
GPR[EPVATF]-1659910939031
GPR[SPS]-1659910939031
[404536] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:175.
GPR[EPS]-1659910939498
GPR[ESUN]-1659910939498
GPR[SSUN]-1659910939498
704176156
GPR[SPVATF]-1659910939714
GPR[EPVATF]-1659910940076
GPR[SPS]-1659910940076
[405577] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:169.
GPR[EPS]-1659910940538
GPR[SPVATF]-1659910940538
GPR[EPVATF]-1659910940904
GPR[SPS]-1659910940904
[406415] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:169.
GPR[EPS]-1659910941376
GPR[ESUN]-1659910941376
GPR[SSUN]-1659910941377
704176156
GPR[SPVATF]-1659910941586
GPR[EPVATF]-1659910941955
GPR[SPS]-1659910941955
[407464] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:165.
GPR[EPS]-1659910942425
GPR[ESUN]-1659910942425
GPR[SSUN]-1659910942425
704176156
GPR[ESUN]-1659910942636
GPR[SSUN]-1659910942637
704176156
GPR[SPVATF]-1659910942841
GPR[EPVATF]-1659910943224
GPR[SPS]-1659910943224
[408728] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:158.
GPR[EPS]-1659910943689
GPR[ESUN]-1659910943689
GPR[SSUN]-1659910943689
704176156
GPR[SPVATF]-1659910943899
GPR[EPVATF]-1659910944274
GPR[SPS]-1659910944274
[409787] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:136.
GPR[EPS]-1659910944748
GPR[ESUN]-1659910944748
GPR[SSUN]-1659910944748
704176156
GPR[SPVATF]-1659910944959
GPR[EPVATF]-1659910945333
GPR[SPS]-1659910945333
[410846] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:135.
GPR[EPS]-1659910945807
GPR[ESUN]-1659910945807
GPR[SSUN]-1659910945807
-1117079791
GPR[ESUN]-1659910946017
GPR[SSUN]-1659910946017
-1117079791
GPR[SPVATF]-1659910946218
GPR[EPVATF]-1659910946593
GPR[SPS]-1659910946593
[412093] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:815.
GPR[EPS]-1659910947054
GPR[SPVATF]-1659910947096
GPR[EPVATF]-1659910947472
GPR[SPS]-1659910947472
[412969] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:815.
GPR[EPS]-1659910947930
GPR[ESUN]-1659910947930
GPR[SSUN]-1659910947930
-1117079791
GPR[SPVATF]-1659910948136
GPR[EPVATF]-1659910948508
GPR[SPS]-1659910948508
[414008] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:810.
GPR[EPS]-1659910948969
GPR[SPVATF]-1659910948970
GPR[EPVATF]-1659910949339
GPR[SPS]-1659910949339
[414841] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:810.
GPR[EPS]-1659910949802
GPR[ESUN]-1659910949802
GPR[SSUN]-1659910949802
-1117079791
GPR[ESUN]-1659910950009
GPR[SSUN]-1659910950009
-1345859678
GPR[ESUN]-1659910950276
GPR[SSUN]-1659910950276
1537627151
GPR[ESUN]-1659910950489
GPR[SSUN]-1659910950490
-1345859678
GPR[ESUN]-1659910950759
GPR[SSUN]-1659910950759
-1345859678
GPR[ESUN]-1659910951029
GPR[SSUN]-1659910951029
-1345859678
GPR[SPVATF]-1659910951297
GPR[EPVATF]-1659910952838
GPR[SPS]-1659910952838
[418481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:762.
GPR[EPS]-1659910953442
GPR[ESUN]-1659910953442
GPR[SSUN]-1659910953442
-1345859678
GPR[SPVATF]-1659910953706
GPR[EPVATF]-1659910954067
GPR[SPS]-1659910954067
[419686] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:761.
GPR[EPS]-1659910954647
GPR[ESUN]-1659910954647
GPR[SSUN]-1659910954647
-1345859678
GPR[SPVATF]-1659910954914
GPR[EPVATF]-1659910955311
GPR[SPS]-1659910955311
[421206] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:760.
GPR[EPS]-1659910956167
GPR[ESUN]-1659910956167
GPR[SSUN]-1659910956167
-1345859678
GPR[SPVATF]-1659910956438
GPR[EPVATF]-1659910956758
GPR[SPS]-1659910956758
[422380] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:756.
GPR[EPS]-1659910957341
GPR[ESUN]-1659910957342
GPR[SSUN]-1659910957342
-1345859678
GPR[ESUN]-1659910957610
GPR[SSUN]-1659910957610
GPR[ESUN]-1659910957610
GPR[SSUN]-1659910957610
GPR[ESUN]-1659910957610
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
GPR[ESUN]-1659910957611
GPR[SSUN]-1659910957611
-1117079791
GPR[SPVATF]-1659910957821
GPR[EPVATF]-1659910958146
GPR[SPS]-1659910958146
[423639] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:780.
GPR[EPS]-1659910958600
GPR[ESUN]-1659910958600
GPR[SSUN]-1659910958600
2346
GPR[ESUN]-1659910958791
GPR[SSUN]-1659910958791
GPR[ESUN]-1659910958791
GPR[SSUN]-1659910958791
GPR[ESUN]-1659910958791
GPR[SSUN]-1659910958792
GPR[ESUN]-1659910958792
GPR[SSUN]-1659910958792
GPR[ESUN]-1659910958792
GPR[SSUN]-1659910958792
GPR[ESUN]-1659910958792
GPR[SSUN]-1659910958792
GPR[ESUN]-1659910958792
GPR[SSUN]-1659910958792
-1117079791
GPR[ESUN]-1659910958996
GPR[SSUN]-1659910958996
-1117079791
GPR[SPVATF]-1659910959199
GPR[EPVATF]-1659910959511
GPR[SPS]-1659910959511
[425002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:73.
GPR[EPS]-1659910959963
GPR[ESUN]-1659910959963
GPR[SSUN]-1659910959963
-1117079791
GPR[SPVATF]-1659910960202
GPR[EPVATF]-1659910960510
GPR[SPS]-1659910960510
[425999] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:72.
GPR[EPS]-1659910960960
GPR[ESUN]-1659910960960
GPR[SSUN]-1659910960961
-1117079791
GPR[SPVATF]-1659910961169
GPR[EPVATF]-1659910961480
GPR[SPS]-1659910961480
[426974] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:71.
GPR[EPS]-1659910961935
GPR[ESUN]-1659910961935
GPR[SSUN]-1659910961936
-1117079791
GPR[SPVATF]-1659910962145
GPR[EPVATF]-1659910962465
GPR[SPS]-1659910962465
[427960] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:70.
GPR[EPS]-1659910962921
GPR[ESUN]-1659910962921
GPR[SSUN]-1659910962921
-1117079791
GPR[SPVATF]-1659910963130
GPR[EPVATF]-1659910963435
GPR[SPS]-1659910963435
[428920] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:69.
GPR[EPS]-1659910963881
GPR[ESUN]-1659910963881
GPR[SSUN]-1659910963881
GPR[ESUN]-1659910963881
GPR[SSUN]-1659910963881
GPR[ESUN]-1659910963881
GPR[SSUN]-1659910963881
GPR[ESUN]-1659910963881
GPR[SSUN]-1659910963881
GPR[ESUN]-1659910963881
GPR[SSUN]-1659910963881
GPR[ESUN]-1659910963881
GPR[SSUN]-1659910963881
GPR[ESUN]-1659910963881
GPR[SSUN]-1659910963881
GPR[ESUN]-1659910963881
GPR[SSUN]-1659910963881
GPR[ESUN]-1659910963881
GPR[SSUN]-1659910963881
GPR[ESUN]-1659910963881
GPR[SSUN]-1659910963881
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
GPR[ESUN]-1659910963882
GPR[SSUN]-1659910963882
1187751237
GPR[ESUN]-1659910964182
GPR[SSUN]-1659910964182
1187751237
GPR[SPVATF]-1659910964479
GPR[EPVATF]-1659910964786
GPR[SPS]-1659910964787
[430514] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3341.
GPR[EPS]-1659910965475
GPR[ESUN]-1659910965475
GPR[SSUN]-1659910965475
1187751237
GPR[SPVATF]-1659910965778
GPR[EPVATF]-1659910966092
GPR[SPS]-1659910966092
[431850] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3340.
GPR[EPS]-1659910966811
GPR[ESUN]-1659910966811
GPR[SSUN]-1659910966812
1187751237
GPR[SPVATF]-1659910967115
GPR[EPVATF]-1659910967425
GPR[SPS]-1659910967425
[433141] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3339.
GPR[EPS]-1659910968102
GPR[ESUN]-1659910968102
GPR[SSUN]-1659910968102
1187751237
GPR[SPVATF]-1659910968402
GPR[EPVATF]-1659910968729
GPR[SPS]-1659910968729
[434441] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3338.
GPR[EPS]-1659910969402
GPR[ESUN]-1659910969402
GPR[SSUN]-1659910969402
1187751237
GPR[ESUN]-1659910969703
GPR[SSUN]-1659910969703
1187751237
GPR[SPVATF]-1659910969999
GPR[EPVATF]-1659910970316
GPR[SPS]-1659910970316
[436029] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3334.
GPR[EPS]-1659910970990
GPR[SPVATF]-1659910970990
GPR[EPVATF]-1659910971332
GPR[SPS]-1659910971332
[437044] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3334.
GPR[EPS]-1659910972005
GPR[ESUN]-1659910972005
GPR[SSUN]-1659910972005
1187751237
GPR[ESUN]-1659910972306
GPR[SSUN]-1659910972306
1187751237
GPR[SPVATF]-1659910972605
GPR[EPVATF]-1659910972922
GPR[SPS]-1659910972922
[438641] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3329.
GPR[EPS]-1659910973602
GPR[ESUN]-1659910973602
GPR[SSUN]-1659910973602
1187751237
GPR[SPVATF]-1659910973902
GPR[EPVATF]-1659910974217
GPR[SPS]-1659910974217
[439926] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3328.
GPR[EPS]-1659910974887
GPR[ESUN]-1659910974887
GPR[SSUN]-1659910974887
1187751237
GPR[ESUN]-1659910975188
GPR[SSUN]-1659910975188
1187751237
GPR[SPVATF]-1659910975487
GPR[EPVATF]-1659910975800
GPR[SPS]-1659910975800
[441631] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3326.
GPR[EPS]-1659910976592
GPR[ESUN]-1659910976592
GPR[SSUN]-1659910976592
2346
GPR[ESUN]-1659910976786
GPR[SSUN]-1659910976786
2346
GPR[SPVATF]-1659910976976
GPR[EPVATF]-1659910977249
GPR[SPS]-1659910977249
[442682] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:156.
GPR[EPS]-1659910977643
GPR[ESUN]-1659910977643
GPR[SSUN]-1659910977643
-1117079791
GPR[ESUN]-1659910977851
GPR[SSUN]-1659910977851
-1117079791
GPR[SPVATF]-1659910978054
GPR[EPVATF]-1659910978368
GPR[SPS]-1659910978368
[443855] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:237.
GPR[EPS]-1659910978816
GPR[ESUN]-1659910978816
GPR[SSUN]-1659910978816
2433571
GPR[SPVATF]-1659910979060
GPR[EPVATF]-1659910979374
GPR[SPS]-1659910979374
[445031] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:567.
GPR[EPS]-1659910979992
GPR[ESUN]-1659910979993
GPR[SSUN]-1659910979993
2433571
GPR[SPVATF]-1659910980237
GPR[EPVATF]-1659910980546
GPR[SPS]-1659910980546
[446206] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:566.
GPR[EPS]-1659910981167
GPR[ESUN]-1659910981167
GPR[SSUN]-1659910981167
2433571
GPR[ESUN]-1659910981416
GPR[SSUN]-1659910981416
2433571
GPR[SPVATF]-1659910981695
GPR[EPVATF]-1659910982010
GPR[SPS]-1659910982010
[447678] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:565.
GPR[EPS]-1659910982639
GPR[ESUN]-1659910982639
GPR[SSUN]-1659910982640
2433571
GPR[ESUN]-1659910982889
GPR[SSUN]-1659910982889
2433571
GPR[SPVATF]-1659910983142
GPR[EPVATF]-1659910983458
GPR[SPS]-1659910983458
[449123] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1557.
GPR[EPS]-1659910984084
GPR[SPVATF]-1659910984084
GPR[EPVATF]-1659910984391
GPR[SPS]-1659910984391
[450066] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1557.
GPR[EPS]-1659910985027
GPR[ESUN]-1659910985027
GPR[SSUN]-1659910985027
GPR[ESUN]-1659910985027
GPR[SSUN]-1659910985027
GPR[ESUN]-1659910985027
GPR[SSUN]-1659910985027
2433571
GPR[ESUN]-1659910985294
GPR[SSUN]-1659910985294
2433571
GPR[SPVATF]-1659910985544
GPR[EPVATF]-1659910985863
GPR[SPS]-1659910985863
[451534] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1554.
GPR[EPS]-1659910986495
GPR[ESUN]-1659910986495
GPR[SSUN]-1659910986495
2433571
GPR[ESUN]-1659910986753
GPR[SSUN]-1659910986753
-1117079791
GPR[SPVATF]-1659910986992
GPR[EPVATF]-1659910987319
GPR[SPS]-1659910987319
[452807] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:794.
GPR[EPS]-1659910987768
GPR[ESUN]-1659910987768
GPR[SSUN]-1659910987768
2433571
GPR[SPVATF]-1659910988011
GPR[EPVATF]-1659910988323
GPR[SPS]-1659910988323
[453969] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1724.
GPR[EPS]-1659910988930
GPR[ESUN]-1659910988930
GPR[SSUN]-1659910988930
-1117079791
GPR[ESUN]-1659910989133
GPR[SSUN]-1659910989134
-1117079791
GPR[SPVATF]-1659910989339
GPR[EPVATF]-1659910989672
GPR[SPS]-1659910989672
[455161] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:801.
GPR[EPS]-1659910990122
GPR[SPVATF]-1659910990122
GPR[EPVATF]-1659910990434
GPR[SPS]-1659910990434
[455927] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:801.
GPR[EPS]-1659910990888
GPR[ESUN]-1659910990888
GPR[SSUN]-1659910990888
-1117079791
GPR[SPVATF]-1659910991096
GPR[EPVATF]-1659910991417
GPR[SPS]-1659910991417
[456902] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:793.
GPR[EPS]-1659910991863
GPR[SPVATF]-1659910991863
GPR[EPVATF]-1659910992191
GPR[SPS]-1659910992191
[457680] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:793.
GPR[EPS]-1659910992641
GPR[ESUN]-1659910992641
GPR[SSUN]-1659910992641
-1117079791
GPR[ESUN]-1659910992852
GPR[SSUN]-1659910992852
GPR[ESUN]-1659910992852
GPR[SSUN]-1659910992852
2433571
GPR[SPVATF]-1659910993101
GPR[EPVATF]-1659910993436
GPR[SPS]-1659910993436
[459134] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1729.
GPR[EPS]-1659910994095
GPR[ESUN]-1659910994095
GPR[SSUN]-1659910994096
2433571
GPR[SPVATF]-1659910994346
GPR[EPVATF]-1659910994674
GPR[SPS]-1659910994674
[460335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1727.
GPR[EPS]-1659910995296
GPR[ESUN]-1659910995296
GPR[SSUN]-1659910995296
2433571
GPR[SPVATF]-1659910995544
GPR[EPVATF]-1659910995875
GPR[SPS]-1659910995875
[461533] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1726.
GPR[EPS]-1659910996494
GPR[SPVATF]-1659910996494
GPR[EPVATF]-1659910996824
GPR[SPS]-1659910996824
[462489] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1726.
GPR[EPS]-1659910997450
GPR[ESUN]-1659910997450
GPR[SSUN]-1659910997450
2433571
GPR[SPVATF]-1659910997697
GPR[EPVATF]-1659910998030
GPR[SPS]-1659910998030
[463686] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1723.
GPR[EPS]-1659910998647
GPR[SPVATF]-1659910998647
GPR[EPVATF]-1659910998978
GPR[SPS]-1659910998978
[464676] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1723.
GPR[EPS]-1659910999637
GPR[ESUN]-1659910999637
GPR[SSUN]-1659910999637
2433571
GPR[SPVATF]-1659910999885
GPR[EPVATF]-1659911000219
GPR[SPS]-1659911000219
[465881] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1722.
GPR[EPS]-1659911000842
GPR[ESUN]-1659911000842
GPR[SSUN]-1659911000842
2433571
GPR[ESUN]-1659911001096
GPR[SSUN]-1659911001096
1071131148
GPR[ESUN]-1659911001276
GPR[SSUN]-1659911001277
1071131148
GPR[SPVATF]-1659911001455
GPR[EPVATF]-1659911001782
GPR[SPS]-1659911001782
[467238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.RecentChange:36.
GPR[EPS]-1659911002199
GPR[ESUN]-1659911002199
GPR[SSUN]-1659911002199
-1117079791
GPR[ESUN]-1659911002404
GPR[SSUN]-1659911002404
-1117079791
GPR[SPVATF]-1659911002611
GPR[EPVATF]-1659911002952
GPR[SPS]-1659911002952
[468444] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:342.
GPR[EPS]-1659911003405
GPR[ESUN]-1659911003405
GPR[SSUN]-1659911003405
-1117079791
GPR[SPVATF]-1659911003611
GPR[EPVATF]-1659911003953
GPR[SPS]-1659911003953
[469455] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:341.
GPR[EPS]-1659911004416
GPR[ESUN]-1659911004416
GPR[SSUN]-1659911004416
-1117079791
GPR[SPVATF]-1659911004623
GPR[EPVATF]-1659911004967
GPR[SPS]-1659911004967
[470453] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:340.
GPR[EPS]-1659911005414
GPR[ESUN]-1659911005415
GPR[SSUN]-1659911005415
2433571
GPR[ESUN]-1659911005662
GPR[SSUN]-1659911005662
2433571
GPR[SPVATF]-1659911005912
GPR[EPVATF]-1659911006259
GPR[SPS]-1659911006259
[471954] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1720.
GPR[EPS]-1659911006915
GPR[ESUN]-1659911006915
GPR[SSUN]-1659911006915
2433571
GPR[ESUN]-1659911007166
GPR[SSUN]-1659911007166
GPR[ESUN]-1659911007166
GPR[SSUN]-1659911007166
GPR[ESUN]-1659911007166
GPR[SSUN]-1659911007166
2433571
GPR[ESUN]-1659911007409
GPR[SSUN]-1659911007409
2433571
GPR[ESUN]-1659911007655
GPR[SSUN]-1659911007655
2433571
GPR[SPVATF]-1659911007898
GPR[EPVATF]-1659911008241
GPR[SPS]-1659911008241
[473919] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1708.
GPR[EPS]-1659911008880
GPR[ESUN]-1659911008880
GPR[SSUN]-1659911008880
2433571
GPR[SPVATF]-1659911009131
GPR[EPVATF]-1659911009468
GPR[SPS]-1659911009468
[858869] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659911398566
GPR[SSUN]-1659911401426
2433571
GPR[SPVATF]-1659911955206
[1722583] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659912297493
GPR[SSUN]-1659912299857
\n\nNode: host-46\n
\n\nDate: Sun 07 Aug 2022 03:56:10 PM PDT\n
End running Nopol Closure/113 results at /experiment_home///results/Nopol/Closure/113/seed_261/
Removing checked out dir script/workingdir/Nopol/Closure_113
GPR[SSLE]-1659912971035
GPR[ESLE]-1659913031038
