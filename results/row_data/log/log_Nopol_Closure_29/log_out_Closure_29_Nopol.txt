Sleep 1m start
GPR[SSLI]-1659907135571
GPR[ESLI]-1659907195574
Running Nopol Closure 29b with approach: smt
Timezone: America/Los_Angeles
Seed 264
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/29/seed_264/
The file script/workingdir/Nopol/Closure_29 does not exist!
script/workingdir/Nopol/Closure_29
script/workingdir/Nopol/Closure_29
classpath:  script/workingdir/Nopol/Closure_29/build/classes:script/workingdir/Nopol/Closure_29/lib/args4j.jar:script/workingdir/Nopol/Closure_29/lib/guava.jar:script/workingdir/Nopol/Closure_29/lib/json.jar:script/workingdir/Nopol/Closure_29/lib/jsr305.jar:script/workingdir/Nopol/Closure_29/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_29/build/lib/rhino.jar:script/workingdir/Nopol/Closure_29/lib/ant.jar:script/workingdir/Nopol/Closure_29/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_29/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_29/lib/jarjar.jar:script/workingdir/Nopol/Closure_29/lib/junit.jar:script/workingdir/Nopol/Closure_29/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659907214702
GPR[ESLB]-1659907274708
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_29//build/classes:script/workingdir/Nopol/Closure_29//build/test:script/workingdir/Nopol/Closure_29/build/classes:script/workingdir/Nopol/Closure_29/lib/args4j.jar:script/workingdir/Nopol/Closure_29/lib/guava.jar:script/workingdir/Nopol/Closure_29/lib/json.jar:script/workingdir/Nopol/Closure_29/lib/jsr305.jar:script/workingdir/Nopol/Closure_29/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_29/build/lib/rhino.jar:script/workingdir/Nopol/Closure_29/lib/ant.jar:script/workingdir/Nopol/Closure_29/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_29/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_29/lib/jarjar.jar:script/workingdir/Nopol/Closure_29/lib/junit.jar:script/workingdir/Nopol/Closure_29/build/test
Node: host-50
Date init: Sun 07 Aug 2022 02:21:14 PM PDT
OAR_JOB_ID: 3720517
[1] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_29/src]
[1] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_29/build/classes/, file:script/workingdir/Nopol/Closure_29/build/test/, file:script/workingdir/Nopol/Closure_29/build/classes/, file:script/workingdir/Nopol/Closure_29/lib/args4j.jar, file:script/workingdir/Nopol/Closure_29/lib/guava.jar, file:script/workingdir/Nopol/Closure_29/lib/json.jar, file:script/workingdir/Nopol/Closure_29/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_29/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_29/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_29/lib/ant.jar, file:script/workingdir/Nopol/Closure_29/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_29/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_29/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_29/lib/junit.jar, file:script/workingdir/Nopol/Closure_29/build/test/]
[1] INFO NoPol - Statement type: PRE_THEN_COND
[1] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[3] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_29/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/29/seed_264/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[8] INFO NoPol - Free memory: 1 GB
[8] INFO NoPol - Maximum memory: 7 GB
[8] INFO NoPol - Total memory available to JVM: 1 GB
[9] INFO NoPol - Java version: 1.8.0_45
[10] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[10] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659907279994
GPR[ESUP]-1659907279994
GPR[SFL]-1659907279994
GPR[EFL]-1659907320719
GPR[SFP]-1659907320719
GPR[SSUN]-1659907322348
80988634
GPR[ESUN]-1659907322827
GPR[SSUN]-1659907322827
80988634
GPR[ESUN]-1659907323019
GPR[SSUN]-1659907323019
-1147408099
GPR[SPVATF]-1659907323351
GPR[EPVATF]-1659907325003
GPR[SPS]-1659907325003
[50676] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:289.
GPR[EPS]-1659907326209
GPR[ESUN]-1659907326209
GPR[SSUN]-1659907326209
-1147408099
GPR[ESUN]-1659907326457
GPR[SSUN]-1659907326457
80988634
GPR[ESUN]-1659907326635
GPR[SSUN]-1659907326635
80988634
GPR[ESUN]-1659907326814
GPR[SSUN]-1659907326814
80988634
GPR[ESUN]-1659907326996
GPR[SSUN]-1659907326996
-1147408099
GPR[ESUN]-1659907329666
GPR[SSUN]-1659907329666
-1147408099
GPR[SPVATF]-1659907329913
GPR[EPVATF]-1659907330283
GPR[SPS]-1659907330283
[55386] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:337.
GPR[EPS]-1659907330919
GPR[ESUN]-1659907330919
GPR[SSUN]-1659907330919
2433571
GPR[SPVATF]-1659907331172
GPR[EPVATF]-1659907332191
GPR[SPS]-1659907332192
[57682] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1459.
GPR[EPS]-1659907333215
GPR[ESUN]-1659907333215
GPR[SSUN]-1659907333215
2433571
GPR[SPVATF]-1659907333468
GPR[EPVATF]-1659907334480
GPR[SPS]-1659907334480
GPR[EPS]-1659907337752
GPR[SPVATR]-1659907337752
[62220] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1430: PRECONDITION com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.JSDOC_INFO_PROP
[62680] INFO TestPatch - Running test suite to check the patch "com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.JSDOC_INFO_PROP" is working
GPR[EPVATR]-1659907338544
[63011] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659907338544
[63038] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1429,7 +1429,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (com.google.javascript.rhino.Node.this.type < com.google.javascript.rhino.Node.JSDOC_INFO_PROP) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/29/seed_264/patch_58577_1ts_1659907338571.diff
GPR[ESUN]-1659907338572
GPR[SSUN]-1659907338572
-1147408099
GPR[SPVATF]-1659907338813
GPR[EPVATF]-1659907339804
GPR[SPS]-1659907339804
[64959] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:411.
GPR[EPS]-1659907340492
GPR[ESUN]-1659907340492
GPR[SSUN]-1659907340492
-283827935
GPR[SPVATF]-1659907340687
GPR[EPVATF]-1659907340701
[65168] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659907340701
GPR[SSUN]-1659907340701
-1147408099
GPR[SPVATF]-1659907340933
GPR[EPVATF]-1659907341334
GPR[SPS]-1659907341334
[66384] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:433.
GPR[EPS]-1659907341917
GPR[ESUN]-1659907341917
GPR[SSUN]-1659907341917
-1147408099
GPR[SPVATF]-1659907342149
GPR[EPVATF]-1659907342542
GPR[SPS]-1659907342542
[67409] ERROR ConstraintModelBuilder - Unable to compile the change: 
class InlineObjectLiterals implements com.google.javascript.jscomp.CompilerPass {
    public static final java.lang.String VAR_PREFIX = "JSCompiler_object_inline_";

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    InlineObjectLiterals(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier) {
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.ReferenceCollectingCallback callback = new com.google.javascript.jscomp.ReferenceCollectingCallback(compiler, new com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior());
        callback.process(externs, root);
    }

    private class InliningBehavior implements com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior {
        private final java.util.Set<com.google.javascript.jscomp.Scope.Var> staleVars = com.google.common.collect.Sets.newHashSet();

        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                com.google.javascript.jscomp.Scope.Var v = it.next();
                if (isVarInlineForbidden(v)) {
                    continue;
                }
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                if (isInlinableObject(referenceInfo.references)) {
                    staleVars.add(v);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration = referenceInfo.references.get(0);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
                    splitObject(v, declaration, init, referenceInfo);
                }
            }
        }

        private void blacklistVarReferencesInTree(com.google.javascript.rhino.Node root, final com.google.javascript.jscomp.Scope scope) {
            com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, new com.google.javascript.jscomp.NodeUtil.Visitor() {
                @java.lang.Override
                public void visit(com.google.javascript.rhino.Node node) {
                    if (node.isName()) {
                        staleVars.add(scope.getVar(node.getString()));
                    }
                }
            }, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }

        private boolean isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.isGlobal() || var.isExtern()) || compiler.getCodingConvention().isExported(var.name)) || com.google.javascript.jscomp.RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)) || staleVars.contains(var);
        }

        private boolean isInlinableObject(java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs) {
            boolean ret = false;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : refs) {
                com.google.javascript.rhino.Node name = ref.getNode();
                com.google.javascript.rhino.Node parent = ref.getParent();
                com.google.javascript.rhino.Node gramps = ref.getGrandparent();
                if (parent.isGetProp()) {
                    com.google.common.base.Preconditions.checkState(parent.getFirstChild() == name);
                    if (gramps.isCall() && (gramps.getFirstChild() == parent)) {
                        return false;
                    }
                    continue;
                }
                if (!isVarOrAssignExprLhs(name)) {
                    return false;
                }
                com.google.javascript.rhino.Node val = ref.getAssignedValue();
                if (val == null) {
                    continue;
                }
                if (!val.isObjectLit()) {
                    return false;
                }
                for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                    if (child.isGetterDef() || child.isSetterDef()) {
                        return false;
                    }
                    com.google.javascript.rhino.Node childVal = child.getFirstChild();
                    for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference t : refs) {
                        com.google.javascript.rhino.Node refNode = t.getParent();
                        while (!com.google.javascript.jscomp.NodeUtil.isStatementBlock(refNode)) {
                            if (refNode == childVal) {
                                return false;
                            }
                            refNode = refNode.getParent();
                        } 
                    }
                }
                ret = true;
            }
            return ret;
        }

        private boolean isVarOrAssignExprLhs(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return parent.isVar() || ((parent.isAssign() && (parent.getFirstChild() == n)) && parent.getParent().isExprResult());
        }

        private java.util.Map<java.lang.String, java.lang.String> computeVarList(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = com.google.common.collect.Maps.newLinkedHashMap();
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    com.google.javascript.rhino.Node val = ref.getAssignedValue();
                    if (val != null) {
                        com.google.common.base.Preconditions.checkState(val.isObjectLit());
                        for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                            java.lang.String varname = child.getString();
                            if (varmap.containsKey(varname)) {
                                continue;
                            }
                            java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                            varmap.put(varname, var);
                        }
                    }
                } else if (ref.getParent().isVar()) {
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String varname = getprop.getLastChild().getString();
                    if (varmap.containsKey(varname)) {
                        continue;
                    }
                    java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                    varmap.put(varname, var);
                }
            }
            return varmap;
        }

        private void fillInitialValues(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals) {
            com.google.javascript.rhino.Node object = init.getAssignedValue();
            com.google.common.base.Preconditions.checkState(object.isObjectLit());
            for (com.google.javascript.rhino.Node key = object.getFirstChild(); key != null; key = key.getNext()) {
                initvals.put(key.getString(), key.removeFirstChild());
            }
        }

        private void replaceAssignmentExpression(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref, java.util.Map<java.lang.String, java.lang.String> varmap) {
            java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();
            com.google.javascript.rhino.Node val = ref.getAssignedValue();
            blacklistVarReferencesInTree(val, v.scope);
            com.google.common.base.Preconditions.checkState(val.isObjectLit());
            java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());
            for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {
                java.lang.String var = key.getString();
                com.google.javascript.rhino.Node value = key.removeFirstChild();
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), value));
                all.remove(var);
            }
            for (java.lang.String var : all) {
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));
            }
            com.google.javascript.rhino.Node replacement;
            if (nodes.isEmpty()) {
                replacement = com.google.javascript.rhino.IR.trueNode();
            } else {
                nodes.add(com.google.javascript.rhino.IR.trueNode());
                nodes = com.google.common.collect.Lists.reverse(nodes);
                replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);
                com.google.javascript.rhino.Node cur = replacement;
                int i;
                for (i = 0; i < (nodes.size() - 2); i++) {
                    cur.addChildToFront(nodes.get(i));
                    com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);
                    cur.addChildToFront(t);
                    cur = t;
                }
                cur.addChildToFront(nodes.get(i));
                cur.addChildToFront(nodes.get(i + 1));
            }
            com.google.javascript.rhino.Node replace = ref.getParent();
            replacement.copyInformationFromForTree(replace);
            if (replace.isVar()) {
                replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));
            } else {
                replace.getParent().replaceChild(replace, replacement);
            }
        }

        private void splitObject(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = computeVarList(v, referenceInfo);
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals = com.google.common.collect.Maps.newHashMap();
            com.google.javascript.rhino.Node vnode;
            boolean defined = referenceInfo.isWellDefined() && init.getParent().isVar();
            if (defined) {
                vnode = init.getParent();
                fillInitialValues(init, initvals);
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(6).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("init",init);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX",com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("v",v);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars",com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier",com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("initvals",initvals);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("declaration",declaration);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("varmap",varmap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("defined",defined);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("referenceInfo",referenceInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.compiler",com.google.javascript.jscomp.InlineObjectLiterals.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionEnds();
                }
                if (runtimeAngelicValue)
                    vnode = v.getScope().getRootNode().getLastChild().getFirstChild();

            }
            for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : varmap.entrySet()) {
                com.google.javascript.rhino.Node val = initvals.get(entry.getKey());
                com.google.javascript.rhino.Node varnode = com.google.javascript.jscomp.NodeUtil.newVarNode(entry.getValue(), val);
                if (val == null) {
                    varnode.copyInformationFromForTree(vnode);
                } else {
                    blacklistVarReferencesInTree(val, v.scope);
                }
                vnode.getParent().addChildBefore(varnode, vnode);
            }
            if (defined) {
                vnode.getParent().removeChild(vnode);
            }
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (defined && (ref == init)) {
                    continue;
                }
                if (ref.isLvalue()) {
                    replaceAssignmentExpression(v, ref, varmap);
                } else if (ref.getParent().isVar()) {
                    ref.getGrandparent().removeChild(ref.getParent());
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String var = getprop.getChildAtIndex(1).getString();
                    com.google.common.base.Preconditions.checkState(varmap.containsKey(var));
                    com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.name(varmap.get(var));
                    replacement.copyInformationFrom(getprop);
                    ref.getGrandparent().replaceChild(ref.getParent(), replacement);
                }
            }
            compiler.reportCodeChange();
        }
    }
}
[67409] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659907342942
GPR[SSUN]-1659907342942
80988634
GPR[ESUN]-1659907343117
GPR[SSUN]-1659907343117
-1147408099
GPR[SPVATF]-1659907343344
GPR[EPVATF]-1659907343741
GPR[SPS]-1659907343741
[68783] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:365.
GPR[EPS]-1659907344316
GPR[ESUN]-1659907344316
GPR[SSUN]-1659907344316
-1147408099
GPR[SPVATF]-1659907344545
GPR[EPVATF]-1659907344940
GPR[SPS]-1659907344940
[69958] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:364.
GPR[EPS]-1659907345491
GPR[ESUN]-1659907345491
GPR[SSUN]-1659907345491
-1147408099
GPR[SPVATF]-1659907345723
GPR[EPVATF]-1659907346126
GPR[SPS]-1659907346126
[71080] ERROR ConstraintModelBuilder - Unable to compile the change: 
class InlineObjectLiterals implements com.google.javascript.jscomp.CompilerPass {
    public static final java.lang.String VAR_PREFIX = "JSCompiler_object_inline_";

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    InlineObjectLiterals(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier) {
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.ReferenceCollectingCallback callback = new com.google.javascript.jscomp.ReferenceCollectingCallback(compiler, new com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior());
        callback.process(externs, root);
    }

    private class InliningBehavior implements com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior {
        private final java.util.Set<com.google.javascript.jscomp.Scope.Var> staleVars = com.google.common.collect.Sets.newHashSet();

        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                com.google.javascript.jscomp.Scope.Var v = it.next();
                if (isVarInlineForbidden(v)) {
                    continue;
                }
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                if (isInlinableObject(referenceInfo.references)) {
                    staleVars.add(v);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration = referenceInfo.references.get(0);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
                    splitObject(v, declaration, init, referenceInfo);
                }
            }
        }

        private void blacklistVarReferencesInTree(com.google.javascript.rhino.Node root, final com.google.javascript.jscomp.Scope scope) {
            com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, new com.google.javascript.jscomp.NodeUtil.Visitor() {
                @java.lang.Override
                public void visit(com.google.javascript.rhino.Node node) {
                    if (node.isName()) {
                        staleVars.add(scope.getVar(node.getString()));
                    }
                }
            }, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }

        private boolean isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.isGlobal() || var.isExtern()) || compiler.getCodingConvention().isExported(var.name)) || com.google.javascript.jscomp.RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)) || staleVars.contains(var);
        }

        private boolean isInlinableObject(java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs) {
            boolean ret = false;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : refs) {
                com.google.javascript.rhino.Node name = ref.getNode();
                com.google.javascript.rhino.Node parent = ref.getParent();
                com.google.javascript.rhino.Node gramps = ref.getGrandparent();
                if (parent.isGetProp()) {
                    com.google.common.base.Preconditions.checkState(parent.getFirstChild() == name);
                    if (gramps.isCall() && (gramps.getFirstChild() == parent)) {
                        return false;
                    }
                    continue;
                }
                if (!isVarOrAssignExprLhs(name)) {
                    return false;
                }
                com.google.javascript.rhino.Node val = ref.getAssignedValue();
                if (val == null) {
                    continue;
                }
                if (!val.isObjectLit()) {
                    return false;
                }
                for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                    if (child.isGetterDef() || child.isSetterDef()) {
                        return false;
                    }
                    com.google.javascript.rhino.Node childVal = child.getFirstChild();
                    for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference t : refs) {
                        com.google.javascript.rhino.Node refNode = t.getParent();
                        while (!com.google.javascript.jscomp.NodeUtil.isStatementBlock(refNode)) {
                            if (refNode == childVal) {
                                return false;
                            }
                            refNode = refNode.getParent();
                        } 
                    }
                }
                ret = true;
            }
            return ret;
        }

        private boolean isVarOrAssignExprLhs(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return parent.isVar() || ((parent.isAssign() && (parent.getFirstChild() == n)) && parent.getParent().isExprResult());
        }

        private java.util.Map<java.lang.String, java.lang.String> computeVarList(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = com.google.common.collect.Maps.newLinkedHashMap();
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    com.google.javascript.rhino.Node val = ref.getAssignedValue();
                    if (val != null) {
                        com.google.common.base.Preconditions.checkState(val.isObjectLit());
                        for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                            java.lang.String varname = child.getString();
                            if (varmap.containsKey(varname)) {
                                continue;
                            }
                            java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                            varmap.put(varname, var);
                        }
                    }
                } else if (ref.getParent().isVar()) {
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String varname = getprop.getLastChild().getString();
                    if (varmap.containsKey(varname)) {
                        continue;
                    }
                    java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                    varmap.put(varname, var);
                }
            }
            return varmap;
        }

        private void fillInitialValues(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals) {
            com.google.javascript.rhino.Node object = init.getAssignedValue();
            com.google.common.base.Preconditions.checkState(object.isObjectLit());
            for (com.google.javascript.rhino.Node key = object.getFirstChild(); key != null; key = key.getNext()) {
                initvals.put(key.getString(), key.removeFirstChild());
            }
        }

        private void replaceAssignmentExpression(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref, java.util.Map<java.lang.String, java.lang.String> varmap) {
            java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();
            com.google.javascript.rhino.Node val = ref.getAssignedValue();
            blacklistVarReferencesInTree(val, v.scope);
            com.google.common.base.Preconditions.checkState(val.isObjectLit());
            java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());
            for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {
                java.lang.String var = key.getString();
                com.google.javascript.rhino.Node value = key.removeFirstChild();
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), value));
                all.remove(var);
            }
            for (java.lang.String var : all) {
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));
            }
            com.google.javascript.rhino.Node replacement;
            if (nodes.isEmpty()) {
                replacement = com.google.javascript.rhino.IR.trueNode();
            } else {
                nodes.add(com.google.javascript.rhino.IR.trueNode());
                nodes = com.google.common.collect.Lists.reverse(nodes);
                replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);
                com.google.javascript.rhino.Node cur = replacement;
                int i;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(9).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("val",val);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("all",all);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("cur",cur);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("ref",ref);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("nodes",nodes);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX",com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("v",v);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars",com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier",com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("varmap",varmap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.compiler",com.google.javascript.jscomp.InlineObjectLiterals.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(9).collectionEnds();
                }
                if (runtimeAngelicValue)
                    for (i = 0; i < (nodes.size() - 2); i++) {
                        cur.addChildToFront(nodes.get(i));
                        com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);
                        cur.addChildToFront(t);
                        cur = t;
                    }

                cur.addChildToFront(nodes.get(i));
                cur.addChildToFront(nodes.get(i + 1));
            }
            com.google.javascript.rhino.Node replace = ref.getParent();
            replacement.copyInformationFromForTree(replace);
            if (replace.isVar()) {
                replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));
            } else {
                replace.getParent().replaceChild(replace, replacement);
            }
        }

        private void splitObject(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = computeVarList(v, referenceInfo);
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals = com.google.common.collect.Maps.newHashMap();
            com.google.javascript.rhino.Node vnode;
            boolean defined = referenceInfo.isWellDefined() && init.getParent().isVar();
            if (defined) {
                vnode = init.getParent();
                fillInitialValues(init, initvals);
            } else {
                vnode = v.getScope().getRootNode().getLastChild().getFirstChild();
            }
            for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : varmap.entrySet()) {
                com.google.javascript.rhino.Node val = initvals.get(entry.getKey());
                com.google.javascript.rhino.Node varnode = com.google.javascript.jscomp.NodeUtil.newVarNode(entry.getValue(), val);
                if (val == null) {
                    varnode.copyInformationFromForTree(vnode);
                } else {
                    blacklistVarReferencesInTree(val, v.scope);
                }
                vnode.getParent().addChildBefore(varnode, vnode);
            }
            if (defined) {
                vnode.getParent().removeChild(vnode);
            }
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (defined && (ref == init)) {
                    continue;
                }
                if (ref.isLvalue()) {
                    replaceAssignmentExpression(v, ref, varmap);
                } else if (ref.getParent().isVar()) {
                    ref.getGrandparent().removeChild(ref.getParent());
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String var = getprop.getChildAtIndex(1).getString();
                    com.google.common.base.Preconditions.checkState(varmap.containsKey(var));
                    com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.name(varmap.get(var));
                    replacement.copyInformationFrom(getprop);
                    ref.getGrandparent().replaceChild(ref.getParent(), replacement);
                }
            }
            compiler.reportCodeChange();
        }
    }
}
[71081] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659907346614
GPR[SSUN]-1659907346614
-1147408099
GPR[ESUN]-1659907346894
GPR[SSUN]-1659907346894
-1147408099
GPR[SPVATF]-1659907347118
GPR[EPVATF]-1659907347550
GPR[SPS]-1659907347550
[72387] ERROR ConstraintModelBuilder - Unable to compile the change: 
class InlineObjectLiterals implements com.google.javascript.jscomp.CompilerPass {
    public static final java.lang.String VAR_PREFIX = "JSCompiler_object_inline_";

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    InlineObjectLiterals(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier) {
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.ReferenceCollectingCallback callback = new com.google.javascript.jscomp.ReferenceCollectingCallback(compiler, new com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior());
        callback.process(externs, root);
    }

    private class InliningBehavior implements com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior {
        private final java.util.Set<com.google.javascript.jscomp.Scope.Var> staleVars = com.google.common.collect.Sets.newHashSet();

        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                com.google.javascript.jscomp.Scope.Var v = it.next();
                if (isVarInlineForbidden(v)) {
                    continue;
                }
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                if (isInlinableObject(referenceInfo.references)) {
                    staleVars.add(v);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration = referenceInfo.references.get(0);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
                    splitObject(v, declaration, init, referenceInfo);
                }
            }
        }

        private void blacklistVarReferencesInTree(com.google.javascript.rhino.Node root, final com.google.javascript.jscomp.Scope scope) {
            com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, new com.google.javascript.jscomp.NodeUtil.Visitor() {
                @java.lang.Override
                public void visit(com.google.javascript.rhino.Node node) {
                    if (node.isName()) {
                        staleVars.add(scope.getVar(node.getString()));
                    }
                }
            }, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }

        private boolean isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.isGlobal() || var.isExtern()) || compiler.getCodingConvention().isExported(var.name)) || com.google.javascript.jscomp.RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)) || staleVars.contains(var);
        }

        private boolean isInlinableObject(java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs) {
            boolean ret = false;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : refs) {
                com.google.javascript.rhino.Node name = ref.getNode();
                com.google.javascript.rhino.Node parent = ref.getParent();
                com.google.javascript.rhino.Node gramps = ref.getGrandparent();
                if (parent.isGetProp()) {
                    com.google.common.base.Preconditions.checkState(parent.getFirstChild() == name);
                    if (gramps.isCall() && (gramps.getFirstChild() == parent)) {
                        return false;
                    }
                    continue;
                }
                if (!isVarOrAssignExprLhs(name)) {
                    return false;
                }
                com.google.javascript.rhino.Node val = ref.getAssignedValue();
                if (val == null) {
                    continue;
                }
                if (!val.isObjectLit()) {
                    return false;
                }
                for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                    if (child.isGetterDef() || child.isSetterDef()) {
                        return false;
                    }
                    com.google.javascript.rhino.Node childVal = child.getFirstChild();
                    for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference t : refs) {
                        com.google.javascript.rhino.Node refNode = t.getParent();
                        while (!com.google.javascript.jscomp.NodeUtil.isStatementBlock(refNode)) {
                            if (refNode == childVal) {
                                return false;
                            }
                            refNode = refNode.getParent();
                        } 
                    }
                }
                ret = true;
            }
            return ret;
        }

        private boolean isVarOrAssignExprLhs(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return parent.isVar() || ((parent.isAssign() && (parent.getFirstChild() == n)) && parent.getParent().isExprResult());
        }

        private java.util.Map<java.lang.String, java.lang.String> computeVarList(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = com.google.common.collect.Maps.newLinkedHashMap();
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    com.google.javascript.rhino.Node val = ref.getAssignedValue();
                    if (val != null) {
                        com.google.common.base.Preconditions.checkState(val.isObjectLit());
                        for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                            java.lang.String varname = child.getString();
                            if (varmap.containsKey(varname)) {
                                continue;
                            }
                            java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                            varmap.put(varname, var);
                        }
                    }
                } else if (ref.getParent().isVar()) {
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String varname = getprop.getLastChild().getString();
                    if (varmap.containsKey(varname)) {
                        continue;
                    }
                    java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                    varmap.put(varname, var);
                }
            }
            return varmap;
        }

        private void fillInitialValues(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals) {
            com.google.javascript.rhino.Node object = init.getAssignedValue();
            com.google.common.base.Preconditions.checkState(object.isObjectLit());
            for (com.google.javascript.rhino.Node key = object.getFirstChild(); key != null; key = key.getNext()) {
                initvals.put(key.getString(), key.removeFirstChild());
            }
        }

        private void replaceAssignmentExpression(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref, java.util.Map<java.lang.String, java.lang.String> varmap) {
            java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();
            com.google.javascript.rhino.Node val = ref.getAssignedValue();
            blacklistVarReferencesInTree(val, v.scope);
            com.google.common.base.Preconditions.checkState(val.isObjectLit());
            java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());
            for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {
                java.lang.String var = key.getString();
                com.google.javascript.rhino.Node value = key.removeFirstChild();
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), value));
                all.remove(var);
            }
            for (java.lang.String var : all) {
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));
            }
            com.google.javascript.rhino.Node replacement;
            if (nodes.isEmpty()) {
                replacement = com.google.javascript.rhino.IR.trueNode();
            } else {
                nodes.add(com.google.javascript.rhino.IR.trueNode());
                nodes = com.google.common.collect.Lists.reverse(nodes);
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(10).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("val",val);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("all",all);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("ref",ref);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("nodes",nodes);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX",com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("v",v);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars",com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier",com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("varmap",varmap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.compiler",com.google.javascript.jscomp.InlineObjectLiterals.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(10).collectionEnds();
                }
                if (runtimeAngelicValue)
                    replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);

                com.google.javascript.rhino.Node cur = replacement;
                int i;
                for (i = 0; i < (nodes.size() - 2); i++) {
                    cur.addChildToFront(nodes.get(i));
                    com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);
                    cur.addChildToFront(t);
                    cur = t;
                }
                cur.addChildToFront(nodes.get(i));
                cur.addChildToFront(nodes.get(i + 1));
            }
            com.google.javascript.rhino.Node replace = ref.getParent();
            replacement.copyInformationFromForTree(replace);
            if (replace.isVar()) {
                replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));
            } else {
                replace.getParent().replaceChild(replace, replacement);
            }
        }

        private void splitObject(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = computeVarList(v, referenceInfo);
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals = com.google.common.collect.Maps.newHashMap();
            com.google.javascript.rhino.Node vnode;
            boolean defined = referenceInfo.isWellDefined() && init.getParent().isVar();
            if (defined) {
                vnode = init.getParent();
                fillInitialValues(init, initvals);
            } else {
                vnode = v.getScope().getRootNode().getLastChild().getFirstChild();
            }
            for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : varmap.entrySet()) {
                com.google.javascript.rhino.Node val = initvals.get(entry.getKey());
                com.google.javascript.rhino.Node varnode = com.google.javascript.jscomp.NodeUtil.newVarNode(entry.getValue(), val);
                if (val == null) {
                    varnode.copyInformationFromForTree(vnode);
                } else {
                    blacklistVarReferencesInTree(val, v.scope);
                }
                vnode.getParent().addChildBefore(varnode, vnode);
            }
            if (defined) {
                vnode.getParent().removeChild(vnode);
            }
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (defined && (ref == init)) {
                    continue;
                }
                if (ref.isLvalue()) {
                    replaceAssignmentExpression(v, ref, varmap);
                } else if (ref.getParent().isVar()) {
                    ref.getGrandparent().removeChild(ref.getParent());
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String var = getprop.getChildAtIndex(1).getString();
                    com.google.common.base.Preconditions.checkState(varmap.containsKey(var));
                    com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.name(varmap.get(var));
                    replacement.copyInformationFrom(getprop);
                    ref.getGrandparent().replaceChild(ref.getParent(), replacement);
                }
            }
            compiler.reportCodeChange();
        }
    }
}
[72387] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659907347920
GPR[SSUN]-1659907347920
-1147408099
GPR[SPVATF]-1659907348173
GPR[EPVATF]-1659907348579
GPR[SPS]-1659907348579
[73620] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:354.
GPR[EPS]-1659907349153
GPR[ESUN]-1659907349153
GPR[SSUN]-1659907349153
-1147408099
GPR[SPVATF]-1659907349382
GPR[EPVATF]-1659907349790
GPR[SPS]-1659907349790
[75459] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:349.
GPR[EPS]-1659907350992
GPR[ESUN]-1659907350992
GPR[SSUN]-1659907350992
-1147408099
GPR[SPVATF]-1659907351244
GPR[EPVATF]-1659907351755
GPR[SPS]-1659907351755
[76781] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:429.
GPR[EPS]-1659907352314
GPR[ESUN]-1659907352314
GPR[SSUN]-1659907352314
-1147408099
GPR[ESUN]-1659907352547
GPR[SSUN]-1659907352547
-1147408099
GPR[SPVATF]-1659907352774
GPR[EPVATF]-1659907353175
GPR[SPS]-1659907353175
[78191] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:375.
GPR[EPS]-1659907353724
GPR[ESUN]-1659907353724
GPR[SSUN]-1659907353724
-1147408099
GPR[SPVATF]-1659907353976
GPR[EPVATF]-1659907354376
GPR[SPS]-1659907354376
[79397] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:371.
GPR[EPS]-1659907354930
GPR[SPVATF]-1659907354930
GPR[EPVATF]-1659907355364
GPR[SPS]-1659907355364
[80393] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:371.
GPR[EPS]-1659907355926
GPR[ESUN]-1659907355926
GPR[SSUN]-1659907355926
-1147408099
GPR[SPVATF]-1659907356155
GPR[EPVATF]-1659907356554
GPR[SPS]-1659907356554
[81593] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:369.
GPR[EPS]-1659907357126
GPR[ESUN]-1659907357126
GPR[SSUN]-1659907357126
-1147408099
GPR[ESUN]-1659907357361
GPR[SSUN]-1659907357361
-1147408099
GPR[SPVATF]-1659907357590
GPR[EPVATF]-1659907357989
GPR[SPS]-1659907357989
[82838] ERROR ConstraintModelBuilder - Unable to compile the change: 
class InlineObjectLiterals implements com.google.javascript.jscomp.CompilerPass {
    public static final java.lang.String VAR_PREFIX = "JSCompiler_object_inline_";

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    InlineObjectLiterals(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier) {
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.ReferenceCollectingCallback callback = new com.google.javascript.jscomp.ReferenceCollectingCallback(compiler, new com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior());
        callback.process(externs, root);
    }

    private class InliningBehavior implements com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior {
        private final java.util.Set<com.google.javascript.jscomp.Scope.Var> staleVars = com.google.common.collect.Sets.newHashSet();

        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                com.google.javascript.jscomp.Scope.Var v = it.next();
                if (isVarInlineForbidden(v)) {
                    continue;
                }
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                if (isInlinableObject(referenceInfo.references)) {
                    staleVars.add(v);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration = referenceInfo.references.get(0);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
                    splitObject(v, declaration, init, referenceInfo);
                }
            }
        }

        private void blacklistVarReferencesInTree(com.google.javascript.rhino.Node root, final com.google.javascript.jscomp.Scope scope) {
            com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, new com.google.javascript.jscomp.NodeUtil.Visitor() {
                @java.lang.Override
                public void visit(com.google.javascript.rhino.Node node) {
                    if (node.isName()) {
                        staleVars.add(scope.getVar(node.getString()));
                    }
                }
            }, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }

        private boolean isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.isGlobal() || var.isExtern()) || compiler.getCodingConvention().isExported(var.name)) || com.google.javascript.jscomp.RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)) || staleVars.contains(var);
        }

        private boolean isInlinableObject(java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs) {
            boolean ret = false;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : refs) {
                com.google.javascript.rhino.Node name = ref.getNode();
                com.google.javascript.rhino.Node parent = ref.getParent();
                com.google.javascript.rhino.Node gramps = ref.getGrandparent();
                if (parent.isGetProp()) {
                    com.google.common.base.Preconditions.checkState(parent.getFirstChild() == name);
                    if (gramps.isCall() && (gramps.getFirstChild() == parent)) {
                        return false;
                    }
                    continue;
                }
                if (!isVarOrAssignExprLhs(name)) {
                    return false;
                }
                com.google.javascript.rhino.Node val = ref.getAssignedValue();
                if (val == null) {
                    continue;
                }
                if (!val.isObjectLit()) {
                    return false;
                }
                for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                    if (child.isGetterDef() || child.isSetterDef()) {
                        return false;
                    }
                    com.google.javascript.rhino.Node childVal = child.getFirstChild();
                    for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference t : refs) {
                        com.google.javascript.rhino.Node refNode = t.getParent();
                        while (!com.google.javascript.jscomp.NodeUtil.isStatementBlock(refNode)) {
                            if (refNode == childVal) {
                                return false;
                            }
                            refNode = refNode.getParent();
                        } 
                    }
                }
                ret = true;
            }
            return ret;
        }

        private boolean isVarOrAssignExprLhs(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return parent.isVar() || ((parent.isAssign() && (parent.getFirstChild() == n)) && parent.getParent().isExprResult());
        }

        private java.util.Map<java.lang.String, java.lang.String> computeVarList(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = com.google.common.collect.Maps.newLinkedHashMap();
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    com.google.javascript.rhino.Node val = ref.getAssignedValue();
                    if (val != null) {
                        com.google.common.base.Preconditions.checkState(val.isObjectLit());
                        for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                            java.lang.String varname = child.getString();
                            if (varmap.containsKey(varname)) {
                                continue;
                            }
                            java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                            varmap.put(varname, var);
                        }
                    }
                } else if (ref.getParent().isVar()) {
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String varname = getprop.getLastChild().getString();
                    if (varmap.containsKey(varname)) {
                        continue;
                    }
                    java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                    varmap.put(varname, var);
                }
            }
            return varmap;
        }

        private void fillInitialValues(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals) {
            com.google.javascript.rhino.Node object = init.getAssignedValue();
            com.google.common.base.Preconditions.checkState(object.isObjectLit());
            for (com.google.javascript.rhino.Node key = object.getFirstChild(); key != null; key = key.getNext()) {
                initvals.put(key.getString(), key.removeFirstChild());
            }
        }

        private void replaceAssignmentExpression(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref, java.util.Map<java.lang.String, java.lang.String> varmap) {
            java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();
            com.google.javascript.rhino.Node val = ref.getAssignedValue();
            blacklistVarReferencesInTree(val, v.scope);
            com.google.common.base.Preconditions.checkState(val.isObjectLit());
            java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());
            for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {
                java.lang.String var = key.getString();
                com.google.javascript.rhino.Node value = key.removeFirstChild();
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), value));
                all.remove(var);
            }
            for (java.lang.String var : all) {
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));
            }
            com.google.javascript.rhino.Node replacement;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(18).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("val",val);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("all",all);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("ref",ref);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("nodes",nodes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX",com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("v",v);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars",com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier",com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("varmap",varmap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.compiler",com.google.javascript.jscomp.InlineObjectLiterals.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(18).collectionEnds();
            }
            if (runtimeAngelicValue) if (nodes.isEmpty()) {
                replacement = com.google.javascript.rhino.IR.trueNode();
            } else {
                nodes.add(com.google.javascript.rhino.IR.trueNode());
                nodes = com.google.common.collect.Lists.reverse(nodes);
                replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);
                com.google.javascript.rhino.Node cur = replacement;
                int i;
                for (i = 0; i < (nodes.size() - 2); i++) {
                    cur.addChildToFront(nodes.get(i));
                    com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);
                    cur.addChildToFront(t);
                    cur = t;
                }
                cur.addChildToFront(nodes.get(i));
                cur.addChildToFront(nodes.get(i + 1));
            }
            com.google.javascript.rhino.Node replace = ref.getParent();
            replacement.copyInformationFromForTree(replace);
            if (replace.isVar()) {
                replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));
            } else {
                replace.getParent().replaceChild(replace, replacement);
            }
        }

        private void splitObject(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = computeVarList(v, referenceInfo);
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals = com.google.common.collect.Maps.newHashMap();
            com.google.javascript.rhino.Node vnode;
            boolean defined = referenceInfo.isWellDefined() && init.getParent().isVar();
            if (defined) {
                vnode = init.getParent();
                fillInitialValues(init, initvals);
            } else {
                vnode = v.getScope().getRootNode().getLastChild().getFirstChild();
            }
            for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : varmap.entrySet()) {
                com.google.javascript.rhino.Node val = initvals.get(entry.getKey());
                com.google.javascript.rhino.Node varnode = com.google.javascript.jscomp.NodeUtil.newVarNode(entry.getValue(), val);
                if (val == null) {
                    varnode.copyInformationFromForTree(vnode);
                } else {
                    blacklistVarReferencesInTree(val, v.scope);
                }
                vnode.getParent().addChildBefore(varnode, vnode);
            }
            if (defined) {
                vnode.getParent().removeChild(vnode);
            }
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (defined && (ref == init)) {
                    continue;
                }
                if (ref.isLvalue()) {
                    replaceAssignmentExpression(v, ref, varmap);
                } else if (ref.getParent().isVar()) {
                    ref.getGrandparent().removeChild(ref.getParent());
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String var = getprop.getChildAtIndex(1).getString();
                    com.google.common.base.Preconditions.checkState(varmap.containsKey(var));
                    com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.name(varmap.get(var));
                    replacement.copyInformationFrom(getprop);
                    ref.getGrandparent().replaceChild(ref.getParent(), replacement);
                }
            }
            compiler.reportCodeChange();
        }
    }
}
[82838] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659907358371
GPR[EPVATF]-1659907358777
GPR[SPS]-1659907358777
[83789] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:344.
GPR[EPS]-1659907359323
GPR[ESUN]-1659907359323
GPR[SSUN]-1659907359323
-1147408099
GPR[SPVATF]-1659907359576
GPR[EPVATF]-1659907359981
GPR[SPS]-1659907359981
[85001] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:336.
GPR[EPS]-1659907360534
GPR[ESUN]-1659907360534
GPR[SSUN]-1659907360534
-1147408099
GPR[SPVATF]-1659907360758
GPR[EPVATF]-1659907361166
GPR[SPS]-1659907361167
[86190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:323.
GPR[EPS]-1659907361723
GPR[ESUN]-1659907361724
GPR[SSUN]-1659907361724
-1147408099
GPR[ESUN]-1659907361949
GPR[SSUN]-1659907361949
-1147408099
GPR[SPVATF]-1659907362174
GPR[EPVATF]-1659907362650
GPR[SPS]-1659907362650
[87672] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:321.
GPR[EPS]-1659907363205
GPR[ESUN]-1659907363205
GPR[SSUN]-1659907363205
-1147408099
GPR[SPVATF]-1659907363433
GPR[EPVATF]-1659907363870
GPR[SPS]-1659907363870
[88901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:320.
GPR[EPS]-1659907364434
GPR[ESUN]-1659907364434
GPR[SSUN]-1659907364435
-1147408099
GPR[ESUN]-1659907364695
GPR[SSUN]-1659907364695
-1147408099
GPR[ESUN]-1659907364923
GPR[SSUN]-1659907364923
2433571
GPR[SPVATF]-1659907365162
GPR[EPVATF]-1659907366324
GPR[SPS]-1659907366324
[92300] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1446.
GPR[EPS]-1659907367833
GPR[ESUN]-1659907367833
GPR[SSUN]-1659907367833
80988634
GPR[ESUN]-1659907368014
GPR[SSUN]-1659907368014
-1147408099
GPR[SPVATF]-1659907368243
GPR[EPVATF]-1659907369528
GPR[SPS]-1659907369528
[94679] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:449.
GPR[EPS]-1659907370212
GPR[ESUN]-1659907370212
GPR[SSUN]-1659907370212
-1147408099
GPR[SPVATF]-1659907370436
GPR[EPVATF]-1659907371458
GPR[SPS]-1659907371458
[96677] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:448.
GPR[EPS]-1659907372210
GPR[ESUN]-1659907372210
GPR[SSUN]-1659907372210
-1147408099
GPR[ESUN]-1659907372435
GPR[SSUN]-1659907372435
-1147408099
GPR[SPVATF]-1659907372654
GPR[EPVATF]-1659907373670
GPR[SPS]-1659907373670
[98812] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:444.
GPR[EPS]-1659907374345
GPR[ESUN]-1659907374345
GPR[SSUN]-1659907374345
-1147408099
GPR[ESUN]-1659907374567
GPR[SSUN]-1659907374567
-1147408099
GPR[SPVATF]-1659907374785
GPR[EPVATF]-1659907375815
GPR[SPS]-1659907375815
[100990] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:437.
GPR[EPS]-1659907376523
GPR[ESUN]-1659907376523
GPR[SSUN]-1659907376523
-1147408099
GPR[ESUN]-1659907376753
GPR[SSUN]-1659907376753
-1147408099
GPR[SPVATF]-1659907376993
GPR[EPVATF]-1659907378042
GPR[SPS]-1659907378042
[103193] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:284.
GPR[EPS]-1659907378726
GPR[SPVATF]-1659907378726
GPR[EPVATF]-1659907379786
GPR[SPS]-1659907379786
[104943] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:284.
GPR[EPS]-1659907380476
GPR[ESUN]-1659907380476
GPR[SSUN]-1659907380476
-1147408099
GPR[ESUN]-1659907380705
GPR[SSUN]-1659907380705
-1147408099
GPR[SPVATF]-1659907380933
GPR[EPVATF]-1659907382073
GPR[SPS]-1659907382073
[107256] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:280.
GPR[EPS]-1659907382789
GPR[ESUN]-1659907382789
GPR[SSUN]-1659907382790
-1147408099
GPR[ESUN]-1659907383017
GPR[SSUN]-1659907383017
-1147408099
GPR[ESUN]-1659907383244
GPR[SSUN]-1659907383244
-1147408099
GPR[SPVATF]-1659907383474
GPR[EPVATF]-1659907384530
GPR[SPS]-1659907384530
[109775] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:430.
GPR[EPS]-1659907385308
GPR[SPVATF]-1659907385308
GPR[EPVATF]-1659907386416
GPR[SPS]-1659907386416
[111553] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:430.
GPR[EPS]-1659907387086
GPR[ESUN]-1659907387086
GPR[SSUN]-1659907387086
-1147408099
GPR[SPVATF]-1659907387314
GPR[EPVATF]-1659907389416
GPR[SPS]-1659907389416
[114600] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:426.
GPR[EPS]-1659907390133
GPR[SPVATF]-1659907390133
GPR[EPVATF]-1659907391173
GPR[SPS]-1659907391173
[116362] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:426.
GPR[EPS]-1659907391895
GPR[ESUN]-1659907391895
GPR[SSUN]-1659907391895
-1147408099
GPR[ESUN]-1659907392120
GPR[SSUN]-1659907392120
-1147408099
GPR[SPVATF]-1659907392345
GPR[EPVATF]-1659907393366
GPR[SPS]-1659907393366
[118492] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:415.
GPR[EPS]-1659907394025
GPR[ESUN]-1659907394040
GPR[SSUN]-1659907394040
-1147408099
GPR[SPVATF]-1659907394293
GPR[EPVATF]-1659907395306
GPR[SPS]-1659907395306
[120557] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:409.
GPR[EPS]-1659907396090
GPR[SPVATF]-1659907396090
GPR[EPVATF]-1659907397189
GPR[SPS]-1659907397189
[122313] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:409.
GPR[EPS]-1659907397846
GPR[ESUN]-1659907397846
GPR[SSUN]-1659907397846
-1147408099
GPR[ESUN]-1659907398080
GPR[SSUN]-1659907398080
-1147408099
GPR[ESUN]-1659907398305
GPR[SSUN]-1659907398305
-1147408099
GPR[ESUN]-1659907398531
GPR[SSUN]-1659907398531
-1147408099
GPR[SPVATF]-1659907398755
GPR[EPVATF]-1659907399144
GPR[SPS]-1659907399144
[124173] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:362.
GPR[EPS]-1659907399706
GPR[ESUN]-1659907399706
GPR[SSUN]-1659907399706
-1147408099
GPR[SPVATF]-1659907399932
GPR[EPVATF]-1659907400306
GPR[SPS]-1659907400306
[125376] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:361.
GPR[EPS]-1659907400909
GPR[ESUN]-1659907400909
GPR[SSUN]-1659907400909
-1147408099
GPR[ESUN]-1659907401142
GPR[SSUN]-1659907401142
-1147408099
GPR[SPVATF]-1659907401362
GPR[EPVATF]-1659907401732
GPR[SPS]-1659907401732
[126738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:359.
GPR[EPS]-1659907402272
GPR[ESUN]-1659907402272
GPR[SSUN]-1659907402272
-1147408099
GPR[ESUN]-1659907402512
GPR[SSUN]-1659907402512
-1147408099
GPR[SPVATF]-1659907402744
GPR[EPVATF]-1659907403814
GPR[SPS]-1659907403814
[128988] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:453.
GPR[EPS]-1659907404521
GPR[ESUN]-1659907404521
GPR[SSUN]-1659907404522
-1147408099
GPR[SPVATF]-1659907404750
GPR[EPVATF]-1659907405845
GPR[SPS]-1659907405845
[130998] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:424.
GPR[EPS]-1659907406531
GPR[ESUN]-1659907406531
GPR[SSUN]-1659907406531
-1147408099
GPR[SPVATF]-1659907406786
GPR[EPVATF]-1659907407950
GPR[SPS]-1659907407950
[133108] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:422.
GPR[EPS]-1659907408641
GPR[ESUN]-1659907408641
GPR[SSUN]-1659907408641
-1147408099
GPR[SPVATF]-1659907408869
GPR[EPVATF]-1659907409963
GPR[SPS]-1659907409963
[135183] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:418.
GPR[EPS]-1659907410716
GPR[SPVATF]-1659907410717
GPR[EPVATF]-1659907412852
GPR[SPS]-1659907412852
[138187] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:418.
GPR[EPS]-1659907413720
GPR[ESUN]-1659907413720
GPR[SSUN]-1659907413720
-1147408099
GPR[SPVATF]-1659907413952
GPR[EPVATF]-1659907414992
GPR[SPS]-1659907414992
[140173] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:406.
GPR[EPS]-1659907415706
GPR[ESUN]-1659907415706
GPR[SSUN]-1659907415706
-1147408099
GPR[SPVATF]-1659907415938
GPR[EPVATF]-1659907416987
GPR[SPS]-1659907416987
[141820] ERROR ConstraintModelBuilder - Unable to compile the change: 
class InlineObjectLiterals implements com.google.javascript.jscomp.CompilerPass {
    public static final java.lang.String VAR_PREFIX = "JSCompiler_object_inline_";

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    InlineObjectLiterals(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier) {
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.ReferenceCollectingCallback callback = new com.google.javascript.jscomp.ReferenceCollectingCallback(compiler, new com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior());
        callback.process(externs, root);
    }

    private class InliningBehavior implements com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior {
        private final java.util.Set<com.google.javascript.jscomp.Scope.Var> staleVars = com.google.common.collect.Sets.newHashSet();

        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                com.google.javascript.jscomp.Scope.Var v = it.next();
                if (isVarInlineForbidden(v)) {
                    continue;
                }
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                if (isInlinableObject(referenceInfo.references)) {
                    staleVars.add(v);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration = referenceInfo.references.get(0);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
                    splitObject(v, declaration, init, referenceInfo);
                }
            }
        }

        private void blacklistVarReferencesInTree(com.google.javascript.rhino.Node root, final com.google.javascript.jscomp.Scope scope) {
            com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, new com.google.javascript.jscomp.NodeUtil.Visitor() {
                @java.lang.Override
                public void visit(com.google.javascript.rhino.Node node) {
                    if (node.isName()) {
                        staleVars.add(scope.getVar(node.getString()));
                    }
                }
            }, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }

        private boolean isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.isGlobal() || var.isExtern()) || compiler.getCodingConvention().isExported(var.name)) || com.google.javascript.jscomp.RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)) || staleVars.contains(var);
        }

        private boolean isInlinableObject(java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs) {
            boolean ret = false;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : refs) {
                com.google.javascript.rhino.Node name = ref.getNode();
                com.google.javascript.rhino.Node parent = ref.getParent();
                com.google.javascript.rhino.Node gramps = ref.getGrandparent();
                if (parent.isGetProp()) {
                    com.google.common.base.Preconditions.checkState(parent.getFirstChild() == name);
                    if (gramps.isCall() && (gramps.getFirstChild() == parent)) {
                        return false;
                    }
                    continue;
                }
                if (!isVarOrAssignExprLhs(name)) {
                    return false;
                }
                com.google.javascript.rhino.Node val = ref.getAssignedValue();
                if (val == null) {
                    continue;
                }
                if (!val.isObjectLit()) {
                    return false;
                }
                for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                    if (child.isGetterDef() || child.isSetterDef()) {
                        return false;
                    }
                    com.google.javascript.rhino.Node childVal = child.getFirstChild();
                    for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference t : refs) {
                        com.google.javascript.rhino.Node refNode = t.getParent();
                        while (!com.google.javascript.jscomp.NodeUtil.isStatementBlock(refNode)) {
                            if (refNode == childVal) {
                                return false;
                            }
                            refNode = refNode.getParent();
                        } 
                    }
                }
                ret = true;
            }
            return ret;
        }

        private boolean isVarOrAssignExprLhs(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return parent.isVar() || ((parent.isAssign() && (parent.getFirstChild() == n)) && parent.getParent().isExprResult());
        }

        private java.util.Map<java.lang.String, java.lang.String> computeVarList(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = com.google.common.collect.Maps.newLinkedHashMap();
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    com.google.javascript.rhino.Node val = ref.getAssignedValue();
                    if (val != null) {
                        com.google.common.base.Preconditions.checkState(val.isObjectLit());
                        for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                            java.lang.String varname = child.getString();
                            if (varmap.containsKey(varname)) {
                                continue;
                            }
                            java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                            varmap.put(varname, var);
                        }
                    }
                } else if (ref.getParent().isVar()) {
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String varname = getprop.getLastChild().getString();
                    if (varmap.containsKey(varname)) {
                        continue;
                    }
                    java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                    varmap.put(varname, var);
                }
            }
            return varmap;
        }

        private void fillInitialValues(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals) {
            com.google.javascript.rhino.Node object = init.getAssignedValue();
            com.google.common.base.Preconditions.checkState(object.isObjectLit());
            for (com.google.javascript.rhino.Node key = object.getFirstChild(); key != null; key = key.getNext()) {
                initvals.put(key.getString(), key.removeFirstChild());
            }
        }

        private void replaceAssignmentExpression(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref, java.util.Map<java.lang.String, java.lang.String> varmap) {
            java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();
            com.google.javascript.rhino.Node val = ref.getAssignedValue();
            blacklistVarReferencesInTree(val, v.scope);
            com.google.common.base.Preconditions.checkState(val.isObjectLit());
            java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());
            for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {
                java.lang.String var = key.getString();
                com.google.javascript.rhino.Node value = key.removeFirstChild();
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), value));
                all.remove(var);
            }
            for (java.lang.String var : all) {
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));
            }
            com.google.javascript.rhino.Node replacement;
            if (nodes.isEmpty()) {
                replacement = com.google.javascript.rhino.IR.trueNode();
            } else {
                nodes.add(com.google.javascript.rhino.IR.trueNode());
                nodes = com.google.common.collect.Lists.reverse(nodes);
                replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);
                com.google.javascript.rhino.Node cur = replacement;
                int i;
                for (i = 0; i < (nodes.size() - 2); i++) {
                    cur.addChildToFront(nodes.get(i));
                    com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);
                    cur.addChildToFront(t);
                    cur = t;
                }
                cur.addChildToFront(nodes.get(i));
                cur.addChildToFront(nodes.get(i + 1));
            }
            com.google.javascript.rhino.Node replace = ref.getParent();
            replacement.copyInformationFromForTree(replace);
            if (replace.isVar()) {
                replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));
            } else {
                replace.getParent().replaceChild(replace, replacement);
            }
        }

        private void splitObject(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = computeVarList(v, referenceInfo);
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals = com.google.common.collect.Maps.newHashMap();
            com.google.javascript.rhino.Node vnode;
            boolean defined = referenceInfo.isWellDefined() && init.getParent().isVar();
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(48).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectInput("init",init);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX",com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectInput("v",v);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars",com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier",com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectInput("initvals",initvals);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectInput("declaration",declaration);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectInput("varmap",varmap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectInput("defined",defined);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectInput("referenceInfo",referenceInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.compiler",com.google.javascript.jscomp.InlineObjectLiterals.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(48).collectionEnds();
            }
            if (runtimeAngelicValue) if (defined) {
                vnode = init.getParent();
                fillInitialValues(init, initvals);
            } else {
                vnode = v.getScope().getRootNode().getLastChild().getFirstChild();
            }
            for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : varmap.entrySet()) {
                com.google.javascript.rhino.Node val = initvals.get(entry.getKey());
                com.google.javascript.rhino.Node varnode = com.google.javascript.jscomp.NodeUtil.newVarNode(entry.getValue(), val);
                if (val == null) {
                    varnode.copyInformationFromForTree(vnode);
                } else {
                    blacklistVarReferencesInTree(val, v.scope);
                }
                vnode.getParent().addChildBefore(varnode, vnode);
            }
            if (defined) {
                vnode.getParent().removeChild(vnode);
            }
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (defined && (ref == init)) {
                    continue;
                }
                if (ref.isLvalue()) {
                    replaceAssignmentExpression(v, ref, varmap);
                } else if (ref.getParent().isVar()) {
                    ref.getGrandparent().removeChild(ref.getParent());
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String var = getprop.getChildAtIndex(1).getString();
                    com.google.common.base.Preconditions.checkState(varmap.containsKey(var));
                    com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.name(varmap.get(var));
                    replacement.copyInformationFrom(getprop);
                    ref.getGrandparent().replaceChild(ref.getParent(), replacement);
                }
            }
            compiler.reportCodeChange();
        }
    }
}
[141820] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659907417353
GPR[EPVATF]-1659907418381
GPR[SPS]-1659907418381
[143537] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:397.
GPR[EPS]-1659907419070
GPR[ESUN]-1659907419070
GPR[SSUN]-1659907419070
-1147408099
GPR[ESUN]-1659907419306
GPR[SSUN]-1659907419306
-1147408099
GPR[ESUN]-1659907419532
GPR[SSUN]-1659907419532
-1147408099
GPR[ESUN]-1659907419764
GPR[SSUN]-1659907419764
-1147408099
GPR[ESUN]-1659907420025
GPR[SSUN]-1659907420025
-1147408099
GPR[ESUN]-1659907420260
GPR[SSUN]-1659907420260
-1147408099
GPR[SPVATF]-1659907420518
GPR[EPVATF]-1659907421555
GPR[SPS]-1659907421555
[146736] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:276.
GPR[EPS]-1659907422269
GPR[SPVATF]-1659907422270
GPR[EPVATF]-1659907423307
GPR[SPS]-1659907423307
[148450] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:276.
GPR[EPS]-1659907423983
GPR[ESUN]-1659907423984
GPR[SSUN]-1659907423984
-1147408099
GPR[SPVATF]-1659907424214
GPR[EPVATF]-1659907425281
GPR[SPS]-1659907425281
[150441] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:264.
GPR[EPS]-1659907425974
GPR[ESUN]-1659907425974
GPR[SSUN]-1659907425974
-1147408099
GPR[SPVATF]-1659907426201
GPR[EPVATF]-1659907427344
GPR[SPS]-1659907427344
[152514] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:263.
GPR[EPS]-1659907428047
GPR[ESUN]-1659907428047
GPR[SSUN]-1659907428047
-1147408099
GPR[SPVATF]-1659907428274
GPR[EPVATF]-1659907429344
GPR[SPS]-1659907429344
[154535] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:262.
GPR[EPS]-1659907430068
GPR[SPVATF]-1659907430069
GPR[EPVATF]-1659907431196
GPR[SPS]-1659907431196
[156374] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:262.
GPR[EPS]-1659907431907
GPR[ESUN]-1659907431907
GPR[SSUN]-1659907431908
-1147408099
GPR[ESUN]-1659907432132
GPR[SSUN]-1659907432132
-1147408099
GPR[SPVATF]-1659907432355
GPR[EPVATF]-1659907433466
GPR[SPS]-1659907433466
[158625] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:260.
GPR[EPS]-1659907434158
GPR[SPVATF]-1659907434158
GPR[EPVATF]-1659907435406
GPR[SPS]-1659907435406
[160553] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:260.
GPR[EPS]-1659907436086
GPR[ESUN]-1659907436086
GPR[SSUN]-1659907436086
-1147408099
GPR[SPVATF]-1659907436316
GPR[EPVATF]-1659907437500
GPR[SPS]-1659907437500
[162675] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:259.
GPR[EPS]-1659907438208
GPR[ESUN]-1659907438208
GPR[SSUN]-1659907438208
-1147408099
GPR[ESUN]-1659907438430
GPR[SSUN]-1659907438430
-1147408099
GPR[ESUN]-1659907438718
GPR[SSUN]-1659907438718
-1147408099
GPR[SPVATF]-1659907438982
GPR[EPVATF]-1659907441205
GPR[SPS]-1659907441205
[166442] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:104.
GPR[EPS]-1659907441975
GPR[ESUN]-1659907441975
GPR[SSUN]-1659907441975
-1147408099
GPR[ESUN]-1659907442203
GPR[SSUN]-1659907442203
-1147408099
GPR[ESUN]-1659907442426
GPR[SSUN]-1659907442426
-1147408099
GPR[SPVATF]-1659907442651
GPR[EPVATF]-1659907443695
GPR[SPS]-1659907443695
[168833] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:97.
GPR[EPS]-1659907444366
GPR[ESUN]-1659907444366
GPR[SSUN]-1659907444366
-1147408099
GPR[SPVATF]-1659907444586
GPR[EPVATF]-1659907445610
GPR[SPS]-1659907445610
[170766] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:168.
GPR[EPS]-1659907446299
GPR[SPVATF]-1659907446299
GPR[EPVATF]-1659907447335
GPR[SPS]-1659907447335
[172474] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:168.
GPR[EPS]-1659907448007
GPR[ESUN]-1659907448007
GPR[SSUN]-1659907448007
-1147408099
GPR[SPVATF]-1659907448232
GPR[EPVATF]-1659907449265
GPR[SPS]-1659907449265
[174404] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:166.
GPR[EPS]-1659907449937
GPR[ESUN]-1659907449937
GPR[SSUN]-1659907449937
80988634
GPR[ESUN]-1659907450112
GPR[SSUN]-1659907450112
2433571
GPR[SPVATF]-1659907450346
GPR[EPVATF]-1659907451424
GPR[SPS]-1659907451424
[176743] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:965.
GPR[EPS]-1659907452276
GPR[ESUN]-1659907452276
GPR[SSUN]-1659907452276
2433571
GPR[ESUN]-1659907452504
GPR[SSUN]-1659907452504
-1147408099
GPR[SPVATF]-1659907452726
GPR[EPVATF]-1659907453108
GPR[SPS]-1659907453108
[178135] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:332.
GPR[EPS]-1659907453668
GPR[ESUN]-1659907453668
GPR[SSUN]-1659907453668
-1147408099
GPR[SPVATF]-1659907453897
GPR[EPVATF]-1659907454291
GPR[SPS]-1659907454291
[179312] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:328.
GPR[EPS]-1659907454845
GPR[ESUN]-1659907454845
GPR[SSUN]-1659907454845
-1147408099
GPR[ESUN]-1659907455075
GPR[SSUN]-1659907455075
-1147408099
GPR[ESUN]-1659907455306
GPR[SSUN]-1659907455306
2433571
GPR[SPVATF]-1659907455629
GPR[EPVATF]-1659907456755
GPR[SPS]-1659907456756
[181994] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:962.
GPR[EPS]-1659907457527
GPR[SPVATF]-1659907457527
GPR[EPVATF]-1659907458626
GPR[SPS]-1659907458626
[183910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:962.
GPR[EPS]-1659907459443
GPR[ESUN]-1659907459443
GPR[SSUN]-1659907459443
2433571
GPR[SPVATF]-1659907459680
GPR[EPVATF]-1659907460889
GPR[SPS]-1659907460889
[186143] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:958.
GPR[EPS]-1659907461677
GPR[ESUN]-1659907461677
GPR[SSUN]-1659907461677
2433571
GPR[ESUN]-1659907461908
GPR[SSUN]-1659907461908
2433571
GPR[ESUN]-1659907462136
GPR[SSUN]-1659907462136
-675467674
GPR[ESUN]-1659907462310
GPR[SSUN]-1659907462310
2433571
GPR[SPVATF]-1659907462539
GPR[EPVATF]-1659907463727
GPR[SPS]-1659907463727
[188984] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:969.
GPR[EPS]-1659907464517
GPR[ESUN]-1659907464517
GPR[SSUN]-1659907464517
2433571
GPR[SPVATF]-1659907464750
GPR[EPVATF]-1659907466061
GPR[SPS]-1659907466061
[191311] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:968.
GPR[EPS]-1659907466844
GPR[ESUN]-1659907466844
GPR[SSUN]-1659907466844
80988634
GPR[ESUN]-1659907467020
GPR[SSUN]-1659907467020
-1147408099
GPR[ESUN]-1659907467248
GPR[SSUN]-1659907467248
-1147408099
GPR[SPVATF]-1659907467473
GPR[EPVATF]-1659907467932
GPR[SPS]-1659907467932
[192944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior$1:119.
GPR[EPS]-1659907468477
GPR[SPVATF]-1659907468477
GPR[EPVATF]-1659907469724
GPR[SPS]-1659907469724
[194877] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior$1:119.
GPR[EPS]-1659907470410
GPR[ESUN]-1659907470410
GPR[SSUN]-1659907470410
-1147408099
GPR[ESUN]-1659907470660
GPR[SSUN]-1659907470660
-1147408099
GPR[SPVATF]-1659907470903
GPR[EPVATF]-1659907471341
GPR[SPS]-1659907471341
[196358] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:116.
GPR[EPS]-1659907471891
GPR[ESUN]-1659907471891
GPR[SSUN]-1659907471891
-1147408099
GPR[ESUN]-1659907472120
GPR[SSUN]-1659907472120
-1147408099
GPR[SPVATF]-1659907472344
GPR[EPVATF]-1659907473400
GPR[SPS]-1659907473400
[198604] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:237.
GPR[EPS]-1659907474137
GPR[ESUN]-1659907474137
GPR[SSUN]-1659907474137
-1147408099
GPR[SPVATF]-1659907474366
GPR[EPVATF]-1659907475415
GPR[SPS]-1659907475415
[200582] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:208.
GPR[EPS]-1659907476115
GPR[ESUN]-1659907476115
GPR[SSUN]-1659907476115
-1966087783
GPR[ESUN]-1659907476303
GPR[SSUN]-1659907476303
-1966087783
GPR[SPVATF]-1659907476491
GPR[EPVATF]-1659907476515
[200982] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659907476515
GPR[SSUN]-1659907476515
-1147408099
GPR[SPVATF]-1659907476737
GPR[EPVATF]-1659907477160
GPR[SPS]-1659907477160
[202165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:192.
GPR[EPS]-1659907477698
GPR[ESUN]-1659907477698
GPR[SSUN]-1659907477698
-1147408099
GPR[SPVATF]-1659907477930
GPR[EPVATF]-1659907479002
GPR[SPS]-1659907479002
[204192] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:196.
GPR[EPS]-1659907479725
GPR[SPVATF]-1659907479726
GPR[EPVATF]-1659907480848
GPR[SPS]-1659907480848
[206068] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:196.
GPR[EPS]-1659907481601
GPR[ESUN]-1659907481601
GPR[SSUN]-1659907481601
-1147408099
GPR[SPVATF]-1659907481822
GPR[EPVATF]-1659907482910
GPR[SPS]-1659907482910
[208069] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:190.
GPR[EPS]-1659907483602
GPR[SPVATF]-1659907483602
GPR[EPVATF]-1659907484712
GPR[SPS]-1659907484712
[209876] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:190.
GPR[EPS]-1659907485409
GPR[ESUN]-1659907485409
GPR[SSUN]-1659907485409
-1147408099
GPR[ESUN]-1659907485638
GPR[SSUN]-1659907485638
80988634
GPR[ESUN]-1659907485863
GPR[SSUN]-1659907485863
2433571
GPR[ESUN]-1659907486096
GPR[SSUN]-1659907486096
-1147408099
GPR[SPVATF]-1659907486317
GPR[EPVATF]-1659907487475
GPR[SPS]-1659907487475
[212678] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:186.
GPR[EPS]-1659907488211
GPR[ESUN]-1659907488211
GPR[SSUN]-1659907488211
80988634
GPR[ESUN]-1659907488391
GPR[SSUN]-1659907488391
-1147408099
GPR[SPVATF]-1659907488625
GPR[EPVATF]-1659907489046
GPR[SPS]-1659907489046
[214069] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:285.
GPR[EPS]-1659907489602
GPR[ESUN]-1659907489602
GPR[SSUN]-1659907489602
-1147408099
GPR[SPVATF]-1659907489828
GPR[EPVATF]-1659907490222
GPR[SPS]-1659907490222
[215236] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:273.
GPR[EPS]-1659907490769
GPR[ESUN]-1659907490769
GPR[SSUN]-1659907490769
-1147408099
GPR[ESUN]-1659907490997
GPR[SSUN]-1659907490997
-1147408099
GPR[SPVATF]-1659907491217
GPR[EPVATF]-1659907491657
GPR[SPS]-1659907491657
[216751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:267.
GPR[EPS]-1659907492284
GPR[SPVATF]-1659907492285
GPR[EPVATF]-1659907492693
GPR[SPS]-1659907492693
[217709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:267.
GPR[EPS]-1659907493242
GPR[ESUN]-1659907493242
GPR[SSUN]-1659907493243
-1147408099
GPR[ESUN]-1659907493471
GPR[SSUN]-1659907493471
2433571
GPR[SPVATF]-1659907493699
GPR[EPVATF]-1659907494964
GPR[SPS]-1659907494964
[220210] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1038.
GPR[EPS]-1659907495743
GPR[ESUN]-1659907495743
GPR[SSUN]-1659907495743
2433571
GPR[SPVATF]-1659907496047
GPR[EPVATF]-1659907497272
GPR[SPS]-1659907497272
[222593] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1031.
GPR[EPS]-1659907498126
GPR[ESUN]-1659907498126
GPR[SSUN]-1659907498126
-1147408099
GPR[SPVATF]-1659907498359
GPR[EPVATF]-1659907500548
GPR[SPS]-1659907500548
[225808] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:419.
GPR[EPS]-1659907501341
GPR[ESUN]-1659907501341
GPR[SSUN]-1659907501341
-1147408099
GPR[SPVATF]-1659907501571
GPR[EPVATF]-1659907502572
GPR[SPS]-1659907502572
[227748] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:399.
GPR[EPS]-1659907503281
GPR[ESUN]-1659907503281
GPR[SSUN]-1659907503281
-1147408099
GPR[SPVATF]-1659907503511
GPR[EPVATF]-1659907504496
GPR[SPS]-1659907504496
[229316] ERROR ConstraintModelBuilder - Unable to compile the change: 
class InlineObjectLiterals implements com.google.javascript.jscomp.CompilerPass {
    public static final java.lang.String VAR_PREFIX = "JSCompiler_object_inline_";

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier;

    InlineObjectLiterals(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.common.base.Supplier<java.lang.String> safeNameIdSupplier) {
        this.compiler = compiler;
        this.safeNameIdSupplier = safeNameIdSupplier;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.ReferenceCollectingCallback callback = new com.google.javascript.jscomp.ReferenceCollectingCallback(compiler, new com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior());
        callback.process(externs, root);
    }

    private class InliningBehavior implements com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior {
        private final java.util.Set<com.google.javascript.jscomp.Scope.Var> staleVars = com.google.common.collect.Sets.newHashSet();

        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                com.google.javascript.jscomp.Scope.Var v = it.next();
                if (isVarInlineForbidden(v)) {
                    continue;
                }
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                if (isInlinableObject(referenceInfo.references)) {
                    staleVars.add(v);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration = referenceInfo.references.get(0);
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
                    splitObject(v, declaration, init, referenceInfo);
                }
            }
        }

        private void blacklistVarReferencesInTree(com.google.javascript.rhino.Node root, final com.google.javascript.jscomp.Scope scope) {
            com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, new com.google.javascript.jscomp.NodeUtil.Visitor() {
                @java.lang.Override
                public void visit(com.google.javascript.rhino.Node node) {
                    if (node.isName()) {
                        staleVars.add(scope.getVar(node.getString()));
                    }
                }
            }, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        }

        private boolean isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.isGlobal() || var.isExtern()) || compiler.getCodingConvention().isExported(var.name)) || com.google.javascript.jscomp.RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)) || staleVars.contains(var);
        }

        private boolean isInlinableObject(java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs) {
            boolean ret = false;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : refs) {
                com.google.javascript.rhino.Node name = ref.getNode();
                com.google.javascript.rhino.Node parent = ref.getParent();
                com.google.javascript.rhino.Node gramps = ref.getGrandparent();
                if (parent.isGetProp()) {
                    com.google.common.base.Preconditions.checkState(parent.getFirstChild() == name);
                    if (gramps.isCall() && (gramps.getFirstChild() == parent)) {
                        return false;
                    }
                    continue;
                }
                if (!isVarOrAssignExprLhs(name)) {
                    return false;
                }
                com.google.javascript.rhino.Node val = ref.getAssignedValue();
                if (val == null) {
                    continue;
                }
                if (!val.isObjectLit()) {
                    return false;
                }
                for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                    if (child.isGetterDef() || child.isSetterDef()) {
                        return false;
                    }
                    com.google.javascript.rhino.Node childVal = child.getFirstChild();
                    for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference t : refs) {
                        com.google.javascript.rhino.Node refNode = t.getParent();
                        while (!com.google.javascript.jscomp.NodeUtil.isStatementBlock(refNode)) {
                            if (refNode == childVal) {
                                return false;
                            }
                            refNode = refNode.getParent();
                        } 
                    }
                }
                ret = true;
            }
            return ret;
        }

        private boolean isVarOrAssignExprLhs(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return parent.isVar() || ((parent.isAssign() && (parent.getFirstChild() == n)) && parent.getParent().isExprResult());
        }

        private java.util.Map<java.lang.String, java.lang.String> computeVarList(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = com.google.common.collect.Maps.newLinkedHashMap();
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (ref.isLvalue() || ref.isInitializingDeclaration()) {
                    com.google.javascript.rhino.Node val = ref.getAssignedValue();
                    if (val != null) {
                        com.google.common.base.Preconditions.checkState(val.isObjectLit());
                        for (com.google.javascript.rhino.Node child = val.getFirstChild(); child != null; child = child.getNext()) {
                            java.lang.String varname = child.getString();
                            if (varmap.containsKey(varname)) {
                                continue;
                            }
                            java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                            varmap.put(varname, var);
                        }
                    }
                } else if (ref.getParent().isVar()) {
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String varname = getprop.getLastChild().getString();
                    if (varmap.containsKey(varname)) {
                        continue;
                    }
                    java.lang.String var = ((com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX + varname) + "_") + safeNameIdSupplier.get();
                    varmap.put(varname, var);
                }
            }
            return varmap;
        }

        private void fillInitialValues(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals) {
            com.google.javascript.rhino.Node object = init.getAssignedValue();
            com.google.common.base.Preconditions.checkState(object.isObjectLit());
            for (com.google.javascript.rhino.Node key = object.getFirstChild(); key != null; key = key.getNext()) {
                initvals.put(key.getString(), key.removeFirstChild());
            }
        }

        private void replaceAssignmentExpression(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref, java.util.Map<java.lang.String, java.lang.String> varmap) {
            java.util.List<com.google.javascript.rhino.Node> nodes = com.google.common.collect.Lists.newArrayList();
            com.google.javascript.rhino.Node val = ref.getAssignedValue();
            blacklistVarReferencesInTree(val, v.scope);
            com.google.common.base.Preconditions.checkState(val.isObjectLit());
            java.util.Set<java.lang.String> all = com.google.common.collect.Sets.newLinkedHashSet(varmap.keySet());
            for (com.google.javascript.rhino.Node key = val.getFirstChild(); key != null; key = key.getNext()) {
                java.lang.String var = key.getString();
                com.google.javascript.rhino.Node value = key.removeFirstChild();
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), value));
                all.remove(var);
            }
            for (java.lang.String var : all) {
                nodes.add(com.google.javascript.rhino.IR.assign(com.google.javascript.rhino.IR.name(varmap.get(var)), com.google.javascript.jscomp.NodeUtil.newUndefinedNode(null)));
            }
            com.google.javascript.rhino.Node replacement;
            if (nodes.isEmpty()) {
                replacement = com.google.javascript.rhino.IR.trueNode();
            } else {
                nodes.add(com.google.javascript.rhino.IR.trueNode());
                nodes = com.google.common.collect.Lists.reverse(nodes);
                replacement = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);
                com.google.javascript.rhino.Node cur = replacement;
                int i;
                for (i = 0; i < (nodes.size() - 2); i++) {
                    cur.addChildToFront(nodes.get(i));
                    com.google.javascript.rhino.Node t = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.COMMA);
                    cur.addChildToFront(t);
                    cur = t;
                }
                cur.addChildToFront(nodes.get(i));
                cur.addChildToFront(nodes.get(i + 1));
            }
            com.google.javascript.rhino.Node replace = ref.getParent();
            replacement.copyInformationFromForTree(replace);
            if (replace.isVar()) {
                replace.getParent().replaceChild(replace, com.google.javascript.jscomp.NodeUtil.newExpr(replacement));
            } else {
                replace.getParent().replaceChild(replace, replacement);
            }
        }

        private void splitObject(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo) {
            java.util.Map<java.lang.String, java.lang.String> varmap = computeVarList(v, referenceInfo);
            java.util.Map<java.lang.String, com.google.javascript.rhino.Node> initvals = com.google.common.collect.Maps.newHashMap();
            com.google.javascript.rhino.Node vnode;
            boolean defined = referenceInfo.isWellDefined() && init.getParent().isVar();
            if (defined) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(91).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("init",init);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX",com.google.javascript.jscomp.InlineObjectLiterals.VAR_PREFIX);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("v",v);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars",com.google.javascript.jscomp.InlineObjectLiterals.InliningBehavior.this.staleVars);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier",com.google.javascript.jscomp.InlineObjectLiterals.this.safeNameIdSupplier);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("initvals",initvals);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("declaration",declaration);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("varmap",varmap);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("defined",defined);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("referenceInfo",referenceInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectInput("com.google.javascript.jscomp.InlineObjectLiterals.this.compiler",com.google.javascript.jscomp.InlineObjectLiterals.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(91).collectionEnds();
                }
                if (runtimeAngelicValue)
                    vnode = init.getParent();

                fillInitialValues(init, initvals);
            } else {
                vnode = v.getScope().getRootNode().getLastChild().getFirstChild();
            }
            for (java.util.Map.Entry<java.lang.String, java.lang.String> entry : varmap.entrySet()) {
                com.google.javascript.rhino.Node val = initvals.get(entry.getKey());
                com.google.javascript.rhino.Node varnode = com.google.javascript.jscomp.NodeUtil.newVarNode(entry.getValue(), val);
                if (val == null) {
                    varnode.copyInformationFromForTree(vnode);
                } else {
                    blacklistVarReferencesInTree(val, v.scope);
                }
                vnode.getParent().addChildBefore(varnode, vnode);
            }
            if (defined) {
                vnode.getParent().removeChild(vnode);
            }
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : referenceInfo.references) {
                if (defined && (ref == init)) {
                    continue;
                }
                if (ref.isLvalue()) {
                    replaceAssignmentExpression(v, ref, varmap);
                } else if (ref.getParent().isVar()) {
                    ref.getGrandparent().removeChild(ref.getParent());
                } else {
                    com.google.javascript.rhino.Node getprop = ref.getParent();
                    com.google.common.base.Preconditions.checkState(getprop.isGetProp());
                    java.lang.String var = getprop.getChildAtIndex(1).getString();
                    com.google.common.base.Preconditions.checkState(varmap.containsKey(var));
                    com.google.javascript.rhino.Node replacement = com.google.javascript.rhino.IR.name(varmap.get(var));
                    replacement.copyInformationFrom(getprop);
                    ref.getGrandparent().replaceChild(ref.getParent(), replacement);
                }
            }
            compiler.reportCodeChange();
        }
    }
}
[229316] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659907504849
GPR[SSUN]-1659907504849
-1147408099
GPR[ESUN]-1659907505073
GPR[SSUN]-1659907505073
-1147408099
GPR[SPVATF]-1659907505295
GPR[EPVATF]-1659907506314
GPR[SPS]-1659907506314
[231469] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:304.
GPR[EPS]-1659907507003
GPR[ESUN]-1659907507003
GPR[SSUN]-1659907507003
-1147408099
GPR[SPVATF]-1659907507225
GPR[EPVATF]-1659907508221
GPR[SPS]-1659907508221
[233381] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:303.
GPR[EPS]-1659907508915
GPR[ESUN]-1659907508915
GPR[SSUN]-1659907508915
-1147408099
GPR[ESUN]-1659907509137
GPR[SSUN]-1659907509137
2433571
GPR[ESUN]-1659907509369
GPR[SSUN]-1659907509369
2433571
GPR[ESUN]-1659907509594
GPR[SSUN]-1659907509594
2433571
GPR[SPVATF]-1659907509830
GPR[EPVATF]-1659907510936
GPR[SPS]-1659907510936
[236175] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1035.
GPR[EPS]-1659907511708
GPR[ESUN]-1659907511708
GPR[SSUN]-1659907511708
2433571
GPR[SPVATF]-1659907511939
GPR[EPVATF]-1659907513040
GPR[SPS]-1659907513040
[238249] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1034.
GPR[EPS]-1659907513782
GPR[ESUN]-1659907513782
GPR[SSUN]-1659907513782
2433571
GPR[SPVATF]-1659907514011
GPR[EPVATF]-1659907515154
GPR[SPS]-1659907515154
[240355] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1033.
GPR[EPS]-1659907515888
GPR[ESUN]-1659907515888
GPR[SSUN]-1659907515888
2433571
GPR[SPVATF]-1659907516232
GPR[EPVATF]-1659907517345
GPR[SPS]-1659907517345
[242569] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1030.
GPR[EPS]-1659907518102
GPR[ESUN]-1659907518103
GPR[SSUN]-1659907518103
2433571
GPR[ESUN]-1659907518352
GPR[SSUN]-1659907518352
2433571
GPR[SPVATF]-1659907518576
GPR[EPVATF]-1659907519731
GPR[SPS]-1659907519731
[245024] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1025.
GPR[EPS]-1659907520557
GPR[ESUN]-1659907520558
GPR[SSUN]-1659907520558
2433571
GPR[ESUN]-1659907520784
GPR[SSUN]-1659907520784
2433571
GPR[SPVATF]-1659907521006
GPR[EPVATF]-1659907522212
GPR[SPS]-1659907522212
[247450] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1017.
GPR[EPS]-1659907522983
GPR[ESUN]-1659907522983
GPR[SSUN]-1659907522983
2433571
GPR[ESUN]-1659907523209
GPR[SSUN]-1659907523209
2433571
GPR[ESUN]-1659907523433
GPR[SSUN]-1659907523433
-1659631726
GPR[ESUN]-1659907523610
GPR[SSUN]-1659907523610
130004992
GPR[ESUN]-1659907523778
GPR[SSUN]-1659907523778
130004992
GPR[SPVATF]-1659907523945
GPR[EPVATF]-1659907523968
[248436] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659907523969
GPR[SSUN]-1659907523969
130004992
GPR[ESUN]-1659907524143
GPR[SSUN]-1659907524143
80988634
GPR[ESUN]-1659907524316
GPR[SSUN]-1659907524316
1795686761
GPR[SPVATF]-1659907524542
GPR[EPVATF]-1659907525743
GPR[SPS]-1659907525743
[250975] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$Reference:609.
GPR[EPS]-1659907526508
GPR[ESUN]-1659907526508
GPR[SSUN]-1659907526508
80988634
GPR[ESUN]-1659907526680
GPR[SSUN]-1659907526680
1187751237
GPR[SPVATF]-1659907526946
GPR[EPVATF]-1659907528166
GPR[SPS]-1659907528166
[253289] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class NodeUtil {
    static final long MAX_POSITIVE_INTEGER_NUMBER = ((long) (java.lang.Math.pow(2, 53)));

    static final java.lang.String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";

    private static final java.util.Set<java.lang.String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList("Array", "Date", "Error", "Object", "RegExp", "XMLHttpRequest"));

    private NodeUtil() {
    }

    static com.google.javascript.rhino.jstype.TernaryValue getImpureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                return value.not();
            case com.google.javascript.rhino.Token.AND :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.and(rhs);
                }
            case com.google.javascript.rhino.Token.OR :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.or(rhs);
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.javascript.rhino.jstype.TernaryValue trueValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild().getNext());
                    com.google.javascript.rhino.jstype.TernaryValue falseValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    if (trueValue.equals(falseValue)) {
                        return trueValue;
                    } else {
                        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    }
                }
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.VOID :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            default :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
        }
    }

    static com.google.javascript.rhino.jstype.TernaryValue getPureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getString().length() > 0);
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getDouble() != 0);
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getLastChild()).not();
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.FALSE :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            case com.google.javascript.rhino.Token.VOID :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if ("undefined".equals(name) || "NaN".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                } else if ("Infinity".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.REGEXP :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
        }
        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
    }

    static java.lang.String getStringValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return n.getString();
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name)) {
                    return name;
                }
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(n.getDouble());
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.VOID :
                return "undefined";
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? "false" : "true";
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return com.google.javascript.jscomp.NodeUtil.arrayToString(n);
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "[object Object]";
        }
        return null;
    }

    static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    static java.lang.String getArrayElementStringValue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isNullOrUndefined(n) || n.isEmpty() ? "" : com.google.javascript.jscomp.NodeUtil.getStringValue(n);
    }

    static java.lang.String arrayToString(com.google.javascript.rhino.Node literal) {
        com.google.javascript.rhino.Node first = literal.getFirstChild();
        java.lang.StringBuilder result = new java.lang.StringBuilder();
        int nextSlot = 0;
        int nextSkipSlot = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            java.lang.String childValue = com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(n);
            if (childValue == null) {
                return null;
            }
            if (n != first) {
                result.append(',');
            }
            result.append(childValue);
            nextSlot++;
        }
        return result.toString();
    }

    static java.lang.Double getNumberValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
                return 1.0;
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
                return 0.0;
            case com.google.javascript.rhino.Token.NUMBER :
                return n.getDouble();
            case com.google.javascript.rhino.Token.VOID :
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return null;
                } else {
                    return java.lang.Double.NaN;
                }
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("undefined")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("NaN")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("Infinity")) {
                    return java.lang.Double.POSITIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NEG :
                if (((n.getChildCount() == 1) && n.getFirstChild().isName()) && n.getFirstChild().getString().equals("Infinity")) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? 0.0 : 1.0;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.jscomp.NodeUtil.getStringNumberValue(n.getString());
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                java.lang.String value = com.google.javascript.jscomp.NodeUtil.getStringValue(n);
                return value != null ? com.google.javascript.jscomp.NodeUtil.getStringNumberValue(value) : null;
        }
        return null;
    }

    static java.lang.Double getStringNumberValue(java.lang.String rawJsString) {
        if (rawJsString.contains("\u000b")) {
            return null;
        }
        java.lang.String s = com.google.javascript.jscomp.NodeUtil.trimJsWhiteSpace(rawJsString);
        if (s.length() == 0) {
            return 0.0;
        }
        if (((s.length() > 2) && (s.charAt(0) == '0')) && ((s.charAt(1) == 'x') || (s.charAt(1) == 'X'))) {
            try {
                return java.lang.Double.valueOf(java.lang.Integer.parseInt(s.substring(2), 16));
            } catch (java.lang.NumberFormatException e) {
                return java.lang.Double.NaN;
            }
        }
        if ((((s.length() > 3) && ((s.charAt(0) == '-') || (s.charAt(0) == '+'))) && (s.charAt(1) == '0')) && ((s.charAt(2) == 'x') || (s.charAt(2) == 'X'))) {
            return null;
        }
        if ((s.equals("infinity") || s.equals("-infinity")) || s.equals("+infinity")) {
            return null;
        }
        try {
            return java.lang.Double.parseDouble(s);
        } catch (java.lang.NumberFormatException e) {
            return java.lang.Double.NaN;
        }
    }

    static java.lang.String trimJsWhiteSpace(java.lang.String s) {
        int start = 0;
        int end = s.length();
        while ((end > 0) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(end - 1)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            end--;
        } 
        while ((start < end) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(start)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            start++;
        } 
        return s.substring(start, end);
    }

    static com.google.javascript.rhino.jstype.TernaryValue isStrWhiteSpaceChar(int c) {
        switch (c) {
            case '\u000b' :
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            case ' ' :
            case '\n' :
            case '\r' :
            case '\t' :
            case ' ' :
            case '\f' :
            case ' ' :
            case ' ' :
            case '﻿' :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            default :
                return java.lang.Character.getType(c) == java.lang.Character.SPACE_SEPARATOR ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    static java.lang.String getFunctionName(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        java.lang.String name = n.getFirstChild().getString();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return parent.getString();
            case com.google.javascript.rhino.Token.ASSIGN :
                return parent.getFirstChild().getQualifiedName();
            default :
                return (name != null) && (name.length() != 0) ? name : null;
        }
    }

    public static java.lang.String getNearestFunctionName(com.google.javascript.rhino.Node n) {
        java.lang.String name = com.google.javascript.jscomp.NodeUtil.getFunctionName(n);
        if (name != null) {
            return name;
        }
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SETTER_DEF :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return parent.getString();
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(parent);
        }
        return null;
    }

    static boolean isImmutableValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NEG :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                return ("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name);
        }
        return false;
    }

    public static boolean isSymmetricOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.MUL :
                return true;
        }
        return false;
    }

    public static boolean isRelationalOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
                return true;
        }
        return false;
    }

    public static int getInverseOperator(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.GT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.Token.LT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.Token.GE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.Token.LE :
                return com.google.javascript.rhino.Token.GE;
        }
        return com.google.javascript.rhino.Token.ERROR;
    }

    static boolean isLiteralValue(com.google.javascript.rhino.Node n, boolean includeFunctions) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ARRAYLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if ((!child.isEmpty()) && (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions))) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.REGEXP :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child.getFirstChild(), includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return includeFunctions && (!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n));
            default :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n);
        }
    }

    static boolean isValidDefineValue(com.google.javascript.rhino.Node val, java.util.Set<java.lang.String> defines) {
        switch (val.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.URSH :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines) && com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getLastChild(), defines);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.POS :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines);
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                if (val.isQualifiedName()) {
                    return defines.contains(val.getQualifiedName());
                }
        }
        return false;
    }

    static boolean isEmptyBlock(com.google.javascript.rhino.Node block) {
        if (!block.isBlock()) {
            return false;
        }
        for (com.google.javascript.rhino.Node n = block.getFirstChild(); n != null; n = n.getNext()) {
            if (!n.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    static boolean isSimpleOperator(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());
    }

    static boolean isSimpleOperatorType(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.COMMA :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.URSH :
                return true;
            default :
                return false;
        }
    }

    public static com.google.javascript.rhino.Node newExpr(com.google.javascript.rhino.Node child) {
        return com.google.javascript.rhino.IR.exprResult(child).srcref(child);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(n, null);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, true, compiler);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, null);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, false, compiler);
    }

    private static boolean checkForStateChangeHelper(com.google.javascript.rhino.Node n, boolean checkForNewObjects, com.google.javascript.jscomp.AbstractCompiler compiler) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.PARAM_LIST :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.EMPTY :
                break;
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (checkForNewObjects) {
                    return true;
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c.getFirstChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                }
                return false;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.REGEXP :
                if (checkForNewObjects) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.NAME :
                if (n.getFirstChild() != null) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                return checkForNewObjects || (!com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
            case com.google.javascript.rhino.Token.NEW :
                if (checkForNewObjects) {
                    return true;
                }
                if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n)) {
                    break;
                }
                return true;
            case com.google.javascript.rhino.Token.CALL :
                if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler)) {
                    break;
                }
                return true;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType())) {
                    break;
                }
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    com.google.javascript.rhino.Node assignTarget = n.getFirstChild();
                    if (assignTarget.isName()) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getFirstChild(), checkForNewObjects, compiler) || com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getLastChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.isGet(assignTarget)) {
                        com.google.javascript.rhino.Node current = assignTarget.getFirstChild();
                        if (com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(current)) {
                            return false;
                        }
                        while (com.google.javascript.jscomp.NodeUtil.isGet(current)) {
                            current = current.getFirstChild();
                        } 
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(current, true);
                    } else {
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(assignTarget, true);
                    }
                }
                return true;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c, checkForNewObjects, compiler)) {
                return true;
            }
        }
        return false;
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(callNode, null);
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isNew()) {
            throw new java.lang.IllegalStateException("Expected NEW node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName() && com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
            return false;
        }
        return true;
    }

    private static final java.util.Set<java.lang.String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("Object", "Array", "String", "Number", "Boolean", "RegExp", "Error");

    private static final java.util.Set<java.lang.String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("toString", "valueOf");

    private static final java.util.Set<java.lang.String> REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("test", "exec");

    private static final java.util.Set<java.lang.String> STRING_REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("match", "replace", "search", "split");

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(callNode, null);
    }

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode, @javax.annotation.Nullable
    com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isCall()) {
            throw new java.lang.IllegalStateException("Expected CALL node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
                return false;
            }
        } else if (nameNode.isGetProp()) {
            if (callNode.hasOneChild() && com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
                return false;
            }
            if (callNode.isOnlyModifiesThisCall() && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
                return false;
            }
            if (nameNode.getFirstChild().isName()) {
                if ("Math.floor".equals(nameNode.getQualifiedName())) {
                    return false;
                }
            }
            if ((compiler != null) && (!compiler.hasRegExpGlobalReferences())) {
                if (nameNode.getFirstChild().isRegExp() && com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    return false;
                } else if (nameNode.getFirstChild().isString() && com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    com.google.javascript.rhino.Node param = nameNode.getNext();
                    if ((param != null) && (param.isString() || param.isRegExp())) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static boolean callHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isCall());
        return (n.getSideEffectFlags() & com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS) > 0;
    }

    static boolean newHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isNew());
        return n.isOnlyModifiesThisCall();
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n, null);
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
            return true;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.CALL :
                return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NAME :
                return n.hasChildren();
            default :
                return false;
        }
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n) {
        java.util.Set<java.lang.String> emptySet = java.util.Collections.emptySet();
        return com.google.javascript.jscomp.NodeUtil.canBeSideEffected(n, emptySet);
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n, java.util.Set<java.lang.String> knownConstants) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.NEW :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return (!com.google.javascript.jscomp.NodeUtil.isConstantName(n)) && (!knownConstants.contains(n.getString()));
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(c, knownConstants)) {
                return true;
            }
        }
        return false;
    }

    static int precedence(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.COMMA :
                return 0;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN :
                return 1;
            case com.google.javascript.rhino.Token.HOOK :
                return 2;
            case com.google.javascript.rhino.Token.OR :
                return 3;
            case com.google.javascript.rhino.Token.AND :
                return 4;
            case com.google.javascript.rhino.Token.BITOR :
                return 5;
            case com.google.javascript.rhino.Token.BITXOR :
                return 6;
            case com.google.javascript.rhino.Token.BITAND :
                return 7;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return 8;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.IN :
                return 9;
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return 10;
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
                return 11;
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
                return 12;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                return 13;
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
                return 15;
            default :
                throw new java.lang.Error(((("Unknown precedence for " + com.google.javascript.rhino.Token.name(type)) + " (type ") + type) + ")");
        }
    }

    static boolean valueCheck(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.valueCheck(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.valueCheck(n.getFirstChild(), p) && com.google.javascript.jscomp.NodeUtil.valueCheck(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.valueCheck(n.getFirstChild().getNext(), p) && com.google.javascript.jscomp.NodeUtil.valueCheck(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static class NumbericResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isNumericResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate NUMBERIC_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate();

    static boolean isNumericResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.valueCheck(n, com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);
    }

    static boolean isNumericResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                return (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getFirstChild())) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getLastChild()));
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.NUMBER :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("NaN")) {
                    return true;
                }
                if (name.equals("Infinity")) {
                    return true;
                }
                return false;
            default :
                return false;
        }
    }

    static class BooleanResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isBooleanResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate BOOLEAN_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate();

    static boolean isBooleanResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.valueCheck(n, com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);
    }

    static boolean isBooleanResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.DELPROP :
                return true;
            default :
                return false;
        }
    }

    static boolean isUndefined(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.VOID :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return n.getString().equals("undefined");
        }
        return false;
    }

    static boolean isNullOrUndefined(com.google.javascript.rhino.Node n) {
        return n.isNull() || com.google.javascript.jscomp.NodeUtil.isUndefined(n);
    }

    static class MayBeStringResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate MAY_BE_STRING_PREDICATE = new com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate();

    static boolean mayBeString(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayBeString(n, true);
    }

    static boolean mayBeString(com.google.javascript.rhino.Node n, boolean recurse) {
        if (recurse) {
            return com.google.javascript.jscomp.NodeUtil.valueCheck(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);
        } else {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static boolean mayBeStringHelper(com.google.javascript.rhino.Node n) {
        return (((!com.google.javascript.jscomp.NodeUtil.isNumericResult(n)) && (!com.google.javascript.jscomp.NodeUtil.isBooleanResult(n))) && (!com.google.javascript.jscomp.NodeUtil.isUndefined(n))) && (!n.isNull());
    }

    static boolean isAssociative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isCommutative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return true;
        }
        return false;
    }

    static int getOpFromAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.MOD;
        }
        throw new java.lang.IllegalArgumentException("Not an assignment op:" + n);
    }

    static boolean containsFunction(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.FUNCTION);
    }

    static boolean referencesThis(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node start = (n.isFunction()) ? n.getLastChild() : n;
        return com.google.javascript.jscomp.NodeUtil.containsType(start, com.google.javascript.rhino.Token.THIS, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isGet(com.google.javascript.rhino.Node n) {
        return n.isGetProp() || n.isGetElem();
    }

    static boolean isVarDeclaration(com.google.javascript.rhino.Node n) {
        return n.isName() && n.getParent().isVar();
    }

    static com.google.javascript.rhino.Node getAssignedValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isName());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent.isVar()) {
            return n.getFirstChild();
        } else if (parent.isAssign() && (parent.getFirstChild() == n)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(101).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectInput("com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(101).collectionEnds();
            }
            if (runtimeAngelicValue)
                return n.getNext();

        } else {
            return null;
        }
    }

    static boolean isExprAssign(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isAssign();
    }

    static boolean isExprCall(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isCall();
    }

    static boolean isForIn(com.google.javascript.rhino.Node n) {
        return n.isFor() && (n.getChildCount() == 3);
    }

    static boolean isLoopStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getLoopCodeBlock(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getFirstChild();
            default :
                return null;
        }
    }

    static boolean isWithinLoop(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node parent : n.getAncestors()) {
            if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(parent)) {
                return true;
            }
            if (parent.isFunction()) {
                break;
            }
        }
        return false;
    }

    static boolean isControlStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                return false;
        }
    }

    static boolean isControlStructureCodeBlock(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.WITH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.DO :
                return parent.getFirstChild() == n;
            case com.google.javascript.rhino.Token.IF :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.TRY :
                return (parent.getFirstChild() == n) || (parent.getLastChild() == n);
            case com.google.javascript.rhino.Token.CATCH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructure(parent));
                return false;
        }
    }

    static com.google.javascript.rhino.Node getConditionExpression(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.FOR :
                switch (n.getChildCount()) {
                    case 3 :
                        return null;
                    case 4 :
                        return n.getFirstChild().getNext();
                }
                throw new java.lang.IllegalArgumentException("malformed 'for' statement " + n);
            case com.google.javascript.rhino.Token.CASE :
                return null;
        }
        throw new java.lang.IllegalArgumentException(n + " does not have a condition.");
    }

    static boolean isStatementBlock(com.google.javascript.rhino.Node n) {
        return n.isScript() || n.isBlock();
    }

    static boolean isStatement(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isStatementParent(n.getParent());
    }

    static boolean isStatementParent(com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(parent != null);
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
                return true;
            default :
                return false;
        }
    }

    static boolean isSwitchCase(com.google.javascript.rhino.Node n) {
        return n.isCase() || n.isDefaultCase();
    }

    static boolean isReferenceName(com.google.javascript.rhino.Node n) {
        return n.isName() && (!n.getString().isEmpty());
    }

    static boolean isTryFinallyNode(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {
        return (parent.isTry() && (parent.getChildCount() == 3)) && (child == parent.getLastChild());
    }

    static boolean isTryCatchNodeContainer(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        return parent.isTry() && (parent.getFirstChild().getNext() == n);
    }

    static void removeChild(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, node)) {
            if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent))) {
                parent.removeChild(node);
            } else {
                node.detachChildren();
            }
        } else if (node.isCatch()) {
            com.google.javascript.rhino.Node tryNode = node.getParent().getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachFromParent();
        } else if (com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(node)) {
            com.google.javascript.rhino.Node tryNode = node.getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachChildren();
        } else if (node.isBlock()) {
            node.detachChildren();
        } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent) || com.google.javascript.jscomp.NodeUtil.isSwitchCase(node)) {
            parent.removeChild(node);
        } else if (parent.isVar()) {
            if (parent.hasMoreThanOneChild()) {
                parent.removeChild(node);
            } else {
                parent.removeChild(node);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
            }
        } else if (parent.isLabel() && (node == parent.getLastChild())) {
            parent.removeChild(node);
            com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
        } else if (parent.isFor() && (parent.getChildCount() == 4)) {
            parent.replaceChild(node, com.google.javascript.rhino.IR.empty());
        } else {
            throw new java.lang.IllegalStateException((("Invalid attempt to remove node: " + node.toString()) + " of ") + parent.toString());
        }
    }

    static void maybeAddFinally(com.google.javascript.rhino.Node tryNode) {
        com.google.common.base.Preconditions.checkState(tryNode.isTry());
        if (!com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode)) {
            tryNode.addChildrenToBack(com.google.javascript.rhino.IR.block().srcref(tryNode));
        }
    }

    static boolean tryMergeBlock(com.google.javascript.rhino.Node block) {
        com.google.common.base.Preconditions.checkState(block.isBlock());
        com.google.javascript.rhino.Node parent = block.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)) {
            com.google.javascript.rhino.Node previous = block;
            while (block.hasChildren()) {
                com.google.javascript.rhino.Node child = block.removeFirstChild();
                parent.addChildAfter(child, previous);
                previous = child;
            } 
            parent.removeChild(block);
            return true;
        } else {
            return false;
        }
    }

    static boolean isCallOrNew(com.google.javascript.rhino.Node node) {
        return node.isCall() || node.isNew();
    }

    static com.google.javascript.rhino.Node getFunctionBody(com.google.javascript.rhino.Node fn) {
        com.google.common.base.Preconditions.checkArgument(fn.isFunction());
        return fn.getLastChild();
    }

    static boolean containsCall(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.CALL);
    }

    static boolean isFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return n.isFunction() && com.google.javascript.jscomp.NodeUtil.isStatement(n);
    }

    static boolean isHoistedFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) && (n.getParent().isScript() || n.getParent().getParent().isFunction());
    }

    static boolean isFunctionExpression(com.google.javascript.rhino.Node n) {
        return n.isFunction() && (!com.google.javascript.jscomp.NodeUtil.isStatement(n));
    }

    static boolean isEmptyFunctionExpression(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(node) && com.google.javascript.jscomp.NodeUtil.isEmptyBlock(node.getLastChild());
    }

    static boolean isVarArgsFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkArgument(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(function.getLastChild(), "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isObjectCallMethod(com.google.javascript.rhino.Node callNode, java.lang.String methodName) {
        if (callNode.isCall()) {
            com.google.javascript.rhino.Node functionIndentifyingExpression = callNode.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGet(functionIndentifyingExpression)) {
                com.google.javascript.rhino.Node last = functionIndentifyingExpression.getLastChild();
                if ((last != null) && last.isString()) {
                    java.lang.String propName = last.getString();
                    return propName.equals(methodName);
                }
            }
        }
        return false;
    }

    static boolean isFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "call");
    }

    static boolean isFunctionObjectApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "apply");
    }

    static boolean isFunctionObjectCallOrApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode) || com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode);
    }

    static boolean isSimpleFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
            if (callNode.getFirstChild().getFirstChild().isName()) {
                return true;
            }
        }
        return false;
    }

    static boolean isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        return (parent.isAssign() && (parent.getFirstChild() == n)) || parent.isVar();
    }

    static boolean isLValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument((n.isName() || n.isGetProp()) || n.isGetElem());
        com.google.javascript.rhino.Node parent = n.getParent();
        return (((((((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || (com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n))) || parent.isVar()) || (parent.isFunction() && (parent.getFirstChild() == n))) || parent.isDec()) || parent.isInc()) || parent.isParamList()) || parent.isCatch();
    }

    static boolean isObjectLitKey(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String getObjectLitKeyName(com.google.javascript.rhino.Node key) {
        switch (key.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return key.getString();
        }
        throw new java.lang.IllegalStateException("Unexpected node type: " + key);
    }

    static com.google.javascript.rhino.jstype.JSType getObjectLitKeyTypeFromValueType(com.google.javascript.rhino.Node key, com.google.javascript.rhino.jstype.JSType valueType) {
        if (valueType != null) {
            switch (key.getType()) {
                case com.google.javascript.rhino.Token.GETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        valueType = fntype.getReturnType();
                    } else {
                        return null;
                    }
                    break;
                case com.google.javascript.rhino.Token.SETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        com.google.javascript.rhino.Node param = fntype.getParametersNode().getFirstChild();
                        valueType = param.getJSType();
                    } else {
                        return null;
                    }
                    break;
            }
        }
        return valueType;
    }

    static boolean isGetOrSetKey(com.google.javascript.rhino.Node node) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String opToStr(int operator) {
        switch (operator) {
            case com.google.javascript.rhino.Token.BITOR :
                return "|";
            case com.google.javascript.rhino.Token.OR :
                return "||";
            case com.google.javascript.rhino.Token.BITXOR :
                return "^";
            case com.google.javascript.rhino.Token.AND :
                return "&&";
            case com.google.javascript.rhino.Token.BITAND :
                return "&";
            case com.google.javascript.rhino.Token.SHEQ :
                return "===";
            case com.google.javascript.rhino.Token.EQ :
                return "==";
            case com.google.javascript.rhino.Token.NOT :
                return "!";
            case com.google.javascript.rhino.Token.NE :
                return "!=";
            case com.google.javascript.rhino.Token.SHNE :
                return "!==";
            case com.google.javascript.rhino.Token.LSH :
                return "<<";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.LE :
                return "<=";
            case com.google.javascript.rhino.Token.LT :
                return "<";
            case com.google.javascript.rhino.Token.URSH :
                return ">>>";
            case com.google.javascript.rhino.Token.RSH :
                return ">>";
            case com.google.javascript.rhino.Token.GE :
                return ">=";
            case com.google.javascript.rhino.Token.GT :
                return ">";
            case com.google.javascript.rhino.Token.MUL :
                return "*";
            case com.google.javascript.rhino.Token.DIV :
                return "/";
            case com.google.javascript.rhino.Token.MOD :
                return "%";
            case com.google.javascript.rhino.Token.BITNOT :
                return "~";
            case com.google.javascript.rhino.Token.ADD :
                return "+";
            case com.google.javascript.rhino.Token.SUB :
                return "-";
            case com.google.javascript.rhino.Token.POS :
                return "+";
            case com.google.javascript.rhino.Token.NEG :
                return "-";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "=";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "|=";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "^=";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "&=";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "<<=";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return ">>=";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return ">>>=";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "+=";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "-=";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "*=";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "/=";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "%=";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            default :
                return null;
        }
    }

    static java.lang.String opToStrNoFail(int operator) {
        java.lang.String res = com.google.javascript.jscomp.NodeUtil.opToStr(operator);
        if (res == null) {
            throw new java.lang.Error((("Unknown op " + operator) + ": ") + com.google.javascript.rhino.Token.name(operator));
        }
        return res;
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type) {
        return com.google.javascript.jscomp.NodeUtil.containsType(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static void redeclareVarsInsideBranch(com.google.javascript.rhino.Node branch) {
        java.util.Collection<com.google.javascript.rhino.Node> vars = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(branch);
        if (vars.isEmpty()) {
            return;
        }
        com.google.javascript.rhino.Node parent = com.google.javascript.jscomp.NodeUtil.getAddingRoot(branch);
        for (com.google.javascript.rhino.Node nameNode : vars) {
            com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(com.google.javascript.rhino.IR.name(nameNode.getString()).srcref(nameNode)).srcref(nameNode);
            com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(nameNode, var.getFirstChild());
            parent.addChildToFront(var);
        }
    }

    static void copyNameAnnotations(com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node destination) {
        if (source.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
            destination.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
    }

    private static com.google.javascript.rhino.Node getAddingRoot(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node addingRoot = null;
        com.google.javascript.rhino.Node ancestor = n;
        while (null != (ancestor = ancestor.getParent())) {
            int type = ancestor.getType();
            if (type == com.google.javascript.rhino.Token.SCRIPT) {
                addingRoot = ancestor;
                break;
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                addingRoot = ancestor.getLastChild();
                break;
            }
        } 
        com.google.common.base.Preconditions.checkState(addingRoot.isBlock() || addingRoot.isScript());
        com.google.common.base.Preconditions.checkState((addingRoot.getFirstChild() == null) || (!addingRoot.getFirstChild().isScript()));
        return addingRoot;
    }

    public static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        int endPos = name.indexOf('.');
        if (endPos == (-1)) {
            return com.google.javascript.jscomp.NodeUtil.newName(convention, name);
        }
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newName(convention, name.substring(0, endPos));
        int startPos;
        do {
            startPos = endPos + 1;
            endPos = name.indexOf('.', startPos);
            java.lang.String part = (endPos == (-1)) ? name.substring(startPos) : name.substring(startPos, endPos);
            com.google.javascript.rhino.Node propNode = com.google.javascript.rhino.IR.string(part);
            if (convention.isConstantKey(part)) {
                propNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            node = com.google.javascript.rhino.IR.getprop(node, propNode);
        } while (endPos != (-1) );
        return node;
    }

    static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(convention, name);
        com.google.javascript.jscomp.NodeUtil.setDebugInformation(node, basisNode, originalName);
        return node;
    }

    public static com.google.javascript.rhino.Node getRootOfQualifiedName(com.google.javascript.rhino.Node qName) {
        for (com.google.javascript.rhino.Node current = qName; true; current = current.getFirstChild()) {
            if (current.isName() || current.isThis()) {
                return current;
            }
            com.google.common.base.Preconditions.checkState(current.isGetProp());
        }
    }

    static void setDebugInformation(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        node.copyInformationFromForTree(basisNode);
        node.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
    }

    private static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(name);
        if (convention.isConstant(name)) {
            nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
        return nameNode;
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node srcref) {
        return com.google.javascript.jscomp.NodeUtil.newName(convention, name).srcref(srcref);
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(convention, name, basisNode);
        nameNode.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
        return nameNode;
    }

    static boolean isLatin(java.lang.String s) {
        char LARGEST_BASIC_LATIN = 0x7f;
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if (c > LARGEST_BASIC_LATIN) {
                return false;
            }
        }
        return true;
    }

    public static boolean isValidSimpleName(java.lang.String name) {
        return (com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && (!com.google.javascript.rhino.TokenStream.isKeyword(name))) && com.google.javascript.jscomp.NodeUtil.isLatin(name);
    }

    public static boolean isValidQualifiedName(java.lang.String name) {
        if (name.endsWith(".") || name.startsWith(".")) {
            return false;
        }
        java.lang.String[] parts = name.split("\\.");
        for (java.lang.String part : parts) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidSimpleName(part)) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidPropertyName(java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isValidSimpleName(name);
    }

    private static class VarCollector implements com.google.javascript.jscomp.NodeUtil.Visitor {
        final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> vars = com.google.common.collect.Maps.newLinkedHashMap();

        @java.lang.Override
        public void visit(com.google.javascript.rhino.Node n) {
            if (n.isName()) {
                com.google.javascript.rhino.Node parent = n.getParent();
                if ((parent != null) && parent.isVar()) {
                    java.lang.String name = n.getString();
                    if (!vars.containsKey(name)) {
                        vars.put(name, n);
                    }
                }
            }
        }
    }

    public static java.util.Collection<com.google.javascript.rhino.Node> getVarsDeclaredInBranch(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeUtil.VarCollector collector = new com.google.javascript.jscomp.NodeUtil.VarCollector();
        com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, collector, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        return collector.vars.values();
    }

    static boolean isPrototypePropertyDeclaration(com.google.javascript.rhino.Node n) {
        if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(n.getFirstChild().getFirstChild());
    }

    static boolean isPrototypeProperty(com.google.javascript.rhino.Node n) {
        java.lang.String lhsString = n.getQualifiedName();
        if (lhsString == null) {
            return false;
        }
        int prototypeIdx = lhsString.indexOf(".prototype.");
        return prototypeIdx != (-1);
    }

    static com.google.javascript.rhino.Node getPrototypeClassName(com.google.javascript.rhino.Node qName) {
        com.google.javascript.rhino.Node cur = qName;
        while (cur.isGetProp()) {
            if (cur.getLastChild().getString().equals("prototype")) {
                return cur.getFirstChild();
            } else {
                cur = cur.getFirstChild();
            }
        } 
        return null;
    }

    static java.lang.String getPrototypePropertyName(com.google.javascript.rhino.Node qName) {
        java.lang.String qNameStr = qName.getQualifiedName();
        int prototypeIdx = qNameStr.lastIndexOf(".prototype.");
        int memberIndex = (prototypeIdx + ".prototype".length()) + 1;
        return qNameStr.substring(memberIndex);
    }

    static com.google.javascript.rhino.Node newUndefinedNode(com.google.javascript.rhino.Node srcReferenceNode) {
        com.google.javascript.rhino.Node node = com.google.javascript.rhino.IR.voidNode(com.google.javascript.rhino.IR.number(0));
        if (srcReferenceNode != null) {
            node.copyInformationFromForTree(srcReferenceNode);
        }
        return node;
    }

    static com.google.javascript.rhino.Node newVarNode(java.lang.String name, com.google.javascript.rhino.Node value) {
        com.google.javascript.rhino.Node nodeName = com.google.javascript.rhino.IR.name(name);
        if (value != null) {
            com.google.common.base.Preconditions.checkState(value.getNext() == null);
            nodeName.addChildToBack(value);
            nodeName.srcref(value);
        }
        com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(nodeName).srcref(nodeName);
        return var;
    }

    private static class MatchNameNode implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final java.lang.String name;

        MatchNameNode(java.lang.String name) {
            this.name = name;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.isName() && n.getString().equals(name);
        }
    }

    static class MatchNodeType implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final int type;

        MatchNodeType(int type) {
            this.type = type;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.getType() == type;
        }
    }

    static class MatchDeclaration implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) || n.isVar();
        }
    }

    private static class MatchNotFunction implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return !n.isFunction();
        }
    }

    static final com.google.common.base.Predicate<com.google.javascript.rhino.Node> MATCH_NOT_FUNCTION = new com.google.javascript.jscomp.NodeUtil.MatchNotFunction();

    static class MatchShallowStatement implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return n.isBlock() || ((!n.isFunction()) && (((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)));
        }
    }

    static int getNodeTypeReferenceCount(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(node, name, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static int getNameReferenceCount(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static boolean has(com.google.javascript.rhino.Node node, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (pred.apply(node)) {
            return true;
        }
        if (!traverseChildrenPred.apply(node)) {
            return false;
        }
        for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.has(c, pred, traverseChildrenPred)) {
                return true;
            }
        }
        return false;
    }

    static int getCount(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        int total = 0;
        if (pred.apply(n)) {
            total++;
        }
        if (traverseChildrenPred.apply(n)) {
            for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                total += com.google.javascript.jscomp.NodeUtil.getCount(c, pred, traverseChildrenPred);
            }
        }
        return total;
    }

    static interface Visitor {
        public abstract void visit(com.google.javascript.rhino.Node node);
    }

    static void visitPreOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor vistor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        vistor.visit(node);
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPreOrder(c, vistor, traverseChildrenPred);
            }
        }
    }

    static void visitPostOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor vistor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPostOrder(c, vistor, traverseChildrenPred);
            }
        }
        vistor.visit(node);
    }

    static boolean hasFinally(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getChildCount() == 3;
    }

    static com.google.javascript.rhino.Node getCatchBlock(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getFirstChild().getNext();
    }

    static boolean hasCatchHandler(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isBlock());
        return n.hasChildren() && n.getFirstChild().isCatch();
    }

    public static com.google.javascript.rhino.Node getFunctionParameters(com.google.javascript.rhino.Node fnNode) {
        com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
        return fnNode.getFirstChild().getNext();
    }

    static boolean isConstantName(com.google.javascript.rhino.Node node) {
        return node.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
    }

    static boolean isConstantByConvention(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        java.lang.String name = node.getString();
        if (parent.isGetProp() && (node == parent.getLastChild())) {
            return convention.isConstantKey(name);
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(node, parent)) {
            return convention.isConstantKey(name);
        } else {
            return convention.isConstant(name);
        }
    }

    public static com.google.javascript.rhino.JSDocInfo getFunctionJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.JSDocInfo fnInfo = n.getJSDocInfo();
        if ((fnInfo == null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n)) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isAssign()) {
                fnInfo = parent.getJSDocInfo();
            } else if (parent.isName()) {
                fnInfo = parent.getParent().getJSDocInfo();
            }
        }
        return fnInfo;
    }

    public static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getSourceFileName();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.StaticSourceFile sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getStaticSourceFile();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.InputId getInputId(com.google.javascript.rhino.Node n) {
        while ((n != null) && (!n.isScript())) {
            n = n.getParent();
        } 
        return (n != null) && n.isScript() ? n.getInputId() : null;
    }

    static com.google.javascript.rhino.Node newCallNode(com.google.javascript.rhino.Node callTarget, com.google.javascript.rhino.Node... parameters) {
        boolean isFreeCall = !com.google.javascript.jscomp.NodeUtil.isGet(callTarget);
        com.google.javascript.rhino.Node call = com.google.javascript.rhino.IR.call(callTarget);
        call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, isFreeCall);
        for (com.google.javascript.rhino.Node parameter : parameters) {
            call.addChildToBack(parameter);
        }
        return call;
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value) {
        return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysFalse());
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value, com.google.common.base.Predicate<com.google.javascript.rhino.Node> locals) {
        switch (value.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals));
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                if (value.getBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP)) {
                    return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.THIS :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.NAME :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.CALL :
                return (com.google.javascript.jscomp.NodeUtil.callHasLocalResult(value) || com.google.javascript.jscomp.NodeUtil.isToStringMethodCall(value)) || locals.apply(value);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.newHasLocalResult(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return true;
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.IN :
                return true;
            default :
                if ((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(value) || com.google.javascript.jscomp.NodeUtil.isSimpleOperator(value)) || com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return true;
                }
                throw new java.lang.IllegalStateException((("Unexpected expression node" + value) + "\n parent:") + value.getParent());
        }
    }

    private static com.google.javascript.rhino.Node getNthSibling(com.google.javascript.rhino.Node first, int index) {
        com.google.javascript.rhino.Node sibling = first;
        while ((index != 0) && (sibling != null)) {
            sibling = sibling.getNext();
            index--;
        } 
        return sibling;
    }

    static com.google.javascript.rhino.Node getArgumentForFunction(com.google.javascript.rhino.Node function, int index) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
    }

    static com.google.javascript.rhino.Node getArgumentForCallOrNew(com.google.javascript.rhino.Node call, int index) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isCallOrNew(call));
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(call.getFirstChild().getNext(), index);
    }

    private static boolean isToStringMethodCall(com.google.javascript.rhino.Node call) {
        com.google.javascript.rhino.Node getNode = call.getFirstChild();
        if (com.google.javascript.jscomp.NodeUtil.isGet(getNode)) {
            com.google.javascript.rhino.Node propNode = getNode.getLastChild();
            return propNode.isString() && "toString".equals(propNode.getString());
        }
        return false;
    }

    static com.google.javascript.rhino.JSDocInfo getBestJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info == null) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent == null) {
                return null;
            }
            if (parent.isName()) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            } else if (parent.isAssign()) {
                return parent.getJSDocInfo();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent.getJSDocInfo();
            } else if (parent.isFunction()) {
                return parent.getJSDocInfo();
            } else if (parent.isVar() && parent.hasOneChild()) {
                return parent.getJSDocInfo();
            } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            }
        }
        return info;
    }

    static com.google.javascript.rhino.Node getBestLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n);
        if (isFunctionDeclaration) {
            return n.getFirstChild();
        } else if (parent.isName()) {
            return parent;
        } else if (parent.isAssign()) {
            return parent.getFirstChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
            return parent;
        } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(parent);
        }
        return null;
    }

    static com.google.javascript.rhino.Node getBestLValueOwner(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
        } else if (com.google.javascript.jscomp.NodeUtil.isGet(lValue)) {
            return lValue.getFirstChild();
        }
        return null;
    }

    static java.lang.String getBestLValueName(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            com.google.javascript.rhino.Node owner = com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
            if (owner != null) {
                java.lang.String ownerName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(owner);
                if (ownerName != null) {
                    return (ownerName + ".") + com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(lValue);
                }
            }
            return null;
        }
        return lValue.getQualifiedName();
    }

    static boolean isExpressionResultUsed(com.google.javascript.rhino.Node expr) {
        com.google.javascript.rhino.Node parent = expr.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return false;
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return expr == parent.getFirstChild() ? true : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.COMMA :
                return expr == parent.getFirstChild() ? false : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent.getChildAtIndex(1) == expr;
                }
                break;
        }
        return true;
    }

    static boolean isExecutedExactlyOnce(com.google.javascript.rhino.Node n) {
        inspect : do {
            com.google.javascript.rhino.Node parent = n.getParent();
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.FOR :
                    if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                        if (parent.getChildAtIndex(1) != n) {
                            return false;
                        }
                    } else if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.DO :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if ((!com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) || (parent.getLastChild() != n)) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                    return false;
                case com.google.javascript.rhino.Token.SCRIPT :
                case com.google.javascript.rhino.Token.FUNCTION :
                    break inspect;
            }
        } while ((n = n.getParent()) != null );
        return true;
    }

    static com.google.javascript.rhino.Node booleanNode(boolean value) {
        return value ? com.google.javascript.rhino.IR.trueNode() : com.google.javascript.rhino.IR.falseNode();
    }

    static com.google.javascript.rhino.Node numberNode(double value, com.google.javascript.rhino.Node srcref) {
        com.google.javascript.rhino.Node result;
        if (java.lang.Double.isNaN(value)) {
            result = com.google.javascript.rhino.IR.name("NaN");
        } else if (value == java.lang.Double.POSITIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.name("Infinity");
        } else if (value == java.lang.Double.NEGATIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.neg(com.google.javascript.rhino.IR.name("Infinity"));
        } else {
            result = com.google.javascript.rhino.IR.number(value);
        }
        if (srcref != null) {
            result.srcrefTree(srcref);
        }
        return result;
    }
}
[253290] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659907528823
GPR[SSUN]-1659907528823
80988634
GPR[ESUN]-1659907529000
GPR[SSUN]-1659907529000
2433571
GPR[SPVATF]-1659907529223
GPR[EPVATF]-1659907530484
GPR[SPS]-1659907530484
[255820] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:994.
GPR[EPS]-1659907531353
GPR[ESUN]-1659907531353
GPR[SSUN]-1659907531353
2433571
GPR[SPVATF]-1659907531580
GPR[EPVATF]-1659907532850
GPR[SPS]-1659907532850
[258808] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:993.
GPR[EPS]-1659907534341
GPR[ESUN]-1659907534341
GPR[SSUN]-1659907534341
2433571
GPR[SPVATF]-1659907534587
GPR[EPVATF]-1659907536060
GPR[SPS]-1659907536060
[261125] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(104).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            if (com.google.javascript.rhino.Node.this.last!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.parent!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.next!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.first!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(104).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            value = x.toString();

                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[261125] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659907536658
GPR[SSUN]-1659907536658
2433571
GPR[SPVATF]-1659907536885
GPR[EPVATF]-1659907537960
GPR[SPS]-1659907537960
[263039] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(105).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(105).collectionEnds();
                }
                if (runtimeAngelicValue)
                    switch (type) {
                        default :
                            value = x.toString();
                            break;
                    }

                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            return getString();
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[263040] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659907538573
GPR[SSUN]-1659907538573
2433571
GPR[SPVATF]-1659907538803
GPR[EPVATF]-1659907539853
GPR[SPS]-1659907539853
[265160] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:986.
GPR[EPS]-1659907540694
GPR[ESUN]-1659907540694
GPR[SSUN]-1659907540694
2433571
GPR[SPVATF]-1659907540920
GPR[EPVATF]-1659907541962
GPR[SPS]-1659907541962
[267216] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:985.
GPR[EPS]-1659907542749
GPR[ESUN]-1659907542749
GPR[SSUN]-1659907542750
2433571
GPR[SPVATF]-1659907542980
GPR[EPVATF]-1659907544091
GPR[SPS]-1659907544091
[269367] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:984.
GPR[EPS]-1659907544900
GPR[ESUN]-1659907544900
GPR[SSUN]-1659907544900
2433571
GPR[ESUN]-1659907545130
GPR[SSUN]-1659907545130
2433571
GPR[ESUN]-1659907545352
GPR[SSUN]-1659907545352
2433571
GPR[SPVATF]-1659907545580
GPR[EPVATF]-1659907546695
GPR[SPS]-1659907546695
[271931] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:975.
GPR[EPS]-1659907547464
GPR[ESUN]-1659907547464
GPR[SSUN]-1659907547464
2433571
GPR[SPVATF]-1659907547695
GPR[EPVATF]-1659907548792
GPR[SPS]-1659907548792
[274039] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:974.
GPR[EPS]-1659907549572
GPR[ESUN]-1659907549573
GPR[SSUN]-1659907549573
2433571
GPR[SPVATF]-1659907549835
GPR[EPVATF]-1659907550923
GPR[SPS]-1659907550923
[276146] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:887.
GPR[EPS]-1659907551679
GPR[ESUN]-1659907551679
GPR[SSUN]-1659907551679
2433571
GPR[SPVATF]-1659907551918
GPR[EPVATF]-1659907553037
GPR[SPS]-1659907553037
[278294] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:886.
GPR[EPS]-1659907553827
GPR[ESUN]-1659907553827
GPR[SSUN]-1659907553827
2433571
GPR[SPVATF]-1659907554108
GPR[EPVATF]-1659907555276
GPR[SPS]-1659907555276
[280532] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:881.
GPR[EPS]-1659907556065
GPR[ESUN]-1659907556065
GPR[SSUN]-1659907556065
2433571
GPR[ESUN]-1659907556294
GPR[SSUN]-1659907556294
2433571
GPR[ESUN]-1659907556518
GPR[SSUN]-1659907556518
2433571
GPR[ESUN]-1659907556742
GPR[SSUN]-1659907556742
881600600
GPR[ESUN]-1659907556936
GPR[SSUN]-1659907556936
-1147408099
GPR[ESUN]-1659907557158
GPR[SSUN]-1659907557158
-1147408099
GPR[ESUN]-1659907557380
GPR[SSUN]-1659907557380
-1147408099
GPR[SPVATF]-1659907557655
GPR[EPVATF]-1659907558828
GPR[SPS]-1659907558828
[284004] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:185.
GPR[EPS]-1659907559537
GPR[SPVATF]-1659907559537
GPR[EPVATF]-1659907560811
GPR[SPS]-1659907560811
[285998] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:185.
GPR[EPS]-1659907561531
GPR[ESUN]-1659907561531
GPR[SSUN]-1659907561531
-1147408099
GPR[SPVATF]-1659907561755
GPR[EPVATF]-1659907562997
GPR[SPS]-1659907562998
[288161] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:165.
GPR[EPS]-1659907563694
GPR[SPVATF]-1659907563694
GPR[EPVATF]-1659907564964
GPR[SPS]-1659907564964
[290103] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:165.
GPR[EPS]-1659907565636
GPR[ESUN]-1659907565636
GPR[SSUN]-1659907565636
-1147408099
GPR[ESUN]-1659907565853
GPR[SSUN]-1659907565853
-1147408099
GPR[ESUN]-1659907566067
GPR[SSUN]-1659907566067
-1147408099
GPR[ESUN]-1659907566286
GPR[SSUN]-1659907566286
-1147408099
GPR[SPVATF]-1659907566507
GPR[EPVATF]-1659907567807
GPR[SPS]-1659907567807
[293741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:157.
GPR[EPS]-1659907569274
GPR[ESUN]-1659907569274
GPR[SSUN]-1659907569274
-1147408099
GPR[ESUN]-1659907569509
GPR[SSUN]-1659907569509
-1147408099
GPR[ESUN]-1659907569729
GPR[SSUN]-1659907569729
-1147408099
GPR[SPVATF]-1659907569947
GPR[EPVATF]-1659907571753
GPR[SPS]-1659907571753
[296904] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:94.
GPR[EPS]-1659907572437
GPR[SPVATF]-1659907572438
GPR[EPVATF]-1659907573490
GPR[SPS]-1659907573490
[298609] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:94.
GPR[EPS]-1659907574142
GPR[ESUN]-1659907574142
GPR[SSUN]-1659907574142
-1147408099
GPR[ESUN]-1659907574366
GPR[SSUN]-1659907574366
1795686761
GPR[SPVATF]-1659907574611
GPR[EPVATF]-1659907575635
GPR[SPS]-1659907575635
[300913] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:399.
GPR[EPS]-1659907576446
GPR[ESUN]-1659907576446
GPR[SSUN]-1659907576446
2433571
GPR[SPVATF]-1659907576693
GPR[EPVATF]-1659907577787
GPR[SPS]-1659907577787
[303067] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:999.
GPR[EPS]-1659907578600
GPR[SPVATF]-1659907578600
GPR[EPVATF]-1659907579654
GPR[SPS]-1659907579654
[304891] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:999.
GPR[EPS]-1659907580424
GPR[ESUN]-1659907580424
GPR[SSUN]-1659907580424
2433571
GPR[SPVATF]-1659907580658
GPR[EPVATF]-1659907581732
GPR[SPS]-1659907581732
[306967] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:981.
GPR[EPS]-1659907582500
GPR[ESUN]-1659907582500
GPR[SSUN]-1659907582500
2433571
GPR[ESUN]-1659907582727
GPR[SSUN]-1659907582727
2433571
GPR[SPVATF]-1659907582974
GPR[EPVATF]-1659907584043
GPR[SPS]-1659907584043
[309297] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659907584830
GPR[SPVATF]-1659907584830
GPR[EPVATF]-1659907585929
GPR[SPS]-1659907585930
[311196] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:973.
GPR[EPS]-1659907586730
GPR[ESUN]-1659907586730
GPR[SSUN]-1659907586730
2433571
GPR[ESUN]-1659907586957
GPR[SSUN]-1659907586957
2433571
GPR[ESUN]-1659907587184
GPR[SSUN]-1659907587184
2433571
GPR[ESUN]-1659907587412
GPR[SSUN]-1659907587412
2433571
GPR[SPVATF]-1659907587643
GPR[EPVATF]-1659907588762
GPR[SPS]-1659907588762
[314064] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:890.
GPR[EPS]-1659907589597
GPR[ESUN]-1659907589597
GPR[SSUN]-1659907589597
2433571
GPR[SPVATF]-1659907589829
GPR[EPVATF]-1659907590950
GPR[SPS]-1659907590950
[316221] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:885.
GPR[EPS]-1659907591754
GPR[ESUN]-1659907591754
GPR[SSUN]-1659907591754
2433571
GPR[ESUN]-1659907591993
GPR[SSUN]-1659907591993
2433571
GPR[SPVATF]-1659907592221
GPR[EPVATF]-1659907593460
GPR[SPS]-1659907593460
[318722] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:880.
GPR[EPS]-1659907594255
GPR[ESUN]-1659907594255
GPR[SSUN]-1659907594255
2433571
GPR[ESUN]-1659907594483
GPR[SSUN]-1659907594483
2433571
GPR[SPVATF]-1659907594706
GPR[EPVATF]-1659907595922
GPR[SPS]-1659907595922
[321184] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:956.
GPR[EPS]-1659907596717
GPR[ESUN]-1659907596717
GPR[SSUN]-1659907596717
2433571
GPR[SPVATF]-1659907596947
GPR[EPVATF]-1659907598163
GPR[SPS]-1659907598163
[323423] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:955.
GPR[EPS]-1659907598956
GPR[ESUN]-1659907598956
GPR[SSUN]-1659907598956
1795686761
GPR[SPVATF]-1659907599190
GPR[EPVATF]-1659907600384
GPR[SPS]-1659907600384
[325567] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:381.
GPR[EPS]-1659907601100
GPR[ESUN]-1659907601100
GPR[SSUN]-1659907601100
1795686761
GPR[SPVATF]-1659907601335
GPR[EPVATF]-1659907603527
GPR[SPS]-1659907603527
[328825] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:380.
GPR[EPS]-1659907604358
GPR[SPVATF]-1659907604359
GPR[EPVATF]-1659907605459
GPR[SPS]-1659907605459
[330654] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:380.
GPR[EPS]-1659907606187
GPR[ESUN]-1659907606187
GPR[SSUN]-1659907606187
1795686761
GPR[ESUN]-1659907606419
GPR[SSUN]-1659907606419
1795686761
GPR[SPVATF]-1659907606653
GPR[EPVATF]-1659907607732
GPR[SPS]-1659907607732
[332967] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:378.
GPR[EPS]-1659907608500
GPR[ESUN]-1659907608500
GPR[SSUN]-1659907608500
2433571
GPR[SPVATF]-1659907608734
GPR[EPVATF]-1659907609835
GPR[SPS]-1659907609835
[335095] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:967.
GPR[EPS]-1659907610628
GPR[SPVATF]-1659907610629
GPR[EPVATF]-1659907611786
GPR[SPS]-1659907611786
[537042] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659907812575
GPR[SSUN]-1659907812575
80988634
GPR[ESUN]-1659907812913
GPR[SSUN]-1659907812913
-1147408099
GPR[ESUN]-1659907813134
GPR[SSUN]-1659907813134
-1147408099
GPR[SPVATF]-1659907813353
GPR[EPVATF]-1659907813781
GPR[SPS]-1659907813781
[955331] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659908230864
GPR[SSUN]-1659908230864
-1147408099
GPR[SPVATF]-1659908231276
GPR[EPVATF]-1659908231771
GPR[SPS]-1659908231771
[956831] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:224.
GPR[EPS]-1659908232364
GPR[SPVATF]-1659908232365
GPR[EPVATF]-1659908232788
GPR[SPS]-1659908232788
[957817] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:224.
GPR[EPS]-1659908233350
GPR[ESUN]-1659908233350
GPR[SSUN]-1659908233350
-1147408099
GPR[SPVATF]-1659908233581
GPR[EPVATF]-1659908233977
GPR[SPS]-1659908233977
[959000] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:223.
GPR[EPS]-1659908234533
GPR[ESUN]-1659908234533
GPR[SSUN]-1659908234533
-1147408099
GPR[ESUN]-1659908234759
GPR[SSUN]-1659908234759
-1147408099
GPR[SPVATF]-1659908234988
GPR[EPVATF]-1659908235386
GPR[SPS]-1659908235386
[960429] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:221.
GPR[EPS]-1659908235962
GPR[ESUN]-1659908235962
GPR[SSUN]-1659908235962
-1147408099
GPR[ESUN]-1659908236268
GPR[SSUN]-1659908236268
-1147408099
GPR[SPVATF]-1659908236495
GPR[EPVATF]-1659908236889
GPR[SPS]-1659908236889
[961911] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:210.
GPR[EPS]-1659908237444
GPR[SPVATF]-1659908237444
GPR[EPVATF]-1659908237828
GPR[SPS]-1659908237828
[962849] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:210.
GPR[EPS]-1659908238382
GPR[ESUN]-1659908238382
GPR[SSUN]-1659908238382
2433571
GPR[SPVATF]-1659908238623
GPR[EPVATF]-1659908239735
GPR[SPS]-1659908239735
[964992] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659908240525
GPR[SPVATF]-1659908240525
GPR[EPVATF]-1659908241633
GPR[SPS]-1659908241633
[966892] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659908242425
GPR[ESUN]-1659908242425
GPR[SSUN]-1659908242425
2433571
GPR[ESUN]-1659908242693
GPR[SSUN]-1659908242693
2433571
GPR[SPVATF]-1659908242926
GPR[EPVATF]-1659908243978
GPR[SPS]-1659908243978
[969260] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:998.
GPR[EPS]-1659908244793
GPR[SPVATF]-1659908244794
GPR[EPVATF]-1659908245840
GPR[SPS]-1659908245840
[971086] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:998.
GPR[EPS]-1659908246619
GPR[ESUN]-1659908246619
GPR[SSUN]-1659908246619
2433571
GPR[SPVATF]-1659908246852
GPR[EPVATF]-1659908247915
GPR[SPS]-1659908247915
[973174] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659908248707
GPR[SPVATF]-1659908248707
GPR[EPVATF]-1659908249774
GPR[SPS]-1659908249774
[975058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:979.
GPR[EPS]-1659908250591
GPR[ESUN]-1659908250591
GPR[SSUN]-1659908250592
2433571
GPR[SPVATF]-1659908250826
GPR[EPVATF]-1659908251933
GPR[SPS]-1659908251933
[977238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659908252771
GPR[SPVATF]-1659908252772
GPR[EPVATF]-1659908253976
GPR[SPS]-1659908253976
[979288] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659908254821
GPR[ESUN]-1659908254821
GPR[SSUN]-1659908254821
2433571
GPR[SPVATF]-1659908255054
GPR[EPVATF]-1659908256235
GPR[SPS]-1659908256235
[981518] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:954.
GPR[EPS]-1659908257051
GPR[SPVATF]-1659908257051
GPR[EPVATF]-1659908258284
GPR[SPS]-1659908258284
[1183592] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659908459125
GPR[SSUN]-1659908459125
2433571
GPR[SPVATF]-1659908459545
GPR[EPVATF]-1659908460795
GPR[SPS]-1659908460795
[1186159] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:953.
GPR[EPS]-1659908461692
GPR[ESUN]-1659908461692
GPR[SSUN]-1659908461692
2433571
GPR[ESUN]-1659908461933
GPR[SSUN]-1659908461933
2433571
GPR[SPVATF]-1659908462164
GPR[EPVATF]-1659908463497
GPR[SPS]-1659908463498
[1199906] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:944.
GPR[EPS]-1659908475439
GPR[ESUN]-1659908475439
GPR[SSUN]-1659908475439
2433571
GPR[ESUN]-1659908475685
GPR[SSUN]-1659908475685
-1966087783
GPR[SPVATF]-1659908475894
GPR[EPVATF]-1659908475914
[1200381] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908475914
GPR[SSUN]-1659908475914
-1966087783
GPR[SPVATF]-1659908476105
GPR[EPVATF]-1659908476126
[1200593] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908476126
GPR[SSUN]-1659908476126
80988634
GPR[ESUN]-1659908476301
GPR[SSUN]-1659908476301
1803458346
GPR[SPVATF]-1659908476536
GPR[EPVATF]-1659908478013
GPR[SPS]-1659908478013
[1203259] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:407.
GPR[EPS]-1659908478792
GPR[ESUN]-1659908478792
GPR[SSUN]-1659908478792
1795686761
GPR[SPVATF]-1659908479025
GPR[EPVATF]-1659908480164
GPR[SPS]-1659908480164
[1205382] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:398.
GPR[EPS]-1659908480915
GPR[SPVATF]-1659908480915
GPR[EPVATF]-1659908482044
GPR[SPS]-1659908482044
[1207245] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:398.
GPR[EPS]-1659908482778
GPR[ESUN]-1659908482779
GPR[SSUN]-1659908482779
1795686761
GPR[SPVATF]-1659908483013
GPR[EPVATF]-1659908484173
GPR[SPS]-1659908484173
[1209405] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:377.
GPR[EPS]-1659908484938
GPR[SPVATF]-1659908484939
GPR[EPVATF]-1659908486073
GPR[SPS]-1659908486073
[1211295] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:377.
GPR[EPS]-1659908486828
GPR[ESUN]-1659908486828
GPR[SSUN]-1659908486828
1795686761
GPR[ESUN]-1659908487064
GPR[SSUN]-1659908487064
1795686761
GPR[ESUN]-1659908487297
GPR[SSUN]-1659908487297
890942016
GPR[ESUN]-1659908487519
GPR[SSUN]-1659908487519
890942016
GPR[SPVATF]-1659908487708
GPR[EPVATF]-1659908487727
[1212194] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908487727
GPR[SSUN]-1659908487727
890942016
GPR[SPVATF]-1659908487919
GPR[EPVATF]-1659908487938
[1212405] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908487939
GPR[EPVATF]-1659908487957
[1212425] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908487958
GPR[SSUN]-1659908487958
890942016
GPR[ESUN]-1659908488152
GPR[SSUN]-1659908488152
890942016
GPR[ESUN]-1659908488342
GPR[SSUN]-1659908488342
-1966087783
GPR[ESUN]-1659908488531
GPR[SSUN]-1659908488531
-1966087783
GPR[SPVATF]-1659908488721
GPR[EPVATF]-1659908488740
[1213207] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908488740
GPR[EPVATF]-1659908488758
[1213225] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908488758
GPR[SSUN]-1659908488758
-1966087783
GPR[ESUN]-1659908488946
GPR[SSUN]-1659908488946
-1966087783
GPR[SPVATF]-1659908489133
GPR[EPVATF]-1659908489151
[1213618] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908489152
GPR[EPVATF]-1659908489169
[1213636] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908489169
GPR[SSUN]-1659908489169
-1966087783
GPR[ESUN]-1659908489359
GPR[SSUN]-1659908489359
-1966087783
GPR[ESUN]-1659908489568
GPR[SSUN]-1659908489568
-1966087783
GPR[ESUN]-1659908489756
GPR[SSUN]-1659908489756
1795686761
GPR[SPVATF]-1659908489987
GPR[EPVATF]-1659908491154
GPR[SPS]-1659908491154
[1216396] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:375.
GPR[EPS]-1659908491929
GPR[SPVATF]-1659908491929
GPR[EPVATF]-1659908493101
GPR[SPS]-1659908493101
[1218340] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:375.
GPR[EPS]-1659908493873
GPR[ESUN]-1659908493873
GPR[SSUN]-1659908493873
1795686761
GPR[ESUN]-1659908494107
GPR[SSUN]-1659908494107
80988634
GPR[ESUN]-1659908494282
GPR[SSUN]-1659908494282
1187751237
GPR[SPVATF]-1659908494555
GPR[EPVATF]-1659908495730
GPR[SPS]-1659908495730
[1220864] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class NodeUtil {
    static final long MAX_POSITIVE_INTEGER_NUMBER = ((long) (java.lang.Math.pow(2, 53)));

    static final java.lang.String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";

    private static final java.util.Set<java.lang.String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList("Array", "Date", "Error", "Object", "RegExp", "XMLHttpRequest"));

    private NodeUtil() {
    }

    static com.google.javascript.rhino.jstype.TernaryValue getImpureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                return value.not();
            case com.google.javascript.rhino.Token.AND :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.and(rhs);
                }
            case com.google.javascript.rhino.Token.OR :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.or(rhs);
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.javascript.rhino.jstype.TernaryValue trueValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild().getNext());
                    com.google.javascript.rhino.jstype.TernaryValue falseValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    if (trueValue.equals(falseValue)) {
                        return trueValue;
                    } else {
                        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    }
                }
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.VOID :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            default :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
        }
    }

    static com.google.javascript.rhino.jstype.TernaryValue getPureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getString().length() > 0);
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getDouble() != 0);
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getLastChild()).not();
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.FALSE :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            case com.google.javascript.rhino.Token.VOID :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if ("undefined".equals(name) || "NaN".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                } else if ("Infinity".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.REGEXP :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
        }
        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
    }

    static java.lang.String getStringValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return n.getString();
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name)) {
                    return name;
                }
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(n.getDouble());
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.VOID :
                return "undefined";
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? "false" : "true";
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return com.google.javascript.jscomp.NodeUtil.arrayToString(n);
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "[object Object]";
        }
        return null;
    }

    static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    static java.lang.String getArrayElementStringValue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isNullOrUndefined(n) || n.isEmpty() ? "" : com.google.javascript.jscomp.NodeUtil.getStringValue(n);
    }

    static java.lang.String arrayToString(com.google.javascript.rhino.Node literal) {
        com.google.javascript.rhino.Node first = literal.getFirstChild();
        java.lang.StringBuilder result = new java.lang.StringBuilder();
        int nextSlot = 0;
        int nextSkipSlot = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            java.lang.String childValue = com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(n);
            if (childValue == null) {
                return null;
            }
            if (n != first) {
                result.append(',');
            }
            result.append(childValue);
            nextSlot++;
        }
        return result.toString();
    }

    static java.lang.Double getNumberValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
                return 1.0;
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
                return 0.0;
            case com.google.javascript.rhino.Token.NUMBER :
                return n.getDouble();
            case com.google.javascript.rhino.Token.VOID :
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return null;
                } else {
                    return java.lang.Double.NaN;
                }
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("undefined")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("NaN")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("Infinity")) {
                    return java.lang.Double.POSITIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NEG :
                if (((n.getChildCount() == 1) && n.getFirstChild().isName()) && n.getFirstChild().getString().equals("Infinity")) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? 0.0 : 1.0;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.jscomp.NodeUtil.getStringNumberValue(n.getString());
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                java.lang.String value = com.google.javascript.jscomp.NodeUtil.getStringValue(n);
                return value != null ? com.google.javascript.jscomp.NodeUtil.getStringNumberValue(value) : null;
        }
        return null;
    }

    static java.lang.Double getStringNumberValue(java.lang.String rawJsString) {
        if (rawJsString.contains("\u000b")) {
            return null;
        }
        java.lang.String s = com.google.javascript.jscomp.NodeUtil.trimJsWhiteSpace(rawJsString);
        if (s.length() == 0) {
            return 0.0;
        }
        if (((s.length() > 2) && (s.charAt(0) == '0')) && ((s.charAt(1) == 'x') || (s.charAt(1) == 'X'))) {
            try {
                return java.lang.Double.valueOf(java.lang.Integer.parseInt(s.substring(2), 16));
            } catch (java.lang.NumberFormatException e) {
                return java.lang.Double.NaN;
            }
        }
        if ((((s.length() > 3) && ((s.charAt(0) == '-') || (s.charAt(0) == '+'))) && (s.charAt(1) == '0')) && ((s.charAt(2) == 'x') || (s.charAt(2) == 'X'))) {
            return null;
        }
        if ((s.equals("infinity") || s.equals("-infinity")) || s.equals("+infinity")) {
            return null;
        }
        try {
            return java.lang.Double.parseDouble(s);
        } catch (java.lang.NumberFormatException e) {
            return java.lang.Double.NaN;
        }
    }

    static java.lang.String trimJsWhiteSpace(java.lang.String s) {
        int start = 0;
        int end = s.length();
        while ((end > 0) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(end - 1)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            end--;
        } 
        while ((start < end) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(start)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            start++;
        } 
        return s.substring(start, end);
    }

    static com.google.javascript.rhino.jstype.TernaryValue isStrWhiteSpaceChar(int c) {
        switch (c) {
            case '\u000b' :
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            case ' ' :
            case '\n' :
            case '\r' :
            case '\t' :
            case ' ' :
            case '\f' :
            case ' ' :
            case ' ' :
            case '﻿' :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            default :
                return java.lang.Character.getType(c) == java.lang.Character.SPACE_SEPARATOR ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    static java.lang.String getFunctionName(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        java.lang.String name = n.getFirstChild().getString();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return parent.getString();
            case com.google.javascript.rhino.Token.ASSIGN :
                return parent.getFirstChild().getQualifiedName();
            default :
                return (name != null) && (name.length() != 0) ? name : null;
        }
    }

    public static java.lang.String getNearestFunctionName(com.google.javascript.rhino.Node n) {
        java.lang.String name = com.google.javascript.jscomp.NodeUtil.getFunctionName(n);
        if (name != null) {
            return name;
        }
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SETTER_DEF :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return parent.getString();
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(parent);
        }
        return null;
    }

    static boolean isImmutableValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NEG :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                return ("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name);
        }
        return false;
    }

    public static boolean isSymmetricOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.MUL :
                return true;
        }
        return false;
    }

    public static boolean isRelationalOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
                return true;
        }
        return false;
    }

    public static int getInverseOperator(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.GT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.Token.LT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.Token.GE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.Token.LE :
                return com.google.javascript.rhino.Token.GE;
        }
        return com.google.javascript.rhino.Token.ERROR;
    }

    static boolean isLiteralValue(com.google.javascript.rhino.Node n, boolean includeFunctions) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ARRAYLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if ((!child.isEmpty()) && (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions))) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.REGEXP :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child.getFirstChild(), includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return includeFunctions && (!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n));
            default :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n);
        }
    }

    static boolean isValidDefineValue(com.google.javascript.rhino.Node val, java.util.Set<java.lang.String> defines) {
        switch (val.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.URSH :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines) && com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getLastChild(), defines);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.POS :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines);
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                if (val.isQualifiedName()) {
                    return defines.contains(val.getQualifiedName());
                }
        }
        return false;
    }

    static boolean isEmptyBlock(com.google.javascript.rhino.Node block) {
        if (!block.isBlock()) {
            return false;
        }
        for (com.google.javascript.rhino.Node n = block.getFirstChild(); n != null; n = n.getNext()) {
            if (!n.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    static boolean isSimpleOperator(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());
    }

    static boolean isSimpleOperatorType(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.COMMA :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.URSH :
                return true;
            default :
                return false;
        }
    }

    public static com.google.javascript.rhino.Node newExpr(com.google.javascript.rhino.Node child) {
        return com.google.javascript.rhino.IR.exprResult(child).srcref(child);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(n, null);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, true, compiler);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, null);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, false, compiler);
    }

    private static boolean checkForStateChangeHelper(com.google.javascript.rhino.Node n, boolean checkForNewObjects, com.google.javascript.jscomp.AbstractCompiler compiler) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.PARAM_LIST :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.EMPTY :
                break;
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (checkForNewObjects) {
                    return true;
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c.getFirstChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                }
                return false;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.REGEXP :
                if (checkForNewObjects) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.NAME :
                if (n.getFirstChild() != null) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                return checkForNewObjects || (!com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
            case com.google.javascript.rhino.Token.NEW :
                if (checkForNewObjects) {
                    return true;
                }
                if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n)) {
                    break;
                }
                return true;
            case com.google.javascript.rhino.Token.CALL :
                if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler)) {
                    break;
                }
                return true;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType())) {
                    break;
                }
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    com.google.javascript.rhino.Node assignTarget = n.getFirstChild();
                    if (assignTarget.isName()) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getFirstChild(), checkForNewObjects, compiler) || com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getLastChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.isGet(assignTarget)) {
                        com.google.javascript.rhino.Node current = assignTarget.getFirstChild();
                        if (com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(current)) {
                            return false;
                        }
                        while (com.google.javascript.jscomp.NodeUtil.isGet(current)) {
                            current = current.getFirstChild();
                        } 
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(current, true);
                    } else {
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(assignTarget, true);
                    }
                }
                return true;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c, checkForNewObjects, compiler)) {
                return true;
            }
        }
        return false;
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(callNode, null);
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isNew()) {
            throw new java.lang.IllegalStateException("Expected NEW node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName() && com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
            return false;
        }
        return true;
    }

    private static final java.util.Set<java.lang.String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("Object", "Array", "String", "Number", "Boolean", "RegExp", "Error");

    private static final java.util.Set<java.lang.String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("toString", "valueOf");

    private static final java.util.Set<java.lang.String> REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("test", "exec");

    private static final java.util.Set<java.lang.String> STRING_REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("match", "replace", "search", "split");

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(callNode, null);
    }

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode, @javax.annotation.Nullable
    com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isCall()) {
            throw new java.lang.IllegalStateException("Expected CALL node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
                return false;
            }
        } else if (nameNode.isGetProp()) {
            if (callNode.hasOneChild() && com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
                return false;
            }
            if (callNode.isOnlyModifiesThisCall() && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
                return false;
            }
            if (nameNode.getFirstChild().isName()) {
                if ("Math.floor".equals(nameNode.getQualifiedName())) {
                    return false;
                }
            }
            if ((compiler != null) && (!compiler.hasRegExpGlobalReferences())) {
                if (nameNode.getFirstChild().isRegExp() && com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    return false;
                } else if (nameNode.getFirstChild().isString() && com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    com.google.javascript.rhino.Node param = nameNode.getNext();
                    if ((param != null) && (param.isString() || param.isRegExp())) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static boolean callHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isCall());
        return (n.getSideEffectFlags() & com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS) > 0;
    }

    static boolean newHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isNew());
        return n.isOnlyModifiesThisCall();
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n, null);
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
            return true;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.CALL :
                return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NAME :
                return n.hasChildren();
            default :
                return false;
        }
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n) {
        java.util.Set<java.lang.String> emptySet = java.util.Collections.emptySet();
        return com.google.javascript.jscomp.NodeUtil.canBeSideEffected(n, emptySet);
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n, java.util.Set<java.lang.String> knownConstants) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.NEW :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return (!com.google.javascript.jscomp.NodeUtil.isConstantName(n)) && (!knownConstants.contains(n.getString()));
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(c, knownConstants)) {
                return true;
            }
        }
        return false;
    }

    static int precedence(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.COMMA :
                return 0;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN :
                return 1;
            case com.google.javascript.rhino.Token.HOOK :
                return 2;
            case com.google.javascript.rhino.Token.OR :
                return 3;
            case com.google.javascript.rhino.Token.AND :
                return 4;
            case com.google.javascript.rhino.Token.BITOR :
                return 5;
            case com.google.javascript.rhino.Token.BITXOR :
                return 6;
            case com.google.javascript.rhino.Token.BITAND :
                return 7;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return 8;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.IN :
                return 9;
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return 10;
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
                return 11;
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
                return 12;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                return 13;
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
                return 15;
            default :
                throw new java.lang.Error(((("Unknown precedence for " + com.google.javascript.rhino.Token.name(type)) + " (type ") + type) + ")");
        }
    }

    static boolean valueCheck(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.valueCheck(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.valueCheck(n.getFirstChild(), p) && com.google.javascript.jscomp.NodeUtil.valueCheck(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.valueCheck(n.getFirstChild().getNext(), p) && com.google.javascript.jscomp.NodeUtil.valueCheck(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static class NumbericResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isNumericResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate NUMBERIC_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate();

    static boolean isNumericResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.valueCheck(n, com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);
    }

    static boolean isNumericResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                return (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getFirstChild())) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getLastChild()));
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.NUMBER :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("NaN")) {
                    return true;
                }
                if (name.equals("Infinity")) {
                    return true;
                }
                return false;
            default :
                return false;
        }
    }

    static class BooleanResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isBooleanResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate BOOLEAN_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate();

    static boolean isBooleanResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.valueCheck(n, com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);
    }

    static boolean isBooleanResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.DELPROP :
                return true;
            default :
                return false;
        }
    }

    static boolean isUndefined(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.VOID :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return n.getString().equals("undefined");
        }
        return false;
    }

    static boolean isNullOrUndefined(com.google.javascript.rhino.Node n) {
        return n.isNull() || com.google.javascript.jscomp.NodeUtil.isUndefined(n);
    }

    static class MayBeStringResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate MAY_BE_STRING_PREDICATE = new com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate();

    static boolean mayBeString(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayBeString(n, true);
    }

    static boolean mayBeString(com.google.javascript.rhino.Node n, boolean recurse) {
        if (recurse) {
            return com.google.javascript.jscomp.NodeUtil.valueCheck(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);
        } else {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static boolean mayBeStringHelper(com.google.javascript.rhino.Node n) {
        return (((!com.google.javascript.jscomp.NodeUtil.isNumericResult(n)) && (!com.google.javascript.jscomp.NodeUtil.isBooleanResult(n))) && (!com.google.javascript.jscomp.NodeUtil.isUndefined(n))) && (!n.isNull());
    }

    static boolean isAssociative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isCommutative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return true;
        }
        return false;
    }

    static int getOpFromAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.MOD;
        }
        throw new java.lang.IllegalArgumentException("Not an assignment op:" + n);
    }

    static boolean containsFunction(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.FUNCTION);
    }

    static boolean referencesThis(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node start = (n.isFunction()) ? n.getLastChild() : n;
        return com.google.javascript.jscomp.NodeUtil.containsType(start, com.google.javascript.rhino.Token.THIS, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isGet(com.google.javascript.rhino.Node n) {
        return n.isGetProp() || n.isGetElem();
    }

    static boolean isVarDeclaration(com.google.javascript.rhino.Node n) {
        return n.isName() && n.getParent().isVar();
    }

    static com.google.javascript.rhino.Node getAssignedValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isName());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent.isVar()) {
            return n.getFirstChild();
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(164).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectInput("com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(164).collectionEnds();
            }
            if (runtimeAngelicValue) if (parent.isAssign() && (parent.getFirstChild() == n)) {
                return n.getNext();
            } else {
                return null;
            }
        }
    }

    static boolean isExprAssign(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isAssign();
    }

    static boolean isExprCall(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isCall();
    }

    static boolean isForIn(com.google.javascript.rhino.Node n) {
        return n.isFor() && (n.getChildCount() == 3);
    }

    static boolean isLoopStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getLoopCodeBlock(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getFirstChild();
            default :
                return null;
        }
    }

    static boolean isWithinLoop(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node parent : n.getAncestors()) {
            if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(parent)) {
                return true;
            }
            if (parent.isFunction()) {
                break;
            }
        }
        return false;
    }

    static boolean isControlStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                return false;
        }
    }

    static boolean isControlStructureCodeBlock(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.WITH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.DO :
                return parent.getFirstChild() == n;
            case com.google.javascript.rhino.Token.IF :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.TRY :
                return (parent.getFirstChild() == n) || (parent.getLastChild() == n);
            case com.google.javascript.rhino.Token.CATCH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructure(parent));
                return false;
        }
    }

    static com.google.javascript.rhino.Node getConditionExpression(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.FOR :
                switch (n.getChildCount()) {
                    case 3 :
                        return null;
                    case 4 :
                        return n.getFirstChild().getNext();
                }
                throw new java.lang.IllegalArgumentException("malformed 'for' statement " + n);
            case com.google.javascript.rhino.Token.CASE :
                return null;
        }
        throw new java.lang.IllegalArgumentException(n + " does not have a condition.");
    }

    static boolean isStatementBlock(com.google.javascript.rhino.Node n) {
        return n.isScript() || n.isBlock();
    }

    static boolean isStatement(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isStatementParent(n.getParent());
    }

    static boolean isStatementParent(com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(parent != null);
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
                return true;
            default :
                return false;
        }
    }

    static boolean isSwitchCase(com.google.javascript.rhino.Node n) {
        return n.isCase() || n.isDefaultCase();
    }

    static boolean isReferenceName(com.google.javascript.rhino.Node n) {
        return n.isName() && (!n.getString().isEmpty());
    }

    static boolean isTryFinallyNode(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {
        return (parent.isTry() && (parent.getChildCount() == 3)) && (child == parent.getLastChild());
    }

    static boolean isTryCatchNodeContainer(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        return parent.isTry() && (parent.getFirstChild().getNext() == n);
    }

    static void removeChild(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, node)) {
            if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent))) {
                parent.removeChild(node);
            } else {
                node.detachChildren();
            }
        } else if (node.isCatch()) {
            com.google.javascript.rhino.Node tryNode = node.getParent().getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachFromParent();
        } else if (com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(node)) {
            com.google.javascript.rhino.Node tryNode = node.getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachChildren();
        } else if (node.isBlock()) {
            node.detachChildren();
        } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent) || com.google.javascript.jscomp.NodeUtil.isSwitchCase(node)) {
            parent.removeChild(node);
        } else if (parent.isVar()) {
            if (parent.hasMoreThanOneChild()) {
                parent.removeChild(node);
            } else {
                parent.removeChild(node);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
            }
        } else if (parent.isLabel() && (node == parent.getLastChild())) {
            parent.removeChild(node);
            com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
        } else if (parent.isFor() && (parent.getChildCount() == 4)) {
            parent.replaceChild(node, com.google.javascript.rhino.IR.empty());
        } else {
            throw new java.lang.IllegalStateException((("Invalid attempt to remove node: " + node.toString()) + " of ") + parent.toString());
        }
    }

    static void maybeAddFinally(com.google.javascript.rhino.Node tryNode) {
        com.google.common.base.Preconditions.checkState(tryNode.isTry());
        if (!com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode)) {
            tryNode.addChildrenToBack(com.google.javascript.rhino.IR.block().srcref(tryNode));
        }
    }

    static boolean tryMergeBlock(com.google.javascript.rhino.Node block) {
        com.google.common.base.Preconditions.checkState(block.isBlock());
        com.google.javascript.rhino.Node parent = block.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)) {
            com.google.javascript.rhino.Node previous = block;
            while (block.hasChildren()) {
                com.google.javascript.rhino.Node child = block.removeFirstChild();
                parent.addChildAfter(child, previous);
                previous = child;
            } 
            parent.removeChild(block);
            return true;
        } else {
            return false;
        }
    }

    static boolean isCallOrNew(com.google.javascript.rhino.Node node) {
        return node.isCall() || node.isNew();
    }

    static com.google.javascript.rhino.Node getFunctionBody(com.google.javascript.rhino.Node fn) {
        com.google.common.base.Preconditions.checkArgument(fn.isFunction());
        return fn.getLastChild();
    }

    static boolean containsCall(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.CALL);
    }

    static boolean isFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return n.isFunction() && com.google.javascript.jscomp.NodeUtil.isStatement(n);
    }

    static boolean isHoistedFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) && (n.getParent().isScript() || n.getParent().getParent().isFunction());
    }

    static boolean isFunctionExpression(com.google.javascript.rhino.Node n) {
        return n.isFunction() && (!com.google.javascript.jscomp.NodeUtil.isStatement(n));
    }

    static boolean isEmptyFunctionExpression(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(node) && com.google.javascript.jscomp.NodeUtil.isEmptyBlock(node.getLastChild());
    }

    static boolean isVarArgsFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkArgument(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(function.getLastChild(), "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isObjectCallMethod(com.google.javascript.rhino.Node callNode, java.lang.String methodName) {
        if (callNode.isCall()) {
            com.google.javascript.rhino.Node functionIndentifyingExpression = callNode.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGet(functionIndentifyingExpression)) {
                com.google.javascript.rhino.Node last = functionIndentifyingExpression.getLastChild();
                if ((last != null) && last.isString()) {
                    java.lang.String propName = last.getString();
                    return propName.equals(methodName);
                }
            }
        }
        return false;
    }

    static boolean isFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "call");
    }

    static boolean isFunctionObjectApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "apply");
    }

    static boolean isFunctionObjectCallOrApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode) || com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode);
    }

    static boolean isSimpleFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
            if (callNode.getFirstChild().getFirstChild().isName()) {
                return true;
            }
        }
        return false;
    }

    static boolean isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        return (parent.isAssign() && (parent.getFirstChild() == n)) || parent.isVar();
    }

    static boolean isLValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument((n.isName() || n.isGetProp()) || n.isGetElem());
        com.google.javascript.rhino.Node parent = n.getParent();
        return (((((((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || (com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n))) || parent.isVar()) || (parent.isFunction() && (parent.getFirstChild() == n))) || parent.isDec()) || parent.isInc()) || parent.isParamList()) || parent.isCatch();
    }

    static boolean isObjectLitKey(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String getObjectLitKeyName(com.google.javascript.rhino.Node key) {
        switch (key.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return key.getString();
        }
        throw new java.lang.IllegalStateException("Unexpected node type: " + key);
    }

    static com.google.javascript.rhino.jstype.JSType getObjectLitKeyTypeFromValueType(com.google.javascript.rhino.Node key, com.google.javascript.rhino.jstype.JSType valueType) {
        if (valueType != null) {
            switch (key.getType()) {
                case com.google.javascript.rhino.Token.GETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        valueType = fntype.getReturnType();
                    } else {
                        return null;
                    }
                    break;
                case com.google.javascript.rhino.Token.SETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        com.google.javascript.rhino.Node param = fntype.getParametersNode().getFirstChild();
                        valueType = param.getJSType();
                    } else {
                        return null;
                    }
                    break;
            }
        }
        return valueType;
    }

    static boolean isGetOrSetKey(com.google.javascript.rhino.Node node) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String opToStr(int operator) {
        switch (operator) {
            case com.google.javascript.rhino.Token.BITOR :
                return "|";
            case com.google.javascript.rhino.Token.OR :
                return "||";
            case com.google.javascript.rhino.Token.BITXOR :
                return "^";
            case com.google.javascript.rhino.Token.AND :
                return "&&";
            case com.google.javascript.rhino.Token.BITAND :
                return "&";
            case com.google.javascript.rhino.Token.SHEQ :
                return "===";
            case com.google.javascript.rhino.Token.EQ :
                return "==";
            case com.google.javascript.rhino.Token.NOT :
                return "!";
            case com.google.javascript.rhino.Token.NE :
                return "!=";
            case com.google.javascript.rhino.Token.SHNE :
                return "!==";
            case com.google.javascript.rhino.Token.LSH :
                return "<<";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.LE :
                return "<=";
            case com.google.javascript.rhino.Token.LT :
                return "<";
            case com.google.javascript.rhino.Token.URSH :
                return ">>>";
            case com.google.javascript.rhino.Token.RSH :
                return ">>";
            case com.google.javascript.rhino.Token.GE :
                return ">=";
            case com.google.javascript.rhino.Token.GT :
                return ">";
            case com.google.javascript.rhino.Token.MUL :
                return "*";
            case com.google.javascript.rhino.Token.DIV :
                return "/";
            case com.google.javascript.rhino.Token.MOD :
                return "%";
            case com.google.javascript.rhino.Token.BITNOT :
                return "~";
            case com.google.javascript.rhino.Token.ADD :
                return "+";
            case com.google.javascript.rhino.Token.SUB :
                return "-";
            case com.google.javascript.rhino.Token.POS :
                return "+";
            case com.google.javascript.rhino.Token.NEG :
                return "-";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "=";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "|=";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "^=";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "&=";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "<<=";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return ">>=";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return ">>>=";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "+=";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "-=";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "*=";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "/=";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "%=";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            default :
                return null;
        }
    }

    static java.lang.String opToStrNoFail(int operator) {
        java.lang.String res = com.google.javascript.jscomp.NodeUtil.opToStr(operator);
        if (res == null) {
            throw new java.lang.Error((("Unknown op " + operator) + ": ") + com.google.javascript.rhino.Token.name(operator));
        }
        return res;
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type) {
        return com.google.javascript.jscomp.NodeUtil.containsType(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static void redeclareVarsInsideBranch(com.google.javascript.rhino.Node branch) {
        java.util.Collection<com.google.javascript.rhino.Node> vars = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(branch);
        if (vars.isEmpty()) {
            return;
        }
        com.google.javascript.rhino.Node parent = com.google.javascript.jscomp.NodeUtil.getAddingRoot(branch);
        for (com.google.javascript.rhino.Node nameNode : vars) {
            com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(com.google.javascript.rhino.IR.name(nameNode.getString()).srcref(nameNode)).srcref(nameNode);
            com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(nameNode, var.getFirstChild());
            parent.addChildToFront(var);
        }
    }

    static void copyNameAnnotations(com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node destination) {
        if (source.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
            destination.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
    }

    private static com.google.javascript.rhino.Node getAddingRoot(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node addingRoot = null;
        com.google.javascript.rhino.Node ancestor = n;
        while (null != (ancestor = ancestor.getParent())) {
            int type = ancestor.getType();
            if (type == com.google.javascript.rhino.Token.SCRIPT) {
                addingRoot = ancestor;
                break;
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                addingRoot = ancestor.getLastChild();
                break;
            }
        } 
        com.google.common.base.Preconditions.checkState(addingRoot.isBlock() || addingRoot.isScript());
        com.google.common.base.Preconditions.checkState((addingRoot.getFirstChild() == null) || (!addingRoot.getFirstChild().isScript()));
        return addingRoot;
    }

    public static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        int endPos = name.indexOf('.');
        if (endPos == (-1)) {
            return com.google.javascript.jscomp.NodeUtil.newName(convention, name);
        }
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newName(convention, name.substring(0, endPos));
        int startPos;
        do {
            startPos = endPos + 1;
            endPos = name.indexOf('.', startPos);
            java.lang.String part = (endPos == (-1)) ? name.substring(startPos) : name.substring(startPos, endPos);
            com.google.javascript.rhino.Node propNode = com.google.javascript.rhino.IR.string(part);
            if (convention.isConstantKey(part)) {
                propNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            node = com.google.javascript.rhino.IR.getprop(node, propNode);
        } while (endPos != (-1) );
        return node;
    }

    static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(convention, name);
        com.google.javascript.jscomp.NodeUtil.setDebugInformation(node, basisNode, originalName);
        return node;
    }

    public static com.google.javascript.rhino.Node getRootOfQualifiedName(com.google.javascript.rhino.Node qName) {
        for (com.google.javascript.rhino.Node current = qName; true; current = current.getFirstChild()) {
            if (current.isName() || current.isThis()) {
                return current;
            }
            com.google.common.base.Preconditions.checkState(current.isGetProp());
        }
    }

    static void setDebugInformation(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        node.copyInformationFromForTree(basisNode);
        node.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
    }

    private static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(name);
        if (convention.isConstant(name)) {
            nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
        return nameNode;
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node srcref) {
        return com.google.javascript.jscomp.NodeUtil.newName(convention, name).srcref(srcref);
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(convention, name, basisNode);
        nameNode.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
        return nameNode;
    }

    static boolean isLatin(java.lang.String s) {
        char LARGEST_BASIC_LATIN = 0x7f;
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if (c > LARGEST_BASIC_LATIN) {
                return false;
            }
        }
        return true;
    }

    public static boolean isValidSimpleName(java.lang.String name) {
        return (com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && (!com.google.javascript.rhino.TokenStream.isKeyword(name))) && com.google.javascript.jscomp.NodeUtil.isLatin(name);
    }

    public static boolean isValidQualifiedName(java.lang.String name) {
        if (name.endsWith(".") || name.startsWith(".")) {
            return false;
        }
        java.lang.String[] parts = name.split("\\.");
        for (java.lang.String part : parts) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidSimpleName(part)) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidPropertyName(java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isValidSimpleName(name);
    }

    private static class VarCollector implements com.google.javascript.jscomp.NodeUtil.Visitor {
        final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> vars = com.google.common.collect.Maps.newLinkedHashMap();

        @java.lang.Override
        public void visit(com.google.javascript.rhino.Node n) {
            if (n.isName()) {
                com.google.javascript.rhino.Node parent = n.getParent();
                if ((parent != null) && parent.isVar()) {
                    java.lang.String name = n.getString();
                    if (!vars.containsKey(name)) {
                        vars.put(name, n);
                    }
                }
            }
        }
    }

    public static java.util.Collection<com.google.javascript.rhino.Node> getVarsDeclaredInBranch(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeUtil.VarCollector collector = new com.google.javascript.jscomp.NodeUtil.VarCollector();
        com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, collector, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        return collector.vars.values();
    }

    static boolean isPrototypePropertyDeclaration(com.google.javascript.rhino.Node n) {
        if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(n.getFirstChild().getFirstChild());
    }

    static boolean isPrototypeProperty(com.google.javascript.rhino.Node n) {
        java.lang.String lhsString = n.getQualifiedName();
        if (lhsString == null) {
            return false;
        }
        int prototypeIdx = lhsString.indexOf(".prototype.");
        return prototypeIdx != (-1);
    }

    static com.google.javascript.rhino.Node getPrototypeClassName(com.google.javascript.rhino.Node qName) {
        com.google.javascript.rhino.Node cur = qName;
        while (cur.isGetProp()) {
            if (cur.getLastChild().getString().equals("prototype")) {
                return cur.getFirstChild();
            } else {
                cur = cur.getFirstChild();
            }
        } 
        return null;
    }

    static java.lang.String getPrototypePropertyName(com.google.javascript.rhino.Node qName) {
        java.lang.String qNameStr = qName.getQualifiedName();
        int prototypeIdx = qNameStr.lastIndexOf(".prototype.");
        int memberIndex = (prototypeIdx + ".prototype".length()) + 1;
        return qNameStr.substring(memberIndex);
    }

    static com.google.javascript.rhino.Node newUndefinedNode(com.google.javascript.rhino.Node srcReferenceNode) {
        com.google.javascript.rhino.Node node = com.google.javascript.rhino.IR.voidNode(com.google.javascript.rhino.IR.number(0));
        if (srcReferenceNode != null) {
            node.copyInformationFromForTree(srcReferenceNode);
        }
        return node;
    }

    static com.google.javascript.rhino.Node newVarNode(java.lang.String name, com.google.javascript.rhino.Node value) {
        com.google.javascript.rhino.Node nodeName = com.google.javascript.rhino.IR.name(name);
        if (value != null) {
            com.google.common.base.Preconditions.checkState(value.getNext() == null);
            nodeName.addChildToBack(value);
            nodeName.srcref(value);
        }
        com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(nodeName).srcref(nodeName);
        return var;
    }

    private static class MatchNameNode implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final java.lang.String name;

        MatchNameNode(java.lang.String name) {
            this.name = name;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.isName() && n.getString().equals(name);
        }
    }

    static class MatchNodeType implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final int type;

        MatchNodeType(int type) {
            this.type = type;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.getType() == type;
        }
    }

    static class MatchDeclaration implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) || n.isVar();
        }
    }

    private static class MatchNotFunction implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return !n.isFunction();
        }
    }

    static final com.google.common.base.Predicate<com.google.javascript.rhino.Node> MATCH_NOT_FUNCTION = new com.google.javascript.jscomp.NodeUtil.MatchNotFunction();

    static class MatchShallowStatement implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return n.isBlock() || ((!n.isFunction()) && (((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)));
        }
    }

    static int getNodeTypeReferenceCount(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(node, name, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static int getNameReferenceCount(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static boolean has(com.google.javascript.rhino.Node node, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (pred.apply(node)) {
            return true;
        }
        if (!traverseChildrenPred.apply(node)) {
            return false;
        }
        for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.has(c, pred, traverseChildrenPred)) {
                return true;
            }
        }
        return false;
    }

    static int getCount(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        int total = 0;
        if (pred.apply(n)) {
            total++;
        }
        if (traverseChildrenPred.apply(n)) {
            for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                total += com.google.javascript.jscomp.NodeUtil.getCount(c, pred, traverseChildrenPred);
            }
        }
        return total;
    }

    static interface Visitor {
        public abstract void visit(com.google.javascript.rhino.Node node);
    }

    static void visitPreOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor vistor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        vistor.visit(node);
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPreOrder(c, vistor, traverseChildrenPred);
            }
        }
    }

    static void visitPostOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor vistor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPostOrder(c, vistor, traverseChildrenPred);
            }
        }
        vistor.visit(node);
    }

    static boolean hasFinally(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getChildCount() == 3;
    }

    static com.google.javascript.rhino.Node getCatchBlock(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getFirstChild().getNext();
    }

    static boolean hasCatchHandler(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isBlock());
        return n.hasChildren() && n.getFirstChild().isCatch();
    }

    public static com.google.javascript.rhino.Node getFunctionParameters(com.google.javascript.rhino.Node fnNode) {
        com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
        return fnNode.getFirstChild().getNext();
    }

    static boolean isConstantName(com.google.javascript.rhino.Node node) {
        return node.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
    }

    static boolean isConstantByConvention(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        java.lang.String name = node.getString();
        if (parent.isGetProp() && (node == parent.getLastChild())) {
            return convention.isConstantKey(name);
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(node, parent)) {
            return convention.isConstantKey(name);
        } else {
            return convention.isConstant(name);
        }
    }

    public static com.google.javascript.rhino.JSDocInfo getFunctionJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.JSDocInfo fnInfo = n.getJSDocInfo();
        if ((fnInfo == null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n)) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isAssign()) {
                fnInfo = parent.getJSDocInfo();
            } else if (parent.isName()) {
                fnInfo = parent.getParent().getJSDocInfo();
            }
        }
        return fnInfo;
    }

    public static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getSourceFileName();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.StaticSourceFile sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getStaticSourceFile();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.InputId getInputId(com.google.javascript.rhino.Node n) {
        while ((n != null) && (!n.isScript())) {
            n = n.getParent();
        } 
        return (n != null) && n.isScript() ? n.getInputId() : null;
    }

    static com.google.javascript.rhino.Node newCallNode(com.google.javascript.rhino.Node callTarget, com.google.javascript.rhino.Node... parameters) {
        boolean isFreeCall = !com.google.javascript.jscomp.NodeUtil.isGet(callTarget);
        com.google.javascript.rhino.Node call = com.google.javascript.rhino.IR.call(callTarget);
        call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, isFreeCall);
        for (com.google.javascript.rhino.Node parameter : parameters) {
            call.addChildToBack(parameter);
        }
        return call;
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value) {
        return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysFalse());
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value, com.google.common.base.Predicate<com.google.javascript.rhino.Node> locals) {
        switch (value.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals));
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                if (value.getBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP)) {
                    return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.THIS :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.NAME :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.CALL :
                return (com.google.javascript.jscomp.NodeUtil.callHasLocalResult(value) || com.google.javascript.jscomp.NodeUtil.isToStringMethodCall(value)) || locals.apply(value);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.newHasLocalResult(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return true;
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.IN :
                return true;
            default :
                if ((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(value) || com.google.javascript.jscomp.NodeUtil.isSimpleOperator(value)) || com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return true;
                }
                throw new java.lang.IllegalStateException((("Unexpected expression node" + value) + "\n parent:") + value.getParent());
        }
    }

    private static com.google.javascript.rhino.Node getNthSibling(com.google.javascript.rhino.Node first, int index) {
        com.google.javascript.rhino.Node sibling = first;
        while ((index != 0) && (sibling != null)) {
            sibling = sibling.getNext();
            index--;
        } 
        return sibling;
    }

    static com.google.javascript.rhino.Node getArgumentForFunction(com.google.javascript.rhino.Node function, int index) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
    }

    static com.google.javascript.rhino.Node getArgumentForCallOrNew(com.google.javascript.rhino.Node call, int index) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isCallOrNew(call));
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(call.getFirstChild().getNext(), index);
    }

    private static boolean isToStringMethodCall(com.google.javascript.rhino.Node call) {
        com.google.javascript.rhino.Node getNode = call.getFirstChild();
        if (com.google.javascript.jscomp.NodeUtil.isGet(getNode)) {
            com.google.javascript.rhino.Node propNode = getNode.getLastChild();
            return propNode.isString() && "toString".equals(propNode.getString());
        }
        return false;
    }

    static com.google.javascript.rhino.JSDocInfo getBestJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info == null) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent == null) {
                return null;
            }
            if (parent.isName()) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            } else if (parent.isAssign()) {
                return parent.getJSDocInfo();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent.getJSDocInfo();
            } else if (parent.isFunction()) {
                return parent.getJSDocInfo();
            } else if (parent.isVar() && parent.hasOneChild()) {
                return parent.getJSDocInfo();
            } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            }
        }
        return info;
    }

    static com.google.javascript.rhino.Node getBestLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n);
        if (isFunctionDeclaration) {
            return n.getFirstChild();
        } else if (parent.isName()) {
            return parent;
        } else if (parent.isAssign()) {
            return parent.getFirstChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
            return parent;
        } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(parent);
        }
        return null;
    }

    static com.google.javascript.rhino.Node getBestLValueOwner(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
        } else if (com.google.javascript.jscomp.NodeUtil.isGet(lValue)) {
            return lValue.getFirstChild();
        }
        return null;
    }

    static java.lang.String getBestLValueName(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            com.google.javascript.rhino.Node owner = com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
            if (owner != null) {
                java.lang.String ownerName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(owner);
                if (ownerName != null) {
                    return (ownerName + ".") + com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(lValue);
                }
            }
            return null;
        }
        return lValue.getQualifiedName();
    }

    static boolean isExpressionResultUsed(com.google.javascript.rhino.Node expr) {
        com.google.javascript.rhino.Node parent = expr.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return false;
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return expr == parent.getFirstChild() ? true : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.COMMA :
                return expr == parent.getFirstChild() ? false : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent.getChildAtIndex(1) == expr;
                }
                break;
        }
        return true;
    }

    static boolean isExecutedExactlyOnce(com.google.javascript.rhino.Node n) {
        inspect : do {
            com.google.javascript.rhino.Node parent = n.getParent();
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.FOR :
                    if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                        if (parent.getChildAtIndex(1) != n) {
                            return false;
                        }
                    } else if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.DO :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if ((!com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) || (parent.getLastChild() != n)) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                    return false;
                case com.google.javascript.rhino.Token.SCRIPT :
                case com.google.javascript.rhino.Token.FUNCTION :
                    break inspect;
            }
        } while ((n = n.getParent()) != null );
        return true;
    }

    static com.google.javascript.rhino.Node booleanNode(boolean value) {
        return value ? com.google.javascript.rhino.IR.trueNode() : com.google.javascript.rhino.IR.falseNode();
    }

    static com.google.javascript.rhino.Node numberNode(double value, com.google.javascript.rhino.Node srcref) {
        com.google.javascript.rhino.Node result;
        if (java.lang.Double.isNaN(value)) {
            result = com.google.javascript.rhino.IR.name("NaN");
        } else if (value == java.lang.Double.POSITIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.name("Infinity");
        } else if (value == java.lang.Double.NEGATIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.neg(com.google.javascript.rhino.IR.name("Infinity"));
        } else {
            result = com.google.javascript.rhino.IR.number(value);
        }
        if (srcref != null) {
            result.srcrefTree(srcref);
        }
        return result;
    }
}
[1220864] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659908496398
GPR[EPVATF]-1659908497549
GPR[SPS]-1659908497549
[1222883] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1530.
GPR[EPS]-1659908498416
GPR[ESUN]-1659908498416
GPR[SSUN]-1659908498416
-1147408099
GPR[SPVATF]-1659908498646
GPR[EPVATF]-1659908498943
GPR[SPS]-1659908498943
[1223983] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:268.
GPR[EPS]-1659908499516
GPR[ESUN]-1659908499516
GPR[SSUN]-1659908499516
1187751237
GPR[ESUN]-1659908499794
GPR[SSUN]-1659908499794
1795686761
GPR[ESUN]-1659908500026
GPR[SSUN]-1659908500026
1613130706
GPR[ESUN]-1659908500232
GPR[SSUN]-1659908500232
1613130706
GPR[ESUN]-1659908500436
GPR[SSUN]-1659908500436
1613130706
GPR[SPVATF]-1659908500641
GPR[EPVATF]-1659908500824
[1225291] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908500824
GPR[SSUN]-1659908500824
1187751237
GPR[ESUN]-1659908501103
GPR[SSUN]-1659908501103
1187751237
GPR[SPVATF]-1659908501379
GPR[EPVATF]-1659908501836
GPR[SPS]-1659908501836
[1227020] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2718.
GPR[EPS]-1659908502553
GPR[ESUN]-1659908502553
GPR[SSUN]-1659908502553
1187751237
GPR[SPVATF]-1659908502834
GPR[EPVATF]-1659908503308
GPR[SPS]-1659908503308
[1228480] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2717.
GPR[EPS]-1659908504013
GPR[SPVATF]-1659908504013
GPR[EPVATF]-1659908504492
GPR[SPS]-1659908504492
[1229666] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2717.
GPR[EPS]-1659908505199
GPR[ESUN]-1659908505199
GPR[SSUN]-1659908505199
1187751237
GPR[SPVATF]-1659908505481
GPR[EPVATF]-1659908505995
GPR[SPS]-1659908505995
[1231169] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2715.
GPR[EPS]-1659908506702
GPR[ESUN]-1659908506702
GPR[SSUN]-1659908506702
1795686761
GPR[SPVATF]-1659908506941
GPR[EPVATF]-1659908508165
GPR[SPS]-1659908508165
[1233359] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$BasicBlock:710.
GPR[EPS]-1659908508892
GPR[SPVATF]-1659908508892
GPR[EPVATF]-1659908510154
GPR[SPS]-1659908510154
[1235357] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$BasicBlock:710.
GPR[EPS]-1659908510890
GPR[ESUN]-1659908510890
GPR[SSUN]-1659908510890
1795686761
GPR[ESUN]-1659908520531
GPR[SSUN]-1659908520531
1795686761
GPR[ESUN]-1659908520879
GPR[SSUN]-1659908520879
-718432441
GPR[SPVATF]-1659908521094
GPR[EPVATF]-1659908521636
GPR[SPS]-1659908521636
[1247129] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:224.
GPR[EPS]-1659908522662
GPR[ESUN]-1659908522662
GPR[SSUN]-1659908522662
-718432441
GPR[SPVATF]-1659908522901
GPR[EPVATF]-1659908523645
GPR[SPS]-1659908523645
[1248824] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:223.
GPR[EPS]-1659908524357
GPR[ESUN]-1659908524357
GPR[SSUN]-1659908524357
-718432441
GPR[SPVATF]-1659908524573
GPR[EPVATF]-1659908525031
GPR[SPS]-1659908525031
[1250214] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:222.
GPR[EPS]-1659908525747
GPR[ESUN]-1659908525747
GPR[SSUN]-1659908525747
-1147408099
GPR[ESUN]-1659908525977
GPR[SSUN]-1659908525977
-1147408099
GPR[SPVATF]-1659908526223
GPR[EPVATF]-1659908527320
GPR[SPS]-1659908527320
[1252465] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals:67.
GPR[EPS]-1659908527998
GPR[ESUN]-1659908527998
GPR[SSUN]-1659908527998
-1147408099
GPR[ESUN]-1659908528227
GPR[SSUN]-1659908528227
-1147408099
GPR[ESUN]-1659908528453
GPR[SSUN]-1659908528453
-1147408099
GPR[ESUN]-1659908528696
GPR[SSUN]-1659908528697
-1147408099
GPR[SPVATF]-1659908528920
GPR[EPVATF]-1659908530021
GPR[SPS]-1659908530021
[1255248] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:89.
GPR[EPS]-1659908530781
GPR[ESUN]-1659908530781
GPR[SSUN]-1659908530781
-1147408099
GPR[SPVATF]-1659908531010
GPR[EPVATF]-1659908532127
GPR[SPS]-1659908532127
[1257322] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:88.
GPR[EPS]-1659908532855
GPR[SPVATF]-1659908532855
GPR[EPVATF]-1659908533941
GPR[SPS]-1659908533941
[1259196] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:88.
GPR[EPS]-1659908534729
GPR[ESUN]-1659908534729
GPR[SSUN]-1659908534729
-1147408099
GPR[ESUN]-1659908534974
GPR[SSUN]-1659908534974
-1147408099
GPR[SPVATF]-1659908535202
GPR[EPVATF]-1659908536295
GPR[SPS]-1659908536295
[1261517] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:85.
GPR[EPS]-1659908537050
GPR[ESUN]-1659908537050
GPR[SSUN]-1659908537050
765360635
GPR[ESUN]-1659908537273
GPR[SSUN]-1659908537273
765360635
GPR[SPVATF]-1659908537501
GPR[EPVATF]-1659908538827
GPR[SPS]-1659908538827
[1263887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AliasKeywords$VoidKeywordAliasSpecification:269.
GPR[EPS]-1659908539420
GPR[ESUN]-1659908539420
GPR[SSUN]-1659908539420
765360635
GPR[SPVATF]-1659908539642
GPR[EPVATF]-1659908540652
GPR[SPS]-1659908540652
[1265712] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AliasKeywords$VoidKeywordAliasSpecification:268.
GPR[EPS]-1659908541245
GPR[SPVATF]-1659908541245
GPR[EPVATF]-1659908542228
GPR[SPS]-1659908542228
[1267284] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AliasKeywords$VoidKeywordAliasSpecification:268.
GPR[EPS]-1659908542817
GPR[ESUN]-1659908542817
GPR[SSUN]-1659908542817
765360635
GPR[ESUN]-1659908543035
GPR[SSUN]-1659908543035
1212603240
GPR[SPVATF]-1659908543250
GPR[EPVATF]-1659908544283
GPR[SPS]-1659908544283
[1269325] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineSimpleMethods$InlineTrivialAccessors:76.
GPR[EPS]-1659908544858
GPR[ESUN]-1659908544858
GPR[SSUN]-1659908544858
-73832040
GPR[SPVATF]-1659908545051
GPR[EPVATF]-1659908546025
GPR[SPS]-1659908546025
[1271058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReorderConstantExpression:53.
GPR[EPS]-1659908546591
GPR[ESUN]-1659908546591
GPR[SSUN]-1659908546591
-73832040
GPR[SPVATF]-1659908546783
GPR[EPVATF]-1659908547824
GPR[SPS]-1659908547824
[1272829] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReorderConstantExpression:52.
GPR[EPS]-1659908548362
GPR[ESUN]-1659908548362
GPR[SSUN]-1659908548362
-73832040
GPR[SPVATF]-1659908548554
GPR[EPVATF]-1659908549581
GPR[SPS]-1659908549581
[1274578] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReorderConstantExpression:51.
GPR[EPS]-1659908550111
GPR[ESUN]-1659908550111
GPR[SSUN]-1659908550111
-73832040
GPR[ESUN]-1659908550300
GPR[SSUN]-1659908550300
-73832040
GPR[ESUN]-1659908550486
GPR[SSUN]-1659908550486
-73832040
GPR[SPVATF]-1659908550672
GPR[EPVATF]-1659908551713
GPR[SPS]-1659908551713
[1276731] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReorderConstantExpression:42.
GPR[EPS]-1659908552264
GPR[SPVATF]-1659908552265
GPR[EPVATF]-1659908553291
GPR[SPS]-1659908553291
[1278356] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReorderConstantExpression:42.
GPR[EPS]-1659908553889
GPR[ESUN]-1659908553889
GPR[SSUN]-1659908553889
-1147408099
GPR[SPVATF]-1659908559221
GPR[EPVATF]-1659908559627
GPR[SPS]-1659908559627
[1284925] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineObjectLiterals$InliningBehavior:197.
GPR[EPS]-1659908560459
GPR[ESUN]-1659908560459
GPR[SSUN]-1659908560459
234947553
GPR[ESUN]-1659908560655
GPR[SSUN]-1659908560655
234947553
GPR[SPVATF]-1659908560846
GPR[EPVATF]-1659908560918
[1285385] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908560918
GPR[EPVATF]-1659908560994
[1285461] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908560994
GPR[SSUN]-1659908560994
234947553
GPR[ESUN]-1659908561204
GPR[SSUN]-1659908561204
234947553
GPR[SPVATF]-1659908561390
GPR[EPVATF]-1659908561406
[1285873] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908561406
GPR[EPVATF]-1659908561420
[1285887] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908561420
GPR[SSUN]-1659908561420
234947553
GPR[SPVATF]-1659908561609
GPR[EPVATF]-1659908561623
[1286090] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908561623
GPR[SSUN]-1659908561623
234947553
GPR[ESUN]-1659908561811
GPR[SSUN]-1659908561811
234947553
GPR[ESUN]-1659908561999
GPR[SSUN]-1659908561999
234947553
GPR[SPVATF]-1659908562184
GPR[EPVATF]-1659908562199
[1286666] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908562199
GPR[SSUN]-1659908562199
234947553
GPR[SPVATF]-1659908562389
GPR[EPVATF]-1659908562404
[1286871] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908562404
GPR[SSUN]-1659908562404
234947553
GPR[SPVATF]-1659908562600
GPR[EPVATF]-1659908562615
[1287082] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908562615
GPR[SSUN]-1659908562615
234947553
GPR[ESUN]-1659908562802
GPR[SSUN]-1659908562802
234947553
GPR[ESUN]-1659908562989
GPR[SSUN]-1659908562989
234947553
GPR[SPVATF]-1659908563201
GPR[EPVATF]-1659908563216
[1287683] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908563216
GPR[SSUN]-1659908563216
234947553
GPR[SPVATF]-1659908563404
GPR[EPVATF]-1659908563419
[1287886] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908563419
GPR[SSUN]-1659908563419
234947553
GPR[ESUN]-1659908563607
GPR[SSUN]-1659908563607
234947553
GPR[SPVATF]-1659908563793
GPR[EPVATF]-1659908563808
[1288275] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908563808
GPR[SSUN]-1659908563808
234947553
GPR[SPVATF]-1659908563996
GPR[EPVATF]-1659908564010
[1288477] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908564010
GPR[SSUN]-1659908564010
234947553
GPR[ESUN]-1659908564198
GPR[SSUN]-1659908564198
791463039
GPR[ESUN]-1659908564405
GPR[SSUN]-1659908564405
791463039
GPR[SPVATF]-1659908564614
GPR[EPVATF]-1659908565574
GPR[SPS]-1659908565574
[1290654] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$SetterReducer:516.
GPR[EPS]-1659908566187
GPR[ESUN]-1659908566187
GPR[SSUN]-1659908566187
890942016
GPR[SPVATF]-1659908566421
GPR[EPVATF]-1659908566439
[1290906] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908566440
GPR[EPVATF]-1659908566457
[1290924] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908566457
GPR[SSUN]-1659908566457
890942016
GPR[SPVATF]-1659908566661
GPR[EPVATF]-1659908566678
[1291146] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908566679
GPR[SSUN]-1659908566679
890942016
GPR[ESUN]-1659908566868
GPR[SSUN]-1659908566868
890942016
GPR[SPVATF]-1659908567056
GPR[EPVATF]-1659908567074
[1291541] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908567074
GPR[SSUN]-1659908567074
890942016
GPR[SPVATF]-1659908567264
GPR[EPVATF]-1659908567282
[1291749] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908567282
GPR[EPVATF]-1659908567299
[1291767] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908567300
GPR[SSUN]-1659908567300
890942016
GPR[SPVATF]-1659908567490
GPR[EPVATF]-1659908567507
[1291974] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908567507
GPR[SSUN]-1659908567507
890942016
GPR[SPVATF]-1659908567696
GPR[EPVATF]-1659908567714
[1292181] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908567714
GPR[EPVATF]-1659908567731
[1292199] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908567732
GPR[SSUN]-1659908567732
890942016
GPR[ESUN]-1659908567921
GPR[SSUN]-1659908567921
890942016
GPR[SPVATF]-1659908568109
GPR[EPVATF]-1659908568128
[1292595] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908568128
GPR[SSUN]-1659908568128
890942016
GPR[SPVATF]-1659908568320
GPR[EPVATF]-1659908568339
[1292806] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908568339
GPR[SSUN]-1659908568339
890942016
GPR[SPVATF]-1659908568533
GPR[EPVATF]-1659908568552
[1293019] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908568552
GPR[SSUN]-1659908568552
890942016
GPR[ESUN]-1659908568741
GPR[SSUN]-1659908568741
1613130706
GPR[SPVATF]-1659908568947
GPR[EPVATF]-1659908569124
[1293591] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908569124
GPR[EPVATF]-1659908569301
[1293769] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908569302
GPR[SSUN]-1659908569302
1613130706
GPR[SPVATF]-1659908569510
GPR[EPVATF]-1659908569690
[1294157] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908569690
GPR[SSUN]-1659908569690
1613130706
GPR[SPVATF]-1659908569898
GPR[EPVATF]-1659908570076
[1294543] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659908570076
GPR[EPVATF]-1659908570251
[1294718] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659908570251
GPR[SSUN]-1659908570251
1795686761
GPR[SPVATF]-1659908570504
GPR[EPVATF]-1659908571537
GPR[SPS]-1659908571537
[1296728] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:199.
GPR[EPS]-1659908572261
GPR[ESUN]-1659908572261
GPR[SSUN]-1659908572261
1795686761
GPR[SPVATF]-1659908572496
GPR[EPVATF]-1659908573567
GPR[SPS]-1659908573567
[1298764] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback:162.
GPR[EPS]-1659908574297
GPR[ESUN]-1659908574297
GPR[SSUN]-1659908574297
80988634
GPR[ESUN]-1659908574499
GPR[SSUN]-1659908574499
1795686761
GPR[ESUN]-1659908574729
GPR[SSUN]-1659908574729
1103597247
GPR[SPVATF]-1659908574957
GPR[EPVATF]-1659908575906
GPR[SPS]-1659908575906
[1300752] ERROR ConstraintModelBuilder - Unable to compile the change: 
class InlineVariables implements com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    enum Mode {

        CONSTANTS_ONLY,
        LOCALS_ONLY,
        ALL;}

    private final com.google.javascript.jscomp.InlineVariables.Mode mode;

    private final boolean inlineAllStrings;

    private final com.google.javascript.jscomp.InlineVariables.IdentifyConstants identifyConstants = new com.google.javascript.jscomp.InlineVariables.IdentifyConstants();

    InlineVariables(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.InlineVariables.Mode mode, boolean inlineAllStrings) {
        this.compiler = compiler;
        this.mode = mode;
        this.inlineAllStrings = inlineAllStrings;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.ReferenceCollectingCallback callback = new com.google.javascript.jscomp.ReferenceCollectingCallback(compiler, new com.google.javascript.jscomp.InlineVariables.InliningBehavior(), getFilterForMode());
        callback.process(externs, root);
    }

    private com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> getFilterForMode() {
        switch (mode) {
            case ALL :
                return com.google.common.base.Predicates.<com.google.javascript.jscomp.Scope.Var>alwaysTrue();
            case LOCALS_ONLY :
                return new com.google.javascript.jscomp.InlineVariables.IdentifyLocals();
            case CONSTANTS_ONLY :
                return new com.google.javascript.jscomp.InlineVariables.IdentifyConstants();
            default :
                throw new java.lang.IllegalStateException();
        }
    }

    private class IdentifyConstants implements com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return var.isConst();
        }
    }

    private class IdentifyLocals implements com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return var.scope.isLocal();
        }
    }

    private static class AliasCandidate {
        private final com.google.javascript.jscomp.Scope.Var alias;

        private final com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo;

        AliasCandidate(com.google.javascript.jscomp.Scope.Var alias, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {
            this.alias = alias;
            this.refInfo = refInfo;
        }
    }

    private class InliningBehavior implements com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior {
        private final java.util.Set<com.google.javascript.jscomp.Scope.Var> staleVars = com.google.common.collect.Sets.newHashSet();

        final java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.jscomp.InlineVariables.AliasCandidate> aliasCandidates = com.google.common.collect.Maps.newHashMap();

        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            collectAliasCandidates(t, referenceMap);
            doInlinesForScope(t, referenceMap);
        }

        private void collectAliasCandidates(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            if (mode != com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY) {
                for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                    com.google.javascript.jscomp.Scope.Var v = it.next();
                    com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                    if ((((referenceInfo != null) && (referenceInfo.references.size() >= 2)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) {
                        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
                        com.google.javascript.rhino.Node value = init.getAssignedValue();
                        if ((value != null) && value.isName()) {
                            aliasCandidates.put(value, new com.google.javascript.jscomp.InlineVariables.AliasCandidate(v, referenceInfo));
                        }
                    }
                }
            }
        }

        private void doInlinesForScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            boolean maybeModifiedArguments = maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);
            for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                com.google.javascript.jscomp.Scope.Var v = it.next();
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                if ((referenceInfo == null) || isVarInlineForbidden(v)) {
                    continue;
                } else if (isInlineableDeclaredConstant(v, referenceInfo)) {
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReferenceForConstants();
                    com.google.javascript.rhino.Node value = init.getAssignedValue();
                    inlineDeclaredConstant(v, value, referenceInfo.references);
                    staleVars.add(v);
                } else if (mode == com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY) {
                    continue;
                } else {
                    inlineNonConstants(v, referenceInfo, maybeModifiedArguments);
                }
            }
        }

        private boolean maybeEscapedOrModifiedArguments(com.google.javascript.jscomp.Scope scope, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            if (scope.isLocal()) {
                com.google.javascript.jscomp.Scope.Var arguments = scope.getArgumentsVar();
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refs = referenceMap.getReferences(arguments);
                if ((refs != null) && (!refs.references.isEmpty())) {
                    for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : refs.references) {
                        com.google.javascript.rhino.Node refNode = ref.getNode();
                        com.google.javascript.rhino.Node refParent = ref.getParent();
                        if (!((com.google.javascript.jscomp.NodeUtil.isGet(refParent) && (refNode == ref.getParent().getFirstChild())) && (!isLValue(refParent)))) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private boolean isLValue(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return (parent.isInc() || parent.isDec()) || (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n));
        }

        private void inlineNonConstants(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo, boolean maybeModifiedArguments) {
            int refCount = referenceInfo.references.size();
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration = referenceInfo.references.get(0);
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
            int firstRefAfterInit = (declaration == init) ? 2 : 3;
            if ((refCount > 1) && isImmutableAndWellDefinedVariable(v, referenceInfo)) {
                com.google.javascript.rhino.Node value;
                if (init != null) {
                    value = init.getAssignedValue();
                } else {
                    com.google.javascript.rhino.Node srcLocation = declaration.getNode();
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(194).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("init",init);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("com.google.javascript.jscomp.InlineVariables.this.compiler",com.google.javascript.jscomp.InlineVariables.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.aliasCandidates",com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.aliasCandidates);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("firstRefAfterInit",firstRefAfterInit);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("com.google.javascript.jscomp.InlineVariables.this.inlineAllStrings",com.google.javascript.jscomp.InlineVariables.this.inlineAllStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("srcLocation",srcLocation);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("declaration",declaration);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("maybeModifiedArguments",maybeModifiedArguments);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("com.google.javascript.jscomp.InlineVariables.this.identifyConstants",com.google.javascript.jscomp.InlineVariables.this.identifyConstants);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("refCount",refCount);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("com.google.javascript.jscomp.InlineVariables.this.mode",com.google.javascript.jscomp.InlineVariables.this.mode);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("v",v);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.staleVars",com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.staleVars);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectInput("referenceInfo",referenceInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(194).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        value = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);

                }
                com.google.common.base.Preconditions.checkNotNull(value);
                inlineWellDefinedVariable(v, value, referenceInfo.references);
                staleVars.add(v);
            } else if (refCount == firstRefAfterInit) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);
                if (canInline(declaration, init, reference)) {
                    inline(v, declaration, init, reference);
                    staleVars.add(v);
                }
            } else if ((declaration != init) && (refCount == 2)) {
                if (isValidDeclaration(declaration) && isValidInitialization(init)) {
                    com.google.javascript.rhino.Node value = init.getAssignedValue();
                    com.google.common.base.Preconditions.checkNotNull(value);
                    inlineWellDefinedVariable(v, value, referenceInfo.references);
                    staleVars.add(v);
                }
            }
            if ((((!maybeModifiedArguments) && (!staleVars.contains(v))) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) {
                java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs = referenceInfo.references;
                for (int i = 1; i < refs.size(); i++) {
                    com.google.javascript.rhino.Node nameNode = refs.get(i).getNode();
                    if (aliasCandidates.containsKey(nameNode)) {
                        com.google.javascript.jscomp.InlineVariables.AliasCandidate candidate = aliasCandidates.get(nameNode);
                        if ((!staleVars.contains(candidate.alias)) && (!isVarInlineForbidden(candidate.alias))) {
                            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference aliasInit;
                            aliasInit = candidate.refInfo.getInitializingReference();
                            com.google.javascript.rhino.Node value = aliasInit.getAssignedValue();
                            com.google.common.base.Preconditions.checkNotNull(value);
                            inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references);
                            staleVars.add(candidate.alias);
                        }
                    }
                }
            }
        }

        private void blacklistVarReferencesInTree(com.google.javascript.rhino.Node root, com.google.javascript.jscomp.Scope scope) {
            for (com.google.javascript.rhino.Node c = root.getFirstChild(); c != null; c = c.getNext()) {
                blacklistVarReferencesInTree(c, scope);
            }
            if (root.isName()) {
                staleVars.add(scope.getVar(root.getString()));
            }
        }

        private boolean isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var var) {
            return ((var.isExtern() || compiler.getCodingConvention().isExported(var.name)) || com.google.javascript.jscomp.RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)) || staleVars.contains(var);
        }

        private void inline(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            com.google.javascript.rhino.Node value = init.getAssignedValue();
            com.google.common.base.Preconditions.checkState(value != null);
            boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(value);
            inlineValue(v, reference, value.detachFromParent());
            if (declaration != init) {
                com.google.javascript.rhino.Node expressRoot = init.getGrandparent();
                com.google.common.base.Preconditions.checkState(expressRoot.isExprResult());
                com.google.javascript.jscomp.NodeUtil.removeChild(expressRoot.getParent(), expressRoot);
            }
            if (!isFunctionDeclaration) {
                removeDeclaration(declaration);
            } else {
                compiler.reportCodeChange();
            }
        }

        private void inlineWellDefinedVariable(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.rhino.Node value, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl = refSet.get(0);
            for (int i = 1; i < refSet.size(); i++) {
                inlineValue(v, refSet.get(i), value.cloneTree());
            }
            removeDeclaration(decl);
        }

        private void inlineDeclaredConstant(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.rhino.Node value, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl = null;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference r : refSet) {
                if (r.getNode() == v.getNameNode()) {
                    decl = r;
                } else {
                    inlineValue(v, r, value.cloneTree());
                }
            }
            removeDeclaration(decl);
        }

        private void removeDeclaration(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration) {
            com.google.javascript.rhino.Node varNode = declaration.getParent();
            com.google.javascript.rhino.Node grandparent = declaration.getGrandparent();
            varNode.removeChild(declaration.getNode());
            if (!varNode.hasChildren()) {
                com.google.common.base.Preconditions.checkState(varNode.isVar());
                com.google.javascript.jscomp.NodeUtil.removeChild(grandparent, varNode);
            }
            compiler.reportCodeChange();
        }

        private void inlineValue(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref, com.google.javascript.rhino.Node value) {
            if (ref.isSimpleAssignmentToName()) {
                ref.getGrandparent().replaceChild(ref.getParent(), value);
            } else {
                ref.getParent().replaceChild(ref.getNode(), value);
            }
            blacklistVarReferencesInTree(value, v.scope);
            compiler.reportCodeChange();
        }

        private boolean isInlineableDeclaredConstant(com.google.javascript.jscomp.Scope.Var var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {
            if (!identifyConstants.apply(var)) {
                return false;
            }
            if (!refInfo.isAssignedOnceInLifetime()) {
                return false;
            }
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = refInfo.getInitializingReferenceForConstants();
            if (init == null) {
                return false;
            }
            com.google.javascript.rhino.Node value = init.getAssignedValue();
            if (value == null) {
                return false;
            }
            if (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                return false;
            }
            return (!value.isString()) || isStringWorthInlining(var, refInfo.references);
        }

        private boolean isStringWorthInlining(com.google.javascript.jscomp.Scope.Var var, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs) {
            if ((!inlineAllStrings) && (!var.isDefine())) {
                int len = var.getInitialValue().getString().length() + "''".length();
                int noInlineBytes = ("var xx=;".length() + len) + (4 * (refs.size() - 1));
                int inlineBytes = (len - 1) * (refs.size() - 1);
                return noInlineBytes >= inlineBytes;
            }
            return true;
        }

        private boolean canInline(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            if (((!isValidDeclaration(declaration)) || (!isValidInitialization(initialization))) || (!isValidReference(reference))) {
                return false;
            }
            if ((declaration != initialization) && (!initialization.getGrandparent().isExprResult())) {
                return false;
            }
            if ((declaration.getBasicBlock() != initialization.getBasicBlock()) || (declaration.getBasicBlock() != reference.getBasicBlock())) {
                return false;
            }
            com.google.javascript.rhino.Node value = initialization.getAssignedValue();
            com.google.common.base.Preconditions.checkState(value != null);
            if ((value.isGetProp() && reference.getParent().isCall()) && (reference.getParent().getFirstChild() == reference.getNode())) {
                return false;
            }
            if (value.isFunction()) {
                com.google.javascript.rhino.Node callNode = reference.getParent();
                if (reference.getParent().isCall()) {
                    com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
                    com.google.javascript.jscomp.CodingConvention.SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);
                    if (relationship != null) {
                        return false;
                    }
                    if (convention.getSingletonGetterClassName(callNode) != null) {
                        return false;
                    }
                }
            }
            return canMoveAggressively(value) || canMoveModerately(initialization, reference);
        }

        private boolean canMoveAggressively(com.google.javascript.rhino.Node value) {
            return com.google.javascript.jscomp.NodeUtil.isLiteralValue(value, true) || value.isFunction();
        }

        private boolean canMoveModerately(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            java.util.Iterator<com.google.javascript.rhino.Node> it;
            if (initialization.getParent().isVar()) {
                it = com.google.javascript.jscomp.NodeIterators.LocalVarMotion.forVar(initialization.getNode(), initialization.getParent(), initialization.getGrandparent());
            } else if (initialization.getParent().isAssign()) {
                com.google.common.base.Preconditions.checkState(initialization.getGrandparent().isExprResult());
                it = com.google.javascript.jscomp.NodeIterators.LocalVarMotion.forAssign(initialization.getNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());
            } else {
                throw new java.lang.IllegalStateException("Unexpected initialization parent " + initialization.getParent().toStringTree());
            }
            com.google.javascript.rhino.Node targetName = reference.getNode();
            while (it.hasNext()) {
                com.google.javascript.rhino.Node curNode = it.next();
                if (curNode == targetName) {
                    return true;
                }
            } 
            return false;
        }

        private boolean isValidDeclaration(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration) {
            return (declaration.getParent().isVar() && (!declaration.getGrandparent().isFor())) || com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(declaration.getParent());
        }

        private boolean isValidInitialization(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization) {
            if (initialization == null) {
                return false;
            } else if (initialization.isDeclaration()) {
                if ((!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(initialization.getParent())) && (initialization.getNode().getFirstChild() == null)) {
                    return false;
                }
            } else {
                com.google.javascript.rhino.Node parent = initialization.getParent();
                com.google.common.base.Preconditions.checkState(parent.isAssign() && (parent.getFirstChild() == initialization.getNode()));
            }
            com.google.javascript.rhino.Node n = initialization.getAssignedValue();
            if (n.isFunction()) {
                return compiler.getCodingConvention().isInlinableFunction(n);
            }
            return true;
        }

        private boolean isValidReference(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            return (!reference.isDeclaration()) && (!reference.isLvalue());
        }

        private boolean isImmutableAndWellDefinedVariable(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {
            java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet = refInfo.references;
            int startingReadRef = 1;
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference refDecl = refSet.get(0);
            if (!isValidDeclaration(refDecl)) {
                return false;
            }
            boolean isNeverAssigned = refInfo.isNeverAssigned();
            if (!isNeverAssigned) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference refInit = refInfo.getInitializingReference();
                if (!isValidInitialization(refInit)) {
                    return false;
                }
                if (refDecl != refInit) {
                    com.google.common.base.Preconditions.checkState(refInit == refSet.get(1));
                    startingReadRef = 2;
                }
                if (!refInfo.isWellDefined()) {
                    return false;
                }
                com.google.javascript.rhino.Node value = refInit.getAssignedValue();
                com.google.common.base.Preconditions.checkNotNull(value);
                boolean isImmutableValueWorthInlining = com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) && ((!value.isString()) || isStringWorthInlining(v, refInfo.references));
                boolean isInlinableThisAlias = value.isThis() && (!refInfo.isEscaped());
                if ((!isImmutableValueWorthInlining) && (!isInlinableThisAlias)) {
                    return false;
                }
            }
            for (int i = startingReadRef; i < refSet.size(); i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = refSet.get(i);
                if (!isValidReference(ref)) {
                    return false;
                }
            }
            return true;
        }
    }
}
[1300752] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659908576285
GPR[SSUN]-1659908576285
1103597247
GPR[ESUN]-1659908576519
GPR[SSUN]-1659908576519
-1482759289
GPR[SPVATF]-1659908576721
GPR[EPVATF]-1659908577672
GPR[SPS]-1659908577672
[1302713] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.OptimizeReturns:94.
GPR[EPS]-1659908578246
GPR[ESUN]-1659908578246
GPR[SSUN]-1659908578246
791463039
GPR[SPVATF]-1659908578457
GPR[EPVATF]-1659908579436
GPR[SPS]-1659908579436
[1304532] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$IdentityReducer:330.
GPR[EPS]-1659908580065
GPR[SPVATF]-1659908580065
GPR[EPVATF]-1659908581037
GPR[SPS]-1659908581037
[1306214] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionRewriter$IdentityReducer:330.
GPR[EPS]-1659908581747
GPR[ESUN]-1659908581747
GPR[SSUN]-1659908581747
791463039
GPR[ESUN]-1659908581962
GPR[SSUN]-1659908581962
1187751237
GPR[SPVATF]-1659908582240
GPR[EPVATF]-1659908582637
GPR[SPS]-1659908582637
[1307848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2719.
GPR[EPS]-1659908583381
GPR[ESUN]-1659908583381
GPR[SSUN]-1659908583381
1187751237
GPR[ESUN]-1659908583658
GPR[SSUN]-1659908583658
-73832040
GPR[SPVATF]-1659908583849
GPR[EPVATF]-1659908584813
GPR[SPS]-1659908584813
[1309830] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReorderConstantExpression:38.
GPR[EPS]-1659908585363
GPR[SPVATF]-1659908585363
GPR[EPVATF]-1659908586371
GPR[SPS]-1659908586371
[1311421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReorderConstantExpression:38.
GPR[EPS]-1659908586954
GPR[ESUN]-1659908586954
GPR[SSUN]-1659908586954
-754411459
GPR[SPVATF]-1659908587149
GPR[EPVATF]-1659908588140
GPR[SPS]-1659908588140
[1313163] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ComposeWarningsGuard:134.
GPR[EPS]-1659908588696
GPR[ESUN]-1659908588696
GPR[SSUN]-1659908588696
1803458346
GPR[SPVATF]-1659908588943
GPR[EPVATF]-1659908589992
GPR[SPS]-1659908589992
[1315188] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:293.
GPR[EPS]-1659908590721
GPR[SPVATF]-1659908590721
GPR[EPVATF]-1659908591776
GPR[SPS]-1659908591776
[1316944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:293.
GPR[EPS]-1659908592477
GPR[ESUN]-1659908592477
GPR[SSUN]-1659908592477
1803458346
GPR[SPVATF]-1659908592715
GPR[EPVATF]-1659908593793
GPR[SPS]-1659908593793
[1318974] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AnalyzePrototypeProperties$ProcessProperties:286.
GPR[EPS]-1659908594507
GPR[ESUN]-1659908594508
GPR[SSUN]-1659908594508
-1765952779
GPR[ESUN]-1659908594725
GPR[SSUN]-1659908594725
-1765952779
GPR[SPVATF]-1659908594939
GPR[EPVATF]-1659908595997
GPR[SPS]-1659908595997
[1321104] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:192.
GPR[EPS]-1659908596637
GPR[ESUN]-1659908596637
GPR[SSUN]-1659908596637
-1765952779
GPR[SPVATF]-1659908600651
GPR[EPVATF]-1659908601948
GPR[SPS]-1659908601948
[1327080] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:191.
GPR[EPS]-1659908602613
GPR[ESUN]-1659908602613
GPR[SSUN]-1659908602613
-1119592721
GPR[ESUN]-1659908602842
GPR[SSUN]-1659908602842
-1119592721
GPR[SPVATF]-1659908603077
GPR[EPVATF]-1659908604041
GPR[SPS]-1659908604041
[1329122] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:260.
GPR[EPS]-1659908604655
GPR[ESUN]-1659908604655
GPR[SSUN]-1659908604656
-1119592721
GPR[SPVATF]-1659908604882
GPR[EPVATF]-1659908605860
GPR[SPS]-1659908605860
[1330958] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:259.
GPR[EPS]-1659908606491
GPR[ESUN]-1659908606491
GPR[SSUN]-1659908606491
944853999
GPR[SPVATF]-1659908606743
GPR[EPVATF]-1659908607680
GPR[SPS]-1659908607680
[1332785] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PeepholeFoldConstants:927.
GPR[EPS]-1659908608318
GPR[ESUN]-1659908608318
GPR[SSUN]-1659908608318
1187751237
GPR[SPVATF]-1659908608599
GPR[EPVATF]-1659908609740
GPR[SPS]-1659908609740
[1334847] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class NodeUtil {
    static final long MAX_POSITIVE_INTEGER_NUMBER = ((long) (java.lang.Math.pow(2, 53)));

    static final java.lang.String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";

    private static final java.util.Set<java.lang.String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList("Array", "Date", "Error", "Object", "RegExp", "XMLHttpRequest"));

    private NodeUtil() {
    }

    static com.google.javascript.rhino.jstype.TernaryValue getImpureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                return value.not();
            case com.google.javascript.rhino.Token.AND :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.and(rhs);
                }
            case com.google.javascript.rhino.Token.OR :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.or(rhs);
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.javascript.rhino.jstype.TernaryValue trueValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild().getNext());
                    com.google.javascript.rhino.jstype.TernaryValue falseValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    if (trueValue.equals(falseValue)) {
                        return trueValue;
                    } else {
                        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    }
                }
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.VOID :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            default :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
        }
    }

    static com.google.javascript.rhino.jstype.TernaryValue getPureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getString().length() > 0);
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getDouble() != 0);
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getLastChild()).not();
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.FALSE :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            case com.google.javascript.rhino.Token.VOID :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if ("undefined".equals(name) || "NaN".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                } else if ("Infinity".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.REGEXP :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
        }
        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
    }

    static java.lang.String getStringValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return n.getString();
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name)) {
                    return name;
                }
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(n.getDouble());
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.VOID :
                return "undefined";
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? "false" : "true";
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return com.google.javascript.jscomp.NodeUtil.arrayToString(n);
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "[object Object]";
        }
        return null;
    }

    static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    static java.lang.String getArrayElementStringValue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isNullOrUndefined(n) || n.isEmpty() ? "" : com.google.javascript.jscomp.NodeUtil.getStringValue(n);
    }

    static java.lang.String arrayToString(com.google.javascript.rhino.Node literal) {
        com.google.javascript.rhino.Node first = literal.getFirstChild();
        java.lang.StringBuilder result = new java.lang.StringBuilder();
        int nextSlot = 0;
        int nextSkipSlot = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            java.lang.String childValue = com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(n);
            if (childValue == null) {
                return null;
            }
            if (n != first) {
                result.append(',');
            }
            result.append(childValue);
            nextSlot++;
        }
        return result.toString();
    }

    static java.lang.Double getNumberValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
                return 1.0;
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
                return 0.0;
            case com.google.javascript.rhino.Token.NUMBER :
                return n.getDouble();
            case com.google.javascript.rhino.Token.VOID :
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return null;
                } else {
                    return java.lang.Double.NaN;
                }
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("undefined")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("NaN")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("Infinity")) {
                    return java.lang.Double.POSITIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NEG :
                if (((n.getChildCount() == 1) && n.getFirstChild().isName()) && n.getFirstChild().getString().equals("Infinity")) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? 0.0 : 1.0;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.jscomp.NodeUtil.getStringNumberValue(n.getString());
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                java.lang.String value = com.google.javascript.jscomp.NodeUtil.getStringValue(n);
                return value != null ? com.google.javascript.jscomp.NodeUtil.getStringNumberValue(value) : null;
        }
        return null;
    }

    static java.lang.Double getStringNumberValue(java.lang.String rawJsString) {
        if (rawJsString.contains("\u000b")) {
            return null;
        }
        java.lang.String s = com.google.javascript.jscomp.NodeUtil.trimJsWhiteSpace(rawJsString);
        if (s.length() == 0) {
            return 0.0;
        }
        if (((s.length() > 2) && (s.charAt(0) == '0')) && ((s.charAt(1) == 'x') || (s.charAt(1) == 'X'))) {
            try {
                return java.lang.Double.valueOf(java.lang.Integer.parseInt(s.substring(2), 16));
            } catch (java.lang.NumberFormatException e) {
                return java.lang.Double.NaN;
            }
        }
        if ((((s.length() > 3) && ((s.charAt(0) == '-') || (s.charAt(0) == '+'))) && (s.charAt(1) == '0')) && ((s.charAt(2) == 'x') || (s.charAt(2) == 'X'))) {
            return null;
        }
        if ((s.equals("infinity") || s.equals("-infinity")) || s.equals("+infinity")) {
            return null;
        }
        try {
            return java.lang.Double.parseDouble(s);
        } catch (java.lang.NumberFormatException e) {
            return java.lang.Double.NaN;
        }
    }

    static java.lang.String trimJsWhiteSpace(java.lang.String s) {
        int start = 0;
        int end = s.length();
        while ((end > 0) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(end - 1)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            end--;
        } 
        while ((start < end) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(start)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            start++;
        } 
        return s.substring(start, end);
    }

    static com.google.javascript.rhino.jstype.TernaryValue isStrWhiteSpaceChar(int c) {
        switch (c) {
            case '\u000b' :
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            case ' ' :
            case '\n' :
            case '\r' :
            case '\t' :
            case ' ' :
            case '\f' :
            case ' ' :
            case ' ' :
            case '﻿' :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            default :
                return java.lang.Character.getType(c) == java.lang.Character.SPACE_SEPARATOR ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    static java.lang.String getFunctionName(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        java.lang.String name = n.getFirstChild().getString();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return parent.getString();
            case com.google.javascript.rhino.Token.ASSIGN :
                return parent.getFirstChild().getQualifiedName();
            default :
                return (name != null) && (name.length() != 0) ? name : null;
        }
    }

    public static java.lang.String getNearestFunctionName(com.google.javascript.rhino.Node n) {
        java.lang.String name = com.google.javascript.jscomp.NodeUtil.getFunctionName(n);
        if (name != null) {
            return name;
        }
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SETTER_DEF :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return parent.getString();
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(parent);
        }
        return null;
    }

    static boolean isImmutableValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NEG :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                return ("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name);
        }
        return false;
    }

    public static boolean isSymmetricOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.MUL :
                return true;
        }
        return false;
    }

    public static boolean isRelationalOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
                return true;
        }
        return false;
    }

    public static int getInverseOperator(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.GT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.Token.LT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.Token.GE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.Token.LE :
                return com.google.javascript.rhino.Token.GE;
        }
        return com.google.javascript.rhino.Token.ERROR;
    }

    static boolean isLiteralValue(com.google.javascript.rhino.Node n, boolean includeFunctions) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ARRAYLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if ((!child.isEmpty()) && (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions))) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.REGEXP :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child.getFirstChild(), includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return includeFunctions && (!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n));
            default :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n);
        }
    }

    static boolean isValidDefineValue(com.google.javascript.rhino.Node val, java.util.Set<java.lang.String> defines) {
        switch (val.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.URSH :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines) && com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getLastChild(), defines);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.POS :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines);
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                if (val.isQualifiedName()) {
                    return defines.contains(val.getQualifiedName());
                }
        }
        return false;
    }

    static boolean isEmptyBlock(com.google.javascript.rhino.Node block) {
        if (!block.isBlock()) {
            return false;
        }
        for (com.google.javascript.rhino.Node n = block.getFirstChild(); n != null; n = n.getNext()) {
            if (!n.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    static boolean isSimpleOperator(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());
    }

    static boolean isSimpleOperatorType(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.COMMA :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.URSH :
                return true;
            default :
                return false;
        }
    }

    public static com.google.javascript.rhino.Node newExpr(com.google.javascript.rhino.Node child) {
        return com.google.javascript.rhino.IR.exprResult(child).srcref(child);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(n, null);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, true, compiler);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, null);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, false, compiler);
    }

    private static boolean checkForStateChangeHelper(com.google.javascript.rhino.Node n, boolean checkForNewObjects, com.google.javascript.jscomp.AbstractCompiler compiler) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.PARAM_LIST :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.EMPTY :
                break;
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (checkForNewObjects) {
                    return true;
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c.getFirstChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                }
                return false;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.REGEXP :
                if (checkForNewObjects) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.NAME :
                if (n.getFirstChild() != null) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                return checkForNewObjects || (!com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
            case com.google.javascript.rhino.Token.NEW :
                if (checkForNewObjects) {
                    return true;
                }
                if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n)) {
                    break;
                }
                return true;
            case com.google.javascript.rhino.Token.CALL :
                if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler)) {
                    break;
                }
                return true;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType())) {
                    break;
                }
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    com.google.javascript.rhino.Node assignTarget = n.getFirstChild();
                    if (assignTarget.isName()) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getFirstChild(), checkForNewObjects, compiler) || com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getLastChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.isGet(assignTarget)) {
                        com.google.javascript.rhino.Node current = assignTarget.getFirstChild();
                        if (com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(current)) {
                            return false;
                        }
                        while (com.google.javascript.jscomp.NodeUtil.isGet(current)) {
                            current = current.getFirstChild();
                        } 
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(current, true);
                    } else {
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(assignTarget, true);
                    }
                }
                return true;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c, checkForNewObjects, compiler)) {
                return true;
            }
        }
        return false;
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(callNode, null);
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isNew()) {
            throw new java.lang.IllegalStateException("Expected NEW node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName() && com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
            return false;
        }
        return true;
    }

    private static final java.util.Set<java.lang.String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("Object", "Array", "String", "Number", "Boolean", "RegExp", "Error");

    private static final java.util.Set<java.lang.String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("toString", "valueOf");

    private static final java.util.Set<java.lang.String> REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("test", "exec");

    private static final java.util.Set<java.lang.String> STRING_REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("match", "replace", "search", "split");

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(callNode, null);
    }

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode, @javax.annotation.Nullable
    com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isCall()) {
            throw new java.lang.IllegalStateException("Expected CALL node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
                return false;
            }
        } else if (nameNode.isGetProp()) {
            if (callNode.hasOneChild() && com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
                return false;
            }
            if (callNode.isOnlyModifiesThisCall() && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
                return false;
            }
            if (nameNode.getFirstChild().isName()) {
                if ("Math.floor".equals(nameNode.getQualifiedName())) {
                    return false;
                }
            }
            if ((compiler != null) && (!compiler.hasRegExpGlobalReferences())) {
                if (nameNode.getFirstChild().isRegExp() && com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    return false;
                } else if (nameNode.getFirstChild().isString() && com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    com.google.javascript.rhino.Node param = nameNode.getNext();
                    if ((param != null) && (param.isString() || param.isRegExp())) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static boolean callHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isCall());
        return (n.getSideEffectFlags() & com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS) > 0;
    }

    static boolean newHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isNew());
        return n.isOnlyModifiesThisCall();
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n, null);
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
            return true;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.CALL :
                return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NAME :
                return n.hasChildren();
            default :
                return false;
        }
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n) {
        java.util.Set<java.lang.String> emptySet = java.util.Collections.emptySet();
        return com.google.javascript.jscomp.NodeUtil.canBeSideEffected(n, emptySet);
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n, java.util.Set<java.lang.String> knownConstants) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.NEW :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return (!com.google.javascript.jscomp.NodeUtil.isConstantName(n)) && (!knownConstants.contains(n.getString()));
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(c, knownConstants)) {
                return true;
            }
        }
        return false;
    }

    static int precedence(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.COMMA :
                return 0;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN :
                return 1;
            case com.google.javascript.rhino.Token.HOOK :
                return 2;
            case com.google.javascript.rhino.Token.OR :
                return 3;
            case com.google.javascript.rhino.Token.AND :
                return 4;
            case com.google.javascript.rhino.Token.BITOR :
                return 5;
            case com.google.javascript.rhino.Token.BITXOR :
                return 6;
            case com.google.javascript.rhino.Token.BITAND :
                return 7;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return 8;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.IN :
                return 9;
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return 10;
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
                return 11;
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
                return 12;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                return 13;
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
                return 15;
            default :
                throw new java.lang.Error(((("Unknown precedence for " + com.google.javascript.rhino.Token.name(type)) + " (type ") + type) + ")");
        }
    }

    static boolean valueCheck(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.valueCheck(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.valueCheck(n.getFirstChild(), p) && com.google.javascript.jscomp.NodeUtil.valueCheck(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.valueCheck(n.getFirstChild().getNext(), p) && com.google.javascript.jscomp.NodeUtil.valueCheck(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static class NumbericResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isNumericResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate NUMBERIC_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate();

    static boolean isNumericResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.valueCheck(n, com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);
    }

    static boolean isNumericResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                return (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getFirstChild())) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getLastChild()));
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.NUMBER :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("NaN")) {
                    return true;
                }
                if (name.equals("Infinity")) {
                    return true;
                }
                return false;
            default :
                return false;
        }
    }

    static class BooleanResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isBooleanResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate BOOLEAN_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate();

    static boolean isBooleanResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.valueCheck(n, com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);
    }

    static boolean isBooleanResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.DELPROP :
                return true;
            default :
                return false;
        }
    }

    static boolean isUndefined(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.VOID :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return n.getString().equals("undefined");
        }
        return false;
    }

    static boolean isNullOrUndefined(com.google.javascript.rhino.Node n) {
        return n.isNull() || com.google.javascript.jscomp.NodeUtil.isUndefined(n);
    }

    static class MayBeStringResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate MAY_BE_STRING_PREDICATE = new com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate();

    static boolean mayBeString(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayBeString(n, true);
    }

    static boolean mayBeString(com.google.javascript.rhino.Node n, boolean recurse) {
        if (recurse) {
            return com.google.javascript.jscomp.NodeUtil.valueCheck(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);
        } else {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static boolean mayBeStringHelper(com.google.javascript.rhino.Node n) {
        return (((!com.google.javascript.jscomp.NodeUtil.isNumericResult(n)) && (!com.google.javascript.jscomp.NodeUtil.isBooleanResult(n))) && (!com.google.javascript.jscomp.NodeUtil.isUndefined(n))) && (!n.isNull());
    }

    static boolean isAssociative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isCommutative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return true;
        }
        return false;
    }

    static int getOpFromAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.MOD;
        }
        throw new java.lang.IllegalArgumentException("Not an assignment op:" + n);
    }

    static boolean containsFunction(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.FUNCTION);
    }

    static boolean referencesThis(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node start = (n.isFunction()) ? n.getLastChild() : n;
        return com.google.javascript.jscomp.NodeUtil.containsType(start, com.google.javascript.rhino.Token.THIS, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isGet(com.google.javascript.rhino.Node n) {
        return n.isGetProp() || n.isGetElem();
    }

    static boolean isVarDeclaration(com.google.javascript.rhino.Node n) {
        return n.isName() && n.getParent().isVar();
    }

    static com.google.javascript.rhino.Node getAssignedValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isName());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent.isVar()) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(210).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectInput("com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(210).collectionEnds();
            }
            if (runtimeAngelicValue)
                return n.getFirstChild();

        } else if (parent.isAssign() && (parent.getFirstChild() == n)) {
            return n.getNext();
        } else {
            return null;
        }
    }

    static boolean isExprAssign(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isAssign();
    }

    static boolean isExprCall(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isCall();
    }

    static boolean isForIn(com.google.javascript.rhino.Node n) {
        return n.isFor() && (n.getChildCount() == 3);
    }

    static boolean isLoopStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getLoopCodeBlock(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getFirstChild();
            default :
                return null;
        }
    }

    static boolean isWithinLoop(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node parent : n.getAncestors()) {
            if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(parent)) {
                return true;
            }
            if (parent.isFunction()) {
                break;
            }
        }
        return false;
    }

    static boolean isControlStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                return false;
        }
    }

    static boolean isControlStructureCodeBlock(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.WITH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.DO :
                return parent.getFirstChild() == n;
            case com.google.javascript.rhino.Token.IF :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.TRY :
                return (parent.getFirstChild() == n) || (parent.getLastChild() == n);
            case com.google.javascript.rhino.Token.CATCH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructure(parent));
                return false;
        }
    }

    static com.google.javascript.rhino.Node getConditionExpression(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.FOR :
                switch (n.getChildCount()) {
                    case 3 :
                        return null;
                    case 4 :
                        return n.getFirstChild().getNext();
                }
                throw new java.lang.IllegalArgumentException("malformed 'for' statement " + n);
            case com.google.javascript.rhino.Token.CASE :
                return null;
        }
        throw new java.lang.IllegalArgumentException(n + " does not have a condition.");
    }

    static boolean isStatementBlock(com.google.javascript.rhino.Node n) {
        return n.isScript() || n.isBlock();
    }

    static boolean isStatement(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isStatementParent(n.getParent());
    }

    static boolean isStatementParent(com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(parent != null);
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
                return true;
            default :
                return false;
        }
    }

    static boolean isSwitchCase(com.google.javascript.rhino.Node n) {
        return n.isCase() || n.isDefaultCase();
    }

    static boolean isReferenceName(com.google.javascript.rhino.Node n) {
        return n.isName() && (!n.getString().isEmpty());
    }

    static boolean isTryFinallyNode(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {
        return (parent.isTry() && (parent.getChildCount() == 3)) && (child == parent.getLastChild());
    }

    static boolean isTryCatchNodeContainer(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        return parent.isTry() && (parent.getFirstChild().getNext() == n);
    }

    static void removeChild(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, node)) {
            if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent))) {
                parent.removeChild(node);
            } else {
                node.detachChildren();
            }
        } else if (node.isCatch()) {
            com.google.javascript.rhino.Node tryNode = node.getParent().getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachFromParent();
        } else if (com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(node)) {
            com.google.javascript.rhino.Node tryNode = node.getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachChildren();
        } else if (node.isBlock()) {
            node.detachChildren();
        } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent) || com.google.javascript.jscomp.NodeUtil.isSwitchCase(node)) {
            parent.removeChild(node);
        } else if (parent.isVar()) {
            if (parent.hasMoreThanOneChild()) {
                parent.removeChild(node);
            } else {
                parent.removeChild(node);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
            }
        } else if (parent.isLabel() && (node == parent.getLastChild())) {
            parent.removeChild(node);
            com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
        } else if (parent.isFor() && (parent.getChildCount() == 4)) {
            parent.replaceChild(node, com.google.javascript.rhino.IR.empty());
        } else {
            throw new java.lang.IllegalStateException((("Invalid attempt to remove node: " + node.toString()) + " of ") + parent.toString());
        }
    }

    static void maybeAddFinally(com.google.javascript.rhino.Node tryNode) {
        com.google.common.base.Preconditions.checkState(tryNode.isTry());
        if (!com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode)) {
            tryNode.addChildrenToBack(com.google.javascript.rhino.IR.block().srcref(tryNode));
        }
    }

    static boolean tryMergeBlock(com.google.javascript.rhino.Node block) {
        com.google.common.base.Preconditions.checkState(block.isBlock());
        com.google.javascript.rhino.Node parent = block.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)) {
            com.google.javascript.rhino.Node previous = block;
            while (block.hasChildren()) {
                com.google.javascript.rhino.Node child = block.removeFirstChild();
                parent.addChildAfter(child, previous);
                previous = child;
            } 
            parent.removeChild(block);
            return true;
        } else {
            return false;
        }
    }

    static boolean isCallOrNew(com.google.javascript.rhino.Node node) {
        return node.isCall() || node.isNew();
    }

    static com.google.javascript.rhino.Node getFunctionBody(com.google.javascript.rhino.Node fn) {
        com.google.common.base.Preconditions.checkArgument(fn.isFunction());
        return fn.getLastChild();
    }

    static boolean containsCall(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.CALL);
    }

    static boolean isFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return n.isFunction() && com.google.javascript.jscomp.NodeUtil.isStatement(n);
    }

    static boolean isHoistedFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) && (n.getParent().isScript() || n.getParent().getParent().isFunction());
    }

    static boolean isFunctionExpression(com.google.javascript.rhino.Node n) {
        return n.isFunction() && (!com.google.javascript.jscomp.NodeUtil.isStatement(n));
    }

    static boolean isEmptyFunctionExpression(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(node) && com.google.javascript.jscomp.NodeUtil.isEmptyBlock(node.getLastChild());
    }

    static boolean isVarArgsFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkArgument(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(function.getLastChild(), "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isObjectCallMethod(com.google.javascript.rhino.Node callNode, java.lang.String methodName) {
        if (callNode.isCall()) {
            com.google.javascript.rhino.Node functionIndentifyingExpression = callNode.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGet(functionIndentifyingExpression)) {
                com.google.javascript.rhino.Node last = functionIndentifyingExpression.getLastChild();
                if ((last != null) && last.isString()) {
                    java.lang.String propName = last.getString();
                    return propName.equals(methodName);
                }
            }
        }
        return false;
    }

    static boolean isFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "call");
    }

    static boolean isFunctionObjectApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "apply");
    }

    static boolean isFunctionObjectCallOrApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode) || com.google.javascript.jscomp.NodeUtil.isFunctionObjectApply(callNode);
    }

    static boolean isSimpleFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        if (com.google.javascript.jscomp.NodeUtil.isFunctionObjectCall(callNode)) {
            if (callNode.getFirstChild().getFirstChild().isName()) {
                return true;
            }
        }
        return false;
    }

    static boolean isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        return (parent.isAssign() && (parent.getFirstChild() == n)) || parent.isVar();
    }

    static boolean isLValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument((n.isName() || n.isGetProp()) || n.isGetElem());
        com.google.javascript.rhino.Node parent = n.getParent();
        return (((((((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || (com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n))) || parent.isVar()) || (parent.isFunction() && (parent.getFirstChild() == n))) || parent.isDec()) || parent.isInc()) || parent.isParamList()) || parent.isCatch();
    }

    static boolean isObjectLitKey(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String getObjectLitKeyName(com.google.javascript.rhino.Node key) {
        switch (key.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return key.getString();
        }
        throw new java.lang.IllegalStateException("Unexpected node type: " + key);
    }

    static com.google.javascript.rhino.jstype.JSType getObjectLitKeyTypeFromValueType(com.google.javascript.rhino.Node key, com.google.javascript.rhino.jstype.JSType valueType) {
        if (valueType != null) {
            switch (key.getType()) {
                case com.google.javascript.rhino.Token.GETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        valueType = fntype.getReturnType();
                    } else {
                        return null;
                    }
                    break;
                case com.google.javascript.rhino.Token.SETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        com.google.javascript.rhino.Node param = fntype.getParametersNode().getFirstChild();
                        valueType = param.getJSType();
                    } else {
                        return null;
                    }
                    break;
            }
        }
        return valueType;
    }

    static boolean isGetOrSetKey(com.google.javascript.rhino.Node node) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String opToStr(int operator) {
        switch (operator) {
            case com.google.javascript.rhino.Token.BITOR :
                return "|";
            case com.google.javascript.rhino.Token.OR :
                return "||";
            case com.google.javascript.rhino.Token.BITXOR :
                return "^";
            case com.google.javascript.rhino.Token.AND :
                return "&&";
            case com.google.javascript.rhino.Token.BITAND :
                return "&";
            case com.google.javascript.rhino.Token.SHEQ :
                return "===";
            case com.google.javascript.rhino.Token.EQ :
                return "==";
            case com.google.javascript.rhino.Token.NOT :
                return "!";
            case com.google.javascript.rhino.Token.NE :
                return "!=";
            case com.google.javascript.rhino.Token.SHNE :
                return "!==";
            case com.google.javascript.rhino.Token.LSH :
                return "<<";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.LE :
                return "<=";
            case com.google.javascript.rhino.Token.LT :
                return "<";
            case com.google.javascript.rhino.Token.URSH :
                return ">>>";
            case com.google.javascript.rhino.Token.RSH :
                return ">>";
            case com.google.javascript.rhino.Token.GE :
                return ">=";
            case com.google.javascript.rhino.Token.GT :
                return ">";
            case com.google.javascript.rhino.Token.MUL :
                return "*";
            case com.google.javascript.rhino.Token.DIV :
                return "/";
            case com.google.javascript.rhino.Token.MOD :
                return "%";
            case com.google.javascript.rhino.Token.BITNOT :
                return "~";
            case com.google.javascript.rhino.Token.ADD :
                return "+";
            case com.google.javascript.rhino.Token.SUB :
                return "-";
            case com.google.javascript.rhino.Token.POS :
                return "+";
            case com.google.javascript.rhino.Token.NEG :
                return "-";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "=";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "|=";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "^=";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "&=";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "<<=";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return ">>=";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return ">>>=";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "+=";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "-=";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "*=";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "/=";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "%=";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            default :
                return null;
        }
    }

    static java.lang.String opToStrNoFail(int operator) {
        java.lang.String res = com.google.javascript.jscomp.NodeUtil.opToStr(operator);
        if (res == null) {
            throw new java.lang.Error((("Unknown op " + operator) + ": ") + com.google.javascript.rhino.Token.name(operator));
        }
        return res;
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type) {
        return com.google.javascript.jscomp.NodeUtil.containsType(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static void redeclareVarsInsideBranch(com.google.javascript.rhino.Node branch) {
        java.util.Collection<com.google.javascript.rhino.Node> vars = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(branch);
        if (vars.isEmpty()) {
            return;
        }
        com.google.javascript.rhino.Node parent = com.google.javascript.jscomp.NodeUtil.getAddingRoot(branch);
        for (com.google.javascript.rhino.Node nameNode : vars) {
            com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(com.google.javascript.rhino.IR.name(nameNode.getString()).srcref(nameNode)).srcref(nameNode);
            com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(nameNode, var.getFirstChild());
            parent.addChildToFront(var);
        }
    }

    static void copyNameAnnotations(com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node destination) {
        if (source.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
            destination.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
    }

    private static com.google.javascript.rhino.Node getAddingRoot(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node addingRoot = null;
        com.google.javascript.rhino.Node ancestor = n;
        while (null != (ancestor = ancestor.getParent())) {
            int type = ancestor.getType();
            if (type == com.google.javascript.rhino.Token.SCRIPT) {
                addingRoot = ancestor;
                break;
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                addingRoot = ancestor.getLastChild();
                break;
            }
        } 
        com.google.common.base.Preconditions.checkState(addingRoot.isBlock() || addingRoot.isScript());
        com.google.common.base.Preconditions.checkState((addingRoot.getFirstChild() == null) || (!addingRoot.getFirstChild().isScript()));
        return addingRoot;
    }

    public static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        int endPos = name.indexOf('.');
        if (endPos == (-1)) {
            return com.google.javascript.jscomp.NodeUtil.newName(convention, name);
        }
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newName(convention, name.substring(0, endPos));
        int startPos;
        do {
            startPos = endPos + 1;
            endPos = name.indexOf('.', startPos);
            java.lang.String part = (endPos == (-1)) ? name.substring(startPos) : name.substring(startPos, endPos);
            com.google.javascript.rhino.Node propNode = com.google.javascript.rhino.IR.string(part);
            if (convention.isConstantKey(part)) {
                propNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            node = com.google.javascript.rhino.IR.getprop(node, propNode);
        } while (endPos != (-1) );
        return node;
    }

    static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(convention, name);
        com.google.javascript.jscomp.NodeUtil.setDebugInformation(node, basisNode, originalName);
        return node;
    }

    public static com.google.javascript.rhino.Node getRootOfQualifiedName(com.google.javascript.rhino.Node qName) {
        for (com.google.javascript.rhino.Node current = qName; true; current = current.getFirstChild()) {
            if (current.isName() || current.isThis()) {
                return current;
            }
            com.google.common.base.Preconditions.checkState(current.isGetProp());
        }
    }

    static void setDebugInformation(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        node.copyInformationFromForTree(basisNode);
        node.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
    }

    private static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(name);
        if (convention.isConstant(name)) {
            nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
        return nameNode;
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node srcref) {
        return com.google.javascript.jscomp.NodeUtil.newName(convention, name).srcref(srcref);
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(convention, name, basisNode);
        nameNode.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
        return nameNode;
    }

    static boolean isLatin(java.lang.String s) {
        char LARGEST_BASIC_LATIN = 0x7f;
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if (c > LARGEST_BASIC_LATIN) {
                return false;
            }
        }
        return true;
    }

    public static boolean isValidSimpleName(java.lang.String name) {
        return (com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && (!com.google.javascript.rhino.TokenStream.isKeyword(name))) && com.google.javascript.jscomp.NodeUtil.isLatin(name);
    }

    public static boolean isValidQualifiedName(java.lang.String name) {
        if (name.endsWith(".") || name.startsWith(".")) {
            return false;
        }
        java.lang.String[] parts = name.split("\\.");
        for (java.lang.String part : parts) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidSimpleName(part)) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidPropertyName(java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isValidSimpleName(name);
    }

    private static class VarCollector implements com.google.javascript.jscomp.NodeUtil.Visitor {
        final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> vars = com.google.common.collect.Maps.newLinkedHashMap();

        @java.lang.Override
        public void visit(com.google.javascript.rhino.Node n) {
            if (n.isName()) {
                com.google.javascript.rhino.Node parent = n.getParent();
                if ((parent != null) && parent.isVar()) {
                    java.lang.String name = n.getString();
                    if (!vars.containsKey(name)) {
                        vars.put(name, n);
                    }
                }
            }
        }
    }

    public static java.util.Collection<com.google.javascript.rhino.Node> getVarsDeclaredInBranch(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeUtil.VarCollector collector = new com.google.javascript.jscomp.NodeUtil.VarCollector();
        com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, collector, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        return collector.vars.values();
    }

    static boolean isPrototypePropertyDeclaration(com.google.javascript.rhino.Node n) {
        if (!com.google.javascript.jscomp.NodeUtil.isExprAssign(n)) {
            return false;
        }
        return com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(n.getFirstChild().getFirstChild());
    }

    static boolean isPrototypeProperty(com.google.javascript.rhino.Node n) {
        java.lang.String lhsString = n.getQualifiedName();
        if (lhsString == null) {
            return false;
        }
        int prototypeIdx = lhsString.indexOf(".prototype.");
        return prototypeIdx != (-1);
    }

    static com.google.javascript.rhino.Node getPrototypeClassName(com.google.javascript.rhino.Node qName) {
        com.google.javascript.rhino.Node cur = qName;
        while (cur.isGetProp()) {
            if (cur.getLastChild().getString().equals("prototype")) {
                return cur.getFirstChild();
            } else {
                cur = cur.getFirstChild();
            }
        } 
        return null;
    }

    static java.lang.String getPrototypePropertyName(com.google.javascript.rhino.Node qName) {
        java.lang.String qNameStr = qName.getQualifiedName();
        int prototypeIdx = qNameStr.lastIndexOf(".prototype.");
        int memberIndex = (prototypeIdx + ".prototype".length()) + 1;
        return qNameStr.substring(memberIndex);
    }

    static com.google.javascript.rhino.Node newUndefinedNode(com.google.javascript.rhino.Node srcReferenceNode) {
        com.google.javascript.rhino.Node node = com.google.javascript.rhino.IR.voidNode(com.google.javascript.rhino.IR.number(0));
        if (srcReferenceNode != null) {
            node.copyInformationFromForTree(srcReferenceNode);
        }
        return node;
    }

    static com.google.javascript.rhino.Node newVarNode(java.lang.String name, com.google.javascript.rhino.Node value) {
        com.google.javascript.rhino.Node nodeName = com.google.javascript.rhino.IR.name(name);
        if (value != null) {
            com.google.common.base.Preconditions.checkState(value.getNext() == null);
            nodeName.addChildToBack(value);
            nodeName.srcref(value);
        }
        com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(nodeName).srcref(nodeName);
        return var;
    }

    private static class MatchNameNode implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final java.lang.String name;

        MatchNameNode(java.lang.String name) {
            this.name = name;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.isName() && n.getString().equals(name);
        }
    }

    static class MatchNodeType implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final int type;

        MatchNodeType(int type) {
            this.type = type;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.getType() == type;
        }
    }

    static class MatchDeclaration implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) || n.isVar();
        }
    }

    private static class MatchNotFunction implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return !n.isFunction();
        }
    }

    static final com.google.common.base.Predicate<com.google.javascript.rhino.Node> MATCH_NOT_FUNCTION = new com.google.javascript.jscomp.NodeUtil.MatchNotFunction();

    static class MatchShallowStatement implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return n.isBlock() || ((!n.isFunction()) && (((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)));
        }
    }

    static int getNodeTypeReferenceCount(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(node, name, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static int getNameReferenceCount(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static boolean has(com.google.javascript.rhino.Node node, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (pred.apply(node)) {
            return true;
        }
        if (!traverseChildrenPred.apply(node)) {
            return false;
        }
        for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.has(c, pred, traverseChildrenPred)) {
                return true;
            }
        }
        return false;
    }

    static int getCount(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        int total = 0;
        if (pred.apply(n)) {
            total++;
        }
        if (traverseChildrenPred.apply(n)) {
            for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                total += com.google.javascript.jscomp.NodeUtil.getCount(c, pred, traverseChildrenPred);
            }
        }
        return total;
    }

    static interface Visitor {
        public abstract void visit(com.google.javascript.rhino.Node node);
    }

    static void visitPreOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor vistor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        vistor.visit(node);
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPreOrder(c, vistor, traverseChildrenPred);
            }
        }
    }

    static void visitPostOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor vistor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPostOrder(c, vistor, traverseChildrenPred);
            }
        }
        vistor.visit(node);
    }

    static boolean hasFinally(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getChildCount() == 3;
    }

    static com.google.javascript.rhino.Node getCatchBlock(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getFirstChild().getNext();
    }

    static boolean hasCatchHandler(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isBlock());
        return n.hasChildren() && n.getFirstChild().isCatch();
    }

    public static com.google.javascript.rhino.Node getFunctionParameters(com.google.javascript.rhino.Node fnNode) {
        com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
        return fnNode.getFirstChild().getNext();
    }

    static boolean isConstantName(com.google.javascript.rhino.Node node) {
        return node.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
    }

    static boolean isConstantByConvention(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        java.lang.String name = node.getString();
        if (parent.isGetProp() && (node == parent.getLastChild())) {
            return convention.isConstantKey(name);
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(node, parent)) {
            return convention.isConstantKey(name);
        } else {
            return convention.isConstant(name);
        }
    }

    public static com.google.javascript.rhino.JSDocInfo getFunctionJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.JSDocInfo fnInfo = n.getJSDocInfo();
        if ((fnInfo == null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n)) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isAssign()) {
                fnInfo = parent.getJSDocInfo();
            } else if (parent.isName()) {
                fnInfo = parent.getParent().getJSDocInfo();
            }
        }
        return fnInfo;
    }

    public static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getSourceFileName();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.StaticSourceFile sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getStaticSourceFile();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.InputId getInputId(com.google.javascript.rhino.Node n) {
        while ((n != null) && (!n.isScript())) {
            n = n.getParent();
        } 
        return (n != null) && n.isScript() ? n.getInputId() : null;
    }

    static com.google.javascript.rhino.Node newCallNode(com.google.javascript.rhino.Node callTarget, com.google.javascript.rhino.Node... parameters) {
        boolean isFreeCall = !com.google.javascript.jscomp.NodeUtil.isGet(callTarget);
        com.google.javascript.rhino.Node call = com.google.javascript.rhino.IR.call(callTarget);
        call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, isFreeCall);
        for (com.google.javascript.rhino.Node parameter : parameters) {
            call.addChildToBack(parameter);
        }
        return call;
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value) {
        return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysFalse());
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value, com.google.common.base.Predicate<com.google.javascript.rhino.Node> locals) {
        switch (value.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals));
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                if (value.getBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP)) {
                    return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.THIS :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.NAME :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.CALL :
                return (com.google.javascript.jscomp.NodeUtil.callHasLocalResult(value) || com.google.javascript.jscomp.NodeUtil.isToStringMethodCall(value)) || locals.apply(value);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.newHasLocalResult(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return true;
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.IN :
                return true;
            default :
                if ((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(value) || com.google.javascript.jscomp.NodeUtil.isSimpleOperator(value)) || com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return true;
                }
                throw new java.lang.IllegalStateException((("Unexpected expression node" + value) + "\n parent:") + value.getParent());
        }
    }

    private static com.google.javascript.rhino.Node getNthSibling(com.google.javascript.rhino.Node first, int index) {
        com.google.javascript.rhino.Node sibling = first;
        while ((index != 0) && (sibling != null)) {
            sibling = sibling.getNext();
            index--;
        } 
        return sibling;
    }

    static com.google.javascript.rhino.Node getArgumentForFunction(com.google.javascript.rhino.Node function, int index) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
    }

    static com.google.javascript.rhino.Node getArgumentForCallOrNew(com.google.javascript.rhino.Node call, int index) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isCallOrNew(call));
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(call.getFirstChild().getNext(), index);
    }

    private static boolean isToStringMethodCall(com.google.javascript.rhino.Node call) {
        com.google.javascript.rhino.Node getNode = call.getFirstChild();
        if (com.google.javascript.jscomp.NodeUtil.isGet(getNode)) {
            com.google.javascript.rhino.Node propNode = getNode.getLastChild();
            return propNode.isString() && "toString".equals(propNode.getString());
        }
        return false;
    }

    static com.google.javascript.rhino.JSDocInfo getBestJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info == null) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent == null) {
                return null;
            }
            if (parent.isName()) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            } else if (parent.isAssign()) {
                return parent.getJSDocInfo();
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
                return parent.getJSDocInfo();
            } else if (parent.isFunction()) {
                return parent.getJSDocInfo();
            } else if (parent.isVar() && parent.hasOneChild()) {
                return parent.getJSDocInfo();
            } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            }
        }
        return info;
    }

    static com.google.javascript.rhino.Node getBestLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n);
        if (isFunctionDeclaration) {
            return n.getFirstChild();
        } else if (parent.isName()) {
            return parent;
        } else if (parent.isAssign()) {
            return parent.getFirstChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent, parent.getParent())) {
            return parent;
        } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(parent);
        }
        return null;
    }

    static com.google.javascript.rhino.Node getBestLValueOwner(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
        } else if (com.google.javascript.jscomp.NodeUtil.isGet(lValue)) {
            return lValue.getFirstChild();
        }
        return null;
    }

    static java.lang.String getBestLValueName(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
            com.google.javascript.rhino.Node owner = com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
            if (owner != null) {
                java.lang.String ownerName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(owner);
                if (ownerName != null) {
                    return (ownerName + ".") + com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(lValue);
                }
            }
            return null;
        }
        return lValue.getQualifiedName();
    }

    static boolean isExpressionResultUsed(com.google.javascript.rhino.Node expr) {
        com.google.javascript.rhino.Node parent = expr.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return false;
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return expr == parent.getFirstChild() ? true : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.COMMA :
                return expr == parent.getFirstChild() ? false : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent.getChildAtIndex(1) == expr;
                }
                break;
        }
        return true;
    }

    static boolean isExecutedExactlyOnce(com.google.javascript.rhino.Node n) {
        inspect : do {
            com.google.javascript.rhino.Node parent = n.getParent();
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.FOR :
                    if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                        if (parent.getChildAtIndex(1) != n) {
                            return false;
                        }
                    } else if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.DO :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if ((!com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) || (parent.getLastChild() != n)) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                    return false;
                case com.google.javascript.rhino.Token.SCRIPT :
                case com.google.javascript.rhino.Token.FUNCTION :
                    break inspect;
            }
        } while ((n = n.getParent()) != null );
        return true;
    }

    static com.google.javascript.rhino.Node booleanNode(boolean value) {
        return value ? com.google.javascript.rhino.IR.trueNode() : com.google.javascript.rhino.IR.falseNode();
    }

    static com.google.javascript.rhino.Node numberNode(double value, com.google.javascript.rhino.Node srcref) {
        com.google.javascript.rhino.Node result;
        if (java.lang.Double.isNaN(value)) {
            result = com.google.javascript.rhino.IR.name("NaN");
        } else if (value == java.lang.Double.POSITIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.name("Infinity");
        } else if (value == java.lang.Double.NEGATIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.neg(com.google.javascript.rhino.IR.name("Infinity"));
        } else {
            result = com.google.javascript.rhino.IR.number(value);
        }
        if (srcref != null) {
            result.srcrefTree(srcref);
        }
        return result;
    }
}
[1334848] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659908610381
GPR[SSUN]-1659908610381
1187751237
GPR[ESUN]-1659908610656
GPR[SSUN]-1659908610656
1187751237
GPR[ESUN]-1659908610927
GPR[SSUN]-1659908610927
1187751237
GPR[SPVATF]-1659908611222
GPR[EPVATF]-1659908612320
GPR[SPS]-1659908612320
[1337611] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2545.
GPR[EPS]-1659908613144
GPR[SPVATF]-1659908613144
GPR[EPVATF]-1659908614273
GPR[SPS]-1659908614273
[1339550] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2545.
GPR[EPS]-1659908615083
GPR[ESUN]-1659908615083
GPR[SSUN]-1659908615083
1187751237
GPR[ESUN]-1659908615358
GPR[SSUN]-1659908615358
-1966087783
GPR[SPVATF]-1659908615548
GPR[EPVATF]-1659908616558
GPR[SPS]-1659908616558
[1341582] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.deps.JsFileLineParser:176.
GPR[EPS]-1659908617115
GPR[SPVATF]-1659908617116
GPR[EPVATF]-1659908618076
GPR[SPS]-1659908618076
[1342831] ERROR ConstraintModelBuilder - Unable to compile the change: 
public abstract class JsFileLineParser {
    static final com.google.javascript.jscomp.DiagnosticType PARSE_WARNING = com.google.javascript.jscomp.DiagnosticType.warning("DEPS_PARSE_WARNING", "{0}\n{1}");

    static final com.google.javascript.jscomp.DiagnosticType PARSE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("DEPS_PARSE_ERROR", "{0}\n{1}");

    boolean shortcutMode = false;

    static class ParseException extends java.lang.Exception {
        public static final long serialVersionUID = 1L;

        private boolean fatal;

        public ParseException(java.lang.String message, boolean fatal) {
            super(message);
            this.fatal = fatal;
        }

        public boolean isFatal() {
            return fatal;
        }
    }

    private static final java.util.regex.Pattern STRING_LITERAL_PATTERN = java.util.regex.Pattern.compile("\\s*(?:\'((?:\\\\\'|[^\'])*?)\'|\"((?:\\\\\"|[^\"])*?)\")\\s*");

    private java.util.regex.Matcher valueMatcher = com.google.javascript.jscomp.deps.JsFileLineParser.STRING_LITERAL_PATTERN.matcher("");

    java.lang.String filePath;

    int lineNum;

    com.google.javascript.jscomp.ErrorManager errorManager;

    boolean parseSucceeded;

    public JsFileLineParser(com.google.javascript.jscomp.ErrorManager errorManager) {
        this.errorManager = errorManager;
    }

    public void setShortcutMode(boolean mode) {
        this.shortcutMode = mode;
    }

    public boolean didParseSucceed() {
        return parseSucceeded;
    }

    void doParse(java.lang.String filePath, java.io.Reader fileContents) {
        this.filePath = filePath;
        parseSucceeded = true;
        java.io.BufferedReader lineBuffer = new java.io.BufferedReader(fileContents);
        java.lang.String line = null;
        lineNum = 0;
        boolean inMultilineComment = false;
        try {
            while (null != (line = lineBuffer.readLine())) {
                ++lineNum;
                try {
                    java.lang.String revisedLine = line;
                    if (inMultilineComment) {
                        int endOfComment = revisedLine.indexOf("*/");
                        if (endOfComment != (-1)) {
                            revisedLine = revisedLine.substring(endOfComment + 2);
                            inMultilineComment = false;
                        } else {
                            revisedLine = "";
                        }
                    }
                    if (!inMultilineComment) {
                        while (true) {
                            int startOfLineComment = revisedLine.indexOf("//");
                            int startOfMultilineComment = revisedLine.indexOf("/*");
                            if ((startOfLineComment != (-1)) && ((startOfMultilineComment == (-1)) || (startOfLineComment < startOfMultilineComment))) {
                                revisedLine = revisedLine.substring(0, startOfLineComment);
                                break;
                            } else if (startOfMultilineComment != (-1)) {
                                int endOfMultilineComment = revisedLine.indexOf("*/", startOfMultilineComment + 2);
                                if (endOfMultilineComment == (-1)) {
                                    revisedLine = revisedLine.substring(0, startOfMultilineComment);
                                    inMultilineComment = true;
                                    break;
                                } else {
                                    revisedLine = revisedLine.substring(0, startOfMultilineComment) + revisedLine.substring(endOfMultilineComment + 2);
                                }
                            } else {
                                break;
                            }
                        } 
                    }
                    if (!revisedLine.isEmpty()) {
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = (!parseLine(revisedLine)) && shortcutMode;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(214).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.this.filePath",com.google.javascript.jscomp.deps.JsFileLineParser.this.filePath);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectInput("revisedLine",revisedLine);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectInput("line",line);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectInput("filePath",filePath);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectInput("inMultilineComment",inMultilineComment);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectInput("fileContents",fileContents);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.STRING_LITERAL_PATTERN",com.google.javascript.jscomp.deps.JsFileLineParser.STRING_LITERAL_PATTERN);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.this.lineNum",com.google.javascript.jscomp.deps.JsFileLineParser.this.lineNum);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectInput("lineBuffer",lineBuffer);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_WARNING",com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.this.errorManager",com.google.javascript.jscomp.deps.JsFileLineParser.this.errorManager);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.this.valueMatcher",com.google.javascript.jscomp.deps.JsFileLineParser.this.valueMatcher);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_ERROR",com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.this.parseSucceeded",com.google.javascript.jscomp.deps.JsFileLineParser.this.parseSucceeded);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectInput("com.google.javascript.jscomp.deps.JsFileLineParser.this.shortcutMode",com.google.javascript.jscomp.deps.JsFileLineParser.this.shortcutMode);} catch (Exception ex1) {ex1.printStackTrace();};
                            fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(214).collectionEnds();
                        }
                        if (runtimeAngelicValue) {
                            break;
                        }
                    }
                } catch (com.google.javascript.jscomp.deps.JsFileLineParser.ParseException e) {
                    errorManager.report(e.isFatal() ? com.google.javascript.jscomp.CheckLevel.ERROR : com.google.javascript.jscomp.CheckLevel.WARNING, com.google.javascript.jscomp.JSError.make(filePath, lineNum, 0, e.isFatal() ? com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_ERROR : com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_WARNING, e.getMessage(), line));
                    parseSucceeded = parseSucceeded && (!e.isFatal());
                }
            } 
        } catch (java.io.IOException e) {
            errorManager.report(com.google.javascript.jscomp.CheckLevel.ERROR, com.google.javascript.jscomp.JSError.make(filePath, 0, 0, com.google.javascript.jscomp.deps.JsFileLineParser.PARSE_ERROR, "Error reading file: " + filePath));
            parseSucceeded = false;
        }
    }

    abstract boolean parseLine(java.lang.String line) throws com.google.javascript.jscomp.deps.JsFileLineParser.ParseException;

    java.lang.String parseJsString(java.lang.String jsStringLiteral) throws com.google.javascript.jscomp.deps.JsFileLineParser.ParseException {
        valueMatcher.reset(jsStringLiteral);
        if (!valueMatcher.matches()) {
            throw new com.google.javascript.jscomp.deps.JsFileLineParser.ParseException("Syntax error in JS String literal", true);
        }
        return valueMatcher.group(1) != null ? valueMatcher.group(1) : valueMatcher.group(2);
    }

    java.util.List<java.lang.String> parseJsStringArray(java.lang.String input) throws com.google.javascript.jscomp.deps.JsFileLineParser.ParseException {
        java.util.List<java.lang.String> results = com.google.common.collect.Lists.newArrayList();
        int indexStart = input.indexOf('[');
        int indexEnd = input.lastIndexOf(']');
        if ((indexStart == (-1)) || (indexEnd == (-1))) {
            throw new com.google.javascript.jscomp.deps.JsFileLineParser.ParseException("Syntax error when parsing JS array", true);
        }
        java.lang.String innerValues = input.substring(indexStart + 1, indexEnd);
        if (!innerValues.trim().isEmpty()) {
            valueMatcher.reset(innerValues);
            for (; ;) {
                if (!valueMatcher.lookingAt()) {
                    throw new com.google.javascript.jscomp.deps.JsFileLineParser.ParseException("Syntax error in JS String literal", true);
                }
                results.add(valueMatcher.group(1) != null ? valueMatcher.group(1) : valueMatcher.group(2));
                if (valueMatcher.hitEnd()) {
                    break;
                }
                if (innerValues.charAt(valueMatcher.end()) != ',') {
                    throw new com.google.javascript.jscomp.deps.JsFileLineParser.ParseException("Missing comma in string array", true);
                }
                valueMatcher.region(valueMatcher.end() + 1, valueMatcher.regionEnd());
            }
        }
        return results;
    }
}
[1342831] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659908618364
GPR[SSUN]-1659908618364
-1966087783
GPR[SPVATF]-1659908618554
GPR[EPVATF]-1659908619551
GPR[SPS]-1659908619551
[1344570] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.deps.JsFileLineParser:173.
GPR[EPS]-1659908620104
GPR[SPVATF]-1659908620104
GPR[EPVATF]-1659908621081
GPR[SPS]-1659908621081
[1346110] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.deps.JsFileLineParser:173.
GPR[EPS]-1659908621643
GPR[ESUN]-1659908621644
GPR[SSUN]-1659908621644
-1966087783
GPR[SPVATF]-1659908621837
GPR[EPVATF]-1659908622811
GPR[SPS]-1659908622811
[1517796] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.lang.OutOfMemoryError: GC overhead limit exceeded
\n\nNode: host-50\n
\n\nDate: Sun 07 Aug 2022 02:46:49 PM PDT\n
End running Nopol Closure/29 results at /experiment_home///results/Nopol/Closure/29/seed_264/
Removing checked out dir script/workingdir/Nopol/Closure_29
GPR[SSLE]-1659908809934
GPR[ESLE]-1659908869938
