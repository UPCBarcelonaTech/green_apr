Sleep 1m start
GPR[SSLI]-1659913491014
GPR[ESLI]-1659913551020
Running SimFix Math 70b
Timezone: America/Los_Angeles
Seed 262
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Math/70/seed_262/
Project lc: math
New out script/workingdir/SimFix/math/math_70_buggy
The file script/workingdir/SimFix/math/math_70_buggy does not exist!
script/workingdir/SimFix/math/math_70_buggy
Current directory: script/workingdir/SimFix/math/math_70_buggy
classpath:  script/workingdir/SimFix/math/math_70_buggy/target/classes:script/workingdir/SimFix/math/math_70_buggy/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/SimFix/math/math_70_buggy/lib/junit-4.4.jar
Src java:  /src/main/java
Classes Java:  /target/classes
Src Test:  /src/test/java
Classes Test:  /target/test-classes
GPR[SSLB]-1659913566792
GPR[ESLB]-1659913626796
Calling SimFix: at script/workingdir/SimFix/math/math_70_buggy
build.xml
checkstyle.xml
d4j-info
defects4j.build.properties
doap_math.rdf
findbugs-exclude-filter.xml
license-header.txt
LICENSE.txt
math-pre-RC.sh
math-RC.sh
NOTICE.txt
pom.xml
PROPOSAL.html
RELEASE-NOTES.txt
siteMods
src
target
test-jar.xml
content current dir: build.xml checkstyle.xml d4j-info defects4j.build.properties doap_math.rdf findbugs-exclude-filter.xml license-header.txt LICENSE.txt math-pre-RC.sh math-RC.sh NOTICE.txt pom.xml PROPOSAL.html RELEASE-NOTES.txt siteMods src target test-jar.xml
Node: host-67
Date init: Sun 07 Aug 2022 04:07:09 PM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659913629140
=================================================
Project : math_70	start : 22/08/07 16:07

GPR[ESUP]-1659913631382
MM Purify? false
GPR[SFL]-1659913631768
GPR[EFL]-1659913631814
GPR[SFP]-1659913631814
TIMEOUT : 18000000
GPR[SSUN]-1659913631823
org.apache.commons.math.analysis.solvers.BisectionSolver,72
========
return solve(f,min,max);

========
MM Copying to MM
GPR[SPVS]-1659913633234
GPR[SPVAP]-1659913633234
GPR[EPVAP]-1659913638342
GPR[SPVATF]-1659913638342
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 0
GPR[EPVATF]-1659913640156
GPR[SPVATR]-1659913640157
TESTING : math_70
MM messageFailing tests: 0
GPR[EPVATR]-1659913648160
GPR[EPVS]-1659913648160
GPR[PF]-1659913648160
sourceFile  script/workingdir/SimFix/math/math_70_buggy/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
location   script/workingdir/SimFix/math/math_70_buggy
MM Out patch at /experiment_home///results/SimFix/Math/70/seed_262/patch/math/70/0/patch_16350_1_ts_1659913648160.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java --label=/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java /tmp/tmpDirMM1689448211417693116/BisectionSolver.java  /experiment_home///results/SimFix/Math/70/seed_262/patch/math/70/0/1_BisectionSolver.java  --unified=3  > /experiment_home///results/SimFix/Math/70/seed_262/patch/math/70/0/patch_16350_1_ts_1659913648160.diff
MMOut command diff: []
========
return solve(f,min,max,initial);

========
MM Copying to MM
GPR[SPVS]-1659913648172
GPR[SPVAP]-1659913648172
GPR[EPVAP]-1659913650039
GPR[SPVATF]-1659913650039
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913651817
GPR[EPVS]-1659913651817
========
return solve(f,min,initial);

========
MM Copying to MM
GPR[SPVS]-1659913651819
GPR[SPVAP]-1659913651819
GPR[EPVAP]-1659913653680
GPR[SPVATF]-1659913653680
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913655513
GPR[EPVS]-1659913655513
========
return solve(f,initial,max);

========
MM Copying to MM
GPR[SPVS]-1659913655514
GPR[SPVAP]-1659913655514
GPR[EPVAP]-1659913657363
GPR[SPVATF]-1659913657363
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 0
GPR[EPVATF]-1659913659175
GPR[SPVATR]-1659913659176
TESTING : math_70
MM messageFailing tests: 0
GPR[EPVATR]-1659913667081
GPR[EPVS]-1659913667081
GPR[PF]-1659913667081
sourceFile  script/workingdir/SimFix/math/math_70_buggy/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java
location   script/workingdir/SimFix/math/math_70_buggy
MM Out patch at /experiment_home///results/SimFix/Math/70/seed_262/patch/math/70/0/patch_35268_2_ts_1659913667081.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java --label=/src/main/java/org/apache/commons/math/analysis/solvers/BisectionSolver.java /tmp/tmpDirMM6791703246217495543/BisectionSolver.java  /experiment_home///results/SimFix/Math/70/seed_262/patch/math/70/0/2_BisectionSolver.java  --unified=3  > /experiment_home///results/SimFix/Math/70/seed_262/patch/math/70/0/patch_35268_2_ts_1659913667081.diff
MMOut command diff: []
========
return solve(f,min,max,UnivariateRealSolverUtils.midpoint(min,max));

========
MM Copying to MM
GPR[SPVS]-1659913667088
GPR[SPVAP]-1659913667088
GPR[EPVAP]-1659913668977
GPR[SPVATF]-1659913668977
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913670774
GPR[EPVS]-1659913670775
========
return solve(f,min,initial,max,initial,min,yMin);

========
MM Copying to MM
GPR[SPVS]-1659913670776
GPR[SPVAP]-1659913670776
GPR[EPVAP]-1659913671797
GPR[EPVS]-1659913671798
========
return solve(f,min,initial,max,initial,initial,yInitial);

========
MM Copying to MM
GPR[SPVS]-1659913671799
GPR[SPVAP]-1659913671799
GPR[EPVAP]-1659913672818
GPR[EPVS]-1659913672818
========
return solve2(f,min,max);

========
MM Copying to MM
GPR[SPVS]-1659913672820
GPR[SPVAP]-1659913672820
GPR[EPVAP]-1659913673830
GPR[EPVS]-1659913673830
========
return integrate(f,min,max);

========
MM Copying to MM
GPR[SPVS]-1659913673831
GPR[SPVAP]-1659913673831
GPR[EPVAP]-1659913674834
GPR[EPVS]-1659913674834
========
clearResult();
return solve(min,max);

========
MM Copying to MM
GPR[SPVS]-1659913674837
GPR[SPVAP]-1659913674837
GPR[EPVAP]-1659913676725
GPR[SPVATF]-1659913676725
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913678586
GPR[EPVS]-1659913678586
GPR[ESUN]-1659913678594
GPR[SSUN]-1659913678594
org.apache.commons.math.analysis.solvers.BisectionSolver,66
========
return solve(min,max);

========
MM Copying to MM
GPR[SPVS]-1659913680062
GPR[SPVAP]-1659913680062
GPR[EPVAP]-1659913685160
GPR[SPVATF]-1659913685160
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913686962
GPR[EPVS]-1659913686962
========
return solve(f,min,max,UnivariateRealSolverUtils.midpoint(min,max));

========
MM Copying to MM
GPR[SPVS]-1659913686964
GPR[SPVAP]-1659913686964
GPR[EPVAP]-1659913688928
GPR[SPVATF]-1659913688928
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913690796
GPR[EPVS]-1659913690796
========
return solve2(f,min,max);

========
MM Copying to MM
GPR[SPVS]-1659913690798
GPR[SPVAP]-1659913690798
GPR[EPVAP]-1659913691846
GPR[EPVS]-1659913691846
========
return integrate(f,min,max);

========
MM Copying to MM
GPR[SPVS]-1659913691847
GPR[SPVAP]-1659913691847
GPR[EPVAP]-1659913692866
GPR[EPVS]-1659913692866
========
clearResult();
return solve(f,min,max);

========
MM Copying to MM
GPR[SPVS]-1659913692868
GPR[SPVAP]-1659913692868
GPR[EPVAP]-1659913694755
GPR[SPVATF]-1659913694755
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913696583
GPR[EPVS]-1659913696583
GPR[ESUN]-1659913696589
GPR[SSUN]-1659913696589
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,223
========
return b-TWO_PI*Math.floor((a+Math.PI-a)/TWO_PI);

========
MM Copying to MM
GPR[SPVS]-1659913697981
GPR[SPVAP]-1659913697981
GPR[EPVAP]-1659913699924
GPR[EPVS]-1659913699924
GPR[ESUN]-1659913699926
GPR[SSUN]-1659913699926
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl,165
========
this.iterationCount=iterationCount;
this.resultComputed=false;

========
MM Copying to MM
GPR[SPVS]-1659913701022
GPR[SPVAP]-1659913701022
GPR[EPVAP]-1659913706162
GPR[SPVATF]-1659913706162
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913707960
GPR[EPVS]-1659913707960
========
this.iterationCount=0;
this.resultComputed=true;

========
MM Copying to MM
GPR[SPVS]-1659913707961
GPR[SPVAP]-1659913707961
GPR[EPVAP]-1659913709902
GPR[SPVATF]-1659913709902
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913711680
GPR[EPVS]-1659913711680
========
this.iterationCount=iterationCount;
this.resultComputed=true;

========
MM Copying to MM
GPR[SPVS]-1659913711681
GPR[SPVAP]-1659913711681
GPR[EPVAP]-1659913713552
GPR[SPVATF]-1659913713552
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913715350
GPR[EPVS]-1659913715350
========
this.result=result;
this.iterationCount=0;
this.resultComputed=false;

========
MM Copying to MM
GPR[SPVS]-1659913715352
GPR[SPVAP]-1659913715352
GPR[EPVAP]-1659913717226
GPR[SPVATF]-1659913717226
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913719044
GPR[EPVS]-1659913719044
========
this.result=result;
this.iterationCount=iterationCount;
this.resultComputed=false;

========
MM Copying to MM
GPR[SPVS]-1659913719045
GPR[SPVAP]-1659913719045
GPR[EPVAP]-1659913720908
GPR[SPVATF]-1659913720908
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913722695
GPR[EPVS]-1659913722695
========
this.result=result;
this.iterationCount=0;
this.resultComputed=true;

========
MM Copying to MM
GPR[SPVS]-1659913722696
GPR[SPVAP]-1659913722696
GPR[EPVAP]-1659913724573
GPR[SPVATF]-1659913724574
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913726379
GPR[EPVS]-1659913726379
========
this.result=result;
this.iterationCount=iterationCount;
this.resultComputed=true;

========
MM Copying to MM
GPR[SPVS]-1659913726380
GPR[SPVAP]-1659913726380
GPR[EPVAP]-1659913728288
GPR[SPVATF]-1659913728288
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913730121
GPR[EPVS]-1659913730121
========
this.functionValue=result;
this.iterationCount=0;
this.resultComputed=false;

========
MM Copying to MM
GPR[SPVS]-1659913730123
GPR[SPVAP]-1659913730123
GPR[EPVAP]-1659913732000
GPR[SPVATF]-1659913732000
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913733778
GPR[EPVS]-1659913733778
========
this.functionValue=result;
this.iterationCount=iterationCount;
this.resultComputed=false;

========
MM Copying to MM
GPR[SPVS]-1659913733779
GPR[SPVAP]-1659913733779
GPR[EPVAP]-1659913735671
GPR[SPVATF]-1659913735671
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913737487
GPR[EPVS]-1659913737487
========
this.functionValue=result;
this.iterationCount=0;
this.resultComputed=true;

========
MM Copying to MM
GPR[SPVS]-1659913737489
GPR[SPVAP]-1659913737489
GPR[EPVAP]-1659913739356
GPR[SPVATF]-1659913739356
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913741196
GPR[EPVS]-1659913741196
========
this.result=result;
this.functionValue=result;
this.iterationCount=0;
this.resultComputed=false;

========
MM Copying to MM
GPR[SPVS]-1659913741198
GPR[SPVAP]-1659913741198
GPR[EPVAP]-1659913743062
GPR[SPVATF]-1659913743062
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913744864
GPR[EPVS]-1659913744864
========
this.functionValue=result;
this.iterationCount=iterationCount;
this.resultComputed=true;

========
MM Copying to MM
GPR[SPVS]-1659913744865
GPR[SPVAP]-1659913744865
GPR[EPVAP]-1659913746725
GPR[SPVATF]-1659913746725
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913748499
GPR[EPVS]-1659913748499
========
this.result=result;
this.functionValue=result;
this.iterationCount=iterationCount;
this.resultComputed=false;

========
MM Copying to MM
GPR[SPVS]-1659913748500
GPR[SPVAP]-1659913748500
GPR[EPVAP]-1659913750388
GPR[SPVATF]-1659913750388
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913752199
GPR[EPVS]-1659913752199
========
this.result=result;
this.functionValue=result;
this.iterationCount=0;
this.resultComputed=true;

========
MM Copying to MM
GPR[SPVS]-1659913752200
GPR[SPVAP]-1659913752200
GPR[EPVAP]-1659913754110
GPR[SPVATF]-1659913754110
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913755889
GPR[EPVS]-1659913755889
========
this.result=result;
this.functionValue=result;
this.iterationCount=iterationCount;
this.resultComputed=true;

========
MM Copying to MM
GPR[SPVS]-1659913755890
GPR[SPVAP]-1659913755890
GPR[EPVAP]-1659913757778
GPR[SPVATF]-1659913757778
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913759556
GPR[EPVS]-1659913759556
========
setMaxEvaluations(Integer.MAX_VALUE);
this.iterationCount=0;
this.resultComputed=false;

========
MM Copying to MM
GPR[SPVS]-1659913759558
GPR[SPVAP]-1659913759558
GPR[EPVAP]-1659913760588
GPR[EPVS]-1659913760588
GPR[ESUN]-1659913760590
GPR[SSUN]-1659913760590
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl,166
GPR[ESUN]-1659913761010
GPR[SSUN]-1659913761010
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl,167
Find no block!
GPR[SSUN]-1659913761238
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl,208
UNKNOWN ASTNode type : catch (ClassCastException cce) {
  throw MathRuntimeException.createIllegalArgumentException("function is not differentiable");
}

UNKNOWN ASTNode type : catch (ConvergenceException ex) {
  throw MathRuntimeException.createIllegalArgumentException("cannot convert given object to a fraction number: {0}",ex.getLocalizedMessage());
}

UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  throw MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
}

========
if(lower>upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913762608
GPR[SPVAP]-1659913762608
GPR[EPVAP]-1659913767673
GPR[SPVATF]-1659913767673
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913769454
GPR[EPVS]-1659913769454
========
if(x0>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913769455
GPR[SPVAP]-1659913769455
GPR[EPVAP]-1659913770489
GPR[EPVS]-1659913770489
========
if(lower>=x1){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913770490
GPR[SPVAP]-1659913770490
GPR[EPVAP]-1659913771496
GPR[EPVS]-1659913771496
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913771497
GPR[SPVAP]-1659913771497
GPR[EPVAP]-1659913773378
GPR[SPVATF]-1659913773378
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913775195
GPR[EPVS]-1659913775195
========
if(lower>upper){
throw MathRuntimeException.createIllegalArgumentException("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913775196
GPR[SPVAP]-1659913775196
GPR[EPVAP]-1659913777085
GPR[SPVATF]-1659913777085
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913778863
GPR[EPVS]-1659913778863
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("Different number of weights and values");
}

========
MM Copying to MM
GPR[SPVS]-1659913778865
GPR[SPVAP]-1659913778865
GPR[EPVAP]-1659913780766
GPR[SPVATF]-1659913780766
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913782546
GPR[EPVS]-1659913782546
========
if(d>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913782547
GPR[SPVAP]-1659913782547
GPR[EPVAP]-1659913783566
GPR[EPVS]-1659913783566
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",upper,lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913783567
GPR[SPVAP]-1659913783567
GPR[EPVAP]-1659913785417
GPR[SPVATF]-1659913785418
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913787243
GPR[EPVS]-1659913787243
========
if(degreesOfFreedom>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913787245
GPR[SPVAP]-1659913787245
GPR[EPVAP]-1659913788274
GPR[EPVS]-1659913788274
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException(NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE,lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913788275
GPR[SPVAP]-1659913788275
GPR[EPVAP]-1659913789294
GPR[EPVS]-1659913789294
========
if(length>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913789295
GPR[SPVAP]-1659913789295
GPR[EPVAP]-1659913790314
GPR[EPVS]-1659913790314
========
if(dimensionSize.length>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913790316
GPR[SPVAP]-1659913790316
GPR[EPVAP]-1659913791324
GPR[EPVS]-1659913791324
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,0,dimensionSize.length);
}

========
MM Copying to MM
GPR[SPVS]-1659913791325
GPR[SPVAP]-1659913791325
GPR[EPVAP]-1659913792356
GPR[EPVS]-1659913792357
========
if(length>upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913792358
GPR[SPVAP]-1659913792358
GPR[EPVAP]-1659913793390
GPR[EPVS]-1659913793390
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("expected array length = {0}, must be at least 2",expected.length);
}

========
MM Copying to MM
GPR[SPVS]-1659913793391
GPR[SPVAP]-1659913793391
GPR[EPVAP]-1659913794404
GPR[EPVS]-1659913794413
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("observed array length = {0}, must be at least 2",observed1.length);
}

========
MM Copying to MM
GPR[SPVS]-1659913794414
GPR[SPVAP]-1659913794414
GPR[EPVAP]-1659913795423
GPR[EPVS]-1659913795424
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("invalid row dimension: {0} (must be at least 2)",in.length);
}

========
MM Copying to MM
GPR[SPVS]-1659913795425
GPR[SPVAP]-1659913795425
GPR[EPVAP]-1659913796457
GPR[EPVS]-1659913796457
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("two or more values required in each category, one has {0}",array.length);
}

========
MM Copying to MM
GPR[SPVS]-1659913796458
GPR[SPVAP]-1659913796458
GPR[EPVAP]-1659913797479
GPR[EPVS]-1659913797479
========
if(lower>=length){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913797481
GPR[SPVAP]-1659913797481
GPR[EPVAP]-1659913798495
GPR[EPVS]-1659913798495
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("subarray ends after array end");
}

========
MM Copying to MM
GPR[SPVS]-1659913798497
GPR[SPVAP]-1659913798497
GPR[EPVAP]-1659913800377
GPR[SPVATF]-1659913800377
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913802183
GPR[EPVS]-1659913802183
========
if(initial>=initial){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913802187
GPR[SPVAP]-1659913802187
GPR[EPVAP]-1659913803220
GPR[EPVS]-1659913803220
========
if(initial>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913803221
GPR[SPVAP]-1659913803221
GPR[EPVAP]-1659913804236
GPR[EPVS]-1659913804236
========
if(min>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913804237
GPR[SPVAP]-1659913804237
GPR[EPVAP]-1659913805247
GPR[EPVS]-1659913805247
========
if(lower>=initial){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913805248
GPR[SPVAP]-1659913805248
GPR[EPVAP]-1659913806294
GPR[EPVS]-1659913806294
========
if(lower>=max){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913806296
GPR[SPVAP]-1659913806296
GPR[EPVAP]-1659913807300
GPR[EPVS]-1659913807300
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}",lower,upper,result);
}

========
MM Copying to MM
GPR[SPVS]-1659913807301
GPR[SPVAP]-1659913807301
GPR[EPVAP]-1659913809147
GPR[SPVATF]-1659913809147
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913810923
GPR[EPVS]-1659913810923
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException(WRONG_ORDER_ENDPOINTS_MESSAGE,lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913810925
GPR[SPVAP]-1659913810925
GPR[EPVAP]-1659913811957
GPR[EPVS]-1659913811957
========
if(x0>upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913811958
GPR[SPVAP]-1659913811958
GPR[EPVAP]-1659913812968
GPR[EPVS]-1659913812968
========
if(lower>x1){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913812969
GPR[SPVAP]-1659913812969
GPR[EPVAP]-1659913813982
GPR[EPVS]-1659913813982
========
if(x0>=x1){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913813983
GPR[SPVAP]-1659913813983
GPR[EPVAP]-1659913814994
GPR[EPVS]-1659913814994
========
if(x0>x1){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913814996
GPR[SPVAP]-1659913814996
GPR[EPVAP]-1659913816022
GPR[EPVS]-1659913816022
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException(EMPTY_ARRAY_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659913816024
GPR[SPVAP]-1659913816024
GPR[EPVAP]-1659913817054
GPR[EPVS]-1659913817054
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_ROW_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659913817056
GPR[SPVAP]-1659913817056
GPR[EPVAP]-1659913818077
GPR[EPVS]-1659913818077
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_COLUMN_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659913818078
GPR[SPVAP]-1659913818078
GPR[EPVAP]-1659913819084
GPR[EPVS]-1659913819084
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
}

========
MM Copying to MM
GPR[SPVS]-1659913819086
GPR[SPVAP]-1659913819086
GPR[EPVAP]-1659913820945
GPR[SPVATF]-1659913820945
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913822773
GPR[EPVS]-1659913822773
========
if(lowerBound>=lowerBound){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913822777
GPR[SPVAP]-1659913822777
GPR[EPVAP]-1659913823789
GPR[EPVS]-1659913823789
========
if(upperBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913823789
GPR[SPVAP]-1659913823789
GPR[EPVAP]-1659913824794
GPR[EPVS]-1659913824794
========
if(lowerBound>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913824795
GPR[SPVAP]-1659913824795
GPR[EPVAP]-1659913825806
GPR[EPVS]-1659913825806
========
if(upperBound>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913825807
GPR[SPVAP]-1659913825807
GPR[EPVAP]-1659913826829
GPR[EPVS]-1659913826829
========
if(lower>=lowerBound){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913826831
GPR[SPVAP]-1659913826831
GPR[EPVAP]-1659913827858
GPR[EPVS]-1659913827858
========
if(lower>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913827859
GPR[SPVAP]-1659913827859
GPR[EPVAP]-1659913828891
GPR[EPVS]-1659913828891
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lower,upper,result);
}

========
MM Copying to MM
GPR[SPVS]-1659913828892
GPR[SPVAP]-1659913828892
GPR[EPVAP]-1659913830755
GPR[SPVATF]-1659913830755
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913832543
GPR[EPVS]-1659913832543
========
if(initial>=upper){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lower,upper,result);
}

========
MM Copying to MM
GPR[SPVS]-1659913832544
GPR[SPVAP]-1659913832544
GPR[EPVAP]-1659913833621
GPR[EPVS]-1659913833621
========
if(lower>=previous){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913833622
GPR[SPVAP]-1659913833622
GPR[EPVAP]-1659913834644
GPR[EPVS]-1659913834644
========
if(val[i]>=lower){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913834646
GPR[SPVAP]-1659913834646
GPR[EPVAP]-1659913835660
GPR[EPVS]-1659913835660
========
if(val[i]>lower){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913835661
GPR[SPVAP]-1659913835661
GPR[EPVAP]-1659913836668
GPR[EPVS]-1659913836668
========
if(lower>previous){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913836669
GPR[SPVAP]-1659913836669
GPR[EPVAP]-1659913837673
GPR[EPVS]-1659913837673
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("propagation direction mismatch");
}

========
MM Copying to MM
GPR[SPVS]-1659913837675
GPR[SPVAP]-1659913837675
GPR[EPVAP]-1659913839542
GPR[SPVATF]-1659913839542
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913841411
GPR[EPVS]-1659913841411
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("spline partition must have at least {0} points, got {1}",2,knots.length);
}

========
MM Copying to MM
GPR[SPVS]-1659913841413
GPR[SPVAP]-1659913841413
GPR[EPVAP]-1659913842431
GPR[EPVS]-1659913842431
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("{0} points are required, got only {1}",2,x.length);
}

========
MM Copying to MM
GPR[SPVS]-1659913842433
GPR[SPVAP]-1659913842433
GPR[EPVAP]-1659913843467
GPR[EPVS]-1659913843467
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("{0} points are required, got only {1}",3,x.length);
}

========
MM Copying to MM
GPR[SPVS]-1659913843468
GPR[SPVAP]-1659913843468
GPR[EPVAP]-1659913844498
GPR[EPVS]-1659913844498
========
if(lower*upper>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913844500
GPR[SPVAP]-1659913844500
GPR[EPVAP]-1659913846384
GPR[SPVATF]-1659913846384
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913848183
GPR[EPVS]-1659913848183
========
if(y0>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913848185
GPR[SPVAP]-1659913848185
GPR[EPVAP]-1659913849196
GPR[EPVS]-1659913849196
========
if(y1>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913849197
GPR[SPVAP]-1659913849197
GPR[EPVAP]-1659913850221
GPR[EPVS]-1659913850221
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs, "+"endpoints: [{0}, {1}], values: [{2}, {3}]",result,result,lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913850223
GPR[SPVAP]-1659913850223
GPR[EPVAP]-1659913852074
GPR[SPVATF]-1659913852074
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913853855
GPR[EPVS]-1659913853855
========
if(lower*upper>=upper){
throw MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs, "+"endpoints: [{0}, {1}], values: [{2}, {3}]",result,result,lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913853857
GPR[SPVAP]-1659913853857
GPR[EPVAP]-1659913855726
GPR[SPVATF]-1659913855726
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913857558
GPR[EPVS]-1659913857558
========
if(r>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913857560
GPR[SPVAP]-1659913857560
GPR[EPVAP]-1659913858565
GPR[EPVS]-1659913858565
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("negative complex module {0}",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913858567
GPR[SPVAP]-1659913858567
GPR[EPVAP]-1659913860422
GPR[SPVATF]-1659913860422
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913862231
GPR[EPVS]-1659913862231
========
if(p>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913862233
GPR[SPVAP]-1659913862233
GPR[EPVAP]-1659913863261
GPR[EPVS]-1659913863261
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("the Poisson mean must be positive ({0})",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913863262
GPR[SPVAP]-1659913863262
GPR[EPVAP]-1659913865122
GPR[SPVATF]-1659913865122
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913866894
GPR[EPVS]-1659913866894
========
if(alpha>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913866896
GPR[SPVAP]-1659913866896
GPR[EPVAP]-1659913867929
GPR[EPVS]-1659913867929
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("shape must be positive ({0})",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913867930
GPR[SPVAP]-1659913867930
GPR[EPVAP]-1659913869813
GPR[SPVATF]-1659913869813
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913871631
GPR[EPVS]-1659913871631
========
if(beta>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913871632
GPR[SPVAP]-1659913871632
GPR[EPVAP]-1659913872721
GPR[EPVS]-1659913872721
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("scale must be positive ({0})",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913872722
GPR[SPVAP]-1659913872722
GPR[EPVAP]-1659913874589
GPR[SPVATF]-1659913874589
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913876368
GPR[EPVS]-1659913876368
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("Cannot compute beta density at 0 when alpha = {0,number}",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913876369
GPR[SPVAP]-1659913876369
GPR[EPVAP]-1659913878234
GPR[SPVATF]-1659913878234
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913880043
GPR[EPVS]-1659913880043
========
if(alpha>=upper){
throw MathRuntimeException.createIllegalArgumentException("Cannot compute beta density at 0 when alpha = {0,number}",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913880045
GPR[SPVAP]-1659913880045
GPR[EPVAP]-1659913881064
GPR[EPVS]-1659913881064
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("Cannot compute beta density at 1 when beta = %.3g",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913881065
GPR[SPVAP]-1659913881065
GPR[EPVAP]-1659913882934
GPR[SPVATF]-1659913882934
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913884734
GPR[EPVS]-1659913884734
========
if(beta>=upper){
throw MathRuntimeException.createIllegalArgumentException("Cannot compute beta density at 1 when beta = %.3g",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913884735
GPR[SPVAP]-1659913884735
GPR[EPVAP]-1659913885745
GPR[EPVS]-1659913885745
========
if(newAlpha>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913885746
GPR[SPVAP]-1659913885746
GPR[EPVAP]-1659913886755
GPR[EPVS]-1659913886755
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("alpha must be positive ({0})",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913886756
GPR[SPVAP]-1659913886756
GPR[EPVAP]-1659913888604
GPR[SPVATF]-1659913888604
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913890383
GPR[EPVS]-1659913890383
========
if(newBeta>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913890384
GPR[SPVAP]-1659913890384
GPR[EPVAP]-1659913891433
GPR[EPVS]-1659913891433
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("beta must be positive ({0})",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913891435
GPR[SPVAP]-1659913891435
GPR[EPVAP]-1659913893291
GPR[SPVATF]-1659913893291
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913895071
GPR[EPVS]-1659913895071
========
if(newMean>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913895072
GPR[SPVAP]-1659913895072
GPR[EPVAP]-1659913896090
GPR[EPVS]-1659913896090
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913896091
GPR[SPVAP]-1659913896091
GPR[EPVAP]-1659913897952
GPR[SPVATF]-1659913897952
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913899747
GPR[EPVS]-1659913899747
========
if(sd>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913899748
GPR[SPVAP]-1659913899748
GPR[EPVAP]-1659913900766
GPR[EPVS]-1659913900766
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913900767
GPR[SPVAP]-1659913900767
GPR[EPVAP]-1659913902640
GPR[SPVATF]-1659913902640
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913904445
GPR[EPVS]-1659913904445
========
if(s>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913904446
GPR[SPVAP]-1659913904446
GPR[EPVAP]-1659913905464
GPR[EPVS]-1659913905464
========
if(newDegreesOfFreedom>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913905465
GPR[SPVAP]-1659913905465
GPR[EPVAP]-1659913906469
GPR[EPVS]-1659913906469
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("degrees of freedom must be positive ({0})",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913906470
GPR[SPVAP]-1659913906470
GPR[EPVAP]-1659913908381
GPR[SPVATF]-1659913908381
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913910190
GPR[EPVS]-1659913910190
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("invalid exponent {0} (must be positive)",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913910191
GPR[SPVAP]-1659913910191
GPR[EPVAP]-1659913912053
GPR[SPVATF]-1659913912053
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913913811
GPR[EPVS]-1659913913811
========
if(s>=upper){
throw MathRuntimeException.createIllegalArgumentException("invalid exponent {0} (must be positive)",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913913812
GPR[SPVAP]-1659913913812
GPR[EPVAP]-1659913914820
GPR[EPVS]-1659913914820
========
if(mean>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913914822
GPR[SPVAP]-1659913914822
GPR[EPVAP]-1659913915830
GPR[EPVS]-1659913915830
========
if(sigma>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913915831
GPR[SPVAP]-1659913915831
GPR[EPVAP]-1659913916844
GPR[EPVS]-1659913916844
========
if(mean>=upper){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913916845
GPR[SPVAP]-1659913916845
GPR[EPVAP]-1659913917844
GPR[EPVS]-1659913917844
========
if(x[i]>=x[i+1]){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913917846
GPR[SPVAP]-1659913917846
GPR[EPVAP]-1659913918852
GPR[EPVS]-1659913918852
========
if(p>=p){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913918853
GPR[SPVAP]-1659913918853
GPR[EPVAP]-1659913919859
GPR[EPVS]-1659913919859
========
if(lower>=p){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913919860
GPR[SPVAP]-1659913919860
GPR[EPVAP]-1659913920870
GPR[EPVS]-1659913920870
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913920871
GPR[SPVAP]-1659913920871
GPR[EPVAP]-1659913922763
GPR[SPVATF]-1659913922763
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913924554
GPR[EPVS]-1659913924554
========
if(p>=upper){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913924555
GPR[SPVAP]-1659913924555
GPR[EPVAP]-1659913925569
GPR[EPVS]-1659913925569
========
if(lower>=p){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913925571
GPR[SPVAP]-1659913925571
GPR[EPVAP]-1659913926588
GPR[EPVS]-1659913926588
========
if(p>=p){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lower);
}

========
MM Copying to MM
GPR[SPVS]-1659913926589
GPR[SPVAP]-1659913926589
GPR[EPVAP]-1659913927594
GPR[EPVS]-1659913927594
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException(OUT_OF_RANGE_POINT,lower,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659913927595
GPR[SPVAP]-1659913927595
GPR[EPVAP]-1659913928602
GPR[EPVS]-1659913928602
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("cannot compute 0-th root of unity, indefinite result");
}

========
MM Copying to MM
GPR[SPVS]-1659913928603
GPR[SPVAP]-1659913928603
GPR[EPVAP]-1659913930456
GPR[SPVATF]-1659913930456
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913932263
GPR[EPVS]-1659913932263
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("observed counts are all 0 in first observed array");
}

========
MM Copying to MM
GPR[SPVS]-1659913932264
GPR[SPVAP]-1659913932264
GPR[EPVAP]-1659913934128
GPR[SPVATF]-1659913934128
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913935899
GPR[EPVS]-1659913935899
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("observed counts are all 0 in second observed array");
}

========
MM Copying to MM
GPR[SPVS]-1659913935901
GPR[SPVAP]-1659913935901
GPR[EPVAP]-1659913937770
GPR[SPVATF]-1659913937770
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913939629
GPR[EPVS]-1659913939629
========
if(normProduct>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913939630
GPR[SPVAP]-1659913939630
GPR[EPVAP]-1659913940649
GPR[EPVS]-1659913940649
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("zero norm for rotation defining vector");
}

========
MM Copying to MM
GPR[SPVS]-1659913940651
GPR[SPVAP]-1659913940651
GPR[EPVAP]-1659913942526
GPR[SPVATF]-1659913942526
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913944308
GPR[EPVS]-1659913944308
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("simplex must contain at least one point");
}

========
MM Copying to MM
GPR[SPVS]-1659913944309
GPR[SPVAP]-1659913944309
GPR[EPVAP]-1659913946184
GPR[SPVATF]-1659913946184
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913947962
GPR[EPVS]-1659913947962
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
}

========
MM Copying to MM
GPR[SPVS]-1659913947963
GPR[SPVAP]-1659913947963
GPR[EPVAP]-1659913949863
GPR[SPVATF]-1659913949863
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913951647
GPR[EPVS]-1659913951647
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one column");
}

========
MM Copying to MM
GPR[SPVS]-1659913951648
GPR[SPVAP]-1659913951648
GPR[EPVAP]-1659913953530
GPR[SPVATF]-1659913953530
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913955311
GPR[EPVS]-1659913955311
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("no data");
}

========
MM Copying to MM
GPR[SPVS]-1659913955313
GPR[SPVAP]-1659913955313
GPR[EPVAP]-1659913957177
GPR[SPVATF]-1659913957177
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913958947
GPR[EPVS]-1659913958947
========
if(length>=upper){
throw MathRuntimeException.createIllegalArgumentException("no data");
}

========
MM Copying to MM
GPR[SPVS]-1659913958948
GPR[SPVAP]-1659913958948
GPR[EPVAP]-1659913959962
GPR[EPVS]-1659913959962
========
if(u1u1>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913959963
GPR[SPVAP]-1659913959963
GPR[EPVAP]-1659913960982
GPR[EPVS]-1659913960982
========
if(lower>=u2u2){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913960983
GPR[SPVAP]-1659913960983
GPR[EPVAP]-1659913961984
GPR[EPVS]-1659913961984
========
if(x>=x){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913961986
GPR[SPVAP]-1659913961986
GPR[EPVAP]-1659913963017
GPR[EPVS]-1659913963018
========
if(x>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913963018
GPR[SPVAP]-1659913963018
GPR[EPVAP]-1659913964034
GPR[EPVS]-1659913964034
========
if(lower>=x){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913964035
GPR[SPVAP]-1659913964035
GPR[EPVAP]-1659913965053
GPR[EPVS]-1659913965053
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lower,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659913965054
GPR[SPVAP]-1659913965054
GPR[EPVAP]-1659913966918
GPR[SPVATF]-1659913966918
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913968699
GPR[EPVS]-1659913968699
========
if(y>=y){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913968701
GPR[SPVAP]-1659913968701
GPR[EPVAP]-1659913969714
GPR[EPVS]-1659913969714
========
if(y>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913969715
GPR[SPVAP]-1659913969715
GPR[EPVAP]-1659913970718
GPR[EPVS]-1659913970718
========
if(lower>=y){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913970719
GPR[SPVAP]-1659913970719
GPR[EPVAP]-1659913971758
GPR[EPVS]-1659913971758
========
if(z>=z){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913971759
GPR[SPVAP]-1659913971759
GPR[EPVAP]-1659913972780
GPR[EPVS]-1659913972780
========
if(z>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913972781
GPR[SPVAP]-1659913972781
GPR[EPVAP]-1659913973796
GPR[EPVS]-1659913973796
========
if(lower>=z){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913973797
GPR[SPVAP]-1659913973797
GPR[EPVAP]-1659913974800
GPR[EPVS]-1659913974800
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lower,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659913974802
GPR[SPVAP]-1659913974802
GPR[EPVAP]-1659913976665
GPR[SPVATF]-1659913976665
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913978466
GPR[EPVS]-1659913978466
========
if(p>=upper){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lower,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659913978468
GPR[SPVAP]-1659913978468
GPR[EPVAP]-1659913979498
GPR[EPVS]-1659913979498
========
if(lower>=p){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lower,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659913979499
GPR[SPVAP]-1659913979499
GPR[EPVAP]-1659913980514
GPR[EPVS]-1659913980514
========
if(p>=p){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lower,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659913980516
GPR[SPVAP]-1659913980516
GPR[EPVAP]-1659913981532
GPR[EPVS]-1659913981532
========
if(alpha>=alpha){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913981533
GPR[SPVAP]-1659913981533
GPR[EPVAP]-1659913982558
GPR[EPVS]-1659913982558
========
if(lower>=alpha){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659913982559
GPR[SPVAP]-1659913982559
GPR[EPVAP]-1659913983592
GPR[EPVS]-1659913983593
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lower,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659913983594
GPR[SPVAP]-1659913983594
GPR[EPVAP]-1659913985474
GPR[SPVATF]-1659913985474
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913987281
GPR[EPVS]-1659913987281
========
if(alpha>=upper){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lower,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659913987283
GPR[SPVAP]-1659913987283
GPR[EPVAP]-1659913988291
GPR[EPVS]-1659913988291
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lower,0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659913988292
GPR[SPVAP]-1659913988292
GPR[EPVAP]-1659913990162
GPR[SPVATF]-1659913990162
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913991961
GPR[EPVS]-1659913991961
========
if(alpha>=upper){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lower,0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659913991963
GPR[SPVAP]-1659913991963
GPR[EPVAP]-1659913992977
GPR[EPVS]-1659913992977
========
if(lower>=alpha){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lower,0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659913992978
GPR[SPVAP]-1659913992978
GPR[EPVAP]-1659913994000
GPR[EPVS]-1659913994000
========
if(alpha>=alpha){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lower,0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659913994001
GPR[SPVAP]-1659913994001
GPR[EPVAP]-1659913995023
GPR[EPVS]-1659913995023
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lower,0.0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659913995025
GPR[SPVAP]-1659913995025
GPR[EPVAP]-1659913996877
GPR[SPVATF]-1659913996877
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659913998655
GPR[EPVS]-1659913998655
========
if(alpha>=upper){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lower,0.0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659913998656
GPR[SPVAP]-1659913998656
GPR[EPVAP]-1659913999679
GPR[EPVS]-1659913999679
========
if(lower>=alpha){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lower,0.0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659913999681
GPR[SPVAP]-1659913999681
GPR[EPVAP]-1659914000695
GPR[EPVS]-1659914000695
========
if(alpha>=alpha){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lower,0.0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659914000696
GPR[SPVAP]-1659914000696
GPR[EPVAP]-1659914001720
GPR[EPVS]-1659914001720
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("invalid iteration limits: min={0}, max={1}",0,64);
}

========
MM Copying to MM
GPR[SPVS]-1659914001721
GPR[SPVAP]-1659914001721
GPR[EPVAP]-1659914003607
GPR[SPVATF]-1659914003607
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914005401
GPR[EPVS]-1659914005401
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("invalid iteration limits: min={0}, max={1}",0,32);
}

========
MM Copying to MM
GPR[SPVS]-1659914005403
GPR[SPVAP]-1659914005403
GPR[EPVAP]-1659914007278
GPR[SPVATF]-1659914007278
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914009106
GPR[EPVS]-1659914009106
========
if(yInitial>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659914009107
GPR[SPVAP]-1659914009107
GPR[EPVAP]-1659914010142
GPR[EPVS]-1659914010142
========
if(yMax>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659914010143
GPR[SPVAP]-1659914010143
GPR[EPVAP]-1659914011158
GPR[EPVS]-1659914011158
========
if(lower>=upper){
if(upper*result<0){
return solve(f,result,yInitial,result,yMax,initial,yInitial);
}
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659914011159
GPR[SPVAP]-1659914011159
GPR[EPVAP]-1659914012178
GPR[EPVS]-1659914012178
========
if(lower>=result){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659914012180
GPR[SPVAP]-1659914012180
GPR[EPVAP]-1659914014026
GPR[SPVATF]-1659914014026
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914015812
GPR[EPVS]-1659914015812
========
if(pos>=upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659914015813
GPR[SPVAP]-1659914015813
GPR[EPVAP]-1659914016833
GPR[EPVS]-1659914016833
========
if(lower>=n){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659914016835
GPR[SPVAP]-1659914016835
GPR[EPVAP]-1659914017859
GPR[EPVS]-1659914017859
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",v.length,getColumnDimension());
}

========
MM Copying to MM
GPR[SPVS]-1659914017861
GPR[SPVAP]-1659914017861
GPR[EPVAP]-1659914018890
GPR[EPVS]-1659914018890
========
if(lower>=0.001*Math.abs(lower)){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659914018891
GPR[SPVAP]-1659914018891
GPR[EPVAP]-1659914020757
GPR[SPVATF]-1659914020757
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914022558
GPR[EPVS]-1659914022558
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("{0} wide hole between models time ranges",Math.abs(upper));
}

========
MM Copying to MM
GPR[SPVS]-1659914022560
GPR[SPVAP]-1659914022560
GPR[EPVAP]-1659914024496
GPR[SPVATF]-1659914024496
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914026278
GPR[EPVS]-1659914026278
========
if(lower>0.001*Math.abs(lower)){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659914026280
GPR[SPVAP]-1659914026280
GPR[EPVAP]-1659914028173
GPR[SPVATF]-1659914028173
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914029958
GPR[EPVS]-1659914029958
========
if(lower>upper){
throw MathRuntimeException.createIllegalArgumentException("{0} wide hole between models time ranges",Math.abs(upper));
}

========
MM Copying to MM
GPR[SPVS]-1659914029960
GPR[SPVAP]-1659914029960
GPR[EPVAP]-1659914031814
GPR[SPVATF]-1659914031814
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914033587
GPR[EPVS]-1659914033587
========
if(lower>=0.001*Math.abs(lower)){
throw MathRuntimeException.createIllegalArgumentException("{0} wide hole between models time ranges",Math.abs(upper));
}

========
MM Copying to MM
GPR[SPVS]-1659914033588
GPR[SPVAP]-1659914033588
GPR[EPVAP]-1659914035475
GPR[SPVATF]-1659914035475
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914037267
GPR[EPVS]-1659914037267
========
if(lower>0.001*Math.abs(lower)){
throw MathRuntimeException.createIllegalArgumentException("{0} wide hole between models time ranges",Math.abs(upper));
}

========
MM Copying to MM
GPR[SPVS]-1659914037268
GPR[SPVAP]-1659914037268
GPR[EPVAP]-1659914039133
GPR[SPVATF]-1659914039133
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914040920
GPR[EPVS]-1659914040920
========
if(upper>=lower){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659914040922
GPR[SPVAP]-1659914040922
GPR[EPVAP]-1659914042775
GPR[SPVATF]-1659914042775
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914044577
GPR[EPVS]-1659914044577
========
if(lower>=upper){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659914044578
GPR[SPVAP]-1659914044578
GPR[EPVAP]-1659914046450
GPR[SPVATF]-1659914046450
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914048279
GPR[EPVS]-1659914048279
========
if(upper>=lower){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659914048280
GPR[SPVAP]-1659914048280
GPR[EPVAP]-1659914050137
GPR[SPVATF]-1659914050137
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914051927
GPR[EPVS]-1659914051927
========
if(degreesOfFreedom>=upper){
throw MathRuntimeException.createIllegalArgumentException(NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE,lower);
}

========
MM Copying to MM
GPR[SPVS]-1659914051928
GPR[SPVAP]-1659914051928
GPR[EPVAP]-1659914052951
GPR[EPVS]-1659914052951
========
if(dimensionSize.length>upper){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lower,upper);
}

========
MM Copying to MM
GPR[SPVS]-1659914052953
GPR[SPVAP]-1659914052953
GPR[EPVAP]-1659914053980
GPR[EPVS]-1659914053980
========
if(lower>upper){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,0,dimensionSize.length);
}

========
MM Copying to MM
GPR[SPVS]-1659914053981
GPR[SPVAP]-1659914053981
GPR[EPVAP]-1659914054988
GPR[EPVS]-1659914054988
========
if(dimensionSize.length>=upper){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,0,dimensionSize.length);
}

========
MM Copying to MM
GPR[SPVS]-1659914054989
GPR[SPVAP]-1659914054989
GPR[EPVAP]-1659914055984
GPR[EPVS]-1659914055984
========
if(length>=upper){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,0,dimensionSize.length);
}

========
MM Copying to MM
GPR[SPVS]-1659914055985
GPR[SPVAP]-1659914055985
GPR[EPVAP]-1659914056989
GPR[EPVS]-1659914056989
========
if(dimensionSize.length>upper){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,0,dimensionSize.length);
}

========
MM Copying to MM
GPR[SPVS]-1659914056990
GPR[SPVAP]-1659914056990
GPR[EPVAP]-1659914058018
GPR[EPVS]-1659914058018
========
if(length>upper){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,0,dimensionSize.length);
}

========
MM Copying to MM
GPR[SPVS]-1659914058019
GPR[SPVAP]-1659914058019
GPR[EPVAP]-1659914059034
GPR[EPVS]-1659914059034
========
if(x>=upper){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lower,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659914059041
GPR[SPVAP]-1659914059041
GPR[EPVAP]-1659914060047
GPR[EPVS]-1659914060048
========
if(lower>=x){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lower,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659914060049
GPR[SPVAP]-1659914060049
GPR[EPVAP]-1659914061068
GPR[EPVS]-1659914061068
========
if(x>=x){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lower,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659914061070
GPR[SPVAP]-1659914061070
GPR[EPVAP]-1659914062086
GPR[EPVS]-1659914062086
========
if(y>=upper){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lower,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659914062087
GPR[SPVAP]-1659914062087
GPR[EPVAP]-1659914063092
GPR[EPVS]-1659914063092
========
if(lower>=y){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lower,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659914063093
GPR[SPVAP]-1659914063093
GPR[EPVAP]-1659914064102
GPR[EPVS]-1659914064102
========
if(y>=y){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lower,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659914064103
GPR[SPVAP]-1659914064103
GPR[EPVAP]-1659914065118
GPR[EPVS]-1659914065118
GPR[ESUN]-1659914065120
GPR[SSUN]-1659914065120
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl,213
Find no block!
GPR[SSUN]-1659914065467
org.apache.commons.math.analysis.solvers.BisectionSolver,79
========
verifyIterationCount();
clearResult();
verifyInterval(min,max);
double m;

========
MM Copying to MM
GPR[SPVS]-1659914066636
GPR[SPVAP]-1659914066636
GPR[EPVAP]-1659914068615
GPR[EPVS]-1659914068615
========
if(f.value(max)==0.0){
return max;
}
clearResult();
verifyInterval(min,max);
double m;

========
MM Copying to MM
GPR[SPVS]-1659914068617
GPR[SPVAP]-1659914068617
GPR[EPVAP]-1659914073514
GPR[SPVATF]-1659914073514
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914075315
GPR[EPVS]-1659914075315
========
if(!isBracketing(min,max,f)){
throw MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs.  "+"Endpoints: [{0}, {1}], Values: [{2}, {3}]",lower,upper,function.value(lower),function.value(upper));
}
clearResult();
verifyInterval(min,max);
double m;

========
MM Copying to MM
GPR[SPVS]-1659914075318
GPR[SPVAP]-1659914075318
GPR[EPVAP]-1659914076352
GPR[EPVS]-1659914076352
========
clearResult();
setResult(min,max);
double m;

========
MM Copying to MM
GPR[SPVS]-1659914076355
GPR[SPVAP]-1659914076355
GPR[EPVAP]-1659914077395
GPR[EPVS]-1659914077395
GPR[ESUN]-1659914077399
GPR[SSUN]-1659914077399
org.apache.commons.math.analysis.solvers.BisectionSolver,80
GPR[ESUN]-1659914077712
GPR[SSUN]-1659914077712
org.apache.commons.math.analysis.solvers.BisectionSolver,85
UNKNOWN ASTNode type : catch (FunctionEvaluationException fee) {
  optima[i]=Double.NaN;
  optimaValues[i]=Double.NaN;
}

UNKNOWN ASTNode type : catch (FunctionEvaluationException fee) {
  optima[i]=Double.NaN;
  optimaValues[i]=Double.NaN;
}

UNKNOWN ASTNode type : catch (ConvergenceException ce) {
  optima[i]=Double.NaN;
  optimaValues[i]=Double.NaN;
}

UNKNOWN ASTNode type : catch (ConvergenceException ce) {
  optima[i]=Double.NaN;
  optimaValues[i]=Double.NaN;
}

========
double fm;
double fmin;
double i=0;

========
MM Copying to MM
GPR[SPVS]-1659914080775
GPR[SPVAP]-1659914080775
GPR[EPVAP]-1659914082698
GPR[EPVS]-1659914082698
========
double fm;
double fmin;
verifySequence(min,min,max);
int i=0;

========
MM Copying to MM
GPR[SPVS]-1659914082700
GPR[SPVAP]-1659914082700
GPR[EPVAP]-1659914087590
GPR[SPVATF]-1659914087590
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914089420
GPR[EPVS]-1659914089420
========
double fm;
double fmin;
if(min==0.0){
return max;
}
int i=0;

========
MM Copying to MM
GPR[SPVS]-1659914089422
GPR[SPVAP]-1659914089422
GPR[EPVAP]-1659914091324
GPR[SPVATF]-1659914091324
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914093115
GPR[EPVS]-1659914093115
========
double fm;
double fmin;
verifyBracketing(min,max,f);
int i=0;

========
MM Copying to MM
GPR[SPVS]-1659914093116
GPR[SPVAP]-1659914093116
GPR[EPVAP]-1659914094965
GPR[SPVATF]-1659914094965
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914096746
GPR[EPVS]-1659914096746
========
double fm;
double fmin;
if(min==0.0){
return max;
}
verifyBracketing(min,max,f);
int i=0;

========
MM Copying to MM
GPR[SPVS]-1659914096747
GPR[SPVAP]-1659914096747
GPR[EPVAP]-1659914098607
GPR[SPVATF]-1659914098607
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914100395
GPR[EPVS]-1659914100395
========
double fm;
double fmin;
setSeed(19650218);
int i=0;

========
MM Copying to MM
GPR[SPVS]-1659914100411
GPR[SPVAP]-1659914100411
GPR[EPVAP]-1659914101444
GPR[EPVS]-1659914101444
========
double fm;
double fmin;
f=Math.round(min);
int i=0;

========
MM Copying to MM
GPR[SPVS]-1659914101455
GPR[SPVAP]-1659914101455
GPR[EPVAP]-1659914102446
GPR[EPVS]-1659914102446
========
double fm;
double fmin;
int i=-(i+1);

========
MM Copying to MM
GPR[SPVS]-1659914102462
GPR[SPVAP]-1659914102462
GPR[EPVAP]-1659914103486
GPR[EPVS]-1659914103486
========
double fm;
double fmin;
long i=0;

========
MM Copying to MM
GPR[SPVS]-1659914103490
GPR[SPVAP]-1659914103490
GPR[EPVAP]-1659914104498
GPR[EPVS]-1659914104498
========
i++;
double fm;
double fmin;
int i=0;

========
MM Copying to MM
GPR[SPVS]-1659914104499
GPR[SPVAP]-1659914104499
GPR[EPVAP]-1659914105498
GPR[EPVS]-1659914105498
GPR[ESUN]-1659914105550
GPR[SSUN]-1659914105550
org.apache.commons.math.analysis.solvers.BisectionSolver,86
========
if(fm*fmin>0.0){
setResult(min,i);
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914106846
GPR[SPVAP]-1659914106846
GPR[EPVAP]-1659914111962
GPR[SPVATF]-1659914111962
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914113743
GPR[EPVS]-1659914113743
========
if(fm*fmin>0.0){
return min;
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914113744
GPR[SPVAP]-1659914113744
GPR[EPVAP]-1659914114785
GPR[EPVS]-1659914114785
========
if(fm*fmin>0.0){
setResult(min,i);
return min;

min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914114786
GPR[SPVAP]-1659914114786
GPR[EPVAP]-1659914115805
GPR[EPVS]-1659914115805
========
if(fm*fmin>0.0){
min=min;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914115807
GPR[SPVAP]-1659914115807
GPR[EPVAP]-1659914117698
GPR[SPVATF]-1659914117698
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914119476
GPR[EPVS]-1659914119476
========
if(y0*fmin>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914119477
GPR[SPVAP]-1659914119477
GPR[EPVAP]-1659914120488
GPR[EPVS]-1659914120488
========
if(fm*y1>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914120489
GPR[SPVAP]-1659914120489
GPR[EPVAP]-1659914121528
GPR[EPVS]-1659914121528
========
if(initial*fmin>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914121529
GPR[SPVAP]-1659914121529
GPR[EPVAP]-1659914122594
GPR[EPVS]-1659914122594
========
if(fm*min>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914122595
GPR[SPVAP]-1659914122595
GPR[EPVAP]-1659914124441
GPR[SPVATF]-1659914124441
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914126248
GPR[EPVS]-1659914126248
========
if(fmin==0.0){
return max;
}
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914126250
GPR[SPVAP]-1659914126250
GPR[EPVAP]-1659914128128
GPR[SPVATF]-1659914128128
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914129947
GPR[EPVS]-1659914129947
========
verifyBracketing(min,max,f);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914129948
GPR[SPVAP]-1659914129948
GPR[EPVAP]-1659914131862
GPR[SPVATF]-1659914131862
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914133676
GPR[EPVS]-1659914133676
========
if(fmin==0.0){
return max;
}
verifyBracketing(min,max,f);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914133677
GPR[SPVAP]-1659914133677
GPR[EPVAP]-1659914135513
GPR[SPVATF]-1659914135513
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914137310
GPR[EPVS]-1659914137310
========
if(fm*fmin>0.0){
min=m;
}else {
max=delta;
}

========
MM Copying to MM
GPR[SPVS]-1659914137311
GPR[SPVAP]-1659914137311
GPR[EPVAP]-1659914138325
GPR[EPVS]-1659914138325
========
if(fm*fmin>0.0){
setResult(min,0);
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914138327
GPR[SPVAP]-1659914138327
GPR[EPVAP]-1659914140234
GPR[SPVATF]-1659914140234
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914142081
GPR[EPVS]-1659914142081
========
if(fm*fmin>0.0){
setResult(min,0);
min=min;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914142082
GPR[SPVAP]-1659914142082
GPR[EPVAP]-1659914143957
GPR[SPVATF]-1659914143957
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914145766
GPR[EPVS]-1659914145766
========
if(fmin*min<0){
return solve(f,min,yInitial,max,yMax,initial,yInitial);
}
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914145769
GPR[SPVAP]-1659914145769
GPR[EPVAP]-1659914146778
GPR[EPVS]-1659914146778
========
if(yInitial*fmin>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914146780
GPR[SPVAP]-1659914146780
GPR[EPVAP]-1659914147802
GPR[EPVS]-1659914147802
========
if(fm*yMin>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914147803
GPR[SPVAP]-1659914147803
GPR[EPVAP]-1659914148826
GPR[EPVS]-1659914148826
========
if(fm*yMax>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914148828
GPR[SPVAP]-1659914148828
GPR[EPVAP]-1659914149839
GPR[EPVS]-1659914149839
========
if(u*fmin>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914149841
GPR[SPVAP]-1659914149841
GPR[EPVAP]-1659914150856
GPR[EPVS]-1659914150856
========
if(a*fmin>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914150857
GPR[SPVAP]-1659914150857
GPR[EPVAP]-1659914151868
GPR[EPVS]-1659914151868
========
if(fm*t2>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914151869
GPR[SPVAP]-1659914151869
GPR[EPVAP]-1659914152888
GPR[EPVS]-1659914152888
========
if(Math.abs(min)<=fm){
setResult(min,0);
return max;
}
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914152890
GPR[SPVAP]-1659914152890
GPR[EPVAP]-1659914154749
GPR[SPVATF]-1659914154749
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914156535
GPR[EPVS]-1659914156535
========
i=Math.max((int)(max*n),n+1);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914156536
GPR[SPVAP]-1659914156536
GPR[EPVAP]-1659914157556
GPR[EPVS]-1659914157556
========
min=m;
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}

========
MM Copying to MM
GPR[SPVS]-1659914157557
GPR[SPVAP]-1659914157557
GPR[EPVAP]-1659914159490
GPR[SPVATF]-1659914159490
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914161266
GPR[EPVS]-1659914161266
========
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return fm;
}

========
MM Copying to MM
GPR[SPVS]-1659914164398
GPR[SPVAP]-1659914164398
GPR[EPVAP]-1659914166264
GPR[SPVATF]-1659914166264
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914168050
GPR[EPVS]-1659914168050
========
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914168052
GPR[SPVAP]-1659914168052
GPR[EPVAP]-1659914169921
GPR[SPVATF]-1659914169921
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914171695
GPR[EPVS]-1659914171695
========
if((Math.abs(max-min)<=fm*(Math.abs(min)+Math.abs(max)))||(Math.abs(max-min)<=absoluteAccuracy)){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914171697
GPR[SPVAP]-1659914171697
GPR[EPVAP]-1659914173542
GPR[SPVATF]-1659914173542
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914175326
GPR[EPVS]-1659914175326
========
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(max,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914175328
GPR[SPVAP]-1659914175328
GPR[EPVAP]-1659914177174
GPR[SPVATF]-1659914177174
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914178949
GPR[EPVS]-1659914178949
========
if((Math.abs(max-min)<=fm*(Math.abs(min)+Math.abs(max)))||(Math.abs(max-min)<=absoluteAccuracy)){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(max,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914178951
GPR[SPVAP]-1659914178951
GPR[EPVAP]-1659914180805
GPR[SPVATF]-1659914180805
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914182590
GPR[EPVS]-1659914182590
========
if((Math.abs(max-min)<=fm*(Math.abs(min)+Math.abs(max)))||(Math.abs(max-min)<=absoluteAccuracy)){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914182591
GPR[SPVAP]-1659914182591
GPR[EPVAP]-1659914184443
GPR[SPVATF]-1659914184443
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914186235
GPR[EPVS]-1659914186235
========
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(max,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914186236
GPR[SPVAP]-1659914186236
GPR[EPVAP]-1659914188116
GPR[SPVATF]-1659914188116
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914189879
GPR[EPVS]-1659914189879
========
if((Math.abs(max-min)<=fm*(Math.abs(min)+Math.abs(max)))||(Math.abs(max-min)<=absoluteAccuracy)){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(max,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914189880
GPR[SPVAP]-1659914189880
GPR[EPVAP]-1659914191741
GPR[SPVATF]-1659914191741
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914193510
GPR[EPVS]-1659914193510
========
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914193512
GPR[SPVAP]-1659914193512
GPR[EPVAP]-1659914195352
GPR[SPVATF]-1659914195352
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914197155
GPR[EPVS]-1659914197155
========
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(min,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914197156
GPR[SPVAP]-1659914197156
GPR[EPVAP]-1659914199008
GPR[SPVATF]-1659914199008
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914200794
GPR[EPVS]-1659914200794
========
if(Math.abs(m)<=absoluteAccuracy){
setResult(max,0);
return fm;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914200796
GPR[SPVAP]-1659914200796
GPR[EPVAP]-1659914202641
GPR[SPVATF]-1659914202641
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914204473
GPR[EPVS]-1659914204473
========
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(min,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914204475
GPR[SPVAP]-1659914204475
GPR[EPVAP]-1659914206322
GPR[SPVATF]-1659914206322
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914208119
GPR[EPVS]-1659914208119
========
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return fm;
}

========
MM Copying to MM
GPR[SPVS]-1659914208120
GPR[SPVAP]-1659914208120
GPR[EPVAP]-1659914209974
GPR[SPVATF]-1659914209974
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914211798
GPR[EPVS]-1659914211798
========
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914211799
GPR[SPVAP]-1659914211799
GPR[EPVAP]-1659914213643
GPR[SPVATF]-1659914213643
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914215423
GPR[EPVS]-1659914215423
========
if(Math.abs(m)<=absoluteAccuracy){
setResult(max,0);
return fm;
}
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914215424
GPR[SPVAP]-1659914215424
GPR[EPVAP]-1659914217274
GPR[SPVATF]-1659914217274
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914219070
GPR[EPVS]-1659914219070
========
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(min,i);
return fm;
}

========
MM Copying to MM
GPR[SPVS]-1659914219071
GPR[SPVAP]-1659914219071
GPR[EPVAP]-1659914220918
GPR[SPVATF]-1659914220918
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914222697
GPR[EPVS]-1659914222697
========
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(min,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914222698
GPR[SPVAP]-1659914222698
GPR[EPVAP]-1659914224557
GPR[SPVATF]-1659914224557
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914226330
GPR[EPVS]-1659914226330
========
if(Math.abs(m)<=absoluteAccuracy){
setResult(max,0);
return fm;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(min,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914226331
GPR[SPVAP]-1659914226331
GPR[EPVAP]-1659914228162
GPR[SPVATF]-1659914228162
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914229938
GPR[EPVS]-1659914229938
========
if(Math.abs(m)<=absoluteAccuracy){
setResult(max,0);
return fm;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return fm;
}

========
MM Copying to MM
GPR[SPVS]-1659914229939
GPR[SPVAP]-1659914229939
GPR[EPVAP]-1659914231811
GPR[SPVATF]-1659914231811
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914233635
GPR[EPVS]-1659914233635
========
if(Math.abs(m)<=absoluteAccuracy){
setResult(max,0);
return fm;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914233636
GPR[SPVAP]-1659914233636
GPR[EPVAP]-1659914235479
GPR[SPVATF]-1659914235479
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914237267
GPR[EPVS]-1659914237267
========
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(min,i);
return fm;
}

========
MM Copying to MM
GPR[SPVS]-1659914237268
GPR[SPVAP]-1659914237268
GPR[EPVAP]-1659914239114
GPR[SPVATF]-1659914239114
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914240912
GPR[EPVS]-1659914240912
========
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(min,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914240913
GPR[SPVAP]-1659914240913
GPR[EPVAP]-1659914242782
GPR[SPVATF]-1659914242782
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914244558
GPR[EPVS]-1659914244558
========
if(Math.abs(m)<=absoluteAccuracy){
setResult(max,0);
return fm;
}
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(min,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914244559
GPR[SPVAP]-1659914244559
GPR[EPVAP]-1659914246400
GPR[SPVATF]-1659914246400
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914248179
GPR[EPVS]-1659914248179
========
if(Math.abs(m)<=absoluteAccuracy){
setResult(max,0);
return fm;
}
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return fm;
}

========
MM Copying to MM
GPR[SPVS]-1659914248180
GPR[SPVAP]-1659914248180
GPR[EPVAP]-1659914250036
GPR[SPVATF]-1659914250036
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914251810
GPR[EPVS]-1659914251810
========
if(Math.abs(m)<=absoluteAccuracy){
setResult(max,0);
return fm;
}
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914251812
GPR[SPVAP]-1659914251812
GPR[EPVAP]-1659914253661
GPR[SPVATF]-1659914253661
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914255439
GPR[EPVS]-1659914255439
========
if(Math.abs(m)<=absoluteAccuracy){
setResult(max,0);
return fm;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(min,i);
return fm;
}

========
MM Copying to MM
GPR[SPVS]-1659914255440
GPR[SPVAP]-1659914255440
GPR[EPVAP]-1659914257294
GPR[SPVATF]-1659914257294
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914259051
GPR[EPVS]-1659914259051
========
if(Math.abs(m)<=absoluteAccuracy){
setResult(max,0);
return fm;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(min,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914259052
GPR[SPVAP]-1659914259052
GPR[EPVAP]-1659914260909
GPR[SPVATF]-1659914260909
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914262714
GPR[EPVS]-1659914262714
========
if(Math.abs(m)<=absoluteAccuracy){
setResult(max,0);
return fm;
}
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(min,i);
return fm;
}

========
MM Copying to MM
GPR[SPVS]-1659914262715
GPR[SPVAP]-1659914262715
GPR[EPVAP]-1659914264562
GPR[SPVATF]-1659914264562
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914266347
GPR[EPVS]-1659914266347
========
if(Math.abs(m)<=absoluteAccuracy){
setResult(max,0);
return fm;
}
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(min,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914266348
GPR[SPVAP]-1659914266348
GPR[EPVAP]-1659914268221
GPR[SPVATF]-1659914268221
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914269993
GPR[EPVS]-1659914269993
========
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(max,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914269995
GPR[SPVAP]-1659914269995
GPR[EPVAP]-1659914271854
GPR[SPVATF]-1659914271854
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914273643
GPR[EPVS]-1659914273643
========
if(Math.abs(max-min)<absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914273645
GPR[SPVAP]-1659914273645
GPR[EPVAP]-1659914275518
GPR[SPVATF]-1659914275518
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914277290
GPR[EPVS]-1659914277290
========
if(Math.abs(min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914277291
GPR[SPVAP]-1659914277291
GPR[EPVAP]-1659914279163
GPR[SPVATF]-1659914279163
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914280943
GPR[EPVS]-1659914280943
========
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(fm,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914280944
GPR[SPVAP]-1659914280944
GPR[EPVAP]-1659914282828
GPR[SPVATF]-1659914282828
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914284653
GPR[EPVS]-1659914284653
========
if(Math.abs(min)<absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914284654
GPR[SPVAP]-1659914284654
GPR[EPVAP]-1659914286523
GPR[SPVATF]-1659914286523
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914288325
GPR[EPVS]-1659914288325
========
if(Math.abs(max-min)<absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(fm,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914288326
GPR[SPVAP]-1659914288326
GPR[EPVAP]-1659914290170
GPR[SPVATF]-1659914290170
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914291958
GPR[EPVS]-1659914291958
========
if(Math.abs(max-min)<absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914291959
GPR[SPVAP]-1659914291959
GPR[EPVAP]-1659914293800
GPR[SPVATF]-1659914293800
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914295579
GPR[EPVS]-1659914295579
========
if(Math.abs(min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(fm,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914295580
GPR[SPVAP]-1659914295580
GPR[EPVAP]-1659914297428
GPR[SPVATF]-1659914297428
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914299215
GPR[EPVS]-1659914299215
========
if(Math.abs(min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914299216
GPR[SPVAP]-1659914299216
GPR[EPVAP]-1659914301085
GPR[SPVATF]-1659914301085
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914302881
GPR[EPVS]-1659914302881
========
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(fm,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914302883
GPR[SPVAP]-1659914302883
GPR[EPVAP]-1659914304727
GPR[SPVATF]-1659914304727
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914306505
GPR[EPVS]-1659914306505
========
if(Math.abs(min)<absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(fm,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914306506
GPR[SPVAP]-1659914306506
GPR[EPVAP]-1659914308351
GPR[SPVATF]-1659914308351
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914310147
GPR[EPVS]-1659914310147
========
if(Math.abs(min)<absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914310148
GPR[SPVAP]-1659914310148
GPR[EPVAP]-1659914311993
GPR[SPVATF]-1659914311993
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914313765
GPR[EPVS]-1659914313765
========
if(Math.abs(max-min)<absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(fm,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914313766
GPR[SPVAP]-1659914313766
GPR[EPVAP]-1659914315610
GPR[SPVATF]-1659914315610
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914317414
GPR[EPVS]-1659914317414
========
if(Math.abs(min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(fm,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914317415
GPR[SPVAP]-1659914317415
GPR[EPVAP]-1659914319260
GPR[SPVATF]-1659914319260
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914321030
GPR[EPVS]-1659914321030
========
if(Math.abs(min)<absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(fm,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914321031
GPR[SPVAP]-1659914321031
GPR[EPVAP]-1659914322920
GPR[SPVATF]-1659914322920
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914324695
GPR[EPVS]-1659914324695
========
fm=fm+((Math.abs(fm)>fm)?d:((d>0)?tol:-tol));
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914324696
GPR[SPVAP]-1659914324696
GPR[EPVAP]-1659914325732
GPR[EPVS]-1659914325732
========
if(Math.abs(max)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914325733
GPR[SPVAP]-1659914325733
GPR[EPVAP]-1659914327606
GPR[SPVATF]-1659914327606
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914329370
GPR[EPVS]-1659914329370
========
if(Math.abs(max)<absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914329371
GPR[SPVAP]-1659914329371
GPR[EPVAP]-1659914331206
GPR[SPVATF]-1659914331206
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914333001
GPR[EPVS]-1659914333001
========
if(Math.abs(max-min)<=absoluteAccuracy){
ta=fm;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914333003
GPR[SPVAP]-1659914333003
GPR[EPVAP]-1659914334012
GPR[EPVS]-1659914334012
========
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return max;
}

========
MM Copying to MM
GPR[SPVS]-1659914334013
GPR[SPVAP]-1659914334013
GPR[EPVAP]-1659914335880
GPR[SPVATF]-1659914335880
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914337650
GPR[EPVS]-1659914337650
========
if(Math.abs(min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return max;
}

========
MM Copying to MM
GPR[SPVS]-1659914337651
GPR[SPVAP]-1659914337651
GPR[EPVAP]-1659914339490
GPR[SPVATF]-1659914339490
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914341262
GPR[EPVS]-1659914341262
========
if(Math.abs(max-min)<=Math.max(absoluteAccuracy*Math.abs(max),fm)){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914341264
GPR[SPVAP]-1659914341264
GPR[EPVAP]-1659914343105
GPR[SPVATF]-1659914343105
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914344869
GPR[EPVS]-1659914344869
========
if(Math.abs(max-min)<=Math.max(absoluteAccuracy*Math.abs(max),fm)){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(max,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914344870
GPR[SPVAP]-1659914344870
GPR[EPVAP]-1659914346720
GPR[SPVATF]-1659914346720
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914348498
GPR[EPVS]-1659914348498
========
if(Math.abs(max-min)<=Math.max(absoluteAccuracy*Math.abs(max),fm)){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914348499
GPR[SPVAP]-1659914348499
GPR[EPVAP]-1659914350378
GPR[SPVATF]-1659914350378
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914352171
GPR[EPVS]-1659914352171
========
if(Math.abs(max-min)<=Math.max(absoluteAccuracy*Math.abs(max),fm)){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(max,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914352172
GPR[SPVAP]-1659914352172
GPR[EPVAP]-1659914354092
GPR[SPVATF]-1659914354092
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914355870
GPR[EPVS]-1659914355870
========
if(max*fm<0){
return solve(f,fm,yInitial,max,yMax,initial,yInitial);
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914355872
GPR[SPVAP]-1659914355872
GPR[EPVAP]-1659914356881
GPR[EPVS]-1659914356881
========
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(max,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914356882
GPR[SPVAP]-1659914356882
GPR[EPVAP]-1659914358717
GPR[SPVATF]-1659914358717
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914360527
GPR[EPVS]-1659914360527
========
if(Math.abs(max-min)<=MathUtils.EPSILON*max){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914360529
GPR[SPVAP]-1659914360529
GPR[EPVAP]-1659914361523
GPR[EPVS]-1659914361523
========
if(Math.abs(max-min)<=absoluteAccuracy){
largest=Math.abs(min);
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914361525
GPR[SPVAP]-1659914361525
GPR[EPVAP]-1659914362541
GPR[EPVS]-1659914362541
========
if(Math.abs(m-max)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914362543
GPR[SPVAP]-1659914362543
GPR[EPVAP]-1659914364396
GPR[SPVATF]-1659914364396
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914366171
GPR[EPVS]-1659914366171
========
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return x1;
}

========
MM Copying to MM
GPR[SPVS]-1659914366172
GPR[SPVAP]-1659914366172
GPR[EPVAP]-1659914367233
GPR[EPVS]-1659914367233
========
if(Math.abs(min-max)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914367234
GPR[SPVAP]-1659914367234
GPR[EPVAP]-1659914369079
GPR[SPVATF]-1659914369079
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914370871
GPR[EPVS]-1659914370871
========
if(Math.sqrt(Math.abs(fm-fm*meanX))<min){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914370873
GPR[SPVAP]-1659914370873
GPR[EPVAP]-1659914371894
GPR[EPVS]-1659914371894
========
if(Math.sqrt(Math.abs(fm-fm*meanX))<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914371895
GPR[SPVAP]-1659914371895
GPR[EPVAP]-1659914372930
GPR[EPVS]-1659914372930
========
if(Math.abs(max-min)<=min){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914372931
GPR[SPVAP]-1659914372931
GPR[EPVAP]-1659914374798
GPR[SPVATF]-1659914374798
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914376587
GPR[EPVS]-1659914376587
========
if(Math.sqrt(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914376588
GPR[SPVAP]-1659914376588
GPR[EPVAP]-1659914378457
GPR[SPVATF]-1659914378457
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914380230
GPR[EPVS]-1659914380230
========
if(Math.abs(max-min)<min){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914380231
GPR[SPVAP]-1659914380231
GPR[EPVAP]-1659914382088
GPR[SPVATF]-1659914382088
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914383929
GPR[EPVS]-1659914383929
========
if(Math.sqrt(max-min)<absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914383930
GPR[SPVAP]-1659914383930
GPR[EPVAP]-1659914385782
GPR[SPVATF]-1659914385782
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914387558
GPR[EPVS]-1659914387558
========
if(Math.sqrt(max-min)<=min){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914387559
GPR[SPVAP]-1659914387559
GPR[EPVAP]-1659914389438
GPR[SPVATF]-1659914389438
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914391219
GPR[EPVS]-1659914391219
========
if(Math.sqrt(max-min)<min){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914391220
GPR[SPVAP]-1659914391221
GPR[EPVAP]-1659914393084
GPR[SPVATF]-1659914393084
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914394879
GPR[EPVS]-1659914394879
========
if(Math.abs(max-min)<=absoluteAccuracy){
hNew=Math.abs(min);
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914394880
GPR[SPVAP]-1659914394880
GPR[EPVAP]-1659914395906
GPR[EPVS]-1659914395906
========
if(Math.abs(max-min)<=absoluteAccuracy){
iterationCount=i;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914395909
GPR[SPVAP]-1659914395909
GPR[EPVAP]-1659914397768
GPR[SPVATF]-1659914397768
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914399538
GPR[EPVS]-1659914399538
========
checkVectorDimensions(v.length);
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914399540
GPR[SPVAP]-1659914399540
GPR[EPVAP]-1659914400561
GPR[EPVS]-1659914400561
========
verifyBracketing(min,max,f);
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914400563
GPR[SPVAP]-1659914400563
GPR[EPVAP]-1659914402416
GPR[SPVATF]-1659914402416
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914404194
GPR[EPVS]-1659914404194
========
verifyBracketing(min,max,f);
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return max;
}

========
MM Copying to MM
GPR[SPVS]-1659914404195
GPR[SPVAP]-1659914404195
GPR[EPVAP]-1659914406034
GPR[SPVATF]-1659914406034
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914407825
GPR[EPVS]-1659914407825
========
if(Math.abs(max-min)<=MathUtils.EPSILON*absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914407827
GPR[SPVAP]-1659914407827
GPR[EPVAP]-1659914408835
GPR[EPVS]-1659914408835
========
if(Math.abs(max-min)<=max){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914408837
GPR[SPVAP]-1659914408837
GPR[EPVAP]-1659914410688
GPR[SPVATF]-1659914410688
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914412466
GPR[EPVS]-1659914412466
========
if(Math.abs(max-min)<=absoluteAccuracy){
min_dist=fm;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914412467
GPR[SPVAP]-1659914412467
GPR[EPVAP]-1659914413481
GPR[EPVS]-1659914413481
========
if(Math.abs(max-min)<max){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914413482
GPR[SPVAP]-1659914413482
GPR[EPVAP]-1659914415344
GPR[SPVATF]-1659914415344
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914417182
GPR[EPVS]-1659914417182
========
if(Math.abs(absoluteAccuracy)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914417183
GPR[SPVAP]-1659914417183
GPR[EPVAP]-1659914419038
GPR[SPVATF]-1659914419038
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914420830
GPR[EPVS]-1659914420830
========
if(Math.abs(absoluteAccuracy)<absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914420831
GPR[SPVAP]-1659914420831
GPR[EPVAP]-1659914422666
GPR[SPVATF]-1659914422666
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914424495
GPR[EPVS]-1659914424495
========
if(Math.abs(max-min)<=absoluteAccuracy){
this.denominator=1;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914424498
GPR[SPVAP]-1659914424498
GPR[EPVAP]-1659914425514
GPR[EPVS]-1659914425514
========
if(Math.abs(max-min)<=absoluteAccuracy){
r0=fm;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914425516
GPR[SPVAP]-1659914425516
GPR[EPVAP]-1659914426542
GPR[EPVS]-1659914426542
========
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.max(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914426544
GPR[SPVAP]-1659914426544
GPR[EPVAP]-1659914427554
GPR[EPVS]-1659914427554
========
if(Math.abs(max-min)<=absoluteAccuracy){
ratio=absoluteAccuracy/min;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914427556
GPR[SPVAP]-1659914427556
GPR[EPVAP]-1659914428604
GPR[EPVS]-1659914428604
========
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return min;
}

========
MM Copying to MM
GPR[SPVS]-1659914428609
GPR[SPVAP]-1659914428609
GPR[EPVAP]-1659914430454
GPR[SPVATF]-1659914430455
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914432236
GPR[EPVS]-1659914432236
========
if(min==0.0){
return max;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914432237
GPR[SPVAP]-1659914432237
GPR[EPVAP]-1659914434085
GPR[SPVATF]-1659914434085
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914435873
GPR[EPVS]-1659914435873
========
if(min==0.0){
return max;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return min;
}

========
MM Copying to MM
GPR[SPVS]-1659914435874
GPR[SPVAP]-1659914435874
GPR[EPVAP]-1659914437717
GPR[SPVATF]-1659914437717
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914439503
GPR[EPVS]-1659914439503
========
verifyBracketing(min,max,f);
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return min;
}

========
MM Copying to MM
GPR[SPVS]-1659914439504
GPR[SPVAP]-1659914439504
GPR[EPVAP]-1659914441351
GPR[SPVATF]-1659914441351
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914443171
GPR[EPVS]-1659914443171
========
if(min==0.0){
return max;
}
verifyBracketing(min,max,f);
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914443172
GPR[SPVAP]-1659914443172
GPR[EPVAP]-1659914445032
GPR[SPVATF]-1659914445032
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914446811
GPR[EPVS]-1659914446811
========
if(min==0.0){
return max;
}
verifyBracketing(min,max,f);
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return min;
}

========
MM Copying to MM
GPR[SPVS]-1659914446812
GPR[SPVAP]-1659914446812
GPR[EPVAP]-1659914448712
GPR[SPVATF]-1659914448712
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914450487
GPR[EPVS]-1659914450487
========
if(Math.abs(max)<min){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914450490
GPR[SPVAP]-1659914450490
GPR[EPVAP]-1659914452342
GPR[SPVATF]-1659914452342
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914454144
GPR[EPVS]-1659914454144
========
if(Math.abs(max)<=min){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914454145
GPR[SPVAP]-1659914454145
GPR[EPVAP]-1659914456003
GPR[SPVATF]-1659914456003
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914457782
GPR[EPVS]-1659914457782
========
verifyInterval(min,absoluteAccuracy);
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914457786
GPR[SPVAP]-1659914457786
GPR[EPVAP]-1659914459654
GPR[SPVATF]-1659914459654
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914461438
GPR[EPVS]-1659914461438
========
if(Math.abs(i)==absoluteAccuracy){
return ;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914461440
GPR[SPVAP]-1659914461440
GPR[EPVAP]-1659914462505
GPR[EPVS]-1659914462505
========
if(Math.abs(max-min)<=absoluteAccuracy){
stepSize=0;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914462507
GPR[SPVAP]-1659914462507
GPR[EPVAP]-1659914463528
GPR[EPVS]-1659914463528
========
if(Math.abs(max-min)<=absoluteAccuracy){
hNew=0;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914463530
GPR[SPVAP]-1659914463530
GPR[EPVAP]-1659914464552
GPR[EPVS]-1659914464552
========
if(Math.abs(max-min)<=absoluteAccuracy){
hNew=0;
stepSize=0;

m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914464553
GPR[SPVAP]-1659914464553
GPR[EPVAP]-1659914465580
GPR[EPVS]-1659914465580
========
if(Math.abs(min)<=absoluteAccuracy){
stepSize=0;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914465581
GPR[SPVAP]-1659914465581
GPR[EPVAP]-1659914466604
GPR[EPVS]-1659914466604
========
if(Math.abs(mulAndCheck(i/gcd(a,i),b))==Integer.MIN_VALUE){
throw MathRuntimeException.createArithmeticException("overflow: lcm({0}, {1}) is 2^31",i,i);
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914466606
GPR[SPVAP]-1659914466606
GPR[EPVAP]-1659914467628
GPR[EPVS]-1659914467628
========
if(Math.abs(max-min)<=absoluteAccuracy){
loop=false;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914467630
GPR[SPVAP]-1659914467630
GPR[EPVAP]-1659914468689
GPR[EPVS]-1659914468689
========
if(Math.abs(max-min)<=absoluteAccuracy){
stepSize=0;
loop=false;

m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914468690
GPR[SPVAP]-1659914468690
GPR[EPVAP]-1659914469711
GPR[EPVS]-1659914469711
========
if((i+i)>internalArray.length){
expandTo(startIndex+i);
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914469714
GPR[SPVAP]-1659914469714
GPR[EPVAP]-1659914470741
GPR[EPVS]-1659914470741
========
i=i;
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914470742
GPR[SPVAP]-1659914470742
GPR[EPVAP]-1659914472618
GPR[SPVATF]-1659914472618
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914474407
GPR[EPVS]-1659914474407
========
if(Math.abs(max-min)<=absoluteAccuracy){
dev=values[i]-max;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914474414
GPR[SPVAP]-1659914474414
GPR[EPVAP]-1659914475430
GPR[EPVS]-1659914475430
========
if(Math.get(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914475433
GPR[SPVAP]-1659914475433
GPR[EPVAP]-1659914476446
GPR[EPVS]-1659914476446
========
m=fm-min;
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914476449
GPR[SPVAP]-1659914476449
GPR[EPVAP]-1659914478297
GPR[SPVATF]-1659914478297
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914480124
GPR[EPVS]-1659914480124
========
i++;
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914480125
GPR[SPVAP]-1659914480126
GPR[EPVAP]-1659914481970
GPR[SPVATF]-1659914481970
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914483767
GPR[EPVS]-1659914483767
========
m=fm-min;
i++;
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914483768
GPR[SPVAP]-1659914483768
GPR[EPVAP]-1659914485637
GPR[SPVATF]-1659914485637
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914487459
GPR[EPVS]-1659914487459
========
if(Math.abs(max-min)<=absoluteAccuracy){
ak2=fm;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914487461
GPR[SPVAP]-1659914487461
GPR[EPVAP]-1659914488494
GPR[EPVS]-1659914488494
========
if(Math.abs(max-min)<=absoluteAccuracy){
x2=max;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914488496
GPR[SPVAP]-1659914488496
GPR[EPVAP]-1659914489515
GPR[EPVS]-1659914489515
========
if(Math.abs(max-min)<=absoluteAccuracy){
y2=fm;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914489516
GPR[SPVAP]-1659914489516
GPR[EPVAP]-1659914490558
GPR[EPVS]-1659914490558
========
if(Math.abs(max-min)<=absoluteAccuracy){
delta=min-max;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914490559
GPR[SPVAP]-1659914490559
GPR[EPVAP]-1659914491631
GPR[EPVS]-1659914491631
========
if(Math.abs(max-min)<=absoluteAccuracy){
x2=max;
y2=fm;
delta=min-max;

m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914491632
GPR[SPVAP]-1659914491632
GPR[EPVAP]-1659914492636
GPR[EPVS]-1659914492636
========
if(i<0){
i=-i-2;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914492641
GPR[SPVAP]-1659914492641
GPR[EPVAP]-1659914494489
GPR[SPVATF]-1659914494489
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914496266
GPR[EPVS]-1659914496266
========
if(i>=polynomials.length){
i--;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914496267
GPR[SPVAP]-1659914496267
GPR[EPVAP]-1659914497286
GPR[EPVS]-1659914497286
========
if(max*fm<0){
return solve(f,fm,yInitial,max,yMax,initial,yInitial);
}
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914497294
GPR[SPVAP]-1659914497294
GPR[EPVAP]-1659914498309
GPR[EPVS]-1659914498309
========
if(max*fm<0){
return solve(f,fm,yInitial,max,yMax,initial,yInitial);
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(max,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914498310
GPR[SPVAP]-1659914498310
GPR[EPVAP]-1659914499326
GPR[EPVS]-1659914499326
========
if(max*fm<0){
return solve(f,fm,yInitial,max,yMax,initial,yInitial);
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914499327
GPR[SPVAP]-1659914499328
GPR[EPVAP]-1659914500349
GPR[EPVS]-1659914500349
========
if(max*fm<0){
return solve(f,fm,yInitial,max,yMax,initial,yInitial);
}
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(max,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914500351
GPR[SPVAP]-1659914500351
GPR[EPVAP]-1659914501363
GPR[EPVS]-1659914501363
========
if(max*fm<0){
return solve(f,fm,yInitial,max,yMax,initial,yInitial);
}
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914501364
GPR[SPVAP]-1659914501364
GPR[EPVAP]-1659914502376
GPR[EPVS]-1659914502376
========
if(max*fm<0){
return solve(f,fm,yInitial,max,yMax,initial,yInitial);
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(max,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914502377
GPR[SPVAP]-1659914502377
GPR[EPVAP]-1659914503391
GPR[EPVS]-1659914503391
========
if(max*fm<0){
return solve(f,fm,yInitial,max,yMax,initial,yInitial);
}
if(Math.abs(fm)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(max,i);
return result;
}

========
MM Copying to MM
GPR[SPVS]-1659914503392
GPR[SPVAP]-1659914503392
GPR[EPVAP]-1659914504405
GPR[EPVS]-1659914504405
========
if(Math.abs(min)<=absoluteAccuracy){
loop=false;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914504413
GPR[SPVAP]-1659914504413
GPR[EPVAP]-1659914505427
GPR[EPVS]-1659914505427
========
if(Math.abs(min)<=absoluteAccuracy){
stepSize=0;
loop=false;

m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914505428
GPR[SPVAP]-1659914505428
GPR[EPVAP]-1659914506426
GPR[EPVS]-1659914506426
========
if(Math.abs(max-min)<=absoluteAccuracy){
stepSize=0;
loop=false;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914506427
GPR[SPVAP]-1659914506427
GPR[EPVAP]-1659914507447
GPR[EPVS]-1659914507447
========
if(Math.abs(max-min)<=absoluteAccuracy){
stepSize=0;
stepSize=0;
loop=false;

m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914507448
GPR[SPVAP]-1659914507448
GPR[EPVAP]-1659914508484
GPR[EPVS]-1659914508484
========
if(Math.abs(max-min)<=absoluteAccuracy){
loop=false;
stepSize=0;
loop=false;

m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914508485
GPR[SPVAP]-1659914508485
GPR[EPVAP]-1659914509504
GPR[EPVS]-1659914509504
========
if(Math.abs(min)<=absoluteAccuracy){
stepSize=0;
loop=false;
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914509505
GPR[SPVAP]-1659914509505
GPR[EPVAP]-1659914510521
GPR[EPVS]-1659914510521
========
if(Math.abs(min)<=absoluteAccuracy){
stepSize=0;
stepSize=0;
loop=false;

m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914510522
GPR[SPVAP]-1659914510522
GPR[EPVAP]-1659914511551
GPR[EPVS]-1659914511551
========
if(Math.abs(min)<=absoluteAccuracy){
loop=false;
stepSize=0;
loop=false;

m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914511552
GPR[SPVAP]-1659914511552
GPR[EPVAP]-1659914512573
GPR[EPVS]-1659914512573
========
if(Math.abs(max-min)<=absoluteAccuracy){
stepSize=0;
loop=false;
stepSize=0;
loop=false;

m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914512574
GPR[SPVAP]-1659914512574
GPR[EPVAP]-1659914513590
GPR[EPVS]-1659914513590
========
if(Math.abs(min)<=absoluteAccuracy){
stepSize=0;
loop=false;
stepSize=0;
loop=false;

m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914513592
GPR[SPVAP]-1659914513592
GPR[EPVAP]-1659914514589
GPR[EPVS]-1659914514589
========
setSeed(19650218);
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}

========
MM Copying to MM
GPR[SPVS]-1659914514594
GPR[SPVAP]-1659914514594
GPR[EPVAP]-1659914515645
GPR[EPVS]-1659914515645
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(m-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914519332
GPR[SPVAP]-1659914519332
GPR[EPVAP]-1659914521230
GPR[SPVATF]-1659914521230
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914523021
GPR[EPVS]-1659914523021
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return x1;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914523022
GPR[SPVAP]-1659914523022
GPR[EPVAP]-1659914524030
GPR[EPVS]-1659914524030
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
x0=m;
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914524031
GPR[SPVAP]-1659914524031
GPR[EPVAP]-1659914525032
GPR[EPVS]-1659914525032
========
if(Math.abs(fm)<=absoluteAccuracy){
setResult(min,0);
return fmin;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914525033
GPR[SPVAP]-1659914525033
GPR[EPVAP]-1659914526047
GPR[EPVS]-1659914526047
========
if(fmin*fm<0){
return solve(f,min,yMin,fmin,yInitial,min,yMin);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914526048
GPR[SPVAP]-1659914526048
GPR[EPVAP]-1659914527094
GPR[EPVS]-1659914527094
========
if(Math.abs(max)<=absoluteAccuracy){
setResult(m,0);
return fmin;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914527095
GPR[SPVAP]-1659914527095
GPR[EPVAP]-1659914528102
GPR[EPVS]-1659914528102
========
if(fmin*max<0){
return solve(f,fmin,yInitial,m,yMax,initial,yInitial);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914528103
GPR[SPVAP]-1659914528103
GPR[EPVAP]-1659914529118
GPR[EPVS]-1659914529118
========
if(f.value(max)==0.0){
return max;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914529120
GPR[SPVAP]-1659914529120
GPR[EPVAP]-1659914530965
GPR[SPVATF]-1659914530965
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914532762
GPR[EPVS]-1659914532762
========
if(f.value(m)==0.0){
return initial;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914532763
GPR[SPVAP]-1659914532764
GPR[EPVAP]-1659914533775
GPR[EPVS]-1659914533775
========
verifyBracketing(min,max,f);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914533776
GPR[SPVAP]-1659914533776
GPR[EPVAP]-1659914535609
GPR[SPVATF]-1659914535609
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914537387
GPR[EPVS]-1659914537387
========
verifySequence(min,m,max);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914537388
GPR[SPVAP]-1659914537388
GPR[EPVAP]-1659914538405
GPR[EPVS]-1659914538405
========
if(isBracketing(min,m,f)){
return solve(f,min,initial);
}else {
return solve(f,initial,max);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914538406
GPR[SPVAP]-1659914538406
GPR[EPVAP]-1659914539412
GPR[EPVS]-1659914539412
========
if(f.value(max)==0.0){
return max;
}
verifyBracketing(min,max,f);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914539413
GPR[SPVAP]-1659914539413
GPR[EPVAP]-1659914541277
GPR[SPVATF]-1659914541277
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914543061
GPR[EPVS]-1659914543061
========
while(i<maximalIterationCount){
setResult(max,0);
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914543062
GPR[SPVAP]-1659914543062
GPR[EPVAP]-1659914544917
GPR[SPVATF]-1659914544917
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914546724
GPR[EPVS]-1659914546724
========
while(i<maximalIterationCount){
x0=m;
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914546726
GPR[SPVAP]-1659914546726
GPR[EPVAP]-1659914547776
GPR[EPVS]-1659914547776
========
while(i<maximalIterationCount){
y0=max;
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914547777
GPR[SPVAP]-1659914547777
GPR[EPVAP]-1659914548810
GPR[EPVS]-1659914548810
========
while(i<maximalIterationCount){
x0=m;
y0=max;

m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914548811
GPR[SPVAP]-1659914548811
GPR[EPVAP]-1659914549824
GPR[EPVS]-1659914549824
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.abs(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914549827
GPR[SPVAP]-1659914549827
GPR[EPVAP]-1659914550837
GPR[EPVS]-1659914550837
========
m=min;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914550839
GPR[SPVAP]-1659914550839
GPR[EPVAP]-1659914552725
GPR[SPVATF]-1659914552725
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914554585
GPR[EPVS]-1659914554585
========
m=max;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914554586
GPR[SPVAP]-1659914554586
GPR[EPVAP]-1659914556438
GPR[SPVATF]-1659914556438
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914558229
GPR[EPVS]-1659914558229
========
min=x1+fmin;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914558230
GPR[SPVAP]-1659914558230
GPR[EPVAP]-1659914559252
GPR[EPVS]-1659914559252
========
max=f.value(min);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914559253
GPR[SPVAP]-1659914559253
GPR[EPVAP]-1659914561124
GPR[SPVATF]-1659914561124
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914562951
GPR[EPVS]-1659914562951
========
if((max>0)==(absoluteAccuracy>0)){
fm=m;
y2=m;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914562952
GPR[SPVAP]-1659914562952
GPR[EPVAP]-1659914563994
GPR[EPVS]-1659914563994
========
m=fm-min;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914563995
GPR[SPVAP]-1659914563995
GPR[EPVAP]-1659914565000
GPR[EPVS]-1659914565000
========
i++;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914565001
GPR[SPVAP]-1659914565001
GPR[EPVAP]-1659914566888
GPR[SPVATF]-1659914566888
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914568815
GPR[EPVS]-1659914568815
========
m=min;
m=max;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914568816
GPR[SPVAP]-1659914568816
GPR[EPVAP]-1659914570787
GPR[SPVATF]-1659914570787
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914572667
GPR[EPVS]-1659914572667
========
m=min;
max=f.value(min);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914572669
GPR[SPVAP]-1659914572669
GPR[EPVAP]-1659914574567
GPR[SPVATF]-1659914574567
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914576364
GPR[EPVS]-1659914576364
========
m=min;
i++;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914576365
GPR[SPVAP]-1659914576365
GPR[EPVAP]-1659914578216
GPR[SPVATF]-1659914578216
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914579995
GPR[EPVS]-1659914579995
========
m=max;
max=f.value(min);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914579996
GPR[SPVAP]-1659914579996
GPR[EPVAP]-1659914581862
GPR[SPVATF]-1659914581862
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914583657
GPR[EPVS]-1659914583657
========
m=max;
i++;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914583658
GPR[SPVAP]-1659914583658
GPR[EPVAP]-1659914585550
GPR[SPVATF]-1659914585550
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914587339
GPR[EPVS]-1659914587339
========
max=f.value(min);
i++;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914587340
GPR[SPVAP]-1659914587340
GPR[EPVAP]-1659914589171
GPR[SPVATF]-1659914589171
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914590950
GPR[EPVS]-1659914590950
========
m=min;
m=max;
max=f.value(min);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914590951
GPR[SPVAP]-1659914590951
GPR[EPVAP]-1659914592820
GPR[SPVATF]-1659914592820
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914594587
GPR[EPVS]-1659914594587
========
m=min;
m=max;
i++;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914594588
GPR[SPVAP]-1659914594588
GPR[EPVAP]-1659914596463
GPR[SPVATF]-1659914596463
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914598298
GPR[EPVS]-1659914598298
========
m=min;
max=f.value(min);
i++;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914598299
GPR[SPVAP]-1659914598299
GPR[EPVAP]-1659914600144
GPR[SPVATF]-1659914600144
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914601933
GPR[EPVS]-1659914601933
========
m=max;
max=f.value(min);
i++;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914601934
GPR[SPVAP]-1659914601934
GPR[EPVAP]-1659914603795
GPR[SPVATF]-1659914603795
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914605607
GPR[EPVS]-1659914605607
========
m=min;
m=max;
max=f.value(min);
i++;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914605608
GPR[SPVAP]-1659914605608
GPR[EPVAP]-1659914607499
GPR[SPVATF]-1659914607499
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914609283
GPR[EPVS]-1659914609283
========
if(f.value(min)==0.0){
return min;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914609285
GPR[SPVAP]-1659914609285
GPR[EPVAP]-1659914611135
GPR[SPVATF]-1659914611135
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914612954
GPR[EPVS]-1659914612954
========
if(isRootOK(min,max,solve(new Complex[coefficients.length],new Complex(0.5*(min+max),0.0)))){
setResult(z.getReal(),i);
return fmin;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914612955
GPR[SPVAP]-1659914612955
GPR[EPVAP]-1659914613970
GPR[EPVS]-1659914613970
========
if(f.value(min)==0.0){
return min;
}
if(f.value(max)==0.0){
return max;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914613971
GPR[SPVAP]-1659914613971
GPR[EPVAP]-1659914615881
GPR[SPVATF]-1659914615881
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914617678
GPR[EPVS]-1659914617678
========
if(f.value(min)==0.0){
return min;
}
verifyBracketing(min,max,f);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914617680
GPR[SPVAP]-1659914617680
GPR[EPVAP]-1659914619544
GPR[SPVATF]-1659914619544
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914621377
GPR[EPVS]-1659914621377
========
if(f.value(min)==0.0){
return min;
}
if(f.value(max)==0.0){
return max;
}
verifyBracketing(min,max,f);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914621379
GPR[SPVAP]-1659914621379
GPR[EPVAP]-1659914623264
GPR[SPVATF]-1659914623264
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914625112
GPR[EPVS]-1659914625112
========
clearResult();
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914625122
GPR[SPVAP]-1659914625122
GPR[EPVAP]-1659914627038
GPR[SPVATF]-1659914627038
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914628867
GPR[EPVS]-1659914628867
========
verifyInterval(min,max);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914628868
GPR[SPVAP]-1659914628868
GPR[EPVAP]-1659914630760
GPR[SPVATF]-1659914630760
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914632532
GPR[EPVS]-1659914632532
========
verifyIterationCount();
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914632533
GPR[SPVAP]-1659914632533
GPR[EPVAP]-1659914633546
GPR[EPVS]-1659914633546
========
clearResult();
verifyInterval(min,max);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914633547
GPR[SPVAP]-1659914633547
GPR[EPVAP]-1659914635392
GPR[SPVATF]-1659914635392
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914637183
GPR[EPVS]-1659914637183
========
while(i<maximalIterationCount){
sum+=f.value(m);
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914637186
GPR[SPVAP]-1659914637186
GPR[EPVAP]-1659914638209
GPR[EPVS]-1659914638209
========
m=fm;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914638211
GPR[SPVAP]-1659914638211
GPR[EPVAP]-1659914639232
GPR[EPVS]-1659914639232
========
fm=f.value(min);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914639233
GPR[SPVAP]-1659914639233
GPR[EPVAP]-1659914641125
GPR[SPVATF]-1659914641125
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914642970
GPR[EPVS]-1659914642970
========
fm=f.value(min);
i++;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914642971
GPR[SPVAP]-1659914642971
GPR[EPVAP]-1659914644855
GPR[SPVATF]-1659914644855
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914646671
GPR[EPVS]-1659914646671
========
while(i<maximalIterationCount){
y2=f.value(m);
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914646673
GPR[SPVAP]-1659914646673
GPR[EPVAP]-1659914647694
GPR[EPVS]-1659914647694
========
while(i<maximalIterationCount){
y0=f.value(m);
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914647695
GPR[SPVAP]-1659914647695
GPR[EPVAP]-1659914648706
GPR[EPVS]-1659914648706
========
clearResult();
verifyIterationCount();
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914648708
GPR[SPVAP]-1659914648708
GPR[EPVAP]-1659914649747
GPR[EPVS]-1659914649747
========
verifyInterval(min,max);
verifyIterationCount();
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914649748
GPR[SPVAP]-1659914649748
GPR[EPVAP]-1659914650774
GPR[EPVS]-1659914650774
========
clearResult();
verifyInterval(min,max);
verifyIterationCount();
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914650775
GPR[SPVAP]-1659914650775
GPR[EPVAP]-1659914651788
GPR[EPVS]-1659914651788
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++tol;
}

========
MM Copying to MM
GPR[SPVS]-1659914651792
GPR[SPVAP]-1659914651792
GPR[EPVAP]-1659914652821
GPR[EPVS]-1659914652821
========
if(isRootOK(min,max,solve(new Complex[coefficients.length],new Complex(0.5*(min+max),0.0)))){
setResult(z.getReal(),i);
return fm;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914652826
GPR[SPVAP]-1659914652826
GPR[EPVAP]-1659914653844
GPR[EPVS]-1659914653844
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.max(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914653846
GPR[SPVAP]-1659914653846
GPR[EPVAP]-1659914654874
GPR[EPVS]-1659914654874
========
checkVectorDimensions(v.length);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914654877
GPR[SPVAP]-1659914654877
GPR[EPVAP]-1659914655896
GPR[EPVS]-1659914655896
========
checkVectorDimensions(v.length);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.max(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914655898
GPR[SPVAP]-1659914655898
GPR[EPVAP]-1659914656930
GPR[EPVS]-1659914656930
========
if(i<0){
i=-i-2;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914656932
GPR[SPVAP]-1659914656932
GPR[EPVAP]-1659914658786
GPR[SPVATF]-1659914658786
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914660575
GPR[EPVS]-1659914660575
========
if(i>=polynomials.length){
i--;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914660576
GPR[SPVAP]-1659914660576
GPR[EPVAP]-1659914661602
GPR[EPVS]-1659914661602
========
m=0;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914661604
GPR[SPVAP]-1659914661604
GPR[EPVAP]-1659914663452
GPR[SPVATF]-1659914663452
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914665248
GPR[EPVS]-1659914665248
========
m=Math.sqrt(cost);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914665249
GPR[SPVAP]-1659914665249
GPR[EPVAP]-1659914666260
GPR[EPVS]-1659914666260
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
largest=Math.abs(max);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914666262
GPR[SPVAP]-1659914666262
GPR[EPVAP]-1659914667293
GPR[EPVS]-1659914667293
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
x1=min;
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914667296
GPR[SPVAP]-1659914667296
GPR[EPVAP]-1659914668303
GPR[EPVS]-1659914668303
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
x2=fmin;
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914668304
GPR[SPVAP]-1659914668304
GPR[EPVAP]-1659914669298
GPR[EPVS]-1659914669298
========
while(i<maximalIterationCount){
y2=fm;
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914669299
GPR[SPVAP]-1659914669299
GPR[EPVAP]-1659914670314
GPR[EPVS]-1659914670314
========
while(i<maximalIterationCount){
x1=min;
x2=fmin;
y2=fm;

m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914670315
GPR[SPVAP]-1659914670315
GPR[EPVAP]-1659914671320
GPR[EPVS]-1659914671320
========
new double[i][0]=absoluteAccuracy+fmin;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914671322
GPR[SPVAP]-1659914671322
GPR[EPVAP]-1659914672333
GPR[EPVS]-1659914672333
========
new double[i][i-1]=max;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914672333
GPR[SPVAP]-1659914672333
GPR[EPVAP]-1659914673375
GPR[EPVS]-1659914673375
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.abs(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914673377
GPR[SPVAP]-1659914673377
GPR[EPVAP]-1659914674404
GPR[EPVS]-1659914674404
========
while(i<maximalIterationCount){
oldDelta=m;
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914674407
GPR[SPVAP]-1659914674407
GPR[EPVAP]-1659914675410
GPR[EPVS]-1659914675410
========
if(m+0.01*m<=0.0){
den=1.0;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914675413
GPR[SPVAP]-1659914675413
GPR[EPVAP]-1659914676433
GPR[EPVS]-1659914676433
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.pow(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914676439
GPR[SPVAP]-1659914676439
GPR[EPVAP]-1659914677456
GPR[EPVS]-1659914677456
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.sqrt(min);
fm=f.sqrt(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914677457
GPR[SPVAP]-1659914677457
GPR[EPVAP]-1659914678478
GPR[EPVS]-1659914678478
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.sqrt(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914678480
GPR[SPVAP]-1659914678480
GPR[EPVAP]-1659914679506
GPR[EPVS]-1659914679506
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.sqrt(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914679508
GPR[SPVAP]-1659914679508
GPR[EPVAP]-1659914680528
GPR[EPVS]-1659914680528
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
nearest=i;
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914680531
GPR[SPVAP]-1659914680531
GPR[EPVAP]-1659914681573
GPR[EPVS]-1659914681573
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
if(Double.isNaN(m)){
return false;
}
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914681574
GPR[SPVAP]-1659914681574
GPR[EPVAP]-1659914682600
GPR[EPVS]-1659914682600
========
m=(fmin-fm)/(Double.valueOf(i)).doubleValue();
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914682602
GPR[SPVAP]-1659914682602
GPR[EPVAP]-1659914683634
GPR[EPVS]-1659914683634
========
m=Math.sqrt(yDDotOnScale)/min;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914683637
GPR[SPVAP]-1659914683637
GPR[EPVAP]-1659914684664
GPR[EPVS]-1659914684664
========
min=Math.min(100.0*Math.abs(h),max);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914684665
GPR[SPVAP]-1659914684665
GPR[EPVAP]-1659914685682
GPR[EPVS]-1659914685682
========
if(min<getMinStep()){
h=getMinStep();
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914685683
GPR[SPVAP]-1659914685683
GPR[EPVAP]-1659914686693
GPR[EPVS]-1659914686693
========
if(min>getMaxStep()){
h=getMaxStep();
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914686694
GPR[SPVAP]-1659914686694
GPR[EPVAP]-1659914687726
GPR[EPVS]-1659914687726
========
G2=G.multiply(G);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914687727
GPR[SPVAP]-1659914687727
GPR[EPVAP]-1659914688738
GPR[EPVS]-1659914688738
========
while(i<maximalIterationCount){
r0=min;
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914688741
GPR[SPVAP]-1659914688741
GPR[EPVAP]-1659914689746
GPR[EPVS]-1659914689746
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++p;
}

========
MM Copying to MM
GPR[SPVS]-1659914689752
GPR[SPVAP]-1659914689752
GPR[EPVAP]-1659914690793
GPR[EPVS]-1659914690793
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++q;
}

========
MM Copying to MM
GPR[SPVS]-1659914690794
GPR[SPVAP]-1659914690794
GPR[EPVAP]-1659914691814
GPR[EPVS]-1659914691814
========
assert maxUlps > 0 && maxUlps < NAN_GAP;

while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914691815
GPR[SPVAP]-1659914691815
GPR[EPVAP]-1659914692814
GPR[EPVS]-1659914692814
========
if(Double.doubleToLongBits(min)<0){
yInt=SGN_MASK-yInt;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914692815
GPR[SPVAP]-1659914692815
GPR[EPVAP]-1659914693829
GPR[EPVS]-1659914693829
========
while(i<maximalIterationCount){
accum2+=m;
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914693831
GPR[SPVAP]-1659914693831
GPR[EPVAP]-1659914694852
GPR[EPVS]-1659914694852
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++j;
}

========
MM Copying to MM
GPR[SPVS]-1659914694854
GPR[SPVAP]-1659914694854
GPR[EPVAP]-1659914695889
GPR[EPVS]-1659914695889
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
s=m;
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914695890
GPR[SPVAP]-1659914695890
GPR[EPVAP]-1659914696907
GPR[EPVS]-1659914696907
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
hNew=0;
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914696909
GPR[SPVAP]-1659914696909
GPR[EPVAP]-1659914697945
GPR[EPVS]-1659914697945
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
hNew=m;
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914697947
GPR[SPVAP]-1659914697947
GPR[EPVAP]-1659914698959
GPR[EPVS]-1659914698959
========
if(Math.abs(i)==maximalIterationCount){
return ;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914698961
GPR[SPVAP]-1659914698961
GPR[EPVAP]-1659914699994
GPR[EPVS]-1659914699994
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.doubleToLongBits(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914699996
GPR[SPVAP]-1659914699996
GPR[EPVAP]-1659914701028
GPR[EPVS]-1659914701028
========
if((absoluteAccuracy+i)>internalArray.length){
expandTo(startIndex+i);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914701031
GPR[SPVAP]-1659914701031
GPR[EPVAP]-1659914702047
GPR[EPVS]-1659914702047
========
default :

while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914702048
GPR[SPVAP]-1659914702048
GPR[EPVAP]-1659914702970
GPR[EPVS]-1659914702970
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
numElements-=i;
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914702974
GPR[SPVAP]-1659914702974
GPR[EPVAP]-1659914704035
GPR[EPVS]-1659914704035
========
new CombinedEventsManager().addEventHandler(new EndTimeChecker(max),Double.POSITIVE_INFINITY,Math.ulp(Math.max(Math.abs(min),Math.abs(endTime))),100);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914704039
GPR[SPVAP]-1659914704039
GPR[EPVAP]-1659914705053
GPR[EPVS]-1659914705053
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
i--;
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914705061
GPR[SPVAP]-1659914705061
GPR[EPVAP]-1659914706939
GPR[SPVATF]-1659914706939
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914708725
GPR[EPVS]-1659914708725
========
fm=fmin;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914708729
GPR[SPVAP]-1659914708729
GPR[EPVAP]-1659914709752
GPR[EPVS]-1659914709752
========
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.get(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914709755
GPR[SPVAP]-1659914709755
GPR[EPVAP]-1659914710771
GPR[EPVS]-1659914710771
========
super(i,min);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914710780
GPR[SPVAP]-1659914710780
GPR[EPVAP]-1659914711794
GPR[EPVS]-1659914711794
========
this.f=f;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914711795
GPR[SPVAP]-1659914711795
GPR[EPVAP]-1659914713666
GPR[SPVATF]-1659914713666
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914715457
GPR[EPVS]-1659914715457
========
this.fmin=1.0E-15;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914715458
GPR[SPVAP]-1659914715458
GPR[EPVAP]-1659914716474
GPR[EPVS]-1659914716474
========
this.fm=fmin;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914716474
GPR[SPVAP]-1659914716474
GPR[EPVAP]-1659914717500
GPR[EPVS]-1659914717500
========
if(isNaN()){
new ArrayList<Complex>().add(Complex.NaN);
return result;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914717503
GPR[SPVAP]-1659914717503
GPR[EPVAP]-1659914718522
GPR[EPVS]-1659914718522
========
if(isInfinite()){
new ArrayList<Complex>().add(Complex.INF);
return result;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914718523
GPR[SPVAP]-1659914718523
GPR[EPVAP]-1659914719529
GPR[EPVS]-1659914719529
========
while(i<maximalIterationCount){
i++;
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914719533
GPR[SPVAP]-1659914719533
GPR[EPVAP]-1659914721392
GPR[SPVATF]-1659914721392
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914723165
GPR[EPVS]-1659914723165
========
while(i<maximalIterationCount){
c=polynoms[j][i]+min*fm;
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914723171
GPR[SPVAP]-1659914723171
GPR[EPVAP]-1659914724178
GPR[EPVS]-1659914724178
========
while(i<maximalIterationCount){
x0=m;
y0=max;
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914724181
GPR[SPVAP]-1659914724181
GPR[EPVAP]-1659914725187
GPR[EPVS]-1659914725187
========
while(i<maximalIterationCount){
x0=m;
x0=m;
y0=max;

m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914725188
GPR[SPVAP]-1659914725188
GPR[EPVAP]-1659914726207
GPR[EPVS]-1659914726207
========
while(i<maximalIterationCount){
y0=max;
x0=m;
y0=max;

m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914726208
GPR[SPVAP]-1659914726208
GPR[EPVAP]-1659914727235
GPR[EPVS]-1659914727235
========
while(i<maximalIterationCount){
x0=m;
y0=max;
x0=m;
y0=max;

m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914727236
GPR[SPVAP]-1659914727236
GPR[EPVAP]-1659914728255
GPR[EPVS]-1659914728255
========
while(i<maximalIterationCount){
newMapping=false;
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914728257
GPR[SPVAP]-1659914728257
GPR[EPVAP]-1659914729278
GPR[EPVS]-1659914729278
========
super(i,1.0E-15);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914729281
GPR[SPVAP]-1659914729281
GPR[EPVAP]-1659914730299
GPR[EPVS]-1659914730299
========
setRelativeAccuracy(1.0E-6);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914730300
GPR[SPVAP]-1659914730300
GPR[EPVAP]-1659914732159
GPR[SPVATF]-1659914732159
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914733949
GPR[EPVS]-1659914733949
========
this.f=f;
setRelativeAccuracy(1.0E-6);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914733950
GPR[SPVAP]-1659914733950
GPR[EPVAP]-1659914735851
GPR[SPVATF]-1659914735851
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914737652
GPR[EPVS]-1659914737652
========
this.f=f;
verifyIterationCount();
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914737653
GPR[SPVAP]-1659914737653
GPR[EPVAP]-1659914738665
GPR[EPVS]-1659914738665
========
setRelativeAccuracy(1.0E-6);
verifyIterationCount();
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914738666
GPR[SPVAP]-1659914738666
GPR[EPVAP]-1659914739694
GPR[EPVS]-1659914739694
========
this.f=f;
setRelativeAccuracy(1.0E-6);
verifyIterationCount();
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914739695
GPR[SPVAP]-1659914739695
GPR[EPVAP]-1659914740713
GPR[EPVS]-1659914740713
========
verifyBracketing(min,max,f);
if(isRootOK(min,max,solve(new Complex[coefficients.length],new Complex(0.5*(min+max),0.0)))){
setResult(z.getReal(),i);
return fm;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914740715
GPR[SPVAP]-1659914740715
GPR[EPVAP]-1659914741726
GPR[EPVS]-1659914741726
========
MatrixUtils.checkRowIndex(this,i);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914741728
GPR[SPVAP]-1659914741728
GPR[EPVAP]-1659914742762
GPR[EPVS]-1659914742762
========
MatrixUtils.checkColumnIndex(this,i);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914742763
GPR[SPVAP]-1659914742763
GPR[EPVAP]-1659914743782
GPR[EPVS]-1659914743782
========
MatrixUtils.checkRowIndex(this,i);
MatrixUtils.checkColumnIndex(this,i);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914743783
GPR[SPVAP]-1659914743783
GPR[EPVAP]-1659914744802
GPR[EPVS]-1659914744802
========
if(f.value(max)==0.0){
return max;
}
if(f.value(m)==0.0){
return initial;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914744807
GPR[SPVAP]-1659914744807
GPR[EPVAP]-1659914745808
GPR[EPVS]-1659914745808
========
if(f.value(max)==0.0){
return max;
}
verifySequence(min,m,max);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914745809
GPR[SPVAP]-1659914745809
GPR[EPVAP]-1659914746819
GPR[EPVS]-1659914746819
========
if(f.value(max)==0.0){
return max;
}
if(isBracketing(min,m,f)){
return solve(f,min,initial);
}else {
return solve(f,initial,max);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914746820
GPR[SPVAP]-1659914746820
GPR[EPVAP]-1659914747834
GPR[EPVS]-1659914747834
========
if(f.value(m)==0.0){
return initial;
}
verifyBracketing(min,max,f);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914747835
GPR[SPVAP]-1659914747835
GPR[EPVAP]-1659914748841
GPR[EPVS]-1659914748841
========
if(f.value(m)==0.0){
return initial;
}
verifySequence(min,m,max);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914748843
GPR[SPVAP]-1659914748843
GPR[EPVAP]-1659914749848
GPR[EPVS]-1659914749848
========
if(f.value(m)==0.0){
return initial;
}
if(isBracketing(min,m,f)){
return solve(f,min,initial);
}else {
return solve(f,initial,max);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914749849
GPR[SPVAP]-1659914749849
GPR[EPVAP]-1659914750886
GPR[EPVS]-1659914750886
========
verifyBracketing(min,max,f);
verifySequence(min,m,max);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914750887
GPR[SPVAP]-1659914750887
GPR[EPVAP]-1659914751922
GPR[EPVS]-1659914751922
========
verifyBracketing(min,max,f);
if(isBracketing(min,m,f)){
return solve(f,min,initial);
}else {
return solve(f,initial,max);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914751923
GPR[SPVAP]-1659914751923
GPR[EPVAP]-1659914752930
GPR[EPVS]-1659914752930
========
verifySequence(min,m,max);
if(isBracketing(min,m,f)){
return solve(f,min,initial);
}else {
return solve(f,initial,max);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914752931
GPR[SPVAP]-1659914752931
GPR[EPVAP]-1659914753932
GPR[EPVS]-1659914753932
========
if(f.value(max)==0.0){
return max;
}
if(f.value(m)==0.0){
return initial;
}
verifyBracketing(min,max,f);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914753934
GPR[SPVAP]-1659914753934
GPR[EPVAP]-1659914754938
GPR[EPVS]-1659914754938
========
if(f.value(max)==0.0){
return max;
}
if(f.value(m)==0.0){
return initial;
}
verifySequence(min,m,max);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914754939
GPR[SPVAP]-1659914754939
GPR[EPVAP]-1659914755947
GPR[EPVS]-1659914755947
========
if(f.value(max)==0.0){
return max;
}
if(f.value(m)==0.0){
return initial;
}
if(isBracketing(min,m,f)){
return solve(f,min,initial);
}else {
return solve(f,initial,max);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914755948
GPR[SPVAP]-1659914755948
GPR[EPVAP]-1659914756982
GPR[EPVS]-1659914756982
========
if(f.value(max)==0.0){
return max;
}
verifyBracketing(min,max,f);
verifySequence(min,m,max);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914756983
GPR[SPVAP]-1659914756983
GPR[EPVAP]-1659914757995
GPR[EPVS]-1659914757995
========
if(f.value(max)==0.0){
return max;
}
verifyBracketing(min,max,f);
if(isBracketing(min,m,f)){
return solve(f,min,initial);
}else {
return solve(f,initial,max);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914757996
GPR[SPVAP]-1659914757996
GPR[EPVAP]-1659914759014
GPR[EPVS]-1659914759014
========
if(f.value(max)==0.0){
return max;
}
verifySequence(min,m,max);
if(isBracketing(min,m,f)){
return solve(f,min,initial);
}else {
return solve(f,initial,max);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914759015
GPR[SPVAP]-1659914759015
GPR[EPVAP]-1659914760036
GPR[EPVS]-1659914760036
========
if(f.value(m)==0.0){
return initial;
}
verifyBracketing(min,max,f);
verifySequence(min,m,max);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914760037
GPR[SPVAP]-1659914760037
GPR[EPVAP]-1659914761051
GPR[EPVS]-1659914761051
========
if(f.value(m)==0.0){
return initial;
}
verifyBracketing(min,max,f);
if(isBracketing(min,m,f)){
return solve(f,min,initial);
}else {
return solve(f,initial,max);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914761052
GPR[SPVAP]-1659914761052
GPR[EPVAP]-1659914762086
GPR[EPVS]-1659914762086
========
if(f.value(m)==0.0){
return initial;
}
verifySequence(min,m,max);
if(isBracketing(min,m,f)){
return solve(f,min,initial);
}else {
return solve(f,initial,max);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914762087
GPR[SPVAP]-1659914762087
GPR[EPVAP]-1659914763098
GPR[EPVS]-1659914763098
========
verifyBracketing(min,max,f);
verifySequence(min,m,max);
if(isBracketing(min,m,f)){
return solve(f,min,initial);
}else {
return solve(f,initial,max);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914763099
GPR[SPVAP]-1659914763099
GPR[EPVAP]-1659914764115
GPR[EPVS]-1659914764115
========
if(f.value(max)==0.0){
return max;
}
if(f.value(m)==0.0){
return initial;
}
verifyBracketing(min,max,f);
verifySequence(min,m,max);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914764116
GPR[SPVAP]-1659914764116
GPR[EPVAP]-1659914765125
GPR[EPVS]-1659914765125
========
if(f.value(max)==0.0){
return max;
}
if(f.value(m)==0.0){
return initial;
}
verifyBracketing(min,max,f);
if(isBracketing(min,m,f)){
return solve(f,min,initial);
}else {
return solve(f,initial,max);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914765126
GPR[SPVAP]-1659914765126
GPR[EPVAP]-1659914766143
GPR[EPVS]-1659914766143
========
if(f.value(max)==0.0){
return max;
}
if(f.value(m)==0.0){
return initial;
}
verifySequence(min,m,max);
if(isBracketing(min,m,f)){
return solve(f,min,initial);
}else {
return solve(f,initial,max);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914766144
GPR[SPVAP]-1659914766144
GPR[EPVAP]-1659914767161
GPR[EPVS]-1659914767161
========
if(f.value(max)==0.0){
return max;
}
verifyBracketing(min,max,f);
verifySequence(min,m,max);
if(isBracketing(min,m,f)){
return solve(f,min,initial);
}else {
return solve(f,initial,max);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914767162
GPR[SPVAP]-1659914767162
GPR[EPVAP]-1659914768177
GPR[EPVS]-1659914768177
========
if(f.value(m)==0.0){
return initial;
}
verifyBracketing(min,max,f);
verifySequence(min,m,max);
if(isBracketing(min,m,f)){
return solve(f,min,initial);
}else {
return solve(f,initial,max);
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914768181
GPR[SPVAP]-1659914768181
GPR[EPVAP]-1659914769202
GPR[EPVS]-1659914769202
========
i+=1;
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914769206
GPR[SPVAP]-1659914769206
GPR[EPVAP]-1659914771081
GPR[SPVATF]-1659914771081
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914772880
GPR[EPVS]-1659914772880
========
if(shouldContract()){
contract();
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914772881
GPR[SPVAP]-1659914772881
GPR[EPVAP]-1659914773902
GPR[EPVS]-1659914773902
========
new StringBuffer().append('(');
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914773905
GPR[SPVAP]-1659914773905
GPR[EPVAP]-1659914775742
GPR[SPVATF]-1659914775742
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914777519
GPR[EPVS]-1659914777519
========
new StringBuffer().append(m);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914777520
GPR[SPVAP]-1659914777520
GPR[EPVAP]-1659914778548
GPR[EPVS]-1659914778548
========
new StringBuffer().append(')');
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914778549
GPR[SPVAP]-1659914778549
GPR[EPVAP]-1659914780405
GPR[SPVATF]-1659914780405
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914782224
GPR[EPVS]-1659914782224
========
new StringBuffer().append('(');
new StringBuffer().append(')');
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914782225
GPR[SPVAP]-1659914782225
GPR[EPVAP]-1659914784102
GPR[SPVATF]-1659914784102
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914785870
GPR[EPVS]-1659914785870
========
i++;
if(shouldContract()){
contract();
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914785871
GPR[SPVAP]-1659914785871
GPR[EPVAP]-1659914786894
GPR[EPVS]-1659914786894
========
if(i+1>absoluteAccuracy){
numElements=index+1;
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914786897
GPR[SPVAP]-1659914786897
GPR[EPVAP]-1659914787929
GPR[EPVS]-1659914787929
========
if((i+i)>=internalArray.length){
expandTo(startIndex+(index+1));
}
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914787930
GPR[SPVAP]-1659914787930
GPR[EPVAP]-1659914788970
GPR[EPVS]-1659914788970
========
checkRowIndex(i);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914788974
GPR[SPVAP]-1659914788974
GPR[EPVAP]-1659914789991
GPR[EPVS]-1659914789991
========
checkColumnIndex(i);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914789992
GPR[SPVAP]-1659914789992
GPR[EPVAP]-1659914791006
GPR[EPVS]-1659914791006
========
checkRowIndex(i);
checkColumnIndex(i);
while(i<maximalIterationCount){
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
if(Math.abs(max-min)<=absoluteAccuracy){
m=UnivariateRealSolverUtils.midpoint(min,max);
setResult(m,i);
return m;
}
++i;
}

========
MM Copying to MM
GPR[SPVS]-1659914791008
GPR[SPVAP]-1659914791008
GPR[EPVAP]-1659914792031
GPR[EPVS]-1659914792031
GPR[ESUN]-1659914792033
GPR[SSUN]-1659914792033
org.apache.commons.math.analysis.solvers.BisectionSolver,87
========
if(fm*fmin>0.0){
min=m;
}else {
max=m;
}
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914793533
GPR[SPVAP]-1659914793533
GPR[EPVAP]-1659914795474
GPR[EPVS]-1659914795474
========
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(min);

========
MM Copying to MM
GPR[SPVS]-1659914795477
GPR[SPVAP]-1659914795477
GPR[EPVAP]-1659914800426
GPR[SPVATF]-1659914800426
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914802250
GPR[EPVS]-1659914802250
========
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(m);
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914802251
GPR[SPVAP]-1659914802251
GPR[EPVAP]-1659914804150
GPR[SPVATF]-1659914804150
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914805934
GPR[EPVS]-1659914805934
========
m=UnivariateRealSolverUtils.max(min,max);
fmin=f.value(min);
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914805936
GPR[SPVAP]-1659914805936
GPR[EPVAP]-1659914806939
GPR[EPVS]-1659914806939
========
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
++i;
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914806956
GPR[SPVAP]-1659914806956
GPR[EPVAP]-1659914808818
GPR[SPVATF]-1659914808818
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914810647
GPR[EPVS]-1659914810647
========
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.abs(m);

========
MM Copying to MM
GPR[SPVS]-1659914810648
GPR[SPVAP]-1659914810648
GPR[EPVAP]-1659914811678
GPR[EPVS]-1659914811678
========
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.doubleToLongBits(min);
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914811682
GPR[SPVAP]-1659914811682
GPR[EPVAP]-1659914812686
GPR[EPVS]-1659914812686
========
m=UnivariateRealSolverUtils.midpoint(min,max);
super();
fmin=f.value(min);
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914812691
GPR[SPVAP]-1659914812691
GPR[EPVAP]-1659914813702
GPR[EPVS]-1659914813702
========
m=UnivariateRealSolverUtils.midpoint(min,max);
this.min=mean;
fmin=f.value(min);
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914813703
GPR[SPVAP]-1659914813703
GPR[EPVAP]-1659914814714
GPR[EPVS]-1659914814714
========
this.min=sum;
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914814715
GPR[SPVAP]-1659914814715
GPR[EPVAP]-1659914815723
GPR[EPVS]-1659914815723
========
m=UnivariateRealSolverUtils.midpoint(min,max);
super(i,min);
fmin=f.value(min);
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914815726
GPR[SPVAP]-1659914815726
GPR[EPVAP]-1659914816748
GPR[EPVS]-1659914816748
========
m=UnivariateRealSolverUtils.midpoint(min,max);
if(f==null){
throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
}
fmin=f.value(min);
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914816749
GPR[SPVAP]-1659914816749
GPR[EPVAP]-1659914817762
GPR[EPVS]-1659914817762
========
m=UnivariateRealSolverUtils.midpoint(min,max);
this.f=f;
fmin=f.value(min);
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914817763
GPR[SPVAP]-1659914817763
GPR[EPVAP]-1659914819611
GPR[SPVATF]-1659914819611
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914821427
GPR[EPVS]-1659914821427
========
m=UnivariateRealSolverUtils.midpoint(min,max);
checkVectorDimensions(v.length);
fmin=f.value(min);
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914821431
GPR[SPVAP]-1659914821431
GPR[EPVAP]-1659914822460
GPR[EPVS]-1659914822460
========
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.log(m);

========
MM Copying to MM
GPR[SPVS]-1659914822462
GPR[SPVAP]-1659914822462
GPR[EPVAP]-1659914823465
GPR[EPVS]-1659914823465
========
i++;
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914823465
GPR[SPVAP]-1659914823465
GPR[EPVAP]-1659914825352
GPR[SPVATF]-1659914825352
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914827141
GPR[EPVS]-1659914827141
========
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.valueOf(m);

========
MM Copying to MM
GPR[SPVS]-1659914827145
GPR[SPVAP]-1659914827145
GPR[EPVAP]-1659914828162
GPR[EPVS]-1659914828162
========
if(shouldContract()){
contract();
}
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914828171
GPR[SPVAP]-1659914828171
GPR[EPVAP]-1659914829182
GPR[EPVS]-1659914829182
========
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
if(i<0){
throw MathRuntimeException.createArrayIndexOutOfBoundsException("cannot set an element at a negative index {0}",index);
}
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914829184
GPR[SPVAP]-1659914829184
GPR[EPVAP]-1659914830210
GPR[EPVS]-1659914830210
========
if((i+i)>=internalArray.length){
expandTo(startIndex+(index+1));
}
m=UnivariateRealSolverUtils.midpoint(min,max);
fmin=f.value(min);
fm=f.value(m);

========
MM Copying to MM
GPR[SPVS]-1659914830211
GPR[SPVAP]-1659914830211
GPR[EPVAP]-1659914831242
GPR[EPVS]-1659914831242
GPR[ESUN]-1659914831244
GPR[SSUN]-1659914831244
org.apache.commons.math.analysis.solvers.BisectionSolver,88
GPR[ESUN]-1659914831574
GPR[SSUN]-1659914831574
org.apache.commons.math.analysis.solvers.BisectionSolver,52
GPR[ESUN]-1659914832632
GPR[SSUN]-1659914832632
org.apache.commons.math.analysis.solvers.BisectionSolver,53
Find no block!
GPR[SSUN]-1659914832838
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl,93
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
if(f==null){
throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
}
this.defaultFunctionValueAccuracy=1.0E-15;
this.functionValueAccuracy=defaultFunctionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914833916
GPR[SPVAP]-1659914833916
GPR[EPVAP]-1659914839003
GPR[SPVATF]-1659914839003
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914840847
GPR[EPVS]-1659914840847
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.f=f;
this.defaultFunctionValueAccuracy=1.0E-15;
this.functionValueAccuracy=defaultFunctionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914840848
GPR[SPVAP]-1659914840848
GPR[EPVAP]-1659914842768
GPR[SPVATF]-1659914842768
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914844567
GPR[EPVS]-1659914844567
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
if(f==null){
throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
}
this.f=f;
this.defaultFunctionValueAccuracy=1.0E-15;
this.functionValueAccuracy=defaultFunctionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914844568
GPR[SPVAP]-1659914844568
GPR[EPVAP]-1659914846439
GPR[SPVATF]-1659914846439
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914848257
GPR[EPVS]-1659914848257
========
setMaxEvaluations(Integer.MAX_VALUE);
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultFunctionValueAccuracy=1.0E-15;
this.functionValueAccuracy=defaultFunctionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914848258
GPR[SPVAP]-1659914848258
GPR[EPVAP]-1659914849286
GPR[EPVS]-1659914849286
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
setRelativeAccuracy(1.0E-6);
this.defaultFunctionValueAccuracy=1.0E-15;
this.functionValueAccuracy=defaultFunctionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914849288
GPR[SPVAP]-1659914849288
GPR[EPVAP]-1659914851164
GPR[SPVATF]-1659914851164
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914852941
GPR[EPVS]-1659914852941
========
verifyIterationCount();
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultFunctionValueAccuracy=1.0E-15;
this.functionValueAccuracy=defaultFunctionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914852942
GPR[SPVAP]-1659914852942
GPR[EPVAP]-1659914853986
GPR[EPVS]-1659914853986
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultFunctionValueAccuracy=1.0E-14;
this.functionValueAccuracy=defaultFunctionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914853988
GPR[SPVAP]-1659914853988
GPR[EPVAP]-1659914855838
GPR[SPVATF]-1659914855838
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914857622
GPR[EPVS]-1659914857622
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultFunctionValueAccuracy=1.0E-15;
this.functionValueAccuracy=defaultRelativeAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914857623
GPR[SPVAP]-1659914857623
GPR[EPVAP]-1659914859492
GPR[SPVATF]-1659914859492
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914861291
GPR[EPVS]-1659914861291
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultFunctionValueAccuracy=1.0E-15;
this.functionValueAccuracy=defaultFunctionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914861292
GPR[SPVAP]-1659914861292
GPR[EPVAP]-1659914863167
GPR[SPVATF]-1659914863167
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914864978
GPR[EPVS]-1659914864978
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultFunctionValueAccuracy=1.0E-15;
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.functionValueAccuracy=defaultFunctionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914864979
GPR[SPVAP]-1659914864979
GPR[EPVAP]-1659914866856
GPR[SPVATF]-1659914866856
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914868662
GPR[EPVS]-1659914868662
========
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultFunctionValueAccuracy=1.0E-15;
this.functionValueAccuracy=defaultFunctionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914868663
GPR[SPVAP]-1659914868663
GPR[EPVAP]-1659914869678
GPR[EPVS]-1659914869678
========
this.defaultMaximalIterationCount=0;
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultFunctionValueAccuracy=1.0E-15;
this.functionValueAccuracy=defaultFunctionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914869679
GPR[SPVAP]-1659914869679
GPR[EPVAP]-1659914870714
GPR[EPVS]-1659914870714
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultFunctionValueAccuracy=1.0E-14;
this.functionValueAccuracy=defaultRelativeAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914870715
GPR[SPVAP]-1659914870715
GPR[EPVAP]-1659914872569
GPR[SPVATF]-1659914872569
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914874350
GPR[EPVS]-1659914874350
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultFunctionValueAccuracy=1.0E-14;
this.functionValueAccuracy=defaultFunctionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914874351
GPR[SPVAP]-1659914874351
GPR[EPVAP]-1659914876214
GPR[SPVATF]-1659914876214
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914877994
GPR[EPVS]-1659914877994
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultFunctionValueAccuracy=1.0E-14;
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.functionValueAccuracy=defaultFunctionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914877995
GPR[SPVAP]-1659914877995
GPR[EPVAP]-1659914879852
GPR[SPVATF]-1659914879852
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914881662
GPR[EPVS]-1659914881662
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultFunctionValueAccuracy=1.0E-15;
this.functionValueAccuracy=defaultRelativeAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914881663
GPR[SPVAP]-1659914881663
GPR[EPVAP]-1659914883526
GPR[SPVATF]-1659914883526
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914885308
GPR[EPVS]-1659914885308
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultFunctionValueAccuracy=1.0E-15;
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.functionValueAccuracy=defaultRelativeAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914885309
GPR[SPVAP]-1659914885309
GPR[EPVAP]-1659914887195
GPR[SPVATF]-1659914887195
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914889006
GPR[EPVS]-1659914889006
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultFunctionValueAccuracy=1.0E-15;
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.functionValueAccuracy=defaultFunctionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914889007
GPR[SPVAP]-1659914889007
GPR[EPVAP]-1659914890897
GPR[SPVATF]-1659914890898
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914892684
GPR[EPVS]-1659914892684
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultFunctionValueAccuracy=1.0E-14;
this.functionValueAccuracy=defaultRelativeAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914892685
GPR[SPVAP]-1659914892686
GPR[EPVAP]-1659914894528
GPR[SPVATF]-1659914894528
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914896314
GPR[EPVS]-1659914896314
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultFunctionValueAccuracy=1.0E-14;
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.functionValueAccuracy=defaultRelativeAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914896315
GPR[SPVAP]-1659914896315
GPR[EPVAP]-1659914898184
GPR[SPVATF]-1659914898184
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914899967
GPR[EPVS]-1659914899967
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultFunctionValueAccuracy=1.0E-14;
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.functionValueAccuracy=defaultFunctionValueAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914899968
GPR[SPVAP]-1659914899968
GPR[EPVAP]-1659914901846
GPR[SPVATF]-1659914901846
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914903655
GPR[EPVS]-1659914903655
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultFunctionValueAccuracy=1.0E-15;
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.functionValueAccuracy=defaultRelativeAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914903656
GPR[SPVAP]-1659914903656
GPR[EPVAP]-1659914905530
GPR[SPVATF]-1659914905530
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914907320
GPR[EPVS]-1659914907320
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultFunctionValueAccuracy=1.0E-14;
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.functionValueAccuracy=defaultRelativeAccuracy;

========
MM Copying to MM
GPR[SPVS]-1659914907321
GPR[SPVAP]-1659914907321
GPR[EPVAP]-1659914909180
GPR[SPVATF]-1659914909180
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914911002
GPR[EPVS]-1659914911002
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultFunctionValueAccuracy=1.0E-15;
this.functionValueAccuracy=min;

========
MM Copying to MM
GPR[SPVS]-1659914911005
GPR[SPVAP]-1659914911005
GPR[EPVAP]-1659914912036
GPR[EPVS]-1659914912036
========
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultFunctionValueAccuracy=1.0E-15;
this.functionValueAccuracy=max;

========
MM Copying to MM
GPR[SPVS]-1659914912037
GPR[SPVAP]-1659914912037
GPR[EPVAP]-1659914913070
GPR[EPVS]-1659914913070
GPR[ESUN]-1659914913071
GPR[SSUN]-1659914913071
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl,94
GPR[ESUN]-1659914913430
GPR[SSUN]-1659914913430
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl,95
GPR[ESUN]-1659914913635
GPR[SSUN]-1659914913635
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl,96
Find no block!
GPR[SSUN]-1659914913832
org.apache.commons.math.analysis.solvers.UnivariateRealSolverImpl,41
Find no block!
GPR[SSUN]-1659914914023
org.apache.commons.math.ConvergingAlgorithmImpl,61
Find no block!
GPR[SSUN]-1659914914225
org.apache.commons.math.ConvergingAlgorithmImpl,62
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-15;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914915298
GPR[SPVAP]-1659914915298
GPR[EPVAP]-1659914920389
GPR[SPVATF]-1659914920389
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914922183
GPR[EPVS]-1659914922183
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultFunctionValueAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914922184
GPR[SPVAP]-1659914922184
GPR[EPVAP]-1659914923198
GPR[EPVS]-1659914923198
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914923199
GPR[SPVAP]-1659914923199
GPR[EPVAP]-1659914924208
GPR[EPVS]-1659914924208
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914924210
GPR[SPVAP]-1659914924210
GPR[EPVAP]-1659914925234
GPR[EPVS]-1659914925234
========
setMaxEvaluations(Integer.MAX_VALUE);
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914925235
GPR[SPVAP]-1659914925235
GPR[EPVAP]-1659914926235
GPR[EPVS]-1659914926235
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-15;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultFunctionValueAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914926236
GPR[SPVAP]-1659914926236
GPR[EPVAP]-1659914927227
GPR[EPVS]-1659914927227
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultRelativeAccuracy=1.0E-15;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914927229
GPR[SPVAP]-1659914927229
GPR[EPVAP]-1659914928226
GPR[EPVS]-1659914928226
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultFunctionValueAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914928227
GPR[SPVAP]-1659914928227
GPR[EPVAP]-1659914929234
GPR[EPVS]-1659914929234
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
super(defaultMaximalIterationCount,defaultAbsoluteAccuracy);
this.defaultRelativeAccuracy=1.0E-15;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultFunctionValueAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914929235
GPR[SPVAP]-1659914929235
GPR[EPVAP]-1659914930249
GPR[EPVS]-1659914930249
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMinimalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914930250
GPR[SPVAP]-1659914930250
GPR[EPVAP]-1659914931238
GPR[EPVS]-1659914931238
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
super(defaultMaximalIterationCount,1.0E-15);
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914931239
GPR[SPVAP]-1659914931239
GPR[EPVAP]-1659914932250
GPR[EPVS]-1659914932250
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
setRelativeAccuracy(1.0E-6);
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914932251
GPR[SPVAP]-1659914932251
GPR[EPVAP]-1659914934089
GPR[SPVATF]-1659914934089
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914935874
GPR[EPVS]-1659914935874
========
verifyIterationCount();
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914935875
GPR[SPVAP]-1659914935875
GPR[EPVAP]-1659914936869
GPR[EPVS]-1659914936869
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
super(defaultMaximalIterationCount,1.0E-15);
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMinimalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914936870
GPR[SPVAP]-1659914936870
GPR[EPVAP]-1659914937864
GPR[EPVS]-1659914937864
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
setRelativeAccuracy(1.0E-6);
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMinimalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914937865
GPR[SPVAP]-1659914937865
GPR[EPVAP]-1659914938870
GPR[EPVS]-1659914938870
========
verifyIterationCount();
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMinimalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914938871
GPR[SPVAP]-1659914938871
GPR[EPVAP]-1659914939866
GPR[EPVS]-1659914939866
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
super(defaultMaximalIterationCount,1.0E-15);
setRelativeAccuracy(1.0E-6);
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914939867
GPR[SPVAP]-1659914939867
GPR[EPVAP]-1659914940866
GPR[EPVS]-1659914940866
========
verifyIterationCount();
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
super(defaultMaximalIterationCount,1.0E-15);
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914940867
GPR[SPVAP]-1659914940867
GPR[EPVAP]-1659914941884
GPR[EPVS]-1659914941884
========
verifyIterationCount();
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
setRelativeAccuracy(1.0E-6);
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914941885
GPR[SPVAP]-1659914941885
GPR[EPVAP]-1659914942883
GPR[EPVS]-1659914942883
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
super(defaultMaximalIterationCount,1.0E-15);
setRelativeAccuracy(1.0E-6);
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMinimalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914942884
GPR[SPVAP]-1659914942884
GPR[EPVAP]-1659914943875
GPR[EPVS]-1659914943875
========
verifyIterationCount();
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
super(defaultMaximalIterationCount,1.0E-15);
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMinimalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914943876
GPR[SPVAP]-1659914943876
GPR[EPVAP]-1659914944871
GPR[EPVS]-1659914944871
========
verifyIterationCount();
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
setRelativeAccuracy(1.0E-6);
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMinimalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914944872
GPR[SPVAP]-1659914944872
GPR[EPVAP]-1659914945892
GPR[EPVS]-1659914945892
========
verifyIterationCount();
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
super(defaultMaximalIterationCount,1.0E-15);
setRelativeAccuracy(1.0E-6);
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914945893
GPR[SPVAP]-1659914945893
GPR[EPVAP]-1659914946893
GPR[EPVS]-1659914946893
========
verifyIterationCount();
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
super(defaultMaximalIterationCount,1.0E-15);
setRelativeAccuracy(1.0E-6);
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMinimalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914946894
GPR[SPVAP]-1659914946894
GPR[EPVAP]-1659914947891
GPR[EPVS]-1659914947891
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=newResult;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914947893
GPR[SPVAP]-1659914947893
GPR[EPVAP]-1659914948904
GPR[EPVS]-1659914948904
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=fx;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914948905
GPR[SPVAP]-1659914948905
GPR[EPVAP]-1659914949897
GPR[EPVS]-1659914949897
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=x;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914949898
GPR[SPVAP]-1659914949898
GPR[EPVAP]-1659914950895
GPR[EPVS]-1659914950895
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=t;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914950899
GPR[SPVAP]-1659914950899
GPR[EPVAP]-1659914951892
GPR[EPVS]-1659914951892
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=fx;
this.relativeAccuracy=x;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914951894
GPR[SPVAP]-1659914951894
GPR[EPVAP]-1659914952889
GPR[EPVS]-1659914952889
========
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=POSITIVE_INFINITY;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914952892
GPR[SPVAP]-1659914952892
GPR[EPVAP]-1659914953918
GPR[EPVS]-1659914953918
========
if(Math.abs(defaultAbsoluteAccuracy-absoluteAccuracy)<=Math.max(relativeAccuracy*Math.abs(defaultAbsoluteAccuracy),defaultRelativeAccuracy)){
setResult(x,iterationCount);
return defaultAbsoluteAccuracy;
}
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914953919
GPR[SPVAP]-1659914953919
GPR[EPVAP]-1659914954914
GPR[EPVS]-1659914954914
========
this.defaultMaximalIterationCount=iterationCount;
this.defaultAbsoluteAccuracy=defaultAbsoluteAccuracy;
this.defaultRelativeAccuracy=1.0E-14;
this.absoluteAccuracy=defaultAbsoluteAccuracy;
this.relativeAccuracy=defaultRelativeAccuracy;
this.defaultMaximalIterationCount=defaultMaximalIterationCount;
this.maximalIterationCount=defaultMaximalIterationCount;
this.iterationCount=0;

========
MM Copying to MM
GPR[SPVS]-1659914954917
GPR[SPVAP]-1659914954917
GPR[EPVAP]-1659914956777
GPR[SPVATF]-1659914956777
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914958562
GPR[EPVS]-1659914958562
GPR[ESUN]-1659914958565
GPR[SSUN]-1659914958565
org.apache.commons.math.ConvergingAlgorithmImpl,63
GPR[ESUN]-1659914958921
GPR[SSUN]-1659914958921
org.apache.commons.math.ConvergingAlgorithmImpl,64
GPR[ESUN]-1659914959129
GPR[SSUN]-1659914959129
org.apache.commons.math.ConvergingAlgorithmImpl,65
GPR[ESUN]-1659914959338
GPR[SSUN]-1659914959338
org.apache.commons.math.ConvergingAlgorithmImpl,66
GPR[ESUN]-1659914959544
GPR[SSUN]-1659914959544
org.apache.commons.math.ConvergingAlgorithmImpl,67
GPR[ESUN]-1659914959753
GPR[SSUN]-1659914959753
org.apache.commons.math.ConvergingAlgorithmImpl,68
GPR[ESUN]-1659914959968
GPR[SSUN]-1659914959968
org.apache.commons.math.ConvergingAlgorithmImpl,69
Find no block!
GPR[SSUN]-1659914960172
org.apache.commons.math.MathException,55
Find no block!
GPR[SSUN]-1659914960379
org.apache.commons.math.MathException,56
GPR[ESUN]-1659914961424
GPR[SSUN]-1659914961424
org.apache.commons.math.MathException,57
GPR[ESUN]-1659914961617
GPR[SSUN]-1659914961617
org.apache.commons.math.MathException,58
Find no block!
GPR[SSUN]-1659914961810
org.apache.commons.math.MathException,67
Find no block!
GPR[SSUN]-1659914962020
org.apache.commons.math.MathException,68
========
if(observations.length!=weights.length){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",observations.length,weights.length);
}
this.pattern=pattern;
this.arguments=(arguments==null)?new Object[0]:arguments.clone();

========
MM Copying to MM
GPR[SPVS]-1659914963105
GPR[SPVAP]-1659914963105
GPR[EPVAP]-1659914964902
GPR[EPVS]-1659914964902
========
this.pattern=pattern;
if(mean.length!=standardDeviation.length){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",mean.length,standardDeviation.length);
}
this.arguments=(arguments==null)?new Object[0]:arguments.clone();

========
MM Copying to MM
GPR[SPVS]-1659914964903
GPR[SPVAP]-1659914964903
GPR[EPVAP]-1659914966708
GPR[EPVS]-1659914966708
GPR[ESUN]-1659914966709
GPR[SSUN]-1659914966709
org.apache.commons.math.MathException,69
GPR[ESUN]-1659914966916
GPR[SSUN]-1659914966916
org.apache.commons.math.MathException,70
Find no block!
GPR[SSUN]-1659914967138
org.apache.commons.math.MathException,80
GPR[ESUN]-1659914968408
GPR[SSUN]-1659914968408
org.apache.commons.math.MathException,81
GPR[ESUN]-1659914968610
GPR[SSUN]-1659914968610
org.apache.commons.math.MathException,82
GPR[ESUN]-1659914968806
GPR[SSUN]-1659914968806
org.apache.commons.math.MathException,83
Find no block!
GPR[SSUN]-1659914969037
org.apache.commons.math.MathException,96
========
super(rootCause);
if(observations.length!=weights.length){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",observations.length,weights.length);
}
this.pattern=pattern;
this.arguments=(arguments==null)?new Object[0]:arguments.clone();

========
MM Copying to MM
GPR[SPVS]-1659914970138
GPR[SPVAP]-1659914970138
GPR[EPVAP]-1659914971958
GPR[EPVS]-1659914971958
========
super(rootCause);
this.pattern=pattern;
if(mean.length!=standardDeviation.length){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",mean.length,standardDeviation.length);
}
this.arguments=(arguments==null)?new Object[0]:arguments.clone();

========
MM Copying to MM
GPR[SPVS]-1659914971959
GPR[SPVAP]-1659914971959
GPR[EPVAP]-1659914973729
GPR[EPVS]-1659914973729
GPR[ESUN]-1659914973730
GPR[SSUN]-1659914973730
org.apache.commons.math.MathException,97
GPR[ESUN]-1659914973941
GPR[SSUN]-1659914973941
org.apache.commons.math.MathException,98
GPR[ESUN]-1659914974145
GPR[SSUN]-1659914974145
org.apache.commons.math.MathException,99
Find no block!
GPR[SSUN]-1659914974353
org.apache.commons.math.MathException,110
GPR[ESUN]-1659914975443
GPR[SSUN]-1659914975443
org.apache.commons.math.MathException,112
GPR[ESUN]-1659914976551
GPR[SSUN]-1659914976551
org.apache.commons.math.MathException,114
GPR[ESUN]-1659914976756
GPR[SSUN]-1659914976756
org.apache.commons.math.MathException,119
Find no block!
GPR[SSUN]-1659914976968
org.apache.commons.math.MathException,117
Find no block!
GPR[SSUN]-1659914977178
org.apache.commons.math.MathException,123
GPR[ESUN]-1659914977378
GPR[SSUN]-1659914977378
org.apache.commons.math.MathException,133
GPR[ESUN]-1659914978419
GPR[SSUN]-1659914978419
org.apache.commons.math.MathException,142
========
return CONTENTS.clone();

========
MM Copying to MM
GPR[SPVS]-1659914979510
GPR[SPVAP]-1659914979510
GPR[EPVAP]-1659914981337
GPR[EPVS]-1659914981337
========
return (pattern==null)?null:arguments.clone();

========
MM Copying to MM
GPR[SPVS]-1659914981339
GPR[SPVAP]-1659914981339
GPR[EPVAP]-1659914986417
GPR[SPVATF]-1659914986417
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914988205
GPR[EPVS]-1659914988205
GPR[ESUN]-1659914988206
GPR[SSUN]-1659914988206
org.apache.commons.math.MathException,153
GPR[ESUN]-1659914989372
GPR[SSUN]-1659914989372
org.apache.commons.math.MathException,159
========
return getMessage(Locale.getDefault());

========
MM Copying to MM
GPR[SPVS]-1659914990401
GPR[SPVAP]-1659914990401
GPR[EPVAP]-1659914995460
GPR[SPVATF]-1659914995460
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659914997248
GPR[EPVS]-1659914997248
GPR[ESUN]-1659914997248
GPR[SSUN]-1659914997248
org.apache.commons.math.MathException,165
========
return getMessage(Locale.US);

========
MM Copying to MM
GPR[SPVS]-1659914998391
GPR[SPVAP]-1659914998391
GPR[EPVAP]-1659915003493
GPR[SPVATF]-1659915003496
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915005321
GPR[EPVS]-1659915005321
GPR[ESUN]-1659915005321
GPR[SSUN]-1659915005321
org.apache.commons.math.MathException,173
GPR[ESUN]-1659915006568
GPR[SSUN]-1659915006568
org.apache.commons.math.MathException,174
Find no block!
GPR[SSUN]-1659915006802
org.apache.commons.math.MathException,183
Find no block!
GPR[SSUN]-1659915007023
org.apache.commons.math.MathException,184
GPR[ESUN]-1659915008054
GPR[SSUN]-1659915008054
org.apache.commons.math.MathException,185
GPR[ESUN]-1659915008273
GPR[SSUN]-1659915008273
org.apache.commons.math.MathException,187
GPR[ESUN]-1659915008478
GPR[SSUN]-1659915008478
org.apache.commons.math.MathException,188
Find no block!
GPR[SSUN]-1659915008711
org.apache.commons.math.MathException,189
Find no block!
GPR[SSUN]-1659915008944
org.apache.commons.math.MaxIterationsExceededException,43
GPR[ESUN]-1659915010036
GPR[SSUN]-1659915010036
org.apache.commons.math.MaxIterationsExceededException,44
GPR[ESUN]-1659915010247
GPR[SSUN]-1659915010247
org.apache.commons.math.MaxIterationsExceededException,45
Find no block!
GPR[SSUN]-1659915010464
org.apache.commons.math.MaxIterationsExceededException,56
========
super(pattern,maxIterations);
this.maxIterations=maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659915011528
GPR[SPVAP]-1659915011528
GPR[EPVAP]-1659915016557
GPR[SPVATF]-1659915016557
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915018331
GPR[EPVS]-1659915018331
========
super(pattern,arguments);
this.maxIterations=maxEvaluations;

========
MM Copying to MM
GPR[SPVS]-1659915018332
GPR[SPVAP]-1659915018332
GPR[EPVAP]-1659915019346
GPR[EPVS]-1659915019346
========
this.pattern=getMessage();
super(pattern,arguments);
this.maxIterations=maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659915019347
GPR[SPVAP]-1659915019347
GPR[EPVAP]-1659915020366
GPR[EPVS]-1659915020366
========
this.arguments=new Object[0];
super(pattern,arguments);
this.maxIterations=maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659915020367
GPR[SPVAP]-1659915020367
GPR[EPVAP]-1659915021354
GPR[EPVS]-1659915021354
========
this.arguments=(arguments==null)?new Object[0]:arguments.clone();
super(pattern,arguments);
this.maxIterations=maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659915021355
GPR[SPVAP]-1659915021355
GPR[EPVAP]-1659915022350
GPR[EPVS]-1659915022350
========
this.pattern=getMessage();
this.arguments=new Object[0];
super(pattern,arguments);
this.maxIterations=maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659915022352
GPR[SPVAP]-1659915022352
GPR[EPVAP]-1659915023366
GPR[EPVS]-1659915023366
GPR[ESUN]-1659915023366
GPR[SSUN]-1659915023366
org.apache.commons.math.MaxIterationsExceededException,57
GPR[ESUN]-1659915023709
GPR[SSUN]-1659915023709
org.apache.commons.math.MaxIterationsExceededException,58
Find no block!
GPR[SSUN]-1659915023912
org.apache.commons.math.MaxIterationsExceededException,64
========
if(maxIterations<0){
return 0;
}
return maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659915024982
GPR[SPVAP]-1659915024982
GPR[EPVAP]-1659915030126
GPR[SPVATF]-1659915030126
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915031942
GPR[EPVS]-1659915031942
========
if(maxIterations==Integer.MAX_VALUE){
return 1;
}
return maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659915031943
GPR[SPVAP]-1659915031943
GPR[EPVAP]-1659915033820
GPR[SPVATF]-1659915033820
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915035625
GPR[EPVS]-1659915035625
========
if(maxIterations<0){
return 0;
}
if(maxIterations==Integer.MAX_VALUE){
return 1;
}
return maxIterations;

========
MM Copying to MM
GPR[SPVS]-1659915035626
GPR[SPVAP]-1659915035626
GPR[EPVAP]-1659915037500
GPR[SPVATF]-1659915037500
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915039349
GPR[EPVS]-1659915039349
GPR[ESUN]-1659915039349
GPR[SSUN]-1659915039349
org.apache.commons.math.ConvergenceException,34
GPR[ESUN]-1659915040596
GPR[SSUN]-1659915040596
org.apache.commons.math.ConvergenceException,35
Find no block!
GPR[SSUN]-1659915040830
org.apache.commons.math.ConvergenceException,45
========
this.pattern=getMessage();
super(pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1659915041913
GPR[SPVAP]-1659915041913
GPR[EPVAP]-1659915043727
GPR[EPVS]-1659915043727
========
this.arguments=new Object[0];
super(pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1659915043728
GPR[SPVAP]-1659915043728
GPR[EPVAP]-1659915045550
GPR[EPVS]-1659915045550
========
this.pattern=pattern;
super(pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1659915045551
GPR[SPVAP]-1659915045551
GPR[EPVAP]-1659915047373
GPR[EPVS]-1659915047373
========
this.arguments=(arguments==null)?new Object[0]:arguments.clone();
super(pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1659915047374
GPR[SPVAP]-1659915047374
GPR[EPVAP]-1659915049189
GPR[EPVS]-1659915049189
========
this.pattern=pattern;
this.arguments=(arguments==null)?new Object[0]:arguments.clone();
super(pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1659915049190
GPR[SPVAP]-1659915049190
GPR[EPVAP]-1659915051014
GPR[EPVS]-1659915051014
========
this.pattern=getMessage();
this.arguments=new Object[0];
super(pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1659915051015
GPR[SPVAP]-1659915051015
GPR[EPVAP]-1659915052885
GPR[EPVS]-1659915052885
GPR[ESUN]-1659915052885
GPR[SSUN]-1659915052885
org.apache.commons.math.ConvergenceException,46
Find no block!
GPR[SSUN]-1659915053130
org.apache.commons.math.ConvergenceException,53
GPR[ESUN]-1659915054227
GPR[SSUN]-1659915054227
org.apache.commons.math.ConvergenceException,54
Find no block!
GPR[SSUN]-1659915054479
org.apache.commons.math.ConvergenceException,65
========
super(pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1659915055558
GPR[SPVAP]-1659915055558
GPR[EPVAP]-1659915060722
GPR[SPVATF]-1659915060722
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915062554
GPR[EPVS]-1659915062554
========
this.pattern=getMessage();
super(cause,pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1659915062556
GPR[SPVAP]-1659915062556
GPR[EPVAP]-1659915063569
GPR[EPVS]-1659915063569
========
this.arguments=new Object[0];
super(cause,pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1659915063570
GPR[SPVAP]-1659915063570
GPR[EPVAP]-1659915064574
GPR[EPVS]-1659915064574
========
this.pattern=pattern;
super(cause,pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1659915064575
GPR[SPVAP]-1659915064575
GPR[EPVAP]-1659915065566
GPR[EPVS]-1659915065566
========
this.arguments=(arguments==null)?new Object[0]:arguments.clone();
super(cause,pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1659915065567
GPR[SPVAP]-1659915065567
GPR[EPVAP]-1659915066586
GPR[EPVS]-1659915066586
========
this.pattern=pattern;
this.arguments=(arguments==null)?new Object[0]:arguments.clone();
super(cause,pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1659915066587
GPR[SPVAP]-1659915066587
GPR[EPVAP]-1659915067573
GPR[EPVS]-1659915067573
========
this.pattern=getMessage();
this.arguments=new Object[0];
super(cause,pattern,arguments);

========
MM Copying to MM
GPR[SPVS]-1659915067575
GPR[SPVAP]-1659915067575
GPR[EPVAP]-1659915068573
GPR[EPVS]-1659915068573
GPR[ESUN]-1659915068573
GPR[SSUN]-1659915068573
org.apache.commons.math.ConvergenceException,66
Find no block!
GPR[SSUN]-1659915068987
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,241
Find no block!
GPR[SSUN]-1659915069213
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,243
Find no block!
GPR[SSUN]-1659915069462
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,39
GPR[ESUN]-1659915070574
GPR[SSUN]-1659915070574
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,40
Find no block!
GPR[SSUN]-1659915070792
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,58
========
if(f==null){
throw MathRuntimeException.createIllegalArgumentException("function is null");
}
setup(f);
return LazyHolder.FACTORY.newDefaultSolver().solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915071961
GPR[SPVAP]-1659915071961
GPR[EPVAP]-1659915077062
GPR[SPVATF]-1659915077062
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915078838
GPR[EPVS]-1659915078838
========
this.f=f;
setup(f);
return LazyHolder.FACTORY.newDefaultSolver().solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915078839
GPR[SPVAP]-1659915078839
GPR[EPVAP]-1659915079879
GPR[EPVS]-1659915079879
========
x1=x1-(f.value(x0)/f.value(x0));
setup(f);
return LazyHolder.FACTORY.newDefaultSolver().solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915079880
GPR[SPVAP]-1659915079880
GPR[EPVAP]-1659915081765
GPR[SPVATF]-1659915081765
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915083584
GPR[EPVS]-1659915083584
========
setup(f);
return f.value(x1);

========
MM Copying to MM
GPR[SPVS]-1659915083585
GPR[SPVAP]-1659915083585
GPR[EPVAP]-1659915085465
GPR[SPVATF]-1659915085465
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915087279
GPR[EPVS]-1659915087279
========
if(f.value(x1)==0.0){
return max;
}
setup(f);
return LazyHolder.FACTORY.newDefaultSolver().solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915087280
GPR[SPVAP]-1659915087280
GPR[EPVAP]-1659915088298
GPR[EPVS]-1659915088298
========
if(f.value(x1)==0.0){
return initial;
}
setup(f);
return LazyHolder.FACTORY.newDefaultSolver().solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915088300
GPR[SPVAP]-1659915088300
GPR[EPVAP]-1659915089310
GPR[EPVS]-1659915089310
========
x0=x1;
setup(f);
return LazyHolder.FACTORY.newDefaultSolver().solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915089314
GPR[SPVAP]-1659915089314
GPR[EPVAP]-1659915091190
GPR[SPVATF]-1659915091190
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915092978
GPR[EPVS]-1659915092978
GPR[ESUN]-1659915092979
GPR[SSUN]-1659915092979
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,59
GPR[ESUN]-1659915093295
GPR[SSUN]-1659915093295
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,82
========
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return LazyHolder.FACTORY.newDefaultSolver().solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915094447
GPR[SPVAP]-1659915094447
GPR[EPVAP]-1659915099578
GPR[SPVATF]-1659915099578
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915101368
GPR[EPVS]-1659915101368
========
setup(f);
UnivariateRealSolver solver=f.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915101370
GPR[SPVAP]-1659915101370
GPR[EPVAP]-1659915102420
GPR[EPVS]-1659915102420
========
if(absoluteAccuracy==0.0){
return absoluteAccuracy;
}
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915102422
GPR[SPVAP]-1659915102422
GPR[EPVAP]-1659915104316
GPR[SPVATF]-1659915104316
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915106125
GPR[EPVS]-1659915106125
========
if(absoluteAccuracy==0.0){
return absoluteAccuracy;
}
setup(f);
UnivariateRealSolver solver=f.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915106127
GPR[SPVAP]-1659915106127
GPR[EPVAP]-1659915107148
GPR[EPVS]-1659915107148
========
if(solver.value(x0)==0.0){
return absoluteAccuracy;
}
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915107150
GPR[SPVAP]-1659915107150
GPR[EPVAP]-1659915108214
GPR[EPVS]-1659915108214
========
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.value(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915108215
GPR[SPVAP]-1659915108215
GPR[EPVAP]-1659915109262
GPR[EPVS]-1659915109262
========
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
x0=x1+x1;
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915109263
GPR[SPVAP]-1659915109263
GPR[EPVAP]-1659915111150
GPR[SPVATF]-1659915111150
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915112950
GPR[EPVS]-1659915112950
========
if((x1>0)==(x1>0)){
x1=x0;
y2=x1;
}
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915112951
GPR[SPVAP]-1659915112951
GPR[EPVAP]-1659915113966
GPR[EPVS]-1659915113966
========
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return f.value(x1);

========
MM Copying to MM
GPR[SPVS]-1659915113967
GPR[SPVAP]-1659915113967
GPR[EPVAP]-1659915115816
GPR[SPVATF]-1659915115816
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915117638
GPR[EPVS]-1659915117638
========
if(f.value(absoluteAccuracy)==0.0){
return min;
}
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915117641
GPR[SPVAP]-1659915117641
GPR[EPVAP]-1659915118654
GPR[EPVS]-1659915118654
========
if(f.value(x1)==0.0){
return max;
}
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915118655
GPR[SPVAP]-1659915118655
GPR[EPVAP]-1659915119666
GPR[EPVS]-1659915119666
========
if(f.value(x0)==0.0){
return initial;
}
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915119667
GPR[SPVAP]-1659915119667
GPR[EPVAP]-1659915120694
GPR[EPVS]-1659915120694
========
verifySequence(x1,x0,x1);
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915120695
GPR[SPVAP]-1659915120695
GPR[EPVAP]-1659915121726
GPR[EPVS]-1659915121726
========
if(MathUtils.sign(x0)+MathUtils.sign(f.value(0.5*(x0+x1)))==0.0){
x1=0.5*(x0+x1);
x1=ym;
}else {
x0=xm;
y0=ym;
}
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915121727
GPR[SPVAP]-1659915121727
GPR[EPVAP]-1659915122751
GPR[EPVS]-1659915122751
========
if(f==null){
throw MathRuntimeException.createIllegalArgumentException("function is null");
}
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915122752
GPR[SPVAP]-1659915122752
GPR[EPVAP]-1659915124636
GPR[SPVATF]-1659915124636
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915126427
GPR[EPVS]-1659915126427
========
this.f=f;
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915126428
GPR[SPVAP]-1659915126428
GPR[EPVAP]-1659915127442
GPR[EPVS]-1659915127442
========
verifyIterationCount();
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915127443
GPR[SPVAP]-1659915127443
GPR[EPVAP]-1659915128458
GPR[EPVS]-1659915128458
========
x0=x1;
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915128460
GPR[SPVAP]-1659915128460
GPR[EPVAP]-1659915130414
GPR[SPVATF]-1659915130414
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915132208
GPR[EPVS]-1659915132208
========
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
if(Math.abs(x0)>x1){
x1=x1+delta;
}else if(x1>0.0){
x1=x1+0.5*tolerance;
}else if(dx<=0.0){
x1=x1-0.5*tolerance;
}
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915132210
GPR[SPVAP]-1659915132210
GPR[EPVAP]-1659915133213
GPR[EPVS]-1659915133213
========
x1=solver.value(x1);
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915133215
GPR[SPVAP]-1659915133215
GPR[EPVAP]-1659915134222
GPR[EPVS]-1659915134222
========
if(x1*x1>0.0){
x1=x1;
}else {
x0=m;
}
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915134223
GPR[SPVAP]-1659915134223
GPR[EPVAP]-1659915135234
GPR[EPVS]-1659915135234
========
setup(f);
UnivariateRealSolver solver=f.newDefaultSolver();
solver.value(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915135236
GPR[SPVAP]-1659915135236
GPR[EPVAP]-1659915136248
GPR[EPVS]-1659915136248
========
setup(f);
solver=d2v.multiply(new Complex(2.0,0.0));
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915136249
GPR[SPVAP]-1659915136249
GPR[EPVAP]-1659915137282
GPR[EPVS]-1659915137282
========
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setMaxEvaluations(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915137284
GPR[SPVAP]-1659915137284
GPR[EPVAP]-1659915138283
GPR[EPVS]-1659915138283
========
if(f.value(x1)==0.0){
return max;
}
if(f.value(x0)==0.0){
return initial;
}
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915138284
GPR[SPVAP]-1659915138284
GPR[EPVAP]-1659915139304
GPR[EPVS]-1659915139304
========
if(f.value(x1)==0.0){
return max;
}
verifySequence(x1,x0,x1);
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915139305
GPR[SPVAP]-1659915139305
GPR[EPVAP]-1659915140322
GPR[EPVS]-1659915140322
========
if(f.value(x0)==0.0){
return initial;
}
verifySequence(x1,x0,x1);
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915140323
GPR[SPVAP]-1659915140323
GPR[EPVAP]-1659915141350
GPR[EPVS]-1659915141350
========
if(f.value(x1)==0.0){
return max;
}
if(f.value(x0)==0.0){
return initial;
}
verifySequence(x1,x0,x1);
setup(f);
UnivariateRealSolver solver=LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f,x0,x1);

========
MM Copying to MM
GPR[SPVS]-1659915141350
GPR[SPVAP]-1659915141350
GPR[EPVAP]-1659915142374
GPR[EPVS]-1659915142374
GPR[ESUN]-1659915142375
GPR[SSUN]-1659915142375
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,83
GPR[ESUN]-1659915142749
GPR[SSUN]-1659915142749
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,84
GPR[ESUN]-1659915142964
GPR[SSUN]-1659915142964
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,85
GPR[ESUN]-1659915143205
GPR[SSUN]-1659915143205
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,132
GPR[ESUN]-1659915144303
GPR[SSUN]-1659915144303
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,175
UNKNOWN ASTNode type : catch (ClassCastException cce) {
  throw MathRuntimeException.createIllegalArgumentException("function is not differentiable");
}

UNKNOWN ASTNode type : catch (ConvergenceException ex) {
  throw MathRuntimeException.createIllegalArgumentException("cannot convert given object to a fraction number: {0}",ex.getLocalizedMessage());
}

UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  throw MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
}

========
if(f==null){
throw MathRuntimeException.createIllegalArgumentException(NULL_FUNCTION_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915145611
GPR[SPVAP]-1659915145611
GPR[EPVAP]-1659915147546
GPR[EPVS]-1659915147546
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException(EMPTY_ARRAY_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915147547
GPR[SPVAP]-1659915147547
GPR[EPVAP]-1659915149284
GPR[EPVS]-1659915149284
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException(NULL_FRACTION);
}

========
MM Copying to MM
GPR[SPVS]-1659915149286
GPR[SPVAP]-1659915149286
GPR[EPVAP]-1659915151008
GPR[EPVS]-1659915151008
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_ROW_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915151009
GPR[SPVAP]-1659915151009
GPR[EPVAP]-1659915152794
GPR[EPVS]-1659915152795
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_COLUMN_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915152796
GPR[SPVAP]-1659915152796
GPR[EPVAP]-1659915154585
GPR[EPVS]-1659915154585
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
}

========
MM Copying to MM
GPR[SPVS]-1659915154586
GPR[SPVAP]-1659915154586
GPR[EPVAP]-1659915159478
GPR[SPVATF]-1659915159478
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915161274
GPR[EPVS]-1659915161274
========
if(length==null){
throw MathRuntimeException.createIllegalArgumentException(NULL_FUNCTION_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915161276
GPR[SPVAP]-1659915161276
GPR[EPVAP]-1659915162305
GPR[EPVS]-1659915162305
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("{0} method needs at least one previous point",NULL_FUNCTION_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915162306
GPR[SPVAP]-1659915162306
GPR[EPVAP]-1659915164196
GPR[SPVATF]-1659915164196
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915165963
GPR[EPVS]-1659915165963
========
if(d.length==null){
throw MathRuntimeException.createIllegalArgumentException(NULL_FUNCTION_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915165964
GPR[SPVAP]-1659915165964
GPR[EPVAP]-1659915166992
GPR[EPVS]-1659915166992
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
}

========
MM Copying to MM
GPR[SPVS]-1659915166993
GPR[SPVAP]-1659915166993
GPR[EPVAP]-1659915168861
GPR[SPVATF]-1659915168861
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915170700
GPR[EPVS]-1659915170700
========
if(length==null){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
}

========
MM Copying to MM
GPR[SPVS]-1659915170701
GPR[SPVAP]-1659915170701
GPR[EPVAP]-1659915171735
GPR[EPVS]-1659915171735
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
}

========
MM Copying to MM
GPR[SPVS]-1659915171736
GPR[SPVAP]-1659915171736
GPR[EPVAP]-1659915173628
GPR[SPVATF]-1659915173628
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915175426
GPR[EPVS]-1659915175426
========
if(d.length==null){
throw MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
}

========
MM Copying to MM
GPR[SPVS]-1659915175427
GPR[SPVAP]-1659915175427
GPR[EPVAP]-1659915176430
GPR[EPVS]-1659915176430
========
if(length==null){
throw MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
}

========
MM Copying to MM
GPR[SPVS]-1659915176431
GPR[SPVAP]-1659915176431
GPR[EPVAP]-1659915177449
GPR[EPVS]-1659915177449
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("subarray ends after array end");
}

========
MM Copying to MM
GPR[SPVS]-1659915177451
GPR[SPVAP]-1659915177451
GPR[EPVAP]-1659915179322
GPR[SPVATF]-1659915179322
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915181120
GPR[EPVS]-1659915181120
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
}

========
MM Copying to MM
GPR[SPVS]-1659915181121
GPR[SPVAP]-1659915181121
GPR[EPVAP]-1659915182997
GPR[SPVATF]-1659915182997
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915184822
GPR[EPVS]-1659915184822
========
if(f==null){
throw MathRuntimeException.createIllegalArgumentException("function to solve cannot be null");
}

========
MM Copying to MM
GPR[SPVS]-1659915184823
GPR[SPVAP]-1659915184823
GPR[EPVAP]-1659915185833
GPR[EPVS]-1659915185833
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("function is null");
}

========
MM Copying to MM
GPR[SPVS]-1659915185834
GPR[SPVAP]-1659915185834
GPR[EPVAP]-1659915187738
GPR[SPVATF]-1659915187738
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915189541
GPR[EPVS]-1659915189541
========
if(f==null){
throw MathRuntimeException.createIllegalArgumentException("function is null");
}

========
MM Copying to MM
GPR[SPVS]-1659915189542
GPR[SPVAP]-1659915189542
GPR[EPVAP]-1659915190566
GPR[EPVS]-1659915190566
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("null imaginary format");
}

========
MM Copying to MM
GPR[SPVS]-1659915190567
GPR[SPVAP]-1659915190567
GPR[EPVAP]-1659915192456
GPR[SPVATF]-1659915192456
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915194262
GPR[EPVS]-1659915194262
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("null real format");
}

========
MM Copying to MM
GPR[SPVS]-1659915194263
GPR[SPVAP]-1659915194263
GPR[EPVAP]-1659915196144
GPR[SPVATF]-1659915196144
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915197918
GPR[EPVS]-1659915197918
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("cannot compute 0-th root of unity, indefinite result");
}

========
MM Copying to MM
GPR[SPVS]-1659915197919
GPR[SPVAP]-1659915197919
GPR[EPVAP]-1659915199785
GPR[SPVATF]-1659915199785
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915201577
GPR[EPVS]-1659915201577
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("whole format can not be null");
}

========
MM Copying to MM
GPR[SPVS]-1659915201579
GPR[SPVAP]-1659915201579
GPR[EPVAP]-1659915203489
GPR[SPVATF]-1659915203489
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915205310
GPR[EPVS]-1659915205310
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("denominator format can not be null");
}

========
MM Copying to MM
GPR[SPVS]-1659915205311
GPR[SPVAP]-1659915205311
GPR[EPVAP]-1659915207190
GPR[SPVATF]-1659915207190
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915208971
GPR[EPVS]-1659915208971
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("numerator format can not be null");
}

========
MM Copying to MM
GPR[SPVS]-1659915208972
GPR[SPVAP]-1659915208972
GPR[EPVAP]-1659915210870
GPR[SPVATF]-1659915210870
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915212651
GPR[EPVS]-1659915212651
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("covariance matrix is null");
}

========
MM Copying to MM
GPR[SPVS]-1659915212652
GPR[SPVAP]-1659915212652
GPR[EPVAP]-1659915214536
GPR[SPVATF]-1659915214536
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915216336
GPR[EPVS]-1659915216336
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("input values array is null");
}

========
MM Copying to MM
GPR[SPVS]-1659915216337
GPR[SPVAP]-1659915216337
GPR[EPVAP]-1659915218237
GPR[SPVATF]-1659915218237
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915220083
GPR[EPVS]-1659915220083
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("input weights array is null");
}

========
MM Copying to MM
GPR[SPVS]-1659915220084
GPR[SPVAP]-1659915220084
GPR[EPVAP]-1659915221960
GPR[SPVATF]-1659915221960
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915223747
GPR[EPVS]-1659915223747
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("observed counts are all 0 in first observed array");
}

========
MM Copying to MM
GPR[SPVS]-1659915223748
GPR[SPVAP]-1659915223748
GPR[EPVAP]-1659915225604
GPR[SPVATF]-1659915225604
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915227399
GPR[EPVS]-1659915227399
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("observed counts are all 0 in second observed array");
}

========
MM Copying to MM
GPR[SPVS]-1659915227401
GPR[SPVAP]-1659915227401
GPR[EPVAP]-1659915229257
GPR[SPVATF]-1659915229257
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915231059
GPR[EPVS]-1659915231059
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("zero norm for rotation defining vector");
}

========
MM Copying to MM
GPR[SPVS]-1659915231060
GPR[SPVAP]-1659915231060
GPR[EPVAP]-1659915232911
GPR[SPVATF]-1659915232911
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915234685
GPR[EPVS]-1659915234685
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("simplex must contain at least one point");
}

========
MM Copying to MM
GPR[SPVS]-1659915234687
GPR[SPVAP]-1659915234687
GPR[EPVAP]-1659915236550
GPR[SPVATF]-1659915236550
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915238348
GPR[EPVS]-1659915238348
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one column");
}

========
MM Copying to MM
GPR[SPVS]-1659915238349
GPR[SPVAP]-1659915238349
GPR[EPVAP]-1659915240217
GPR[SPVATF]-1659915240217
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915242006
GPR[EPVS]-1659915242006
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("no data");
}

========
MM Copying to MM
GPR[SPVS]-1659915242008
GPR[SPVAP]-1659915242008
GPR[EPVAP]-1659915243902
GPR[SPVATF]-1659915243902
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915245674
GPR[EPVS]-1659915245674
========
if(length==null){
throw MathRuntimeException.createIllegalArgumentException("no data");
}

========
MM Copying to MM
GPR[SPVS]-1659915245675
GPR[SPVAP]-1659915245675
GPR[EPVAP]-1659915246686
GPR[EPVS]-1659915246686
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("invalid iteration limits: min={0}, max={1}",0,64);
}

========
MM Copying to MM
GPR[SPVS]-1659915246688
GPR[SPVAP]-1659915246688
GPR[EPVAP]-1659915248554
GPR[SPVATF]-1659915248554
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915250380
GPR[EPVS]-1659915250380
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException("invalid iteration limits: min={0}, max={1}",0,32);
}

========
MM Copying to MM
GPR[SPVS]-1659915250381
GPR[SPVAP]-1659915250381
GPR[EPVAP]-1659915252276
GPR[SPVATF]-1659915252276
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915254086
GPR[EPVS]-1659915254086
========
if(function==null){
throw MathRuntimeException.createIllegalArgumentException(NON_BRACKETING_MESSAGE,initial,initial,initial,initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915254088
GPR[SPVAP]-1659915254088
GPR[EPVAP]-1659915255105
GPR[EPVS]-1659915255105
========
if(d.length==null){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
}

========
MM Copying to MM
GPR[SPVS]-1659915255107
GPR[SPVAP]-1659915255107
GPR[EPVAP]-1659915256113
GPR[EPVS]-1659915256113
GPR[ESUN]-1659915256114
GPR[SSUN]-1659915256114
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,176
GPR[ESUN]-1659915256473
GPR[SSUN]-1659915256473
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,178
UNKNOWN ASTNode type : catch (ClassCastException cce) {
  throw MathRuntimeException.createIllegalArgumentException("function is not differentiable");
}

UNKNOWN ASTNode type : catch (ConvergenceException ex) {
  throw MathRuntimeException.createIllegalArgumentException("cannot convert given object to a fraction number: {0}",ex.getLocalizedMessage());
}

UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  throw MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
}

========
if(i<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915257814
GPR[SPVAP]-1659915257814
GPR[EPVAP]-1659915259786
GPR[EPVS]-1659915259786
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915259787
GPR[SPVAP]-1659915259787
GPR[EPVAP]-1659915264650
GPR[SPVATF]-1659915264650
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915266446
GPR[EPVS]-1659915266446
========
if(brightnessExponent<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915266447
GPR[SPVAP]-1659915266447
GPR[EPVAP]-1659915267485
GPR[EPVS]-1659915267485
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("brightness exponent should be positive or null, but got {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915267486
GPR[SPVAP]-1659915267486
GPR[EPVAP]-1659915269340
GPR[SPVATF]-1659915269340
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915271119
GPR[EPVS]-1659915271119
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException("brightness exponent should be positive or null, but got {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915271119
GPR[SPVAP]-1659915271120
GPR[EPVAP]-1659915273002
GPR[SPVATF]-1659915273002
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915274826
GPR[EPVS]-1659915274826
========
if(microsphereElements<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915274827
GPR[SPVAP]-1659915274827
GPR[EPVAP]-1659915275846
GPR[EPVS]-1659915275846
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("number of microsphere elements must be positive, but got {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915275847
GPR[SPVAP]-1659915275847
GPR[EPVAP]-1659915277728
GPR[SPVATF]-1659915277728
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915279518
GPR[EPVS]-1659915279518
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException("number of microsphere elements must be positive, but got {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915279520
GPR[SPVAP]-1659915279520
GPR[EPVAP]-1659915281410
GPR[SPVATF]-1659915281410
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915283188
GPR[EPVS]-1659915283188
========
if(r<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915283189
GPR[SPVAP]-1659915283189
GPR[EPVAP]-1659915284206
GPR[EPVS]-1659915284206
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("negative complex module {0}",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915284207
GPR[SPVAP]-1659915284207
GPR[EPVAP]-1659915286080
GPR[SPVATF]-1659915286080
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915287861
GPR[EPVS]-1659915287861
========
if(n<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915287862
GPR[SPVAP]-1659915287862
GPR[EPVAP]-1659915288891
GPR[EPVS]-1659915288891
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("cannot compute nth root for null or negative n: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915288892
GPR[SPVAP]-1659915288892
GPR[EPVAP]-1659915290781
GPR[SPVATF]-1659915290781
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915292611
GPR[EPVS]-1659915292611
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("number of sample is not positive: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915292613
GPR[SPVAP]-1659915292613
GPR[EPVAP]-1659915294462
GPR[SPVATF]-1659915294462
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915296270
GPR[EPVS]-1659915296270
========
if(n<=0){
throw MathRuntimeException.createIllegalArgumentException("number of sample is not positive: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915296271
GPR[SPVAP]-1659915296271
GPR[EPVAP]-1659915297294
GPR[EPVS]-1659915297294
========
if(p<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915297295
GPR[SPVAP]-1659915297295
GPR[EPVAP]-1659915298302
GPR[EPVS]-1659915298302
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("the Poisson mean must be positive ({0})",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915298303
GPR[SPVAP]-1659915298303
GPR[EPVAP]-1659915300157
GPR[SPVATF]-1659915300157
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915301965
GPR[EPVS]-1659915301965
========
if(alpha<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915301966
GPR[SPVAP]-1659915301966
GPR[EPVAP]-1659915302968
GPR[EPVS]-1659915302968
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("shape must be positive ({0})",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915302969
GPR[SPVAP]-1659915302969
GPR[EPVAP]-1659915304805
GPR[SPVATF]-1659915304805
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915306642
GPR[EPVS]-1659915306642
========
if(beta<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915306643
GPR[SPVAP]-1659915306643
GPR[EPVAP]-1659915307659
GPR[EPVS]-1659915307659
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("scale must be positive ({0})",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915307660
GPR[SPVAP]-1659915307660
GPR[EPVAP]-1659915309528
GPR[SPVATF]-1659915309528
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915311339
GPR[EPVS]-1659915311339
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("Cannot compute beta density at 0 when alpha = {0,number}",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915311340
GPR[SPVAP]-1659915311340
GPR[EPVAP]-1659915313196
GPR[SPVATF]-1659915313196
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915314995
GPR[EPVS]-1659915314995
========
if(alpha<=0){
throw MathRuntimeException.createIllegalArgumentException("Cannot compute beta density at 0 when alpha = {0,number}",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915314996
GPR[SPVAP]-1659915314996
GPR[EPVAP]-1659915316027
GPR[EPVS]-1659915316027
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("Cannot compute beta density at 1 when beta = %.3g",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915316028
GPR[SPVAP]-1659915316028
GPR[EPVAP]-1659915317934
GPR[SPVATF]-1659915317934
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915319715
GPR[EPVS]-1659915319715
========
if(beta<=0){
throw MathRuntimeException.createIllegalArgumentException("Cannot compute beta density at 1 when beta = %.3g",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915319716
GPR[SPVAP]-1659915319716
GPR[EPVAP]-1659915320735
GPR[EPVS]-1659915320735
========
if(newAlpha<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915320736
GPR[SPVAP]-1659915320736
GPR[EPVAP]-1659915321762
GPR[EPVS]-1659915321762
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("alpha must be positive ({0})",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915321763
GPR[SPVAP]-1659915321763
GPR[EPVAP]-1659915323640
GPR[SPVATF]-1659915323640
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915325417
GPR[EPVS]-1659915325417
========
if(newBeta<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915325418
GPR[SPVAP]-1659915325418
GPR[EPVAP]-1659915326449
GPR[EPVS]-1659915326449
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("beta must be positive ({0})",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915326450
GPR[SPVAP]-1659915326450
GPR[EPVAP]-1659915328331
GPR[SPVATF]-1659915328331
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915330115
GPR[EPVS]-1659915330115
========
if(newMean<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915330116
GPR[SPVAP]-1659915330116
GPR[EPVAP]-1659915331133
GPR[EPVS]-1659915331133
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915331134
GPR[SPVAP]-1659915331134
GPR[EPVAP]-1659915332992
GPR[SPVATF]-1659915332992
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915334784
GPR[EPVS]-1659915334784
========
if(sd<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915334786
GPR[SPVAP]-1659915334786
GPR[EPVAP]-1659915335801
GPR[EPVS]-1659915335801
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915335802
GPR[SPVAP]-1659915335802
GPR[EPVAP]-1659915337664
GPR[SPVATF]-1659915337664
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915339479
GPR[EPVS]-1659915339479
========
if(successes<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915339480
GPR[SPVAP]-1659915339480
GPR[EPVAP]-1659915340496
GPR[EPVS]-1659915340496
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("number of successes must be non-negative ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915340497
GPR[SPVAP]-1659915340497
GPR[EPVAP]-1659915342359
GPR[SPVATF]-1659915342359
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915344149
GPR[EPVS]-1659915344149
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException("number of successes must be non-negative ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915344150
GPR[SPVAP]-1659915344150
GPR[EPVAP]-1659915346014
GPR[SPVATF]-1659915346014
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915347784
GPR[EPVS]-1659915347784
========
if(s<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915347785
GPR[SPVAP]-1659915347785
GPR[EPVAP]-1659915348841
GPR[EPVS]-1659915348841
========
if(newDegreesOfFreedom<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915348842
GPR[SPVAP]-1659915348842
GPR[EPVAP]-1659915349877
GPR[EPVS]-1659915349877
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("degrees of freedom must be positive ({0})",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915349878
GPR[SPVAP]-1659915349878
GPR[EPVAP]-1659915351765
GPR[SPVATF]-1659915351765
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915353552
GPR[EPVS]-1659915353552
========
if(num<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915353553
GPR[SPVAP]-1659915353553
GPR[EPVAP]-1659915354573
GPR[EPVS]-1659915354573
========
if(size<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915354574
GPR[SPVAP]-1659915354574
GPR[EPVAP]-1659915355588
GPR[EPVS]-1659915355588
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("population size must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915355589
GPR[SPVAP]-1659915355589
GPR[EPVAP]-1659915357460
GPR[SPVATF]-1659915357460
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915359275
GPR[EPVS]-1659915359275
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915359276
GPR[SPVAP]-1659915359276
GPR[EPVAP]-1659915361167
GPR[SPVATF]-1659915361167
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915363001
GPR[EPVS]-1659915363001
========
if(size<0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915363002
GPR[SPVAP]-1659915363002
GPR[EPVAP]-1659915364056
GPR[EPVS]-1659915364056
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915364057
GPR[SPVAP]-1659915364057
GPR[EPVAP]-1659915365916
GPR[SPVATF]-1659915365916
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915367686
GPR[EPVS]-1659915367686
========
if(size<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915367687
GPR[SPVAP]-1659915367687
GPR[EPVAP]-1659915368714
GPR[EPVS]-1659915368714
========
if(size<0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915368715
GPR[SPVAP]-1659915368715
GPR[EPVAP]-1659915369720
GPR[EPVS]-1659915369720
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid number of elements {0} (must be positive)",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915369721
GPR[SPVAP]-1659915369721
GPR[EPVAP]-1659915371574
GPR[SPVATF]-1659915371574
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915373371
GPR[EPVS]-1659915373371
========
if(n<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid number of elements {0} (must be positive)",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915373372
GPR[SPVAP]-1659915373372
GPR[EPVAP]-1659915374392
GPR[EPVS]-1659915374392
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid exponent {0} (must be positive)",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915374394
GPR[SPVAP]-1659915374394
GPR[EPVAP]-1659915376253
GPR[SPVATF]-1659915376253
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915378042
GPR[EPVS]-1659915378042
========
if(s<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid exponent {0} (must be positive)",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915378044
GPR[SPVAP]-1659915378044
GPR[EPVAP]-1659915379067
GPR[EPVS]-1659915379067
========
if(trials<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915379069
GPR[SPVAP]-1659915379069
GPR[EPVAP]-1659915380091
GPR[EPVS]-1659915380091
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("number of trials must be non-negative ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915380093
GPR[SPVAP]-1659915380093
GPR[EPVAP]-1659915381962
GPR[SPVATF]-1659915381962
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915383753
GPR[EPVS]-1659915383753
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException("number of trials must be non-negative ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915383754
GPR[SPVAP]-1659915383754
GPR[EPVAP]-1659915385617
GPR[SPVATF]-1659915385617
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915387400
GPR[EPVS]-1659915387400
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for binomial coefficient (n,k), got n = {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915387401
GPR[SPVAP]-1659915387401
GPR[EPVAP]-1659915389265
GPR[SPVATF]-1659915389265
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915391087
GPR[EPVS]-1659915391087
========
if(n<0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915391088
GPR[SPVAP]-1659915391088
GPR[EPVAP]-1659915392089
GPR[EPVS]-1659915392089
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for binomial coefficient (n,k), got n = {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915392090
GPR[SPVAP]-1659915392090
GPR[EPVAP]-1659915393955
GPR[SPVATF]-1659915393955
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915395770
GPR[EPVS]-1659915395770
========
if(n<=0){
throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for binomial coefficient (n,k), got n = {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915395771
GPR[SPVAP]-1659915395771
GPR[EPVAP]-1659915396757
GPR[EPVS]-1659915396757
========
if(n<0){
throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for binomial coefficient (n,k), got n = {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915396758
GPR[SPVAP]-1659915396758
GPR[EPVAP]-1659915397764
GPR[EPVS]-1659915397764
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915397764
GPR[SPVAP]-1659915397764
GPR[EPVAP]-1659915399622
GPR[SPVATF]-1659915399623
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915401399
GPR[EPVS]-1659915401399
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915401400
GPR[SPVAP]-1659915401400
GPR[EPVAP]-1659915403277
GPR[SPVATF]-1659915403277
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915405059
GPR[EPVS]-1659915405059
========
if(n<=0){
throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915405060
GPR[SPVAP]-1659915405060
GPR[EPVAP]-1659915406072
GPR[EPVS]-1659915406072
========
if(n<0){
throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915406073
GPR[SPVAP]-1659915406073
GPR[EPVAP]-1659915407087
GPR[EPVS]-1659915407087
========
if(expansion<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915407088
GPR[SPVAP]-1659915407088
GPR[EPVAP]-1659915408109
GPR[EPVS]-1659915408109
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("index ({0}) is not positive",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915408110
GPR[SPVAP]-1659915408110
GPR[EPVAP]-1659915409965
GPR[SPVATF]-1659915409965
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915411751
GPR[EPVS]-1659915411751
========
if(i<0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915411752
GPR[SPVAP]-1659915411752
GPR[EPVAP]-1659915412762
GPR[EPVS]-1659915412762
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException("index ({0}) is not positive",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915412763
GPR[SPVAP]-1659915412763
GPR[EPVAP]-1659915414637
GPR[SPVATF]-1659915414637
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915416446
GPR[EPVS]-1659915416446
========
if(i<=0){
throw MathRuntimeException.createIllegalArgumentException("index ({0}) is not positive",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915416447
GPR[SPVAP]-1659915416447
GPR[EPVAP]-1659915417458
GPR[EPVS]-1659915417458
========
if(i<0){
throw MathRuntimeException.createIllegalArgumentException("index ({0}) is not positive",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915417460
GPR[SPVAP]-1659915417460
GPR[EPVAP]-1659915418486
GPR[EPVS]-1659915418486
========
if(begin<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915418487
GPR[SPVAP]-1659915418487
GPR[EPVAP]-1659915419523
GPR[EPVS]-1659915419523
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("start position cannot be negative ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915419524
GPR[SPVAP]-1659915419524
GPR[EPVAP]-1659915421390
GPR[SPVATF]-1659915421390
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915423171
GPR[EPVS]-1659915423171
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException("start position cannot be negative ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915423172
GPR[SPVAP]-1659915423172
GPR[EPVAP]-1659915425025
GPR[SPVATF]-1659915425025
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915426844
GPR[EPVS]-1659915426844
========
if(length<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915426846
GPR[SPVAP]-1659915426846
GPR[EPVAP]-1659915427855
GPR[EPVS]-1659915427855
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("length cannot be negative ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915427856
GPR[SPVAP]-1659915427856
GPR[EPVAP]-1659915429714
GPR[SPVATF]-1659915429714
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915431514
GPR[EPVS]-1659915431514
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException("length cannot be negative ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915431515
GPR[SPVAP]-1659915431515
GPR[EPVAP]-1659915433386
GPR[SPVATF]-1659915433386
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915435152
GPR[EPVS]-1659915435152
========
if(nSteps<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915435153
GPR[SPVAP]-1659915435153
GPR[EPVAP]-1659915436166
GPR[EPVS]-1659915436166
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("{0} method needs at least one previous point",NULL_FUNCTION_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915436168
GPR[SPVAP]-1659915436168
GPR[EPVAP]-1659915438013
GPR[SPVATF]-1659915438013
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915439790
GPR[EPVS]-1659915439790
========
if(rowDimension<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915439791
GPR[SPVAP]-1659915439791
GPR[EPVAP]-1659915440797
GPR[EPVS]-1659915440797
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid row dimension {0} (must be positive)",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915440798
GPR[SPVAP]-1659915440798
GPR[EPVAP]-1659915442654
GPR[SPVATF]-1659915442654
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915444461
GPR[EPVS]-1659915444461
========
if(columnDimension<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915444463
GPR[SPVAP]-1659915444463
GPR[EPVAP]-1659915445476
GPR[EPVS]-1659915445476
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid column dimension {0} (must be positive)",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915445477
GPR[SPVAP]-1659915445477
GPR[EPVAP]-1659915447322
GPR[SPVATF]-1659915447322
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915449151
GPR[EPVS]-1659915449151
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("upper bound must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915449153
GPR[SPVAP]-1659915449153
GPR[EPVAP]-1659915451014
GPR[SPVATF]-1659915451014
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915452810
GPR[EPVS]-1659915452810
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException("upper bound must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915452811
GPR[SPVAP]-1659915452811
GPR[EPVAP]-1659915454683
GPR[SPVATF]-1659915454683
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915456491
GPR[EPVS]-1659915456491
========
if(n<=0){
throw MathRuntimeException.createIllegalArgumentException("upper bound must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915456492
GPR[SPVAP]-1659915456492
GPR[EPVAP]-1659915457511
GPR[EPVS]-1659915457511
========
if(n<0){
throw MathRuntimeException.createIllegalArgumentException("upper bound must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915457512
GPR[SPVAP]-1659915457512
GPR[EPVAP]-1659915458539
GPR[EPVS]-1659915458539
========
if(len<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915458540
GPR[SPVAP]-1659915458540
GPR[EPVAP]-1659915459558
GPR[EPVS]-1659915459558
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("length must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915459559
GPR[SPVAP]-1659915459559
GPR[EPVAP]-1659915461456
GPR[SPVATF]-1659915461456
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915463239
GPR[EPVS]-1659915463239
========
if(mean<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915463240
GPR[SPVAP]-1659915463240
GPR[EPVAP]-1659915464241
GPR[EPVS]-1659915464241
========
if(sigma<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915464242
GPR[SPVAP]-1659915464242
GPR[EPVAP]-1659915465254
GPR[EPVS]-1659915465254
========
if(mean<=0){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915465255
GPR[SPVAP]-1659915465255
GPR[EPVAP]-1659915466270
GPR[EPVS]-1659915466270
========
if(k<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915466271
GPR[SPVAP]-1659915466271
GPR[EPVAP]-1659915467277
GPR[EPVS]-1659915467277
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) must be positive",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915467278
GPR[SPVAP]-1659915467278
GPR[EPVAP]-1659915469145
GPR[SPVATF]-1659915469145
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915470925
GPR[EPVS]-1659915470925
========
if(k<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915470927
GPR[SPVAP]-1659915470927
GPR[EPVAP]-1659915471931
GPR[EPVS]-1659915471931
========
if(e<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915471932
GPR[SPVAP]-1659915471932
GPR[EPVAP]-1659915472959
GPR[EPVS]-1659915472959
========
if(knots.length<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915472960
GPR[SPVAP]-1659915472960
GPR[EPVAP]-1659915473976
GPR[EPVS]-1659915473976
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("spline partition must have at least {0} points, got {1}",2,knots.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915473977
GPR[SPVAP]-1659915473977
GPR[EPVAP]-1659915474994
GPR[EPVS]-1659915474994
========
if(length<0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915474995
GPR[SPVAP]-1659915474995
GPR[EPVAP]-1659915476021
GPR[EPVS]-1659915476021
========
if(x.length<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915476022
GPR[SPVAP]-1659915476022
GPR[EPVAP]-1659915477034
GPR[EPVS]-1659915477034
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("{0} points are required, got only {1}",2,x.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915477035
GPR[SPVAP]-1659915477035
GPR[EPVAP]-1659915478038
GPR[EPVS]-1659915478038
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("{0} points are required, got only {1}",3,x.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915478039
GPR[SPVAP]-1659915478039
GPR[EPVAP]-1659915479037
GPR[EPVS]-1659915479037
========
if(x.length<0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915479038
GPR[SPVAP]-1659915479038
GPR[EPVAP]-1659915480076
GPR[EPVS]-1659915480076
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("cannot compute 0-th root of unity, indefinite result");
}

========
MM Copying to MM
GPR[SPVS]-1659915480078
GPR[SPVAP]-1659915480078
GPR[EPVAP]-1659915481921
GPR[SPVATF]-1659915481921
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915483714
GPR[EPVS]-1659915483714
========
if(n<=0){
throw MathRuntimeException.createIllegalArgumentException("cannot compute 0-th root of unity, indefinite result");
}

========
MM Copying to MM
GPR[SPVS]-1659915483716
GPR[SPVAP]-1659915483716
GPR[EPVAP]-1659915484736
GPR[EPVS]-1659915484736
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("simplex must contain at least one point");
}

========
MM Copying to MM
GPR[SPVS]-1659915484738
GPR[SPVAP]-1659915484738
GPR[EPVAP]-1659915486582
GPR[SPVATF]-1659915486582
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915488373
GPR[EPVS]-1659915488373
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException("simplex must contain at least one point");
}

========
MM Copying to MM
GPR[SPVS]-1659915488374
GPR[SPVAP]-1659915488374
GPR[EPVAP]-1659915490237
GPR[SPVATF]-1659915490237
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915492018
GPR[EPVS]-1659915492018
========
if(n<=0){
throw MathRuntimeException.createIllegalArgumentException("simplex must contain at least one point");
}

========
MM Copying to MM
GPR[SPVS]-1659915492019
GPR[SPVAP]-1659915492019
GPR[EPVAP]-1659915493064
GPR[EPVS]-1659915493064
========
if(n<0){
throw MathRuntimeException.createIllegalArgumentException("simplex must contain at least one point");
}

========
MM Copying to MM
GPR[SPVS]-1659915493065
GPR[SPVAP]-1659915493065
GPR[EPVAP]-1659915494076
GPR[EPVS]-1659915494076
========
if(nRows<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915494078
GPR[SPVAP]-1659915494078
GPR[EPVAP]-1659915495101
GPR[EPVS]-1659915495101
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
}

========
MM Copying to MM
GPR[SPVS]-1659915495103
GPR[SPVAP]-1659915495103
GPR[EPVAP]-1659915496982
GPR[SPVATF]-1659915496982
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915498786
GPR[EPVS]-1659915498786
========
if(nCols<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915498787
GPR[SPVAP]-1659915498787
GPR[EPVAP]-1659915499797
GPR[EPVS]-1659915499797
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one column");
}

========
MM Copying to MM
GPR[SPVS]-1659915499798
GPR[SPVAP]-1659915499798
GPR[EPVAP]-1659915501675
GPR[SPVATF]-1659915501675
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915503470
GPR[EPVS]-1659915503470
========
if(refLength<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915503471
GPR[SPVAP]-1659915503471
GPR[EPVAP]-1659915504506
GPR[EPVS]-1659915504506
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one column");
}

========
MM Copying to MM
GPR[SPVS]-1659915504507
GPR[SPVAP]-1659915504507
GPR[EPVAP]-1659915506372
GPR[SPVATF]-1659915506372
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915508167
GPR[EPVS]-1659915508167
========
if(dimension<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915508169
GPR[SPVAP]-1659915508169
GPR[EPVAP]-1659915509201
GPR[EPVS]-1659915509201
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException(EMPTY_ARRAY_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915509202
GPR[SPVAP]-1659915509202
GPR[EPVAP]-1659915510208
GPR[EPVS]-1659915510208
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_ROW_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915510209
GPR[SPVAP]-1659915510209
GPR[EPVAP]-1659915511231
GPR[EPVS]-1659915511231
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_COLUMN_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915511232
GPR[SPVAP]-1659915511232
GPR[EPVAP]-1659915512254
GPR[EPVS]-1659915512254
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
}

========
MM Copying to MM
GPR[SPVS]-1659915512255
GPR[SPVAP]-1659915512255
GPR[EPVAP]-1659915514118
GPR[SPVATF]-1659915514118
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915515893
GPR[EPVS]-1659915515893
========
if(k<=0){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
}

========
MM Copying to MM
GPR[SPVS]-1659915515894
GPR[SPVAP]-1659915515894
GPR[EPVAP]-1659915516920
GPR[EPVS]-1659915516920
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915516921
GPR[SPVAP]-1659915516921
GPR[EPVAP]-1659915518776
GPR[SPVATF]-1659915518776
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915520618
GPR[EPVS]-1659915520618
========
if(p<=0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915520619
GPR[SPVAP]-1659915520619
GPR[EPVAP]-1659915521638
GPR[EPVS]-1659915521638
========
if(expected.length<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915521639
GPR[SPVAP]-1659915521639
GPR[EPVAP]-1659915522698
GPR[EPVS]-1659915522698
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("expected array length = {0}, must be at least 2",expected.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915522699
GPR[SPVAP]-1659915522699
GPR[EPVAP]-1659915523730
GPR[EPVS]-1659915523730
========
if(observed1.length<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915523731
GPR[SPVAP]-1659915523731
GPR[EPVAP]-1659915524745
GPR[EPVS]-1659915524745
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("observed array length = {0}, must be at least 2",observed1.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915524746
GPR[SPVAP]-1659915524746
GPR[EPVAP]-1659915525748
GPR[EPVS]-1659915525748
========
if(in.length<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915525749
GPR[SPVAP]-1659915525749
GPR[EPVAP]-1659915526764
GPR[EPVS]-1659915526764
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid row dimension: {0} (must be at least 2)",in.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915526765
GPR[SPVAP]-1659915526765
GPR[EPVAP]-1659915527783
GPR[EPVS]-1659915527783
========
if(array.length<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915527784
GPR[SPVAP]-1659915527784
GPR[EPVAP]-1659915528797
GPR[EPVS]-1659915528797
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("two or more values required in each category, one has {0}",array.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915528798
GPR[SPVAP]-1659915528798
GPR[EPVAP]-1659915529822
GPR[EPVS]-1659915529822
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException(OUT_OF_RANGE_POINT,initial,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659915529823
GPR[SPVAP]-1659915529823
GPR[EPVAP]-1659915530858
GPR[EPVS]-1659915530858
========
if(contraction<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915530859
GPR[SPVAP]-1659915530859
GPR[EPVAP]-1659915531889
GPR[EPVS]-1659915531889
========
if(initialCapacity<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915531890
GPR[SPVAP]-1659915531890
GPR[EPVAP]-1659915532885
GPR[EPVS]-1659915532885
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("initial capacity ({0}) is not positive",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915532886
GPR[SPVAP]-1659915532886
GPR[EPVAP]-1659915534767
GPR[SPVATF]-1659915534767
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915536551
GPR[EPVS]-1659915536551
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException(NON_POSITIVE_DEGREE_MESSAGE,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915536552
GPR[SPVAP]-1659915536552
GPR[EPVAP]-1659915537571
GPR[EPVS]-1659915537571
========
if(degreesOfFreedom<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915537572
GPR[SPVAP]-1659915537572
GPR[EPVAP]-1659915538589
GPR[EPVS]-1659915538589
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException(NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE,initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915538590
GPR[SPVAP]-1659915538590
GPR[EPVAP]-1659915539602
GPR[EPVS]-1659915539602
========
if(windowSize<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915539604
GPR[SPVAP]-1659915539604
GPR[EPVAP]-1659915540626
GPR[EPVS]-1659915540626
========
if(maximumIterations<=INFINITE_WINDOW){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915540627
GPR[SPVAP]-1659915540627
GPR[EPVAP]-1659915541643
GPR[EPVS]-1659915541643
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("window size must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915541644
GPR[SPVAP]-1659915541644
GPR[EPVAP]-1659915543516
GPR[SPVATF]-1659915543516
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915545315
GPR[EPVS]-1659915545315
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,0,dimensionSize.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915545316
GPR[SPVAP]-1659915545316
GPR[EPVAP]-1659915546317
GPR[EPVS]-1659915546317
========
if((maximumIterations<=0)){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915546319
GPR[SPVAP]-1659915546319
GPR[EPVAP]-1659915548169
GPR[SPVATF]-1659915548169
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915549949
GPR[EPVS]-1659915549949
========
if(minimalIterationCount<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915549950
GPR[SPVAP]-1659915549950
GPR[EPVAP]-1659915550975
GPR[EPVS]-1659915550975
========
if(expansionMode<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915550976
GPR[SPVAP]-1659915550976
GPR[EPVAP]-1659915551985
GPR[EPVS]-1659915551985
========
if(MULTIPLICATIVE_MODE<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915551986
GPR[SPVAP]-1659915551986
GPR[EPVAP]-1659915553016
GPR[EPVS]-1659915553016
========
if(maximumIterations<=ADDITIVE_MODE){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915553016
GPR[SPVAP]-1659915553016
GPR[EPVAP]-1659915554030
GPR[EPVS]-1659915554030
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})",maximumIterations,MULTIPLICATIVE_MODE,"MULTIPLICATIVE_MODE",ADDITIVE_MODE,"ADDITIVE_MODE");
}

========
MM Copying to MM
GPR[SPVS]-1659915554031
GPR[SPVAP]-1659915554031
GPR[EPVAP]-1659915555041
GPR[EPVS]-1659915555041
========
if(x<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915555042
GPR[SPVAP]-1659915555042
GPR[EPVAP]-1659915556063
GPR[EPVS]-1659915556063
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",initial,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659915556064
GPR[SPVAP]-1659915556064
GPR[EPVAP]-1659915557932
GPR[SPVATF]-1659915557932
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915559731
GPR[EPVS]-1659915559731
========
if(y<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915559732
GPR[SPVAP]-1659915559732
GPR[EPVAP]-1659915560738
GPR[EPVS]-1659915560738
========
if(z<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915560739
GPR[SPVAP]-1659915560739
GPR[EPVAP]-1659915561747
GPR[EPVS]-1659915561747
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",initial,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659915561748
GPR[SPVAP]-1659915561748
GPR[EPVAP]-1659915563610
GPR[SPVATF]-1659915563610
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915565395
GPR[EPVS]-1659915565395
========
if(p<=0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",initial,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659915565396
GPR[SPVAP]-1659915565396
GPR[EPVAP]-1659915566434
GPR[EPVS]-1659915566434
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",initial,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659915566435
GPR[SPVAP]-1659915566435
GPR[EPVAP]-1659915568283
GPR[SPVATF]-1659915568283
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915570103
GPR[EPVS]-1659915570103
========
if(alpha<=0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",initial,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659915570104
GPR[SPVAP]-1659915570104
GPR[EPVAP]-1659915571118
GPR[EPVS]-1659915571118
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",initial,0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659915571119
GPR[SPVAP]-1659915571119
GPR[EPVAP]-1659915572993
GPR[SPVATF]-1659915572993
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915574838
GPR[EPVS]-1659915574838
========
if(alpha<=0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",initial,0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659915574840
GPR[SPVAP]-1659915574840
GPR[EPVAP]-1659915575863
GPR[EPVS]-1659915575863
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",initial,0.0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659915575864
GPR[SPVAP]-1659915575864
GPR[EPVAP]-1659915577783
GPR[SPVATF]-1659915577783
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915579571
GPR[EPVS]-1659915579571
========
if(alpha<=0){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",initial,0.0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659915579572
GPR[SPVAP]-1659915579572
GPR[EPVAP]-1659915580580
GPR[EPVS]-1659915580580
========
if(lower<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915580582
GPR[SPVAP]-1659915580582
GPR[EPVAP]-1659915581617
GPR[EPVS]-1659915581617
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lowerBound,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915581618
GPR[SPVAP]-1659915581618
GPR[EPVAP]-1659915583471
GPR[SPVATF]-1659915583471
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915585273
GPR[EPVS]-1659915585273
========
if(x0<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915585274
GPR[SPVAP]-1659915585274
GPR[EPVAP]-1659915586297
GPR[EPVS]-1659915586297
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})",initial,initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915586298
GPR[SPVAP]-1659915586298
GPR[EPVAP]-1659915588161
GPR[SPVATF]-1659915588161
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915589939
GPR[EPVS]-1659915589939
========
if(numberOfSuccesses<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915589940
GPR[SPVAP]-1659915589940
GPR[EPVAP]-1659915590954
GPR[EPVS]-1659915590954
========
if(sampleSize<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915590956
GPR[SPVAP]-1659915590956
GPR[EPVAP]-1659915591990
GPR[EPVS]-1659915591990
========
if(maximumIterations<=values.length){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915591991
GPR[SPVAP]-1659915591991
GPR[EPVAP]-1659915593027
GPR[EPVS]-1659915593027
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("Different number of weights and values");
}

========
MM Copying to MM
GPR[SPVS]-1659915593028
GPR[SPVAP]-1659915593028
GPR[EPVAP]-1659915594879
GPR[SPVATF]-1659915594879
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915596651
GPR[EPVS]-1659915596651
========
if(length<=0){
throw MathRuntimeException.createIllegalArgumentException("Different number of weights and values");
}

========
MM Copying to MM
GPR[SPVS]-1659915596652
GPR[SPVAP]-1659915596652
GPR[EPVAP]-1659915597670
GPR[EPVS]-1659915597670
========
if(arrayDimension<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915597672
GPR[SPVAP]-1659915597672
GPR[EPVAP]-1659915598683
GPR[EPVS]-1659915598683
========
if(d<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915598684
GPR[SPVAP]-1659915598684
GPR[EPVAP]-1659915599713
GPR[EPVS]-1659915599713
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",initial,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915599714
GPR[SPVAP]-1659915599714
GPR[EPVAP]-1659915601594
GPR[SPVATF]-1659915601594
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915603384
GPR[EPVS]-1659915603384
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException(EQUAL_VERTICES_MESSAGE,maximumIterations,j+1);
}

========
MM Copying to MM
GPR[SPVS]-1659915603385
GPR[SPVAP]-1659915603385
GPR[EPVAP]-1659915604390
GPR[EPVS]-1659915604390
========
if(y0<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915604391
GPR[SPVAP]-1659915604391
GPR[EPVAP]-1659915605398
GPR[EPVS]-1659915605398
========
if(y1<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915605399
GPR[SPVAP]-1659915605399
GPR[EPVAP]-1659915606458
GPR[EPVS]-1659915606458
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs, "+"endpoints: [{0}, {1}], values: [{2}, {3}]",initial,initial,initial,initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915606459
GPR[SPVAP]-1659915606459
GPR[EPVAP]-1659915608331
GPR[SPVATF]-1659915608331
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915610082
GPR[EPVS]-1659915610082
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("input arrays must have the same positive length ({0} and {1})",maximumIterations,sample2.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915610084
GPR[SPVAP]-1659915610084
GPR[EPVAP]-1659915611100
GPR[EPVS]-1659915611100
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("input arrays must have the same length and at least two elements ({0} and {1})",maximumIterations,sample2.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915611101
GPR[SPVAP]-1659915611101
GPR[EPVAP]-1659915612141
GPR[EPVS]-1659915612141
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("subarray ends after array end");
}

========
MM Copying to MM
GPR[SPVS]-1659915612142
GPR[SPVAP]-1659915612142
GPR[EPVAP]-1659915614007
GPR[SPVATF]-1659915614007
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915615792
GPR[EPVS]-1659915615792
========
if(begin<=values.length){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915615793
GPR[SPVAP]-1659915615793
GPR[EPVAP]-1659915616815
GPR[EPVS]-1659915616815
========
if(begin<=0){
throw MathRuntimeException.createIllegalArgumentException("subarray ends after array end");
}

========
MM Copying to MM
GPR[SPVS]-1659915616816
GPR[SPVAP]-1659915616816
GPR[EPVAP]-1659915617852
GPR[EPVS]-1659915617852
========
if(length<=values.length){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915617853
GPR[SPVAP]-1659915617853
GPR[EPVAP]-1659915618885
GPR[EPVS]-1659915618885
========
if(length<=0){
throw MathRuntimeException.createIllegalArgumentException("subarray ends after array end");
}

========
MM Copying to MM
GPR[SPVS]-1659915618886
GPR[SPVAP]-1659915618886
GPR[EPVAP]-1659915619894
GPR[EPVS]-1659915619894
========
if(maximumIterations<=values.length){
throw MathRuntimeException.createIllegalArgumentException("subarray ends after array end");
}

========
MM Copying to MM
GPR[SPVS]-1659915619895
GPR[SPVAP]-1659915619895
GPR[EPVAP]-1659915620906
GPR[EPVS]-1659915620906
========
if(begin<=values.length){
throw MathRuntimeException.createIllegalArgumentException("subarray ends after array end");
}

========
MM Copying to MM
GPR[SPVS]-1659915620907
GPR[SPVAP]-1659915620907
GPR[EPVAP]-1659915621923
GPR[EPVS]-1659915621923
========
if(length<=values.length){
throw MathRuntimeException.createIllegalArgumentException("subarray ends after array end");
}

========
MM Copying to MM
GPR[SPVS]-1659915621924
GPR[SPVAP]-1659915621924
GPR[EPVAP]-1659915622933
GPR[EPVS]-1659915622933
========
if(j<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915622935
GPR[SPVAP]-1659915622935
GPR[EPVAP]-1659915623962
GPR[EPVS]-1659915623962
========
if(xLen<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915623964
GPR[SPVAP]-1659915623964
GPR[EPVAP]-1659915624970
GPR[EPVS]-1659915624970
========
if(yLen<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915624971
GPR[SPVAP]-1659915624971
GPR[EPVAP]-1659915625976
GPR[EPVS]-1659915625976
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("no data");
}

========
MM Copying to MM
GPR[SPVS]-1659915625977
GPR[SPVAP]-1659915625977
GPR[EPVAP]-1659915627834
GPR[SPVATF]-1659915627834
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915629640
GPR[EPVS]-1659915629640
========
if(length<=0){
throw MathRuntimeException.createIllegalArgumentException("no data");
}

========
MM Copying to MM
GPR[SPVS]-1659915629641
GPR[SPVAP]-1659915629641
GPR[EPVAP]-1659915630686
GPR[EPVS]-1659915630686
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("propagation direction mismatch");
}

========
MM Copying to MM
GPR[SPVS]-1659915630688
GPR[SPVAP]-1659915630688
GPR[EPVAP]-1659915632568
GPR[SPVATF]-1659915632568
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915634370
GPR[EPVS]-1659915634370
========
if(xLen<=0){
throw MathRuntimeException.createIllegalArgumentException("no data");
}

========
MM Copying to MM
GPR[SPVS]-1659915634371
GPR[SPVAP]-1659915634371
GPR[EPVAP]-1659915635387
GPR[EPVS]-1659915635387
========
if(yLen<=0){
throw MathRuntimeException.createIllegalArgumentException("no data");
}

========
MM Copying to MM
GPR[SPVS]-1659915635387
GPR[SPVAP]-1659915635387
GPR[EPVAP]-1659915636394
GPR[EPVS]-1659915636394
========
if(maximalIterationCount<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915636395
GPR[SPVAP]-1659915636395
GPR[EPVAP]-1659915637409
GPR[EPVS]-1659915637409
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid iteration limits: min={0}, max={1}",0,64);
}

========
MM Copying to MM
GPR[SPVS]-1659915637410
GPR[SPVAP]-1659915637410
GPR[EPVAP]-1659915639278
GPR[SPVATF]-1659915639278
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915641058
GPR[EPVS]-1659915641058
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid iteration limits: min={0}, max={1}",0,32);
}

========
MM Copying to MM
GPR[SPVS]-1659915641059
GPR[SPVAP]-1659915641059
GPR[EPVAP]-1659915642922
GPR[SPVATF]-1659915642922
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915644718
GPR[EPVS]-1659915644718
========
if(maximalIterationCount<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid iteration limits: min={0}, max={1}",0,32);
}

========
MM Copying to MM
GPR[SPVS]-1659915644719
GPR[SPVAP]-1659915644719
GPR[EPVAP]-1659915645749
GPR[EPVS]-1659915645749
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",v.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915645750
GPR[SPVAP]-1659915645750
GPR[EPVAP]-1659915646780
GPR[EPVS]-1659915646780
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",b.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915646781
GPR[SPVAP]-1659915646781
GPR[EPVAP]-1659915647790
GPR[EPVS]-1659915647790
========
if(length<=0){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",v.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915647791
GPR[SPVAP]-1659915647791
GPR[EPVAP]-1659915648854
GPR[EPVS]-1659915648854
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("some rows have length {0} while others have length {1}",maximumIterations,subRow.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915648855
GPR[SPVAP]-1659915648855
GPR[EPVAP]-1659915649870
GPR[EPVS]-1659915649870
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",data.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915649872
GPR[SPVAP]-1659915649872
GPR[EPVAP]-1659915650897
GPR[EPVS]-1659915650897
========
if(length<=0){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",b.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915650898
GPR[SPVAP]-1659915650898
GPR[EPVAP]-1659915651902
GPR[EPVS]-1659915651902
========
if(initial<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915651903
GPR[SPVAP]-1659915651903
GPR[EPVAP]-1659915653752
GPR[SPVATF]-1659915653752
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915655579
GPR[EPVS]-1659915655579
========
if(min<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915655580
GPR[SPVAP]-1659915655580
GPR[EPVAP]-1659915656591
GPR[EPVS]-1659915656591
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}",initial,initial,initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915656592
GPR[SPVAP]-1659915656592
GPR[EPVAP]-1659915658452
GPR[SPVATF]-1659915658452
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915660244
GPR[EPVS]-1659915660244
========
if(initial<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}",initial,initial,initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915660245
GPR[SPVAP]-1659915660246
GPR[EPVAP]-1659915662123
GPR[SPVATF]-1659915662123
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915663898
GPR[EPVS]-1659915663898
========
if(rowsCount<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915663899
GPR[SPVAP]-1659915663899
GPR[EPVAP]-1659915664911
GPR[EPVS]-1659915664911
========
if(d.length<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915664912
GPR[SPVAP]-1659915664912
GPR[EPVAP]-1659915665910
GPR[EPVS]-1659915665910
========
if(lowerBound<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915665911
GPR[SPVAP]-1659915665911
GPR[EPVAP]-1659915667814
GPR[SPVATF]-1659915667814
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915669595
GPR[EPVS]-1659915669595
========
if(upperBound<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915669596
GPR[SPVAP]-1659915669596
GPR[EPVAP]-1659915671458
GPR[SPVATF]-1659915671458
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915673265
GPR[EPVS]-1659915673265
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915673266
GPR[SPVAP]-1659915673266
GPR[EPVAP]-1659915675114
GPR[SPVATF]-1659915675114
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915676893
GPR[EPVS]-1659915676893
========
if(initial<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915676894
GPR[SPVAP]-1659915676894
GPR[EPVAP]-1659915678746
GPR[SPVATF]-1659915678746
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915680531
GPR[EPVS]-1659915680531
========
if(lowerBound<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915680532
GPR[SPVAP]-1659915680532
GPR[EPVAP]-1659915682391
GPR[SPVATF]-1659915682391
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915684171
GPR[EPVS]-1659915684171
========
if(upperBound<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915684172
GPR[SPVAP]-1659915684172
GPR[EPVAP]-1659915686050
GPR[SPVATF]-1659915686050
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915687830
GPR[EPVS]-1659915687830
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException(WRONG_ORDER_ENDPOINTS_MESSAGE,initial,initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915687834
GPR[SPVAP]-1659915687834
GPR[EPVAP]-1659915688856
GPR[EPVS]-1659915688856
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,refI.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915688858
GPR[SPVAP]-1659915688858
GPR[EPVAP]-1659915689867
GPR[EPVS]-1659915689867
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,maximumIterations,startConfiguration.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915689868
GPR[SPVAP]-1659915689868
GPR[EPVAP]-1659915690878
GPR[EPVS]-1659915690878
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException(VECTOR_LENGTHS_MISMATCH,v.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915690879
GPR[SPVAP]-1659915690879
GPR[EPVAP]-1659915691891
GPR[EPVS]-1659915691891
========
if(length<=0){
throw MathRuntimeException.createIllegalArgumentException(VECTOR_LENGTHS_MISMATCH,v.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915691892
GPR[SPVAP]-1659915691892
GPR[EPVAP]-1659915692914
GPR[EPVS]-1659915692914
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException(VECTOR_LENGTH_MISMATCH_MESSAGE,b.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915692916
GPR[SPVAP]-1659915692916
GPR[EPVAP]-1659915693916
GPR[EPVS]-1659915693916
========
if(d.length<0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915693918
GPR[SPVAP]-1659915693918
GPR[EPVAP]-1659915694950
GPR[EPVS]-1659915694950
========
if(yInitial<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915694952
GPR[SPVAP]-1659915694952
GPR[EPVAP]-1659915695982
GPR[EPVS]-1659915695982
========
if(yMax<=0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915695983
GPR[SPVAP]-1659915695983
GPR[EPVAP]-1659915696994
GPR[EPVS]-1659915696994
========
if(maximumIterations<=0){
if(initial*initial<0){
return solve(function,initial,yInitial,initial,yMax,initial,yInitial);
}
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915696995
GPR[SPVAP]-1659915696995
GPR[EPVAP]-1659915698027
GPR[EPVS]-1659915698027
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",v.length,getColumnDimension());
}

========
MM Copying to MM
GPR[SPVS]-1659915698029
GPR[SPVAP]-1659915698029
GPR[EPVAP]-1659915699060
GPR[EPVS]-1659915699060
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",getDimension(),maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915699062
GPR[SPVAP]-1659915699062
GPR[EPVAP]-1659915700075
GPR[EPVS]-1659915700075
========
if(rowDimension<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid row dimension {0} (must be positive)",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915700077
GPR[SPVAP]-1659915700077
GPR[EPVAP]-1659915701090
GPR[EPVS]-1659915701090
========
if(columnDimension<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid column dimension {0} (must be positive)",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915701091
GPR[SPVAP]-1659915701091
GPR[EPVAP]-1659915702118
GPR[EPVS]-1659915702118
========
if(len<=0){
throw MathRuntimeException.createIllegalArgumentException("length must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915702119
GPR[SPVAP]-1659915702120
GPR[EPVAP]-1659915703145
GPR[EPVS]-1659915703145
========
if(e<0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915703147
GPR[SPVAP]-1659915703147
GPR[EPVAP]-1659915704157
GPR[EPVS]-1659915704157
========
if(nRows<=0){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
}

========
MM Copying to MM
GPR[SPVS]-1659915704158
GPR[SPVAP]-1659915704158
GPR[EPVAP]-1659915705169
GPR[EPVS]-1659915705169
========
if(nCols<=0){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one column");
}

========
MM Copying to MM
GPR[SPVS]-1659915705171
GPR[SPVAP]-1659915705171
GPR[EPVAP]-1659915706178
GPR[EPVS]-1659915706178
========
if(refLength<0){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915706180
GPR[SPVAP]-1659915706180
GPR[EPVAP]-1659915707199
GPR[EPVS]-1659915707199
========
if(refLength<=0){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one column");
}

========
MM Copying to MM
GPR[SPVS]-1659915707200
GPR[SPVAP]-1659915707200
GPR[EPVAP]-1659915708204
GPR[EPVS]-1659915708204
========
if(refLength<0){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one column");
}

========
MM Copying to MM
GPR[SPVS]-1659915708205
GPR[SPVAP]-1659915708205
GPR[EPVAP]-1659915709218
GPR[EPVS]-1659915709218
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException(EMPTY_ARRAY_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915709220
GPR[SPVAP]-1659915709220
GPR[EPVAP]-1659915710226
GPR[EPVS]-1659915710226
========
if(n<=0){
throw MathRuntimeException.createIllegalArgumentException(EMPTY_ARRAY_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915710227
GPR[SPVAP]-1659915710227
GPR[EPVAP]-1659915711246
GPR[EPVS]-1659915711246
========
if(n<0){
throw MathRuntimeException.createIllegalArgumentException(EMPTY_ARRAY_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915711247
GPR[SPVAP]-1659915711247
GPR[EPVAP]-1659915712249
GPR[EPVS]-1659915712249
========
if(nRows<=0){
throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_ROW_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915712250
GPR[SPVAP]-1659915712250
GPR[EPVAP]-1659915713266
GPR[EPVS]-1659915713266
========
if(nCols<=0){
throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_COLUMN_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915713267
GPR[SPVAP]-1659915713267
GPR[EPVAP]-1659915714281
GPR[EPVS]-1659915714281
========
if(maximumIterations<0){
throw MathRuntimeException.createIllegalArgumentException(NON_POSITIVE_DEGREE_MESSAGE,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915714282
GPR[SPVAP]-1659915714282
GPR[EPVAP]-1659915715306
GPR[EPVS]-1659915715306
========
if(n<=0){
throw MathRuntimeException.createIllegalArgumentException(NON_POSITIVE_DEGREE_MESSAGE,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915715307
GPR[SPVAP]-1659915715307
GPR[EPVAP]-1659915716318
GPR[EPVS]-1659915716318
========
if(n<0){
throw MathRuntimeException.createIllegalArgumentException(NON_POSITIVE_DEGREE_MESSAGE,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915716319
GPR[SPVAP]-1659915716319
GPR[EPVAP]-1659915717326
GPR[EPVS]-1659915717326
========
if(degreesOfFreedom<=0){
throw MathRuntimeException.createIllegalArgumentException(NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE,initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915717328
GPR[SPVAP]-1659915717328
GPR[EPVAP]-1659915718341
GPR[EPVS]-1659915718341
========
if(length<=0){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,0,dimensionSize.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915718343
GPR[SPVAP]-1659915718343
GPR[EPVAP]-1659915719379
GPR[EPVS]-1659915719379
========
if(x<=0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",initial,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659915719380
GPR[SPVAP]-1659915719380
GPR[EPVAP]-1659915720393
GPR[EPVS]-1659915720393
========
if(y<=0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",initial,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659915720394
GPR[SPVAP]-1659915720394
GPR[EPVAP]-1659915721432
GPR[EPVS]-1659915721432
========
if(lower<=0){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lowerBound,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915721433
GPR[SPVAP]-1659915721433
GPR[EPVAP]-1659915722455
GPR[EPVS]-1659915722455
========
if(maximumIterations<=0){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",upperBound,lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915722457
GPR[SPVAP]-1659915722457
GPR[EPVAP]-1659915724330
GPR[SPVATF]-1659915724330
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915726115
GPR[EPVS]-1659915726115
========
if(lower<=0){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",upperBound,lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915726116
GPR[SPVAP]-1659915726116
GPR[EPVAP]-1659915727115
GPR[EPVS]-1659915727115
========
if(maximalIterationCount<=0){
throw MathRuntimeException.createIllegalArgumentException("invalid iteration limits: min={0}, max={1}",0,64);
}

========
MM Copying to MM
GPR[SPVS]-1659915727117
GPR[SPVAP]-1659915727117
GPR[EPVAP]-1659915728134
GPR[EPVS]-1659915728134
========
if(length<=0){
throw MathRuntimeException.createIllegalArgumentException("some rows have length {0} while others have length {1}",maximumIterations,subRow.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915728135
GPR[SPVAP]-1659915728135
GPR[EPVAP]-1659915729155
GPR[EPVS]-1659915729155
========
if(length<=0){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",data.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915729156
GPR[SPVAP]-1659915729156
GPR[EPVAP]-1659915730182
GPR[EPVS]-1659915730182
GPR[ESUN]-1659915730183
GPR[SSUN]-1659915730183
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,179
GPR[ESUN]-1659915730561
GPR[SSUN]-1659915730561
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,182
UNKNOWN ASTNode type : catch (ClassCastException cce) {
  throw MathRuntimeException.createIllegalArgumentException("function is not differentiable");
}

UNKNOWN ASTNode type : catch (ConvergenceException ex) {
  throw MathRuntimeException.createIllegalArgumentException("cannot convert given object to a fraction number: {0}",ex.getLocalizedMessage());
}

UNKNOWN ASTNode type : catch (ClassCastException ex) {
  throw MathRuntimeException.createIllegalArgumentException("instance of class {0} not comparable to existing values",v.getClass().getName());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (ArrayIndexOutOfBoundsException e) {
  throw MathRuntimeException.createIllegalArgumentException("vector must have at least one element");
}

========
if(initial<lowerBound||initial>upperBound||initial>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915731801
GPR[SPVAP]-1659915731801
GPR[EPVAP]-1659915736834
GPR[SPVATF]-1659915736834
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915738618
GPR[EPVS]-1659915738618
========
if(initial<lowerBound||initial>upperBound||lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915738619
GPR[SPVAP]-1659915738620
GPR[EPVAP]-1659915740562
GPR[SPVATF]-1659915740562
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915742357
GPR[EPVS]-1659915742357
========
if(initial<lowerBound||initial>upperBound||initial>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915742358
GPR[SPVAP]-1659915742358
GPR[EPVAP]-1659915744233
GPR[SPVATF]-1659915744233
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915746039
GPR[EPVS]-1659915746039
========
if(initial<lowerBound||initial>upperBound||lowerBound>=max){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915746040
GPR[SPVAP]-1659915746040
GPR[EPVAP]-1659915747061
GPR[EPVS]-1659915747061
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915747063
GPR[SPVAP]-1659915747063
GPR[EPVAP]-1659915748930
GPR[SPVATF]-1659915748930
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915750701
GPR[EPVS]-1659915750701
========
if(initial<lowerBound||initial>upperBound||initial>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915750702
GPR[SPVAP]-1659915750702
GPR[EPVAP]-1659915752569
GPR[SPVATF]-1659915752569
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915754334
GPR[EPVS]-1659915754334
========
if(initial<lowerBound||initial>upperBound||lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915754335
GPR[SPVAP]-1659915754335
GPR[EPVAP]-1659915756191
GPR[SPVATF]-1659915756191
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915757965
GPR[EPVS]-1659915757965
========
if(initial<lowerBound||initial>upperBound||initial>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915757966
GPR[SPVAP]-1659915757966
GPR[EPVAP]-1659915759851
GPR[SPVATF]-1659915759851
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915761643
GPR[EPVS]-1659915761643
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("cannot discard {0} elements from a {1} elements array",maximumIterations,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915761644
GPR[SPVAP]-1659915761644
GPR[EPVAP]-1659915763506
GPR[SPVATF]-1659915763506
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915765299
GPR[EPVS]-1659915765299
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("input arrays must have the same positive length ({0} and {1})",maximumIterations,sample2.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915765300
GPR[SPVAP]-1659915765300
GPR[EPVAP]-1659915766343
GPR[EPVS]-1659915766343
========
if(initial<lowerBound||initial>upperBound||lowerBound>=length){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915766344
GPR[SPVAP]-1659915766344
GPR[EPVAP]-1659915767352
GPR[EPVS]-1659915767352
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("input arrays must have the same length and at least two elements ({0} and {1})",maximumIterations,sample2.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915767353
GPR[SPVAP]-1659915767353
GPR[EPVAP]-1659915768378
GPR[EPVS]-1659915768378
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid iteration limits: min={0}, max={1}",maximumIterations,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915768379
GPR[SPVAP]-1659915768379
GPR[EPVAP]-1659915770257
GPR[SPVATF]-1659915770257
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915772042
GPR[EPVS]-1659915772042
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",v.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915772043
GPR[SPVAP]-1659915772043
GPR[EPVAP]-1659915773044
GPR[EPVS]-1659915773044
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",b.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915773045
GPR[SPVAP]-1659915773045
GPR[EPVAP]-1659915774059
GPR[EPVS]-1659915774059
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("some rows have length {0} while others have length {1}",maximumIterations,subRow.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915774060
GPR[SPVAP]-1659915774060
GPR[EPVAP]-1659915775066
GPR[EPVS]-1659915775066
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",data.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915775067
GPR[SPVAP]-1659915775067
GPR[EPVAP]-1659915776070
GPR[EPVS]-1659915776070
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",x.length,y.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915776071
GPR[SPVAP]-1659915776071
GPR[EPVAP]-1659915777098
GPR[EPVS]-1659915777098
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",x.length,covariance.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915777099
GPR[SPVAP]-1659915777099
GPR[EPVAP]-1659915778115
GPR[EPVS]-1659915778115
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",expected.length,observed.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915778117
GPR[SPVAP]-1659915778117
GPR[EPVAP]-1659915779114
GPR[EPVS]-1659915779114
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",observed1.length,observed2.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915779115
GPR[SPVAP]-1659915779116
GPR[EPVAP]-1659915780129
GPR[EPVS]-1659915780129
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",observations.length,weights.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915780130
GPR[SPVAP]-1659915780130
GPR[EPVAP]-1659915781129
GPR[EPVS]-1659915781129
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",mean.length,standardDeviation.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915781130
GPR[SPVAP]-1659915781130
GPR[EPVAP]-1659915782149
GPR[EPVS]-1659915782149
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})",maximumIterations,MULTIPLICATIVE_MODE,"MULTIPLICATIVE_MODE",ADDITIVE_MODE,"ADDITIVE_MODE");
}

========
MM Copying to MM
GPR[SPVS]-1659915782150
GPR[SPVAP]-1659915782150
GPR[EPVAP]-1659915783184
GPR[EPVS]-1659915783184
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(WRONG_ORDER_ENDPOINTS_MESSAGE,lowerBound,initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915783186
GPR[SPVAP]-1659915783186
GPR[EPVAP]-1659915784224
GPR[EPVS]-1659915784224
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,refI.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915784225
GPR[SPVAP]-1659915784225
GPR[EPVAP]-1659915785238
GPR[EPVS]-1659915785238
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,maximumIterations,startConfiguration.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915785239
GPR[SPVAP]-1659915785239
GPR[EPVAP]-1659915786266
GPR[EPVS]-1659915786266
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(VECTOR_LENGTHS_MISMATCH,v.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915786268
GPR[SPVAP]-1659915786268
GPR[EPVAP]-1659915787293
GPR[EPVS]-1659915787293
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(VECTOR_LENGTH_MISMATCH_MESSAGE,b.length,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915787294
GPR[SPVAP]-1659915787294
GPR[EPVAP]-1659915788302
GPR[EPVS]-1659915788302
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lowerBound,initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915788303
GPR[SPVAP]-1659915788303
GPR[EPVAP]-1659915790184
GPR[SPVATF]-1659915790184
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915791952
GPR[EPVS]-1659915791952
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})",lowerBound,initial);
}

========
MM Copying to MM
GPR[SPVS]-1659915791953
GPR[SPVAP]-1659915791953
GPR[EPVAP]-1659915793812
GPR[SPVATF]-1659915793812
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915795594
GPR[EPVS]-1659915795594
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of successes ({0}) must be less than or equal to population size ({1})",maximumIterations,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915795596
GPR[SPVAP]-1659915795596
GPR[EPVAP]-1659915797452
GPR[SPVATF]-1659915797452
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915799251
GPR[EPVS]-1659915799251
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) must be less than or equal to population size ({1})",maximumIterations,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915799252
GPR[SPVAP]-1659915799252
GPR[EPVAP]-1659915801100
GPR[SPVATF]-1659915801100
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915802857
GPR[EPVS]-1659915802857
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}",maximumIterations,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915802858
GPR[SPVAP]-1659915802858
GPR[EPVAP]-1659915804718
GPR[SPVATF]-1659915804718
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915806507
GPR[EPVS]-1659915806507
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("Different number of weights and values");
}

========
MM Copying to MM
GPR[SPVS]-1659915806508
GPR[SPVAP]-1659915806508
GPR[EPVAP]-1659915808386
GPR[SPVATF]-1659915808386
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915810167
GPR[EPVS]-1659915810167
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",maximumIterations,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915810168
GPR[SPVAP]-1659915810168
GPR[EPVAP]-1659915812069
GPR[SPVATF]-1659915812069
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915813868
GPR[EPVS]-1659915813868
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("some rows have length {0} while others have length {1}",maximumIterations,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915813869
GPR[SPVAP]-1659915813869
GPR[EPVAP]-1659915815732
GPR[SPVATF]-1659915815732
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915817522
GPR[EPVS]-1659915817522
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",lowerBound,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915817524
GPR[SPVAP]-1659915817524
GPR[EPVAP]-1659915819393
GPR[SPVATF]-1659915819393
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915821172
GPR[EPVS]-1659915821172
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",maximumIterations,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915821173
GPR[SPVAP]-1659915821173
GPR[EPVAP]-1659915823007
GPR[SPVATF]-1659915823007
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915824840
GPR[EPVS]-1659915824840
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) exceeds n ({1})",maximumIterations,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915824841
GPR[SPVAP]-1659915824841
GPR[EPVAP]-1659915826690
GPR[SPVATF]-1659915826690
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915828537
GPR[EPVS]-1659915828537
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("position {0} and size {1} don\'t fit to the size of the input array {2}",maximumIterations,maximumIterations,d.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915828538
GPR[SPVAP]-1659915828538
GPR[EPVAP]-1659915829546
GPR[EPVS]-1659915829546
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,vector.length,dimensionSize.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915829547
GPR[SPVAP]-1659915829547
GPR[EPVAP]-1659915830570
GPR[EPVS]-1659915830570
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(NON_FITTING_POSITION_AND_SIZE_MESSAGE,maximumIterations,maximumIterations,d.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915830571
GPR[SPVAP]-1659915830571
GPR[EPVAP]-1659915831595
GPR[EPVS]-1659915831595
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of polynomial interpolants must match the number of segments ({0} != {1} - 1)",polynomials.length,knots.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915831596
GPR[SPVAP]-1659915831596
GPR[EPVAP]-1659915832610
GPR[EPVS]-1659915832610
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("array sizes should have difference 1 ({0} != {1} + 1)",a.length,c.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915832611
GPR[SPVAP]-1659915832611
GPR[EPVAP]-1659915833618
GPR[EPVS]-1659915833618
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(OUT_OF_RANGE_ROOT_INDEX_MESSAGE,maximumIterations,0,maximumIterations-1);
}

========
MM Copying to MM
GPR[SPVS]-1659915833619
GPR[SPVAP]-1659915833619
GPR[EPVAP]-1659915834636
GPR[EPVS]-1659915834636
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(NON_POSITIVE_DEGREE_MESSAGE,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915834637
GPR[SPVAP]-1659915834637
GPR[EPVAP]-1659915835658
GPR[EPVS]-1659915835658
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE,lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915835659
GPR[SPVAP]-1659915835659
GPR[EPVAP]-1659915836678
GPR[EPVS]-1659915836678
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("window size must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915836680
GPR[SPVAP]-1659915836680
GPR[EPVAP]-1659915838535
GPR[SPVATF]-1659915838535
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915840299
GPR[EPVS]-1659915840299
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,0,dimensionSize.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915840300
GPR[SPVAP]-1659915840300
GPR[EPVAP]-1659915841310
GPR[EPVS]-1659915841310
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("subarray ends after array end");
}

========
MM Copying to MM
GPR[SPVS]-1659915841311
GPR[SPVAP]-1659915841311
GPR[EPVAP]-1659915843152
GPR[SPVATF]-1659915843152
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915844925
GPR[EPVS]-1659915844925
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("expected array length = {0}, must be at least 2",expected.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915844928
GPR[SPVAP]-1659915844928
GPR[EPVAP]-1659915845937
GPR[EPVS]-1659915845937
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("observed array length = {0}, must be at least 2",observed1.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915845938
GPR[SPVAP]-1659915845938
GPR[EPVAP]-1659915846947
GPR[EPVS]-1659915846947
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid row dimension: {0} (must be at least 2)",in.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915846948
GPR[SPVAP]-1659915846948
GPR[EPVAP]-1659915847969
GPR[EPVS]-1659915847969
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("two or more values required in each category, one has {0}",array.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915847971
GPR[SPVAP]-1659915847971
GPR[EPVAP]-1659915848986
GPR[EPVS]-1659915848986
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("initial capacity ({0}) is not positive",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915848988
GPR[SPVAP]-1659915848988
GPR[EPVAP]-1659915850834
GPR[SPVATF]-1659915850834
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915852611
GPR[EPVS]-1659915852611
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(EMPTY_ARRAY_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915852612
GPR[SPVAP]-1659915852612
GPR[EPVAP]-1659915853622
GPR[EPVS]-1659915853622
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_ROW_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915853624
GPR[SPVAP]-1659915853624
GPR[EPVAP]-1659915854630
GPR[EPVS]-1659915854630
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_COLUMN_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659915854631
GPR[SPVAP]-1659915854631
GPR[EPVAP]-1659915855643
GPR[EPVS]-1659915855643
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
}

========
MM Copying to MM
GPR[SPVS]-1659915855644
GPR[SPVAP]-1659915855644
GPR[EPVAP]-1659915857496
GPR[SPVATF]-1659915857496
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915859275
GPR[EPVS]-1659915859275
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("empty polynomials coefficients array");
}

========
MM Copying to MM
GPR[SPVS]-1659915859277
GPR[SPVAP]-1659915859277
GPR[EPVAP]-1659915861172
GPR[SPVATF]-1659915861172
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915862957
GPR[EPVS]-1659915862957
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("insufficient data: only {0} rows and {1} columns.",maximumIterations,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915862958
GPR[SPVAP]-1659915862958
GPR[EPVAP]-1659915864812
GPR[SPVATF]-1659915864812
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915866602
GPR[EPVS]-1659915866602
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("cannot raise an integral value to a negative power ({0}^{1})",maximumIterations,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915866603
GPR[SPVAP]-1659915866603
GPR[EPVAP]-1659915868473
GPR[SPVATF]-1659915868473
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915870267
GPR[EPVS]-1659915870267
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("propagation direction mismatch");
}

========
MM Copying to MM
GPR[SPVS]-1659915870268
GPR[SPVAP]-1659915870268
GPR[EPVAP]-1659915872113
GPR[SPVATF]-1659915872113
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915873905
GPR[EPVS]-1659915873905
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("spline partition must have at least {0} points, got {1}",2,knots.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915873906
GPR[SPVAP]-1659915873906
GPR[EPVAP]-1659915874915
GPR[EPVS]-1659915874915
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} points are required, got only {1}",2,x.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915874916
GPR[SPVAP]-1659915874916
GPR[EPVAP]-1659915875926
GPR[EPVS]-1659915875926
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} points are required, got only {1}",3,x.length);
}

========
MM Copying to MM
GPR[SPVS]-1659915875927
GPR[SPVAP]-1659915875927
GPR[EPVAP]-1659915876983
GPR[EPVS]-1659915876983
========
if(initial<lowerBound||initial>upperBound||p>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915876984
GPR[SPVAP]-1659915876984
GPR[EPVAP]-1659915878014
GPR[EPVS]-1659915878014
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915878015
GPR[SPVAP]-1659915878015
GPR[EPVAP]-1659915879885
GPR[SPVATF]-1659915879885
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915881665
GPR[EPVS]-1659915881665
========
if(initial<lowerBound||initial>upperBound||lowerBound>100){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915881666
GPR[SPVAP]-1659915881666
GPR[EPVAP]-1659915883523
GPR[SPVATF]-1659915883523
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915885344
GPR[EPVS]-1659915885344
========
if(initial<lowerBound||initial>upperBound||p>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915885344
GPR[SPVAP]-1659915885344
GPR[EPVAP]-1659915886363
GPR[EPVS]-1659915886363
========
if(initial<lowerBound||initial>upperBound||lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915886364
GPR[SPVAP]-1659915886364
GPR[EPVAP]-1659915888214
GPR[SPVATF]-1659915888214
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915889989
GPR[EPVS]-1659915889989
========
if(initial<lowerBound||initial>upperBound||lowerBound>100){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915889990
GPR[SPVAP]-1659915889990
GPR[EPVAP]-1659915891880
GPR[SPVATF]-1659915891880
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915893687
GPR[EPVS]-1659915893687
========
if(initial<lowerBound||initial>upperBound||p>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915893688
GPR[SPVAP]-1659915893688
GPR[EPVAP]-1659915894702
GPR[EPVS]-1659915894702
========
if(initial<lowerBound||initial>upperBound||p>upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915894703
GPR[SPVAP]-1659915894703
GPR[EPVAP]-1659915895710
GPR[EPVS]-1659915895710
========
if(maximumIterations==0||maximumIterations==0||z.length==0||f.length==0||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915895712
GPR[SPVAP]-1659915895712
GPR[EPVAP]-1659915896741
GPR[EPVS]-1659915896741
========
if(initial<length||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915896742
GPR[SPVAP]-1659915896742
GPR[EPVAP]-1659915897753
GPR[EPVS]-1659915897753
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("no data");
}

========
MM Copying to MM
GPR[SPVS]-1659915897754
GPR[SPVAP]-1659915897754
GPR[EPVAP]-1659915899618
GPR[SPVATF]-1659915899618
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915901391
GPR[EPVS]-1659915901391
========
if(initial<lowerBound||initial>upperBound||lowerBound>1.0){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915901392
GPR[SPVAP]-1659915901392
GPR[EPVAP]-1659915903242
GPR[SPVATF]-1659915903242
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915905030
GPR[EPVS]-1659915905030
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(OUT_OF_RANGE_POINT,lowerBound,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659915905031
GPR[SPVAP]-1659915905031
GPR[EPVAP]-1659915906056
GPR[EPVS]-1659915906056
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915906057
GPR[SPVAP]-1659915906057
GPR[EPVAP]-1659915907958
GPR[SPVATF]-1659915907958
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915909751
GPR[EPVS]-1659915909751
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("brightness exponent should be positive or null, but got {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915909752
GPR[SPVAP]-1659915909752
GPR[EPVAP]-1659915911612
GPR[SPVATF]-1659915911612
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915913407
GPR[EPVS]-1659915913407
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of microsphere elements must be positive, but got {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915913408
GPR[SPVAP]-1659915913408
GPR[EPVAP]-1659915915293
GPR[SPVATF]-1659915915293
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915917074
GPR[EPVS]-1659915917074
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("negative complex module {0}",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915917076
GPR[SPVAP]-1659915917076
GPR[EPVAP]-1659915918960
GPR[SPVATF]-1659915918960
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915920736
GPR[EPVS]-1659915920736
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("cannot compute nth root for null or negative n: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915920737
GPR[SPVAP]-1659915920737
GPR[EPVAP]-1659915922592
GPR[SPVATF]-1659915922592
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915924366
GPR[EPVS]-1659915924366
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of sample is not positive: {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915924367
GPR[SPVAP]-1659915924367
GPR[EPVAP]-1659915926252
GPR[SPVATF]-1659915926252
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915928041
GPR[EPVS]-1659915928041
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("the Poisson mean must be positive ({0})",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915928043
GPR[SPVAP]-1659915928043
GPR[EPVAP]-1659915929905
GPR[SPVATF]-1659915929905
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915931752
GPR[EPVS]-1659915931752
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("shape must be positive ({0})",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915931753
GPR[SPVAP]-1659915931753
GPR[EPVAP]-1659915933630
GPR[SPVATF]-1659915933630
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915935410
GPR[EPVS]-1659915935410
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("scale must be positive ({0})",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915935411
GPR[SPVAP]-1659915935411
GPR[EPVAP]-1659915937265
GPR[SPVATF]-1659915937265
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915939046
GPR[EPVS]-1659915939046
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("Cannot compute beta density at 0 when alpha = {0,number}",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915939047
GPR[SPVAP]-1659915939047
GPR[EPVAP]-1659915940912
GPR[SPVATF]-1659915940912
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915942696
GPR[EPVS]-1659915942696
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("Cannot compute beta density at 1 when beta = %.3g",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915942697
GPR[SPVAP]-1659915942697
GPR[EPVAP]-1659915944569
GPR[SPVATF]-1659915944569
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915946342
GPR[EPVS]-1659915946342
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("alpha must be positive ({0})",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915946343
GPR[SPVAP]-1659915946343
GPR[EPVAP]-1659915948261
GPR[SPVATF]-1659915948261
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915950042
GPR[EPVS]-1659915950042
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("beta must be positive ({0})",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915950043
GPR[SPVAP]-1659915950043
GPR[EPVAP]-1659915951948
GPR[SPVATF]-1659915951948
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915953741
GPR[EPVS]-1659915953741
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915953742
GPR[SPVAP]-1659915953742
GPR[EPVAP]-1659915955619
GPR[SPVATF]-1659915955619
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915957431
GPR[EPVS]-1659915957431
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915957432
GPR[SPVAP]-1659915957432
GPR[EPVAP]-1659915959334
GPR[SPVATF]-1659915959334
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915961140
GPR[EPVS]-1659915961140
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of successes must be non-negative ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915961141
GPR[SPVAP]-1659915961142
GPR[EPVAP]-1659915963004
GPR[SPVATF]-1659915963004
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915964790
GPR[EPVS]-1659915964790
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("degrees of freedom must be positive ({0})",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915964791
GPR[SPVAP]-1659915964791
GPR[EPVAP]-1659915966657
GPR[SPVATF]-1659915966657
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915968455
GPR[EPVS]-1659915968455
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("population size must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915968456
GPR[SPVAP]-1659915968456
GPR[EPVAP]-1659915970311
GPR[SPVATF]-1659915970311
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915972104
GPR[EPVS]-1659915972104
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915972105
GPR[SPVAP]-1659915972105
GPR[EPVAP]-1659915973958
GPR[SPVATF]-1659915973958
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915975733
GPR[EPVS]-1659915975733
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid number of elements {0} (must be positive)",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915975734
GPR[SPVAP]-1659915975734
GPR[EPVAP]-1659915977592
GPR[SPVATF]-1659915977592
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915979376
GPR[EPVS]-1659915979376
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid exponent {0} (must be positive)",lowerBound);
}

========
MM Copying to MM
GPR[SPVS]-1659915979377
GPR[SPVAP]-1659915979377
GPR[EPVAP]-1659915981243
GPR[SPVATF]-1659915981243
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915983031
GPR[EPVS]-1659915983031
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of trials must be non-negative ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915983032
GPR[SPVAP]-1659915983032
GPR[EPVAP]-1659915984878
GPR[SPVATF]-1659915984878
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915986658
GPR[EPVS]-1659915986658
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for binomial coefficient (n,k), got n = {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915986659
GPR[SPVAP]-1659915986659
GPR[EPVAP]-1659915988505
GPR[SPVATF]-1659915988505
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915990360
GPR[EPVS]-1659915990360
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915990361
GPR[SPVAP]-1659915990361
GPR[EPVAP]-1659915992224
GPR[SPVATF]-1659915992224
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915994020
GPR[EPVS]-1659915994020
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("index ({0}) is not positive",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915994022
GPR[SPVAP]-1659915994022
GPR[EPVAP]-1659915995882
GPR[SPVATF]-1659915995882
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659915997719
GPR[EPVS]-1659915997719
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("start position cannot be negative ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659915997720
GPR[SPVAP]-1659915997720
GPR[EPVAP]-1659915999600
GPR[SPVATF]-1659915999600
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916001405
GPR[EPVS]-1659916001405
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("length cannot be negative ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659916001406
GPR[SPVAP]-1659916001406
GPR[EPVAP]-1659916003276
GPR[SPVATF]-1659916003276
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916005071
GPR[EPVS]-1659916005071
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} method needs at least one previous point",NULL_FUNCTION_MESSAGE);
}

========
MM Copying to MM
GPR[SPVS]-1659916005073
GPR[SPVAP]-1659916005073
GPR[EPVAP]-1659916006926
GPR[SPVATF]-1659916006926
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916008702
GPR[EPVS]-1659916008702
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid row dimension {0} (must be positive)",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659916008703
GPR[SPVAP]-1659916008703
GPR[EPVAP]-1659916010575
GPR[SPVATF]-1659916010575
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916012371
GPR[EPVS]-1659916012371
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid column dimension {0} (must be positive)",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659916012372
GPR[SPVAP]-1659916012372
GPR[EPVAP]-1659916014235
GPR[SPVATF]-1659916014235
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916016046
GPR[EPVS]-1659916016046
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("upper bound must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659916016047
GPR[SPVAP]-1659916016047
GPR[EPVAP]-1659916017918
GPR[SPVATF]-1659916017918
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916019763
GPR[EPVS]-1659916019763
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("length must be positive ({0})",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659916019764
GPR[SPVAP]-1659916019764
GPR[EPVAP]-1659916021657
GPR[SPVATF]-1659916021657
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916023431
GPR[EPVS]-1659916023431
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) must be positive",maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659916023432
GPR[SPVAP]-1659916023432
GPR[EPVAP]-1659916025325
GPR[SPVATF]-1659916025325
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916027109
GPR[EPVS]-1659916027109
========
if(maximumIterations==0||maximumIterations==0||f.length==0||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916027110
GPR[SPVAP]-1659916027110
GPR[EPVAP]-1659916028154
GPR[EPVS]-1659916028154
========
if(initial<lowerBound||length>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916028155
GPR[SPVAP]-1659916028155
GPR[EPVAP]-1659916029178
GPR[EPVS]-1659916029179
========
if(initial<lowerBound||initial>upperBound||u2u2>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916029180
GPR[SPVAP]-1659916029180
GPR[EPVAP]-1659916030195
GPR[EPVS]-1659916030195
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("zero norm for rotation defining vector");
}

========
MM Copying to MM
GPR[SPVS]-1659916030197
GPR[SPVAP]-1659916030197
GPR[EPVAP]-1659916032072
GPR[SPVATF]-1659916032072
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916033858
GPR[EPVS]-1659916033858
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("cannot compute 0-th root of unity, indefinite result");
}

========
MM Copying to MM
GPR[SPVS]-1659916033860
GPR[SPVAP]-1659916033860
GPR[EPVAP]-1659916035708
GPR[SPVATF]-1659916035708
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916037477
GPR[EPVS]-1659916037477
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("observed counts are all 0 in first observed array");
}

========
MM Copying to MM
GPR[SPVS]-1659916037479
GPR[SPVAP]-1659916037479
GPR[EPVAP]-1659916039349
GPR[SPVATF]-1659916039349
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916041126
GPR[EPVS]-1659916041126
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("observed counts are all 0 in second observed array");
}

========
MM Copying to MM
GPR[SPVS]-1659916041127
GPR[SPVAP]-1659916041127
GPR[EPVAP]-1659916042990
GPR[SPVATF]-1659916042990
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916044762
GPR[EPVS]-1659916044762
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("simplex must contain at least one point");
}

========
MM Copying to MM
GPR[SPVS]-1659916044763
GPR[SPVAP]-1659916044763
GPR[EPVAP]-1659916046642
GPR[SPVATF]-1659916046642
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916048416
GPR[EPVS]-1659916048416
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one row");
}

========
MM Copying to MM
GPR[SPVS]-1659916048417
GPR[SPVAP]-1659916048417
GPR[EPVAP]-1659916050279
GPR[SPVATF]-1659916050279
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916052057
GPR[EPVS]-1659916052057
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("matrix must have at least one column");
}

========
MM Copying to MM
GPR[SPVS]-1659916052058
GPR[SPVAP]-1659916052058
GPR[EPVAP]-1659916053926
GPR[SPVATF]-1659916053926
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916055720
GPR[EPVS]-1659916055720
========
if(initial<lowerBound||initial>upperBound||lowerBound>1){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916055721
GPR[SPVAP]-1659916055721
GPR[EPVAP]-1659916057595
GPR[SPVATF]-1659916057595
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916059382
GPR[EPVS]-1659916059382
========
if(initial<lowerBound||initial>upperBound||x>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916059383
GPR[SPVAP]-1659916059383
GPR[EPVAP]-1659916060406
GPR[EPVS]-1659916060406
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659916060407
GPR[SPVAP]-1659916060407
GPR[EPVAP]-1659916062279
GPR[SPVATF]-1659916062279
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916064061
GPR[EPVS]-1659916064061
========
if(initial<lowerBound||initial>upperBound||lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659916064062
GPR[SPVAP]-1659916064062
GPR[EPVAP]-1659916065918
GPR[SPVATF]-1659916065918
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916067710
GPR[EPVS]-1659916067710
========
if(initial<lowerBound||initial>upperBound||lowerBound>1){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659916067711
GPR[SPVAP]-1659916067711
GPR[EPVAP]-1659916069579
GPR[SPVATF]-1659916069579
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916071398
GPR[EPVS]-1659916071398
========
if(initial<lowerBound||initial>upperBound||y>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916071399
GPR[SPVAP]-1659916071399
GPR[EPVAP]-1659916072416
GPR[EPVS]-1659916072416
========
if(initial<lowerBound||initial>upperBound||z>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916072417
GPR[SPVAP]-1659916072417
GPR[EPVAP]-1659916073446
GPR[EPVS]-1659916073446
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659916073447
GPR[SPVAP]-1659916073447
GPR[EPVAP]-1659916075303
GPR[SPVATF]-1659916075303
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916077100
GPR[EPVS]-1659916077100
========
if(initial<lowerBound||initial>upperBound||lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659916077101
GPR[SPVAP]-1659916077101
GPR[EPVAP]-1659916078973
GPR[SPVATF]-1659916078973
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916080759
GPR[EPVS]-1659916080759
========
if(initial<lowerBound||initial>upperBound||lowerBound>1.0){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659916080760
GPR[SPVAP]-1659916080760
GPR[EPVAP]-1659916082627
GPR[SPVATF]-1659916082627
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916084407
GPR[EPVS]-1659916084407
========
if(initial<lowerBound||initial>upperBound||p>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659916084408
GPR[SPVAP]-1659916084408
GPR[EPVAP]-1659916085418
GPR[EPVS]-1659916085418
========
if(initial<lowerBound||initial>upperBound||p>upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659916085419
GPR[SPVAP]-1659916085419
GPR[EPVAP]-1659916086435
GPR[EPVS]-1659916086435
========
if(initial<lowerBound||initial>upperBound||alpha>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916086438
GPR[SPVAP]-1659916086438
GPR[EPVAP]-1659916087454
GPR[EPVS]-1659916087454
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0.0,1.0);
}

========
MM Copying to MM
GPR[SPVS]-1659916087455
GPR[SPVAP]-1659916087455
GPR[EPVAP]-1659916089308
GPR[SPVATF]-1659916089308
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916091065
GPR[EPVS]-1659916091065
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659916091067
GPR[SPVAP]-1659916091067
GPR[EPVAP]-1659916092922
GPR[SPVATF]-1659916092922
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916094730
GPR[EPVS]-1659916094730
========
if(initial<lowerBound||initial>upperBound||alpha>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916094731
GPR[SPVAP]-1659916094731
GPR[EPVAP]-1659916095755
GPR[EPVS]-1659916095755
========
if(initial<lowerBound||initial>upperBound||lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659916095756
GPR[SPVAP]-1659916095756
GPR[EPVAP]-1659916097616
GPR[SPVATF]-1659916097616
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916099414
GPR[EPVS]-1659916099414
========
if(initial<lowerBound||initial>upperBound||alpha>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659916099415
GPR[SPVAP]-1659916099415
GPR[EPVAP]-1659916100478
GPR[EPVS]-1659916100478
========
if(initial<lowerBound||initial>upperBound||alpha>upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659916100479
GPR[SPVAP]-1659916100479
GPR[EPVAP]-1659916101533
GPR[EPVS]-1659916101533
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0.0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659916101534
GPR[SPVAP]-1659916101534
GPR[EPVAP]-1659916103407
GPR[SPVATF]-1659916103407
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916105171
GPR[EPVS]-1659916105171
========
if(initial<lowerBound||initial>upperBound||lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0.0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659916105172
GPR[SPVAP]-1659916105172
GPR[EPVAP]-1659916107010
GPR[SPVATF]-1659916107010
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916108790
GPR[EPVS]-1659916108790
========
if(initial<lowerBound||initial>upperBound||alpha>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0.0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659916108791
GPR[SPVAP]-1659916108791
GPR[EPVAP]-1659916109826
GPR[EPVS]-1659916109826
========
if(initial<lowerBound||initial>upperBound||alpha>upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds significance level {0}, must be between {1} and {2}",lowerBound,0.0,0.5);
}

========
MM Copying to MM
GPR[SPVS]-1659916109827
GPR[SPVAP]-1659916109827
GPR[EPVAP]-1659916110853
GPR[EPVS]-1659916110853
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
setResult(initial,0);
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916110854
GPR[SPVAP]-1659916110854
GPR[EPVAP]-1659916111872
GPR[EPVS]-1659916111872
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
if(function.value(initial)==0.0){
return initial;
}
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916111873
GPR[SPVAP]-1659916111873
GPR[EPVAP]-1659916112891
GPR[EPVS]-1659916112891
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
if(Math.abs(function.value(lowerBound))<getSolverAbsoluteAccuracy()){
return lowerBound;
}
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916112892
GPR[SPVAP]-1659916112892
GPR[EPVAP]-1659916113926
GPR[EPVS]-1659916113926
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
if(Math.abs(function.value(upperBound))<getSolverAbsoluteAccuracy()){
return upperBound;
}
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916113927
GPR[SPVAP]-1659916113927
GPR[EPVAP]-1659916114941
GPR[EPVS]-1659916114941
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",v.length,getColumnDimension());
}

========
MM Copying to MM
GPR[SPVS]-1659916114942
GPR[SPVAP]-1659916114942
GPR[EPVAP]-1659916115962
GPR[EPVS]-1659916115962
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} wide hole between models time ranges",Math.abs(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659916115964
GPR[SPVAP]-1659916115964
GPR[EPVAP]-1659916117827
GPR[SPVATF]-1659916117827
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916119626
GPR[EPVS]-1659916119626
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
if(upperBound*initial<0){
return solve(function,initial,yInitial,lowerBound,yMax,initial,yInitial);
}
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916119627
GPR[SPVAP]-1659916119627
GPR[EPVAP]-1659916120662
GPR[EPVS]-1659916120662
========
if(initial<lowerBound||initial>upperBound&&lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916120664
GPR[SPVAP]-1659916120664
GPR[EPVAP]-1659916122531
GPR[SPVATF]-1659916122531
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916124287
GPR[EPVS]-1659916124287
========
if(initial<lowerBound||initial>upperBound||xArray.length>1){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916124288
GPR[SPVAP]-1659916124288
GPR[EPVAP]-1659916125312
GPR[EPVS]-1659916125312
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid array dimensions. xArray has size {0}; yArray has {1} elements",xArray.length,yArray.length);
}

========
MM Copying to MM
GPR[SPVS]-1659916125313
GPR[SPVAP]-1659916125313
GPR[EPVAP]-1659916126328
GPR[EPVS]-1659916126328
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",getDimension(),maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659916126329
GPR[SPVAP]-1659916126329
GPR[EPVAP]-1659916127334
GPR[EPVS]-1659916127334
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(WRONG_ORDER_ENDPOINTS_MESSAGE,maximumIterations,maximumIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659916127337
GPR[SPVAP]-1659916127337
GPR[EPVAP]-1659916128348
GPR[EPVS]-1659916128348
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",lowerBound,initial);
}

========
MM Copying to MM
GPR[SPVS]-1659916128350
GPR[SPVAP]-1659916128350
GPR[EPVAP]-1659916130237
GPR[SPVATF]-1659916130237
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916132014
GPR[EPVS]-1659916132014
========
if(initial<lowerBound||initial>upperBound||x>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916132020
GPR[SPVAP]-1659916132020
GPR[EPVAP]-1659916133026
GPR[EPVS]-1659916133026
========
if(initial<lowerBound||initial>upperBound||x>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659916133027
GPR[SPVAP]-1659916133027
GPR[EPVAP]-1659916134064
GPR[EPVS]-1659916134064
========
if(initial<lowerBound||initial>upperBound||x>upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659916134065
GPR[SPVAP]-1659916134065
GPR[EPVAP]-1659916135078
GPR[EPVS]-1659916135078
========
if(initial<lowerBound||initial>upperBound||y>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}

========
MM Copying to MM
GPR[SPVS]-1659916135079
GPR[SPVAP]-1659916135079
GPR[EPVAP]-1659916136094
GPR[EPVS]-1659916136094
========
if(initial<lowerBound||initial>upperBound||y>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659916136095
GPR[SPVAP]-1659916136095
GPR[EPVAP]-1659916137124
GPR[EPVS]-1659916137124
========
if(initial<lowerBound||initial>upperBound||y>upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} out of [{1}, {2}] range",lowerBound,0,1);
}

========
MM Copying to MM
GPR[SPVS]-1659916137125
GPR[SPVAP]-1659916137125
GPR[EPVAP]-1659916138156
GPR[EPVS]-1659916138156
GPR[ESUN]-1659916138156
GPR[SSUN]-1659916138156
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,183
GPR[ESUN]-1659916138495
GPR[SSUN]-1659916138495
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils,187
UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException(UNSUPPORTED_METHOD_MESSAGE,percentileImpl.getClass().getName(),SET_QUANTILE_METHOD_NAME);
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

UNKNOWN ASTNode type : catch (NoSuchMethodException e1) {
  throw MathRuntimeException.createIllegalArgumentException("percentile implementation {0} does not support setQuantile",percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (IllegalAccessException e2) {
  throw MathRuntimeException.createIllegalArgumentException(ILLEGAL_ACCESS_MESSAGE,SET_QUANTILE_METHOD_NAME,percentileImpl.getClass().getName());
}

UNKNOWN ASTNode type : catch (InvocationTargetException e3) {
  throw MathRuntimeException.createIllegalArgumentException(e3.getCause());
}

========
if(initial<lowerBound||initial>upperBound||initial>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916139860
GPR[SPVAP]-1659916139860
GPR[EPVAP]-1659916144904
GPR[SPVATF]-1659916144904
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916146790
GPR[EPVS]-1659916146790
========
if(initial<lowerBound||initial>upperBound||lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916146792
GPR[SPVAP]-1659916146792
GPR[EPVAP]-1659916148705
GPR[SPVATF]-1659916148705
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916150511
GPR[EPVS]-1659916150511
========
if(initial<lowerBound||initial>upperBound||initial>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916150512
GPR[SPVAP]-1659916150512
GPR[EPVAP]-1659916152386
GPR[SPVATF]-1659916152386
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916154205
GPR[EPVS]-1659916154205
========
if(initial<lowerBound||initial>upperBound||lowerBound>=max){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916154206
GPR[SPVAP]-1659916154206
GPR[EPVAP]-1659916155230
GPR[EPVS]-1659916155230
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916155231
GPR[SPVAP]-1659916155231
GPR[EPVAP]-1659916157153
GPR[SPVATF]-1659916157153
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916158927
GPR[EPVS]-1659916158927
========
if(initial<lowerBound||initial>upperBound||initial>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916158928
GPR[SPVAP]-1659916158928
GPR[EPVAP]-1659916160808
GPR[SPVATF]-1659916160808
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916162603
GPR[EPVS]-1659916162603
========
if(initial<lowerBound||initial>upperBound||lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916162604
GPR[SPVAP]-1659916162604
GPR[EPVAP]-1659916164447
GPR[SPVATF]-1659916164447
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916166262
GPR[EPVS]-1659916166262
========
if(initial<lowerBound||initial>upperBound||initial>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid interval, initial value parameters:  lower={0}, initial={1}, upper={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916166264
GPR[SPVAP]-1659916166264
GPR[EPVAP]-1659916168168
GPR[SPVATF]-1659916168168
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916169959
GPR[EPVS]-1659916169959
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("cannot discard {0} elements from a {1} elements array",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916169960
GPR[SPVAP]-1659916169960
GPR[EPVAP]-1659916171801
GPR[SPVATF]-1659916171801
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916173607
GPR[EPVS]-1659916173607
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",x.length,y.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916173609
GPR[SPVAP]-1659916173609
GPR[EPVAP]-1659916174633
GPR[EPVS]-1659916174633
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",x.length,covariance.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916174634
GPR[SPVAP]-1659916174634
GPR[EPVAP]-1659916175670
GPR[EPVS]-1659916175670
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",expected.length,observed.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916175672
GPR[SPVAP]-1659916175672
GPR[EPVAP]-1659916176693
GPR[EPVS]-1659916176693
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",observed1.length,observed2.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916176694
GPR[SPVAP]-1659916176694
GPR[EPVAP]-1659916177721
GPR[EPVS]-1659916177721
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",observations.length,weights.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916177722
GPR[SPVAP]-1659916177722
GPR[EPVAP]-1659916178747
GPR[EPVS]-1659916178747
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",mean.length,standardDeviation.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916178748
GPR[SPVAP]-1659916178748
GPR[EPVAP]-1659916179789
GPR[EPVS]-1659916179789
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("input arrays must have the same positive length ({0} and {1})",maximumIterations,sample2.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916179790
GPR[SPVAP]-1659916179790
GPR[EPVAP]-1659916180817
GPR[EPVS]-1659916180817
========
if(initial<lowerBound||initial>upperBound||lowerBound>=length){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916180818
GPR[SPVAP]-1659916180818
GPR[EPVAP]-1659916181847
GPR[EPVS]-1659916181847
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("input arrays must have the same length and at least two elements ({0} and {1})",maximumIterations,sample2.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916181848
GPR[SPVAP]-1659916181848
GPR[EPVAP]-1659916182910
GPR[EPVS]-1659916182910
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,vector.length,dimensionSize.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916182911
GPR[SPVAP]-1659916182911
GPR[EPVAP]-1659916183930
GPR[EPVS]-1659916183930
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,refI.length,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916183931
GPR[SPVAP]-1659916183931
GPR[EPVAP]-1659916184946
GPR[EPVS]-1659916184946
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,maximumIterations,startConfiguration.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916184947
GPR[SPVAP]-1659916184947
GPR[EPVAP]-1659916186009
GPR[EPVS]-1659916186009
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(VECTOR_LENGTHS_MISMATCH,v.length,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916186010
GPR[SPVAP]-1659916186010
GPR[EPVAP]-1659916187014
GPR[EPVS]-1659916187014
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(VECTOR_LENGTH_MISMATCH_MESSAGE,b.length,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916187016
GPR[SPVAP]-1659916187016
GPR[EPVAP]-1659916188042
GPR[EPVS]-1659916188042
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",v.length,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916188044
GPR[SPVAP]-1659916188044
GPR[EPVAP]-1659916189057
GPR[EPVS]-1659916189057
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",b.length,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916189059
GPR[SPVAP]-1659916189059
GPR[EPVAP]-1659916190093
GPR[EPVS]-1659916190093
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("some rows have length {0} while others have length {1}",maximumIterations,subRow.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916190094
GPR[SPVAP]-1659916190094
GPR[EPVAP]-1659916191131
GPR[EPVS]-1659916191131
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",data.length,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916191132
GPR[SPVAP]-1659916191132
GPR[EPVAP]-1659916192155
GPR[EPVS]-1659916192155
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("position {0} and size {1} don\'t fit to the size of the input array {2}",maximumIterations,maximumIterations,d.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916192156
GPR[SPVAP]-1659916192157
GPR[EPVAP]-1659916193170
GPR[EPVS]-1659916193170
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(NON_FITTING_POSITION_AND_SIZE_MESSAGE,maximumIterations,maximumIterations,d.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916193171
GPR[SPVAP]-1659916193171
GPR[EPVAP]-1659916194200
GPR[EPVS]-1659916194200
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(WRONG_ORDER_ENDPOINTS_MESSAGE,lowerBound,initial);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916194201
GPR[SPVAP]-1659916194201
GPR[EPVAP]-1659916195214
GPR[EPVS]-1659916195214
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of polynomial interpolants must match the number of segments ({0} != {1} - 1)",polynomials.length,knots.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916195223
GPR[SPVAP]-1659916195223
GPR[EPVAP]-1659916196254
GPR[EPVS]-1659916196254
========
if(initial<lowerBound||initial>upperBound||length>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916196255
GPR[SPVAP]-1659916196255
GPR[EPVAP]-1659916197262
GPR[EPVS]-1659916197262
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("array sizes should have difference 1 ({0} != {1} + 1)",a.length,c.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916197263
GPR[SPVAP]-1659916197263
GPR[EPVAP]-1659916198283
GPR[EPVS]-1659916198283
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("endpoints do not specify an interval: [{0}, {1}]",lowerBound,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916198284
GPR[SPVAP]-1659916198284
GPR[EPVAP]-1659916200165
GPR[SPVATF]-1659916200165
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916202009
GPR[EPVS]-1659916202009
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("lower endpoint ({0}) must be less than or equal to upper endpoint ({1})",lowerBound,initial);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916202011
GPR[SPVAP]-1659916202011
GPR[EPVAP]-1659916203869
GPR[SPVATF]-1659916203869
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916205671
GPR[EPVS]-1659916205671
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of successes ({0}) must be less than or equal to population size ({1})",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916205672
GPR[SPVAP]-1659916205672
GPR[EPVAP]-1659916207522
GPR[SPVATF]-1659916207522
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916209292
GPR[EPVS]-1659916209292
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) must be less than or equal to population size ({1})",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916209294
GPR[SPVAP]-1659916209294
GPR[EPVAP]-1659916211177
GPR[SPVATF]-1659916211177
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916212965
GPR[EPVS]-1659916212965
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916212966
GPR[SPVAP]-1659916212966
GPR[EPVAP]-1659916214828
GPR[SPVATF]-1659916214828
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916216607
GPR[EPVS]-1659916216607
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("Different number of weights and values");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916216608
GPR[SPVAP]-1659916216608
GPR[EPVAP]-1659916218484
GPR[SPVATF]-1659916218484
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916220273
GPR[EPVS]-1659916220273
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("dimension mismatch {0} != {1}",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916220274
GPR[SPVAP]-1659916220274
GPR[EPVAP]-1659916222150
GPR[SPVATF]-1659916222150
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916223976
GPR[EPVS]-1659916223976
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("some rows have length {0} while others have length {1}",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916223977
GPR[SPVAP]-1659916223977
GPR[EPVAP]-1659916225857
GPR[SPVATF]-1659916225857
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916227643
GPR[EPVS]-1659916227643
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("vector length mismatch: got {0} but expected {1}",lowerBound,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916227644
GPR[SPVAP]-1659916227644
GPR[EPVAP]-1659916229508
GPR[SPVATF]-1659916229508
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916231306
GPR[EPVS]-1659916231306
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("upper bound ({0}) must be greater than lower bound ({1})",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916231307
GPR[SPVAP]-1659916231307
GPR[EPVAP]-1659916233187
GPR[SPVATF]-1659916233187
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916234976
GPR[EPVS]-1659916234976
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("permutation k ({0}) exceeds n ({1})",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916234978
GPR[SPVAP]-1659916234978
GPR[EPVAP]-1659916236830
GPR[SPVATF]-1659916236830
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916238617
GPR[EPVS]-1659916238617
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid iteration limits: min={0}, max={1}",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916238619
GPR[SPVAP]-1659916238619
GPR[EPVAP]-1659916240507
GPR[SPVATF]-1659916240507
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916242287
GPR[EPVS]-1659916242287
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("unsupported expansion mode {0}, supported modes are {1} ({2}) and {3} ({4})",maximumIterations,MULTIPLICATIVE_MODE,"MULTIPLICATIVE_MODE",ADDITIVE_MODE,"ADDITIVE_MODE");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916242288
GPR[SPVAP]-1659916242288
GPR[EPVAP]-1659916243313
GPR[EPVS]-1659916243313
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(DIMENSION_MISMATCH_MESSAGE,0,dimensionSize.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916243314
GPR[SPVAP]-1659916243314
GPR[EPVAP]-1659916244346
GPR[EPVS]-1659916244346
========
if(initial<lowerBound||initial>upperBound||lowerBound>=x.length){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916244347
GPR[SPVAP]-1659916244347
GPR[EPVAP]-1659916245414
GPR[EPVS]-1659916245414
========
if(initial<lowerBound||initial>upperBound||lowerBound>length){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916245415
GPR[SPVAP]-1659916245415
GPR[EPVAP]-1659916246426
GPR[EPVS]-1659916246426
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("subarray ends after array end");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916246428
GPR[SPVAP]-1659916246428
GPR[EPVAP]-1659916248317
GPR[SPVATF]-1659916248317
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916250113
GPR[EPVS]-1659916250113
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(NON_POSITIVE_DEGREE_MESSAGE,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916250115
GPR[SPVAP]-1659916250115
GPR[EPVAP]-1659916251142
GPR[EPVS]-1659916251142
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(NON_POSITIVE_DEGREES_OF_FREEDOM_MESSAGE,lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916251143
GPR[SPVAP]-1659916251143
GPR[EPVAP]-1659916252177
GPR[EPVS]-1659916252177
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("window size must be positive ({0})",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916252178
GPR[SPVAP]-1659916252178
GPR[EPVAP]-1659916254024
GPR[SPVATF]-1659916254024
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916255807
GPR[EPVS]-1659916255807
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(OUT_OF_RANGE_ROOT_INDEX_MESSAGE,maximumIterations,0,maximumIterations-1);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916255808
GPR[SPVAP]-1659916255808
GPR[EPVAP]-1659916256831
GPR[EPVS]-1659916256831
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("expected array length = {0}, must be at least 2",expected.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916256832
GPR[SPVAP]-1659916256832
GPR[EPVAP]-1659916257829
GPR[EPVS]-1659916257829
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("observed array length = {0}, must be at least 2",observed1.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916257830
GPR[SPVAP]-1659916257830
GPR[EPVAP]-1659916258839
GPR[EPVS]-1659916258839
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid row dimension: {0} (must be at least 2)",in.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916258841
GPR[SPVAP]-1659916258841
GPR[EPVAP]-1659916259853
GPR[EPVS]-1659916259853
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("two or more values required in each category, one has {0}",array.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916259855
GPR[SPVAP]-1659916259855
GPR[EPVAP]-1659916260864
GPR[EPVS]-1659916260864
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("initial capacity ({0}) is not positive",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916260866
GPR[SPVAP]-1659916260866
GPR[EPVAP]-1659916262819
GPR[SPVATF]-1659916262819
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916264598
GPR[EPVS]-1659916264598
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("function values at endpoints do not have different signs, "+"endpoints: [{0}, {1}], values: [{2}, {3}]",a,a,upperBound,lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916264599
GPR[SPVAP]-1659916264599
GPR[EPVAP]-1659916265604
GPR[EPVS]-1659916265604
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(EMPTY_ARRAY_MESSAGE);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916265606
GPR[SPVAP]-1659916265606
GPR[EPVAP]-1659916266628
GPR[EPVS]-1659916266628
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_ROW_MESSAGE);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916266629
GPR[SPVAP]-1659916266629
GPR[EPVAP]-1659916267662
GPR[EPVS]-1659916267662
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(AT_LEAST_ONE_COLUMN_MESSAGE);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916267663
GPR[SPVAP]-1659916267663
GPR[EPVAP]-1659916268678
GPR[EPVS]-1659916268678
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("sample size ({0}) exceeds collection size ({1})");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916268679
GPR[SPVAP]-1659916268679
GPR[EPVAP]-1659916270545
GPR[SPVATF]-1659916270545
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916272371
GPR[EPVS]-1659916272371
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("propagation direction mismatch");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916272373
GPR[SPVAP]-1659916272373
GPR[EPVAP]-1659916274237
GPR[SPVATF]-1659916274237
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916276042
GPR[EPVS]-1659916276042
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("cannot raise an integral value to a negative power ({0}^{1})",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916276044
GPR[SPVAP]-1659916276044
GPR[EPVAP]-1659916277927
GPR[SPVATF]-1659916277927
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916279718
GPR[EPVS]-1659916279718
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("empty polynomials coefficients array");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916279719
GPR[SPVAP]-1659916279719
GPR[EPVAP]-1659916281582
GPR[SPVATF]-1659916281582
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916283363
GPR[EPVS]-1659916283363
========
if(initial<lowerBound||initial>upperBound||length>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("empty polynomials coefficients array");
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916283364
GPR[SPVAP]-1659916283364
GPR[EPVAP]-1659916284392
GPR[EPVS]-1659916284392
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("insufficient data: only {0} rows and {1} columns.",maximumIterations,maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916284394
GPR[SPVAP]-1659916284394
GPR[EPVAP]-1659916286264
GPR[SPVATF]-1659916286264
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916288033
GPR[EPVS]-1659916288033
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("spline partition must have at least {0} points, got {1}",2,knots.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916288034
GPR[SPVAP]-1659916288034
GPR[EPVAP]-1659916289058
GPR[EPVS]-1659916289058
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} points are required, got only {1}",2,x.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916289059
GPR[SPVAP]-1659916289059
GPR[EPVAP]-1659916290070
GPR[EPVS]-1659916290070
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("{0} points are required, got only {1}",3,x.length);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916290071
GPR[SPVAP]-1659916290071
GPR[EPVAP]-1659916291084
GPR[EPVS]-1659916291084
========
if(initial<lowerBound||initial>upperBound||p>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916291086
GPR[SPVAP]-1659916291086
GPR[EPVAP]-1659916292090
GPR[EPVS]-1659916292090
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916292091
GPR[SPVAP]-1659916292091
GPR[EPVAP]-1659916293981
GPR[SPVATF]-1659916293981
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916295795
GPR[EPVS]-1659916295795
========
if(initial<lowerBound||initial>upperBound||lowerBound>100){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916295796
GPR[SPVAP]-1659916295796
GPR[EPVAP]-1659916297660
GPR[SPVATF]-1659916297660
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916299443
GPR[EPVS]-1659916299443
========
if(initial<lowerBound||initial>upperBound||p>upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916299444
GPR[SPVAP]-1659916299444
GPR[EPVAP]-1659916300473
GPR[EPVS]-1659916300473
========
if(initial<lowerBound||initial>upperBound||lowerBound>upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916300474
GPR[SPVAP]-1659916300474
GPR[EPVAP]-1659916302348
GPR[SPVATF]-1659916302348
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916304167
GPR[EPVS]-1659916304167
========
if(initial<lowerBound||initial>upperBound||lowerBound>100){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916304168
GPR[SPVAP]-1659916304169
GPR[EPVAP]-1659916306021
GPR[SPVATF]-1659916306021
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916307798
GPR[EPVS]-1659916307798
========
if(initial<lowerBound||initial>upperBound||p>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916307799
GPR[SPVAP]-1659916307799
GPR[EPVAP]-1659916308816
GPR[EPVS]-1659916308816
========
if(initial<lowerBound||initial>upperBound||p>upperBound){
throw MathRuntimeException.createIllegalArgumentException("out of bounds quantile value: {0}, must be in (0, 100]",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916308817
GPR[SPVAP]-1659916308817
GPR[EPVAP]-1659916309838
GPR[EPVS]-1659916309838
========
if(initial<lowerBound||initial>upperBound||lowerBound>1.0){
throw MathRuntimeException.createIllegalArgumentException("invalid bracketing parameters:  lower bound={0},  initial={1}, upper bound={2}",lowerBound,initial,upperBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916309839
GPR[SPVAP]-1659916309839
GPR[EPVAP]-1659916311708
GPR[SPVATF]-1659916311708
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916313503
GPR[EPVS]-1659916313503
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException(OUT_OF_RANGE_POINT,lowerBound,0.0,1.0);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916313504
GPR[SPVAP]-1659916313504
GPR[EPVAP]-1659916314518
GPR[EPVS]-1659916314518
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("brightness exponent should be positive or null, but got {0}",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916314519
GPR[SPVAP]-1659916314519
GPR[EPVAP]-1659916316373
GPR[SPVATF]-1659916316373
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916318145
GPR[EPVS]-1659916318145
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of microsphere elements must be positive, but got {0}",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916318146
GPR[SPVAP]-1659916318146
GPR[EPVAP]-1659916320037
GPR[SPVATF]-1659916320037
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916321817
GPR[EPVS]-1659916321817
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("negative complex module {0}",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916321818
GPR[SPVAP]-1659916321818
GPR[EPVAP]-1659916323688
GPR[SPVATF]-1659916323688
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916325465
GPR[EPVS]-1659916325465
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("cannot compute nth root for null or negative n: {0}",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916325466
GPR[SPVAP]-1659916325466
GPR[EPVAP]-1659916327330
GPR[SPVATF]-1659916327330
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916329099
GPR[EPVS]-1659916329099
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of sample is not positive: {0}",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916329101
GPR[SPVAP]-1659916329101
GPR[EPVAP]-1659916330953
GPR[SPVATF]-1659916330953
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916332735
GPR[EPVS]-1659916332735
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("the Poisson mean must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916332736
GPR[SPVAP]-1659916332736
GPR[EPVAP]-1659916334618
GPR[SPVATF]-1659916334618
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916336404
GPR[EPVS]-1659916336404
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("shape must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916336406
GPR[SPVAP]-1659916336406
GPR[EPVAP]-1659916338268
GPR[SPVATF]-1659916338268
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916340083
GPR[EPVS]-1659916340083
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("scale must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916340084
GPR[SPVAP]-1659916340084
GPR[EPVAP]-1659916341929
GPR[SPVATF]-1659916341929
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916343712
GPR[EPVS]-1659916343712
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("Cannot compute beta density at 0 when alpha = {0,number}",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916343713
GPR[SPVAP]-1659916343713
GPR[EPVAP]-1659916345566
GPR[SPVATF]-1659916345566
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916347347
GPR[EPVS]-1659916347347
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("Cannot compute beta density at 1 when beta = %.3g",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916347348
GPR[SPVAP]-1659916347348
GPR[EPVAP]-1659916349225
GPR[SPVATF]-1659916349225
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916351001
GPR[EPVS]-1659916351001
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("alpha must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916351002
GPR[SPVAP]-1659916351002
GPR[EPVAP]-1659916352862
GPR[SPVATF]-1659916352862
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916354652
GPR[EPVS]-1659916354652
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("beta must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916354653
GPR[SPVAP]-1659916354653
GPR[EPVAP]-1659916356535
GPR[SPVATF]-1659916356535
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916358378
GPR[EPVS]-1659916358378
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("mean must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916358379
GPR[SPVAP]-1659916358379
GPR[EPVAP]-1659916360238
GPR[SPVATF]-1659916360238
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916362052
GPR[EPVS]-1659916362052
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("standard deviation must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916362053
GPR[SPVAP]-1659916362053
GPR[EPVAP]-1659916364000
GPR[SPVATF]-1659916364000
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916365777
GPR[EPVS]-1659916365777
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of successes must be non-negative ({0})",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916365778
GPR[SPVAP]-1659916365778
GPR[EPVAP]-1659916367635
GPR[SPVATF]-1659916367636
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916369445
GPR[EPVS]-1659916369445
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("degrees of freedom must be positive ({0})",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916369446
GPR[SPVAP]-1659916369446
GPR[EPVAP]-1659916371314
GPR[SPVATF]-1659916371314
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916373622
GPR[EPVS]-1659916373622
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("population size must be positive ({0})",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916373624
GPR[SPVAP]-1659916373624
GPR[EPVAP]-1659916375529
GPR[SPVATF]-1659916375529
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916377312
GPR[EPVS]-1659916377312
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("sample size must be positive ({0})",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916377314
GPR[SPVAP]-1659916377314
GPR[EPVAP]-1659916379175
GPR[SPVATF]-1659916379175
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916380950
GPR[EPVS]-1659916380950
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid number of elements {0} (must be positive)",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916380951
GPR[SPVAP]-1659916380951
GPR[EPVAP]-1659916382814
GPR[SPVATF]-1659916382814
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916384599
GPR[EPVS]-1659916384599
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("invalid exponent {0} (must be positive)",lowerBound);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916384600
GPR[SPVAP]-1659916384600
GPR[EPVAP]-1659916386458
GPR[SPVATF]-1659916386458
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916388251
GPR[EPVS]-1659916388251
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("number of trials must be non-negative ({0})",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916388253
GPR[SPVAP]-1659916388253
GPR[EPVAP]-1659916390105
GPR[SPVATF]-1659916390105
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916391894
GPR[EPVS]-1659916391894
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for binomial coefficient (n,k), got n = {0}",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916391895
GPR[SPVAP]-1659916391895
GPR[EPVAP]-1659916393744
GPR[SPVATF]-1659916393744
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916395547
GPR[EPVS]-1659916395547
========
if(initial<lowerBound||initial>upperBound||lowerBound>=upperBound){
throw MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}",maximumIterations);
}
double a=initial;
double b=initial;

========
MM Copying to MM
GPR[SPVS]-1659916395548
GPR[SPVAP]-1659916395548
GPR[EPVAP]-1659916397398
GPR[SPVATF]-1659916397398
TESTING : org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM:   - org.apache.commons.math.analysis.solvers.BisectionSolverTest::testMath369
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659916399172
GPR[EPVS]-1659916399172
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007f996d782b24, pid=2840616, tid=140297306822400
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 5453 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007f996d782b24 [0x00007f996d77f160+0x39c4]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/math/math_70_buggy/hs_err_pid2840616.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Math/70 results at /experiment_home///results/SimFix/Math/70/seed_262/
\n\nNode: host-67\n
\n\nDate: Sun 07 Aug 2022 04:53:19 PM PDT\n
Removing checked out dir script/workingdir/SimFix/math/math_70_buggy
GPR[SSLE]-1659916399205
GPR[ESLE]-1659916459209
