Sleep 1m start
GPR[SSLI]-1661300807459
GPR[ESLI]-1661300867462
Running SimFix Math 57b
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
Timezone: America/Los_Angeles
Seed 282
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Killing all java process
Creating out dir /experiment_home///results/SimFix/Math/57/seed_282/
Project lc: math
New out script/workingdir/SimFix/math/math_57_buggy
The file script/workingdir/SimFix/math/math_57_buggy does not exist!
script/workingdir/SimFix/math/math_57_buggy
Current directory: script/workingdir/SimFix/math/math_57_buggy
classpath:  script/workingdir/SimFix/math/math_57_buggy/target/classes:script/workingdir/SimFix/math/math_57_buggy/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/SimFix/math/math_57_buggy/lib/junit-4.8.2.jar
Src java:  /src/main/java
Classes Java:  /target/classes
Src Test:  /src/test/java
Classes Test:  /target/test-classes
GPR[SSLB]-1661300882550
GPR[ESLB]-1661300942553
Calling SimFix: at script/workingdir/SimFix/math/math_57_buggy
build.xml
checkstyle.xml
d4j-info
defects4j.build.properties
doap_math.rdf
findbugs-exclude-filter.xml
license-header.txt
LICENSE.txt
math-pre-RC.sh
math-RC.sh
NOTICE.txt
pom.xml
PROPOSAL.html
RELEASE-NOTES.txt
siteMods
src
target
test-jar.xml
content current dir: build.xml checkstyle.xml d4j-info defects4j.build.properties doap_math.rdf findbugs-exclude-filter.xml license-header.txt LICENSE.txt math-pre-RC.sh math-RC.sh NOTICE.txt pom.xml PROPOSAL.html RELEASE-NOTES.txt siteMods src target test-jar.xml
Node: host-59
Date init: Tue 23 Aug 2022 05:29:04 PM PDT
OAR_JOB_ID: 3743711
script/workingdir/SimFix/
GPR[SSUP]-1661300944740
=================================================
Project : math_57	start : 22/08/23 17:29

Field type inconsistancy 'SUPER' with types : MathIllegalStateException and MathException
GPR[ESUP]-1661300947038
MM Purify? false
GPR[SFL]-1661300947474
GPR[EFL]-1661300947516
GPR[SFP]-1661300947516
TIMEOUT : 18000000
GPR[SSUN]-1661300947526
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,69
GPR[ESUN]-1661300948914
GPR[SSUN]-1661300948914
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,70
Find no block!
GPR[SSUN]-1661300949158
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,134
========
case LARGEST_POINTS_NUMBER :

case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;


========
MM Copying to MM
GPR[SPVS]-1661300950430
GPR[SPVAP]-1661300950430
GPR[EPVAP]-1661300952868
GPR[EPVS]-1661300952868
========
default :

case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;


========
MM Copying to MM
GPR[SPVS]-1661300952870
GPR[SPVAP]-1661300952870
GPR[EPVAP]-1661300954189
GPR[EPVS]-1661300954190
========
case LARGEST_POINTS_NUMBER :

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;


========
MM Copying to MM
GPR[SPVS]-1661300955238
GPR[SPVAP]-1661300955238
GPR[EPVAP]-1661300956554
GPR[EPVS]-1661300956554
========
default :

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;


========
MM Copying to MM
GPR[SPVS]-1661300956556
GPR[SPVAP]-1661300956556
GPR[EPVAP]-1661300957859
GPR[EPVS]-1661300957859
========
case LARGEST_POINTS_NUMBER :

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;


========
MM Copying to MM
GPR[SPVS]-1661300958839
GPR[SPVAP]-1661300958839
GPR[EPVAP]-1661300960147
GPR[EPVS]-1661300960147
========
default :

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;


========
MM Copying to MM
GPR[SPVS]-1661300960149
GPR[SPVAP]-1661300960149
GPR[EPVAP]-1661300961482
GPR[EPVS]-1661300961482
========
if(!newCenter.equals(cluster.getCenter())){
for(T newCenter : cluster.getPoints()){
new Variance().increment(newCenter.distanceFrom(cluster.getCenter()));
}
clusteringChanged=true;
}

========
MM Copying to MM
GPR[SPVS]-1661300963576
GPR[SPVAP]-1661300963576
GPR[EPVAP]-1661300964885
GPR[EPVS]-1661300964885
========
if(null==null){
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
}
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}

========
MM Copying to MM
GPR[SPVS]-1661300966016
GPR[SPVAP]-1661300966016
GPR[EPVAP]-1661300967032
GPR[EPVS]-1661300967032
========
if(cluster.getPoints().isEmpty()){
sign=(byte)1;
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}

========
MM Copying to MM
GPR[SPVS]-1661300967037
GPR[SPVAP]-1661300967037
GPR[EPVAP]-1661300968036
GPR[EPVS]-1661300968036
========
if(cluster.getPoints().isEmpty()){
nans=INFINITE;
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}

========
MM Copying to MM
GPR[SPVS]-1661300968038
GPR[SPVAP]-1661300968038
GPR[EPVAP]-1661300969035
GPR[EPVS]-1661300969035
========
if(cluster.getPoints().isEmpty()){
sign=(byte)1;
nans=INFINITE;

swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}

========
MM Copying to MM
GPR[SPVS]-1661300969036
GPR[SPVAP]-1661300969036
GPR[EPVAP]-1661300970078
GPR[EPVS]-1661300970078
========
if(cluster.getPoints().isEmpty()){
nans=QNAN;
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}

========
MM Copying to MM
GPR[SPVS]-1661300970080
GPR[SPVAP]-1661300970080
GPR[EPVAP]-1661300971093
GPR[EPVS]-1661300971093
========
if(cluster.getPoints().isEmpty()){
sign=(byte)1;
nans=QNAN;

swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}

========
MM Copying to MM
GPR[SPVS]-1661300971094
GPR[SPVAP]-1661300971094
GPR[EPVAP]-1661300972115
GPR[EPVS]-1661300972115
========
if(cluster.getPoints().isEmpty()){
sign=(byte)-1;
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}

========
MM Copying to MM
GPR[SPVS]-1661300972117
GPR[SPVAP]-1661300972117
GPR[EPVAP]-1661300973137
GPR[EPVS]-1661300973137
========
if(cluster.getPoints().isEmpty()){
sign=(byte)-1;
nans=INFINITE;

swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}

========
MM Copying to MM
GPR[SPVS]-1661300973138
GPR[SPVAP]-1661300973138
GPR[EPVAP]-1661300974139
GPR[EPVS]-1661300974139
========
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=false;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=false;
}
}

========
MM Copying to MM
GPR[SPVS]-1661300974143
GPR[SPVAP]-1661300974143
GPR[EPVAP]-1661300975144
GPR[EPVS]-1661300975144
========
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=false;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}

========
MM Copying to MM
GPR[SPVS]-1661300975145
GPR[SPVAP]-1661300975145
GPR[EPVAP]-1661300976150
GPR[EPVS]-1661300976150
========
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=false;
}
}

========
MM Copying to MM
GPR[SPVS]-1661300976151
GPR[SPVAP]-1661300976151
GPR[EPVAP]-1661300977172
GPR[EPVS]-1661300977172
========
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new NoFeasibleSolutionException();

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}

========
MM Copying to MM
GPR[SPVS]-1661300977174
GPR[SPVAP]-1661300977174
GPR[EPVAP]-1661300978198
GPR[EPVS]-1661300978198
========
if(null==null){
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
}
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}

========
MM Copying to MM
GPR[SPVS]-1661300979667
GPR[SPVAP]-1661300979667
GPR[EPVAP]-1661300980693
GPR[EPVS]-1661300980693
========
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
minRatioPositions=new ArrayList<Integer>();
newClusters.add(new Cluster<T>(newCenter));
}

========
MM Copying to MM
GPR[SPVS]-1661300980695
GPR[SPVAP]-1661300980695
GPR[EPVAP]-1661300981708
GPR[EPVS]-1661300981708
========
new ArrayList<Cluster<T>>().add(new Cluster<T>(new ArrayList<T>(points).remove(random.nextInt(pointSet.size()))));
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}

========
MM Copying to MM
GPR[SPVS]-1661300981710
GPR[SPVAP]-1661300981710
GPR[EPVAP]-1661300982712
GPR[EPVS]-1661300982712
========
G2=G.multiply(G);
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}

========
MM Copying to MM
GPR[SPVS]-1661300982716
GPR[SPVAP]-1661300982716
GPR[EPVAP]-1661300983718
GPR[EPVS]-1661300983718
========
incrementEvaluationCount();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}

========
MM Copying to MM
GPR[SPVS]-1661300983720
GPR[SPVAP]-1661300983720
GPR[EPVAP]-1661300984712
GPR[EPVS]-1661300984712
========
checkRowIndex(maxIterations);
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}

========
MM Copying to MM
GPR[SPVS]-1661300984715
GPR[SPVAP]-1661300984715
GPR[EPVAP]-1661300985724
GPR[EPVS]-1661300985724
========
checkColumnIndex(maxIterations);
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}

========
MM Copying to MM
GPR[SPVS]-1661300985726
GPR[SPVAP]-1661300985726
GPR[EPVAP]-1661300986713
GPR[EPVS]-1661300986713
========
new ArrayList<Integer>().add(0);
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}

========
MM Copying to MM
GPR[SPVS]-1661300986716
GPR[SPVAP]-1661300986716
GPR[EPVAP]-1661300987725
GPR[EPVS]-1661300987733
========
this.maxIterations=0;
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}

========
MM Copying to MM
GPR[SPVS]-1661300987734
GPR[SPVAP]-1661300987734
GPR[EPVAP]-1661300988767
GPR[EPVS]-1661300988767
========
for(Cluster<T> cluster : clusters){
forward=cluster.isForward();
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}

========
MM Copying to MM
GPR[SPVS]-1661300988770
GPR[SPVAP]-1661300988771
GPR[EPVAP]-1661300989767
GPR[EPVS]-1661300989767
========
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.subtract(new Cluster<T>(newCenter));
}

========
MM Copying to MM
GPR[SPVS]-1661300989770
GPR[SPVAP]-1661300989770
GPR[EPVAP]-1661300990774
GPR[EPVS]-1661300990774
========
System.arraycopy(xdfp.mant,0,mant,0,mant.length);
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}

========
MM Copying to MM
GPR[SPVS]-1661300990777
GPR[SPVAP]-1661300990777
GPR[EPVAP]-1661300991798
GPR[EPVS]-1661300991798
========
if(fraction.numerator==0){
return this;
}
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}

========
MM Copying to MM
GPR[SPVS]-1661300991800
GPR[SPVAP]-1661300991800
GPR[EPVAP]-1661300992808
GPR[EPVS]-1661300992808
========
if(null==null){
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
}
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661300995338
GPR[SPVAP]-1661300995338
GPR[EPVAP]-1661300996339
GPR[EPVS]-1661300996339
========
newClusters.add(new Cluster<T>(new ArrayList<T>(points).remove(random.nextInt(pointSet.size()))));
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661300996342
GPR[SPVAP]-1661300996342
GPR[EPVAP]-1661300997356
GPR[EPVS]-1661300997356
========
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
den=maxIterations+2;
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661300997358
GPR[SPVAP]-1661300997358
GPR[EPVAP]-1661300998361
GPR[EPVS]-1661300998361
========
for(int count=0;maxIterations<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661300998363
GPR[SPVAP]-1661300998363
GPR[EPVAP]-1661300999360
GPR[EPVS]-1661300999360
========
for(int count=0;count<n;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661300999361
GPR[SPVAP]-1661300999361
GPR[EPVAP]-1661301000361
GPR[EPVS]-1661301000361
========
for(int count=maxIterations;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301000364
GPR[SPVAP]-1661301000364
GPR[EPVAP]-1661301001405
GPR[EPVS]-1661301001405
========
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
fact=newClusters.divide(count);
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301001408
GPR[SPVAP]-1661301001408
GPR[EPVAP]-1661301002451
GPR[EPVS]-1661301002451
========
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
den=max+2;
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301002454
GPR[SPVAP]-1661301002454
GPR[EPVAP]-1661301003466
GPR[EPVS]-1661301003466
========
for(int count=0;count<max;count++){
py=new Dfp(newClusters);
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301003467
GPR[SPVAP]-1661301003467
GPR[EPVAP]-1661301004491
GPR[EPVS]-1661301004491
========
for(int count=0;count<max;count++){
den=max+2;
py=new Dfp(newClusters);

boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301004492
GPR[SPVAP]-1661301004492
GPR[EPVAP]-1661301005515
GPR[EPVS]-1661301005515
========
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
fact=newClusters.divide((count-1)*i);
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301005518
GPR[SPVAP]-1661301005518
GPR[EPVAP]-1661301006544
GPR[EPVS]-1661301006544
========
for(int count=0;count<ranks.length;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301006546
GPR[SPVAP]-1661301006546
GPR[EPVAP]-1661301007585
GPR[EPVS]-1661301007585
========
for(int count=0;count<length;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301007586
GPR[SPVAP]-1661301007586
GPR[EPVAP]-1661301008609
GPR[EPVS]-1661301008609
========
for(int count=0;count<max;count++){
out[ranks[i].getPosition()]=maxIterations;
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301008610
GPR[SPVAP]-1661301008610
GPR[EPVAP]-1661301009621
GPR[EPVS]-1661301009621
========
if(new ArrayList<Integer>().size()>1){
resolveTie(new double[ranks.length],tiesTrace);
}
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301009622
GPR[SPVAP]-1661301009623
GPR[EPVAP]-1661301010639
GPR[EPVS]-1661301010639
========
for(int count=0;count<maxIterations;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301010642
GPR[SPVAP]-1661301010642
GPR[EPVAP]-1661301011649
GPR[EPVS]-1661301011649
========
for(int count=0;count<dimension;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301011650
GPR[SPVAP]-1661301011650
GPR[EPVAP]-1661301012652
GPR[EPVS]-1661301012652
========
new ArrayList<Integer>().add(0);
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301012654
GPR[SPVAP]-1661301012654
GPR[EPVAP]-1661301013665
GPR[EPVS]-1661301013665
========
this.maxIterations=0;
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301013667
GPR[SPVAP]-1661301013667
GPR[EPVAP]-1661301014676
GPR[EPVS]-1661301014676
========
checkRowIndex(maxIterations);
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301014678
GPR[SPVAP]-1661301014678
GPR[EPVAP]-1661301015689
GPR[EPVS]-1661301015689
========
checkColumnIndex(maxIterations);
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301015690
GPR[SPVAP]-1661301015690
GPR[EPVAP]-1661301016729
GPR[EPVS]-1661301016729
========
for(int count=0;count<max;count++){
resetOccurred=true;
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301016733
GPR[SPVAP]-1661301016733
GPR[EPVAP]-1661301017744
GPR[EPVS]-1661301017744
========
for(int count=0;count<len;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301017748
GPR[SPVAP]-1661301017748
GPR[EPVAP]-1661301018761
GPR[EPVS]-1661301018761
========
if(maxIterations<0){
clusteringChanged=true;
a=-a;
}
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301018763
GPR[SPVAP]-1661301018763
GPR[EPVAP]-1661301019772
GPR[EPVS]-1661301019772
========
new Dfp[2][0]=result[0].add(result[1]);
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301019774
GPR[SPVAP]-1661301019774
GPR[EPVAP]-1661301020771
GPR[EPVS]-1661301020771
========
System.arraycopy(xdfp.mant,0,mant,0,mant.length);
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301020774
GPR[SPVAP]-1661301020774
GPR[EPVAP]-1661301021788
GPR[EPVS]-1661301021788
========
maxIterations=xdfp.exp;
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301021789
GPR[SPVAP]-1661301021789
GPR[EPVAP]-1661301022791
GPR[EPVS]-1661301022791
========
if(fraction.numerator==0){
return this;
}
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301022793
GPR[SPVAP]-1661301022793
GPR[EPVAP]-1661301023797
GPR[EPVS]-1661301023797
========
if(newClusters.bitLength()>31){
throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,w);
}
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301023798
GPR[SPVAP]-1661301023798
GPR[EPVAP]-1661301024858
GPR[EPVS]-1661301024858
========
--maxIterations;
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301024861
GPR[SPVAP]-1661301024861
GPR[EPVAP]-1661301025873
GPR[EPVS]-1661301025873
========
new int[maxIterations][maxIterations]=maxIterations;
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301025874
GPR[SPVAP]-1661301025874
GPR[EPVAP]-1661301026906
GPR[EPVS]-1661301026906
========
for(int count=0;count<p1.length;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301026908
GPR[SPVAP]-1661301026908
GPR[EPVAP]-1661301027909
GPR[EPVS]-1661301027909
========
for(int count=0;count<max;count++){
previous=val[i];
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301027911
GPR[SPVAP]-1661301027911
GPR[EPVAP]-1661301028927
GPR[EPVS]-1661301028927
========
for(int count=0;count<m;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301028929
GPR[SPVAP]-1661301028929
GPR[EPVAP]-1661301029933
GPR[EPVS]-1661301029933
========
for(int count=0;count<max;count++){
if(divisor.mant[i]<remainder[i]){
break;
}
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}

========
MM Copying to MM
GPR[SPVS]-1661301029934
GPR[SPVAP]-1661301029934
GPR[EPVAP]-1661301030955
GPR[EPVS]-1661301030955
========
if(null==null){
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);
}
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301032441
GPR[SPVAP]-1661301032441
GPR[EPVAP]-1661301033453
GPR[EPVS]-1661301033453
========
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return newClusters;

========
MM Copying to MM
GPR[SPVS]-1661301033456
GPR[SPVAP]-1661301033456
GPR[EPVAP]-1661301034518
GPR[EPVS]-1661301034518
========
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return resultSet;

========
MM Copying to MM
GPR[SPVS]-1661301034519
GPR[SPVAP]-1661301034519
GPR[EPVAP]-1661301035517
GPR[EPVS]-1661301035517
========
newClusters.add(new Cluster<T>(new ArrayList<T>(points).remove(random.nextInt(pointSet.size()))));
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301035519
GPR[SPVAP]-1661301035519
GPR[EPVAP]-1661301036511
GPR[EPVS]-1661301036511
========
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
den=maxIterations+2;
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301036514
GPR[SPVAP]-1661301036514
GPR[EPVAP]-1661301037521
GPR[EPVS]-1661301037521
========
for(int count=0;maxIterations<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301037523
GPR[SPVAP]-1661301037523
GPR[EPVAP]-1661301038528
GPR[EPVS]-1661301038528
========
for(int count=0;count<n;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301038530
GPR[SPVAP]-1661301038530
GPR[EPVAP]-1661301039527
GPR[EPVS]-1661301039527
========
for(int count=maxIterations;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301039529
GPR[SPVAP]-1661301039529
GPR[EPVAP]-1661301040540
GPR[EPVS]-1661301040540
========
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
fact=newClusters.divide(count);
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301040543
GPR[SPVAP]-1661301040543
GPR[EPVAP]-1661301041552
GPR[EPVS]-1661301041552
========
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
den=max+2;
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301041554
GPR[SPVAP]-1661301041554
GPR[EPVAP]-1661301042599
GPR[EPVS]-1661301042599
========
for(int count=0;count<max;count++){
py=new Dfp(newClusters);
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301042600
GPR[SPVAP]-1661301042600
GPR[EPVAP]-1661301043600
GPR[EPVS]-1661301043600
========
for(int count=0;count<max;count++){
den=max+2;
py=new Dfp(newClusters);

boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301043602
GPR[SPVAP]-1661301043602
GPR[EPVAP]-1661301044608
GPR[EPVS]-1661301044609
========
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
fact=newClusters.divide((count-1)*i);
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301044611
GPR[SPVAP]-1661301044611
GPR[EPVAP]-1661301045621
GPR[EPVS]-1661301045621
========
for(int count=0;count<ranks.length;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301045623
GPR[SPVAP]-1661301045623
GPR[EPVAP]-1661301046621
GPR[EPVS]-1661301046621
========
for(int count=0;count<length;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301046622
GPR[SPVAP]-1661301046622
GPR[EPVAP]-1661301047628
GPR[EPVS]-1661301047628
========
for(int count=0;count<max;count++){
out[ranks[i].getPosition()]=maxIterations;
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301047630
GPR[SPVAP]-1661301047630
GPR[EPVAP]-1661301048645
GPR[EPVS]-1661301048645
========
if(new ArrayList<Integer>().size()>1){
resolveTie(new double[ranks.length],tiesTrace);
}
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301048647
GPR[SPVAP]-1661301048647
GPR[EPVAP]-1661301049674
GPR[EPVS]-1661301049674
========
for(int count=0;count<maxIterations;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301049676
GPR[SPVAP]-1661301049676
GPR[EPVAP]-1661301050680
GPR[EPVS]-1661301050680
========
for(int count=0;count<dimension;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301050681
GPR[SPVAP]-1661301050681
GPR[EPVAP]-1661301051679
GPR[EPVS]-1661301051679
========
new ArrayList<Integer>().add(0);
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301051681
GPR[SPVAP]-1661301051681
GPR[EPVAP]-1661301052685
GPR[EPVS]-1661301052685
========
this.maxIterations=0;
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301052686
GPR[SPVAP]-1661301052686
GPR[EPVAP]-1661301053689
GPR[EPVS]-1661301053689
========
checkRowIndex(maxIterations);
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301053691
GPR[SPVAP]-1661301053691
GPR[EPVAP]-1661301054693
GPR[EPVS]-1661301054693
========
checkColumnIndex(maxIterations);
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301054695
GPR[SPVAP]-1661301054695
GPR[EPVAP]-1661301055768
GPR[EPVS]-1661301055768
========
for(int count=0;count<max;count++){
resetOccurred=true;
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301055772
GPR[SPVAP]-1661301055772
GPR[EPVAP]-1661301056814
GPR[EPVS]-1661301056814
========
for(int count=0;count<len;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301056818
GPR[SPVAP]-1661301056818
GPR[EPVAP]-1661301057814
GPR[EPVS]-1661301057814
========
if(maxIterations<0){
clusteringChanged=true;
a=-a;
}
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301057816
GPR[SPVAP]-1661301057816
GPR[EPVAP]-1661301058817
GPR[EPVS]-1661301058817
========
new Dfp[2][0]=result[0].add(result[1]);
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301058819
GPR[SPVAP]-1661301058819
GPR[EPVAP]-1661301059832
GPR[EPVS]-1661301059832
========
System.arraycopy(xdfp.mant,0,mant,0,mant.length);
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301059836
GPR[SPVAP]-1661301059836
GPR[EPVAP]-1661301060833
GPR[EPVS]-1661301060833
========
maxIterations=xdfp.exp;
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301060834
GPR[SPVAP]-1661301060834
GPR[EPVAP]-1661301061876
GPR[EPVS]-1661301061876
========
if(fraction.numerator==0){
return this;
}
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301061878
GPR[SPVAP]-1661301061878
GPR[EPVAP]-1661301062897
GPR[EPVS]-1661301062897
========
if(newClusters.bitLength()>31){
throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,w);
}
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301062898
GPR[SPVAP]-1661301062898
GPR[EPVAP]-1661301063900
GPR[EPVS]-1661301063900
========
--maxIterations;
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301063903
GPR[SPVAP]-1661301063903
GPR[EPVAP]-1661301064901
GPR[EPVS]-1661301064901
========
new int[maxIterations][maxIterations]=maxIterations;
for(int count=0;count<max;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301064902
GPR[SPVAP]-1661301064902
GPR[EPVAP]-1661301065909
GPR[EPVS]-1661301065909
========
for(int count=0;count<p1.length;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301065911
GPR[SPVAP]-1661301065911
GPR[EPVAP]-1661301066915
GPR[EPVS]-1661301066915
========
for(int count=0;count<max;count++){
previous=val[i];
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301066917
GPR[SPVAP]-1661301066917
GPR[EPVAP]-1661301067921
GPR[EPVS]-1661301067921
========
for(int count=0;count<m;count++){
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301067923
GPR[SPVAP]-1661301067923
GPR[EPVAP]-1661301068928
GPR[EPVS]-1661301068928
========
for(int count=0;count<max;count++){
if(divisor.mant[i]<remainder[i]){
break;
}
boolean clusteringChanged=false;
List<Cluster<T>> newClusters=new ArrayList<Cluster<T>>();
for(Cluster<T> cluster : clusters){
 final T newCenter;
if(cluster.getPoints().isEmpty()){
swtich (emptyStrategy){
case LARGEST_VARIANCE :
newCenter=getPointFromLargestVarianceCluster(clusters);
break;

case LARGEST_POINTS_NUMBER :
newCenter=getPointFromLargestNumberCluster(clusters);
break;

case FARTHEST_POINT :
newCenter=getFarthestPoint(clusters);
break;

default :
throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);

}
clusteringChanged=true;
}else {
newCenter=cluster.getCenter().centroidOf(cluster.getPoints());
if(!newCenter.equals(cluster.getCenter())){
clusteringChanged=true;
}
}
newClusters.add(new Cluster<T>(newCenter));
}
if(!clusteringChanged){
return clusters;
}
assignPointsToClusters(newClusters,points);
clusters=newClusters;
}
return clusters;

========
MM Copying to MM
GPR[SPVS]-1661301068930
GPR[SPVAP]-1661301068930
GPR[EPVAP]-1661301069963
GPR[EPVS]-1661301069963
GPR[ESUN]-1661301069965
GPR[SSUN]-1661301069965
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,175
========
int sum=0;
for(int i=0;i<points.size();i++){
 final T p=points.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301073716
GPR[SPVAP]-1661301073716
GPR[EPVAP]-1661301076204
GPR[EPVS]-1661301076204
========
int sum=0;
for(int i=0;i<points.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301076205
GPR[SPVAP]-1661301076205
GPR[EPVAP]-1661301080260
GPR[SPVATF]-1661301080260
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301082114
GPR[EPVS]-1661301082114
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=points.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301082115
GPR[SPVAP]-1661301082115
GPR[EPVAP]-1661301083162
GPR[EPVS]-1661301083162
========
int sum=0;
for(int i=sum;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301083163
GPR[SPVAP]-1661301083163
GPR[EPVAP]-1661301085108
GPR[SPVATF]-1661301085108
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301086986
GPR[EPVS]-1661301086986
========
int sum=0;
for(int i=0;i<getLength();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301086987
GPR[SPVAP]-1661301086987
GPR[EPVAP]-1661301088016
GPR[EPVS]-1661301088016
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.remove(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301088019
GPR[SPVAP]-1661301088019
GPR[EPVAP]-1661301089942
GPR[SPVATF]-1661301089942
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301091849
GPR[EPVS]-1661301091849
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301091850
GPR[SPVAP]-1661301091851
GPR[EPVAP]-1661301092889
GPR[EPVS]-1661301092889
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.nextInt(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301092891
GPR[SPVAP]-1661301092891
GPR[EPVAP]-1661301093910
GPR[EPVS]-1661301093910
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
subVector[d]=i;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301093912
GPR[SPVAP]-1661301093912
GPR[EPVAP]-1661301094949
GPR[EPVS]-1661301094949
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=binStats.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301094951
GPR[SPVAP]-1661301094951
GPR[EPVAP]-1661301095989
GPR[EPVS]-1661301095989
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
nearest.addValue(dx2[i]);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301095990
GPR[SPVAP]-1661301095990
GPR[EPVAP]-1661301097036
GPR[EPVS]-1661301097036
========
int sum=sum;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301097037
GPR[SPVAP]-1661301097037
GPR[EPVAP]-1661301098084
GPR[EPVS]-1661301098084
========
int sum=0;
sum+=k;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301098085
GPR[SPVAP]-1661301098085
GPR[EPVAP]-1661301099989
GPR[SPVATF]-1661301099989
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301101842
GPR[EPVS]-1661301101842
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=d;
}

========
MM Copying to MM
GPR[SPVS]-1661301101843
GPR[SPVAP]-1661301101843
GPR[EPVAP]-1661301103767
GPR[SPVATF]-1661301103767
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301105626
GPR[EPVS]-1661301105626
========
double sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301105629
GPR[SPVAP]-1661301105629
GPR[EPVAP]-1661301107529
GPR[SPVATF]-1661301107529
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 0
GPR[EPVATF]-1661301109382
GPR[SPVATR]-1661301109383
TESTING : math_57
MM messageFailing tests: 0
GPR[EPVATR]-1661301128653
GPR[EPVS]-1661301128653
GPR[PF]-1661301128653
sourceFile  script/workingdir/SimFix/math/math_57_buggy/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java
location   script/workingdir/SimFix/math/math_57_buggy
MM Out patch at /experiment_home///results/SimFix/Math/57/seed_282/patch/math/57/0/patch_181141_1_ts_1661301128653.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java --label=/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java /tmp/tmpDirMM767987470996844544/KMeansPlusPlusClusterer.java  /experiment_home///results/SimFix/Math/57/seed_282/patch/math/57/0/1_KMeansPlusPlusClusterer.java  --unified=3  > /experiment_home///results/SimFix/Math/57/seed_282/patch/math/57/0/patch_181141_1_ts_1661301128653.diff
MMOut command diff: []
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=i;
}

========
MM Copying to MM
GPR[SPVS]-1661301128666
GPR[SPVAP]-1661301128666
GPR[EPVAP]-1661301130572
GPR[SPVATF]-1661301130573
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301132421
GPR[EPVS]-1661301132421
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=l;
}

========
MM Copying to MM
GPR[SPVS]-1661301132422
GPR[SPVAP]-1661301132422
GPR[EPVAP]-1661301133461
GPR[EPVS]-1661301133461
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(sum==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301133462
GPR[SPVAP]-1661301133462
GPR[EPVAP]-1661301135406
GPR[SPVATF]-1661301135406
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301137325
GPR[EPVS]-1661301137325
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=i;
}

========
MM Copying to MM
GPR[SPVS]-1661301137326
GPR[SPVAP]-1661301137326
GPR[EPVAP]-1661301138371
GPR[EPVS]-1661301138371
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(sum==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301138373
GPR[SPVAP]-1661301138373
GPR[EPVAP]-1661301139417
GPR[EPVS]-1661301139417
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(sum==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=i;
}

========
MM Copying to MM
GPR[SPVS]-1661301139419
GPR[SPVAP]-1661301139419
GPR[EPVAP]-1661301141359
GPR[SPVATF]-1661301141360
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301143218
GPR[EPVS]-1661301143218
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(sum==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=i;
}

========
MM Copying to MM
GPR[SPVS]-1661301143219
GPR[SPVAP]-1661301143219
GPR[EPVAP]-1661301144275
GPR[EPVS]-1661301144275
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
nearest.addPoint(p);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301144277
GPR[SPVAP]-1661301144277
GPR[EPVAP]-1661301145337
GPR[EPVS]-1661301145337
========
int sum=0;
p.computeBinStats();
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301145339
GPR[SPVAP]-1661301145339
GPR[EPVAP]-1661301146377
GPR[EPVS]-1661301146377
========
int sum=0;
dx2=new double[d];
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301146378
GPR[SPVAP]-1661301146378
GPR[EPVAP]-1661301147429
GPR[EPVS]-1661301147429
========
dx2[d-1]=1.0;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301147430
GPR[SPVAP]-1661301147430
GPR[EPVAP]-1661301148482
GPR[EPVS]-1661301148482
========
if(k<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,k);
}
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301148485
GPR[SPVAP]-1661301148485
GPR[EPVAP]-1661301149527
GPR[EPVS]-1661301149527
========
int sum=0;
for(int i=0;i<=pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301149529
GPR[SPVAP]-1661301149529
GPR[EPVAP]-1661301151452
GPR[SPVATF]-1661301151452
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301153335
GPR[EPVS]-1661301153335
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=pos;
}

========
MM Copying to MM
GPR[SPVS]-1661301153343
GPR[SPVAP]-1661301153343
GPR[EPVAP]-1661301154389
GPR[EPVS]-1661301154389
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=ratio;
}

========
MM Copying to MM
GPR[SPVS]-1661301154390
GPR[SPVAP]-1661301154390
GPR[EPVAP]-1661301155425
GPR[EPVS]-1661301155425
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.abs(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301155427
GPR[SPVAP]-1661301155427
GPR[EPVAP]-1661301156459
GPR[EPVS]-1661301156459
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
max+=FastMath.abs(getEntry(i)-dx2[i]);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301156460
GPR[SPVAP]-1661301156461
GPR[EPVAP]-1661301157509
GPR[EPVS]-1661301157509
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sideLength;
}

========
MM Copying to MM
GPR[SPVS]-1661301157512
GPR[SPVAP]-1661301157512
GPR[EPVAP]-1661301158539
GPR[EPVS]-1661301158539
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=f;
}

========
MM Copying to MM
GPR[SPVS]-1661301158540
GPR[SPVAP]-1661301158540
GPR[EPVAP]-1661301159575
GPR[EPVS]-1661301159575
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getEntry(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301159579
GPR[SPVAP]-1661301159579
GPR[EPVAP]-1661301160617
GPR[EPVS]-1661301160617
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
sum+=FastMath.abs(p);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301160618
GPR[SPVAP]-1661301160618
GPR[EPVAP]-1661301161684
GPR[EPVS]-1661301161684
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=scalAbsoluteTolerance;
}

========
MM Copying to MM
GPR[SPVS]-1661301161689
GPR[SPVAP]-1661301161689
GPR[EPVAP]-1661301162739
GPR[EPVS]-1661301162739
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=scalRelativeTolerance;
}

========
MM Copying to MM
GPR[SPVS]-1661301162740
GPR[SPVAP]-1661301162740
GPR[EPVAP]-1661301163769
GPR[EPVS]-1661301163769
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=xn;
}

========
MM Copying to MM
GPR[SPVS]-1661301163771
GPR[SPVAP]-1661301163771
GPR[EPVAP]-1661301164799
GPR[EPVS]-1661301164799
========
if((d+i)>internalArray.length){
expandTo(startIndex+i);
}
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301164801
GPR[SPVAP]-1661301164801
GPR[EPVAP]-1661301165852
GPR[EPVS]-1661301165852
========
sum=i;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301165854
GPR[SPVAP]-1661301165854
GPR[EPVAP]-1661301166888
GPR[EPVS]-1661301166888
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=stepSize;
}

========
MM Copying to MM
GPR[SPVS]-1661301166890
GPR[SPVAP]-1661301166890
GPR[EPVAP]-1661301167936
GPR[EPVS]-1661301167936
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=x;
}

========
MM Copying to MM
GPR[SPVS]-1661301167940
GPR[SPVAP]-1661301167940
GPR[EPVAP]-1661301168985
GPR[EPVS]-1661301168985
========
default :

int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301168987
GPR[SPVAP]-1661301168987
GPR[EPVAP]-1661301169922
GPR[EPVS]-1661301169922
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=c;
}

========
MM Copying to MM
GPR[SPVS]-1661301169923
GPR[SPVAP]-1661301169923
GPR[EPVAP]-1661301170958
GPR[EPVS]-1661301170958
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=e;
}

========
MM Copying to MM
GPR[SPVS]-1661301170963
GPR[SPVAP]-1661301170963
GPR[EPVAP]-1661301171990
GPR[EPVS]-1661301171990
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=j;
}

========
MM Copying to MM
GPR[SPVS]-1661301171991
GPR[SPVAP]-1661301171991
GPR[EPVAP]-1661301173016
GPR[EPVS]-1661301173016
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
sumw+=d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301173018
GPR[SPVAP]-1661301173018
GPR[EPVAP]-1661301174066
GPR[EPVS]-1661301174066
========
int sum=0;
for(int i=sum;i<=pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301174069
GPR[SPVAP]-1661301174069
GPR[EPVAP]-1661301175989
GPR[SPVATF]-1661301175989
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301177874
GPR[EPVS]-1661301177874
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
result.mant[i]=0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301177876
GPR[SPVAP]-1661301177876
GPR[EPVAP]-1661301178894
GPR[EPVS]-1661301178894
========
int sum=0;
for(int i=0;i<getArtificialVariableOffset();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301178896
GPR[SPVAP]-1661301178896
GPR[EPVAP]-1661301179927
GPR[EPVS]-1661301179927
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=mean;
}

========
MM Copying to MM
GPR[SPVS]-1661301179929
GPR[SPVAP]-1661301179929
GPR[EPVAP]-1661301180965
GPR[EPVS]-1661301180965
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=standardDeviation;
}

========
MM Copying to MM
GPR[SPVS]-1661301180966
GPR[SPVAP]-1661301180966
GPR[EPVAP]-1661301182086
GPR[EPVS]-1661301182086
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=random;
}

========
MM Copying to MM
GPR[SPVS]-1661301182089
GPR[SPVAP]-1661301182089
GPR[EPVAP]-1661301183137
GPR[EPVS]-1661301183137
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
random=d>>8;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301183138
GPR[SPVAP]-1661301183138
GPR[EPVAP]-1661301184215
GPR[EPVS]-1661301184215
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=xJ;
}

========
MM Copying to MM
GPR[SPVS]-1661301184217
GPR[SPVAP]-1661301184217
GPR[EPVAP]-1661301185256
GPR[EPVS]-1661301185256
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.valueOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301185258
GPR[SPVAP]-1661301185258
GPR[EPVAP]-1661301186277
GPR[EPVS]-1661301186277
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
if(Integer.toHexString(nearest.intValue()+128).length()==1){
hex="0"+Integer.toHexString(nearest.intValue()+128);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301186278
GPR[SPVAP]-1661301186278
GPR[EPVAP]-1661301187316
GPR[EPVS]-1661301187316
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
if(Integer.toHexString(nearest.intValue()+128).length()==1){
hex="0"+Integer.toHexString(nearest.intValue()+128);
}
 final T p=pointSet.valueOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301187318
GPR[SPVAP]-1661301187318
GPR[EPVAP]-1661301188347
GPR[EPVS]-1661301188347
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dirJ;
}

========
MM Copying to MM
GPR[SPVS]-1661301188351
GPR[SPVAP]-1661301188351
GPR[EPVAP]-1661301189392
GPR[EPVS]-1661301189392
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bpCol;
}

========
MM Copying to MM
GPR[SPVS]-1661301189395
GPR[SPVAP]-1661301189395
GPR[EPVAP]-1661301190421
GPR[EPVS]-1661301190421
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=gamma;
}

========
MM Copying to MM
GPR[SPVS]-1661301190426
GPR[SPVAP]-1661301190426
GPR[EPVAP]-1661301191448
GPR[EPVS]-1661301191448
========
int sum=0;
for(int i=0;i<getHeight();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301191450
GPR[SPVAP]-1661301191450
GPR[EPVAP]-1661301192490
GPR[EPVS]-1661301192490
========
int sum=0;
for(int i=sum;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bpCol;
}

========
MM Copying to MM
GPR[SPVS]-1661301192492
GPR[SPVAP]-1661301192492
GPR[EPVAP]-1661301193523
GPR[EPVS]-1661301193523
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getColumnVector(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301193526
GPR[SPVAP]-1661301193526
GPR[EPVAP]-1661301194572
GPR[EPVS]-1661301194572
========
int sum=0;
this.p=main.clone();
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301194575
GPR[SPVAP]-1661301194575
GPR[EPVAP]-1661301195612
GPR[EPVS]-1661301195612
========
int sum=0;
this.nearest=secondary.clone();
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301195613
GPR[SPVAP]-1661301195613
GPR[EPVAP]-1661301196664
GPR[EPVS]-1661301196664
========
findEigenVectors(new double[d][size]);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301196665
GPR[SPVAP]-1661301196665
GPR[EPVAP]-1661301197713
GPR[EPVS]-1661301197713
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301197715
GPR[SPVAP]-1661301197715
GPR[EPVAP]-1661301198757
GPR[EPVS]-1661301198757
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=oneMinusThetaH;
}

========
MM Copying to MM
GPR[SPVS]-1661301198758
GPR[SPVAP]-1661301198758
GPR[EPVAP]-1661301199821
GPR[EPVS]-1661301199821
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
if(d>getAbsoluteThreshold()){
return false;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301199822
GPR[SPVAP]-1661301199822
GPR[EPVAP]-1661301200844
GPR[EPVS]-1661301200844
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=delta;
}

========
MM Copying to MM
GPR[SPVS]-1661301200846
GPR[SPVAP]-1661301200846
GPR[EPVAP]-1661301201920
GPR[EPVS]-1661301201920
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=ypk;
}

========
MM Copying to MM
GPR[SPVS]-1661301201922
GPR[SPVAP]-1661301201922
GPR[EPVAP]-1661301202968
GPR[EPVS]-1661301202968
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
if(d>getAbsoluteThreshold()){
return false;
}
 final T p=pointSet.abs(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301202971
GPR[SPVAP]-1661301202971
GPR[EPVAP]-1661301204024
GPR[EPVS]-1661301204025
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final int d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301204026
GPR[SPVAP]-1661301204026
GPR[EPVAP]-1661301205048
GPR[EPVS]-1661301205048
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=tmp;
}

========
MM Copying to MM
GPR[SPVS]-1661301205050
GPR[SPVAP]-1661301205050
GPR[EPVAP]-1661301206085
GPR[EPVS]-1661301206085
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
dividend[i]=mant[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301206086
GPR[SPVAP]-1661301206086
GPR[EPVAP]-1661301207139
GPR[EPVS]-1661301207139
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
remainder[i]=0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301207140
GPR[SPVAP]-1661301207140
GPR[EPVAP]-1661301208157
GPR[EPVS]-1661301208157
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
dividend[i]=mant[i];
remainder[i]=0;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301208158
GPR[SPVAP]-1661301208158
GPR[EPVAP]-1661301209185
GPR[EPVS]-1661301209185
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=randInt;
}

========
MM Copying to MM
GPR[SPVS]-1661301209190
GPR[SPVAP]-1661301209190
GPR[EPVAP]-1661301210218
GPR[EPVS]-1661301210218
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
if(k==bytes.length){
return ;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301210220
GPR[SPVAP]-1661301210220
GPR[EPVAP]-1661301211302
GPR[EPVS]-1661301211302
========
k-=sum;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301211305
GPR[SPVAP]-1661301211305
GPR[EPVAP]-1661301212502
GPR[EPVS]-1661301212502
========
k+=sum;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301212510
GPR[SPVAP]-1661301212510
GPR[EPVAP]-1661301213983
GPR[EPVS]-1661301213983
========
if(d.length<sum+d){
throw new NumberIsTooLargeException(pos+size,d.length,true);
}
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301213985
GPR[SPVAP]-1661301213985
GPR[EPVAP]-1661301215030
GPR[EPVS]-1661301215030
========
dx2=new double[d];
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301215031
GPR[SPVAP]-1661301215031
GPR[EPVAP]-1661301216057
GPR[EPVS]-1661301216057
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=factor;
}

========
MM Copying to MM
GPR[SPVS]-1661301216060
GPR[SPVAP]-1661301216060
GPR[EPVAP]-1661301217117
GPR[EPVS]-1661301217117
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
++i;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301217118
GPR[SPVAP]-1661301217118
GPR[EPVAP]-1661301219060
GPR[SPVATF]-1661301219060
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301220934
GPR[EPVS]-1661301220934
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=(d==0)?null:pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301220936
GPR[SPVAP]-1661301220936
GPR[EPVAP]-1661301221982
GPR[EPVS]-1661301221982
========
int sum=0;
for(int i=0;i<getSize();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301221984
GPR[SPVAP]-1661301221984
GPR[EPVAP]-1661301223019
GPR[EPVS]-1661301223019
========
int sum=-(d+1);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301223022
GPR[SPVAP]-1661301223022
GPR[EPVAP]-1661301224064
GPR[EPVS]-1661301224064
========
int sum=RADIX;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301224066
GPR[SPVAP]-1661301224066
GPR[EPVAP]-1661301225106
GPR[EPVS]-1661301225106
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sqrt(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301225108
GPR[SPVAP]-1661301225108
GPR[EPVAP]-1661301226144
GPR[EPVS]-1661301226144
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
yEnd[i]=y0[i]+d*f[0][i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301226146
GPR[SPVAP]-1661301226146
GPR[EPVAP]-1661301227231
GPR[EPVS]-1661301227231
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=residual;
}

========
MM Copying to MM
GPR[SPVS]-1661301227232
GPR[SPVAP]-1661301227232
GPR[EPVAP]-1661301228261
GPR[EPVS]-1661301228261
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
cost+=residualsWeights[i]*d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301228262
GPR[SPVAP]-1661301228262
GPR[EPVAP]-1661301229320
GPR[EPVS]-1661301229320
========
int sum=(i<mant.length)?0:0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301229322
GPR[SPVAP]-1661301229322
GPR[EPVAP]-1661301230356
GPR[EPVS]-1661301230356
========
int sum=(i<mant.length)?divisor.mant[i]:0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301230358
GPR[SPVAP]-1661301230358
GPR[EPVAP]-1661301231392
GPR[EPVS]-1661301231392
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
lJ[i]=0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301231394
GPR[SPVAP]-1661301231394
GPR[EPVAP]-1661301232429
GPR[EPVS]-1661301232429
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
d[i]=y[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301232432
GPR[SPVAP]-1661301232432
GPR[EPVAP]-1661301233465
GPR[EPVS]-1661301233465
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
x2[i]=2*x[i]-x1[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301233468
GPR[SPVAP]-1661301233468
GPR[EPVAP]-1661301234506
GPR[EPVS]-1661301234506
========
int sum=0;
for(int i=0;i<=pointSet.size();i++){
 final T p=pointSet.abs(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301234509
GPR[SPVAP]-1661301234510
GPR[EPVAP]-1661301235547
GPR[EPVS]-1661301235547
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sqrt(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.sqrt(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301235551
GPR[SPVAP]-1661301235551
GPR[EPVAP]-1661301236620
GPR[EPVS]-1661301236620
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.sqrt(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301236621
GPR[SPVAP]-1661301236621
GPR[EPVAP]-1661301237673
GPR[EPVS]-1661301237673
========
if(i<0){
i=-i-2;
}
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301237676
GPR[SPVAP]-1661301237676
GPR[EPVAP]-1661301238704
GPR[EPVS]-1661301238704
========
if(i>=polynomials.length){
i--;
}
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301238705
GPR[SPVAP]-1661301238705
GPR[EPVAP]-1661301239745
GPR[EPVS]-1661301239745
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.copyOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301239747
GPR[SPVAP]-1661301239747
GPR[EPVAP]-1661301240785
GPR[EPVS]-1661301240785
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
x=result[0];
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301240786
GPR[SPVAP]-1661301240786
GPR[EPVAP]-1661301241827
GPR[EPVS]-1661301241827
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
sumImpl[i]=new Sum();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301241828
GPR[SPVAP]-1661301241828
GPR[EPVAP]-1661301242850
GPR[EPVS]-1661301242850
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
minImpl[i]=new Min();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301242852
GPR[SPVAP]-1661301242852
GPR[EPVAP]-1661301243875
GPR[EPVS]-1661301243875
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
maxImpl[i]=new Max();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301243876
GPR[SPVAP]-1661301243876
GPR[EPVAP]-1661301244917
GPR[EPVS]-1661301244917
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
sumLogImpl[i]=new SumOfLogs();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301244919
GPR[SPVAP]-1661301244919
GPR[EPVAP]-1661301245975
GPR[EPVS]-1661301245975
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
geoMeanImpl[i]=new GeometricMean();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301245977
GPR[SPVAP]-1661301245977
GPR[EPVAP]-1661301247021
GPR[EPVS]-1661301247021
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
meanImpl[i]=new Mean();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301247022
GPR[SPVAP]-1661301247022
GPR[EPVAP]-1661301248057
GPR[EPVS]-1661301248057
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
sumImpl[i]=new Sum();
minImpl[i]=new Min();
maxImpl[i]=new Max();
sumLogImpl[i]=new SumOfLogs();
geoMeanImpl[i]=new GeometricMean();
meanImpl[i]=new Mean();

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301248059
GPR[SPVAP]-1661301248059
GPR[EPVAP]-1661301249091
GPR[EPVS]-1661301249091
========
d=size.length;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301249095
GPR[SPVAP]-1661301249095
GPR[EPVAP]-1661301250137
GPR[EPVS]-1661301250137
========
k=d-1;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301250138
GPR[SPVAP]-1661301250138
GPR[EPVAP]-1661301251165
GPR[EPVS]-1661301251165
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=diff;
}

========
MM Copying to MM
GPR[SPVS]-1661301251169
GPR[SPVAP]-1661301251169
GPR[EPVAP]-1661301252212
GPR[EPVS]-1661301252212
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
lu[nonZero][i]=lu[col][i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301252214
GPR[SPVAP]-1661301252214
GPR[EPVAP]-1661301253257
GPR[EPVS]-1661301253257
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
lu[col][i]=firstPoint;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301253259
GPR[SPVAP]-1661301253259
GPR[EPVAP]-1661301254332
GPR[EPVS]-1661301254332
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
lu[nonZero][i]=lu[col][i];
lu[col][i]=firstPoint;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301254333
GPR[SPVAP]-1661301254333
GPR[EPVAP]-1661301255397
GPR[EPVS]-1661301255397
========
int sum=0;
MatrixUtils.checkRowIndex(this,sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301255399
GPR[SPVAP]-1661301255399
GPR[EPVAP]-1661301256456
GPR[EPVS]-1661301256456
========
int sum=0;
MatrixUtils.checkColumnIndex(this,sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301256457
GPR[SPVAP]-1661301256457
GPR[EPVAP]-1661301257500
GPR[EPVS]-1661301257500
========
int sum=0;
MatrixUtils.checkRowIndex(this,sum);
MatrixUtils.checkColumnIndex(this,sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301257502
GPR[SPVAP]-1661301257502
GPR[EPVAP]-1661301258536
GPR[EPVS]-1661301258536
========
long sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301258537
GPR[SPVAP]-1661301258537
GPR[EPVAP]-1661301260469
GPR[SPVATF]-1661301260469
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301262352
GPR[EPVS]-1661301262352
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
val=Double.parseDouble(p);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301262355
GPR[SPVAP]-1661301262355
GPR[EPVAP]-1661301263417
GPR[EPVS]-1661301263417
========
checkVectorDimensions(v.length);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301263421
GPR[SPVAP]-1661301263421
GPR[EPVAP]-1661301264462
GPR[EPVS]-1661301264462
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=coeffDot1;
}

========
MM Copying to MM
GPR[SPVS]-1661301264464
GPR[SPVAP]-1661301264464
GPR[EPVAP]-1661301265511
GPR[EPVS]-1661301265511
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot1;
}

========
MM Copying to MM
GPR[SPVS]-1661301265512
GPR[SPVAP]-1661301265512
GPR[EPVAP]-1661301266547
GPR[EPVS]-1661301266547
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=coeffDot2;
}

========
MM Copying to MM
GPR[SPVS]-1661301266548
GPR[SPVAP]-1661301266548
GPR[EPVAP]-1661301267591
GPR[EPVS]-1661301267591
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot2;
}

========
MM Copying to MM
GPR[SPVS]-1661301267592
GPR[SPVAP]-1661301267592
GPR[EPVAP]-1661301268629
GPR[EPVS]-1661301268629
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=v;
}

========
MM Copying to MM
GPR[SPVS]-1661301268631
GPR[SPVAP]-1661301268631
GPR[EPVAP]-1661301269654
GPR[EPVS]-1661301269654
========
checkVectorDimensions(v.length);
double sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301269655
GPR[SPVAP]-1661301269655
GPR[EPVAP]-1661301270685
GPR[EPVS]-1661301270685
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.cos(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301270689
GPR[SPVAP]-1661301270689
GPR[EPVAP]-1661301271725
GPR[EPVS]-1661301271725
========
checkVectorDimensions(p);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301271728
GPR[SPVAP]-1661301271728
GPR[EPVAP]-1661301272774
GPR[EPVS]-1661301272774
========
double sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getEntry(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301272775
GPR[SPVAP]-1661301272775
GPR[EPVAP]-1661301273808
GPR[EPVS]-1661301273808
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sin;
}

========
MM Copying to MM
GPR[SPVS]-1661301273809
GPR[SPVAP]-1661301273809
GPR[EPVAP]-1661301274845
GPR[EPVS]-1661301274845
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=rik;
}

========
MM Copying to MM
GPR[SPVS]-1661301274846
GPR[SPVAP]-1661301274846
GPR[EPVAP]-1661301275880
GPR[EPVS]-1661301275880
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=cos;
}

========
MM Copying to MM
GPR[SPVS]-1661301275881
GPR[SPVAP]-1661301275881
GPR[EPVAP]-1661301276919
GPR[EPVS]-1661301276919
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
after[i]+=previous[i]+scaled[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301276922
GPR[SPVAP]-1661301276922
GPR[EPVAP]-1661301277978
GPR[EPVS]-1661301277978
========
checkVectorDimensions(p);
double sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301277980
GPR[SPVAP]-1661301277980
GPR[EPVAP]-1661301279007
GPR[EPVS]-1661301279007
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sin(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301279009
GPR[SPVAP]-1661301279009
GPR[EPVAP]-1661301280036
GPR[EPVS]-1661301280036
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=a;
}

========
MM Copying to MM
GPR[SPVS]-1661301280038
GPR[SPVAP]-1661301280038
GPR[EPVAP]-1661301281076
GPR[EPVS]-1661301281076
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=b;
}

========
MM Copying to MM
GPR[SPVS]-1661301281077
GPR[SPVAP]-1661301281077
GPR[EPVAP]-1661301282111
GPR[EPVS]-1661301282111
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=p;
}

========
MM Copying to MM
GPR[SPVS]-1661301282115
GPR[SPVAP]-1661301282115
GPR[EPVAP]-1661301283178
GPR[EPVS]-1661301283178
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=t;
}

========
MM Copying to MM
GPR[SPVS]-1661301283179
GPR[SPVAP]-1661301283179
GPR[EPVAP]-1661301284222
GPR[EPVS]-1661301284222
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=q;
}

========
MM Copying to MM
GPR[SPVS]-1661301284223
GPR[SPVAP]-1661301284223
GPR[EPVAP]-1661301285270
GPR[EPVS]-1661301285270
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301285272
GPR[SPVAP]-1661301285272
GPR[EPVAP]-1661301286353
GPR[EPVS]-1661301286353
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301286354
GPR[SPVAP]-1661301286354
GPR[EPVAP]-1661301287393
GPR[EPVS]-1661301287393
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301287394
GPR[SPVAP]-1661301287394
GPR[EPVAP]-1661301288436
GPR[EPVS]-1661301288436
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
if(d==(k/2)*4){
sp=i;
break;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301288439
GPR[SPVAP]-1661301288439
GPR[EPVAP]-1661301289475
GPR[EPVS]-1661301289475
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(d==(k/2)*4){
sp=i;
break;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301289476
GPR[SPVAP]-1661301289476
GPR[EPVAP]-1661301290524
GPR[EPVS]-1661301290524
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301290526
GPR[SPVAP]-1661301290526
GPR[EPVAP]-1661301291555
GPR[EPVS]-1661301291555
========
int sum=0;
for(int i=sum;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=d;
}

========
MM Copying to MM
GPR[SPVS]-1661301291557
GPR[SPVAP]-1661301291557
GPR[EPVAP]-1661301293446
GPR[SPVATF]-1661301293446
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301295306
GPR[EPVS]-1661301295306
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=wr;
}

========
MM Copying to MM
GPR[SPVS]-1661301295308
GPR[SPVAP]-1661301295308
GPR[EPVAP]-1661301296342
GPR[EPVS]-1661301296342
========
int sum=0;
i++;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301296344
GPR[SPVAP]-1661301296344
GPR[EPVAP]-1661301297384
GPR[EPVS]-1661301297384
========
int sum=0;
sum++;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301297386
GPR[SPVAP]-1661301297386
GPR[EPVAP]-1661301299285
GPR[SPVATF]-1661301299285
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301301135
GPR[EPVS]-1661301301135
========
if(sum>=seed.length){
j=0;
}
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301301136
GPR[SPVAP]-1661301301136
GPR[EPVAP]-1661301302199
GPR[EPVS]-1661301302199
========
long sum=0;
sum++;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301302200
GPR[SPVAP]-1661301302200
GPR[EPVAP]-1661301304134
GPR[SPVATF]-1661301304134
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301306026
GPR[EPVS]-1661301306026
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sin(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=a;
}

========
MM Copying to MM
GPR[SPVS]-1661301306029
GPR[SPVAP]-1661301306029
GPR[EPVAP]-1661301307067
GPR[EPVS]-1661301307067
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sin(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=b;
}

========
MM Copying to MM
GPR[SPVS]-1661301307068
GPR[SPVAP]-1661301307068
GPR[EPVAP]-1661301308120
GPR[EPVS]-1661301308120
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=coeffDot23;
}

========
MM Copying to MM
GPR[SPVS]-1661301308122
GPR[SPVAP]-1661301308122
GPR[EPVAP]-1661301309179
GPR[EPVS]-1661301309179
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot23;
}

========
MM Copying to MM
GPR[SPVS]-1661301309180
GPR[SPVAP]-1661301309180
GPR[EPVAP]-1661301310218
GPR[EPVS]-1661301310218
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=coeffDot4;
}

========
MM Copying to MM
GPR[SPVS]-1661301310219
GPR[SPVAP]-1661301310219
GPR[EPVAP]-1661301311263
GPR[EPVS]-1661301311263
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot4;
}

========
MM Copying to MM
GPR[SPVS]-1661301311264
GPR[SPVAP]-1661301311264
GPR[EPVAP]-1661301312313
GPR[EPVS]-1661301312313
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=tc;
}

========
MM Copying to MM
GPR[SPVS]-1661301312316
GPR[SPVAP]-1661301312316
GPR[EPVAP]-1661301313347
GPR[EPVS]-1661301313347
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=w;
}

========
MM Copying to MM
GPR[SPVS]-1661301313348
GPR[SPVAP]-1661301313348
GPR[EPVAP]-1661301314383
GPR[EPVS]-1661301314383
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot2;
}

========
MM Copying to MM
GPR[SPVS]-1661301314386
GPR[SPVAP]-1661301314386
GPR[EPVAP]-1661301315440
GPR[EPVS]-1661301315440
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot3;
}

========
MM Copying to MM
GPR[SPVS]-1661301315442
GPR[SPVAP]-1661301315442
GPR[EPVAP]-1661301316481
GPR[EPVS]-1661301316481
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot4;
}

========
MM Copying to MM
GPR[SPVS]-1661301316482
GPR[SPVAP]-1661301316482
GPR[EPVAP]-1661301317513
GPR[EPVS]-1661301317513
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=coeffDot3;
}

========
MM Copying to MM
GPR[SPVS]-1661301317515
GPR[SPVAP]-1661301317516
GPR[EPVAP]-1661301318544
GPR[EPVS]-1661301318544
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot3;
}

========
MM Copying to MM
GPR[SPVS]-1661301318545
GPR[SPVAP]-1661301318545
GPR[EPVAP]-1661301319572
GPR[EPVS]-1661301319572
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.next(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301319575
GPR[SPVAP]-1661301319575
GPR[EPVAP]-1661301320621
GPR[EPVS]-1661301320621
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
bytes[i]=(byte)(random&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301320622
GPR[SPVAP]-1661301320622
GPR[EPVAP]-1661301321684
GPR[EPVS]-1661301321684
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
bytes[i+1]=(byte)((random>>8)&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301321685
GPR[SPVAP]-1661301321685
GPR[EPVAP]-1661301322725
GPR[EPVS]-1661301322725
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
bytes[i+2]=(byte)((random>>16)&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301322726
GPR[SPVAP]-1661301322726
GPR[EPVAP]-1661301323753
GPR[EPVS]-1661301323753
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
bytes[i+3]=(byte)((random>>24)&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301323754
GPR[SPVAP]-1661301323754
GPR[EPVAP]-1661301324823
GPR[EPVS]-1661301324823
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
i+=4;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301324824
GPR[SPVAP]-1661301324825
GPR[EPVAP]-1661301326734
GPR[SPVATF]-1661301326734
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301328610
GPR[EPVS]-1661301328610
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
bytes[i]=(byte)(random&0xff);
bytes[i+1]=(byte)((random>>8)&0xff);
bytes[i+2]=(byte)((random>>16)&0xff);
bytes[i+3]=(byte)((random>>24)&0xff);
i+=4;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301328611
GPR[SPVAP]-1661301328611
GPR[EPVAP]-1661301329657
GPR[EPVS]-1661301329657
========
int sum=0;
checkRowIndex(sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301329659
GPR[SPVAP]-1661301329659
GPR[EPVAP]-1661301330685
GPR[EPVS]-1661301330685
========
int sum=0;
checkColumnIndex(sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301330686
GPR[SPVAP]-1661301330686
GPR[EPVAP]-1661301331720
GPR[EPVS]-1661301331720
========
int sum=0;
checkRowIndex(sum);
checkColumnIndex(sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301331722
GPR[SPVAP]-1661301331722
GPR[EPVAP]-1661301332757
GPR[EPVS]-1661301332757
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bDot0;
}

========
MM Copying to MM
GPR[SPVS]-1661301332760
GPR[SPVAP]-1661301332760
GPR[EPVAP]-1661301333801
GPR[EPVS]-1661301333801
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot0;
}

========
MM Copying to MM
GPR[SPVS]-1661301333802
GPR[SPVAP]-1661301333802
GPR[EPVAP]-1661301334827
GPR[EPVS]-1661301334827
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bDot2;
}

========
MM Copying to MM
GPR[SPVS]-1661301334829
GPR[SPVAP]-1661301334829
GPR[EPVAP]-1661301335892
GPR[EPVS]-1661301335892
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bDot3;
}

========
MM Copying to MM
GPR[SPVS]-1661301335893
GPR[SPVAP]-1661301335893
GPR[EPVAP]-1661301336939
GPR[EPVS]-1661301336939
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bDot4;
}

========
MM Copying to MM
GPR[SPVS]-1661301336940
GPR[SPVAP]-1661301336940
GPR[EPVAP]-1661301337967
GPR[EPVS]-1661301337967
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bDot5;
}

========
MM Copying to MM
GPR[SPVS]-1661301337968
GPR[SPVAP]-1661301337968
GPR[EPVAP]-1661301339025
GPR[EPVS]-1661301339025
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot5;
}

========
MM Copying to MM
GPR[SPVS]-1661301339026
GPR[SPVAP]-1661301339026
GPR[EPVAP]-1661301340057
GPR[EPVS]-1661301340057
========
new ArrayList<Double>(nearest).set(i,GeneticAlgorithm.getRandomGenerator().nextDouble());
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301340059
GPR[SPVAP]-1661301340059
GPR[EPVAP]-1661301341088
GPR[EPVS]-1661301341088
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
m4=0.0;
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301341092
GPR[SPVAP]-1661301341092
GPR[EPVAP]-1661301342113
GPR[EPVS]-1661301342113
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
m3=0.0;
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301342114
GPR[SPVAP]-1661301342114
GPR[EPVAP]-1661301343197
GPR[EPVS]-1661301343197
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
m1=0.0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301343198
GPR[SPVAP]-1661301343198
GPR[EPVAP]-1661301344252
GPR[EPVS]-1661301344252
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
m4=0.0;
m3=0.0;
m1=0.0;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301344254
GPR[SPVAP]-1661301344254
GPR[EPVAP]-1661301345291
GPR[EPVS]-1661301345291
========
int sum=source.keys.length;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301345294
GPR[SPVAP]-1661301345294
GPR[EPVAP]-1661301346337
GPR[EPVS]-1661301346337
========
System.arraycopy(source.keys,0,keys,0,source.keys.length);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301346338
GPR[SPVAP]-1661301346338
GPR[EPVAP]-1661301347389
GPR[EPVS]-1661301347389
========
dx2=new double[source.keys.length];
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301347390
GPR[SPVAP]-1661301347390
GPR[EPVAP]-1661301348419
GPR[EPVS]-1661301348419
========
System.arraycopy(source.values,0,values,0,source.keys.length);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301348420
GPR[SPVAP]-1661301348420
GPR[EPVAP]-1661301349456
GPR[EPVS]-1661301349456
========
System.arraycopy(source.states,0,states,0,source.keys.length);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301349457
GPR[SPVAP]-1661301349457
GPR[EPVAP]-1661301350500
GPR[EPVS]-1661301350500
========
sum=source.size;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301350501
GPR[SPVAP]-1661301350501
GPR[EPVAP]-1661301351561
GPR[EPVS]-1661301351561
========
k=source.mask;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301351562
GPR[SPVAP]-1661301351562
GPR[EPVAP]-1661301352603
GPR[EPVS]-1661301352603
========
k=source.count;
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301352604
GPR[SPVAP]-1661301352604
GPR[EPVAP]-1661301353654
GPR[EPVS]-1661301353654
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
q+=4;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301353656
GPR[SPVAP]-1661301353656
GPR[EPVAP]-1661301354692
GPR[EPVS]-1661301354692
========
if(d.length<d+i){
throw new NumberIsTooLargeException(pos+size,d.length,true);
}
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301354694
GPR[SPVAP]-1661301354694
GPR[EPVAP]-1661301355812
GPR[EPVS]-1661301355812
========
p=buildArray(i);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301355813
GPR[SPVAP]-1661301355813
GPR[EPVAP]-1661301356851
GPR[EPVS]-1661301356851
========
p=new double[i];
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301356854
GPR[SPVAP]-1661301356854
GPR[EPVAP]-1661301357891
GPR[EPVS]-1661301357891
========
System.arraycopy(dx2,d,p,0,i);
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301357892
GPR[SPVAP]-1661301357892
GPR[EPVAP]-1661301358925
GPR[EPVS]-1661301358925
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(i>=mBlock.length){
mBlock=matrix.blocks[++mBlockIndex];
mIndex=0;
}
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301358929
GPR[SPVAP]-1661301358929
GPR[EPVAP]-1661301359952
GPR[EPVS]-1661301359952
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=g;
}

========
MM Copying to MM
GPR[SPVS]-1661301359954
GPR[SPVAP]-1661301359954
GPR[EPVAP]-1661301361021
GPR[EPVS]-1661301361021
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
g=2.0*(x[i+1]-x[i-1])-h[i-1]*mu[i-1];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301361022
GPR[SPVAP]-1661301361022
GPR[EPVAP]-1661301362056
GPR[EPVS]-1661301362056
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
z[i]=(3.0*(y[i+1]*h[i-1]-y[i]*(x[i+1]-x[i-1])+y[i-1]*h[i])/(h[i-1]*h[i])-h[i-1]*z[i-1])/d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301362057
GPR[SPVAP]-1661301362057
GPR[EPVAP]-1661301363106
GPR[EPVS]-1661301363106
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
g=2.0*(x[i+1]-x[i-1])-h[i-1]*mu[i-1];
z[i]=(3.0*(y[i+1]*h[i-1]-y[i]*(x[i+1]-x[i-1])+y[i-1]*h[i])/(h[i-1]*h[i])-h[i-1]*z[i-1])/d;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301363107
GPR[SPVAP]-1661301363107
GPR[EPVAP]-1661301364164
GPR[EPVS]-1661301364164
========
int sum=0;
for(int i=sum;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=xJ;
}

========
MM Copying to MM
GPR[SPVS]-1661301364166
GPR[SPVAP]-1661301364166
GPR[EPVAP]-1661301365194
GPR[EPVS]-1661301365194
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot1;
}

========
MM Copying to MM
GPR[SPVS]-1661301365196
GPR[SPVAP]-1661301365196
GPR[EPVAP]-1661301366218
GPR[EPVS]-1661301366218
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot5;
}

========
MM Copying to MM
GPR[SPVS]-1661301366219
GPR[SPVAP]-1661301366219
GPR[EPVAP]-1661301367249
GPR[EPVS]-1661301367249
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot6;
}

========
MM Copying to MM
GPR[SPVS]-1661301367251
GPR[SPVAP]-1661301367251
GPR[EPVAP]-1661301368287
GPR[EPVS]-1661301368287
========
int sum=0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=k;
}

========
MM Copying to MM
GPR[SPVS]-1661301368294
GPR[SPVAP]-1661301368294
GPR[EPVAP]-1661301370210
GPR[SPVATF]-1661301370210
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301372048
GPR[EPVS]-1661301372048
GPR[ESUN]-1661301372049
GPR[SSUN]-1661301372049
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,176
========
for(int i=0;i<points.size();i++){
 final T p=points.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301375727
GPR[SPVAP]-1661301375727
GPR[EPVAP]-1661301378229
GPR[EPVS]-1661301378229
========
for(int i=0;i<points.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301378230
GPR[SPVAP]-1661301378230
GPR[EPVAP]-1661301382348
GPR[SPVATF]-1661301382348
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301384203
GPR[EPVS]-1661301384203
========
for(int i=0;i<pointSet.size();i++){
 final T p=points.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301384204
GPR[SPVAP]-1661301384204
GPR[EPVAP]-1661301385261
GPR[EPVS]-1661301385261
========
for(int i=sum;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301385262
GPR[SPVAP]-1661301385262
GPR[EPVAP]-1661301387176
GPR[SPVATF]-1661301387176
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301389034
GPR[EPVS]-1661301389034
========
for(int i=0;i<getLength();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301389035
GPR[SPVAP]-1661301389035
GPR[EPVAP]-1661301390083
GPR[EPVS]-1661301390083
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.remove(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301390085
GPR[SPVAP]-1661301390085
GPR[EPVAP]-1661301391999
GPR[SPVATF]-1661301391999
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301393868
GPR[EPVS]-1661301393868
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301393870
GPR[SPVAP]-1661301393870
GPR[EPVAP]-1661301394896
GPR[EPVS]-1661301394896
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.nextInt(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301394898
GPR[SPVAP]-1661301394898
GPR[EPVAP]-1661301395953
GPR[EPVS]-1661301395954
========
for(int i=0;i<pointSet.size();i++){
subVector[d]=i;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301395955
GPR[SPVAP]-1661301395955
GPR[EPVAP]-1661301396981
GPR[EPVS]-1661301396981
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=d;
}

========
MM Copying to MM
GPR[SPVS]-1661301396983
GPR[SPVAP]-1661301396983
GPR[EPVAP]-1661301398881
GPR[SPVATF]-1661301398881
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301400767
GPR[EPVS]-1661301400767
========
for(int i=0;i<pointSet.size();i++){
 final T p=binStats.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301400769
GPR[SPVAP]-1661301400769
GPR[EPVAP]-1661301401797
GPR[EPVS]-1661301401797
========
for(int i=0;i<pointSet.size();i++){
nearest.addValue(dx2[i]);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301401799
GPR[SPVAP]-1661301401799
GPR[EPVAP]-1661301402868
GPR[EPVS]-1661301402868
========
sum+=k;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301402870
GPR[SPVAP]-1661301402870
GPR[EPVAP]-1661301404784
GPR[SPVATF]-1661301404784
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301406659
GPR[EPVS]-1661301406659
========
for(int i=0;i<pointSet.size();i++){
nearest.addPoint(p);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301406662
GPR[SPVAP]-1661301406662
GPR[EPVAP]-1661301407693
GPR[EPVS]-1661301407693
========
nearest.computeBinStats();
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301407694
GPR[SPVAP]-1661301407694
GPR[EPVAP]-1661301408723
GPR[EPVS]-1661301408723
========
dx2=new double[d];
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301408725
GPR[SPVAP]-1661301408725
GPR[EPVAP]-1661301409769
GPR[EPVS]-1661301409769
========
dx2[d-1]=1.0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301409770
GPR[SPVAP]-1661301409770
GPR[EPVAP]-1661301410805
GPR[EPVS]-1661301410805
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=i;
}

========
MM Copying to MM
GPR[SPVS]-1661301410806
GPR[SPVAP]-1661301410806
GPR[EPVAP]-1661301412717
GPR[SPVATF]-1661301412717
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301414574
GPR[EPVS]-1661301414574
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=l;
}

========
MM Copying to MM
GPR[SPVS]-1661301414575
GPR[SPVAP]-1661301414575
GPR[EPVAP]-1661301415620
GPR[EPVS]-1661301415620
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(sum==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301415621
GPR[SPVAP]-1661301415621
GPR[EPVAP]-1661301417524
GPR[SPVATF]-1661301417524
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301419374
GPR[EPVS]-1661301419374
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=i;
}

========
MM Copying to MM
GPR[SPVS]-1661301419375
GPR[SPVAP]-1661301419375
GPR[EPVAP]-1661301420434
GPR[EPVS]-1661301420434
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(sum==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301420435
GPR[SPVAP]-1661301420435
GPR[EPVAP]-1661301421470
GPR[EPVS]-1661301421470
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(sum==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=i;
}

========
MM Copying to MM
GPR[SPVS]-1661301421471
GPR[SPVAP]-1661301421471
GPR[EPVAP]-1661301423373
GPR[SPVATF]-1661301423373
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301425234
GPR[EPVS]-1661301425234
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(sum==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=i;
}

========
MM Copying to MM
GPR[SPVS]-1661301425235
GPR[SPVAP]-1661301425235
GPR[EPVAP]-1661301426285
GPR[EPVS]-1661301426285
========
for(int i=0;i<=pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301426288
GPR[SPVAP]-1661301426288
GPR[EPVAP]-1661301428195
GPR[SPVATF]-1661301428195
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301430079
GPR[EPVS]-1661301430079
========
for(int i=0;j<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301430083
GPR[SPVAP]-1661301430083
GPR[EPVAP]-1661301431102
GPR[EPVS]-1661301431102
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=ratio;
}

========
MM Copying to MM
GPR[SPVS]-1661301431105
GPR[SPVAP]-1661301431105
GPR[EPVAP]-1661301432139
GPR[EPVS]-1661301432139
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.abs(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301432141
GPR[SPVAP]-1661301432141
GPR[EPVAP]-1661301433169
GPR[EPVS]-1661301433169
========
for(int i=0;i<pointSet.size();i++){
max+=FastMath.abs(getEntry(i)-dx2[i]);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301433170
GPR[SPVAP]-1661301433170
GPR[EPVAP]-1661301434203
GPR[EPVS]-1661301434203
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=pos;
}

========
MM Copying to MM
GPR[SPVS]-1661301434206
GPR[SPVAP]-1661301434206
GPR[EPVAP]-1661301435251
GPR[EPVS]-1661301435251
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sideLength;
}

========
MM Copying to MM
GPR[SPVS]-1661301435252
GPR[SPVAP]-1661301435252
GPR[EPVAP]-1661301436285
GPR[EPVS]-1661301436285
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=f;
}

========
MM Copying to MM
GPR[SPVS]-1661301436287
GPR[SPVAP]-1661301436287
GPR[EPVAP]-1661301437320
GPR[EPVS]-1661301437320
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getEntry(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301437324
GPR[SPVAP]-1661301437324
GPR[EPVAP]-1661301438364
GPR[EPVS]-1661301438364
========
for(int i=sum;j<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301438367
GPR[SPVAP]-1661301438367
GPR[EPVAP]-1661301439423
GPR[EPVS]-1661301439423
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=scalAbsoluteTolerance;
}

========
MM Copying to MM
GPR[SPVS]-1661301439427
GPR[SPVAP]-1661301439427
GPR[EPVAP]-1661301440457
GPR[EPVS]-1661301440457
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=scalRelativeTolerance;
}

========
MM Copying to MM
GPR[SPVS]-1661301440458
GPR[SPVAP]-1661301440458
GPR[EPVAP]-1661301441493
GPR[EPVS]-1661301441493
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=xn;
}

========
MM Copying to MM
GPR[SPVS]-1661301441495
GPR[SPVAP]-1661301441495
GPR[EPVAP]-1661301442539
GPR[EPVS]-1661301442539
========
default :

for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301442541
GPR[SPVAP]-1661301442541
GPR[EPVAP]-1661301443478
GPR[EPVS]-1661301443478
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=order;
}

========
MM Copying to MM
GPR[SPVS]-1661301443480
GPR[SPVAP]-1661301443480
GPR[EPVAP]-1661301444523
GPR[EPVS]-1661301444523
========
if((d+i)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301444525
GPR[SPVAP]-1661301444525
GPR[EPVAP]-1661301445569
GPR[EPVS]-1661301445569
========
sum=i;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301445570
GPR[SPVAP]-1661301445570
GPR[EPVAP]-1661301446627
GPR[EPVS]-1661301446627
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=x;
}

========
MM Copying to MM
GPR[SPVS]-1661301446630
GPR[SPVAP]-1661301446630
GPR[EPVAP]-1661301447669
GPR[EPVS]-1661301447669
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=c;
}

========
MM Copying to MM
GPR[SPVS]-1661301447670
GPR[SPVAP]-1661301447670
GPR[EPVAP]-1661301448697
GPR[EPVS]-1661301448697
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=stepSize;
}

========
MM Copying to MM
GPR[SPVS]-1661301448699
GPR[SPVAP]-1661301448699
GPR[EPVAP]-1661301449751
GPR[EPVS]-1661301449751
========
for(int i=sum;i<=pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301449755
GPR[SPVAP]-1661301449755
GPR[EPVAP]-1661301451731
GPR[SPVATF]-1661301451731
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301453565
GPR[EPVS]-1661301453565
========
for(int i=0;i<pointSet.size();i++){
sumObserved+=observed[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301453567
GPR[SPVAP]-1661301453567
GPR[EPVAP]-1661301454605
GPR[EPVS]-1661301454605
========
for(int i=0;j<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=j;
}

========
MM Copying to MM
GPR[SPVS]-1661301454606
GPR[SPVAP]-1661301454606
GPR[EPVAP]-1661301455655
GPR[EPVS]-1661301455655
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=e;
}

========
MM Copying to MM
GPR[SPVS]-1661301455656
GPR[SPVAP]-1661301455656
GPR[EPVAP]-1661301456713
GPR[EPVS]-1661301456713
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=j;
}

========
MM Copying to MM
GPR[SPVS]-1661301456714
GPR[SPVAP]-1661301456714
GPR[EPVAP]-1661301457749
GPR[EPVS]-1661301457749
========
for(int i=0;j<=pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301457750
GPR[SPVAP]-1661301457750
GPR[EPVAP]-1661301458794
GPR[EPVS]-1661301458794
========
for(int i=0;i<pointSet.size();i++){
sumw+=d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301458796
GPR[SPVAP]-1661301458796
GPR[EPVAP]-1661301459877
GPR[EPVS]-1661301459877
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=mean;
}

========
MM Copying to MM
GPR[SPVS]-1661301459879
GPR[SPVAP]-1661301459879
GPR[EPVAP]-1661301460921
GPR[EPVS]-1661301460921
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=standardDeviation;
}

========
MM Copying to MM
GPR[SPVS]-1661301460922
GPR[SPVAP]-1661301460922
GPR[EPVAP]-1661301461949
GPR[EPVS]-1661301461949
========
for(int i=0;i<getArtificialVariableOffset();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301461950
GPR[SPVAP]-1661301461950
GPR[EPVAP]-1661301462973
GPR[EPVS]-1661301462973
========
for(int i=0;i<pointSet.size();i++){
result.mant[i]=0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301462974
GPR[SPVAP]-1661301462974
GPR[EPVAP]-1661301464005
GPR[EPVS]-1661301464005
========
for(int i=0;i<pointSet.size();i++){
mant[i]=0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301464006
GPR[SPVAP]-1661301464006
GPR[EPVAP]-1661301465042
GPR[EPVS]-1661301465042
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=xJ;
}

========
MM Copying to MM
GPR[SPVS]-1661301465044
GPR[SPVAP]-1661301465044
GPR[EPVAP]-1661301466073
GPR[EPVS]-1661301466073
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=random;
}

========
MM Copying to MM
GPR[SPVS]-1661301466074
GPR[SPVAP]-1661301466074
GPR[EPVAP]-1661301467106
GPR[EPVS]-1661301467106
========
for(int i=0;i<pointSet.size();i++){
random=d>>8;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301467107
GPR[SPVAP]-1661301467107
GPR[EPVAP]-1661301468153
GPR[EPVS]-1661301468153
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.valueOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301468157
GPR[SPVAP]-1661301468157
GPR[EPVAP]-1661301469176
GPR[EPVS]-1661301469176
========
for(int i=0;i<pointSet.size();i++){
if(Integer.toHexString(nearest.intValue()+128).length()==1){
hex="0"+Integer.toHexString(nearest.intValue()+128);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301469177
GPR[SPVAP]-1661301469177
GPR[EPVAP]-1661301470219
GPR[EPVS]-1661301470219
========
for(int i=0;i<pointSet.size();i++){
if(Integer.toHexString(nearest.intValue()+128).length()==1){
hex="0"+Integer.toHexString(nearest.intValue()+128);
}
 final T p=pointSet.valueOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301470221
GPR[SPVAP]-1661301470221
GPR[EPVAP]-1661301471252
GPR[EPVS]-1661301471252
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dirJ;
}

========
MM Copying to MM
GPR[SPVS]-1661301471253
GPR[SPVAP]-1661301471253
GPR[EPVAP]-1661301472280
GPR[EPVS]-1661301472280
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bpCol;
}

========
MM Copying to MM
GPR[SPVS]-1661301472282
GPR[SPVAP]-1661301472282
GPR[EPVAP]-1661301473345
GPR[EPVS]-1661301473345
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=gamma;
}

========
MM Copying to MM
GPR[SPVS]-1661301473349
GPR[SPVAP]-1661301473349
GPR[EPVAP]-1661301474393
GPR[EPVS]-1661301474393
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
mt[0]=mt[N-1];
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301474394
GPR[SPVAP]-1661301474394
GPR[EPVAP]-1661301475479
GPR[EPVS]-1661301475479
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=comp;
}

========
MM Copying to MM
GPR[SPVS]-1661301475480
GPR[SPVAP]-1661301475480
GPR[EPVAP]-1661301476515
GPR[EPVS]-1661301476515
========
for(int i=0;i<pointSet.size();i++){
numElements-=i;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301476517
GPR[SPVAP]-1661301476517
GPR[EPVAP]-1661301477567
GPR[EPVS]-1661301477567
========
for(int i=sum;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bpCol;
}

========
MM Copying to MM
GPR[SPVS]-1661301477569
GPR[SPVAP]-1661301477569
GPR[EPVAP]-1661301478619
GPR[EPVS]-1661301478619
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getColumnVector(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301478632
GPR[SPVAP]-1661301478632
GPR[EPVAP]-1661301479660
GPR[EPVS]-1661301479660
========
for(int i=0;i<getHeight();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301479661
GPR[SPVAP]-1661301479661
GPR[EPVAP]-1661301480709
GPR[EPVS]-1661301480709
========
for(int i=0;i<pointSet.size();i++){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301480712
GPR[SPVAP]-1661301480712
GPR[EPVAP]-1661301481755
GPR[EPVS]-1661301481755
========
for(int i=0;i<pointSet.size();i++){
if(d>getAbsoluteThreshold()){
return false;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301481758
GPR[SPVAP]-1661301481758
GPR[EPVAP]-1661301482799
GPR[EPVS]-1661301482799
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=ypk;
}

========
MM Copying to MM
GPR[SPVS]-1661301482800
GPR[SPVAP]-1661301482800
GPR[EPVAP]-1661301483829
GPR[EPVS]-1661301483829
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=oneMinusThetaH;
}

========
MM Copying to MM
GPR[SPVS]-1661301483830
GPR[SPVAP]-1661301483830
GPR[EPVAP]-1661301484860
GPR[EPVS]-1661301484860
========
this.p=main.clone();
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301484862
GPR[SPVAP]-1661301484862
GPR[EPVAP]-1661301485903
GPR[EPVS]-1661301485903
========
this.nearest=secondary.clone();
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301485904
GPR[SPVAP]-1661301485904
GPR[EPVAP]-1661301486937
GPR[EPVS]-1661301486937
========
findEigenVectors(new double[d][size]);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301486938
GPR[SPVAP]-1661301486938
GPR[EPVAP]-1661301487970
GPR[EPVS]-1661301487970
========
for(int i=0;i<pointSet.size();i++){
if(d>getAbsoluteThreshold()){
return false;
}
 final T p=pointSet.abs(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301487972
GPR[SPVAP]-1661301487972
GPR[EPVAP]-1661301489009
GPR[EPVS]-1661301489009
========
for(int i=0;i<pointSet.size();i++){
if(Double.isInfinite(dx2[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,dx2[i],i);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301489010
GPR[SPVAP]-1661301489010
GPR[EPVAP]-1661301490047
GPR[EPVS]-1661301490047
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=delta;
}

========
MM Copying to MM
GPR[SPVS]-1661301490048
GPR[SPVAP]-1661301490048
GPR[EPVAP]-1661301491083
GPR[EPVS]-1661301491083
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=tmp;
}

========
MM Copying to MM
GPR[SPVS]-1661301491084
GPR[SPVAP]-1661301491084
GPR[EPVAP]-1661301492111
GPR[EPVS]-1661301492111
========
for(int i=0;i<pointSet.size();i++){
result.mant[i]=d-sum*RADIX;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301492112
GPR[SPVAP]-1661301492112
GPR[EPVAP]-1661301493145
GPR[EPVS]-1661301493145
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final int d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301493146
GPR[SPVAP]-1661301493146
GPR[EPVAP]-1661301494174
GPR[EPVS]-1661301494174
========
for(int i=0;i<pointSet.size();i++){
dividend[i]=mant[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301494177
GPR[SPVAP]-1661301494177
GPR[EPVAP]-1661301495216
GPR[EPVS]-1661301495216
========
for(int i=0;i<pointSet.size();i++){
remainder[i]=0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301495217
GPR[SPVAP]-1661301495217
GPR[EPVAP]-1661301496241
GPR[EPVS]-1661301496241
========
for(int i=0;i<pointSet.size();i++){
dividend[i]=mant[i];
remainder[i]=0;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301496242
GPR[SPVAP]-1661301496242
GPR[EPVAP]-1661301497293
GPR[EPVS]-1661301497293
========
for(int i=0;i<pointSet.size();i++){
if(divisor.mant[i]<remainder[i]){
break;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301497295
GPR[SPVAP]-1661301497295
GPR[EPVAP]-1661301498337
GPR[EPVS]-1661301498337
========
for(int i=0;length<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301498339
GPR[SPVAP]-1661301498339
GPR[EPVAP]-1661301499377
GPR[EPVS]-1661301499377
========
if(d.length<sum+d){
throw new NumberIsTooLargeException(pos+size,d.length,true);
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301499379
GPR[SPVAP]-1661301499379
GPR[EPVAP]-1661301500432
GPR[EPVS]-1661301500432
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=randInt;
}

========
MM Copying to MM
GPR[SPVS]-1661301500434
GPR[SPVAP]-1661301500434
GPR[EPVAP]-1661301501523
GPR[EPVS]-1661301501523
========
for(int i=0;i<pointSet.size();i++){
if(i==bytes.length){
return ;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301501524
GPR[SPVAP]-1661301501524
GPR[EPVAP]-1661301502544
GPR[EPVS]-1661301502544
========
for(int i=0;i<pointSet.size();i++){
++i;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301502546
GPR[SPVAP]-1661301502546
GPR[EPVAP]-1661301504475
GPR[SPVATF]-1661301504475
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301506336
GPR[EPVS]-1661301506336
========
for(int i=0;k<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301506338
GPR[SPVAP]-1661301506338
GPR[EPVAP]-1661301508231
GPR[SPVATF]-1661301508231
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301510106
GPR[EPVS]-1661301510106
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=factor;
}

========
MM Copying to MM
GPR[SPVS]-1661301510107
GPR[SPVAP]-1661301510107
GPR[EPVAP]-1661301511157
GPR[EPVS]-1661301511157
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
if(result.mant[mant.length-1]!=0){
break;
}
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301511159
GPR[SPVAP]-1661301511159
GPR[EPVAP]-1661301512194
GPR[EPVS]-1661301512194
========
for(int i=0;i<pointSet.size();i++){
 final T p=(d==0)?null:pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301512196
GPR[SPVAP]-1661301512196
GPR[EPVAP]-1661301513221
GPR[EPVS]-1661301513221
========
for(int i=0;i<getSize();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301513223
GPR[SPVAP]-1661301513223
GPR[EPVAP]-1661301514253
GPR[EPVS]-1661301514254
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=idx;
}

========
MM Copying to MM
GPR[SPVS]-1661301514255
GPR[SPVAP]-1661301514255
GPR[EPVAP]-1661301515287
GPR[EPVS]-1661301515287
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
--k;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301515289
GPR[SPVAP]-1661301515289
GPR[EPVAP]-1661301516317
GPR[EPVS]-1661301516317
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
count-=sum;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301516318
GPR[SPVAP]-1661301516318
GPR[EPVAP]-1661301517351
GPR[EPVS]-1661301517351
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
--k;
count-=sum;

dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301517352
GPR[SPVAP]-1661301517352
GPR[EPVAP]-1661301518372
GPR[EPVS]-1661301518372
========
for(int i=0;i<pointSet.size();i++){
diff=sample1[i]-sample2[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301518375
GPR[SPVAP]-1661301518375
GPR[EPVAP]-1661301519409
GPR[EPVS]-1661301519409
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=residual;
}

========
MM Copying to MM
GPR[SPVS]-1661301519411
GPR[SPVAP]-1661301519411
GPR[EPVAP]-1661301520443
GPR[EPVS]-1661301520443
========
for(int i=0;i<pointSet.size();i++){
cost+=residualsWeights[i]*d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301520444
GPR[SPVAP]-1661301520444
GPR[EPVAP]-1661301521484
GPR[EPVS]-1661301521484
========
for(int i=0;i<pointSet.size();i++){
yEnd[i]=y0[i]+d*f[0][i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301521486
GPR[SPVAP]-1661301521486
GPR[EPVAP]-1661301522533
GPR[EPVS]-1661301522533
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=result;
}

========
MM Copying to MM
GPR[SPVS]-1661301522534
GPR[SPVAP]-1661301522534
GPR[EPVAP]-1661301523572
GPR[EPVS]-1661301523572
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sqrt(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301523574
GPR[SPVAP]-1661301523574
GPR[EPVAP]-1661301524619
GPR[EPVS]-1661301524619
========
for(int i=0;i<pointSet.size();i++){
remainder[i]=d-sum*RADIX;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301524621
GPR[SPVAP]-1661301524621
GPR[EPVAP]-1661301525654
GPR[EPVS]-1661301525654
========
for(int i=0;i<pointSet.size();i++){
lJ[i]=0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301525655
GPR[SPVAP]-1661301525655
GPR[EPVAP]-1661301526717
GPR[EPVS]-1661301526717
========
for(int i=0;i<pointSet.size();i++){
f[i]=data[ii];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301526719
GPR[SPVAP]-1661301526719
GPR[EPVAP]-1661301527748
GPR[EPVS]-1661301527748
========
for(int i=0;i<pointSet.size();i++){
ii+=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301527749
GPR[SPVAP]-1661301527749
GPR[EPVAP]-1661301528790
GPR[EPVS]-1661301528790
========
for(int i=0;i<pointSet.size();i++){
f[i]=data[ii];
ii+=sum;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301528791
GPR[SPVAP]-1661301528791
GPR[EPVAP]-1661301529819
GPR[EPVS]-1661301529819
========
for(int i=0;i<pointSet.size();i++){
d[i]=y[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301529821
GPR[SPVAP]-1661301529821
GPR[EPVAP]-1661301530857
GPR[EPVS]-1661301530857
========
for(int i=0;i<=pointSet.size();i++){
 final T p=pointSet.abs(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301531200
GPR[SPVAP]-1661301531200
GPR[EPVAP]-1661301532240
GPR[EPVS]-1661301532240
========
for(int i=0;i<pointSet.size();i++){
x2[i]=2*x[i]-x1[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301532242
GPR[SPVAP]-1661301532242
GPR[EPVAP]-1661301533277
GPR[EPVS]-1661301533277
========
for(int i=0;i<pointSet.size();i++){
sumImpl[i]=new Sum();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301533279
GPR[SPVAP]-1661301533279
GPR[EPVAP]-1661301534307
GPR[EPVS]-1661301534307
========
for(int i=0;i<pointSet.size();i++){
minImpl[i]=new Min();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301534308
GPR[SPVAP]-1661301534308
GPR[EPVAP]-1661301535349
GPR[EPVS]-1661301535349
========
for(int i=0;i<pointSet.size();i++){
maxImpl[i]=new Max();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301535350
GPR[SPVAP]-1661301535350
GPR[EPVAP]-1661301536377
GPR[EPVS]-1661301536377
========
for(int i=0;i<pointSet.size();i++){
sumLogImpl[i]=new SumOfLogs();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301536378
GPR[SPVAP]-1661301536378
GPR[EPVAP]-1661301537412
GPR[EPVS]-1661301537412
========
for(int i=0;i<pointSet.size();i++){
geoMeanImpl[i]=new GeometricMean();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301537414
GPR[SPVAP]-1661301537414
GPR[EPVAP]-1661301538449
GPR[EPVS]-1661301538449
========
for(int i=0;i<pointSet.size();i++){
meanImpl[i]=new Mean();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301538450
GPR[SPVAP]-1661301538450
GPR[EPVAP]-1661301539492
GPR[EPVS]-1661301539492
========
for(int i=0;i<pointSet.size();i++){
sumImpl[i]=new Sum();
minImpl[i]=new Min();
maxImpl[i]=new Max();
sumLogImpl[i]=new SumOfLogs();
geoMeanImpl[i]=new GeometricMean();
meanImpl[i]=new Mean();

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301539494
GPR[SPVAP]-1661301539494
GPR[EPVAP]-1661301540533
GPR[EPVS]-1661301540533
========
for(int i=0;col<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301540536
GPR[SPVAP]-1661301540536
GPR[EPVAP]-1661301541579
GPR[EPVS]-1661301541579
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sqrt(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.sqrt(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301541580
GPR[SPVAP]-1661301541580
GPR[EPVAP]-1661301542612
GPR[EPVS]-1661301542612
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.sqrt(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301542613
GPR[SPVAP]-1661301542613
GPR[EPVAP]-1661301543649
GPR[EPVS]-1661301543649
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.copyOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301543651
GPR[SPVAP]-1661301543651
GPR[EPVAP]-1661301544676
GPR[EPVS]-1661301544676
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
x=result[0];
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301544677
GPR[SPVAP]-1661301544677
GPR[EPVAP]-1661301545727
GPR[EPVS]-1661301545727
========
if(i<0){
i=-i-2;
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301545729
GPR[SPVAP]-1661301545729
GPR[EPVAP]-1661301546760
GPR[EPVS]-1661301546760
========
if(i>=polynomials.length){
i--;
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301546762
GPR[SPVAP]-1661301546762
GPR[EPVAP]-1661301547789
GPR[EPVS]-1661301547789
========
i++;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301547792
GPR[SPVAP]-1661301547792
GPR[EPVAP]-1661301548829
GPR[EPVS]-1661301548829
========
for(int i=0;idxStep<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301548831
GPR[SPVAP]-1661301548831
GPR[EPVAP]-1661301549855
GPR[EPVS]-1661301549855
========
for(int i=0;i<pointSet.size();i++){
if(Double.isNaN(dx2[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301549858
GPR[SPVAP]-1661301549858
GPR[EPVAP]-1661301550882
GPR[EPVS]-1661301550882
========
for(int i=0;i<pointSet.size();i++){
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,dx2[i]);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301550883
GPR[SPVAP]-1661301550883
GPR[EPVAP]-1661301551917
GPR[EPVS]-1661301551917
========
for(int i=0;i<pointSet.size();i++){
if(Double.isNaN(dx2[i])){
throw new MathIllegalArgumentException(LocalizedFormats.NAN_ELEMENT_AT_INDEX,i);
}
if(Double.isInfinite(dx2[i])){
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_ARRAY_ELEMENT,dx2[i],i);
}
if(weights[i]<0){
throw new MathIllegalArgumentException(LocalizedFormats.NEGATIVE_ELEMENT_AT_INDEX,i,dx2[i]);
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301551918
GPR[SPVAP]-1661301551918
GPR[EPVAP]-1661301552961
GPR[EPVS]-1661301552961
========
for(int i=0;i<pointSet.size();i++){
uniCounterOffset[i]=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301552963
GPR[SPVAP]-1661301552963
GPR[EPVAP]-1661301554011
GPR[EPVS]-1661301554011
========
for(int i=0;i<pointSet.size();i++){
tS*=size[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301554012
GPR[SPVAP]-1661301554012
GPR[EPVAP]-1661301555035
GPR[EPVS]-1661301555035
========
for(int i=0;i<pointSet.size();i++){
uniCounterOffset[i]=sum;
tS*=size[i];

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301555037
GPR[SPVAP]-1661301555037
GPR[EPVAP]-1661301556072
GPR[EPVS]-1661301556072
========
d=size.length;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301556073
GPR[SPVAP]-1661301556073
GPR[EPVAP]-1661301557094
GPR[EPVS]-1661301557094
========
k=d-1;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301557096
GPR[SPVAP]-1661301557096
GPR[EPVAP]-1661301558139
GPR[EPVS]-1661301558139
========
for(int i=0;i<pointSet.size();i++){
lu[nonZero][i]=lu[col][i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301558141
GPR[SPVAP]-1661301558141
GPR[EPVAP]-1661301559176
GPR[EPVS]-1661301559176
========
for(int i=0;i<pointSet.size();i++){
lu[col][i]=firstPoint;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301559177
GPR[SPVAP]-1661301559177
GPR[EPVAP]-1661301560216
GPR[EPVS]-1661301560216
========
for(int i=0;i<pointSet.size();i++){
lu[nonZero][i]=lu[col][i];
lu[col][i]=firstPoint;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301560217
GPR[SPVAP]-1661301560217
GPR[EPVAP]-1661301561269
GPR[EPVS]-1661301561269
========
d-=i;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301561272
GPR[SPVAP]-1661301561272
GPR[EPVAP]-1661301562317
GPR[EPVS]-1661301562317
========
sum+=i;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301562318
GPR[SPVAP]-1661301562318
GPR[EPVAP]-1661301563386
GPR[EPVS]-1661301563386
========
MatrixUtils.checkRowIndex(this,sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301563389
GPR[SPVAP]-1661301563389
GPR[EPVAP]-1661301564439
GPR[EPVS]-1661301564439
========
MatrixUtils.checkColumnIndex(this,sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301564441
GPR[SPVAP]-1661301564441
GPR[EPVAP]-1661301565463
GPR[EPVS]-1661301565463
========
MatrixUtils.checkRowIndex(this,sum);
MatrixUtils.checkColumnIndex(this,sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301565464
GPR[SPVAP]-1661301565464
GPR[EPVAP]-1661301566503
GPR[EPVS]-1661301566503
========
for(int i=0;k<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=d;
}

========
MM Copying to MM
GPR[SPVS]-1661301566504
GPR[SPVAP]-1661301566504
GPR[EPVAP]-1661301568410
GPR[SPVATF]-1661301568410
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301570285
GPR[EPVS]-1661301570285
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=diff;
}

========
MM Copying to MM
GPR[SPVS]-1661301570288
GPR[SPVAP]-1661301570288
GPR[EPVAP]-1661301571324
GPR[EPVS]-1661301571324
========
for(int i=0;i<pointSet.size();i++){
val=Double.parseDouble(p);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301571326
GPR[SPVAP]-1661301571326
GPR[EPVAP]-1661301572354
GPR[EPVS]-1661301572354
========
checkVectorDimensions(v.length);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301572356
GPR[SPVAP]-1661301572356
GPR[EPVAP]-1661301573379
GPR[EPVS]-1661301573379
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=v;
}

========
MM Copying to MM
GPR[SPVS]-1661301573381
GPR[SPVAP]-1661301573381
GPR[EPVAP]-1661301574446
GPR[EPVS]-1661301574446
========
for(int i=0;i<pointSet.size();i++){
product[i+mant.length]=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301574449
GPR[SPVAP]-1661301574449
GPR[EPVAP]-1661301575473
GPR[EPVS]-1661301575473
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=coeffDot1;
}

========
MM Copying to MM
GPR[SPVS]-1661301575475
GPR[SPVAP]-1661301575475
GPR[EPVAP]-1661301576495
GPR[EPVS]-1661301576495
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot1;
}

========
MM Copying to MM
GPR[SPVS]-1661301576496
GPR[SPVAP]-1661301576496
GPR[EPVAP]-1661301577521
GPR[EPVS]-1661301577521
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=coeffDot2;
}

========
MM Copying to MM
GPR[SPVS]-1661301577522
GPR[SPVAP]-1661301577522
GPR[EPVAP]-1661301578561
GPR[EPVS]-1661301578561
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot2;
}

========
MM Copying to MM
GPR[SPVS]-1661301578562
GPR[SPVAP]-1661301578562
GPR[EPVAP]-1661301579593
GPR[EPVS]-1661301579593
========
checkVectorDimensions(p);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301579597
GPR[SPVAP]-1661301579597
GPR[EPVAP]-1661301580617
GPR[EPVS]-1661301580617
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sin;
}

========
MM Copying to MM
GPR[SPVS]-1661301580619
GPR[SPVAP]-1661301580619
GPR[EPVAP]-1661301581642
GPR[EPVS]-1661301581642
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=rik;
}

========
MM Copying to MM
GPR[SPVS]-1661301581643
GPR[SPVAP]-1661301581643
GPR[EPVAP]-1661301582675
GPR[EPVS]-1661301582675
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=cos;
}

========
MM Copying to MM
GPR[SPVS]-1661301582676
GPR[SPVAP]-1661301582676
GPR[EPVAP]-1661301583702
GPR[EPVS]-1661301583702
========
for(int i=0;i<pointSet.size();i++){
after[i]+=previous[i]+scaled[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301583704
GPR[SPVAP]-1661301583704
GPR[EPVAP]-1661301584749
GPR[EPVS]-1661301584749
========
if(d<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,k);
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301584751
GPR[SPVAP]-1661301584751
GPR[EPVAP]-1661301585777
GPR[EPVS]-1661301585777
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sin(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301585779
GPR[SPVAP]-1661301585779
GPR[EPVAP]-1661301586804
GPR[EPVS]-1661301586804
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=a;
}

========
MM Copying to MM
GPR[SPVS]-1661301586806
GPR[SPVAP]-1661301586806
GPR[EPVAP]-1661301587847
GPR[EPVS]-1661301587847
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=b;
}

========
MM Copying to MM
GPR[SPVS]-1661301587848
GPR[SPVAP]-1661301587848
GPR[EPVAP]-1661301588877
GPR[EPVS]-1661301588877
========
for(int i=0;i<pointSet.size();i++){
z[j][i]=z[j][k];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301588879
GPR[SPVAP]-1661301588879
GPR[EPVAP]-1661301589908
GPR[EPVS]-1661301589908
========
for(int i=0;row<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301589912
GPR[SPVAP]-1661301589912
GPR[EPVAP]-1661301590950
GPR[EPVS]-1661301590950
========
for(int i=sum;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=d;
}

========
MM Copying to MM
GPR[SPVS]-1661301590951
GPR[SPVAP]-1661301590951
GPR[EPVAP]-1661301592860
GPR[SPVATF]-1661301592860
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301594750
GPR[EPVS]-1661301594750
========
for(int i=sum;row<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301594751
GPR[SPVAP]-1661301594751
GPR[EPVAP]-1661301595773
GPR[EPVS]-1661301595773
========
for(int i=0;i<pointSet.size();i++){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301595774
GPR[SPVAP]-1661301595774
GPR[EPVAP]-1661301596817
GPR[EPVS]-1661301596817
========
for(int i=0;i<pointSet.size();i++){
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301596818
GPR[SPVAP]-1661301596818
GPR[EPVAP]-1661301597862
GPR[EPVS]-1661301597862
========
for(int i=0;i<pointSet.size();i++){
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301597863
GPR[SPVAP]-1661301597863
GPR[EPVAP]-1661301598914
GPR[EPVS]-1661301598914
========
for(int i=0;i<pointSet.size();i++){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301598915
GPR[SPVAP]-1661301598915
GPR[EPVAP]-1661301599955
GPR[EPVS]-1661301599955
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=wr;
}

========
MM Copying to MM
GPR[SPVS]-1661301599957
GPR[SPVAP]-1661301599957
GPR[EPVAP]-1661301601033
GPR[EPVS]-1661301601033
========
for(int i=0;i<pointSet.size();i++){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301601034
GPR[SPVAP]-1661301601034
GPR[EPVAP]-1661301602084
GPR[EPVS]-1661301602084
========
for(int i=0;i<pointSet.size();i++){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301602085
GPR[SPVAP]-1661301602085
GPR[EPVAP]-1661301603130
GPR[EPVS]-1661301603130
========
for(int i=0;i<pointSet.size();i++){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301603131
GPR[SPVAP]-1661301603131
GPR[EPVAP]-1661301604193
GPR[EPVS]-1661301604193
========
for(int i=0;i<pointSet.size();i++){
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301604194
GPR[SPVAP]-1661301604194
GPR[EPVAP]-1661301605229
GPR[EPVS]-1661301605229
========
for(int i=0;i<pointSet.size();i++){
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301605230
GPR[SPVAP]-1661301605230
GPR[EPVAP]-1661301606286
GPR[EPVS]-1661301606286
========
for(int i=0;i<pointSet.size();i++){
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301606287
GPR[SPVAP]-1661301606287
GPR[EPVAP]-1661301607319
GPR[EPVS]-1661301607319
========
for(int i=0;i<pointSet.size();i++){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301607320
GPR[SPVAP]-1661301607320
GPR[EPVAP]-1661301608384
GPR[EPVS]-1661301608384
========
for(int i=0;i<pointSet.size();i++){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301608385
GPR[SPVAP]-1661301608385
GPR[EPVAP]-1661301609455
GPR[EPVS]-1661301609455
========
for(int i=0;i<pointSet.size();i++){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301609456
GPR[SPVAP]-1661301609456
GPR[EPVAP]-1661301610509
GPR[EPVS]-1661301610509
========
for(int i=0;i<pointSet.size();i++){
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301610510
GPR[SPVAP]-1661301610510
GPR[EPVAP]-1661301611564
GPR[EPVS]-1661301611564
========
for(int i=0;i<pointSet.size();i++){
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}
if(buf[i]>='1'&&buf[i]<='9'){
leading=false;
}
if(buf[i]=='.'){
sig+=(400-d)%4;
leading=false;
}
if(buf[i]>='0'&&buf[i]<='9'){
d++;
}

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301611565
GPR[SPVAP]-1661301611565
GPR[EPVAP]-1661301612630
GPR[EPVS]-1661301612630
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getOmegaReal(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301612632
GPR[SPVAP]-1661301612632
GPR[EPVAP]-1661301613666
GPR[EPVS]-1661301613666
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getOmegaImaginary(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301613667
GPR[SPVAP]-1661301613667
GPR[EPVAP]-1661301614675
GPR[EPVS]-1661301614675
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sin(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=a;
}

========
MM Copying to MM
GPR[SPVS]-1661301614678
GPR[SPVAP]-1661301614678
GPR[EPVAP]-1661301615708
GPR[EPVS]-1661301615708
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sin(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=b;
}

========
MM Copying to MM
GPR[SPVS]-1661301615709
GPR[SPVAP]-1661301615709
GPR[EPVAP]-1661301616739
GPR[EPVS]-1661301616739
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=coeffDot23;
}

========
MM Copying to MM
GPR[SPVS]-1661301616741
GPR[SPVAP]-1661301616741
GPR[EPVAP]-1661301617770
GPR[EPVS]-1661301617770
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot23;
}

========
MM Copying to MM
GPR[SPVS]-1661301617771
GPR[SPVAP]-1661301617771
GPR[EPVAP]-1661301618818
GPR[EPVS]-1661301618818
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=coeffDot4;
}

========
MM Copying to MM
GPR[SPVS]-1661301618819
GPR[SPVAP]-1661301618819
GPR[EPVAP]-1661301619854
GPR[EPVS]-1661301619854
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot4;
}

========
MM Copying to MM
GPR[SPVS]-1661301619855
GPR[SPVAP]-1661301619855
GPR[EPVAP]-1661301620900
GPR[EPVS]-1661301620900
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=tc;
}

========
MM Copying to MM
GPR[SPVS]-1661301620903
GPR[SPVAP]-1661301620903
GPR[EPVAP]-1661301621941
GPR[EPVS]-1661301621941
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=w;
}

========
MM Copying to MM
GPR[SPVS]-1661301621942
GPR[SPVAP]-1661301621942
GPR[EPVAP]-1661301622964
GPR[EPVS]-1661301622964
========
for(int i=0;i<pointSet.size();i++){
if(i<0.5*(sum-i+1)){
value+=c[nearest];
}else {
i--;
value+=d[nearest];
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301622965
GPR[SPVAP]-1661301622965
GPR[EPVAP]-1661301624018
GPR[EPVS]-1661301624018
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot2;
}

========
MM Copying to MM
GPR[SPVS]-1661301624020
GPR[SPVAP]-1661301624020
GPR[EPVAP]-1661301625046
GPR[EPVS]-1661301625046
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot3;
}

========
MM Copying to MM
GPR[SPVS]-1661301625048
GPR[SPVAP]-1661301625048
GPR[EPVAP]-1661301626085
GPR[EPVS]-1661301626085
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot4;
}

========
MM Copying to MM
GPR[SPVS]-1661301626086
GPR[SPVAP]-1661301626086
GPR[EPVAP]-1661301627129
GPR[EPVS]-1661301627129
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=coeffDot3;
}

========
MM Copying to MM
GPR[SPVS]-1661301627131
GPR[SPVAP]-1661301627131
GPR[EPVAP]-1661301628163
GPR[EPVS]-1661301628163
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot3;
}

========
MM Copying to MM
GPR[SPVS]-1661301628164
GPR[SPVAP]-1661301628164
GPR[EPVAP]-1661301629180
GPR[EPVS]-1661301629180
========
checkRowIndex(sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301629182
GPR[SPVAP]-1661301629182
GPR[EPVAP]-1661301630221
GPR[EPVS]-1661301630221
========
checkColumnIndex(sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301630223
GPR[SPVAP]-1661301630223
GPR[EPVAP]-1661301631253
GPR[EPVS]-1661301631253
========
checkRowIndex(sum);
checkColumnIndex(sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301631254
GPR[SPVAP]-1661301631254
GPR[EPVAP]-1661301632305
GPR[EPVS]-1661301632305
========
for(int i=0;ia<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301632306
GPR[SPVAP]-1661301632306
GPR[EPVAP]-1661301633347
GPR[EPVS]-1661301633347
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.next(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301633349
GPR[SPVAP]-1661301633349
GPR[EPVAP]-1661301634385
GPR[EPVS]-1661301634385
========
for(int i=0;i<pointSet.size();i++){
bytes[i]=(byte)(random&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301634386
GPR[SPVAP]-1661301634386
GPR[EPVAP]-1661301635409
GPR[EPVS]-1661301635409
========
for(int i=0;i<pointSet.size();i++){
bytes[i+1]=(byte)((random>>8)&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301635410
GPR[SPVAP]-1661301635410
GPR[EPVAP]-1661301636449
GPR[EPVS]-1661301636449
========
for(int i=0;i<pointSet.size();i++){
bytes[i+2]=(byte)((random>>16)&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301636450
GPR[SPVAP]-1661301636450
GPR[EPVAP]-1661301637483
GPR[EPVS]-1661301637483
========
for(int i=0;i<pointSet.size();i++){
bytes[i+3]=(byte)((random>>24)&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301637484
GPR[SPVAP]-1661301637484
GPR[EPVAP]-1661301638517
GPR[EPVS]-1661301638517
========
for(int i=0;i<pointSet.size();i++){
i+=4;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301638518
GPR[SPVAP]-1661301638518
GPR[EPVAP]-1661301640432
GPR[SPVATF]-1661301640432
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301642290
GPR[EPVS]-1661301642290
========
for(int i=0;i<pointSet.size();i++){
bytes[i]=(byte)(random&0xff);
bytes[i+1]=(byte)((random>>8)&0xff);
bytes[i+2]=(byte)((random>>16)&0xff);
bytes[i+3]=(byte)((random>>24)&0xff);
i+=4;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301642291
GPR[SPVAP]-1661301642291
GPR[EPVAP]-1661301643344
GPR[EPVS]-1661301643344
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bDot0;
}

========
MM Copying to MM
GPR[SPVS]-1661301643345
GPR[SPVAP]-1661301643345
GPR[EPVAP]-1661301644398
GPR[EPVS]-1661301644398
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot0;
}

========
MM Copying to MM
GPR[SPVS]-1661301644399
GPR[SPVAP]-1661301644399
GPR[EPVAP]-1661301645430
GPR[EPVS]-1661301645430
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bDot2;
}

========
MM Copying to MM
GPR[SPVS]-1661301645432
GPR[SPVAP]-1661301645432
GPR[EPVAP]-1661301646477
GPR[EPVS]-1661301646477
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bDot3;
}

========
MM Copying to MM
GPR[SPVS]-1661301646478
GPR[SPVAP]-1661301646478
GPR[EPVAP]-1661301647512
GPR[EPVS]-1661301647512
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bDot4;
}

========
MM Copying to MM
GPR[SPVS]-1661301647513
GPR[SPVAP]-1661301647513
GPR[EPVAP]-1661301648585
GPR[EPVS]-1661301648585
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bDot5;
}

========
MM Copying to MM
GPR[SPVS]-1661301648586
GPR[SPVAP]-1661301648586
GPR[EPVAP]-1661301649611
GPR[EPVS]-1661301649611
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot5;
}

========
MM Copying to MM
GPR[SPVS]-1661301649612
GPR[SPVAP]-1661301649612
GPR[EPVAP]-1661301650638
GPR[EPVS]-1661301650638
========
new ArrayList<Double>(nearest).set(i,GeneticAlgorithm.getRandomGenerator().nextDouble());
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301650640
GPR[SPVAP]-1661301650640
GPR[EPVAP]-1661301651676
GPR[EPVS]-1661301651676
========
for(int i=0;i<pointSet.size();i++){
buffer[p++]=(char)((mant[i]/1000)+'0');
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301651678
GPR[SPVAP]-1661301651678
GPR[EPVAP]-1661301652724
GPR[EPVS]-1661301652724
========
for(int i=0;i<pointSet.size();i++){
buffer[p++]=(char)(((mant[i]/100)%10)+'0');
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301652725
GPR[SPVAP]-1661301652725
GPR[EPVAP]-1661301653768
GPR[EPVS]-1661301653768
========
for(int i=0;i<pointSet.size();i++){
buffer[p++]=(char)(((mant[i]/10)%10)+'0');
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301653769
GPR[SPVAP]-1661301653769
GPR[EPVAP]-1661301654818
GPR[EPVS]-1661301654818
========
for(int i=0;i<pointSet.size();i++){
buffer[p++]=(char)(((mant[i])%10)+'0');
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301654819
GPR[SPVAP]-1661301654819
GPR[EPVAP]-1661301655873
GPR[EPVS]-1661301655873
========
for(int i=0;i<pointSet.size();i++){
buffer[p++]=(char)((mant[i]/1000)+'0');
buffer[p++]=(char)(((mant[i]/100)%10)+'0');
buffer[p++]=(char)(((mant[i]/10)%10)+'0');
buffer[p++]=(char)(((mant[i])%10)+'0');

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301655874
GPR[SPVAP]-1661301655874
GPR[EPVAP]-1661301656911
GPR[EPVS]-1661301656911
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
m4=0.0;
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301656914
GPR[SPVAP]-1661301656914
GPR[EPVAP]-1661301657955
GPR[EPVS]-1661301657955
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
m3=0.0;
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301657956
GPR[SPVAP]-1661301657956
GPR[EPVAP]-1661301658995
GPR[EPVS]-1661301658995
========
for(int i=0;i<pointSet.size();i++){
m1=0.0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301658996
GPR[SPVAP]-1661301658996
GPR[EPVAP]-1661301660045
GPR[EPVS]-1661301660045
========
for(int i=0;i<pointSet.size();i++){
m4=0.0;
m3=0.0;
m1=0.0;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301660047
GPR[SPVAP]-1661301660047
GPR[EPVAP]-1661301661068
GPR[EPVS]-1661301661068
========
for(int i=0;r<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301661072
GPR[SPVAP]-1661301661072
GPR[EPVAP]-1661301662093
GPR[EPVS]-1661301662093
========
if(d.length<d+i){
throw new NumberIsTooLargeException(pos+size,d.length,true);
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301662096
GPR[SPVAP]-1661301662096
GPR[EPVAP]-1661301663145
GPR[EPVS]-1661301663145
========
p=buildArray(i);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301663147
GPR[SPVAP]-1661301663147
GPR[EPVAP]-1661301664216
GPR[EPVS]-1661301664216
========
for(int i=0;i<pointSet.size();i++){
q+=4;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301664217
GPR[SPVAP]-1661301664217
GPR[EPVAP]-1661301665243
GPR[EPVS]-1661301665243
========
p=new double[i];
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301665244
GPR[SPVAP]-1661301665244
GPR[EPVAP]-1661301666264
GPR[EPVS]-1661301666264
========
System.arraycopy(dx2,d,p,0,i);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301666265
GPR[SPVAP]-1661301666265
GPR[EPVAP]-1661301667321
GPR[EPVS]-1661301667321
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(i>=mBlock.length){
mBlock=matrix.blocks[++mBlockIndex];
mIndex=0;
}
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301667325
GPR[SPVAP]-1661301667325
GPR[EPVAP]-1661301668362
GPR[EPVS]-1661301668362
========
for(int i=sum;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=xJ;
}

========
MM Copying to MM
GPR[SPVS]-1661301668364
GPR[SPVAP]-1661301668364
GPR[EPVAP]-1661301669385
GPR[EPVS]-1661301669385
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=g;
}

========
MM Copying to MM
GPR[SPVS]-1661301669387
GPR[SPVAP]-1661301669387
GPR[EPVAP]-1661301670418
GPR[EPVS]-1661301670418
========
for(int i=0;i<pointSet.size();i++){
g=2.0*(x[i+1]-x[i-1])-h[i-1]*mu[i-1];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301670419
GPR[SPVAP]-1661301670419
GPR[EPVAP]-1661301671466
GPR[EPVS]-1661301671466
========
for(int i=0;i<pointSet.size();i++){
z[i]=(3.0*(y[i+1]*h[i-1]-y[i]*(x[i+1]-x[i-1])+y[i-1]*h[i])/(h[i-1]*h[i])-h[i-1]*z[i-1])/d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301671467
GPR[SPVAP]-1661301671467
GPR[EPVAP]-1661301672512
GPR[EPVS]-1661301672512
========
for(int i=0;i<pointSet.size();i++){
g=2.0*(x[i+1]-x[i-1])-h[i-1]*mu[i-1];
z[i]=(3.0*(y[i+1]*h[i-1]-y[i]*(x[i+1]-x[i-1])+y[i-1]*h[i])/(h[i-1]*h[i])-h[i-1]*z[i-1])/d;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}

========
MM Copying to MM
GPR[SPVS]-1661301672513
GPR[SPVAP]-1661301672513
GPR[EPVAP]-1661301673562
GPR[EPVS]-1661301673562
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot1;
}

========
MM Copying to MM
GPR[SPVS]-1661301673565
GPR[SPVAP]-1661301673565
GPR[EPVAP]-1661301674595
GPR[EPVS]-1661301674595
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot5;
}

========
MM Copying to MM
GPR[SPVS]-1661301674597
GPR[SPVAP]-1661301674597
GPR[EPVAP]-1661301675629
GPR[EPVS]-1661301675629
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot6;
}

========
MM Copying to MM
GPR[SPVS]-1661301675630
GPR[SPVAP]-1661301675630
GPR[EPVAP]-1661301676665
GPR[EPVS]-1661301676665
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=k;
}

========
MM Copying to MM
GPR[SPVS]-1661301676670
GPR[SPVAP]-1661301676670
GPR[EPVAP]-1661301678566
GPR[SPVATF]-1661301678566
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301680428
GPR[EPVS]-1661301680428
GPR[ESUN]-1661301680429
GPR[SSUN]-1661301680429
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,177
GPR[ESUN]-1661301680824
GPR[SSUN]-1661301680824
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,178
GPR[ESUN]-1661301681067
GPR[SSUN]-1661301681068
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,179
GPR[ESUN]-1661301681287
GPR[SSUN]-1661301681287
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,180
GPR[ESUN]-1661301681532
GPR[SSUN]-1661301681532
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,181
GPR[ESUN]-1661301681765
GPR[SSUN]-1661301681765
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,186
========
for(int i=0;i<points.size();i++){
 final T p=points.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301685567
GPR[SPVAP]-1661301685567
GPR[EPVAP]-1661301688042
GPR[EPVS]-1661301688042
========
for(int i=0;i<points.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301688043
GPR[SPVAP]-1661301688043
GPR[EPVAP]-1661301692204
GPR[SPVATF]-1661301692204
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301694066
GPR[EPVS]-1661301694066
========
for(int i=0;i<pointSet.size();i++){
 final T p=points.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301694067
GPR[SPVAP]-1661301694067
GPR[EPVAP]-1661301695129
GPR[EPVS]-1661301695129
========
for(int i=sum;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301695130
GPR[SPVAP]-1661301695130
GPR[EPVAP]-1661301697090
GPR[SPVATF]-1661301697090
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301698942
GPR[EPVS]-1661301698942
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.remove(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301698943
GPR[SPVAP]-1661301698943
GPR[EPVAP]-1661301700863
GPR[SPVATF]-1661301700863
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301702726
GPR[EPVS]-1661301702726
========
for(int i=0;i<getLength();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301702728
GPR[SPVAP]-1661301702728
GPR[EPVAP]-1661301703760
GPR[EPVS]-1661301703760
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301703762
GPR[SPVAP]-1661301703762
GPR[EPVAP]-1661301704830
GPR[EPVS]-1661301704830
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.nextInt(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301704832
GPR[SPVAP]-1661301704832
GPR[EPVAP]-1661301705871
GPR[EPVS]-1661301705871
========
for(int i=0;i<pointSet.size();i++){
subVector[d]=i;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301705873
GPR[SPVAP]-1661301705873
GPR[EPVAP]-1661301706924
GPR[EPVS]-1661301706924
========
k+=sum;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301706925
GPR[SPVAP]-1661301706925
GPR[EPVAP]-1661301707960
GPR[EPVS]-1661301707960
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=comp;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301707962
GPR[SPVAP]-1661301707962
GPR[EPVAP]-1661301708993
GPR[EPVS]-1661301708993
========
for(int i=0;i<pointSet.size();i++){
 final T p=binStats.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301708994
GPR[SPVAP]-1661301708994
GPR[EPVAP]-1661301710032
GPR[EPVS]-1661301710032
========
for(int i=0;i<pointSet.size();i++){
nearest.addValue(dx2[i]);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301710033
GPR[SPVAP]-1661301710033
GPR[EPVAP]-1661301711053
GPR[EPVS]-1661301711053
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=d;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301711054
GPR[SPVAP]-1661301711054
GPR[EPVAP]-1661301712977
GPR[SPVATF]-1661301712977
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301714843
GPR[EPVS]-1661301714843
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=i;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301714846
GPR[SPVAP]-1661301714846
GPR[EPVAP]-1661301716737
GPR[SPVATF]-1661301716737
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301718589
GPR[EPVS]-1661301718589
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=l;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301718591
GPR[SPVAP]-1661301718591
GPR[EPVAP]-1661301719615
GPR[EPVS]-1661301719615
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(sum==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301719616
GPR[SPVAP]-1661301719616
GPR[EPVAP]-1661301721519
GPR[SPVATF]-1661301721519
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301723365
GPR[EPVS]-1661301723365
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=i;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301723367
GPR[SPVAP]-1661301723367
GPR[EPVAP]-1661301724389
GPR[EPVS]-1661301724389
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(sum==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301724390
GPR[SPVAP]-1661301724390
GPR[EPVAP]-1661301725432
GPR[EPVS]-1661301725432
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(sum==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=i;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301725434
GPR[SPVAP]-1661301725434
GPR[EPVAP]-1661301727385
GPR[SPVATF]-1661301727385
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301729257
GPR[EPVS]-1661301729257
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.indexOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(sum==-1){
throw new IllegalArgumentException("originalData and permutedData must contain the same objects.");
}
dx2[i]=i;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301729258
GPR[SPVAP]-1661301729258
GPR[EPVAP]-1661301730282
GPR[EPVS]-1661301730282
========
p.computeBinStats();
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301730283
GPR[SPVAP]-1661301730283
GPR[EPVAP]-1661301731326
GPR[EPVS]-1661301731326
========
dx2=new double[d];
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301731327
GPR[SPVAP]-1661301731327
GPR[EPVAP]-1661301732359
GPR[EPVS]-1661301732359
========
dx2[d-1]=1.0;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301732360
GPR[SPVAP]-1661301732360
GPR[EPVAP]-1661301733417
GPR[EPVS]-1661301733417
========
for(int i=0;i<pointSet.size();i++){
nearest.addPoint(p);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301733418
GPR[SPVAP]-1661301733418
GPR[EPVAP]-1661301734464
GPR[EPVS]-1661301734464
========
for(int i=0;i<pointSet.size();i++){
 final T p=(d==0)?null:pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301734465
GPR[SPVAP]-1661301734465
GPR[EPVAP]-1661301735512
GPR[EPVS]-1661301735512
========
if(k<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,k);
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301735515
GPR[SPVAP]-1661301735515
GPR[EPVAP]-1661301736560
GPR[EPVS]-1661301736560
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sqrt(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301736562
GPR[SPVAP]-1661301736562
GPR[EPVAP]-1661301737585
GPR[EPVS]-1661301737585
========
for(int i=0;i<pointSet.size();i++){
random=d*FastMath.cos(2*FastMath.PI);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301737586
GPR[SPVAP]-1661301737586
GPR[EPVAP]-1661301738625
GPR[EPVS]-1661301738625
========
for(int i=0;i<pointSet.size();i++){
nextGaussian=d*FastMath.sin(2*FastMath.PI);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301738626
GPR[SPVAP]-1661301738626
GPR[EPVAP]-1661301739704
GPR[EPVS]-1661301739704
========
for(int i=0;i<pointSet.size();i++){
random=d*FastMath.cos(2*FastMath.PI);
nextGaussian=d*FastMath.sin(2*FastMath.PI);

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301739706
GPR[SPVAP]-1661301739706
GPR[EPVAP]-1661301740743
GPR[EPVS]-1661301740743
========
for(int i=0;i<=pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301740744
GPR[SPVAP]-1661301740744
GPR[EPVAP]-1661301742629
GPR[SPVATF]-1661301742629
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301744470
GPR[EPVS]-1661301744470
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=pos;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301744476
GPR[SPVAP]-1661301744476
GPR[EPVAP]-1661301745509
GPR[EPVS]-1661301745509
========
for(int i=sum;i<=pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301745511
GPR[SPVAP]-1661301745511
GPR[EPVAP]-1661301747409
GPR[SPVATF]-1661301747409
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301749268
GPR[EPVS]-1661301749268
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.abs(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301749270
GPR[SPVAP]-1661301749270
GPR[EPVAP]-1661301750289
GPR[EPVS]-1661301750290
========
for(int i=0;i<pointSet.size();i++){
max+=FastMath.abs(getEntry(i)-dx2[i]);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301750291
GPR[SPVAP]-1661301750291
GPR[EPVAP]-1661301751325
GPR[EPVS]-1661301751325
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getEntry(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301751329
GPR[SPVAP]-1661301751329
GPR[EPVAP]-1661301752364
GPR[EPVS]-1661301752364
========
for(int i=0;i<pointSet.size();i++){
sum+=FastMath.abs(p);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301752366
GPR[SPVAP]-1661301752366
GPR[EPVAP]-1661301753397
GPR[EPVS]-1661301753397
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=ratio;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301753399
GPR[SPVAP]-1661301753399
GPR[EPVAP]-1661301754421
GPR[EPVS]-1661301754421
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=order;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301754422
GPR[SPVAP]-1661301754422
GPR[EPVAP]-1661301755441
GPR[EPVS]-1661301755441
========
for(int i=0;i<pointSet.size();i++){
max=FastMath.max(r,FastMath.abs(p));
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301755443
GPR[SPVAP]-1661301755443
GPR[EPVAP]-1661301756471
GPR[EPVS]-1661301756471
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sideLength;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301756475
GPR[SPVAP]-1661301756475
GPR[EPVAP]-1661301757513
GPR[EPVS]-1661301757513
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=f;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301757515
GPR[SPVAP]-1661301757515
GPR[EPVAP]-1661301758557
GPR[EPVS]-1661301758557
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=scalAbsoluteTolerance;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301758559
GPR[SPVAP]-1661301758559
GPR[EPVAP]-1661301759617
GPR[EPVS]-1661301759617
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=scalRelativeTolerance;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301759618
GPR[SPVAP]-1661301759618
GPR[EPVAP]-1661301760648
GPR[EPVS]-1661301760648
========
default :

for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301760650
GPR[SPVAP]-1661301760650
GPR[EPVAP]-1661301761592
GPR[EPVS]-1661301761592
========
if((d+i)>internalArray.length){
expandTo(startIndex+i);
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301761594
GPR[SPVAP]-1661301761594
GPR[EPVAP]-1661301762647
GPR[EPVS]-1661301762647
========
sum=i;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301762649
GPR[SPVAP]-1661301762649
GPR[EPVAP]-1661301763681
GPR[EPVS]-1661301763681
========
for(int i=0;i<pointSet.size();i++){
if(d>r){
max=d;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301763683
GPR[SPVAP]-1661301763683
GPR[EPVAP]-1661301764707
GPR[EPVS]-1661301764707
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=c;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301764711
GPR[SPVAP]-1661301764711
GPR[EPVAP]-1661301765764
GPR[EPVS]-1661301765764
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=xn;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301765767
GPR[SPVAP]-1661301765767
GPR[EPVAP]-1661301766821
GPR[EPVS]-1661301766821
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=x;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301766823
GPR[SPVAP]-1661301766823
GPR[EPVAP]-1661301767965
GPR[EPVS]-1661301767965
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=stepSize;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301767972
GPR[SPVAP]-1661301767972
GPR[EPVAP]-1661301769629
GPR[EPVS]-1661301769629
========
for(int i=0;i<pointSet.size();i++){
sumw+=d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301769633
GPR[SPVAP]-1661301769633
GPR[EPVAP]-1661301770671
GPR[EPVS]-1661301770671
========
for(int i=0;i<pointSet.size();i++){
scale[i]=r+r*d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301770672
GPR[SPVAP]-1661301770672
GPR[EPVAP]-1661301771712
GPR[EPVS]-1661301771712
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=mean;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301771714
GPR[SPVAP]-1661301771714
GPR[EPVAP]-1661301772753
GPR[EPVS]-1661301772753
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=standardDeviation;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301772754
GPR[SPVAP]-1661301772754
GPR[EPVAP]-1661301773809
GPR[EPVS]-1661301773809
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=e;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301773810
GPR[SPVAP]-1661301773810
GPR[EPVAP]-1661301774858
GPR[EPVS]-1661301774858
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=j;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301774859
GPR[SPVAP]-1661301774859
GPR[EPVAP]-1661301775893
GPR[EPVS]-1661301775893
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=xJ;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301775897
GPR[SPVAP]-1661301775897
GPR[EPVAP]-1661301776926
GPR[EPVS]-1661301776926
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.valueOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301776928
GPR[SPVAP]-1661301776928
GPR[EPVAP]-1661301777966
GPR[EPVS]-1661301777966
========
for(int i=0;i<pointSet.size();i++){
if(Integer.toHexString(nearest.intValue()+128).length()==1){
hex="0"+Integer.toHexString(nearest.intValue()+128);
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301777967
GPR[SPVAP]-1661301777967
GPR[EPVAP]-1661301779014
GPR[EPVS]-1661301779014
========
for(int i=0;i<pointSet.size();i++){
if(Integer.toHexString(nearest.intValue()+128).length()==1){
hex="0"+Integer.toHexString(nearest.intValue()+128);
}
 final T p=pointSet.valueOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301779015
GPR[SPVAP]-1661301779015
GPR[EPVAP]-1661301780051
GPR[EPVS]-1661301780051
========
for(int i=0;i<getArtificialVariableOffset();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301780053
GPR[SPVAP]-1661301780053
GPR[EPVAP]-1661301781091
GPR[EPVS]-1661301781091
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dirJ;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301781099
GPR[SPVAP]-1661301781099
GPR[EPVAP]-1661301782089
GPR[EPVS]-1661301782089
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bpCol;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301782091
GPR[SPVAP]-1661301782091
GPR[EPVAP]-1661301783136
GPR[EPVS]-1661301783136
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=gamma;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301783138
GPR[SPVAP]-1661301783138
GPR[EPVAP]-1661301784176
GPR[EPVS]-1661301784176
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getColumnVector(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301784177
GPR[SPVAP]-1661301784178
GPR[EPVAP]-1661301785211
GPR[EPVS]-1661301785211
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=random;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301785213
GPR[SPVAP]-1661301785213
GPR[EPVAP]-1661301786261
GPR[EPVS]-1661301786261
========
for(int i=0;i<pointSet.size();i++){
random=d>>8;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301786263
GPR[SPVAP]-1661301786263
GPR[EPVAP]-1661301787299
GPR[EPVS]-1661301787299
========
for(int i=0;i<pointSet.size();i++){
if(d>r*getRelativeThreshold()&&d>getAbsoluteThreshold()){
return false;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301787302
GPR[SPVAP]-1661301787302
GPR[EPVAP]-1661301788348
GPR[EPVS]-1661301788348
========
for(int i=0;i<pointSet.size();i++){
scale[i]=vecAbsoluteTolerance[i]+vecRelativeTolerance[i]*d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301788350
GPR[SPVAP]-1661301788350
GPR[EPVAP]-1661301789397
GPR[EPVS]-1661301789397
========
for(int i=0;i<pointSet.size();i++){
if(d>r*getRelativeThreshold()&&d>getAbsoluteThreshold()){
return false;
}
 final T p=pointSet.abs(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301789402
GPR[SPVAP]-1661301789402
GPR[EPVAP]-1661301790455
GPR[EPVS]-1661301790455
========
for(int i=0;i<pointSet.size();i++){
mant[i]=d-sum*RADIX;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301790457
GPR[SPVAP]-1661301790457
GPR[EPVAP]-1661301791491
GPR[EPVS]-1661301791491
========
this.p=main.clone();
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301791493
GPR[SPVAP]-1661301791493
GPR[EPVAP]-1661301792524
GPR[EPVS]-1661301792524
========
this.nearest=secondary.clone();
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301792525
GPR[SPVAP]-1661301792525
GPR[EPVAP]-1661301793565
GPR[EPVS]-1661301793565
========
findEigenVectors(new double[d][size]);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301793567
GPR[SPVAP]-1661301793567
GPR[EPVAP]-1661301794605
GPR[EPVS]-1661301794605
========
for(int i=0;i<getHeight();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301794606
GPR[SPVAP]-1661301794606
GPR[EPVAP]-1661301795649
GPR[EPVS]-1661301795649
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final int d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301795651
GPR[SPVAP]-1661301795651
GPR[EPVAP]-1661301796686
GPR[EPVS]-1661301796686
========
for(int i=0;i<pointSet.size();i++){
result.mant[i]=d-sum*RADIX;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301796687
GPR[SPVAP]-1661301796687
GPR[EPVAP]-1661301797739
GPR[EPVS]-1661301797739
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=oneMinusThetaH;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301797741
GPR[SPVAP]-1661301797741
GPR[EPVAP]-1661301798763
GPR[EPVS]-1661301798763
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=ypk;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301798765
GPR[SPVAP]-1661301798765
GPR[EPVAP]-1661301799818
GPR[EPVS]-1661301799818
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=tmp;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301799821
GPR[SPVAP]-1661301799821
GPR[EPVAP]-1661301800876
GPR[EPVS]-1661301800876
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=delta;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301800878
GPR[SPVAP]-1661301800878
GPR[EPVAP]-1661301801916
GPR[EPVS]-1661301801916
========
if(d.length<sum+d){
throw new NumberIsTooLargeException(pos+size,d.length,true);
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301801917
GPR[SPVAP]-1661301801917
GPR[EPVAP]-1661301802953
GPR[EPVS]-1661301802953
========
for(int i=0;i<pointSet.size();i++){
++i;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301802958
GPR[SPVAP]-1661301802959
GPR[EPVAP]-1661301804880
GPR[SPVATF]-1661301804880
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301806733
GPR[EPVS]-1661301806733
========
for(int i=0;i<pointSet.size();i++){
tmp=luMax[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301806737
GPR[SPVAP]-1661301806737
GPR[EPVAP]-1661301807767
GPR[EPVS]-1661301807767
========
for(int i=0;i<pointSet.size();i++){
luCol[i]=r;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301807768
GPR[SPVAP]-1661301807768
GPR[EPVAP]-1661301808789
GPR[EPVS]-1661301808789
========
for(int i=0;i<pointSet.size();i++){
tmp=luMax[i];
luCol[i]=r;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301808791
GPR[SPVAP]-1661301808791
GPR[EPVAP]-1661301809825
GPR[EPVS]-1661301809825
========
for(int i=0;i<pointSet.size();i++){
dividend[i]=mant[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301809827
GPR[SPVAP]-1661301809827
GPR[EPVAP]-1661301810864
GPR[EPVS]-1661301810864
========
for(int i=0;i<pointSet.size();i++){
remainder[i]=0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301810865
GPR[SPVAP]-1661301810865
GPR[EPVAP]-1661301811905
GPR[EPVS]-1661301811905
========
for(int i=0;i<pointSet.size();i++){
dividend[i]=mant[i];
remainder[i]=0;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301811906
GPR[SPVAP]-1661301811906
GPR[EPVAP]-1661301812939
GPR[EPVS]-1661301812939
========
for(int i=0;i<getSize();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301812941
GPR[SPVAP]-1661301812941
GPR[EPVAP]-1661301813977
GPR[EPVS]-1661301813977
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=factor;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301813979
GPR[SPVAP]-1661301813979
GPR[EPVAP]-1661301815020
GPR[EPVS]-1661301815020
========
for(int i=0;i<pointSet.size();i++){
lJ[i]=0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301815023
GPR[SPVAP]-1661301815023
GPR[EPVAP]-1661301816065
GPR[EPVS]-1661301816065
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=residual;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301816067
GPR[SPVAP]-1661301816067
GPR[EPVAP]-1661301817100
GPR[EPVS]-1661301817100
========
for(int i=0;i<pointSet.size();i++){
cost+=residualsWeights[i]*d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301817101
GPR[SPVAP]-1661301817101
GPR[EPVAP]-1661301818138
GPR[EPVS]-1661301818138
========
for(int i=0;i<pointSet.size();i++){
remainder[i]=d-sum*RADIX;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301818140
GPR[SPVAP]-1661301818140
GPR[EPVAP]-1661301819168
GPR[EPVS]-1661301819168
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=idx;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301819171
GPR[SPVAP]-1661301819171
GPR[EPVAP]-1661301820209
GPR[EPVS]-1661301820209
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
--k;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301820210
GPR[SPVAP]-1661301820210
GPR[EPVAP]-1661301821252
GPR[EPVS]-1661301821252
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
count-=sum;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301821254
GPR[SPVAP]-1661301821254
GPR[EPVAP]-1661301822279
GPR[EPVS]-1661301822279
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
--k;
count-=sum;

dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301822280
GPR[SPVAP]-1661301822280
GPR[EPVAP]-1661301823319
GPR[EPVS]-1661301823319
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=randInt;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301823321
GPR[SPVAP]-1661301823321
GPR[EPVAP]-1661301824355
GPR[EPVS]-1661301824355
========
for(int i=0;i<pointSet.size();i++){
if(k==bytes.length){
return ;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301824356
GPR[SPVAP]-1661301824356
GPR[EPVAP]-1661301825387
GPR[EPVS]-1661301825387
========
for(int i=0;i<=pointSet.size();i++){
 final T p=pointSet.abs(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301825390
GPR[SPVAP]-1661301825390
GPR[EPVAP]-1661301826421
GPR[EPVS]-1661301826421
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=result;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301826422
GPR[SPVAP]-1661301826422
GPR[EPVAP]-1661301827460
GPR[EPVS]-1661301827461
========
for(int i=0;i<pointSet.size();i++){
yEnd[i]=y0[i]+d*f[0][i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301827462
GPR[SPVAP]-1661301827462
GPR[EPVAP]-1661301828497
GPR[EPVS]-1661301828497
========
for(int i=0;i<pointSet.size();i++){
d[i]=y[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301828500
GPR[SPVAP]-1661301828500
GPR[EPVAP]-1661301829542
GPR[EPVS]-1661301829542
========
for(int i=0;i<pointSet.size();i++){
f[i]=data[ii];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301829546
GPR[SPVAP]-1661301829546
GPR[EPVAP]-1661301830596
GPR[EPVS]-1661301830596
========
for(int i=0;i<pointSet.size();i++){
ii+=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301830598
GPR[SPVAP]-1661301830598
GPR[EPVAP]-1661301831640
GPR[EPVS]-1661301831640
========
for(int i=0;i<pointSet.size();i++){
f[i]=data[ii];
ii+=sum;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301831641
GPR[SPVAP]-1661301831641
GPR[EPVAP]-1661301832673
GPR[EPVS]-1661301832673
========
for(int i=0;i<pointSet.size();i++){
x2[i]=2*x[i]-x1[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301832675
GPR[SPVAP]-1661301832675
GPR[EPVAP]-1661301833700
GPR[EPVS]-1661301833700
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.copyOf(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301833703
GPR[SPVAP]-1661301833703
GPR[EPVAP]-1661301834737
GPR[EPVS]-1661301834737
========
for(int i=0;i<pointSet.size();i++){
x=result[0];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301834738
GPR[SPVAP]-1661301834738
GPR[EPVAP]-1661301835768
GPR[EPVS]-1661301835768
========
if(i<0){
i=-i-2;
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301835771
GPR[SPVAP]-1661301835771
GPR[EPVAP]-1661301836822
GPR[EPVS]-1661301836822
========
if(i>=polynomials.length){
i--;
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301836823
GPR[SPVAP]-1661301836823
GPR[EPVAP]-1661301837893
GPR[EPVS]-1661301837893
========
for(int i=0;i<pointSet.size();i++){
sumImpl[i]=new Sum();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301837895
GPR[SPVAP]-1661301837895
GPR[EPVAP]-1661301838966
GPR[EPVS]-1661301838966
========
for(int i=0;i<pointSet.size();i++){
minImpl[i]=new Min();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301838968
GPR[SPVAP]-1661301838968
GPR[EPVAP]-1661301840035
GPR[EPVS]-1661301840035
========
for(int i=0;i<pointSet.size();i++){
maxImpl[i]=new Max();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301840036
GPR[SPVAP]-1661301840036
GPR[EPVAP]-1661301841055
GPR[EPVS]-1661301841055
========
for(int i=0;i<pointSet.size();i++){
sumLogImpl[i]=new SumOfLogs();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301841056
GPR[SPVAP]-1661301841056
GPR[EPVAP]-1661301842114
GPR[EPVS]-1661301842114
========
for(int i=0;i<pointSet.size();i++){
geoMeanImpl[i]=new GeometricMean();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301842115
GPR[SPVAP]-1661301842115
GPR[EPVAP]-1661301843144
GPR[EPVS]-1661301843144
========
for(int i=0;i<pointSet.size();i++){
meanImpl[i]=new Mean();
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301843145
GPR[SPVAP]-1661301843145
GPR[EPVAP]-1661301844188
GPR[EPVS]-1661301844188
========
for(int i=0;i<pointSet.size();i++){
sumImpl[i]=new Sum();
minImpl[i]=new Min();
maxImpl[i]=new Max();
sumLogImpl[i]=new SumOfLogs();
geoMeanImpl[i]=new GeometricMean();
meanImpl[i]=new Mean();

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301844189
GPR[SPVAP]-1661301844189
GPR[EPVAP]-1661301845235
GPR[EPVS]-1661301845235
========
for(int i=0;i<pointSet.size();i++){
if(sum>=Wmax){
++k;
}
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301845240
GPR[SPVAP]-1661301845240
GPR[EPVAP]-1661301846288
GPR[EPVS]-1661301846288
========
d=size.length;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301846290
GPR[SPVAP]-1661301846290
GPR[EPVAP]-1661301847349
GPR[EPVS]-1661301847349
========
sum=d-1;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301847351
GPR[SPVAP]-1661301847351
GPR[EPVAP]-1661301848384
GPR[EPVS]-1661301848384
========
MatrixUtils.checkRowIndex(this,sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301848386
GPR[SPVAP]-1661301848386
GPR[EPVAP]-1661301849422
GPR[EPVS]-1661301849422
========
MatrixUtils.checkColumnIndex(this,sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301849423
GPR[SPVAP]-1661301849423
GPR[EPVAP]-1661301850458
GPR[EPVS]-1661301850458
========
MatrixUtils.checkRowIndex(this,sum);
MatrixUtils.checkColumnIndex(this,sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301850459
GPR[SPVAP]-1661301850459
GPR[EPVAP]-1661301851496
GPR[EPVS]-1661301851496
========
d-=i;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301851498
GPR[SPVAP]-1661301851498
GPR[EPVAP]-1661301852523
GPR[EPVS]-1661301852523
========
sum+=i;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301852525
GPR[SPVAP]-1661301852525
GPR[EPVAP]-1661301853560
GPR[EPVS]-1661301853560
========
new ArrayList<Double>(nearest).set(GeneticAlgorithm.getRandomGenerator().nextInt(nearest.size()),GeneticAlgorithm.getRandomGenerator().nextDouble());
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301853562
GPR[SPVAP]-1661301853562
GPR[EPVAP]-1661301854608
GPR[EPVS]-1661301854608
========
for(int i=0;i<pointSet.size();i++){
val=Double.parseDouble(p);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301854610
GPR[SPVAP]-1661301854610
GPR[EPVAP]-1661301855640
GPR[EPVS]-1661301855640
========
for(int i=0;i<pointSet.size();i++){
nearest.addValue(r);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301855642
GPR[SPVAP]-1661301855642
GPR[EPVAP]-1661301856683
GPR[EPVS]-1661301856683
========
for(int i=0;i<pointSet.size();i++){
val=Double.parseDouble(p);
nearest.addValue(r);

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301856685
GPR[SPVAP]-1661301856685
GPR[EPVAP]-1661301857724
GPR[EPVS]-1661301857724
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.cos(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301857726
GPR[SPVAP]-1661301857726
GPR[EPVAP]-1661301858765
GPR[EPVS]-1661301858765
========
for(int i=0;i<pointSet.size();i++){
product[i+mant.length]=sum;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301858766
GPR[SPVAP]-1661301858766
GPR[EPVAP]-1661301859801
GPR[EPVS]-1661301859801
========
for(int i=0;i<pointSet.size();i++){
lu[nonZero][i]=lu[col][i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301859802
GPR[SPVAP]-1661301859802
GPR[EPVAP]-1661301860880
GPR[EPVS]-1661301860880
========
for(int i=0;i<pointSet.size();i++){
lu[col][i]=firstPoint;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301860881
GPR[SPVAP]-1661301860881
GPR[EPVAP]-1661301861933
GPR[EPVS]-1661301861933
========
for(int i=0;i<pointSet.size();i++){
lu[nonZero][i]=lu[col][i];
lu[col][i]=firstPoint;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301861934
GPR[SPVAP]-1661301861934
GPR[EPVAP]-1661301863003
GPR[EPVS]-1661301863003
========
checkVectorDimensions(v.length);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301863004
GPR[SPVAP]-1661301863004
GPR[EPVAP]-1661301864043
GPR[EPVS]-1661301864043
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*a;

========
MM Copying to MM
GPR[SPVS]-1661301864045
GPR[SPVAP]-1661301864045
GPR[EPVAP]-1661301865088
GPR[EPVS]-1661301865088
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=coeffDot1;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301865090
GPR[SPVAP]-1661301865090
GPR[EPVAP]-1661301866119
GPR[EPVS]-1661301866119
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot1;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301866120
GPR[SPVAP]-1661301866120
GPR[EPVAP]-1661301867161
GPR[EPVS]-1661301867161
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=coeffDot2;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301867162
GPR[SPVAP]-1661301867162
GPR[EPVAP]-1661301868189
GPR[EPVS]-1661301868189
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot2;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301868190
GPR[SPVAP]-1661301868190
GPR[EPVAP]-1661301869224
GPR[EPVS]-1661301869224
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=diff;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301869225
GPR[SPVAP]-1661301869225
GPR[EPVAP]-1661301870271
GPR[EPVS]-1661301870271
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final int r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301870273
GPR[SPVAP]-1661301870273
GPR[EPVAP]-1661301871337
GPR[EPVS]-1661301871337
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*previousX;

========
MM Copying to MM
GPR[SPVS]-1661301871339
GPR[SPVAP]-1661301871339
GPR[EPVAP]-1661301872383
GPR[EPVS]-1661301872383
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sin;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301872385
GPR[SPVAP]-1661301872385
GPR[EPVAP]-1661301873460
GPR[EPVS]-1661301873460
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=rik;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301873461
GPR[SPVAP]-1661301873461
GPR[EPVAP]-1661301874483
GPR[EPVS]-1661301874483
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=cos;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301874484
GPR[SPVAP]-1661301874484
GPR[EPVAP]-1661301875573
GPR[EPVS]-1661301875573
========
for(int i=0;i<pointSet.size();i++){
weightedResidualJacobian[i][pk]=r;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301875574
GPR[SPVAP]-1661301875574
GPR[EPVAP]-1661301876609
GPR[EPVS]-1661301876609
========
checkVectorDimensions(p);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301876610
GPR[SPVAP]-1661301876610
GPR[EPVAP]-1661301877650
GPR[EPVS]-1661301877650
========
for(int i=0;i<pointSet.size();i++){
after[i]+=previous[i]+scaled[i];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301877652
GPR[SPVAP]-1661301877652
GPR[EPVAP]-1661301878711
GPR[EPVS]-1661301878711
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=v;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301878713
GPR[SPVAP]-1661301878713
GPR[EPVAP]-1661301879738
GPR[EPVS]-1661301879738
========
for(int i=0;i<pointSet.size();i++){
fvalXY[k][i][j]=r;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301879739
GPR[SPVAP]-1661301879739
GPR[EPVAP]-1661301880756
GPR[EPVS]-1661301880756
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sin(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301880760
GPR[SPVAP]-1661301880760
GPR[EPVAP]-1661301881787
GPR[EPVS]-1661301881787
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=a;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301881788
GPR[SPVAP]-1661301881788
GPR[EPVAP]-1661301882845
GPR[EPVS]-1661301882845
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=b;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301882846
GPR[SPVAP]-1661301882846
GPR[EPVAP]-1661301883886
GPR[EPVS]-1661301883886
========
for(int i=0;i<pointSet.size();i++){
x[n-i]=d-r;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301883887
GPR[SPVAP]-1661301883887
GPR[EPVAP]-1661301884913
GPR[EPVS]-1661301884913
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=p;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301884917
GPR[SPVAP]-1661301884917
GPR[EPVAP]-1661301885943
GPR[EPVS]-1661301885943
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=t;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301885944
GPR[SPVAP]-1661301885944
GPR[EPVAP]-1661301887004
GPR[EPVS]-1661301887004
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=q;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301887005
GPR[SPVAP]-1661301887005
GPR[EPVAP]-1661301888020
GPR[EPVS]-1661301888020
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
t=FastMath.sqrt(r*c+1.0);
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301888021
GPR[SPVAP]-1661301888021
GPR[EPVAP]-1661301889069
GPR[EPVS]-1661301889069
========
for(int i=0;i<pointSet.size();i++){
s=1.0/r;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301889070
GPR[SPVAP]-1661301889070
GPR[EPVAP]-1661301890119
GPR[EPVS]-1661301890119
========
for(int i=0;i<pointSet.size();i++){
t=FastMath.sqrt(r*c+1.0);
s=1.0/r;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301890120
GPR[SPVAP]-1661301890120
GPR[EPVAP]-1661301891149
GPR[EPVS]-1661301891149
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
t=FastMath.sqrt(r*s+1.0);
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301891150
GPR[SPVAP]-1661301891150
GPR[EPVAP]-1661301892173
GPR[EPVS]-1661301892174
========
for(int i=0;i<pointSet.size();i++){
c=1.0/r;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301892175
GPR[SPVAP]-1661301892175
GPR[EPVAP]-1661301893209
GPR[EPVS]-1661301893209
========
for(int i=0;i<pointSet.size();i++){
t=FastMath.sqrt(r*s+1.0);
c=1.0/r;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301893210
GPR[SPVAP]-1661301893210
GPR[EPVAP]-1661301894281
GPR[EPVS]-1661301894281
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getOmegaReal(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301894285
GPR[SPVAP]-1661301894285
GPR[EPVAP]-1661301895339
GPR[EPVS]-1661301895339
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.getOmegaImaginary(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301895340
GPR[SPVAP]-1661301895340
GPR[EPVAP]-1661301896384
GPR[EPVS]-1661301896384
========
for(int i=0;i<pointSet.size();i++){
omegaReal[i]=omegaReal[i-1]*d+omegaImaginaryForward[i-1]*r;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301896386
GPR[SPVAP]-1661301896386
GPR[EPVAP]-1661301897425
GPR[EPVS]-1661301897425
========
for(int i=0;i<pointSet.size();i++){
omegaImaginaryForward[i]=omegaImaginaryForward[i-1]*d-omegaReal[i-1]*r;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301897426
GPR[SPVAP]-1661301897426
GPR[EPVAP]-1661301898476
GPR[EPVS]-1661301898476
========
for(int i=0;i<pointSet.size();i++){
omegaReal[i]=omegaReal[i-1]*d+omegaImaginaryForward[i-1]*r;
omegaImaginaryForward[i]=omegaImaginaryForward[i-1]*d-omegaReal[i-1]*r;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301898478
GPR[SPVAP]-1661301898478
GPR[EPVAP]-1661301899525
GPR[EPVS]-1661301899525
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=wr;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301899527
GPR[SPVAP]-1661301899527
GPR[EPVAP]-1661301900638
GPR[EPVS]-1661301900638
========
for(int i=sum;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=d;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301900639
GPR[SPVAP]-1661301900639
GPR[EPVAP]-1661301902577
GPR[SPVATF]-1661301902577
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301904449
GPR[EPVS]-1661301904449
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sin(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=a;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301904451
GPR[SPVAP]-1661301904451
GPR[EPVAP]-1661301905536
GPR[EPVS]-1661301905536
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.sin(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=b;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301905537
GPR[SPVAP]-1661301905537
GPR[EPVAP]-1661301906575
GPR[EPVS]-1661301906575
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=coeffDot23;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301906577
GPR[SPVAP]-1661301906577
GPR[EPVAP]-1661301907621
GPR[EPVS]-1661301907621
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot23;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301907622
GPR[SPVAP]-1661301907622
GPR[EPVAP]-1661301908685
GPR[EPVS]-1661301908685
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=coeffDot4;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301908686
GPR[SPVAP]-1661301908686
GPR[EPVAP]-1661301909724
GPR[EPVS]-1661301909724
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot4;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301909726
GPR[SPVAP]-1661301909726
GPR[EPVAP]-1661301910785
GPR[EPVS]-1661301910785
========
r=r;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301910788
GPR[SPVAP]-1661301910788
GPR[EPVAP]-1661301911828
GPR[EPVS]-1661301911828
========
if(r==0.0&&d==0.0){
return NaN;
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301911829
GPR[SPVAP]-1661301911829
GPR[EPVAP]-1661301912860
GPR[EPVS]-1661301912860
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=tc;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301912862
GPR[SPVAP]-1661301912862
GPR[EPVAP]-1661301913912
GPR[EPVS]-1661301913912
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=w;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301913913
GPR[SPVAP]-1661301913913
GPR[EPVAP]-1661301914948
GPR[EPVS]-1661301914948
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot2;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301914949
GPR[SPVAP]-1661301914949
GPR[EPVAP]-1661301915987
GPR[EPVS]-1661301915987
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot3;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301915988
GPR[SPVAP]-1661301915988
GPR[EPVAP]-1661301917037
GPR[EPVS]-1661301917037
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot4;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301917038
GPR[SPVAP]-1661301917038
GPR[EPVAP]-1661301918059
GPR[EPVS]-1661301918059
========
for(int i=0;i<pointSet.size();i++){
interpolatedState[i]=currentState[i]-r*(v1[i]-d*(v2[i]+d*(v3[i]+r*v4[i])));
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301918060
GPR[SPVAP]-1661301918060
GPR[EPVAP]-1661301919118
GPR[EPVS]-1661301919118
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=coeffDot3;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301919121
GPR[SPVAP]-1661301919121
GPR[EPVAP]-1661301920211
GPR[EPVS]-1661301920211
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot3;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301920212
GPR[SPVAP]-1661301920212
GPR[EPVAP]-1661301921239
GPR[EPVS]-1661301921239
========
i++;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301921241
GPR[SPVAP]-1661301921241
GPR[EPVAP]-1661301922276
GPR[EPVS]-1661301922276
========
sum++;
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301922277
GPR[SPVAP]-1661301922277
GPR[EPVAP]-1661301924172
GPR[SPVATF]-1661301924172
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301926050
GPR[EPVS]-1661301926050
========
if(sum>=seed.length){
j=0;
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301926051
GPR[SPVAP]-1661301926051
GPR[EPVAP]-1661301927075
GPR[EPVS]-1661301927075
========
checkRowIndex(sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301927077
GPR[SPVAP]-1661301927077
GPR[EPVAP]-1661301928101
GPR[EPVS]-1661301928101
========
checkColumnIndex(sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301928102
GPR[SPVAP]-1661301928102
GPR[EPVAP]-1661301929141
GPR[EPVS]-1661301929141
========
checkRowIndex(sum);
checkColumnIndex(sum);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301929142
GPR[SPVAP]-1661301929142
GPR[EPVAP]-1661301930167
GPR[EPVS]-1661301930167
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bDot0;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301930171
GPR[SPVAP]-1661301930171
GPR[EPVAP]-1661301931209
GPR[EPVS]-1661301931209
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot0;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301931210
GPR[SPVAP]-1661301931210
GPR[EPVAP]-1661301932234
GPR[EPVS]-1661301932234
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bDot2;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301932235
GPR[SPVAP]-1661301932235
GPR[EPVAP]-1661301933264
GPR[EPVS]-1661301933264
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bDot3;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301933265
GPR[SPVAP]-1661301933265
GPR[EPVAP]-1661301934331
GPR[EPVS]-1661301934331
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bDot4;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301934332
GPR[SPVAP]-1661301934332
GPR[EPVAP]-1661301935369
GPR[EPVS]-1661301935369
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=bDot5;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301935370
GPR[SPVAP]-1661301935370
GPR[EPVAP]-1661301936404
GPR[EPVS]-1661301936404
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=yDot5;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301936405
GPR[SPVAP]-1661301936405
GPR[EPVAP]-1661301937450
GPR[EPVS]-1661301937450
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.next(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301937454
GPR[SPVAP]-1661301937454
GPR[EPVAP]-1661301938471
GPR[EPVS]-1661301938471
========
for(int i=0;i<pointSet.size();i++){
bytes[i]=(byte)(sum&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301938472
GPR[SPVAP]-1661301938472
GPR[EPVAP]-1661301939494
GPR[EPVS]-1661301939494
========
for(int i=0;i<pointSet.size();i++){
bytes[i+1]=(byte)((sum>>8)&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301939495
GPR[SPVAP]-1661301939495
GPR[EPVAP]-1661301940530
GPR[EPVS]-1661301940530
========
for(int i=0;i<pointSet.size();i++){
bytes[i+2]=(byte)((sum>>16)&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301940531
GPR[SPVAP]-1661301940531
GPR[EPVAP]-1661301941549
GPR[EPVS]-1661301941549
========
for(int i=0;i<pointSet.size();i++){
bytes[i+3]=(byte)((sum>>24)&0xff);
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301941550
GPR[SPVAP]-1661301941550
GPR[EPVAP]-1661301942577
GPR[EPVS]-1661301942577
========
for(int i=0;i<pointSet.size();i++){
i+=4;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301942578
GPR[SPVAP]-1661301942578
GPR[EPVAP]-1661301944502
GPR[SPVATF]-1661301944502
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301946373
GPR[EPVS]-1661301946373
========
for(int i=0;i<pointSet.size();i++){
bytes[i]=(byte)(sum&0xff);
bytes[i+1]=(byte)((sum>>8)&0xff);
bytes[i+2]=(byte)((sum>>16)&0xff);
bytes[i+3]=(byte)((sum>>24)&0xff);
i+=4;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301946374
GPR[SPVAP]-1661301946374
GPR[EPVAP]-1661301947421
GPR[EPVS]-1661301947421
========
for(int i=0;i<pointSet.size();i++){
b=r+d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301947424
GPR[SPVAP]-1661301947424
GPR[EPVAP]-1661301948471
GPR[EPVS]-1661301948471
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*numSlackVariables;

========
MM Copying to MM
GPR[SPVS]-1661301948473
GPR[SPVAP]-1661301948473
GPR[EPVAP]-1661301949519
GPR[EPVS]-1661301949519
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
m4=0.0;
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301949521
GPR[SPVAP]-1661301949521
GPR[EPVAP]-1661301950575
GPR[EPVS]-1661301950575
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
m3=0.0;
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301950576
GPR[SPVAP]-1661301950576
GPR[EPVAP]-1661301951639
GPR[EPVS]-1661301951639
========
for(int i=0;i<pointSet.size();i++){
m1=0.0;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301951640
GPR[SPVAP]-1661301951640
GPR[EPVAP]-1661301952663
GPR[EPVS]-1661301952663
========
for(int i=0;i<pointSet.size();i++){
m4=0.0;
m3=0.0;
m1=0.0;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301952664
GPR[SPVAP]-1661301952664
GPR[EPVAP]-1661301953691
GPR[EPVS]-1661301953691
========
if(d.length<d+i){
throw new NumberIsTooLargeException(pos+size,d.length,true);
}
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301953696
GPR[SPVAP]-1661301953697
GPR[EPVAP]-1661301954762
GPR[EPVS]-1661301954762
========
p=buildArray(i);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301954762
GPR[SPVAP]-1661301954762
GPR[EPVAP]-1661301955799
GPR[EPVS]-1661301955799
========
p=new double[i];
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301955802
GPR[SPVAP]-1661301955802
GPR[EPVAP]-1661301956839
GPR[EPVS]-1661301956840
========
System.arraycopy(dx2,d,p,0,i);
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301956841
GPR[SPVAP]-1661301956841
GPR[EPVAP]-1661301957890
GPR[EPVS]-1661301957890
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*ra;

========
MM Copying to MM
GPR[SPVS]-1661301957892
GPR[SPVAP]-1661301957892
GPR[EPVAP]-1661301958929
GPR[EPVS]-1661301958929
========
for(int i=0;i<pointSet.size();i++){
q+=4;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301958933
GPR[SPVAP]-1661301958933
GPR[EPVAP]-1661301959991
GPR[EPVS]-1661301959991
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=g;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301959994
GPR[SPVAP]-1661301959994
GPR[EPVAP]-1661301961023
GPR[EPVS]-1661301961023
========
for(int i=0;i<pointSet.size();i++){
g=2.0*(x[i+1]-x[i-1])-h[i-1]*mu[i-1];
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301961025
GPR[SPVAP]-1661301961025
GPR[EPVAP]-1661301962103
GPR[EPVS]-1661301962103
========
for(int i=0;i<pointSet.size();i++){
z[i]=(3.0*(y[i+1]*h[i-1]-y[i]*(x[i+1]-x[i-1])+y[i-1]*h[i])/(h[i-1]*h[i])-h[i-1]*z[i-1])/d;
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301962104
GPR[SPVAP]-1661301962104
GPR[EPVAP]-1661301963160
GPR[EPVS]-1661301963160
========
for(int i=0;i<pointSet.size();i++){
g=2.0*(x[i+1]-x[i-1])-h[i-1]*mu[i-1];
z[i]=(3.0*(y[i+1]*h[i-1]-y[i]*(x[i+1]-x[i-1])+y[i-1]*h[i])/(h[i-1]*h[i])-h[i-1]*z[i-1])/d;

 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301963161
GPR[SPVAP]-1661301963161
GPR[EPVAP]-1661301964208
GPR[EPVS]-1661301964208
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
if(k>=mBlock.length){
mBlock=matrix.blocks[++mBlockIndex];
mIndex=0;
}
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301964210
GPR[SPVAP]-1661301964210
GPR[EPVAP]-1661301965253
GPR[EPVS]-1661301965253
========
for(int i=sum;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=xJ;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301965254
GPR[SPVAP]-1661301965254
GPR[EPVAP]-1661301966318
GPR[EPVS]-1661301966318
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot1;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301966322
GPR[SPVAP]-1661301966322
GPR[EPVAP]-1661301967406
GPR[EPVS]-1661301967406
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot5;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301967407
GPR[SPVAP]-1661301967407
GPR[EPVAP]-1661301968453
GPR[EPVS]-1661301968453
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=dot6;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301968454
GPR[SPVAP]-1661301968454
GPR[EPVAP]-1661301969501
GPR[EPVS]-1661301969501
========
for(int i=0;i<pointSet.size();i++){
interpolatedState[i]=currentState[i]-r*(v[0][i]-r*(v[1][i]+r*(v[2][i]+d*(v[3][i]+r*(v[4][i]+d*(v[5][i]+r*(v[6][i])))))));
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=sum;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301969502
GPR[SPVAP]-1661301969502
GPR[EPVAP]-1661301970574
GPR[EPVS]-1661301970574
========
for(int i=0;i<pointSet.size();i++){
 final T p=pointSet.get(i);
 final Cluster<T> nearest=getNearestCluster(resultSet,p);
 final double d=p.distanceFrom(nearest.getCenter());
sum+=d*d;
dx2[i]=k;
}
 final double r=random.nextDouble()*sum;

========
MM Copying to MM
GPR[SPVS]-1661301970580
GPR[SPVAP]-1661301970580
GPR[EPVAP]-1661301972496
GPR[SPVATF]-1661301972496
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM:   - org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661301974354
GPR[EPVS]-1661301974354
GPR[ESUN]-1661301974355
GPR[SSUN]-1661301974355
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer,187
========
if(dx2[i]>=r){
pos=i+1;
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1661301977840
GPR[SPVAP]-1661301977840
GPR[EPVAP]-1661301980265
GPR[EPVS]-1661301980265
========
if(dx2[i]>=r){
 final T p=pointSet.remove(i);
tiesTrace=new ArrayList<Integer>();
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1661301980266
GPR[SPVAP]-1661301980266
GPR[EPVAP]-1661301981582
GPR[EPVS]-1661301981582
========
if(dx2[i]>=r){
pos=i+1;
tiesTrace=new ArrayList<Integer>();

 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1661301981583
GPR[SPVAP]-1661301981583
GPR[EPVAP]-1661301982891
GPR[EPVS]-1661301982891
========
if(dx2[i]>=absolutePositivityThreshold){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1661301982894
GPR[SPVAP]-1661301982894
GPR[EPVAP]-1661301984210
GPR[EPVS]-1661301984210
========
if(dx2[i]>r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
MM Copying to MM
GPR[SPVS]-1661301984212
GPR[SPVAP]-1661301984212
GPR[EPVAP]-1661301988264
GPR[SPVATF]-1661301988264
TESTING : org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest::testSmallDistances
MM: Running ant (run.dev.tests)................................................ 
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1661318944667
GPR[EPVS]-1661318944667
========
if(pointSet.get(i).distanceFrom(p)>=r){
 final T p=pointSet.remove(i);
resultSet.add(new Cluster<T>(p));
break;
}

========
End running Math/57 results at /experiment_home///results/SimFix/Math/57/seed_282/
\n\nNode: host-59\n
\n\nDate: Tue 23 Aug 2022 10:29:04 PM PDT\n
Removing checked out dir script/workingdir/SimFix/math/math_57_buggy
Killing all java process
GPR[SSLE]-1661318945515
GPR[ESLE]-1661319005518
