Sleep 1m start
GPR[SSLI]-1659825555046
GPR[ESLI]-1659825615051
Running Nopol Closure 17b with approach: smt
Timezone: America/Los_Angeles
Seed 260
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/17/seed_260/
The file script/workingdir/Nopol/Closure_17 does not exist!
script/workingdir/Nopol/Closure_17
script/workingdir/Nopol/Closure_17
classpath:  script/workingdir/Nopol/Closure_17/build/classes:script/workingdir/Nopol/Closure_17/lib/args4j.jar:script/workingdir/Nopol/Closure_17/lib/guava.jar:script/workingdir/Nopol/Closure_17/lib/json.jar:script/workingdir/Nopol/Closure_17/lib/jsr305.jar:script/workingdir/Nopol/Closure_17/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_17/build/lib/rhino.jar:script/workingdir/Nopol/Closure_17/lib/ant.jar:script/workingdir/Nopol/Closure_17/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_17/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_17/lib/jarjar.jar:script/workingdir/Nopol/Closure_17/lib/junit.jar:script/workingdir/Nopol/Closure_17/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659825638116
GPR[ESLB]-1659825698121
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_17//build/classes:script/workingdir/Nopol/Closure_17//build/test:script/workingdir/Nopol/Closure_17/build/classes:script/workingdir/Nopol/Closure_17/lib/args4j.jar:script/workingdir/Nopol/Closure_17/lib/guava.jar:script/workingdir/Nopol/Closure_17/lib/json.jar:script/workingdir/Nopol/Closure_17/lib/jsr305.jar:script/workingdir/Nopol/Closure_17/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_17/build/lib/rhino.jar:script/workingdir/Nopol/Closure_17/lib/ant.jar:script/workingdir/Nopol/Closure_17/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_17/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_17/lib/jarjar.jar:script/workingdir/Nopol/Closure_17/lib/junit.jar:script/workingdir/Nopol/Closure_17/build/test
Node: host-48
Date init: Sat 06 Aug 2022 03:41:38 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_17/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_17/build/classes/, file:script/workingdir/Nopol/Closure_17/build/test/, file:script/workingdir/Nopol/Closure_17/build/classes/, file:script/workingdir/Nopol/Closure_17/lib/args4j.jar, file:script/workingdir/Nopol/Closure_17/lib/guava.jar, file:script/workingdir/Nopol/Closure_17/lib/json.jar, file:script/workingdir/Nopol/Closure_17/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_17/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_17/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_17/lib/ant.jar, file:script/workingdir/Nopol/Closure_17/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_17/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_17/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_17/lib/junit.jar, file:script/workingdir/Nopol/Closure_17/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_17/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/17/seed_260/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659825704070
GPR[ESUP]-1659825704070
GPR[SFL]-1659825704070
GPR[EFL]-1659825745876
GPR[SFP]-1659825745876
GPR[SSUN]-1659825747568
-283827935
GPR[SPVATF]-1659825748264
GPR[EPVATF]-1659825748302
[48952] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825748302
GPR[SSUN]-1659825748302
-1966087783
GPR[ESUN]-1659825748529
GPR[SSUN]-1659825748529
-1966087783
GPR[SPVATF]-1659825748745
GPR[EPVATF]-1659825748780
[49430] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825748780
GPR[SSUN]-1659825748780
-1659631726
GPR[ESUN]-1659825748989
GPR[SSUN]-1659825748989
130004992
GPR[ESUN]-1659825749194
GPR[SSUN]-1659825749194
130004992
GPR[SPVATF]-1659825749399
GPR[EPVATF]-1659825749428
[50078] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825749428
GPR[SSUN]-1659825749428
130004992
GPR[ESUN]-1659825750025
GPR[SSUN]-1659825750025
-1966087783
GPR[SPVATF]-1659825750236
GPR[EPVATF]-1659825750259
[50909] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825750259
GPR[SSUN]-1659825750259
-1966087783
GPR[SPVATF]-1659825750471
GPR[EPVATF]-1659825750494
[51144] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825750494
GPR[SSUN]-1659825750494
890942016
GPR[ESUN]-1659825750710
GPR[SSUN]-1659825750710
890942016
GPR[SPVATF]-1659825750922
GPR[EPVATF]-1659825750942
[51592] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825750942
GPR[SSUN]-1659825750942
890942016
GPR[SPVATF]-1659825751143
GPR[EPVATF]-1659825751163
[51813] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825751163
GPR[EPVATF]-1659825751182
[51832] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825751182
GPR[SSUN]-1659825751182
890942016
GPR[ESUN]-1659825751378
GPR[SSUN]-1659825751378
890942016
GPR[ESUN]-1659825751586
GPR[SSUN]-1659825751586
-1966087783
GPR[ESUN]-1659825751801
GPR[SSUN]-1659825751801
-1966087783
GPR[SPVATF]-1659825752019
GPR[EPVATF]-1659825752042
[52692] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825752042
GPR[EPVATF]-1659825752064
[52715] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825752065
GPR[SSUN]-1659825752065
-1966087783
GPR[ESUN]-1659825752276
GPR[SSUN]-1659825752276
-1966087783
GPR[SPVATF]-1659825752483
GPR[EPVATF]-1659825752502
[53152] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825752502
GPR[EPVATF]-1659825752520
[53170] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825752520
GPR[SSUN]-1659825752520
-1966087783
GPR[ESUN]-1659825752710
GPR[SSUN]-1659825752710
-1966087783
GPR[ESUN]-1659825753071
GPR[SSUN]-1659825753071
-1966087783
GPR[ESUN]-1659825753282
GPR[SSUN]-1659825753282
1613130706
GPR[ESUN]-1659825753519
GPR[SSUN]-1659825753519
1613130706
GPR[ESUN]-1659825753754
GPR[SSUN]-1659825753754
1613130706
GPR[SPVATF]-1659825753980
GPR[EPVATF]-1659825754180
[54831] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825754181
GPR[SSUN]-1659825754181
234947553
GPR[ESUN]-1659825754394
GPR[SSUN]-1659825754394
234947553
GPR[SPVATF]-1659825754611
GPR[EPVATF]-1659825754629
[55279] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825754630
GPR[EPVATF]-1659825754648
[55299] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825754649
GPR[SSUN]-1659825754649
234947553
GPR[ESUN]-1659825754858
GPR[SSUN]-1659825754858
234947553
GPR[SPVATF]-1659825755075
GPR[EPVATF]-1659825755091
[55741] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825755091
GPR[EPVATF]-1659825755107
[55757] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825755107
GPR[SSUN]-1659825755107
234947553
GPR[SPVATF]-1659825755315
GPR[EPVATF]-1659825755331
[55981] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825755331
GPR[SSUN]-1659825755331
234947553
GPR[ESUN]-1659825755551
GPR[SSUN]-1659825755551
234947553
GPR[ESUN]-1659825755760
GPR[SSUN]-1659825755760
234947553
GPR[SPVATF]-1659825755992
GPR[EPVATF]-1659825756009
[56660] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825756010
GPR[SSUN]-1659825756010
234947553
GPR[SPVATF]-1659825756216
GPR[EPVATF]-1659825756236
[56886] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825756236
GPR[SSUN]-1659825756236
234947553
GPR[SPVATF]-1659825756451
GPR[EPVATF]-1659825756470
[57120] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825756470
GPR[SSUN]-1659825756470
234947553
GPR[ESUN]-1659825756668
GPR[SSUN]-1659825756668
234947553
GPR[ESUN]-1659825756855
GPR[SSUN]-1659825756855
234947553
GPR[SPVATF]-1659825757060
GPR[EPVATF]-1659825757078
[57728] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825757078
GPR[SSUN]-1659825757078
234947553
GPR[SPVATF]-1659825757285
GPR[EPVATF]-1659825757306
[57956] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825757306
GPR[SSUN]-1659825757306
234947553
GPR[ESUN]-1659825757512
GPR[SSUN]-1659825757512
234947553
GPR[SPVATF]-1659825757730
GPR[EPVATF]-1659825757752
[58402] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825757752
GPR[SSUN]-1659825757752
234947553
GPR[SPVATF]-1659825757946
GPR[EPVATF]-1659825757962
[58612] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825757962
GPR[SSUN]-1659825757962
234947553
GPR[ESUN]-1659825758151
GPR[SSUN]-1659825758151
890942016
GPR[SPVATF]-1659825758352
GPR[EPVATF]-1659825758373
[59023] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825758373
GPR[EPVATF]-1659825758392
[59043] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825758393
GPR[SSUN]-1659825758393
890942016
GPR[SPVATF]-1659825758596
GPR[EPVATF]-1659825758617
[59267] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825758617
GPR[SSUN]-1659825758617
890942016
GPR[ESUN]-1659825758840
GPR[SSUN]-1659825758840
890942016
GPR[SPVATF]-1659825759058
GPR[EPVATF]-1659825759080
[59730] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825759080
GPR[SSUN]-1659825759080
890942016
GPR[SPVATF]-1659825759307
GPR[EPVATF]-1659825759329
[59980] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825759330
GPR[EPVATF]-1659825759353
[60003] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825759353
GPR[SSUN]-1659825759353
890942016
GPR[SPVATF]-1659825759574
GPR[EPVATF]-1659825759596
[60246] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825759596
GPR[SSUN]-1659825759596
890942016
GPR[SPVATF]-1659825759825
GPR[EPVATF]-1659825759847
[60498] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825759848
GPR[EPVATF]-1659825759868
[60518] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825759868
GPR[SSUN]-1659825759868
890942016
GPR[ESUN]-1659825760081
GPR[SSUN]-1659825760081
890942016
GPR[SPVATF]-1659825760293
GPR[EPVATF]-1659825760313
[60963] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825760313
GPR[SSUN]-1659825760313
890942016
GPR[SPVATF]-1659825760521
GPR[EPVATF]-1659825760542
[61192] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825760543
GPR[SSUN]-1659825760543
890942016
GPR[SPVATF]-1659825760760
GPR[EPVATF]-1659825760780
[61430] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825760781
GPR[SSUN]-1659825760781
890942016
GPR[ESUN]-1659825760991
GPR[SSUN]-1659825760991
1613130706
GPR[SPVATF]-1659825763510
GPR[EPVATF]-1659825763708
[64358] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825763708
GPR[EPVATF]-1659825763900
[64550] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825763900
GPR[SSUN]-1659825763900
1613130706
GPR[SPVATF]-1659825764147
GPR[EPVATF]-1659825764333
[64983] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825764333
GPR[SSUN]-1659825764333
1613130706
GPR[SPVATF]-1659825764577
GPR[EPVATF]-1659825764760
[65410] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825764761
GPR[EPVATF]-1659825764943
[65593] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825764943
GPR[SSUN]-1659825764943
1613130706
GPR[SPVATF]-1659825765186
GPR[EPVATF]-1659825765391
[66041] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825765392
GPR[EPVATF]-1659825765593
[66243] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825765593
GPR[SSUN]-1659825765593
1613130706
GPR[SPVATF]-1659825765830
GPR[EPVATF]-1659825766026
[66676] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825766026
GPR[EPVATF]-1659825766232
[66882] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825766232
GPR[SSUN]-1659825766232
1613130706
GPR[ESUN]-1659825766469
GPR[SSUN]-1659825766469
1613130706
GPR[ESUN]-1659825766713
GPR[SSUN]-1659825766713
1613130706
GPR[ESUN]-1659825766962
GPR[SSUN]-1659825766962
1613130706
GPR[ESUN]-1659825767195
GPR[SSUN]-1659825767195
1613130706
GPR[SPVATF]-1659825767437
GPR[EPVATF]-1659825767637
[68287] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825767637
GPR[EPVATF]-1659825767838
[68488] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825767838
GPR[SSUN]-1659825767838
1613130706
GPR[SPVATF]-1659825768070
GPR[EPVATF]-1659825768262
[68912] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825768262
GPR[SSUN]-1659825768262
1613130706
GPR[ESUN]-1659825768494
GPR[SSUN]-1659825768494
1613130706
GPR[SPVATF]-1659825768729
GPR[EPVATF]-1659825769538
[70188] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825769538
GPR[EPVATF]-1659825769735
[70385] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825769735
GPR[SSUN]-1659825769735
1613130706
GPR[ESUN]-1659825769974
GPR[SSUN]-1659825769974
1613130706
GPR[SPVATF]-1659825770208
GPR[EPVATF]-1659825770402
[71052] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825770402
GPR[EPVATF]-1659825770580
[71230] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825770580
GPR[SSUN]-1659825770580
-1966087783
GPR[ESUN]-1659825770786
GPR[SSUN]-1659825770786
-1966087783
GPR[SPVATF]-1659825770990
GPR[EPVATF]-1659825771015
[71665] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825771016
GPR[EPVATF]-1659825771038
[71689] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825771039
GPR[SSUN]-1659825771039
-1966087783
GPR[SPVATF]-1659825771242
GPR[EPVATF]-1659825771263
[71913] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825771263
GPR[SSUN]-1659825771263
-1966087783
GPR[SPVATF]-1659825771472
GPR[EPVATF]-1659825771498
[72148] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825771499
GPR[EPVATF]-1659825771523
[72173] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825771523
GPR[SSUN]-1659825771523
-1966087783
GPR[SPVATF]-1659825772058
GPR[EPVATF]-1659825772084
[72734] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825772085
GPR[EPVATF]-1659825772111
[72761] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825772111
GPR[SSUN]-1659825772111
-1966087783
GPR[SPVATF]-1659825772325
GPR[EPVATF]-1659825772348
[72998] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825772348
GPR[EPVATF]-1659825772371
[73021] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825772371
GPR[SSUN]-1659825772371
-1966087783
GPR[ESUN]-1659825772574
GPR[SSUN]-1659825772574
-1966087783
GPR[ESUN]-1659825772780
GPR[SSUN]-1659825772780
-1966087783
GPR[SPVATF]-1659825772981
GPR[EPVATF]-1659825773009
[73659] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825773010
GPR[EPVATF]-1659825773035
[73685] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825773035
GPR[SSUN]-1659825773035
-1966087783
GPR[SPVATF]-1659825773252
GPR[EPVATF]-1659825773278
[73928] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825773278
GPR[EPVATF]-1659825773304
[73954] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825773304
GPR[SSUN]-1659825773304
-1966087783
GPR[ESUN]-1659825773513
GPR[SSUN]-1659825773513
-1966087783
GPR[SPVATF]-1659825773725
GPR[EPVATF]-1659825773752
[74402] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825773752
GPR[SSUN]-1659825773752
-1966087783
GPR[SPVATF]-1659825773961
GPR[EPVATF]-1659825773988
[74638] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825773988
GPR[SSUN]-1659825773988
-1966087783
GPR[ESUN]-1659825774202
GPR[SSUN]-1659825774202
-1966087783
GPR[SPVATF]-1659825774407
GPR[EPVATF]-1659825774434
[75084] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825774434
GPR[SSUN]-1659825774434
-1966087783
GPR[ESUN]-1659825774641
GPR[SSUN]-1659825774641
-1966087783
GPR[ESUN]-1659825774855
GPR[SSUN]-1659825774855
-1966087783
GPR[SPVATF]-1659825775070
GPR[EPVATF]-1659825775095
[75745] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825775095
GPR[SSUN]-1659825775095
-1966087783
GPR[SPVATF]-1659825775307
GPR[EPVATF]-1659825775332
[75982] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825775332
GPR[SSUN]-1659825775332
-1966087783
GPR[SPVATF]-1659825775542
GPR[EPVATF]-1659825775559
[76210] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825775560
GPR[SSUN]-1659825775560
-1966087783
GPR[SPVATF]-1659825775777
GPR[EPVATF]-1659825775797
[76447] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825775797
GPR[SSUN]-1659825775797
-1966087783
GPR[SPVATF]-1659825776007
GPR[EPVATF]-1659825776028
[76678] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825776028
GPR[SSUN]-1659825776028
-1966087783
GPR[SPVATF]-1659825776236
GPR[EPVATF]-1659825776259
[76909] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825776259
GPR[SSUN]-1659825776259
-1966087783
GPR[SPVATF]-1659825776469
GPR[EPVATF]-1659825776488
[77138] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825776488
GPR[SSUN]-1659825776488
-1966087783
GPR[SPVATF]-1659825776689
GPR[EPVATF]-1659825776707
[77357] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825776707
GPR[SSUN]-1659825776707
-1966087783
GPR[SPVATF]-1659825776906
GPR[EPVATF]-1659825776924
[77574] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825776925
GPR[EPVATF]-1659825776942
[77592] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825776942
GPR[SSUN]-1659825776942
-1966087783
GPR[ESUN]-1659825777141
GPR[SSUN]-1659825777141
-622774852
GPR[SPVATF]-1659825777374
GPR[EPVATF]-1659825778708
GPR[SPS]-1659825778709
[80287] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:375.
GPR[EPS]-1659825779637
GPR[ESUN]-1659825779637
GPR[SSUN]-1659825779637
646738083
GPR[SPVATF]-1659825779998
GPR[EPVATF]-1659825781259
GPR[SPS]-1659825781259
GPR[EPS]-1659825789763
GPR[ESUN]-1659825789763
GPR[SSUN]-1659825789763
646738083
GPR[SPVATF]-1659825790081
GPR[EPVATF]-1659825791328
GPR[SPS]-1659825791328
GPR[EPS]-1659825799026
GPR[SPVATF]-1659825799027
GPR[EPVATF]-1659825800306
GPR[SPS]-1659825800306
GPR[EPS]-1659825808507
GPR[ESUN]-1659825808508
GPR[SSUN]-1659825808508
-132053243
GPR[SPVATF]-1659825808736
GPR[EPVATF]-1659825808754
[109405] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825808755
GPR[SSUN]-1659825808755
-132053243
GPR[SPVATF]-1659825808970
GPR[EPVATF]-1659825808988
[109638] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825808988
GPR[SSUN]-1659825808988
-132053243
GPR[SPVATF]-1659825809189
GPR[EPVATF]-1659825809207
[109857] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825809207
GPR[SSUN]-1659825809207
-132053243
GPR[SPVATF]-1659825809417
GPR[EPVATF]-1659825809438
[110089] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825809439
GPR[EPVATF]-1659825809458
[110108] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825809458
GPR[SSUN]-1659825809458
-132053243
GPR[ESUN]-1659825809681
GPR[SSUN]-1659825809681
-132053243
GPR[ESUN]-1659825809891
GPR[SSUN]-1659825809891
-132053243
GPR[SPVATF]-1659825810102
GPR[EPVATF]-1659825810123
[110773] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825810123
GPR[EPVATF]-1659825810143
[110793] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825810143
GPR[SSUN]-1659825810143
-132053243
GPR[ESUN]-1659825810360
GPR[SSUN]-1659825810360
-132053243
GPR[ESUN]-1659825810573
GPR[SSUN]-1659825810573
-132053243
GPR[ESUN]-1659825810778
GPR[SSUN]-1659825810778
-132053243
GPR[SPVATF]-1659825810998
GPR[EPVATF]-1659825811018
[111668] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825811018
GPR[EPVATF]-1659825811037
[111687] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825811037
GPR[SSUN]-1659825811037
-132053243
GPR[SPVATF]-1659825811328
GPR[EPVATF]-1659825811389
[112039] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825811389
GPR[SSUN]-1659825811389
-132053243
GPR[SPVATF]-1659825811908
GPR[EPVATF]-1659825811975
[112625] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825811975
GPR[EPVATF]-1659825812036
[112686] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825812036
GPR[SSUN]-1659825812036
-132053243
GPR[SPVATF]-1659825812610
GPR[EPVATF]-1659825812682
[113332] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825812682
GPR[SSUN]-1659825812682
-132053243
GPR[SPVATF]-1659825813233
GPR[EPVATF]-1659825813294
[113944] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825813294
GPR[SSUN]-1659825813294
-132053243
GPR[ESUN]-1659825813596
GPR[SSUN]-1659825813596
-132053243
GPR[SPVATF]-1659825813822
GPR[EPVATF]-1659825813842
[114492] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825813843
GPR[EPVATF]-1659825813862
[114512] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825813862
GPR[SSUN]-1659825813862
-132053243
GPR[ESUN]-1659825814084
GPR[SSUN]-1659825814084
-132053243
GPR[SPVATF]-1659825814291
GPR[EPVATF]-1659825814312
[114963] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825814313
GPR[SSUN]-1659825814313
-132053243
GPR[SPVATF]-1659825814532
GPR[EPVATF]-1659825814555
[115205] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825814555
GPR[SSUN]-1659825814555
-132053243
GPR[SPVATF]-1659825814768
GPR[EPVATF]-1659825814787
[115437] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825814787
GPR[SSUN]-1659825814787
-132053243
GPR[SPVATF]-1659825815000
GPR[EPVATF]-1659825815020
[115670] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825815020
GPR[SSUN]-1659825815020
-132053243
GPR[SPVATF]-1659825815222
GPR[EPVATF]-1659825815240
[115890] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825815240
GPR[SSUN]-1659825815240
-132053243
GPR[ESUN]-1659825815439
GPR[SSUN]-1659825815439
-1966087783
GPR[ESUN]-1659825815642
GPR[SSUN]-1659825815642
-1966087783
GPR[SPVATF]-1659825815850
GPR[EPVATF]-1659825815871
[116521] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825815871
GPR[EPVATF]-1659825815893
[116543] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825815893
GPR[SSUN]-1659825815893
-622774852
GPR[SPVATF]-1659825816138
GPR[EPVATF]-1659825817381
GPR[SPS]-1659825817381
[118597] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:468.
GPR[EPS]-1659825817948
GPR[ESUN]-1659825817948
GPR[SSUN]-1659825817948
-622774852
GPR[ESUN]-1659825818165
GPR[SSUN]-1659825818165
646738083
GPR[SPVATF]-1659825818449
GPR[EPVATF]-1659825819690
GPR[SPS]-1659825819691
GPR[EPS]-1659825827855
GPR[SPVATF]-1659825827855
GPR[EPVATF]-1659825829147
GPR[SPS]-1659825829147
GPR[EPS]-1659825845532
GPR[ESUN]-1659825845533
GPR[SSUN]-1659825845533
646738083
GPR[ESUN]-1659825845860
GPR[SSUN]-1659825845861
-622774852
GPR[ESUN]-1659825846141
GPR[SSUN]-1659825846141
-622774852
GPR[SPVATF]-1659825846386
GPR[EPVATF]-1659825847692
GPR[SPS]-1659825847692
[148883] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:383.
GPR[EPS]-1659825848233
GPR[SPVATF]-1659825848234
GPR[EPVATF]-1659825849527
GPR[SPS]-1659825849527
[150728] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:383.
GPR[EPS]-1659825850078
GPR[ESUN]-1659825850078
GPR[SSUN]-1659825850078
-622774852
GPR[SPVATF]-1659825850330
GPR[EPVATF]-1659825851664
GPR[SPS]-1659825851664
[153528] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:382.
GPR[EPS]-1659825852878
GPR[ESUN]-1659825852878
GPR[SSUN]-1659825852878
-622774852
GPR[SPVATF]-1659825853145
GPR[EPVATF]-1659825854605
GPR[SPS]-1659825854605
[155813] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:380.
GPR[EPS]-1659825855163
GPR[ESUN]-1659825855163
GPR[SSUN]-1659825855163
-622774852
GPR[SPVATF]-1659825855405
GPR[EPVATF]-1659825856699
GPR[SPS]-1659825856699
[157914] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:379.
GPR[EPS]-1659825857265
GPR[ESUN]-1659825857265
GPR[SSUN]-1659825857265
-622774852
GPR[SPVATF]-1659825857525
GPR[EPVATF]-1659825858814
GPR[SPS]-1659825858814
[160016] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:378.
GPR[EPS]-1659825859366
GPR[ESUN]-1659825859366
GPR[SSUN]-1659825859366
-622774852
GPR[SPVATF]-1659825859604
GPR[EPVATF]-1659825860898
GPR[SPS]-1659825860898
[162158] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:374.
GPR[EPS]-1659825861508
GPR[SPVATF]-1659825861509
GPR[EPVATF]-1659825862888
GPR[SPS]-1659825862888
[164091] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:374.
GPR[EPS]-1659825863441
GPR[ESUN]-1659825863441
GPR[SSUN]-1659825863441
GPR[ESUN]-1659825863441
GPR[SSUN]-1659825863441
GPR[ESUN]-1659825863441
GPR[SSUN]-1659825863441
-179796259
GPR[SPVATF]-1659825863700
GPR[EPVATF]-1659825864996
GPR[SPS]-1659825864996
[166523] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:208.
GPR[EPS]-1659825865873
GPR[ESUN]-1659825865873
GPR[SSUN]-1659825865873
1508981886
GPR[SPVATF]-1659825866104
GPR[EPVATF]-1659825867438
GPR[SPS]-1659825867438
[168651] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:832.
GPR[EPS]-1659825868001
GPR[ESUN]-1659825868001
GPR[SSUN]-1659825868002
-622774852
GPR[SPVATF]-1659825868246
GPR[EPVATF]-1659825869550
GPR[SPS]-1659825869550
[170554] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PrototypeObjectType extends com.google.javascript.rhino.jstype.ObjectType {
    private static final long serialVersionUID = 1L;

    private final java.lang.String className;

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType.Property> properties;

    private final boolean nativeType;

    private com.google.javascript.rhino.jstype.ObjectType implicitPrototypeFallback;

    private com.google.javascript.rhino.jstype.FunctionType ownerFunction = null;

    private boolean prettyPrint = false;

    private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;

    PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String className, com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        this(registry, className, implicitPrototype, false);
    }

    PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String className, com.google.javascript.rhino.jstype.ObjectType implicitPrototype, boolean nativeType) {
        super(registry);
        this.properties = com.google.common.collect.Maps.newTreeMap();
        this.className = className;
        this.nativeType = nativeType;
        if (nativeType || (implicitPrototype != null)) {
            setImplicitPrototype(implicitPrototype);
        } else {
            setImplicitPrototype(registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
        }
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType.Property getSlot(java.lang.String name) {
        if (properties.containsKey(name)) {
            return properties.get(name);
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            com.google.javascript.rhino.jstype.ObjectType.Property prop = implicitPrototype.getSlot(name);
            if (prop != null) {
                return prop;
            }
        }
        for (com.google.javascript.rhino.jstype.ObjectType interfaceType : getCtorExtendedInterfaces()) {
            com.google.javascript.rhino.jstype.ObjectType.Property prop = interfaceType.getSlot(name);
            if (prop != null) {
                return prop;
            }
        }
        return null;
    }

    @java.lang.Override
    public int getPropertiesCount() {
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype == null) {
            return this.properties.size();
        }
        int localCount = 0;
        for (java.lang.String property : properties.keySet()) {
            if (!implicitPrototype.hasProperty(property)) {
                localCount++;
            }
        }
        return implicitPrototype.getPropertiesCount() + localCount;
    }

    @java.lang.Override
    public boolean hasProperty(java.lang.String propertyName) {
        return isUnknownType() || (getSlot(propertyName) != null);
    }

    @java.lang.Override
    public boolean hasOwnProperty(java.lang.String propertyName) {
        return properties.get(propertyName) != null;
    }

    @java.lang.Override
    public java.util.Set<java.lang.String> getOwnPropertyNames() {
        return properties.keySet();
    }

    @java.lang.Override
    public boolean isPropertyTypeDeclared(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return false;
        }
        return !slot.isTypeInferred();
    }

    @java.lang.Override
    void collectPropertyNames(java.util.Set<java.lang.String> props) {
        for (java.lang.String prop : properties.keySet()) {
            props.add(prop);
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            implicitPrototype.collectPropertyNames(props);
        }
    }

    @java.lang.Override
    public boolean isPropertyTypeInferred(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return false;
        }
        return slot.isTypeInferred();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getPropertyType(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        return slot.getType();
    }

    @java.lang.Override
    public boolean isPropertyInExterns(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.isFromExterns();
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            return implicitPrototype.isPropertyInExterns(propertyName);
        }
        return false;
    }

    @java.lang.Override
    boolean defineProperty(java.lang.String name, com.google.javascript.rhino.jstype.JSType type, boolean inferred, com.google.javascript.rhino.Node propertyNode) {
        if (hasOwnDeclaredProperty(name)) {
            return false;
        }
        com.google.javascript.rhino.jstype.ObjectType.Property newProp = new com.google.javascript.rhino.jstype.ObjectType.Property(name, type, inferred, propertyNode);
        com.google.javascript.rhino.jstype.ObjectType.Property oldProp = properties.get(name);
        if (oldProp != null) {
            newProp.setJSDocInfo(oldProp.getJSDocInfo());
        }
        properties.put(name, newProp);
        return true;
    }

    @java.lang.Override
    public boolean removeProperty(java.lang.String name) {
        return properties.remove(name) != null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getPropertyNode(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.getNode();
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            return implicitPrototype.getPropertyNode(propertyName);
        }
        return null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.JSDocInfo getOwnPropertyJSDocInfo(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.getJSDocInfo();
        }
        return null;
    }

    @java.lang.Override
    public void setPropertyJSDocInfo(java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info) {
        if (info != null) {
            if (!properties.containsKey(propertyName)) {
                defineInferredProperty(propertyName, getPropertyType(propertyName), null);
            }
            com.google.javascript.rhino.jstype.ObjectType.Property property = properties.get(propertyName);
            if (property != null) {
                property.setJSDocInfo(info);
            }
        }
    }

    @java.lang.Override
    public boolean matchesNumberContext() {
        return (((isNumberObjectType() || isDateType()) || isBooleanObjectType()) || isStringObjectType()) || hasOverridenNativeProperty("valueOf");
    }

    @java.lang.Override
    public boolean matchesStringContext() {
        return ((((((isTheObjectType() || isStringObjectType()) || isDateType()) || isRegexpType()) || isArrayType()) || isNumberObjectType()) || isBooleanObjectType()) || hasOverridenNativeProperty("toString");
    }

    private boolean hasOverridenNativeProperty(java.lang.String propertyName) {
        if (isNativeObjectType()) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType propertyType = getPropertyType(propertyName);
        com.google.javascript.rhino.jstype.ObjectType nativeType = (this.isFunctionType()) ? registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_PROTOTYPE) : registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_PROTOTYPE);
        com.google.javascript.rhino.jstype.JSType nativePropertyType = nativeType.getPropertyType(propertyName);
        return propertyType != nativePropertyType;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType unboxesTo() {
        if (isStringObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
        } else if (isBooleanObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
        } else if (isNumberObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
        } else {
            return super.unboxesTo();
        }
    }

    @java.lang.Override
    public boolean matchesObjectContext() {
        return true;
    }

    @java.lang.Override
    public boolean canBeCalled() {
        return isRegexpType();
    }

    @java.lang.Override
    java.lang.String toStringHelper(boolean forAnnotations) {
        if (hasReferenceName()) {
            return getReferenceName();
        } else if (prettyPrint) {
            prettyPrint = false;
            java.util.Set<java.lang.String> propertyNames = com.google.common.collect.Sets.newTreeSet();
            for (com.google.javascript.rhino.jstype.ObjectType current = this; ((current != null) && (!current.isNativeObjectType())) && (propertyNames.size() <= com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES); current = current.getImplicitPrototype()) {
                propertyNames.addAll(current.getOwnPropertyNames());
            }
            java.lang.StringBuilder sb = new java.lang.StringBuilder();
            sb.append("{");
            int i = 0;
            for (java.lang.String property : propertyNames) {
                if (i > 0) {
                    sb.append(", ");
                }
                sb.append(property);
                sb.append(": ");
                sb.append(getPropertyType(property).toStringHelper(forAnnotations));
                ++i;
                if ((!forAnnotations) && (i == com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES)) {
                    sb.append(", ...");
                    break;
                }
            }
            sb.append("}");
            prettyPrint = true;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(17).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType",com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties",com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.ownerFunction",com.google.javascript.rhino.jstype.PrototypeObjectType.this.ownerFunction);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("propertyNames",propertyNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES",com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("i",i);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("forAnnotations",forAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint",com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.className",com.google.javascript.rhino.jstype.PrototypeObjectType.this.className);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.implicitPrototypeFallback",com.google.javascript.rhino.jstype.PrototypeObjectType.this.implicitPrototypeFallback);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(17).collectionEnds();
            }
            if (runtimeAngelicValue)
                return sb.toString();

        } else {
            return forAnnotations ? "?" : "{...}";
        }
    }

    void setPrettyPrint(boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
    }

    boolean isPrettyPrint() {
        return prettyPrint;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.FunctionType getConstructor() {
        return null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType getImplicitPrototype() {
        return implicitPrototypeFallback;
    }

    final void setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        com.google.common.base.Preconditions.checkState(!hasCachedValues());
        this.implicitPrototypeFallback = implicitPrototype;
    }

    @java.lang.Override
    public java.lang.String getReferenceName() {
        if (className != null) {
            return className;
        } else if (ownerFunction != null) {
            return ownerFunction.getReferenceName() + ".prototype";
        } else {
            return null;
        }
    }

    @java.lang.Override
    public boolean hasReferenceName() {
        return (className != null) || (ownerFunction != null);
    }

    @java.lang.Override
    public boolean isSubtype(com.google.javascript.rhino.jstype.JSType that) {
        if (com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(this, that)) {
            return true;
        }
        if (that.isUnionType()) {
            return false;
        }
        if (that.isRecordType()) {
            return com.google.javascript.rhino.jstype.RecordType.isSubtype(this, that.toMaybeRecordType());
        }
        com.google.javascript.rhino.jstype.ObjectType thatObj = that.toObjectType();
        com.google.javascript.rhino.jstype.ObjectType thatCtor = (thatObj == null) ? null : thatObj.getConstructor();
        if ((thatCtor != null) && thatCtor.isInterface()) {
            java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> thisInterfaces = getCtorImplementedInterfaces();
            for (com.google.javascript.rhino.jstype.ObjectType thisInterface : thisInterfaces) {
                if (thisInterface.isSubtype(that)) {
                    return true;
                }
            }
        }
        if ((getConstructor() != null) && getConstructor().isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType thisInterface : getCtorExtendedInterfaces()) {
                if (thisInterface.isSubtype(that)) {
                    return true;
                }
            }
        }
        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {
            return true;
        }
        return this.isImplicitPrototype(thatObj);
    }

    private boolean implicitPrototypeChainIsUnknown() {
        com.google.javascript.rhino.jstype.ObjectType p = getImplicitPrototype();
        while (p != null) {
            if (p.isUnknownType()) {
                return true;
            }
            p = p.getImplicitPrototype();
        } 
        return false;
    }

    @java.lang.Override
    public boolean hasCachedValues() {
        return super.hasCachedValues();
    }

    @java.lang.Override
    public boolean isNativeObjectType() {
        return nativeType;
    }

    @java.lang.Override
    void setOwnerFunction(com.google.javascript.rhino.jstype.FunctionType type) {
        com.google.common.base.Preconditions.checkState((ownerFunction == null) || (type == null));
        ownerFunction = type;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.FunctionType getOwnerFunction() {
        return ownerFunction;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getCtorImplementedInterfaces() {
        return isFunctionPrototypeType() ? getOwnerFunction().getImplementedInterfaces() : com.google.common.collect.ImmutableList.<com.google.javascript.rhino.jstype.ObjectType>of();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getCtorExtendedInterfaces() {
        return isFunctionPrototypeType() ? getOwnerFunction().getExtendedInterfaces() : com.google.common.collect.ImmutableList.<com.google.javascript.rhino.jstype.ObjectType>of();
    }

    @java.lang.Override
    com.google.javascript.rhino.jstype.JSType resolveInternal(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        setResolvedTypeInternal(this);
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            implicitPrototypeFallback = ((com.google.javascript.rhino.jstype.ObjectType) (implicitPrototype.resolve(t, scope)));
        }
        for (com.google.javascript.rhino.jstype.ObjectType.Property prop : properties.values()) {
            prop.setType(com.google.javascript.rhino.jstype.JSType.safeResolve(prop.getType(), t, scope));
        }
        return this;
    }

    @java.lang.Override
    public void matchConstraint(com.google.javascript.rhino.jstype.ObjectType constraintObj) {
        if (hasReferenceName()) {
            return;
        }
        if (constraintObj.isRecordType()) {
            for (java.lang.String prop : constraintObj.getOwnPropertyNames()) {
                com.google.javascript.rhino.jstype.JSType propType = constraintObj.getPropertyType(prop);
                if (!isPropertyTypeDeclared(prop)) {
                    com.google.javascript.rhino.jstype.JSType typeToInfer = propType;
                    if (!hasProperty(prop)) {
                        typeToInfer = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
                    }
                    defineInferredProperty(prop, typeToInfer, null);
                }
            }
        }
    }
}
[170554] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659825869904
GPR[SSUN]-1659825869904
-622774852
GPR[SPVATF]-1659825870151
GPR[EPVATF]-1659825871442
GPR[SPS]-1659825871442
[172687] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:391.
GPR[EPS]-1659825872038
GPR[ESUN]-1659825872038
GPR[SSUN]-1659825872038
-622774852
GPR[SPVATF]-1659825872274
GPR[EPVATF]-1659825873596
GPR[SPS]-1659825873596
[174783] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:389.
GPR[EPS]-1659825874133
GPR[ESUN]-1659825874133
GPR[SSUN]-1659825874133
-622774852
GPR[SPVATF]-1659825874366
GPR[EPVATF]-1659825875663
GPR[SPS]-1659825875663
[176854] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:373.
GPR[EPS]-1659825876204
GPR[ESUN]-1659825876204
GPR[SSUN]-1659825876204
-622774852
GPR[ESUN]-1659825876439
GPR[SSUN]-1659825876439
-622774852
GPR[SPVATF]-1659825876729
GPR[EPVATF]-1659825878029
GPR[SPS]-1659825878029
[179253] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:370.
GPR[EPS]-1659825878603
GPR[ESUN]-1659825878603
GPR[SSUN]-1659825878603
-622774852
GPR[ESUN]-1659825878859
GPR[SSUN]-1659825878859
-622774852
GPR[SPVATF]-1659825879088
GPR[EPVATF]-1659825880419
GPR[SPS]-1659825880419
[181718] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:366.
GPR[EPS]-1659825881068
GPR[ESUN]-1659825881068
GPR[SSUN]-1659825881068
-622774852
GPR[ESUN]-1659825881307
GPR[SSUN]-1659825881307
-622774852
GPR[SPVATF]-1659825881538
GPR[EPVATF]-1659825883707
GPR[SPS]-1659825883707
[186500] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:362.
GPR[EPS]-1659825885850
GPR[ESUN]-1659825885850
GPR[SSUN]-1659825885850
-622774852
GPR[ESUN]-1659825886086
GPR[SSUN]-1659825886086
-622774852
GPR[SPVATF]-1659825886313
GPR[EPVATF]-1659825887664
GPR[SPS]-1659825887664
[188841] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:358.
GPR[EPS]-1659825888191
GPR[ESUN]-1659825888191
GPR[SSUN]-1659825888191
-622774852
GPR[SPVATF]-1659825888414
GPR[EPVATF]-1659825889739
GPR[SPS]-1659825889739
[190719] ERROR ConstraintModelBuilder - Unable to compile the change: 
class PrototypeObjectType extends com.google.javascript.rhino.jstype.ObjectType {
    private static final long serialVersionUID = 1L;

    private final java.lang.String className;

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.jstype.ObjectType.Property> properties;

    private final boolean nativeType;

    private com.google.javascript.rhino.jstype.ObjectType implicitPrototypeFallback;

    private com.google.javascript.rhino.jstype.FunctionType ownerFunction = null;

    private boolean prettyPrint = false;

    private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;

    PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String className, com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        this(registry, className, implicitPrototype, false);
    }

    PrototypeObjectType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, java.lang.String className, com.google.javascript.rhino.jstype.ObjectType implicitPrototype, boolean nativeType) {
        super(registry);
        this.properties = com.google.common.collect.Maps.newTreeMap();
        this.className = className;
        this.nativeType = nativeType;
        if (nativeType || (implicitPrototype != null)) {
            setImplicitPrototype(implicitPrototype);
        } else {
            setImplicitPrototype(registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
        }
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType.Property getSlot(java.lang.String name) {
        if (properties.containsKey(name)) {
            return properties.get(name);
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            com.google.javascript.rhino.jstype.ObjectType.Property prop = implicitPrototype.getSlot(name);
            if (prop != null) {
                return prop;
            }
        }
        for (com.google.javascript.rhino.jstype.ObjectType interfaceType : getCtorExtendedInterfaces()) {
            com.google.javascript.rhino.jstype.ObjectType.Property prop = interfaceType.getSlot(name);
            if (prop != null) {
                return prop;
            }
        }
        return null;
    }

    @java.lang.Override
    public int getPropertiesCount() {
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype == null) {
            return this.properties.size();
        }
        int localCount = 0;
        for (java.lang.String property : properties.keySet()) {
            if (!implicitPrototype.hasProperty(property)) {
                localCount++;
            }
        }
        return implicitPrototype.getPropertiesCount() + localCount;
    }

    @java.lang.Override
    public boolean hasProperty(java.lang.String propertyName) {
        return isUnknownType() || (getSlot(propertyName) != null);
    }

    @java.lang.Override
    public boolean hasOwnProperty(java.lang.String propertyName) {
        return properties.get(propertyName) != null;
    }

    @java.lang.Override
    public java.util.Set<java.lang.String> getOwnPropertyNames() {
        return properties.keySet();
    }

    @java.lang.Override
    public boolean isPropertyTypeDeclared(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return false;
        }
        return !slot.isTypeInferred();
    }

    @java.lang.Override
    void collectPropertyNames(java.util.Set<java.lang.String> props) {
        for (java.lang.String prop : properties.keySet()) {
            props.add(prop);
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            implicitPrototype.collectPropertyNames(props);
        }
    }

    @java.lang.Override
    public boolean isPropertyTypeInferred(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return false;
        }
        return slot.isTypeInferred();
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getPropertyType(java.lang.String property) {
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> slot = getSlot(property);
        if (slot == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        return slot.getType();
    }

    @java.lang.Override
    public boolean isPropertyInExterns(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.isFromExterns();
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            return implicitPrototype.isPropertyInExterns(propertyName);
        }
        return false;
    }

    @java.lang.Override
    boolean defineProperty(java.lang.String name, com.google.javascript.rhino.jstype.JSType type, boolean inferred, com.google.javascript.rhino.Node propertyNode) {
        if (hasOwnDeclaredProperty(name)) {
            return false;
        }
        com.google.javascript.rhino.jstype.ObjectType.Property newProp = new com.google.javascript.rhino.jstype.ObjectType.Property(name, type, inferred, propertyNode);
        com.google.javascript.rhino.jstype.ObjectType.Property oldProp = properties.get(name);
        if (oldProp != null) {
            newProp.setJSDocInfo(oldProp.getJSDocInfo());
        }
        properties.put(name, newProp);
        return true;
    }

    @java.lang.Override
    public boolean removeProperty(java.lang.String name) {
        return properties.remove(name) != null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getPropertyNode(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.getNode();
        }
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            return implicitPrototype.getPropertyNode(propertyName);
        }
        return null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.JSDocInfo getOwnPropertyJSDocInfo(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType.Property p = properties.get(propertyName);
        if (p != null) {
            return p.getJSDocInfo();
        }
        return null;
    }

    @java.lang.Override
    public void setPropertyJSDocInfo(java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info) {
        if (info != null) {
            if (!properties.containsKey(propertyName)) {
                defineInferredProperty(propertyName, getPropertyType(propertyName), null);
            }
            com.google.javascript.rhino.jstype.ObjectType.Property property = properties.get(propertyName);
            if (property != null) {
                property.setJSDocInfo(info);
            }
        }
    }

    @java.lang.Override
    public boolean matchesNumberContext() {
        return (((isNumberObjectType() || isDateType()) || isBooleanObjectType()) || isStringObjectType()) || hasOverridenNativeProperty("valueOf");
    }

    @java.lang.Override
    public boolean matchesStringContext() {
        return ((((((isTheObjectType() || isStringObjectType()) || isDateType()) || isRegexpType()) || isArrayType()) || isNumberObjectType()) || isBooleanObjectType()) || hasOverridenNativeProperty("toString");
    }

    private boolean hasOverridenNativeProperty(java.lang.String propertyName) {
        if (isNativeObjectType()) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType propertyType = getPropertyType(propertyName);
        com.google.javascript.rhino.jstype.ObjectType nativeType = (this.isFunctionType()) ? registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_PROTOTYPE) : registry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_PROTOTYPE);
        com.google.javascript.rhino.jstype.JSType nativePropertyType = nativeType.getPropertyType(propertyName);
        return propertyType != nativePropertyType;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType unboxesTo() {
        if (isStringObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
        } else if (isBooleanObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
        } else if (isNumberObjectType()) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
        } else {
            return super.unboxesTo();
        }
    }

    @java.lang.Override
    public boolean matchesObjectContext() {
        return true;
    }

    @java.lang.Override
    public boolean canBeCalled() {
        return isRegexpType();
    }

    @java.lang.Override
    java.lang.String toStringHelper(boolean forAnnotations) {
        if (hasReferenceName()) {
            return getReferenceName();
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(25).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType",com.google.javascript.rhino.jstype.PrototypeObjectType.this.nativeType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties",com.google.javascript.rhino.jstype.PrototypeObjectType.this.properties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.ownerFunction",com.google.javascript.rhino.jstype.PrototypeObjectType.this.ownerFunction);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES",com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("forAnnotations",forAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint",com.google.javascript.rhino.jstype.PrototypeObjectType.this.prettyPrint);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.className",com.google.javascript.rhino.jstype.PrototypeObjectType.this.className);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectInput("com.google.javascript.rhino.jstype.PrototypeObjectType.this.implicitPrototypeFallback",com.google.javascript.rhino.jstype.PrototypeObjectType.this.implicitPrototypeFallback);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(25).collectionEnds();
            }
            if (runtimeAngelicValue) if (prettyPrint) {
                prettyPrint = false;
                java.util.Set<java.lang.String> propertyNames = com.google.common.collect.Sets.newTreeSet();
                for (com.google.javascript.rhino.jstype.ObjectType current = this; ((current != null) && (!current.isNativeObjectType())) && (propertyNames.size() <= com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES); current = current.getImplicitPrototype()) {
                    propertyNames.addAll(current.getOwnPropertyNames());
                }
                java.lang.StringBuilder sb = new java.lang.StringBuilder();
                sb.append("{");
                int i = 0;
                for (java.lang.String property : propertyNames) {
                    if (i > 0) {
                        sb.append(", ");
                    }
                    sb.append(property);
                    sb.append(": ");
                    sb.append(getPropertyType(property).toStringHelper(forAnnotations));
                    ++i;
                    if ((!forAnnotations) && (i == com.google.javascript.rhino.jstype.PrototypeObjectType.MAX_PRETTY_PRINTED_PROPERTIES)) {
                        sb.append(", ...");
                        break;
                    }
                }
                sb.append("}");
                prettyPrint = true;
                return sb.toString();
            } else {
                return forAnnotations ? "?" : "{...}";
            }
        }
    }

    void setPrettyPrint(boolean prettyPrint) {
        this.prettyPrint = prettyPrint;
    }

    boolean isPrettyPrint() {
        return prettyPrint;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.FunctionType getConstructor() {
        return null;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType getImplicitPrototype() {
        return implicitPrototypeFallback;
    }

    final void setImplicitPrototype(com.google.javascript.rhino.jstype.ObjectType implicitPrototype) {
        com.google.common.base.Preconditions.checkState(!hasCachedValues());
        this.implicitPrototypeFallback = implicitPrototype;
    }

    @java.lang.Override
    public java.lang.String getReferenceName() {
        if (className != null) {
            return className;
        } else if (ownerFunction != null) {
            return ownerFunction.getReferenceName() + ".prototype";
        } else {
            return null;
        }
    }

    @java.lang.Override
    public boolean hasReferenceName() {
        return (className != null) || (ownerFunction != null);
    }

    @java.lang.Override
    public boolean isSubtype(com.google.javascript.rhino.jstype.JSType that) {
        if (com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(this, that)) {
            return true;
        }
        if (that.isUnionType()) {
            return false;
        }
        if (that.isRecordType()) {
            return com.google.javascript.rhino.jstype.RecordType.isSubtype(this, that.toMaybeRecordType());
        }
        com.google.javascript.rhino.jstype.ObjectType thatObj = that.toObjectType();
        com.google.javascript.rhino.jstype.ObjectType thatCtor = (thatObj == null) ? null : thatObj.getConstructor();
        if ((thatCtor != null) && thatCtor.isInterface()) {
            java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> thisInterfaces = getCtorImplementedInterfaces();
            for (com.google.javascript.rhino.jstype.ObjectType thisInterface : thisInterfaces) {
                if (thisInterface.isSubtype(that)) {
                    return true;
                }
            }
        }
        if ((getConstructor() != null) && getConstructor().isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType thisInterface : getCtorExtendedInterfaces()) {
                if (thisInterface.isSubtype(that)) {
                    return true;
                }
            }
        }
        if (isUnknownType() || implicitPrototypeChainIsUnknown()) {
            return true;
        }
        return this.isImplicitPrototype(thatObj);
    }

    private boolean implicitPrototypeChainIsUnknown() {
        com.google.javascript.rhino.jstype.ObjectType p = getImplicitPrototype();
        while (p != null) {
            if (p.isUnknownType()) {
                return true;
            }
            p = p.getImplicitPrototype();
        } 
        return false;
    }

    @java.lang.Override
    public boolean hasCachedValues() {
        return super.hasCachedValues();
    }

    @java.lang.Override
    public boolean isNativeObjectType() {
        return nativeType;
    }

    @java.lang.Override
    void setOwnerFunction(com.google.javascript.rhino.jstype.FunctionType type) {
        com.google.common.base.Preconditions.checkState((ownerFunction == null) || (type == null));
        ownerFunction = type;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.FunctionType getOwnerFunction() {
        return ownerFunction;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getCtorImplementedInterfaces() {
        return isFunctionPrototypeType() ? getOwnerFunction().getImplementedInterfaces() : com.google.common.collect.ImmutableList.<com.google.javascript.rhino.jstype.ObjectType>of();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> getCtorExtendedInterfaces() {
        return isFunctionPrototypeType() ? getOwnerFunction().getExtendedInterfaces() : com.google.common.collect.ImmutableList.<com.google.javascript.rhino.jstype.ObjectType>of();
    }

    @java.lang.Override
    com.google.javascript.rhino.jstype.JSType resolveInternal(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        setResolvedTypeInternal(this);
        com.google.javascript.rhino.jstype.ObjectType implicitPrototype = getImplicitPrototype();
        if (implicitPrototype != null) {
            implicitPrototypeFallback = ((com.google.javascript.rhino.jstype.ObjectType) (implicitPrototype.resolve(t, scope)));
        }
        for (com.google.javascript.rhino.jstype.ObjectType.Property prop : properties.values()) {
            prop.setType(com.google.javascript.rhino.jstype.JSType.safeResolve(prop.getType(), t, scope));
        }
        return this;
    }

    @java.lang.Override
    public void matchConstraint(com.google.javascript.rhino.jstype.ObjectType constraintObj) {
        if (hasReferenceName()) {
            return;
        }
        if (constraintObj.isRecordType()) {
            for (java.lang.String prop : constraintObj.getOwnPropertyNames()) {
                com.google.javascript.rhino.jstype.JSType propType = constraintObj.getPropertyType(prop);
                if (!isPropertyTypeDeclared(prop)) {
                    com.google.javascript.rhino.jstype.JSType typeToInfer = propType;
                    if (!hasProperty(prop)) {
                        typeToInfer = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE).getLeastSupertype(propType);
                    }
                    defineInferredProperty(prop, typeToInfer, null);
                }
            }
        }
    }
}
[190719] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659825890069
GPR[EPVATF]-1659825891348
GPR[SPS]-1659825891348
[192515] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:356.
GPR[EPS]-1659825891865
GPR[ESUN]-1659825891865
GPR[SSUN]-1659825891865
-1966087783
GPR[SPVATF]-1659825892061
GPR[EPVATF]-1659825892079
[192729] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659825892079
GPR[EPVATF]-1659825892096
[192746] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825892096
GPR[SSUN]-1659825892096
-1966087783
GPR[ESUN]-1659825892298
GPR[SSUN]-1659825892298
GPR[ESUN]-1659825892298
GPR[SSUN]-1659825892298
-1797850673
GPR[SPVATF]-1659825892574
GPR[EPVATF]-1659825893902
GPR[SPS]-1659825893902
[195043] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    static final com.google.javascript.jscomp.DiagnosticType BAD_DELETE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_DELETE_OPERAND", "delete operator needs a reference operand");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST_NO_RESULT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST_NO_RESULT", "condition always evaluates to the same value\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{0} cannot extend this type; " + ("a constructor can only extend objects " + "and an interface can only extend interfaces"));

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final com.google.javascript.jscomp.CheckLevel reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.ScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = reportUnknownTypes;
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride, reportUnknownTypes);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING, com.google.javascript.jscomp.CheckLevel.OFF);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                if (!parent.isFunction()) {
                    ensureTyped(t, n, getJSType(n.getFirstChild()));
                } else {
                    typeable = false;
                }
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !(parent.isAssign() && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                typeable = true;
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !parent.isExprResult();
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    if ((n.getType() == com.google.javascript.rhino.Token.EQ) || (n.getType() == com.google.javascript.rhino.Token.NE)) {
                        result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                        if (n.isNE()) {
                            result = result.not();
                        }
                    } else if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        result = (n.getType() == com.google.javascript.rhino.Token.SHEQ) ? com.google.javascript.rhino.jstype.TernaryValue.FALSE : com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                    }
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right);
                validator.expectObject(t, n, rightType, "'in' requires an object");
                validator.expectString(t, left, leftType, "left side of 'in'");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, leftType, "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if (n.isObjectLit() && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.isObjectLit()) {
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes.isOn()) {
                compiler.report(t.makeError(n, reportUnknownTypes, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            java.lang.String property = lvalue.getLastChild().getString();
            if (object.isGetProp()) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);
                }
            }
            checkEnumAlias(t, info, rvalue);
            if (property.equals("prototype")) {
                if ((objectJsType != null) && objectJsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = objectJsType.toMaybeFunctionType();
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                        return;
                    }
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                    com.google.javascript.rhino.jstype.JSType expectedType = type.getPropertyType(property);
                    if (!expectedType.isUnknownType()) {
                        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), expectedType, object, property);
                        checkPropertyInheritanceOnGetpropAssign(t, assign, object, property, info, expectedType);
                        return;
                    }
                }
            }
            checkPropertyInheritanceOnGetpropAssign(t, assign, object, property, info, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        if (lvalue.isQualifiedName()) {
            com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(assign.getLastChild());
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getQualifiedName());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
                if (com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(lvalue).isThis() && (t.getScope() != var.getScope())) {
                    return;
                }
                if (var.getType() != null) {
                    leftType = var.getType();
                }
            }
        }
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void checkPropertyInheritanceOnGetpropAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (object.isGetProp()) {
            com.google.javascript.rhino.Node object2 = object.getFirstChild();
            java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
            if ("prototype".equals(property2)) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object2);
                if (jsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
                    if (functionType.isConstructor() || functionType.isInterface()) {
                        checkDeclaredPropertyInheritance(t, assign, functionType, property, info, propertyType);
                    }
                }
            }
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit) {
        if (objlit.isFromExterns()) {
            ensureTyped(t, key);
            return;
        }
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        com.google.javascript.rhino.jstype.JSType allowedValueType = keyType;
        if (allowedValueType.isEnumElementType()) {
            allowedValueType = allowedValueType.toMaybeEnumElementType().getPrimitiveType();
        }
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getInstanceType().hasProperty(propertyName);
        boolean superClassHasDeclaredProperty = (superClass != null) && superClass.getInstanceType().isPropertyTypeDeclared(propertyName);
        boolean superInterfaceHasProperty = false;
        boolean superInterfaceHasDeclaredProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfaceHasProperty = superInterfaceHasProperty || interfaceType.hasProperty(propertyName);
                superInterfaceHasDeclaredProperty = superInterfaceHasDeclaredProperty || interfaceType.isPropertyTypeDeclared(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.ObjectType topInstanceType = (superClassHasDeclaredProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        boolean declaredLocally = ctorType.isConstructor() && (ctorType.getPrototype().hasOwnProperty(propertyName) || ctorType.getInstanceType().hasOwnProperty(propertyName));
        if (((reportMissingOverride.isOn() && (!declaredOverride)) && superClassHasDeclaredProperty) && declaredLocally) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (superClassHasDeclaredProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getInstanceType().getPropertyType(propertyName);
            if (!propertyType.canAssignTo(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfaceHasDeclaredProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.canAssignTo(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (((!foundInterfaceProperty) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if (!rvalueType.isFunctionType()) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if (assign.getLastChild().isFunction() && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.PARAM_LIST)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if ((n.getJSType() != null) && parent.isAssign()) {
            return;
        }
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (!validator.expectNotNullOrUndefined(t, n, childType, "No properties on this expression", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            ensureTyped(t, n);
            return;
        }
        checkPropertyAccess(childType, property.getString(), t, n);
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
        if (propType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            childType = childType.autobox();
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(childType);
            if (objectType != null) {
                if ((!objectType.hasProperty(propName)) || objectType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                    if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                    } else {
                        checkPropertyAccessHelper(objectType, propName, t, n);
                    }
                }
            } else {
                checkPropertyAccessHelper(childType, propName, t, n);
            }
        }
    }

    private void checkPropertyAccessHelper(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        if (((!objectType.isEmptyType()) && reportMissingProperties) && (!isPropertyTest(n))) {
            if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
            }
        }
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return parent.getParent().isOr() && (parent.getParent().getFirstChild() == parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = n.getLastChild();
        validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                checkEnumAlias(t, info, value);
                if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
        if ((type.isConstructor() || type.isEmptyType()) || type.isUnknownType()) {
            com.google.javascript.rhino.jstype.FunctionType fnType = type.toMaybeFunctionType();
            if (fnType != null) {
                visitParameterList(t, n, fnType);
                ensureTyped(t, n, fnType.getInstanceType());
            } else {
                ensureTyped(t, n);
            }
        } else {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        java.util.Set<java.lang.String> currentPropertyNames = interfaceType.getPropertyNames();
        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(n.getJSType());
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getSuperClassConstructor();
            if (((baseConstructor != null) && (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE))) && (baseConstructor.isInterface() && functionType.isConstructor())) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
            } else {
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
                }
            }
            if (functionType.hasImplementedInterfaces()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = childType.toMaybeFunctionType();
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if ((functionJSDocInfo != null) && (functionJSDocInfo.getAssociatedNode() != null)) {
                isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!functionType.getTypeOfThis().isNativeObjectType())) && (!(child.isGetElem() || child.isGetProp()))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node function = t.getEnclosingFunction();
        if (function == null) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(function);
        if (jsType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                actualReturnType = getJSType(valueNode);
            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumAlias(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.JSDocInfo declInfo, com.google.javascript.rhino.Node value) {
        if ((declInfo == null) || (!declInfo.hasEnumParameterType())) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
        if (!valueType.isEnumType()) {
            return;
        }
        com.google.javascript.rhino.jstype.EnumType valueEnumType = valueType.toMaybeEnumType();
        com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), "incompatible enum element types");
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(27).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_DELETE",com.google.javascript.jscomp.TypeCheck.BAD_DELETE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("jsType",jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectionEnds();
            }
            if (runtimeAngelicValue)
                return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);

        } else {
            return jsType;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((!n.isFunction()) || type.isFunctionType()) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.hasType()) {
                com.google.javascript.rhino.jstype.JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);
                validator.expectCanCast(t, n, infoType, type);
                type = infoType;
            }
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.isGetProp()) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        if (total == 0) {
            return 0.0;
        } else {
            return (100.0 * typedCount) / total;
        }
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[195043] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659825894393
GPR[SSUN]-1659825894394
-1251822497
GPR[ESUN]-1659825894595
GPR[SSUN]-1659825894595
-1251822497
GPR[SPVATF]-1659825894795
GPR[EPVATF]-1659825896083
GPR[SPS]-1659825896083
[197201] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:240.
GPR[EPS]-1659825896551
GPR[ESUN]-1659825896552
GPR[SSUN]-1659825896552
1508981886
GPR[SPVATF]-1659825896781
GPR[EPVATF]-1659825898053
GPR[SPS]-1659825898053
[199215] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:831.
GPR[EPS]-1659825898565
GPR[SPVATF]-1659825898565
GPR[EPVATF]-1659825899953
GPR[SPS]-1659825899953
[201146] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:831.
GPR[EPS]-1659825900496
GPR[ESUN]-1659825900496
GPR[SSUN]-1659825900496
466431456
GPR[SPVATF]-1659825900794
GPR[EPVATF]-1659825902117
GPR[SPS]-1659825902117
[203504] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:691.
GPR[EPS]-1659825902854
GPR[ESUN]-1659825902854
GPR[SSUN]-1659825902854
-622774852
GPR[SPVATF]-1659825903092
GPR[EPVATF]-1659825904471
GPR[SPS]-1659825904471
[205655] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:476.
GPR[EPS]-1659825905005
GPR[ESUN]-1659825905005
GPR[SSUN]-1659825905005
466431456
GPR[SPVATF]-1659825905292
GPR[EPVATF]-1659825906669
GPR[SPS]-1659825906669
[208000] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:695.
GPR[EPS]-1659825907350
GPR[ESUN]-1659825907350
GPR[SSUN]-1659825907350
466431456
GPR[SPVATF]-1659825907629
GPR[EPVATF]-1659825908951
GPR[SPS]-1659825908951
[210341] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:690.
GPR[EPS]-1659825909691
GPR[SPVATF]-1659825909691
GPR[EPVATF]-1659825911028
GPR[SPS]-1659825911028
[212714] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:690.
GPR[EPS]-1659825912064
GPR[ESUN]-1659825912064
GPR[SSUN]-1659825912064
466431456
GPR[ESUN]-1659825912341
GPR[SSUN]-1659825912341
466431456
GPR[ESUN]-1659825912639
GPR[SSUN]-1659825912639
466431456
GPR[ESUN]-1659825912933
GPR[SSUN]-1659825912933
-1797850673
GPR[SPVATF]-1659825913191
GPR[EPVATF]-1659825914617
GPR[SPS]-1659825914617
[215932] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1038.
GPR[EPS]-1659825915282
GPR[ESUN]-1659825915283
GPR[SSUN]-1659825915283
-46850221
GPR[ESUN]-1659825915512
GPR[SSUN]-1659825915512
-46850221
GPR[ESUN]-1659825915753
GPR[SSUN]-1659825915753
-46850221
GPR[SPVATF]-1659825915990
GPR[EPVATF]-1659825917385
GPR[SPS]-1659825917385
[218583] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:217.
GPR[EPS]-1659825917933
GPR[SPVATF]-1659825917933
GPR[EPVATF]-1659825919403
GPR[SPS]-1659825919403
[220692] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:217.
GPR[EPS]-1659825920042
GPR[ESUN]-1659825920042
GPR[SSUN]-1659825920042
-46850221
GPR[ESUN]-1659825920274
GPR[SSUN]-1659825920274
-46850221
GPR[SPVATF]-1659825920508
GPR[EPVATF]-1659825922041
GPR[SPS]-1659825922041
[223265] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:212.
GPR[EPS]-1659825922615
GPR[SPVATF]-1659825922615
GPR[EPVATF]-1659825925039
GPR[SPS]-1659825925039
[226265] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:212.
GPR[EPS]-1659825925616
GPR[ESUN]-1659825925616
GPR[SSUN]-1659825925616
-1797850673
GPR[SPVATF]-1659825925895
GPR[EPVATF]-1659825927218
GPR[SPS]-1659825927218
[228510] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1570.
GPR[EPS]-1659825927860
GPR[SPVATF]-1659825927860
GPR[EPVATF]-1659825929141
GPR[SPS]-1659825929141
[230500] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1570.
GPR[EPS]-1659825929850
GPR[ESUN]-1659825929850
GPR[SSUN]-1659825929851
-1797850673
GPR[SPVATF]-1659825930120
GPR[EPVATF]-1659825931415
GPR[SPS]-1659825931415
[232703] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1565.
GPR[EPS]-1659825932053
GPR[SPVATF]-1659825932053
GPR[EPVATF]-1659825933350
GPR[SPS]-1659825933350
[234646] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1565.
GPR[EPS]-1659825933996
GPR[ESUN]-1659825933996
GPR[SSUN]-1659825933996
-1797850673
GPR[SPVATF]-1659825934261
GPR[EPVATF]-1659825935600
GPR[SPS]-1659825935600
[236870] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1557.
GPR[EPS]-1659825936220
GPR[ESUN]-1659825936220
GPR[SSUN]-1659825936220
GPR[ESUN]-1659825936220
GPR[SSUN]-1659825936220
GPR[ESUN]-1659825936220
GPR[SSUN]-1659825936220
GPR[ESUN]-1659825936220
GPR[SSUN]-1659825936220
GPR[ESUN]-1659825936220
GPR[SSUN]-1659825936220
1508981886
GPR[SPVATF]-1659825936439
GPR[EPVATF]-1659825937734
GPR[SPS]-1659825937734
[238893] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1289.
GPR[EPS]-1659825938243
GPR[ESUN]-1659825938243
GPR[SSUN]-1659825938243
-46850221
GPR[SPVATF]-1659825938493
GPR[EPVATF]-1659825939768
GPR[SPS]-1659825939768
[241000] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:844.
GPR[EPS]-1659825940350
GPR[ESUN]-1659825940350
GPR[SSUN]-1659825940350
-46850221
GPR[SPVATF]-1659825940769
GPR[EPVATF]-1659825942176
GPR[SPS]-1659825942176
[243367] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:841.
GPR[EPS]-1659825942717
GPR[SPVATF]-1659825942718
GPR[EPVATF]-1659825944024
GPR[SPS]-1659825944024
[245236] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:841.
GPR[EPS]-1659825944586
GPR[ESUN]-1659825944586
GPR[SSUN]-1659825944586
-1464408086
GPR[SPVATF]-1659825944872
GPR[EPVATF]-1659825946177
GPR[SPS]-1659825946178
[247461] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:612.
GPR[EPS]-1659825946811
GPR[ESUN]-1659825946811
GPR[SSUN]-1659825946811
466431456
GPR[ESUN]-1659825947107
GPR[SSUN]-1659825947107
466431456
GPR[SPVATF]-1659825947457
GPR[EPVATF]-1659825948834
GPR[SPS]-1659825948834
[250212] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:686.
GPR[EPS]-1659825949562
GPR[SPVATF]-1659825949562
GPR[EPVATF]-1659825950954
GPR[SPS]-1659825950954
[252315] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:686.
GPR[EPS]-1659825951665
GPR[ESUN]-1659825951665
GPR[SSUN]-1659825951666
466431456
GPR[SPVATF]-1659825951952
GPR[EPVATF]-1659825953356
GPR[SPS]-1659825953356
[254784] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:683.
GPR[EPS]-1659825954134
GPR[ESUN]-1659825954134
GPR[SSUN]-1659825954134
466431456
GPR[SPVATF]-1659825954430
GPR[EPVATF]-1659825955859
GPR[SPS]-1659825955859
[258373] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:680.
GPR[EPS]-1659825957723
GPR[SPVATF]-1659825957723
GPR[EPVATF]-1659825959217
GPR[SPS]-1659825959217
[260564] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:680.
GPR[EPS]-1659825959914
GPR[ESUN]-1659825959914
GPR[SSUN]-1659825959914
466431456
GPR[ESUN]-1659825960208
GPR[SSUN]-1659825960208
466431456
GPR[ESUN]-1659825960560
GPR[SSUN]-1659825960560
466431456
GPR[SPVATF]-1659825960852
GPR[EPVATF]-1659825962386
GPR[SPS]-1659825962386
[263763] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:676.
GPR[EPS]-1659825963113
GPR[SPVATF]-1659825963114
GPR[EPVATF]-1659825964801
GPR[SPS]-1659825964801
[266174] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:676.
GPR[EPS]-1659825965524
GPR[ESUN]-1659825965524
GPR[SSUN]-1659825965525
466431456
GPR[ESUN]-1659825965819
GPR[SSUN]-1659825965819
466431456
GPR[ESUN]-1659825966102
GPR[SSUN]-1659825966102
-1464408086
GPR[SPVATF]-1659825966363
GPR[EPVATF]-1659825968930
GPR[SPS]-1659825968930
[270241] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:632.
GPR[EPS]-1659825969591
GPR[ESUN]-1659825969591
GPR[SSUN]-1659825969591
-1464408086
GPR[SPVATF]-1659825969853
GPR[EPVATF]-1659825971171
GPR[SPS]-1659825971171
[272444] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:614.
GPR[EPS]-1659825971794
GPR[ESUN]-1659825971794
GPR[SSUN]-1659825971794
-1464408086
GPR[SPVATF]-1659825972051
GPR[EPVATF]-1659825973379
GPR[SPS]-1659825973379
[274718] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:611.
GPR[EPS]-1659825974068
GPR[SPVATF]-1659825974098
GPR[EPVATF]-1659825975428
GPR[SPS]-1659825975428
[276740] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:611.
GPR[EPS]-1659825976090
GPR[ESUN]-1659825976090
GPR[SSUN]-1659825976090
-1464408086
GPR[SPVATF]-1659825976381
GPR[EPVATF]-1659825977696
GPR[SPS]-1659825977696
[278836] ERROR ConstraintModelBuilder - Unable to compile the change: 
final class FunctionTypeBuilder {
    private final java.lang.String fnName;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.CodingConvention codingConvention;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private final com.google.javascript.rhino.Node errorRoot;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.Scope scope;

    private com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents contents = com.google.javascript.jscomp.FunctionTypeBuilder.UnknownFunctionContents.get();

    private com.google.javascript.rhino.jstype.JSType returnType = null;

    private boolean returnTypeInferred = false;

    private java.util.List<com.google.javascript.rhino.jstype.ObjectType> implementedInterfaces = null;

    private java.util.List<com.google.javascript.rhino.jstype.ObjectType> extendedInterfaces = null;

    private com.google.javascript.rhino.jstype.ObjectType baseType = null;

    private com.google.javascript.rhino.jstype.ObjectType thisType = null;

    private boolean isConstructor = false;

    private boolean isInterface = false;

    private com.google.javascript.rhino.Node parametersNode = null;

    private com.google.common.collect.ImmutableList<java.lang.String> templateTypeNames = com.google.common.collect.ImmutableList.of();

    static final com.google.javascript.jscomp.DiagnosticType EXTENDS_WITHOUT_TYPEDEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXTENDS_WITHOUT_TYPEDEF", "@extends used without @constructor or @interface for {0}");

    static final com.google.javascript.jscomp.DiagnosticType EXTENDS_NON_OBJECT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXTENDS_NON_OBJECT", "{0} @extends non-object type {1}");

    static final com.google.javascript.jscomp.DiagnosticType RESOLVED_TAG_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_RESOLVED_TAG_EMPTY", "Could not resolve type in {0} tag of {1}");

    static final com.google.javascript.jscomp.DiagnosticType IMPLEMENTS_WITHOUT_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", "@implements used without @constructor or @interface for {0}");

    static final com.google.javascript.jscomp.DiagnosticType VAR_ARGS_MUST_BE_LAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_VAR_ARGS_MUST_BE_LAST", "variable length argument must be last");

    static final com.google.javascript.jscomp.DiagnosticType OPTIONAL_ARG_AT_END = com.google.javascript.jscomp.DiagnosticType.warning("JSC_OPTIONAL_ARG_AT_END", "optional arguments must be at the end");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTANT_PARAM = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTANT_PARAM", "parameter {0} does not appear in {1}''s parameter list");

    static final com.google.javascript.jscomp.DiagnosticType TYPE_REDEFINITION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_TYPE_REDEFINITION", "attempted re-definition of type {0}\n" + ("found   : {1}\n" + "expected: {2}"));

    static final com.google.javascript.jscomp.DiagnosticType TEMPLATE_TYPE_DUPLICATED = com.google.javascript.jscomp.DiagnosticType.warning("JSC_TEMPLATE_TYPE_DUPLICATED", "Only one parameter type must be the template type");

    static final com.google.javascript.jscomp.DiagnosticType TEMPLATE_TYPE_EXPECTED = com.google.javascript.jscomp.DiagnosticType.warning("JSC_TEMPLATE_TYPE_EXPECTED", "The template type must be a parameter type");

    static final com.google.javascript.jscomp.DiagnosticType THIS_TYPE_NON_OBJECT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_THIS_TYPE_NON_OBJECT", "@this type of a function must be an object\n" + "Actual type: {0}");

    private class ExtendedTypeValidator implements com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.jstype.JSType type) {
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(type);
            if (objectType == null) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_NON_OBJECT, fnName, type.toString());
                return false;
            } else if (objectType.isEmptyType()) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY, "@extends", fnName);
                return false;
            } else if (objectType.isUnknownType()) {
                if (com.google.javascript.jscomp.FunctionTypeBuilder.hasMoreTagsToResolve(objectType)) {
                    return true;
                } else {
                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY, "@extends", fnName);
                    return false;
                }
            } else {
                return true;
            }
        }
    }

    private class ImplementedTypeValidator implements com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.jstype.JSType type) {
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(type);
            if (objectType == null) {
                reportError(com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, fnName);
                return false;
            } else if (objectType.isEmptyType()) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY, "@implements", fnName);
                return false;
            } else if (objectType.isUnknownType()) {
                if (com.google.javascript.jscomp.FunctionTypeBuilder.hasMoreTagsToResolve(objectType)) {
                    return true;
                } else {
                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY, "@implements", fnName);
                    return false;
                }
            } else {
                return true;
            }
        }
    }

    private class ThisTypeValidator implements com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.jstype.JSType type) {
            if (!type.restrictByNotNullOrUndefined().isSubtype(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT, type.toString());
                return false;
            }
            return true;
        }
    }

    FunctionTypeBuilder(java.lang.String fnName, com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node errorRoot, java.lang.String sourceName, com.google.javascript.jscomp.Scope scope) {
        com.google.common.base.Preconditions.checkNotNull(errorRoot);
        this.fnName = (fnName == null) ? "" : fnName;
        this.codingConvention = compiler.getCodingConvention();
        this.typeRegistry = compiler.getTypeRegistry();
        this.errorRoot = errorRoot;
        this.sourceName = sourceName;
        this.compiler = compiler;
        this.scope = scope;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder setContents(@javax.annotation.Nullable
    com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents contents) {
        if (contents != null) {
            this.contents = contents;
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferFromOverriddenFunction(@javax.annotation.Nullable
    com.google.javascript.rhino.jstype.FunctionType oldType, @javax.annotation.Nullable
    com.google.javascript.rhino.Node paramsParent) {
        if (oldType == null) {
            return this;
        }
        returnType = oldType.getReturnType();
        returnTypeInferred = oldType.isReturnTypeInferred();
        if (paramsParent == null) {
            parametersNode = oldType.getParametersNode();
            if (parametersNode == null) {
                parametersNode = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry).build();
            }
        } else {
            com.google.javascript.rhino.jstype.FunctionParamBuilder paramBuilder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry);
            java.util.Iterator<com.google.javascript.rhino.Node> oldParams = oldType.getParameters().iterator();
            boolean warnedAboutArgList = false;
            boolean oldParamsListHitOptArgs = false;
            for (com.google.javascript.rhino.Node currentParam = paramsParent.getFirstChild(); currentParam != null; currentParam = currentParam.getNext()) {
                if (oldParams.hasNext()) {
                    com.google.javascript.rhino.Node oldParam = oldParams.next();
                    com.google.javascript.rhino.Node newParam = paramBuilder.newParameterFromNode(oldParam);
                    oldParamsListHitOptArgs = (oldParamsListHitOptArgs || oldParam.isVarArgs()) || oldParam.isOptionalArg();
                    if ((currentParam.getNext() != null) && newParam.isVarArgs()) {
                        newParam.setVarArgs(false);
                        newParam.setOptionalArg(true);
                    }
                } else {
                    warnedAboutArgList |= addParameter(paramBuilder, typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsListHitOptArgs, codingConvention.isVarArgsParameter(currentParam));
                }
            }
            while (oldParams.hasNext()) {
                paramBuilder.newOptionalParameterFromNode(oldParams.next());
            } 
            parametersNode = paramBuilder.build();
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferReturnType(@javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if ((info != null) && info.hasReturnType()) {
            returnType = info.getReturnType().evaluate(scope, typeRegistry);
            returnTypeInferred = false;
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferInheritance(@javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if (info != null) {
            isConstructor = info.isConstructor();
            isInterface = info.isInterface();
            if (info.hasBaseType()) {
                if (isConstructor) {
                    com.google.javascript.rhino.jstype.JSType maybeBaseType = info.getBaseType().evaluate(scope, typeRegistry);
                    if ((maybeBaseType != null) && maybeBaseType.setValidator(new com.google.javascript.jscomp.FunctionTypeBuilder.ExtendedTypeValidator())) {
                        baseType = ((com.google.javascript.rhino.jstype.ObjectType) (maybeBaseType));
                    }
                } else {
                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_WITHOUT_TYPEDEF, fnName);
                }
            }
            if (isConstructor || isInterface) {
                implementedInterfaces = com.google.common.collect.Lists.newArrayList();
                for (com.google.javascript.rhino.JSTypeExpression t : info.getImplementedInterfaces()) {
                    com.google.javascript.rhino.jstype.JSType maybeInterType = t.evaluate(scope, typeRegistry);
                    if ((maybeInterType != null) && maybeInterType.setValidator(new com.google.javascript.jscomp.FunctionTypeBuilder.ImplementedTypeValidator())) {
                        implementedInterfaces.add(((com.google.javascript.rhino.jstype.ObjectType) (maybeInterType)));
                    }
                }
            } else if (info.getImplementedInterfaceCount() > 0) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.IMPLEMENTS_WITHOUT_CONSTRUCTOR, fnName);
            }
            if (isInterface) {
                extendedInterfaces = com.google.common.collect.Lists.newArrayList();
                for (com.google.javascript.rhino.JSTypeExpression t : info.getExtendedInterfaces()) {
                    com.google.javascript.rhino.jstype.JSType maybeInterfaceType = t.evaluate(scope, typeRegistry);
                    if ((maybeInterfaceType != null) && maybeInterfaceType.setValidator(new com.google.javascript.jscomp.FunctionTypeBuilder.ExtendedTypeValidator())) {
                        extendedInterfaces.add(((com.google.javascript.rhino.jstype.ObjectType) (maybeInterfaceType)));
                    }
                }
            }
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferThisType(com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType type) {
        inferThisType(info);
        if (thisType == null) {
            com.google.javascript.rhino.jstype.ObjectType objType = com.google.javascript.rhino.jstype.ObjectType.cast(type);
            if ((objType != null) && ((info == null) || (!info.hasType()))) {
                thisType = objType;
            }
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferThisType(com.google.javascript.rhino.JSDocInfo info) {
        com.google.javascript.rhino.jstype.ObjectType maybeThisType = null;
        if ((info != null) && info.hasThisType()) {
            maybeThisType = com.google.javascript.rhino.jstype.ObjectType.cast(info.getThisType().evaluate(scope, typeRegistry));
        }
        if (maybeThisType != null) {
            thisType = maybeThisType;
            thisType.setValidator(new com.google.javascript.jscomp.FunctionTypeBuilder.ThisTypeValidator());
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferParameterTypes(com.google.javascript.rhino.JSDocInfo info) {
        com.google.javascript.rhino.Node lp = com.google.javascript.rhino.IR.paramList();
        for (java.lang.String name : info.getParameterNames()) {
            lp.addChildToBack(com.google.javascript.rhino.IR.name(name));
        }
        return inferParameterTypes(lp, info);
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferParameterTypes(@javax.annotation.Nullable
    com.google.javascript.rhino.Node argsParent, @javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if (argsParent == null) {
            if (info == null) {
                return this;
            } else {
                return inferParameterTypes(info);
            }
        }
        com.google.javascript.rhino.Node oldParameterType = null;
        if (parametersNode != null) {
            oldParameterType = parametersNode.getFirstChild();
        }
        com.google.javascript.rhino.jstype.FunctionParamBuilder builder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry);
        boolean warnedAboutArgList = false;
        java.util.Set<java.lang.String> allJsDocParams = (info == null) ? com.google.common.collect.Sets.<java.lang.String>newHashSet() : com.google.common.collect.Sets.newHashSet(info.getParameterNames());
        boolean foundTemplateType = false;
        boolean isVarArgs = false;
        for (com.google.javascript.rhino.Node arg : argsParent.children()) {
            java.lang.String argumentName = arg.getString();
            allJsDocParams.remove(argumentName);
            com.google.javascript.rhino.jstype.JSType parameterType = null;
            boolean isOptionalParam = isOptionalParameter(arg, info);
            isVarArgs = isVarArgsParameter(arg, info);
            if ((info != null) && info.hasParameterType(argumentName)) {
                parameterType = info.getParameterType(argumentName).evaluate(scope, typeRegistry);
            } else if ((oldParameterType != null) && (oldParameterType.getJSType() != null)) {
                parameterType = oldParameterType.getJSType();
                isOptionalParam = oldParameterType.isOptionalArg();
                isVarArgs = oldParameterType.isVarArgs();
            } else {
                parameterType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            }
            warnedAboutArgList |= addParameter(builder, parameterType, warnedAboutArgList, isOptionalParam, isVarArgs);
            if (oldParameterType != null) {
                oldParameterType = oldParameterType.getNext();
            }
        }
        if (!isVarArgs) {
            while ((oldParameterType != null) && (!isVarArgs)) {
                builder.newParameterFromNode(oldParameterType);
                oldParameterType = oldParameterType.getNext();
            } 
        }
        for (java.lang.String inexistentName : allJsDocParams) {
            reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.INEXISTANT_PARAM, inexistentName, fnName);
        }
        parametersNode = builder.build();
        return this;
    }

    private boolean isOptionalParameter(com.google.javascript.rhino.Node param, @javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if (codingConvention.isOptionalParameter(param)) {
            return true;
        }
        java.lang.String paramName = param.getString();
        return ((info != null) && info.hasParameterType(paramName)) && info.getParameterType(paramName).isOptionalArg();
    }

    private boolean isVarArgsParameter(com.google.javascript.rhino.Node param, @javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if (codingConvention.isVarArgsParameter(param)) {
            return true;
        }
        java.lang.String paramName = param.getString();
        return ((info != null) && info.hasParameterType(paramName)) && info.getParameterType(paramName).isVarArgs();
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferTemplateTypeName(@javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if (info != null) {
            templateTypeNames = info.getTemplateTypeNames();
            typeRegistry.setTemplateTypeNames(templateTypeNames);
        }
        return this;
    }

    private boolean addParameter(com.google.javascript.rhino.jstype.FunctionParamBuilder builder, com.google.javascript.rhino.jstype.JSType paramType, boolean warnedAboutArgList, boolean isOptional, boolean isVarArgs) {
        boolean emittedWarning = false;
        if (isOptional) {
            if ((!builder.addOptionalParams(paramType)) && (!warnedAboutArgList)) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);
                emittedWarning = true;
            }
        } else if (isVarArgs) {
            if ((!builder.addVarArgs(paramType)) && (!warnedAboutArgList)) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);
                emittedWarning = true;
            }
        } else if ((!builder.addRequiredParams(paramType)) && (!warnedAboutArgList)) {
            if (builder.hasVarArgs()) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);
            } else {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.OPTIONAL_ARG_AT_END);
            }
            emittedWarning = true;
        }
        return emittedWarning;
    }

    com.google.javascript.rhino.jstype.FunctionType buildAndRegister() {
        if (returnType == null) {
            if (((!contents.mayHaveNonEmptyReturns()) && (!contents.mayHaveSingleThrow())) && (!contents.mayBeFromExterns())) {
                returnType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                returnTypeInferred = true;
            }
        }
        if (returnType == null) {
            returnType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        if (parametersNode == null) {
            throw new java.lang.IllegalStateException("All Function types must have params and a return type");
        }
        com.google.javascript.rhino.jstype.FunctionType fnType;
        if (isConstructor) {
            fnType = getOrCreateConstructor();
        } else if (isInterface) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(62).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.baseType",com.google.javascript.jscomp.FunctionTypeBuilder.this.baseType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.parametersNode",com.google.javascript.jscomp.FunctionTypeBuilder.this.parametersNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_NON_OBJECT",com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.TYPE_REDEFINITION",com.google.javascript.jscomp.FunctionTypeBuilder.TYPE_REDEFINITION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT",com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.errorRoot",com.google.javascript.jscomp.FunctionTypeBuilder.this.errorRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.returnType",com.google.javascript.jscomp.FunctionTypeBuilder.this.returnType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.thisType",com.google.javascript.jscomp.FunctionTypeBuilder.this.thisType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.returnTypeInferred",com.google.javascript.jscomp.FunctionTypeBuilder.this.returnTypeInferred);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.templateTypeNames",com.google.javascript.jscomp.FunctionTypeBuilder.this.templateTypeNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.sourceName",com.google.javascript.jscomp.FunctionTypeBuilder.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.IMPLEMENTS_WITHOUT_CONSTRUCTOR",com.google.javascript.jscomp.FunctionTypeBuilder.IMPLEMENTS_WITHOUT_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.fnName",com.google.javascript.jscomp.FunctionTypeBuilder.this.fnName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED",com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST",com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.extendedInterfaces",com.google.javascript.jscomp.FunctionTypeBuilder.this.extendedInterfaces);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.OPTIONAL_ARG_AT_END",com.google.javascript.jscomp.FunctionTypeBuilder.OPTIONAL_ARG_AT_END);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED",com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.scope",com.google.javascript.jscomp.FunctionTypeBuilder.this.scope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY",com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.INEXISTANT_PARAM",com.google.javascript.jscomp.FunctionTypeBuilder.INEXISTANT_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.codingConvention",com.google.javascript.jscomp.FunctionTypeBuilder.this.codingConvention);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_WITHOUT_TYPEDEF",com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_WITHOUT_TYPEDEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.contents",com.google.javascript.jscomp.FunctionTypeBuilder.this.contents);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.isConstructor",com.google.javascript.jscomp.FunctionTypeBuilder.this.isConstructor);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.compiler",com.google.javascript.jscomp.FunctionTypeBuilder.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.implementedInterfaces",com.google.javascript.jscomp.FunctionTypeBuilder.this.implementedInterfaces);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.isInterface",com.google.javascript.jscomp.FunctionTypeBuilder.this.isInterface);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.typeRegistry",com.google.javascript.jscomp.FunctionTypeBuilder.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(62).collectionEnds();
            }
            if (runtimeAngelicValue)
                fnType = typeRegistry.createInterfaceType(fnName, contents.getSourceNode());

            if (getScopeDeclaredIn().isGlobal() && (!fnName.isEmpty())) {
                typeRegistry.declareType(fnName, fnType.getInstanceType());
            }
            maybeSetBaseType(fnType);
        } else {
            fnType = new com.google.javascript.rhino.jstype.FunctionBuilder(typeRegistry).withName(fnName).withSourceNode(contents.getSourceNode()).withParamsNode(parametersNode).withReturnType(returnType, returnTypeInferred).withTypeOfThis(thisType).withTemplateNames(templateTypeNames).build();
            maybeSetBaseType(fnType);
        }
        if (implementedInterfaces != null) {
            fnType.setImplementedInterfaces(implementedInterfaces);
        }
        if (extendedInterfaces != null) {
            fnType.setExtendedInterfaces(extendedInterfaces);
        }
        typeRegistry.clearTemplateTypeNames();
        return fnType;
    }

    private void maybeSetBaseType(com.google.javascript.rhino.jstype.FunctionType fnType) {
        if ((!fnType.isInterface()) && (baseType != null)) {
            fnType.setPrototypeBasedOn(baseType);
        }
    }

    private com.google.javascript.rhino.jstype.FunctionType getOrCreateConstructor() {
        com.google.javascript.rhino.jstype.FunctionType fnType = typeRegistry.createConstructorType(fnName, contents.getSourceNode(), parametersNode, returnType);
        com.google.javascript.rhino.jstype.JSType existingType = typeRegistry.getType(fnName);
        if (existingType != null) {
            boolean isInstanceObject = existingType.isInstanceType();
            if (isInstanceObject || fnName.equals("Function")) {
                com.google.javascript.rhino.jstype.FunctionType existingFn = (isInstanceObject) ? existingType.toObjectType().getConstructor() : typeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE);
                if (existingFn.getSource() == null) {
                    existingFn.setSource(contents.getSourceNode());
                }
                if (!existingFn.hasEqualCallType(fnType)) {
                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.TYPE_REDEFINITION, fnName, fnType.toString(), existingFn.toString());
                }
                return existingFn;
            } else {
            }
        }
        maybeSetBaseType(fnType);
        if (getScopeDeclaredIn().isGlobal() && (!fnName.isEmpty())) {
            typeRegistry.declareType(fnName, fnType.getInstanceType());
        }
        return fnType;
    }

    private void reportWarning(com.google.javascript.jscomp.DiagnosticType warning, java.lang.String... args) {
        compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, errorRoot, warning, args));
    }

    private void reportError(com.google.javascript.jscomp.DiagnosticType error, java.lang.String... args) {
        compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, errorRoot, error, args));
    }

    static boolean isFunctionTypeDeclaration(com.google.javascript.rhino.JSDocInfo info) {
        return ((((info.getParameterCount() > 0) || info.hasReturnType()) || info.hasThisType()) || info.isConstructor()) || info.isInterface();
    }

    private com.google.javascript.jscomp.Scope getScopeDeclaredIn() {
        int dotIndex = fnName.indexOf(".");
        if (dotIndex != (-1)) {
            java.lang.String rootVarName = fnName.substring(0, dotIndex);
            com.google.javascript.jscomp.Scope.Var rootVar = scope.getVar(rootVarName);
            if (rootVar != null) {
                return rootVar.getScope();
            }
        }
        return scope;
    }

    private static boolean hasMoreTagsToResolve(com.google.javascript.rhino.jstype.ObjectType objectType) {
        com.google.common.base.Preconditions.checkArgument(objectType.isUnknownType());
        if (objectType.getImplicitPrototype() != null) {
            if (objectType.getImplicitPrototype().isResolved()) {
                return false;
            } else {
                return true;
            }
        } else {
            com.google.javascript.rhino.jstype.FunctionType ctor = objectType.getConstructor();
            if (ctor != null) {
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctor.getExtendedInterfaces()) {
                    if (!interfaceType.isResolved()) {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    static interface FunctionContents {
        public abstract com.google.javascript.rhino.Node getSourceNode();

        public abstract boolean mayBeFromExterns();

        public abstract boolean mayHaveNonEmptyReturns();

        public abstract boolean mayHaveSingleThrow();

        public abstract java.lang.Iterable<java.lang.String> getEscapedVarNames();

        public abstract java.util.Set<java.lang.String> getEscapedQualifiedNames();
    }

    static class UnknownFunctionContents implements com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents {
        private static com.google.javascript.jscomp.FunctionTypeBuilder.UnknownFunctionContents singleton = new com.google.javascript.jscomp.FunctionTypeBuilder.UnknownFunctionContents();

        static com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents get() {
            return com.google.javascript.jscomp.FunctionTypeBuilder.UnknownFunctionContents.singleton;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getSourceNode() {
            return null;
        }

        @java.lang.Override
        public boolean mayBeFromExterns() {
            return true;
        }

        @java.lang.Override
        public boolean mayHaveNonEmptyReturns() {
            return true;
        }

        @java.lang.Override
        public boolean mayHaveSingleThrow() {
            return true;
        }

        @java.lang.Override
        public java.lang.Iterable<java.lang.String> getEscapedVarNames() {
            return com.google.common.collect.ImmutableList.of();
        }

        @java.lang.Override
        public java.util.Set<java.lang.String> getEscapedQualifiedNames() {
            return com.google.common.collect.ImmutableSet.of();
        }
    }

    static class AstFunctionContents implements com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents {
        private final com.google.javascript.rhino.Node n;

        private boolean hasNonEmptyReturns = false;

        private java.util.Set<java.lang.String> escapedVarNames;

        private java.util.Set<java.lang.String> escapedQualifiedNames;

        AstFunctionContents(com.google.javascript.rhino.Node n) {
            this.n = n;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getSourceNode() {
            return n;
        }

        @java.lang.Override
        public boolean mayBeFromExterns() {
            return n.isFromExterns();
        }

        @java.lang.Override
        public boolean mayHaveNonEmptyReturns() {
            return hasNonEmptyReturns;
        }

        void recordNonEmptyReturn() {
            hasNonEmptyReturns = true;
        }

        @java.lang.Override
        public boolean mayHaveSingleThrow() {
            com.google.javascript.rhino.Node block = n.getLastChild();
            return block.hasOneChild() && block.getFirstChild().isThrow();
        }

        @java.lang.Override
        public java.lang.Iterable<java.lang.String> getEscapedVarNames() {
            return escapedVarNames == null ? com.google.common.collect.ImmutableList.<java.lang.String>of() : escapedVarNames;
        }

        void recordEscapedVarName(java.lang.String name) {
            if (escapedVarNames == null) {
                escapedVarNames = com.google.common.collect.Sets.newHashSet();
            }
            escapedVarNames.add(name);
        }

        @java.lang.Override
        public java.util.Set<java.lang.String> getEscapedQualifiedNames() {
            return escapedQualifiedNames == null ? com.google.common.collect.ImmutableSet.<java.lang.String>of() : escapedQualifiedNames;
        }

        void recordEscapedQualifiedName(java.lang.String name) {
            if (escapedQualifiedNames == null) {
                escapedQualifiedNames = com.google.common.collect.Sets.newHashSet();
            }
            escapedQualifiedNames.add(name);
        }
    }
}
[278836] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659825978186
GPR[SSUN]-1659825978186
-1464408086
GPR[SPVATF]-1659825978451
GPR[EPVATF]-1659825979744
GPR[SPS]-1659825979744
[281077] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:355.
GPR[EPS]-1659825980427
GPR[ESUN]-1659825980427
GPR[SSUN]-1659825980427
-1464408086
GPR[SPVATF]-1659825980719
GPR[EPVATF]-1659825982030
GPR[SPS]-1659825982030
[283326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:354.
GPR[EPS]-1659825982676
GPR[ESUN]-1659825982676
GPR[SSUN]-1659825982676
-132053243
GPR[ESUN]-1659825982865
GPR[SSUN]-1659825982865
-132053243
GPR[SPVATF]-1659825983054
GPR[EPVATF]-1659825983072
[283722] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659825983073
GPR[SSUN]-1659825983073
-1093533311
GPR[ESUN]-1659825983319
GPR[SSUN]-1659825983319
1508981886
GPR[SPVATF]-1659825983536
GPR[EPVATF]-1659825984876
GPR[SPS]-1659825984876
[286054] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1288.
GPR[EPS]-1659825985404
GPR[SPVATF]-1659825985405
GPR[EPVATF]-1659825986749
GPR[SPS]-1659825986749
[287946] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1288.
GPR[EPS]-1659825987296
GPR[ESUN]-1659825987296
GPR[SSUN]-1659825987296
-179796259
GPR[SPVATF]-1659825987591
GPR[EPVATF]-1659825988946
GPR[SPS]-1659825988946
[290325] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:262.
GPR[EPS]-1659825989675
GPR[ESUN]-1659825989676
GPR[SSUN]-1659825989676
-179796259
GPR[SPVATF]-1659825989916
GPR[EPVATF]-1659825991256
GPR[SPS]-1659825991256
[292707] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:261.
GPR[EPS]-1659825992057
GPR[ESUN]-1659825992057
GPR[SSUN]-1659825992057
-179796259
GPR[SPVATF]-1659825992309
GPR[EPVATF]-1659825993753
GPR[SPS]-1659825993753
GPR[EPS]-1659826001151
GPR[SPVATF]-1659826001151
GPR[EPVATF]-1659826002586
GPR[SPS]-1659826002586
[304259] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:257.
GPR[EPS]-1659826003609
GPR[ESUN]-1659826003609
GPR[SSUN]-1659826003609
-622774852
GPR[SPVATF]-1659826003865
GPR[EPVATF]-1659826005393
GPR[SPS]-1659826005393
[306603] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:354.
GPR[EPS]-1659826005953
GPR[ESUN]-1659826005953
GPR[SSUN]-1659826005953
-46850221
GPR[SPVATF]-1659826006199
GPR[EPVATF]-1659826007770
GPR[SPS]-1659826007770
[308989] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:412.
GPR[EPS]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008339
GPR[ESUN]-1659826008339
GPR[SSUN]-1659826008340
711965926
GPR[ESUN]-1659826008545
GPR[SSUN]-1659826008546
711965926
GPR[SPVATF]-1659826008747
GPR[EPVATF]-1659826010442
GPR[SPS]-1659826010442
[311597] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:37.
GPR[EPS]-1659826010947
GPR[ESUN]-1659826010947
GPR[SSUN]-1659826010947
-1345859678
GPR[SPVATF]-1659826011202
GPR[EPVATF]-1659826013061
GPR[SPS]-1659826013061
[314337] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:832.
GPR[EPS]-1659826013687
GPR[SPVATF]-1659826013687
GPR[EPVATF]-1659826015558
GPR[SPS]-1659826015558
[316803] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:832.
GPR[EPS]-1659826016153
GPR[ESUN]-1659826016153
GPR[SSUN]-1659826016153
GPR[ESUN]-1659826016153
GPR[SSUN]-1659826016153
704176156
GPR[ESUN]-1659826016354
GPR[SSUN]-1659826016354
704176156
GPR[SPVATF]-1659826016570
GPR[EPVATF]-1659826019140
GPR[SPS]-1659826019140
[320337] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:214.
GPR[EPS]-1659826019687
GPR[SPVATF]-1659826019687
GPR[EPVATF]-1659826022518
GPR[SPS]-1659826022518
[323731] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:214.
GPR[EPS]-1659826023081
GPR[ESUN]-1659826023081
GPR[SSUN]-1659826023081
704176156
GPR[SPVATF]-1659826023308
GPR[EPVATF]-1659826024698
GPR[SPS]-1659826024698
[325910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:213.
GPR[EPS]-1659826025260
GPR[ESUN]-1659826025260
GPR[SSUN]-1659826025260
704176156
GPR[SPVATF]-1659826025482
GPR[EPVATF]-1659826026868
GPR[SPS]-1659826026868
[328076] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:156.
GPR[EPS]-1659826027426
GPR[ESUN]-1659826027426
GPR[SSUN]-1659826027426
704176156
GPR[ESUN]-1659826027654
GPR[SSUN]-1659826027654
-1345859678
GPR[ESUN]-1659826027926
GPR[SSUN]-1659826027926
-1345859678
GPR[SPVATF]-1659826028200
GPR[EPVATF]-1659826029641
GPR[SPS]-1659826029641
[332586] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:840.
GPR[EPS]-1659826031937
GPR[ESUN]-1659826031937
GPR[SSUN]-1659826031937
-1345859678
GPR[SPVATF]-1659826032238
GPR[EPVATF]-1659826033595
GPR[SPS]-1659826033595
[334904] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:839.
GPR[EPS]-1659826034254
GPR[ESUN]-1659826034254
GPR[SSUN]-1659826034254
-1345859678
GPR[SPVATF]-1659826034529
GPR[EPVATF]-1659826035968
GPR[SPS]-1659826035968
[337296] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:826.
GPR[EPS]-1659826036646
GPR[SPVATF]-1659826036646
GPR[EPVATF]-1659826037999
GPR[SPS]-1659826037999
[339387] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:826.
GPR[EPS]-1659826038737
GPR[ESUN]-1659826038737
GPR[SSUN]-1659826038737
-1345859678
GPR[ESUN]-1659826039009
GPR[SSUN]-1659826039009
-1345859678
GPR[SPVATF]-1659826039278
GPR[EPVATF]-1659826040640
GPR[SPS]-1659826040640
[341996] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:823.
GPR[EPS]-1659826041346
GPR[ESUN]-1659826041346
GPR[SSUN]-1659826041346
-1345859678
GPR[ESUN]-1659826041618
GPR[SSUN]-1659826041618
GPR[ESUN]-1659826041618
GPR[SSUN]-1659826041618
GPR[ESUN]-1659826041618
GPR[SSUN]-1659826041618
GPR[ESUN]-1659826041618
GPR[SSUN]-1659826041618
GPR[ESUN]-1659826041618
GPR[SSUN]-1659826041618
GPR[ESUN]-1659826041618
GPR[SSUN]-1659826041618
GPR[ESUN]-1659826041618
GPR[SSUN]-1659826041618
GPR[ESUN]-1659826041618
GPR[SSUN]-1659826041618
GPR[ESUN]-1659826041618
GPR[SSUN]-1659826041618
GPR[ESUN]-1659826041618
GPR[SSUN]-1659826041618
GPR[ESUN]-1659826041618
GPR[SSUN]-1659826041618
GPR[ESUN]-1659826041618
GPR[SSUN]-1659826041618
-1345859678
GPR[SPVATF]-1659826041898
GPR[EPVATF]-1659826043307
GPR[SPS]-1659826043307
[344672] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:812.
GPR[EPS]-1659826044022
GPR[SPVATF]-1659826044022
GPR[EPVATF]-1659826045423
GPR[SPS]-1659826045423
[346807] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:812.
GPR[EPS]-1659826046157
GPR[ESUN]-1659826046157
GPR[SSUN]-1659826046157
GPR[ESUN]-1659826046157
GPR[SSUN]-1659826046157
-1251822497
GPR[SPVATF]-1659826046369
GPR[EPVATF]-1659826047775
GPR[SPS]-1659826047775
[348691] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class JSDocInfoBuilder {
    private com.google.javascript.rhino.JSDocInfo currentInfo;

    private boolean populated = false;

    private boolean parseDocumentation = false;

    private com.google.javascript.rhino.JSDocInfo.Marker currentMarker = null;

    public JSDocInfoBuilder(boolean parseDocumentation) {
        this.currentInfo = new com.google.javascript.rhino.JSDocInfo(parseDocumentation);
        this.parseDocumentation = parseDocumentation;
    }

    public void recordOriginalCommentString(java.lang.String sourceComment) {
        if (parseDocumentation) {
            currentInfo.setOriginalCommentString(sourceComment);
        }
    }

    public boolean shouldParseDocumentation() {
        return parseDocumentation;
    }

    public boolean isPopulated() {
        return populated;
    }

    public boolean isPopulatedWithFileOverview() {
        return isPopulated() && ((currentInfo.hasFileOverview() || currentInfo.isExterns()) || currentInfo.isNoCompile());
    }

    public boolean isDescriptionRecorded() {
        return currentInfo.getDescription() != null;
    }

    public com.google.javascript.rhino.JSDocInfo build(com.google.javascript.rhino.Node associatedNode) {
        if (populated) {
            com.google.javascript.rhino.JSDocInfo built = currentInfo;
            built.setAssociatedNode(associatedNode);
            com.google.javascript.rhino.JSDocInfoBuilder.populateDefaults(built);
            populated = false;
            currentInfo = new com.google.javascript.rhino.JSDocInfo(this.parseDocumentation);
            return built;
        } else {
            return null;
        }
    }

    private static void populateDefaults(com.google.javascript.rhino.JSDocInfo info) {
        if (info.getVisibility() == null) {
            info.setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED);
        }
    }

    public void markAnnotation(java.lang.String annotation, int lineno, int charno) {
        com.google.javascript.rhino.JSDocInfo.Marker marker = currentInfo.addMarker();
        if (marker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(annotation);
            position.setPositionInformation(lineno, charno, lineno, charno + annotation.length());
            marker.setAnnotation(position);
            populated = true;
        }
        currentMarker = marker;
    }

    public void markText(java.lang.String text, int startLineno, int startCharno, int endLineno, int endCharno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.StringPosition position = new com.google.javascript.rhino.JSDocInfo.StringPosition();
            position.setItem(text);
            position.setPositionInformation(startLineno, startCharno, endLineno, endCharno);
            currentMarker.setDescription(position);
        }
    }

    public void markTypeNode(com.google.javascript.rhino.Node typeNode, int lineno, int startCharno, int endLineno, int endCharno, boolean hasLC) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TypePosition position = new com.google.javascript.rhino.JSDocInfo.TypePosition();
            position.setItem(typeNode);
            position.setHasBrackets(hasLC);
            position.setPositionInformation(lineno, startCharno, endLineno, endCharno);
            currentMarker.setType(position);
        }
    }

    @java.lang.Deprecated
    public void markName(java.lang.String name, int lineno, int charno) {
        markName(name, null, lineno, charno);
    }

    public void markName(java.lang.String name, com.google.javascript.rhino.jstype.StaticSourceFile file, int lineno, int charno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(name);
            position.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setName(position);
            com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodePos = new com.google.javascript.rhino.JSDocInfo.NamePosition();
            com.google.javascript.rhino.Node node = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, name, lineno, charno);
            node.setLength(name.length());
            node.setStaticSourceFile(file);
            nodePos.setItem(node);
            nodePos.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setNameNode(nodePos);
        }
    }

    public boolean recordBlockDescription(java.lang.String description) {
        populated = true;
        return currentInfo.documentBlock(description);
    }

    public boolean recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility visibility) {
        if (currentInfo.getVisibility() == null) {
            populated = true;
            currentInfo.setVisibility(visibility);
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameter(java.lang.String parameterName, com.google.javascript.rhino.JSTypeExpression type) {
        if ((!hasAnySingletonTypeTags()) && currentInfo.declareParam(type, parameterName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameterDescription(java.lang.String parameterName, java.lang.String description) {
        if (currentInfo.documentParam(parameterName, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTemplateTypeNames(java.util.List<java.lang.String> names) {
        if (currentInfo.declareTemplateTypeNames(names)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThrowType(com.google.javascript.rhino.JSTypeExpression type) {
        if (!hasAnySingletonTypeTags()) {
            currentInfo.declareThrows(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordThrowDescription(com.google.javascript.rhino.JSTypeExpression type, java.lang.String description) {
        if (currentInfo.documentThrows(type, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addAuthor(java.lang.String author) {
        if (currentInfo.documentAuthor(author)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addReference(java.lang.String reference) {
        if (currentInfo.documentReference(reference)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConsistentIdGenerator() {
        if (!currentInfo.isConsistentIdGenerator()) {
            currentInfo.setConsistentIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordVersion(java.lang.String version) {
        if (currentInfo.documentVersion(version)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecationReason(java.lang.String reason) {
        if (currentInfo.setDeprecationReason(reason)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordSuppressions(java.util.Set<java.lang.String> suppressions) {
        if (currentInfo.setSuppressions(suppressions)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordModifies(java.util.Set<java.lang.String> modifies) {
        if ((!hasAnySingletonSideEffectTags()) && currentInfo.setModifies(modifies)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTypedef(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setTypedefType(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordIdGenerator() {
        if (!currentInfo.isIdGenerator()) {
            currentInfo.setIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (currentInfo.getReturnType() == null)) && (!hasAnySingletonTypeTags())) {
            currentInfo.setReturnType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnDescription(java.lang.String description) {
        if (currentInfo.documentReturn(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDefineType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((((type != null) && (!currentInfo.isConstant())) && (!currentInfo.isDefine())) && recordType(type)) {
            currentInfo.setDefine(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordEnumParameterType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setEnumParameterType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThisType(com.google.javascript.rhino.JSTypeExpression type) {
        if (((type != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasThisType())) {
            currentInfo.setThisType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordBaseType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasBaseType())) {
            currentInfo.setBaseType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstancy() {
        if (!currentInfo.isConstant()) {
            currentInfo.setConstant(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDescription(java.lang.String description) {
        if ((description != null) && (currentInfo.getDescription() == null)) {
            currentInfo.setDescription(description);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordMeaning(java.lang.String meaning) {
        if ((meaning != null) && (currentInfo.getMeaning() == null)) {
            currentInfo.setMeaning(meaning);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordFileOverview(java.lang.String description) {
        if (currentInfo.documentFileOverview(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordHiddenness() {
        if (!currentInfo.isHidden()) {
            currentInfo.setHidden(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoCompile() {
        if (!currentInfo.isNoCompile()) {
            currentInfo.setNoCompile(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoTypeCheck() {
        if (!currentInfo.isNoTypeCheck()) {
            currentInfo.setNoCheck(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstructor() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setConstructor(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isConstructorRecorded() {
        return currentInfo.isConstructor();
    }

    public boolean recordJavaDispatch() {
        if (!currentInfo.isJavaDispatch()) {
            currentInfo.setJavaDispatch(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isJavaDispatch() {
        return currentInfo.isJavaDispatch();
    }

    public boolean recordPreserveTry() {
        if (!currentInfo.shouldPreserveTry()) {
            currentInfo.setShouldPreserveTry(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordOverride() {
        if (!currentInfo.isOverride()) {
            currentInfo.setOverride(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoAlias() {
        if (!currentInfo.isNoAlias()) {
            currentInfo.setNoAlias(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecated() {
        if (!currentInfo.isDeprecated()) {
            currentInfo.setDeprecated(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordInterface() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setInterface(true);
            populated = true;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(87).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(87).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(87).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.populated",com.google.javascript.rhino.JSDocInfoBuilder.this.populated);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(87).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation",com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(87).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker",com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(87).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo",com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(87).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(87).collectionEnds();
            }
            if (runtimeAngelicValue)
                return true;

        } else {
            return false;
        }
    }

    public boolean recordExport() {
        if (!currentInfo.isExport()) {
            currentInfo.setExport(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExpose() {
        if (!currentInfo.isExpose()) {
            currentInfo.setExpose(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoShadow() {
        if (!currentInfo.isNoShadow()) {
            currentInfo.setNoShadow(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordImplicitCast() {
        if (!currentInfo.isImplicitCast()) {
            currentInfo.setImplicitCast(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoSideEffects() {
        if ((!hasAnySingletonSideEffectTags()) && (!currentInfo.isNoSideEffects())) {
            currentInfo.setNoSideEffects(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExterns() {
        if (!currentInfo.isExterns()) {
            currentInfo.setExterns(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isInterfaceRecorded() {
        return currentInfo.isInterface();
    }

    public boolean hasParameter(java.lang.String name) {
        return currentInfo.hasParameter(name);
    }

    public boolean recordImplementedInterface(com.google.javascript.rhino.JSTypeExpression interfaceName) {
        if (currentInfo.addImplementedInterface(interfaceName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExtendedInterface(com.google.javascript.rhino.JSTypeExpression interfaceType) {
        if (currentInfo.addExtendedInterface(interfaceType)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordLends(java.lang.String name) {
        if (!hasAnyTypeRelatedTags()) {
            currentInfo.setLendsName(name);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    private boolean hasAnyTypeRelatedTags() {
        return (((((((currentInfo.isConstructor() || currentInfo.isInterface()) || (currentInfo.getParameterCount() > 0)) || currentInfo.hasReturnType()) || currentInfo.hasBaseType()) || (currentInfo.getExtendedInterfacesCount() > 0)) || (currentInfo.getLendsName() != null)) || currentInfo.hasThisType()) || hasAnySingletonTypeTags();
    }

    private boolean hasAnySingletonTypeTags() {
        return (currentInfo.hasType() || currentInfo.hasTypedefType()) || currentInfo.hasEnumParameterType();
    }

    private boolean hasAnySingletonSideEffectTags() {
        return currentInfo.isNoSideEffects() || currentInfo.hasModifies();
    }
}
[348692] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659826048042
GPR[SSUN]-1659826048042
-1251822497
GPR[SPVATF]-1659826048234
GPR[EPVATF]-1659826049657
GPR[SPS]-1659826049657
[350798] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:814.
GPR[EPS]-1659826050148
GPR[ESUN]-1659826050148
GPR[SSUN]-1659826050148
-1251822497
GPR[SPVATF]-1659826050357
GPR[EPVATF]-1659826051837
GPR[SPS]-1659826051837
[352991] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:813.
GPR[EPS]-1659826052341
GPR[ESUN]-1659826052341
GPR[SSUN]-1659826052341
1508981886
GPR[ESUN]-1659826052565
GPR[SSUN]-1659826052565
1508981886
GPR[SPVATF]-1659826052782
GPR[EPVATF]-1659826054355
GPR[SPS]-1659826054355
[355571] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:382.
GPR[EPS]-1659826054921
GPR[ESUN]-1659826054921
GPR[SSUN]-1659826054921
-1251822497
GPR[SPVATF]-1659826055169
GPR[EPVATF]-1659826056698
GPR[SPS]-1659826056698
[357850] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:811.
GPR[EPS]-1659826057200
GPR[ESUN]-1659826057200
GPR[SSUN]-1659826057200
-179796259
GPR[SPVATF]-1659826057464
GPR[EPVATF]-1659826059131
GPR[SPS]-1659826059131
[360542] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:307.
GPR[EPS]-1659826059892
GPR[ESUN]-1659826059892
GPR[SSUN]-1659826059892
-179796259
GPR[SPVATF]-1659826060155
GPR[EPVATF]-1659826061916
GPR[SPS]-1659826061916
[363391] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:306.
GPR[EPS]-1659826062741
GPR[ESUN]-1659826062741
GPR[SSUN]-1659826062741
-179796259
GPR[SPVATF]-1659826063271
GPR[EPVATF]-1659826065111
GPR[SPS]-1659826065111
[366515] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:297.
GPR[EPS]-1659826065865
GPR[SPVATF]-1659826065866
GPR[EPVATF]-1659826068016
GPR[SPS]-1659826068016
[369404] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:297.
GPR[EPS]-1659826068754
GPR[ESUN]-1659826068754
GPR[SSUN]-1659826068754
-1797850673
GPR[SPVATF]-1659826069049
GPR[EPVATF]-1659826071180
GPR[SPS]-1659826071180
[372499] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1019.
GPR[EPS]-1659826071849
GPR[ESUN]-1659826071849
GPR[SSUN]-1659826071849
-1797850673
GPR[SPVATF]-1659826072226
GPR[EPVATF]-1659826074357
GPR[SPS]-1659826074357
[376535] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1042.
GPR[EPS]-1659826075885
GPR[ESUN]-1659826075885
GPR[SSUN]-1659826075885
-1797850673
GPR[SPVATF]-1659826076192
GPR[EPVATF]-1659826078414
GPR[SPS]-1659826078414
[379775] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1035.
GPR[EPS]-1659826079125
GPR[SPVATF]-1659826079125
GPR[EPVATF]-1659826080508
GPR[SPS]-1659826080508
[381828] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1035.
GPR[EPS]-1659826081178
GPR[ESUN]-1659826081178
GPR[SSUN]-1659826081178
-1797850673
GPR[ESUN]-1659826081495
GPR[SSUN]-1659826081495
-1797850673
GPR[SPVATF]-1659826081773
GPR[EPVATF]-1659826083130
GPR[SPS]-1659826083130
[384431] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1033.
GPR[EPS]-1659826083781
GPR[SPVATF]-1659826083782
GPR[EPVATF]-1659826085164
GPR[SPS]-1659826085164
[386504] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1033.
GPR[EPS]-1659826085854
GPR[ESUN]-1659826085854
GPR[SSUN]-1659826085854
-1797850673
GPR[ESUN]-1659826086145
GPR[SSUN]-1659826086145
-1797850673
GPR[ESUN]-1659826086433
GPR[SSUN]-1659826086433
-1797850673
GPR[SPVATF]-1659826086711
GPR[EPVATF]-1659826088062
GPR[SPS]-1659826088062
[389390] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1018.
GPR[EPS]-1659826088740
GPR[SPVATF]-1659826088741
GPR[EPVATF]-1659826090107
GPR[SPS]-1659826090107
[391342] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1018.
GPR[EPS]-1659826090692
GPR[ESUN]-1659826090692
GPR[SSUN]-1659826090692
-1797850673
GPR[ESUN]-1659826090934
GPR[SSUN]-1659826090934
-1797850673
GPR[SPVATF]-1659826091212
GPR[EPVATF]-1659826092541
GPR[SPS]-1659826092541
[393811] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1010.
GPR[EPS]-1659826093161
GPR[SPVATF]-1659826093161
GPR[EPVATF]-1659826094457
GPR[SPS]-1659826094457
[395824] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1010.
GPR[EPS]-1659826095174
GPR[ESUN]-1659826095174
GPR[SSUN]-1659826095174
-1797850673
GPR[ESUN]-1659826095437
GPR[SSUN]-1659826095438
-1797850673
GPR[ESUN]-1659826095723
GPR[SSUN]-1659826095723
-1797850673
GPR[ESUN]-1659826096030
GPR[SSUN]-1659826096030
-1797850673
GPR[SPVATF]-1659826096323
GPR[EPVATF]-1659826097649
GPR[SPS]-1659826097649
[398997] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:999.
GPR[EPS]-1659826098347
GPR[SPVATF]-1659826098347
GPR[EPVATF]-1659826099759
GPR[SPS]-1659826099759
[401093] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:999.
GPR[EPS]-1659826100443
GPR[ESUN]-1659826100443
GPR[SSUN]-1659826100443
-1797850673
GPR[ESUN]-1659826100733
GPR[SSUN]-1659826100733
-1797850673
GPR[ESUN]-1659826101026
GPR[SSUN]-1659826101027
1401453194
GPR[ESUN]-1659826101235
GPR[SSUN]-1659826101235
1401453194
GPR[ESUN]-1659826101454
GPR[SSUN]-1659826101454
1401453194
GPR[SPVATF]-1659826101683
GPR[EPVATF]-1659826103430
GPR[SPS]-1659826103430
[405204] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:194.
GPR[EPS]-1659826104554
GPR[ESUN]-1659826104554
GPR[SSUN]-1659826104554
2433571
GPR[ESUN]-1659826104820
GPR[SSUN]-1659826104820
2433571
GPR[SPVATF]-1659826105088
GPR[EPVATF]-1659826106498
GPR[SPS]-1659826106498
[407934] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:533.
GPR[EPS]-1659826107284
GPR[ESUN]-1659826107284
GPR[SSUN]-1659826107284
-1007410555
GPR[ESUN]-1659826107494
GPR[SSUN]-1659826107494
1401453194
GPR[SPVATF]-1659826107705
GPR[EPVATF]-1659826109119
GPR[SPS]-1659826109119
[410292] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:191.
GPR[EPS]-1659826109642
GPR[SPVATF]-1659826109642
GPR[EPVATF]-1659826111041
GPR[SPS]-1659826111041
[412236] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:191.
GPR[EPS]-1659826111586
GPR[ESUN]-1659826111586
GPR[SSUN]-1659826111586
1401453194
GPR[SPVATF]-1659826111797
GPR[EPVATF]-1659826113279
GPR[SPS]-1659826113279
[414399] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:190.
GPR[EPS]-1659826113749
GPR[ESUN]-1659826113749
GPR[SSUN]-1659826113749
1401453194
GPR[ESUN]-1659826113950
GPR[SSUN]-1659826113950
-1251822497
GPR[SPVATF]-1659826114149
GPR[EPVATF]-1659826115714
GPR[SPS]-1659826115714
[416649] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class JSDocInfoBuilder {
    private com.google.javascript.rhino.JSDocInfo currentInfo;

    private boolean populated = false;

    private boolean parseDocumentation = false;

    private com.google.javascript.rhino.JSDocInfo.Marker currentMarker = null;

    public JSDocInfoBuilder(boolean parseDocumentation) {
        this.currentInfo = new com.google.javascript.rhino.JSDocInfo(parseDocumentation);
        this.parseDocumentation = parseDocumentation;
    }

    public void recordOriginalCommentString(java.lang.String sourceComment) {
        if (parseDocumentation) {
            currentInfo.setOriginalCommentString(sourceComment);
        }
    }

    public boolean shouldParseDocumentation() {
        return parseDocumentation;
    }

    public boolean isPopulated() {
        return populated;
    }

    public boolean isPopulatedWithFileOverview() {
        return isPopulated() && ((currentInfo.hasFileOverview() || currentInfo.isExterns()) || currentInfo.isNoCompile());
    }

    public boolean isDescriptionRecorded() {
        return currentInfo.getDescription() != null;
    }

    public com.google.javascript.rhino.JSDocInfo build(com.google.javascript.rhino.Node associatedNode) {
        if (populated) {
            com.google.javascript.rhino.JSDocInfo built = currentInfo;
            built.setAssociatedNode(associatedNode);
            com.google.javascript.rhino.JSDocInfoBuilder.populateDefaults(built);
            populated = false;
            currentInfo = new com.google.javascript.rhino.JSDocInfo(this.parseDocumentation);
            return built;
        } else {
            return null;
        }
    }

    private static void populateDefaults(com.google.javascript.rhino.JSDocInfo info) {
        if (info.getVisibility() == null) {
            info.setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED);
        }
    }

    public void markAnnotation(java.lang.String annotation, int lineno, int charno) {
        com.google.javascript.rhino.JSDocInfo.Marker marker = currentInfo.addMarker();
        if (marker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(annotation);
            position.setPositionInformation(lineno, charno, lineno, charno + annotation.length());
            marker.setAnnotation(position);
            populated = true;
        }
        currentMarker = marker;
    }

    public void markText(java.lang.String text, int startLineno, int startCharno, int endLineno, int endCharno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.StringPosition position = new com.google.javascript.rhino.JSDocInfo.StringPosition();
            position.setItem(text);
            position.setPositionInformation(startLineno, startCharno, endLineno, endCharno);
            currentMarker.setDescription(position);
        }
    }

    public void markTypeNode(com.google.javascript.rhino.Node typeNode, int lineno, int startCharno, int endLineno, int endCharno, boolean hasLC) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TypePosition position = new com.google.javascript.rhino.JSDocInfo.TypePosition();
            position.setItem(typeNode);
            position.setHasBrackets(hasLC);
            position.setPositionInformation(lineno, startCharno, endLineno, endCharno);
            currentMarker.setType(position);
        }
    }

    @java.lang.Deprecated
    public void markName(java.lang.String name, int lineno, int charno) {
        markName(name, null, lineno, charno);
    }

    public void markName(java.lang.String name, com.google.javascript.rhino.jstype.StaticSourceFile file, int lineno, int charno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(name);
            position.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setName(position);
            com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodePos = new com.google.javascript.rhino.JSDocInfo.NamePosition();
            com.google.javascript.rhino.Node node = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, name, lineno, charno);
            node.setLength(name.length());
            node.setStaticSourceFile(file);
            nodePos.setItem(node);
            nodePos.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setNameNode(nodePos);
        }
    }

    public boolean recordBlockDescription(java.lang.String description) {
        populated = true;
        return currentInfo.documentBlock(description);
    }

    public boolean recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility visibility) {
        if (currentInfo.getVisibility() == null) {
            populated = true;
            currentInfo.setVisibility(visibility);
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameter(java.lang.String parameterName, com.google.javascript.rhino.JSTypeExpression type) {
        if ((!hasAnySingletonTypeTags()) && currentInfo.declareParam(type, parameterName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameterDescription(java.lang.String parameterName, java.lang.String description) {
        if (currentInfo.documentParam(parameterName, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTemplateTypeNames(java.util.List<java.lang.String> names) {
        if (currentInfo.declareTemplateTypeNames(names)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThrowType(com.google.javascript.rhino.JSTypeExpression type) {
        if (!hasAnySingletonTypeTags()) {
            currentInfo.declareThrows(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordThrowDescription(com.google.javascript.rhino.JSTypeExpression type, java.lang.String description) {
        if (currentInfo.documentThrows(type, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addAuthor(java.lang.String author) {
        if (currentInfo.documentAuthor(author)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addReference(java.lang.String reference) {
        if (currentInfo.documentReference(reference)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConsistentIdGenerator() {
        if (!currentInfo.isConsistentIdGenerator()) {
            currentInfo.setConsistentIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordVersion(java.lang.String version) {
        if (currentInfo.documentVersion(version)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecationReason(java.lang.String reason) {
        if (currentInfo.setDeprecationReason(reason)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordSuppressions(java.util.Set<java.lang.String> suppressions) {
        if (currentInfo.setSuppressions(suppressions)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordModifies(java.util.Set<java.lang.String> modifies) {
        if ((!hasAnySingletonSideEffectTags()) && currentInfo.setModifies(modifies)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTypedef(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setTypedefType(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordIdGenerator() {
        if (!currentInfo.isIdGenerator()) {
            currentInfo.setIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (currentInfo.getReturnType() == null)) && (!hasAnySingletonTypeTags())) {
            currentInfo.setReturnType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnDescription(java.lang.String description) {
        if (currentInfo.documentReturn(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDefineType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((((type != null) && (!currentInfo.isConstant())) && (!currentInfo.isDefine())) && recordType(type)) {
            currentInfo.setDefine(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordEnumParameterType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setEnumParameterType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThisType(com.google.javascript.rhino.JSTypeExpression type) {
        if (((type != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasThisType())) {
            currentInfo.setThisType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordBaseType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasBaseType())) {
            currentInfo.setBaseType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstancy() {
        if (!currentInfo.isConstant()) {
            currentInfo.setConstant(true);
            populated = true;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(113).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.populated",com.google.javascript.rhino.JSDocInfoBuilder.this.populated);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation",com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker",com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo",com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(113).collectionEnds();
            }
            if (runtimeAngelicValue)
                return true;

        } else {
            return false;
        }
    }

    public boolean recordDescription(java.lang.String description) {
        if ((description != null) && (currentInfo.getDescription() == null)) {
            currentInfo.setDescription(description);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordMeaning(java.lang.String meaning) {
        if ((meaning != null) && (currentInfo.getMeaning() == null)) {
            currentInfo.setMeaning(meaning);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordFileOverview(java.lang.String description) {
        if (currentInfo.documentFileOverview(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordHiddenness() {
        if (!currentInfo.isHidden()) {
            currentInfo.setHidden(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoCompile() {
        if (!currentInfo.isNoCompile()) {
            currentInfo.setNoCompile(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoTypeCheck() {
        if (!currentInfo.isNoTypeCheck()) {
            currentInfo.setNoCheck(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstructor() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setConstructor(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isConstructorRecorded() {
        return currentInfo.isConstructor();
    }

    public boolean recordJavaDispatch() {
        if (!currentInfo.isJavaDispatch()) {
            currentInfo.setJavaDispatch(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isJavaDispatch() {
        return currentInfo.isJavaDispatch();
    }

    public boolean recordPreserveTry() {
        if (!currentInfo.shouldPreserveTry()) {
            currentInfo.setShouldPreserveTry(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordOverride() {
        if (!currentInfo.isOverride()) {
            currentInfo.setOverride(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoAlias() {
        if (!currentInfo.isNoAlias()) {
            currentInfo.setNoAlias(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecated() {
        if (!currentInfo.isDeprecated()) {
            currentInfo.setDeprecated(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordInterface() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setInterface(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExport() {
        if (!currentInfo.isExport()) {
            currentInfo.setExport(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExpose() {
        if (!currentInfo.isExpose()) {
            currentInfo.setExpose(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoShadow() {
        if (!currentInfo.isNoShadow()) {
            currentInfo.setNoShadow(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordImplicitCast() {
        if (!currentInfo.isImplicitCast()) {
            currentInfo.setImplicitCast(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoSideEffects() {
        if ((!hasAnySingletonSideEffectTags()) && (!currentInfo.isNoSideEffects())) {
            currentInfo.setNoSideEffects(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExterns() {
        if (!currentInfo.isExterns()) {
            currentInfo.setExterns(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isInterfaceRecorded() {
        return currentInfo.isInterface();
    }

    public boolean hasParameter(java.lang.String name) {
        return currentInfo.hasParameter(name);
    }

    public boolean recordImplementedInterface(com.google.javascript.rhino.JSTypeExpression interfaceName) {
        if (currentInfo.addImplementedInterface(interfaceName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExtendedInterface(com.google.javascript.rhino.JSTypeExpression interfaceType) {
        if (currentInfo.addExtendedInterface(interfaceType)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordLends(java.lang.String name) {
        if (!hasAnyTypeRelatedTags()) {
            currentInfo.setLendsName(name);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    private boolean hasAnyTypeRelatedTags() {
        return (((((((currentInfo.isConstructor() || currentInfo.isInterface()) || (currentInfo.getParameterCount() > 0)) || currentInfo.hasReturnType()) || currentInfo.hasBaseType()) || (currentInfo.getExtendedInterfacesCount() > 0)) || (currentInfo.getLendsName() != null)) || currentInfo.hasThisType()) || hasAnySingletonTypeTags();
    }

    private boolean hasAnySingletonTypeTags() {
        return (currentInfo.hasType() || currentInfo.hasTypedefType()) || currentInfo.hasEnumParameterType();
    }

    private boolean hasAnySingletonSideEffectTags() {
        return currentInfo.isNoSideEffects() || currentInfo.hasModifies();
    }
}
[416649] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659826115999
GPR[SSUN]-1659826115999
-1251822497
GPR[SPVATF]-1659826116205
GPR[EPVATF]-1659826117788
GPR[SPS]-1659826117788
GPR[EPS]-1659826138586
GPR[ESUN]-1659826138586
GPR[SSUN]-1659826138586
-1251822497
GPR[SPVATF]-1659826139062
GPR[EPVATF]-1659826140837
GPR[SPS]-1659826140837
GPR[EPS]-1659826147473
GPR[ESUN]-1659826147473
GPR[SSUN]-1659826147473
-1251822497
GPR[SPVATF]-1659826147692
GPR[EPVATF]-1659826149742
GPR[SPS]-1659826149742
[450920] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:586.
GPR[EPS]-1659826150271
GPR[ESUN]-1659826150271
GPR[SSUN]-1659826150271
1508981886
GPR[ESUN]-1659826150500
GPR[SSUN]-1659826150500
1508981886
GPR[SPVATF]-1659826150726
GPR[EPVATF]-1659826152835
GPR[SPS]-1659826152835
GPR[EPS]-1659826200151
GPR[ESUN]-1659826200151
GPR[SSUN]-1659826200151
-179796259
GPR[SPVATF]-1659826200836
GPR[EPVATF]-1659826203003
GPR[SPS]-1659826203003
[504325] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class JsDocInfoParser {
    private final com.google.javascript.jscomp.parsing.JsDocTokenStream stream;

    private final com.google.javascript.rhino.JSDocInfoBuilder jsdocBuilder;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final com.google.javascript.rhino.Node associatedNode;

    private final com.google.javascript.rhino.head.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.JsDocInfoParser.ErrorReporterParser parser = new com.google.javascript.jscomp.parsing.JsDocInfoParser.ErrorReporterParser();

    private final com.google.javascript.rhino.Node templateNode;

    private class ErrorReporterParser {
        void addParserWarning(java.lang.String messageId, java.lang.String messageArg, int lineno, int charno) {
            errorReporter.warning(com.google.javascript.rhino.ScriptRuntime.getMessage1(messageId, messageArg), getSourceName(), lineno, null, charno);
        }

        void addParserWarning(java.lang.String messageId, int lineno, int charno) {
            errorReporter.warning(com.google.javascript.rhino.ScriptRuntime.getMessage0(messageId), getSourceName(), lineno, null, charno);
        }

        void addTypeWarning(java.lang.String messageId, java.lang.String messageArg, int lineno, int charno) {
            errorReporter.warning("Bad type annotation. " + com.google.javascript.rhino.ScriptRuntime.getMessage1(messageId, messageArg), getSourceName(), lineno, null, charno);
        }

        void addTypeWarning(java.lang.String messageId, int lineno, int charno) {
            errorReporter.warning("Bad type annotation. " + com.google.javascript.rhino.ScriptRuntime.getMessage0(messageId), getSourceName(), lineno, null, charno);
        }
    }

    private com.google.javascript.rhino.JSDocInfo fileOverviewJSDocInfo = null;

    private com.google.javascript.jscomp.parsing.JsDocInfoParser.State state;

    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.parsing.Annotation> annotationNames;

    private final java.util.Set<java.lang.String> suppressionNames;

    private static final java.util.Set<java.lang.String> modifiesAnnotationKeywords = com.google.common.collect.ImmutableSet.<java.lang.String>of("this", "arguments");

    private com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder;

    void setFileLevelJsDocBuilder(com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder) {
        this.fileLevelJsDocBuilder = fileLevelJsDocBuilder;
    }

    void setFileOverviewJSDocInfo(com.google.javascript.rhino.JSDocInfo fileOverviewJSDocInfo) {
        this.fileOverviewJSDocInfo = fileOverviewJSDocInfo;
    }

    private enum State {

        SEARCHING_ANNOTATION,
        SEARCHING_NEWLINE,
        NEXT_IS_ANNOTATION;}

    JsDocInfoParser(com.google.javascript.jscomp.parsing.JsDocTokenStream stream, com.google.javascript.rhino.head.ast.Comment commentNode, com.google.javascript.rhino.Node associatedNode, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        this.stream = stream;
        this.associatedNode = associatedNode;
        this.sourceFile = (associatedNode == null) ? null : associatedNode.getStaticSourceFile();
        this.jsdocBuilder = new com.google.javascript.rhino.JSDocInfoBuilder(config.parseJsDocDocumentation);
        if (commentNode != null) {
            this.jsdocBuilder.recordOriginalCommentString(commentNode.getValue());
        }
        this.annotationNames = config.annotationNames;
        this.suppressionNames = config.suppressionNames;
        this.errorReporter = errorReporter;
        this.templateNode = this.createTemplateNode();
    }

    private java.lang.String getSourceName() {
        return sourceFile == null ? null : sourceFile.getName();
    }

    public static com.google.javascript.rhino.Node parseTypeString(java.lang.String typeString) {
        com.google.javascript.jscomp.parsing.Config config = new com.google.javascript.jscomp.parsing.Config(com.google.common.collect.Sets.<java.lang.String>newHashSet(), com.google.common.collect.Sets.<java.lang.String>newHashSet(), false, com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3, false);
        com.google.javascript.jscomp.parsing.JsDocInfoParser parser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(typeString), null, null, config, com.google.javascript.jscomp.parsing.NullErrorReporter.forNewRhino());
        return parser.parseTopLevelTypeExpression(parser.next());
    }

    boolean parse() {
        int lineno;
        int charno;
        com.google.javascript.rhino.JSTypeExpression type;
        state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION;
        skipEOLs();
        com.google.javascript.jscomp.parsing.JsDocToken token = next();
        java.util.List<com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo> extendedTypes = com.google.common.collect.Lists.newArrayList();
        if (jsdocBuilder.shouldParseDocumentation()) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo blockInfo = extractBlockComment(token);
            token = blockInfo.token;
            if (!blockInfo.string.isEmpty()) {
                jsdocBuilder.recordBlockDescription(blockInfo.string);
            }
        } else if ((token != com.google.javascript.jscomp.parsing.JsDocToken.ANNOTATION) && (token != com.google.javascript.jscomp.parsing.JsDocToken.EOC)) {
            jsdocBuilder.recordBlockDescription("");
        }
        retry : for (; ;) {
            switch (token) {
                case ANNOTATION :
                    if (state == com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION) {
                        state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_NEWLINE;
                        lineno = stream.getLineno();
                        charno = stream.getCharno();
                        java.lang.String annotationName = stream.getString();
                        com.google.javascript.jscomp.parsing.Annotation annotation = annotationNames.get(annotationName);
                        if (annotation == null) {
                            parser.addParserWarning("msg.bad.jsdoc.tag", annotationName, stream.getLineno(), stream.getCharno());
                        } else {
                            jsdocBuilder.markAnnotation(annotationName, lineno, charno);
                            switch (annotation) {
                                case AUTHOR :
                                    if (jsdocBuilder.shouldParseDocumentation()) {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo authorInfo = extractSingleLineBlock();
                                        java.lang.String author = authorInfo.string;
                                        if (author.length() == 0) {
                                            parser.addParserWarning("msg.jsdoc.authormissing", stream.getLineno(), stream.getCharno());
                                        } else {
                                            jsdocBuilder.addAuthor(author);
                                        }
                                        token = authorInfo.token;
                                    } else {
                                        token = eatTokensUntilEOL(token);
                                    }
                                    continue retry;
                                case CONSISTENTIDGENERATOR :
                                    if (!jsdocBuilder.recordConsistentIdGenerator()) {
                                        parser.addParserWarning("msg.jsdoc.consistidgen", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case CONSTANT :
                                    if (!jsdocBuilder.recordConstancy()) {
                                        parser.addParserWarning("msg.jsdoc.const", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case CONSTRUCTOR :
                                    if (!jsdocBuilder.recordConstructor()) {
                                        if (jsdocBuilder.isInterfaceRecorded()) {
                                            parser.addTypeWarning("msg.jsdoc.interface.constructor", stream.getLineno(), stream.getCharno());
                                        } else {
                                            parser.addTypeWarning("msg.jsdoc.incompat.type", stream.getLineno(), stream.getCharno());
                                        }
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case DEPRECATED :
                                    if (!jsdocBuilder.recordDeprecated()) {
                                        parser.addParserWarning("msg.jsdoc.deprecated", stream.getLineno(), stream.getCharno());
                                    }
                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo reasonInfo = extractMultilineTextualBlock(token);
                                    java.lang.String reason = reasonInfo.string;
                                    if (reason.length() > 0) {
                                        jsdocBuilder.recordDeprecationReason(reason);
                                    }
                                    token = reasonInfo.token;
                                    continue retry;
                                case INTERFACE :
                                    if (!jsdocBuilder.recordInterface()) {
                                        if (jsdocBuilder.isConstructorRecorded()) {
                                            parser.addTypeWarning("msg.jsdoc.interface.constructor", stream.getLineno(), stream.getCharno());
                                        } else {
                                            parser.addTypeWarning("msg.jsdoc.incompat.type", stream.getLineno(), stream.getCharno());
                                        }
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case DESC :
                                    if (jsdocBuilder.isDescriptionRecorded()) {
                                        parser.addParserWarning("msg.jsdoc.desc.extra", stream.getLineno(), stream.getCharno());
                                        token = eatTokensUntilEOL();
                                        continue retry;
                                    } else {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo descriptionInfo = extractMultilineTextualBlock(token);
                                        java.lang.String description = descriptionInfo.string;
                                        jsdocBuilder.recordDescription(description);
                                        token = descriptionInfo.token;
                                        continue retry;
                                    }
                                case FILE_OVERVIEW :
                                    java.lang.String fileOverview = "";
                                    if (jsdocBuilder.shouldParseDocumentation()) {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo fileOverviewInfo = extractMultilineTextualBlock(token, com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.TRIM);
                                        fileOverview = fileOverviewInfo.string;
                                        token = fileOverviewInfo.token;
                                    } else {
                                        token = eatTokensUntilEOL(token);
                                    }
                                    if (!jsdocBuilder.recordFileOverview(fileOverview)) {
                                        parser.addParserWarning("msg.jsdoc.fileoverview.extra", stream.getLineno(), stream.getCharno());
                                    }
                                    continue retry;
                                case LICENSE :
                                case PRESERVE :
                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo preserveInfo = extractMultilineTextualBlock(token, com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE);
                                    java.lang.String preserve = preserveInfo.string;
                                    if (preserve.length() > 0) {
                                        if (fileLevelJsDocBuilder != null) {
                                            fileLevelJsDocBuilder.append(preserve);
                                        }
                                    }
                                    token = preserveInfo.token;
                                    continue retry;
                                case ENUM :
                                    token = next();
                                    lineno = stream.getLineno();
                                    charno = stream.getCharno();
                                    type = null;
                                    if ((token != com.google.javascript.jscomp.parsing.JsDocToken.EOL) && (token != com.google.javascript.jscomp.parsing.JsDocToken.EOC)) {
                                        type = createJSTypeExpression(parseAndRecordTypeNode(token));
                                    }
                                    if (type == null) {
                                        type = createJSTypeExpression(newStringNode("number"));
                                    }
                                    if (!jsdocBuilder.recordEnumParameterType(type)) {
                                        parser.addTypeWarning("msg.jsdoc.incompat.type", lineno, charno);
                                    }
                                    token = eatTokensUntilEOL(token);
                                    continue retry;
                                case EXPORT :
                                    if (!jsdocBuilder.recordExport()) {
                                        parser.addParserWarning("msg.jsdoc.export", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case EXPOSE :
                                    if (!jsdocBuilder.recordExpose()) {
                                        parser.addParserWarning("msg.jsdoc.expose", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case EXTERNS :
                                    if (!jsdocBuilder.recordExterns()) {
                                        parser.addParserWarning("msg.jsdoc.externs", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case JAVA_DISPATCH :
                                    if (!jsdocBuilder.recordJavaDispatch()) {
                                        parser.addParserWarning("msg.jsdoc.javadispatch", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case EXTENDS :
                                case IMPLEMENTS :
                                    skipEOLs();
                                    token = next();
                                    lineno = stream.getLineno();
                                    charno = stream.getCharno();
                                    boolean matchingRc = false;
                                    if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
                                        token = next();
                                        matchingRc = true;
                                    }
                                    if (token == com.google.javascript.jscomp.parsing.JsDocToken.STRING) {
                                        com.google.javascript.rhino.Node typeNode = parseAndRecordTypeNameNode(token, lineno, charno, matchingRc);
                                        lineno = stream.getLineno();
                                        charno = stream.getCharno();
                                        typeNode = wrapNode(com.google.javascript.rhino.Token.BANG, typeNode);
                                        if ((typeNode != null) && (!matchingRc)) {
                                            typeNode.putBooleanProp(com.google.javascript.rhino.Node.BRACELESS_TYPE, true);
                                        }
                                        type = createJSTypeExpression(typeNode);
                                        if (annotation == com.google.javascript.jscomp.parsing.Annotation.EXTENDS) {
                                            extendedTypes.add(new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo(type, stream.getLineno(), stream.getCharno()));
                                        } else {
                                            com.google.common.base.Preconditions.checkState(annotation == com.google.javascript.jscomp.parsing.Annotation.IMPLEMENTS);
                                            if (!jsdocBuilder.recordImplementedInterface(type)) {
                                                parser.addTypeWarning("msg.jsdoc.implements.duplicate", lineno, charno);
                                            }
                                        }
                                        token = next();
                                        if (matchingRc) {
                                            if (token != com.google.javascript.jscomp.parsing.JsDocToken.RC) {
                                                parser.addTypeWarning("msg.jsdoc.missing.rc", stream.getLineno(), stream.getCharno());
                                            }
                                        } else if (((token != com.google.javascript.jscomp.parsing.JsDocToken.EOL) && (token != com.google.javascript.jscomp.parsing.JsDocToken.EOF)) && (token != com.google.javascript.jscomp.parsing.JsDocToken.EOC)) {
                                            parser.addTypeWarning("msg.end.annotation.expected", stream.getLineno(), stream.getCharno());
                                        }
                                    } else {
                                        parser.addTypeWarning("msg.no.type.name", lineno, charno);
                                    }
                                    token = eatTokensUntilEOL(token);
                                    continue retry;
                                case HIDDEN :
                                    if (!jsdocBuilder.recordHiddenness()) {
                                        parser.addParserWarning("msg.jsdoc.hidden", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case LENDS :
                                    skipEOLs();
                                    matchingRc = false;
                                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.LC)) {
                                        token = next();
                                        matchingRc = true;
                                    }
                                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.STRING)) {
                                        token = next();
                                        if (!jsdocBuilder.recordLends(stream.getString())) {
                                            parser.addTypeWarning("msg.jsdoc.lends.incompatible", stream.getLineno(), stream.getCharno());
                                        }
                                    } else {
                                        parser.addTypeWarning("msg.jsdoc.lends.missing", stream.getLineno(), stream.getCharno());
                                    }
                                    if (matchingRc && (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC))) {
                                        parser.addTypeWarning("msg.jsdoc.missing.rc", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case MEANING :
                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo meaningInfo = extractMultilineTextualBlock(token);
                                    java.lang.String meaning = meaningInfo.string;
                                    token = meaningInfo.token;
                                    if (!jsdocBuilder.recordMeaning(meaning)) {
                                        parser.addParserWarning("msg.jsdoc.meaning.extra", stream.getLineno(), stream.getCharno());
                                    }
                                    continue retry;
                                case NO_ALIAS :
                                    if (!jsdocBuilder.recordNoAlias()) {
                                        parser.addParserWarning("msg.jsdoc.noalias", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case NO_COMPILE :
                                    if (!jsdocBuilder.recordNoCompile()) {
                                        parser.addParserWarning("msg.jsdoc.nocompile", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case NO_TYPE_CHECK :
                                    if (!jsdocBuilder.recordNoTypeCheck()) {
                                        parser.addParserWarning("msg.jsdoc.nocheck", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case NOT_IMPLEMENTED :
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case INHERIT_DOC :
                                case OVERRIDE :
                                    if (!jsdocBuilder.recordOverride()) {
                                        parser.addTypeWarning("msg.jsdoc.override", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case THROWS :
                                    skipEOLs();
                                    token = next();
                                    lineno = stream.getLineno();
                                    charno = stream.getCharno();
                                    type = null;
                                    if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
                                        type = createJSTypeExpression(parseAndRecordTypeNode(token));
                                        if (type == null) {
                                            token = eatTokensUntilEOL();
                                            continue retry;
                                        }
                                    }
                                    token = current();
                                    jsdocBuilder.recordThrowType(type);
                                    if (jsdocBuilder.shouldParseDocumentation()) {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo descriptionInfo = extractMultilineTextualBlock(token);
                                        java.lang.String description = descriptionInfo.string;
                                        if (description.length() > 0) {
                                            jsdocBuilder.recordThrowDescription(type, description);
                                        }
                                        token = descriptionInfo.token;
                                    } else {
                                        token = eatTokensUntilEOL(token);
                                    }
                                    continue retry;
                                case PARAM :
                                    skipEOLs();
                                    token = next();
                                    lineno = stream.getLineno();
                                    charno = stream.getCharno();
                                    type = null;
                                    if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
                                        type = createJSTypeExpression(parseAndRecordParamTypeNode(token));
                                        if (type == null) {
                                            token = eatTokensUntilEOL();
                                            continue retry;
                                        }
                                        skipEOLs();
                                        token = next();
                                        lineno = stream.getLineno();
                                        charno = stream.getCharno();
                                    }
                                    java.lang.String name = null;
                                    boolean isBracketedParam = com.google.javascript.jscomp.parsing.JsDocToken.LB == token;
                                    if (isBracketedParam) {
                                        token = next();
                                    }
                                    if (com.google.javascript.jscomp.parsing.JsDocToken.STRING != token) {
                                        parser.addTypeWarning("msg.missing.variable.name", lineno, charno);
                                    } else {
                                        name = stream.getString();
                                        if (isBracketedParam) {
                                            token = next();
                                            if (com.google.javascript.jscomp.parsing.JsDocToken.EQUALS == token) {
                                                token = next();
                                                if (com.google.javascript.jscomp.parsing.JsDocToken.STRING == token) {
                                                    token = next();
                                                }
                                            }
                                            if (com.google.javascript.jscomp.parsing.JsDocToken.RB != token) {
                                                reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
                                            } else if (type != null) {
                                                type = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(type);
                                            }
                                        }
                                        if (name.indexOf('.') > (-1)) {
                                            name = null;
                                        } else if (!jsdocBuilder.recordParameter(name, type)) {
                                            if (jsdocBuilder.hasParameter(name)) {
                                                parser.addTypeWarning("msg.dup.variable.name", name, lineno, charno);
                                            } else {
                                                parser.addTypeWarning("msg.jsdoc.incompat.type", name, lineno, charno);
                                            }
                                        }
                                    }
                                    if (name == null) {
                                        token = eatTokensUntilEOL(token);
                                        continue retry;
                                    }
                                    jsdocBuilder.markName(name, sourceFile, lineno, charno);
                                    if (jsdocBuilder.shouldParseDocumentation()) {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo paramDescriptionInfo = extractMultilineTextualBlock(token);
                                        java.lang.String paramDescription = paramDescriptionInfo.string;
                                        if (paramDescription.length() > 0) {
                                            jsdocBuilder.recordParameterDescription(name, paramDescription);
                                        }
                                        token = paramDescriptionInfo.token;
                                    } else {
                                        token = eatTokensUntilEOL(token);
                                    }
                                    continue retry;
                                case PRESERVE_TRY :
                                    if (!jsdocBuilder.recordPreserveTry()) {
                                        parser.addParserWarning("msg.jsdoc.preservertry", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case PRIVATE :
                                    if (!jsdocBuilder.recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE)) {
                                        parser.addParserWarning("msg.jsdoc.visibility.private", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case PROTECTED :
                                    if (!jsdocBuilder.recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED)) {
                                        parser.addParserWarning("msg.jsdoc.visibility.protected", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case PUBLIC :
                                    if (!jsdocBuilder.recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.PUBLIC)) {
                                        parser.addParserWarning("msg.jsdoc.visibility.public", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case NO_SHADOW :
                                    if (!jsdocBuilder.recordNoShadow()) {
                                        parser.addParserWarning("msg.jsdoc.noshadow", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case NO_SIDE_EFFECTS :
                                    if (!jsdocBuilder.recordNoSideEffects()) {
                                        parser.addParserWarning("msg.jsdoc.nosideeffects", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case MODIFIES :
                                    token = parseModifiesTag(next());
                                    continue retry;
                                case IMPLICIT_CAST :
                                    if (!jsdocBuilder.recordImplicitCast()) {
                                        parser.addTypeWarning("msg.jsdoc.implicitcast", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case SEE :
                                    if (jsdocBuilder.shouldParseDocumentation()) {
                                        com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo referenceInfo = extractSingleLineBlock();
                                        java.lang.String reference = referenceInfo.string;
                                        if (reference.length() == 0) {
                                            parser.addParserWarning("msg.jsdoc.seemissing", stream.getLineno(), stream.getCharno());
                                        } else {
                                            jsdocBuilder.addReference(reference);
                                        }
                                        token = referenceInfo.token;
                                    } else {
                                        token = eatTokensUntilEOL(token);
                                    }
                                    continue retry;
                                case SUPPRESS :
                                    token = parseSuppressTag(next());
                                    continue retry;
                                case TEMPLATE :
                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo templateInfo = extractSingleLineBlock();
                                    java.util.List<java.lang.String> names = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(',').trimResults().split(templateInfo.string));
                                    if ((names.size() == 0) || (names.get(0).length() == 0)) {
                                        parser.addTypeWarning("msg.jsdoc.templatemissing", stream.getLineno(), stream.getCharno());
                                    } else if (!jsdocBuilder.recordTemplateTypeNames(names)) {
                                        parser.addTypeWarning("msg.jsdoc.template.at.most.once", stream.getLineno(), stream.getCharno());
                                    }
                                    token = templateInfo.token;
                                    continue retry;
                                case IDGENERATOR :
                                    if (!jsdocBuilder.recordIdGenerator()) {
                                        parser.addParserWarning("msg.jsdoc.idgen", stream.getLineno(), stream.getCharno());
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                                case VERSION :
                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo versionInfo = extractSingleLineBlock();
                                    java.lang.String version = versionInfo.string;
                                    if (version.length() == 0) {
                                        parser.addParserWarning("msg.jsdoc.versionmissing", stream.getLineno(), stream.getCharno());
                                    } else if (!jsdocBuilder.recordVersion(version)) {
                                        parser.addParserWarning("msg.jsdoc.extraversion", stream.getLineno(), stream.getCharno());
                                    }
                                    token = versionInfo.token;
                                    continue retry;
                                case DEFINE :
                                case RETURN :
                                case THIS :
                                case TYPE :
                                case TYPEDEF :
                                    lineno = stream.getLineno();
                                    charno = stream.getCharno();
                                    com.google.javascript.rhino.Node typeNode = null;
                                    if ((!lookAheadForTypeAnnotation()) && (annotation == com.google.javascript.jscomp.parsing.Annotation.RETURN)) {
                                        typeNode = newNode(com.google.javascript.rhino.Token.QMARK);
                                    } else {
                                        skipEOLs();
                                        token = next();
                                        typeNode = parseAndRecordTypeNode(token);
                                    }
                                    if (annotation == com.google.javascript.jscomp.parsing.Annotation.THIS) {
                                        typeNode = wrapNode(com.google.javascript.rhino.Token.BANG, typeNode);
                                        if ((typeNode != null) && (token != com.google.javascript.jscomp.parsing.JsDocToken.LC)) {
                                            typeNode.putBooleanProp(com.google.javascript.rhino.Node.BRACELESS_TYPE, true);
                                        }
                                    }
                                    type = createJSTypeExpression(typeNode);
                                    if (type == null) {
                                    } else {
                                        switch (annotation) {
                                            case DEFINE :
                                                if (!jsdocBuilder.recordDefineType(type)) {
                                                    parser.addParserWarning("msg.jsdoc.define", lineno, charno);
                                                }
                                                break;
                                            case RETURN :
                                                if (!jsdocBuilder.recordReturnType(type)) {
                                                    parser.addTypeWarning("msg.jsdoc.incompat.type", lineno, charno);
                                                    break;
                                                }
                                                if (jsdocBuilder.shouldParseDocumentation()) {
                                                    com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo returnDescriptionInfo = extractMultilineTextualBlock(token);
                                                    java.lang.String returnDescription = returnDescriptionInfo.string;
                                                    if (returnDescription.length() > 0) {
                                                        jsdocBuilder.recordReturnDescription(returnDescription);
                                                    }
                                                    token = returnDescriptionInfo.token;
                                                } else {
                                                    token = eatTokensUntilEOL(token);
                                                }
                                                continue retry;
                                            case THIS :
                                                if (!jsdocBuilder.recordThisType(type)) {
                                                    parser.addTypeWarning("msg.jsdoc.incompat.type", lineno, charno);
                                                }
                                                break;
                                            case TYPE :
                                                if (!jsdocBuilder.recordType(type)) {
                                                    parser.addTypeWarning("msg.jsdoc.incompat.type", lineno, charno);
                                                }
                                                break;
                                            case TYPEDEF :
                                                if (!jsdocBuilder.recordTypedef(type)) {
                                                    parser.addTypeWarning("msg.jsdoc.incompat.type", lineno, charno);
                                                }
                                                break;
                                        }
                                    }
                                    token = eatTokensUntilEOL();
                                    continue retry;
                            }
                        }
                    }
                    break;
                case EOC :
                    if (hasParsedFileOverviewDocInfo()) {
                        fileOverviewJSDocInfo = retrieveAndResetParsedJSDocInfo();
                    }
                    checkExtendedTypes(extendedTypes);
                    return true;
                case EOF :
                    jsdocBuilder.build(null);
                    parser.addParserWarning("msg.unexpected.eof", stream.getLineno(), stream.getCharno());
                    checkExtendedTypes(extendedTypes);
                    return false;
                case EOL :
                    if (state == com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_NEWLINE) {
                        state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION;
                    }
                    token = next();
                    continue retry;
                default :
                    if ((token == com.google.javascript.jscomp.parsing.JsDocToken.STAR) && (state == com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION)) {
                        token = next();
                        continue retry;
                    } else {
                        state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_NEWLINE;
                        token = eatTokensUntilEOL();
                        continue retry;
                    }
            }
            token = next();
        }
    }

    private void checkExtendedTypes(java.util.List<com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo> extendedTypes) {
        for (com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtendedTypeInfo typeInfo : extendedTypes) {
            if (jsdocBuilder.isInterfaceRecorded()) {
                if (!jsdocBuilder.recordExtendedInterface(typeInfo.type)) {
                    parser.addParserWarning("msg.jsdoc.extends.duplicate", typeInfo.lineno, typeInfo.charno);
                }
            } else if (!jsdocBuilder.recordBaseType(typeInfo.type)) {
                parser.addTypeWarning("msg.jsdoc.incompat.type", typeInfo.lineno, typeInfo.charno);
            }
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocToken parseSuppressTag(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
            java.util.Set<java.lang.String> suppressions = new java.util.HashSet<java.lang.String>();
            while (true) {
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.STRING)) {
                    java.lang.String name = stream.getString();
                    if (!suppressionNames.contains(name)) {
                        parser.addParserWarning("msg.jsdoc.suppress.unknown", name, stream.getLineno(), stream.getCharno());
                    }
                    suppressions.add(stream.getString());
                    token = next();
                } else {
                    parser.addParserWarning("msg.jsdoc.suppress", stream.getLineno(), stream.getCharno());
                    return token;
                }
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                    token = next();
                } else {
                    break;
                }
            } 
            if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
                parser.addParserWarning("msg.jsdoc.suppress", stream.getLineno(), stream.getCharno());
            } else {
                token = next();
                if (!jsdocBuilder.recordSuppressions(suppressions)) {
                    parser.addParserWarning("msg.jsdoc.suppress.duplicate", stream.getLineno(), stream.getCharno());
                }
            }
        }
        return token;
    }

    private com.google.javascript.jscomp.parsing.JsDocToken parseModifiesTag(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
            java.util.Set<java.lang.String> modifies = new java.util.HashSet<java.lang.String>();
            while (true) {
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.STRING)) {
                    java.lang.String name = stream.getString();
                    if ((!com.google.javascript.jscomp.parsing.JsDocInfoParser.modifiesAnnotationKeywords.contains(name)) && (!jsdocBuilder.hasParameter(name))) {
                        parser.addParserWarning("msg.jsdoc.modifies.unknown", name, stream.getLineno(), stream.getCharno());
                    }
                    modifies.add(stream.getString());
                    token = next();
                } else {
                    parser.addParserWarning("msg.jsdoc.modifies", stream.getLineno(), stream.getCharno());
                    return token;
                }
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                    token = next();
                } else {
                    break;
                }
            } 
            if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
                parser.addParserWarning("msg.jsdoc.modifies", stream.getLineno(), stream.getCharno());
            } else {
                token = next();
                if (!jsdocBuilder.recordModifies(modifies)) {
                    parser.addParserWarning("msg.jsdoc.modifies.duplicate", stream.getLineno(), stream.getCharno());
                }
            }
        }
        return token;
    }

    private com.google.javascript.rhino.Node parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken token) {
        return parseAndRecordTypeNode(token, token == com.google.javascript.jscomp.parsing.JsDocToken.LC);
    }

    private com.google.javascript.rhino.Node parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken token, boolean matchingLC) {
        return parseAndRecordTypeNode(token, stream.getLineno(), stream.getCharno(), matchingLC, false);
    }

    private com.google.javascript.rhino.Node parseAndRecordTypeNameNode(com.google.javascript.jscomp.parsing.JsDocToken token, int lineno, int startCharno, boolean matchingLC) {
        return parseAndRecordTypeNode(token, lineno, startCharno, matchingLC, true);
    }

    private com.google.javascript.rhino.Node parseAndRecordParamTypeNode(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.common.base.Preconditions.checkArgument(token == com.google.javascript.jscomp.parsing.JsDocToken.LC);
        int lineno = stream.getLineno();
        int startCharno = stream.getCharno();
        com.google.javascript.rhino.Node typeNode = parseParamTypeExpressionAnnotation(token);
        if (typeNode != null) {
            int endLineno = stream.getLineno();
            int endCharno = stream.getCharno();
            jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endLineno, endCharno, true);
        }
        return typeNode;
    }

    private com.google.javascript.rhino.Node parseAndRecordTypeNode(com.google.javascript.jscomp.parsing.JsDocToken token, int lineno, int startCharno, boolean matchingLC, boolean onlyParseSimpleNames) {
        com.google.javascript.rhino.Node typeNode = null;
        if (onlyParseSimpleNames) {
            typeNode = parseTypeNameAnnotation(token);
        } else {
            typeNode = parseTypeExpressionAnnotation(token);
        }
        if ((typeNode != null) && (!matchingLC)) {
            typeNode.putBooleanProp(com.google.javascript.rhino.Node.BRACELESS_TYPE, true);
        }
        if (typeNode != null) {
            int endLineno = stream.getLineno();
            int endCharno = stream.getCharno();
            jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endLineno, endCharno, matchingLC);
        }
        return typeNode;
    }

    private java.lang.String toString(com.google.javascript.jscomp.parsing.JsDocToken token) {
        switch (token) {
            case ANNOTATION :
                return "@" + stream.getString();
            case BANG :
                return "!";
            case COMMA :
                return ",";
            case COLON :
                return ":";
            case GT :
                return ">";
            case LB :
                return "[";
            case LC :
                return "{";
            case LP :
                return "(";
            case LT :
                return ".<";
            case QMARK :
                return "?";
            case PIPE :
                return "|";
            case RB :
                return "]";
            case RC :
                return "}";
            case RP :
                return ")";
            case STAR :
                return "*";
            case ELLIPSIS :
                return "...";
            case EQUALS :
                return "=";
            case STRING :
                return stream.getString();
            default :
                throw new java.lang.IllegalStateException(token.toString());
        }
    }

    private com.google.javascript.rhino.JSTypeExpression createJSTypeExpression(com.google.javascript.rhino.Node n) {
        return n == null ? null : new com.google.javascript.rhino.JSTypeExpression(n, getSourceName());
    }

    private static class ExtractionInfo {
        private final java.lang.String string;

        private final com.google.javascript.jscomp.parsing.JsDocToken token;

        public ExtractionInfo(java.lang.String string, com.google.javascript.jscomp.parsing.JsDocToken token) {
            this.string = string;
            this.token = token;
        }
    }

    private static class ExtendedTypeInfo {
        final com.google.javascript.rhino.JSTypeExpression type;

        final int lineno;

        final int charno;

        public ExtendedTypeInfo(com.google.javascript.rhino.JSTypeExpression type, int lineno, int charno) {
            this.type = type;
            this.lineno = lineno;
            this.charno = charno;
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo extractSingleLineBlock() {
        stream.update();
        int lineno = stream.getLineno();
        int charno = stream.getCharno() + 1;
        java.lang.String line = stream.getRemainingJSDocLine().trim();
        if (line.length() > 0) {
            jsdocBuilder.markText(line, lineno, charno, lineno, charno + line.length());
        }
        return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(line, next());
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo extractMultilineTextualBlock(com.google.javascript.jscomp.parsing.JsDocToken token) {
        return extractMultilineTextualBlock(token, com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.SINGLE_LINE);
    }

    private enum WhitespaceOption {

        PRESERVE,
        TRIM,
        SINGLE_LINE;}

    @java.lang.SuppressWarnings("fallthrough")
    private com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo extractMultilineTextualBlock(com.google.javascript.jscomp.parsing.JsDocToken token, com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption option) {
        if (((token == com.google.javascript.jscomp.parsing.JsDocToken.EOC) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EOL)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EOF)) {
            return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo("", token);
        }
        stream.update();
        int startLineno = stream.getLineno();
        int startCharno = stream.getCharno() + 1;
        java.lang.String line = stream.getRemainingJSDocLine();
        if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {
            line = line.trim();
        }
        java.lang.StringBuilder builder = new java.lang.StringBuilder();
        builder.append(line);
        state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION;
        token = next();
        boolean ignoreStar = false;
        int lineStartChar = -1;
        do {
            switch (token) {
                case STAR :
                    if (ignoreStar) {
                        lineStartChar = stream.getCharno() + 1;
                    } else {
                        if (builder.length() > 0) {
                            builder.append(' ');
                        }
                        builder.append('*');
                    }
                    token = next();
                    continue;
                case EOL :
                    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.SINGLE_LINE) {
                        builder.append("\n");
                    }
                    ignoreStar = true;
                    lineStartChar = 0;
                    token = next();
                    continue;
                default :
                    ignoreStar = false;
                    state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION;
                    boolean isEOC = token == com.google.javascript.jscomp.parsing.JsDocToken.EOC;
                    if (!isEOC) {
                        if ((lineStartChar != (-1)) && (option == com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE)) {
                            int numSpaces = stream.getCharno() - lineStartChar;
                            for (int i = 0; i < numSpaces; i++) {
                                builder.append(' ');
                            }
                            lineStartChar = -1;
                        } else if (builder.length() > 0) {
                            builder.append(' ');
                        }
                    }
                    if (((token == com.google.javascript.jscomp.parsing.JsDocToken.EOC) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EOF)) || ((token == com.google.javascript.jscomp.parsing.JsDocToken.ANNOTATION) && (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE))) {
                        java.lang.String multilineText = builder.toString();
                        if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {
                            multilineText = multilineText.trim();
                        }
                        int endLineno = stream.getLineno();
                        int endCharno = stream.getCharno();
                        if (multilineText.length() > 0) {
                            jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno);
                        }
                        return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(multilineText, token);
                    }
                    builder.append(toString(token));
                    line = stream.getRemainingJSDocLine();
                    if (option != com.google.javascript.jscomp.parsing.JsDocInfoParser.WhitespaceOption.PRESERVE) {
                        line = com.google.javascript.jscomp.parsing.JsDocInfoParser.trimEnd(line);
                    }
                    builder.append(line);
                    token = next();
            }
        } while (true );
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo extractBlockComment(com.google.javascript.jscomp.parsing.JsDocToken token) {
        java.lang.StringBuilder builder = new java.lang.StringBuilder();
        boolean ignoreStar = true;
        do {
            switch (token) {
                case ANNOTATION :
                case EOC :
                case EOF :
                    return new com.google.javascript.jscomp.parsing.JsDocInfoParser.ExtractionInfo(builder.toString().trim(), token);
                case STAR :
                    if (!ignoreStar) {
                        if (builder.length() > 0) {
                            builder.append(' ');
                        }
                        builder.append('*');
                    }
                    token = next();
                    continue;
                case EOL :
                    ignoreStar = true;
                    builder.append('\n');
                    token = next();
                    continue;
                default :
                    if ((!ignoreStar) && (builder.length() > 0)) {
                        builder.append(' ');
                    }
                    ignoreStar = false;
                    builder.append(toString(token));
                    java.lang.String line = stream.getRemainingJSDocLine();
                    line = com.google.javascript.jscomp.parsing.JsDocInfoParser.trimEnd(line);
                    builder.append(line);
                    token = next();
            }
        } while (true );
    }

    private static java.lang.String trimEnd(java.lang.String s) {
        int trimCount = 0;
        while (trimCount < s.length()) {
            char ch = s.charAt((s.length() - trimCount) - 1);
            if (java.lang.Character.isWhitespace(ch)) {
                trimCount++;
            } else {
                break;
            }
        } 
        if (trimCount == 0) {
            return s;
        }
        return s.substring(0, s.length() - trimCount);
    }

    private com.google.javascript.rhino.Node parseTypeExpressionAnnotation(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
            skipEOLs();
            com.google.javascript.rhino.Node typeNode = parseTopLevelTypeExpression(next());
            if (typeNode != null) {
                skipEOLs();
                if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
                    reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
                } else {
                    next();
                }
            }
            return typeNode;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(118).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.fileOverviewJSDocInfo",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.fileOverviewJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.parser",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.parser);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.associatedNode",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.associatedNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.suppressionNames",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.suppressionNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.templateNode",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.sourceFile",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.jsdocBuilder",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.jsdocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.stream",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.stream);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN",com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("token",token);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.modifiesAnnotationKeywords",com.google.javascript.jscomp.parsing.JsDocInfoParser.modifiesAnnotationKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.annotationNames",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.annotationNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.unreadToken",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.unreadToken);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.errorReporter",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectInput("com.google.javascript.jscomp.parsing.JsDocInfoParser.this.state",com.google.javascript.jscomp.parsing.JsDocInfoParser.this.state);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(118).collectionEnds();
            }
            if (runtimeAngelicValue)
                return parseTypeExpression(token);

        }
    }

    private com.google.javascript.rhino.Node parseParamTypeExpressionAnnotation(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.common.base.Preconditions.checkArgument(token == com.google.javascript.jscomp.parsing.JsDocToken.LC);
        skipEOLs();
        boolean restArg = false;
        token = next();
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.ELLIPSIS) {
            token = next();
            if (token == com.google.javascript.jscomp.parsing.JsDocToken.RC) {
                return wrapNode(com.google.javascript.rhino.Token.ELLIPSIS, com.google.javascript.rhino.IR.empty());
            }
            restArg = true;
        }
        com.google.javascript.rhino.Node typeNode = parseTopLevelTypeExpression(token);
        if (typeNode != null) {
            skipEOLs();
            if (restArg) {
                typeNode = wrapNode(com.google.javascript.rhino.Token.ELLIPSIS, typeNode);
            } else if (match(com.google.javascript.jscomp.parsing.JsDocToken.EQUALS)) {
                next();
                skipEOLs();
                typeNode = wrapNode(com.google.javascript.rhino.Token.EQUALS, typeNode);
            }
            if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
                reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
            } else {
                next();
            }
        }
        return typeNode;
    }

    private com.google.javascript.rhino.Node parseTypeNameAnnotation(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
            skipEOLs();
            com.google.javascript.rhino.Node typeNode = parseTypeName(next());
            if (typeNode != null) {
                skipEOLs();
                if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
                    reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
                } else {
                    next();
                }
            }
            return typeNode;
        } else {
            return parseTypeName(token);
        }
    }

    private com.google.javascript.rhino.Node parseTopLevelTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node typeExpr = parseTypeExpression(token);
        if (typeExpr != null) {
            if (match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                next();
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                    next();
                }
                skipEOLs();
                token = next();
                return parseUnionTypeWithAlternate(token, typeExpr);
            }
        }
        return typeExpr;
    }

    private com.google.javascript.rhino.Node parseTypeExpressionList(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node typeExpr = parseTopLevelTypeExpression(token);
        if (typeExpr == null) {
            return null;
        }
        com.google.javascript.rhino.Node typeList = com.google.javascript.rhino.IR.block();
        typeList.addChildToBack(typeExpr);
        while (match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA)) {
            next();
            skipEOLs();
            typeExpr = parseTopLevelTypeExpression(next());
            if (typeExpr == null) {
                return null;
            }
            typeList.addChildToBack(typeExpr);
        } 
        return typeList;
    }

    private com.google.javascript.rhino.Node parseTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.QMARK) {
            token = next();
            if ((((((token == com.google.javascript.jscomp.parsing.JsDocToken.COMMA) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EQUALS)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.RB)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.RC)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.RP)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                restoreLookAhead(token);
                return newNode(com.google.javascript.rhino.Token.QMARK);
            }
            return wrapNode(com.google.javascript.rhino.Token.QMARK, parseBasicTypeExpression(token));
        } else if (token == com.google.javascript.jscomp.parsing.JsDocToken.BANG) {
            return wrapNode(com.google.javascript.rhino.Token.BANG, parseBasicTypeExpression(next()));
        } else {
            com.google.javascript.rhino.Node basicTypeExpr = parseBasicTypeExpression(token);
            if (basicTypeExpr != null) {
                if (match(com.google.javascript.jscomp.parsing.JsDocToken.QMARK)) {
                    next();
                    return wrapNode(com.google.javascript.rhino.Token.QMARK, basicTypeExpr);
                } else if (match(com.google.javascript.jscomp.parsing.JsDocToken.BANG)) {
                    next();
                    return wrapNode(com.google.javascript.rhino.Token.BANG, basicTypeExpr);
                }
            }
            return basicTypeExpr;
        }
    }

    private com.google.javascript.rhino.Node parseBasicTypeExpression(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token == com.google.javascript.jscomp.parsing.JsDocToken.STAR) {
            return newNode(com.google.javascript.rhino.Token.STAR);
        } else if (token == com.google.javascript.jscomp.parsing.JsDocToken.LB) {
            skipEOLs();
            return parseArrayType(next());
        } else if (token == com.google.javascript.jscomp.parsing.JsDocToken.LC) {
            skipEOLs();
            return parseRecordType(next());
        } else if (token == com.google.javascript.jscomp.parsing.JsDocToken.LP) {
            skipEOLs();
            return parseUnionType(next());
        } else if (token == com.google.javascript.jscomp.parsing.JsDocToken.STRING) {
            java.lang.String string = stream.getString();
            if ("function".equals(string)) {
                skipEOLs();
                return parseFunctionType(next());
            } else if ("null".equals(string) || "undefined".equals(string)) {
                return newStringNode(string);
            } else {
                return parseTypeName(token);
            }
        }
        restoreLookAhead(token);
        return reportGenericTypeSyntaxWarning();
    }

    private com.google.javascript.rhino.Node parseTypeName(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token != com.google.javascript.jscomp.parsing.JsDocToken.STRING) {
            return reportGenericTypeSyntaxWarning();
        }
        java.lang.String typeName = stream.getString();
        int lineno = stream.getLineno();
        int charno = stream.getCharno();
        while (match(com.google.javascript.jscomp.parsing.JsDocToken.EOL) && (typeName.charAt(typeName.length() - 1) == '.')) {
            skipEOLs();
            if (match(com.google.javascript.jscomp.parsing.JsDocToken.STRING)) {
                next();
                typeName += stream.getString();
            }
        } 
        com.google.javascript.rhino.Node typeNameNode = newStringNode(typeName, lineno, charno);
        if (match(com.google.javascript.jscomp.parsing.JsDocToken.LT)) {
            next();
            skipEOLs();
            com.google.javascript.rhino.Node memberType = parseTypeExpressionList(next());
            if (memberType != null) {
                typeNameNode.addChildToFront(memberType);
                skipEOLs();
                if (!match(com.google.javascript.jscomp.parsing.JsDocToken.GT)) {
                    return reportTypeSyntaxWarning("msg.jsdoc.missing.gt");
                }
                next();
            }
        }
        return typeNameNode;
    }

    private com.google.javascript.rhino.Node parseFunctionType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        if (token != com.google.javascript.jscomp.parsing.JsDocToken.LP) {
            restoreLookAhead(token);
            return reportTypeSyntaxWarning("msg.jsdoc.missing.lp");
        }
        com.google.javascript.rhino.Node functionType = newNode(com.google.javascript.rhino.Token.FUNCTION);
        com.google.javascript.rhino.Node parameters = null;
        skipEOLs();
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RP)) {
            token = next();
            boolean hasParams = true;
            if (token == com.google.javascript.jscomp.parsing.JsDocToken.STRING) {
                java.lang.String tokenStr = stream.getString();
                boolean isThis = "this".equals(tokenStr);
                boolean isNew = "new".equals(tokenStr);
                if (isThis || isNew) {
                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.COLON)) {
                        next();
                        skipEOLs();
                        com.google.javascript.rhino.Node contextType = wrapNode(isThis ? com.google.javascript.rhino.Token.THIS : com.google.javascript.rhino.Token.NEW, parseTypeName(next()));
                        if (contextType == null) {
                            return null;
                        }
                        functionType.addChildToFront(contextType);
                    } else {
                        return reportTypeSyntaxWarning("msg.jsdoc.missing.colon");
                    }
                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA)) {
                        next();
                        skipEOLs();
                        token = next();
                    } else {
                        hasParams = false;
                    }
                }
            }
            if (hasParams) {
                parameters = parseParametersType(token);
                if (parameters == null) {
                    return null;
                }
            }
        }
        if (parameters != null) {
            functionType.addChildToBack(parameters);
        }
        skipEOLs();
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RP)) {
            return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
        }
        skipEOLs();
        com.google.javascript.rhino.Node resultType = parseResultType(next());
        if (resultType == null) {
            return null;
        } else {
            functionType.addChildToBack(resultType);
        }
        return functionType;
    }

    private com.google.javascript.rhino.Node parseParametersType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node paramsType = newNode(com.google.javascript.rhino.Token.PARAM_LIST);
        boolean isVarArgs = false;
        com.google.javascript.rhino.Node paramType = null;
        if (token != com.google.javascript.jscomp.parsing.JsDocToken.RP) {
            do {
                if (paramType != null) {
                    next();
                    skipEOLs();
                    token = next();
                }
                if (token == com.google.javascript.jscomp.parsing.JsDocToken.ELLIPSIS) {
                    skipEOLs();
                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.RP)) {
                        paramType = newNode(com.google.javascript.rhino.Token.ELLIPSIS);
                    } else {
                        skipEOLs();
                        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.LB)) {
                            return reportTypeSyntaxWarning("msg.jsdoc.missing.lb");
                        }
                        next();
                        skipEOLs();
                        paramType = wrapNode(com.google.javascript.rhino.Token.ELLIPSIS, parseTypeExpression(next()));
                        skipEOLs();
                        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RB)) {
                            return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
                        }
                        skipEOLs();
                        next();
                    }
                    isVarArgs = true;
                } else {
                    paramType = parseTypeExpression(token);
                    if (match(com.google.javascript.jscomp.parsing.JsDocToken.EQUALS)) {
                        skipEOLs();
                        next();
                        paramType = wrapNode(com.google.javascript.rhino.Token.EQUALS, paramType);
                    }
                }
                if (paramType == null) {
                    return null;
                }
                paramsType.addChildToBack(paramType);
                if (isVarArgs) {
                    break;
                }
            } while (match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA) );
        }
        if (isVarArgs && match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA)) {
            return reportTypeSyntaxWarning("msg.jsdoc.function.varargs");
        }
        return paramsType;
    }

    private com.google.javascript.rhino.Node parseResultType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        skipEOLs();
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.COLON)) {
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }
        token = next();
        skipEOLs();
        if (match(com.google.javascript.jscomp.parsing.JsDocToken.STRING) && "void".equals(stream.getString())) {
            next();
            return newNode(com.google.javascript.rhino.Token.VOID);
        } else {
            return parseTypeExpression(next());
        }
    }

    private com.google.javascript.rhino.Node parseUnionType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        return parseUnionTypeWithAlternate(token, null);
    }

    private com.google.javascript.rhino.Node parseUnionTypeWithAlternate(com.google.javascript.jscomp.parsing.JsDocToken token, com.google.javascript.rhino.Node alternate) {
        com.google.javascript.rhino.Node union = newNode(com.google.javascript.rhino.Token.PIPE);
        if (alternate != null) {
            union.addChildToBack(alternate);
        }
        com.google.javascript.rhino.Node expr = null;
        do {
            if (expr != null) {
                skipEOLs();
                token = next();
                com.google.common.base.Preconditions.checkState((token == com.google.javascript.jscomp.parsing.JsDocToken.PIPE) || (token == com.google.javascript.jscomp.parsing.JsDocToken.COMMA));
                boolean isPipe = token == com.google.javascript.jscomp.parsing.JsDocToken.PIPE;
                if (isPipe && match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE)) {
                    next();
                }
                skipEOLs();
                token = next();
            }
            expr = parseTypeExpression(token);
            if (expr == null) {
                return null;
            }
            union.addChildToBack(expr);
        } while (match(com.google.javascript.jscomp.parsing.JsDocToken.PIPE, com.google.javascript.jscomp.parsing.JsDocToken.COMMA) );
        if (alternate == null) {
            skipEOLs();
            if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RP)) {
                return reportTypeSyntaxWarning("msg.jsdoc.missing.rp");
            }
            next();
        }
        return union;
    }

    private com.google.javascript.rhino.Node parseArrayType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node array = newNode(com.google.javascript.rhino.Token.LB);
        com.google.javascript.rhino.Node arg = null;
        boolean hasVarArgs = false;
        do {
            if (arg != null) {
                next();
                skipEOLs();
                token = next();
            }
            if (token == com.google.javascript.jscomp.parsing.JsDocToken.ELLIPSIS) {
                arg = wrapNode(com.google.javascript.rhino.Token.ELLIPSIS, parseTypeExpression(next()));
                hasVarArgs = true;
            } else {
                arg = parseTypeExpression(token);
            }
            if (arg == null) {
                return null;
            }
            array.addChildToBack(arg);
            if (hasVarArgs) {
                break;
            }
            skipEOLs();
        } while (match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA) );
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RB)) {
            return reportTypeSyntaxWarning("msg.jsdoc.missing.rb");
        }
        next();
        return array;
    }

    private com.google.javascript.rhino.Node parseRecordType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node recordType = newNode(com.google.javascript.rhino.Token.LC);
        com.google.javascript.rhino.Node fieldTypeList = parseFieldTypeList(token);
        if (fieldTypeList == null) {
            return reportGenericTypeSyntaxWarning();
        }
        skipEOLs();
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.RC)) {
            return reportTypeSyntaxWarning("msg.jsdoc.missing.rc");
        }
        next();
        recordType.addChildToBack(fieldTypeList);
        return recordType;
    }

    private com.google.javascript.rhino.Node parseFieldTypeList(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node fieldTypeList = newNode(com.google.javascript.rhino.Token.LB);
        do {
            com.google.javascript.rhino.Node fieldType = parseFieldType(token);
            if (fieldType == null) {
                return null;
            }
            fieldTypeList.addChildToBack(fieldType);
            skipEOLs();
            if (!match(com.google.javascript.jscomp.parsing.JsDocToken.COMMA)) {
                break;
            }
            next();
            skipEOLs();
            token = next();
        } while (true );
        return fieldTypeList;
    }

    private com.google.javascript.rhino.Node parseFieldType(com.google.javascript.jscomp.parsing.JsDocToken token) {
        com.google.javascript.rhino.Node fieldName = parseFieldName(token);
        if (fieldName == null) {
            return null;
        }
        skipEOLs();
        if (!match(com.google.javascript.jscomp.parsing.JsDocToken.COLON)) {
            return fieldName;
        }
        next();
        skipEOLs();
        com.google.javascript.rhino.Node typeExpression = parseTypeExpression(next());
        if (typeExpression == null) {
            return null;
        }
        com.google.javascript.rhino.Node fieldType = newNode(com.google.javascript.rhino.Token.COLON);
        fieldType.addChildToBack(fieldName);
        fieldType.addChildToBack(typeExpression);
        return fieldType;
    }

    private com.google.javascript.rhino.Node parseFieldName(com.google.javascript.jscomp.parsing.JsDocToken token) {
        switch (token) {
            case STRING :
                java.lang.String string = stream.getString();
                return newStringNode(string);
            default :
                return null;
        }
    }

    private com.google.javascript.rhino.Node wrapNode(int type, com.google.javascript.rhino.Node n) {
        return n == null ? null : new com.google.javascript.rhino.Node(type, n, stream.getLineno(), stream.getCharno()).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type, stream.getLineno(), stream.getCharno()).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String s) {
        return newStringNode(s, stream.getLineno(), stream.getCharno());
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String s, int lineno, int charno) {
        com.google.javascript.rhino.Node n = com.google.javascript.rhino.Node.newString(s, lineno, charno).clonePropsFrom(templateNode);
        n.setLength(s.length());
        return n;
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = com.google.javascript.rhino.IR.script();
        templateNode.setStaticSourceFile(this.associatedNode != null ? this.associatedNode.getStaticSourceFile() : null);
        return templateNode;
    }

    private com.google.javascript.rhino.Node reportTypeSyntaxWarning(java.lang.String warning) {
        parser.addTypeWarning(warning, stream.getLineno(), stream.getCharno());
        return null;
    }

    private com.google.javascript.rhino.Node reportGenericTypeSyntaxWarning() {
        return reportTypeSyntaxWarning("msg.jsdoc.type.syntax");
    }

    private com.google.javascript.jscomp.parsing.JsDocToken eatTokensUntilEOL() {
        return eatTokensUntilEOL(next());
    }

    private com.google.javascript.jscomp.parsing.JsDocToken eatTokensUntilEOL(com.google.javascript.jscomp.parsing.JsDocToken token) {
        do {
            if (((token == com.google.javascript.jscomp.parsing.JsDocToken.EOL) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EOC)) || (token == com.google.javascript.jscomp.parsing.JsDocToken.EOF)) {
                state = com.google.javascript.jscomp.parsing.JsDocInfoParser.State.SEARCHING_ANNOTATION;
                return token;
            }
            token = next();
        } while (true );
    }

    private static final com.google.javascript.jscomp.parsing.JsDocToken NO_UNREAD_TOKEN = null;

    private com.google.javascript.jscomp.parsing.JsDocToken unreadToken = com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN;

    private void restoreLookAhead(com.google.javascript.jscomp.parsing.JsDocToken token) {
        unreadToken = token;
    }

    private boolean match(com.google.javascript.jscomp.parsing.JsDocToken token) {
        unreadToken = next();
        return unreadToken == token;
    }

    private boolean match(com.google.javascript.jscomp.parsing.JsDocToken token1, com.google.javascript.jscomp.parsing.JsDocToken token2) {
        unreadToken = next();
        return (unreadToken == token1) || (unreadToken == token2);
    }

    private com.google.javascript.jscomp.parsing.JsDocToken next() {
        if (unreadToken == com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN) {
            return stream.getJsDocToken();
        } else {
            return current();
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocToken current() {
        com.google.javascript.jscomp.parsing.JsDocToken t = unreadToken;
        unreadToken = com.google.javascript.jscomp.parsing.JsDocInfoParser.NO_UNREAD_TOKEN;
        return t;
    }

    private void skipEOLs() {
        while (match(com.google.javascript.jscomp.parsing.JsDocToken.EOL)) {
            next();
            if (match(com.google.javascript.jscomp.parsing.JsDocToken.STAR)) {
                next();
            }
        } 
    }

    private boolean hasParsedFileOverviewDocInfo() {
        return jsdocBuilder.isPopulatedWithFileOverview();
    }

    boolean hasParsedJSDocInfo() {
        return jsdocBuilder.isPopulated();
    }

    com.google.javascript.rhino.JSDocInfo retrieveAndResetParsedJSDocInfo() {
        return jsdocBuilder.build(associatedNode);
    }

    com.google.javascript.rhino.JSDocInfo getFileOverviewJSDocInfo() {
        return fileOverviewJSDocInfo;
    }

    private boolean lookAheadForTypeAnnotation() {
        boolean matchedLc = false;
        int c;
        while (true) {
            c = stream.getChar();
            if (c == ' ') {
                continue;
            } else if (c == '{') {
                matchedLc = true;
                break;
            } else {
                break;
            }
        } 
        stream.ungetChar(c);
        return matchedLc;
    }
}
[504325] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659826203675
GPR[SSUN]-1659826203676
-1797850673
GPR[SPVATF]-1659826203955
GPR[EPVATF]-1659826207119
GPR[SPS]-1659826207119
[508524] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:511.
GPR[EPS]-1659826207875
GPR[ESUN]-1659826207875
GPR[SSUN]-1659826207875
-1797850673
GPR[SPVATF]-1659826208165
GPR[EPVATF]-1659826209509
GPR[SPS]-1659826209509
[510818] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:510.
GPR[EPS]-1659826210168
GPR[ESUN]-1659826210168
GPR[SSUN]-1659826210169
1401453194
GPR[ESUN]-1659826210395
GPR[SSUN]-1659826210395
1401453194
GPR[SPVATF]-1659826210605
GPR[EPVATF]-1659826211963
GPR[SPS]-1659826211963
[513118] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:418.
GPR[EPS]-1659826212468
GPR[ESUN]-1659826212468
GPR[SSUN]-1659826212468
1401453194
GPR[ESUN]-1659826212689
GPR[SSUN]-1659826212689
1401453194
GPR[SPVATF]-1659826212903
GPR[EPVATF]-1659826214323
GPR[SPS]-1659826214323
[515509] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:416.
GPR[EPS]-1659826214859
GPR[ESUN]-1659826214859
GPR[SSUN]-1659826214859
1401453194
GPR[SPVATF]-1659826215052
GPR[EPVATF]-1659826216401
GPR[SPS]-1659826216401
[517574] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:415.
GPR[EPS]-1659826216924
GPR[ESUN]-1659826216924
GPR[SSUN]-1659826216924
1401453194
GPR[SPVATF]-1659826217136
GPR[EPVATF]-1659826218496
GPR[SPS]-1659826218496
[519685] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:413.
GPR[EPS]-1659826219035
GPR[ESUN]-1659826219035
GPR[SSUN]-1659826219035
1401453194
GPR[SPVATF]-1659826219258
GPR[EPVATF]-1659826220621
GPR[SPS]-1659826220621
[521837] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:412.
GPR[EPS]-1659826221187
GPR[SPVATF]-1659826221187
GPR[EPVATF]-1659826222538
GPR[SPS]-1659826222538
[523775] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:412.
GPR[EPS]-1659826223125
GPR[ESUN]-1659826223125
GPR[SSUN]-1659826223125
1401453194
GPR[SPVATF]-1659826223338
GPR[EPVATF]-1659826224698
GPR[SPS]-1659826224698
[525875] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:411.
GPR[EPS]-1659826225225
GPR[ESUN]-1659826225225
GPR[SSUN]-1659826225225
1401453194
GPR[SPVATF]-1659826225444
GPR[EPVATF]-1659826226809
GPR[SPS]-1659826226809
[527995] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:410.
GPR[EPS]-1659826227345
GPR[ESUN]-1659826227345
GPR[SSUN]-1659826227345
1401453194
GPR[ESUN]-1659826227557
GPR[SSUN]-1659826227557
1401453194
GPR[SPVATF]-1659826227773
GPR[EPVATF]-1659826229144
GPR[SPS]-1659826229144
[530321] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:408.
GPR[EPS]-1659826229671
GPR[ESUN]-1659826229671
GPR[SSUN]-1659826229671
1401453194
GPR[ESUN]-1659826229883
GPR[SSUN]-1659826229883
1401453194
GPR[ESUN]-1659826230095
GPR[SSUN]-1659826230095
-1797850673
GPR[SPVATF]-1659826230382
GPR[EPVATF]-1659826231826
GPR[SPS]-1659826231826
[533190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:986.
GPR[EPS]-1659826232540
GPR[SPVATF]-1659826232540
GPR[EPVATF]-1659826233942
GPR[SPS]-1659826233942
[535254] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:986.
GPR[EPS]-1659826234604
GPR[ESUN]-1659826234604
GPR[SSUN]-1659826234604
-1797850673
GPR[ESUN]-1659826234891
GPR[SSUN]-1659826234892
-1797850673
GPR[SPVATF]-1659826235179
GPR[EPVATF]-1659826236605
GPR[SPS]-1659826236605
[537926] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:791.
GPR[EPS]-1659826237276
GPR[ESUN]-1659826237276
GPR[SSUN]-1659826237276
646738083
GPR[SPVATF]-1659826237605
GPR[EPVATF]-1659826239049
GPR[SPS]-1659826239049
[540560] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:677.
GPR[EPS]-1659826239910
GPR[SPVATF]-1659826239910
GPR[EPVATF]-1659826241352
GPR[SPS]-1659826241352
[542680] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:677.
GPR[EPS]-1659826242030
GPR[ESUN]-1659826242030
GPR[SSUN]-1659826242030
646738083
GPR[SPVATF]-1659826242311
GPR[EPVATF]-1659826243756
GPR[SPS]-1659826243756
[545756] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:676.
GPR[EPS]-1659826245106
GPR[ESUN]-1659826245106
GPR[SSUN]-1659826245106
646738083
GPR[ESUN]-1659826245477
GPR[SSUN]-1659826245477
-622774852
GPR[ESUN]-1659826245692
GPR[SSUN]-1659826245692
1187751237
GPR[SPVATF]-1659826245992
GPR[EPVATF]-1659826248260
GPR[SPS]-1659826248261
[549686] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3099.
GPR[EPS]-1659826249036
GPR[ESUN]-1659826249036
GPR[SSUN]-1659826249036
1187751237
GPR[SPVATF]-1659826249339
GPR[EPVATF]-1659826250982
GPR[SPS]-1659826250982
[552394] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3098.
GPR[EPS]-1659826251744
GPR[SPVATF]-1659826251745
GPR[EPVATF]-1659826253463
GPR[SPS]-1659826253463
[554987] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3098.
GPR[EPS]-1659826254337
GPR[ESUN]-1659826254337
GPR[SSUN]-1659826254337
1187751237
GPR[ESUN]-1659826254633
GPR[SSUN]-1659826254634
-179796259
GPR[SPVATF]-1659826254888
GPR[EPVATF]-1659826256745
GPR[SPS]-1659826256745
[558137] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:1157.
GPR[EPS]-1659826257487
GPR[ESUN]-1659826257487
GPR[SSUN]-1659826257487
GPR[ESUN]-1659826257487
GPR[SSUN]-1659826257487
GPR[ESUN]-1659826257487
GPR[SSUN]-1659826257487
1187751237
GPR[SPVATF]-1659826257794
GPR[EPVATF]-1659826259853
GPR[SPS]-1659826259853
[561508] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2082.
GPR[EPS]-1659826260859
GPR[ESUN]-1659826260859
GPR[SSUN]-1659826260859
1187751237
GPR[ESUN]-1659826261241
GPR[SSUN]-1659826261241
1187751237
GPR[SPVATF]-1659826261648
GPR[EPVATF]-1659826263708
GPR[SPS]-1659826263708
[565119] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2081.
GPR[EPS]-1659826264469
GPR[SPVATF]-1659826264469
GPR[EPVATF]-1659826267411
GPR[SPS]-1659826267411
[568854] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2081.
GPR[EPS]-1659826268204
GPR[ESUN]-1659826268204
GPR[SSUN]-1659826268204
646738083
GPR[SPVATF]-1659826268528
GPR[EPVATF]-1659826269912
GPR[SPS]-1659826269912
[571318] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:681.
GPR[EPS]-1659826270668
GPR[SPVATF]-1659826270668
GPR[EPVATF]-1659826272058
GPR[SPS]-1659826272058
[573508] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:681.
GPR[EPS]-1659826272858
GPR[ESUN]-1659826272858
GPR[SSUN]-1659826272858
646738083
GPR[SPVATF]-1659826273188
GPR[EPVATF]-1659826274553
GPR[SPS]-1659826274553
[576005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:674.
GPR[EPS]-1659826275355
GPR[SPVATF]-1659826275355
GPR[EPVATF]-1659826276703
GPR[SPS]-1659826276703
[578148] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:674.
GPR[EPS]-1659826277498
GPR[ESUN]-1659826277498
GPR[SSUN]-1659826277498
646738083
GPR[ESUN]-1659826277825
GPR[SSUN]-1659826277825
646738083
GPR[ESUN]-1659826278152
GPR[SSUN]-1659826278152
646738083
GPR[ESUN]-1659826278462
GPR[SSUN]-1659826278462
646738083
GPR[ESUN]-1659826278784
GPR[SSUN]-1659826278784
646738083
GPR[ESUN]-1659826279142
GPR[SSUN]-1659826279142
646738083
GPR[ESUN]-1659826279432
GPR[SSUN]-1659826279432
466431456
GPR[SPVATF]-1659826279745
GPR[EPVATF]-1659826281082
GPR[SPS]-1659826281082
[582497] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:650.
GPR[EPS]-1659826281847
GPR[ESUN]-1659826281847
GPR[SSUN]-1659826281847
-46850221
GPR[ESUN]-1659826282097
GPR[SSUN]-1659826282097
-46850221
GPR[SPVATF]-1659826282347
GPR[EPVATF]-1659826283730
GPR[SPS]-1659826283730
[584949] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:524.
GPR[EPS]-1659826284299
GPR[ESUN]-1659826284299
GPR[SSUN]-1659826284299
-46850221
GPR[SPVATF]-1659826284548
GPR[EPVATF]-1659826285955
GPR[SPS]-1659826285955
[587185] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:523.
GPR[EPS]-1659826286535
GPR[SPVATF]-1659826286535
GPR[EPVATF]-1659826287901
GPR[SPS]-1659826287901
[589097] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:523.
GPR[EPS]-1659826288447
GPR[ESUN]-1659826288447
GPR[SSUN]-1659826288447
GPR[ESUN]-1659826288447
GPR[SSUN]-1659826288447
GPR[ESUN]-1659826288447
GPR[SSUN]-1659826288447
-46850221
GPR[ESUN]-1659826288698
GPR[SSUN]-1659826288698
1187751237
GPR[SPVATF]-1659826289003
GPR[EPVATF]-1659826290376
GPR[SPS]-1659826290377
[591796] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3096.
GPR[EPS]-1659826291146
GPR[SPVATF]-1659826291146
GPR[EPVATF]-1659826292590
GPR[SPS]-1659826292590
[593993] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3096.
GPR[EPS]-1659826293343
GPR[ESUN]-1659826293343
GPR[SSUN]-1659826293343
1187751237
GPR[ESUN]-1659826293651
GPR[SSUN]-1659826293651
1187751237
GPR[ESUN]-1659826293936
GPR[SSUN]-1659826293936
1187751237
GPR[SPVATF]-1659826294225
GPR[EPVATF]-1659826295626
GPR[SPS]-1659826295626
[597006] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2067.
GPR[EPS]-1659826296356
GPR[ESUN]-1659826296356
GPR[SSUN]-1659826296356
2433571
GPR[SPVATF]-1659826296601
GPR[EPVATF]-1659826298072
GPR[SPS]-1659826298072
[599481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:604.
GPR[EPS]-1659826298831
GPR[ESUN]-1659826298831
GPR[SSUN]-1659826298831
646738083
GPR[SPVATF]-1659826299164
GPR[EPVATF]-1659826300627
GPR[SPS]-1659826300627
GPR[EPS]-1659826322112
GPR[SPVATF]-1659826322112
GPR[EPVATF]-1659826324379
GPR[SPS]-1659826324379
GPR[EPS]-1659826340857
GPR[ESUN]-1659826340857
GPR[SSUN]-1659826340857
1401453194
GPR[ESUN]-1659826341116
GPR[SSUN]-1659826341116
1401453194
GPR[ESUN]-1659826341338
GPR[SSUN]-1659826341338
1401453194
GPR[SPVATF]-1659826341551
GPR[EPVATF]-1659826343157
GPR[SPS]-1659826343157
[644372] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:213.
GPR[EPS]-1659826343722
GPR[ESUN]-1659826343722
GPR[SSUN]-1659826343722
1401453194
GPR[SPVATF]-1659826343973
GPR[EPVATF]-1659826345633
GPR[SPS]-1659826345634
[646835] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionType:212.
GPR[EPS]-1659826346185
GPR[ESUN]-1659826346185
GPR[SSUN]-1659826346185
1401453194
GPR[ESUN]-1659826346422
GPR[SSUN]-1659826346422
646738083
GPR[SPVATF]-1659826346801
GPR[EPVATF]-1659826348596
GPR[SPS]-1659826348596
GPR[EPS]-1659826362419
GPR[SPVATF]-1659826362420
GPR[EPVATF]-1659826364536
GPR[SPS]-1659826364536
[666008] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:1283.
GPR[EPS]-1659826365358
GPR[ESUN]-1659826365358
GPR[SSUN]-1659826365358
-179796259
GPR[SPVATF]-1659826365641
GPR[EPVATF]-1659826367668
GPR[SPS]-1659826367668
[669868] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:944.
GPR[EPS]-1659826369218
GPR[ESUN]-1659826369218
GPR[SSUN]-1659826369218
-179796259
GPR[SPVATF]-1659826369505
GPR[EPVATF]-1659826371516
GPR[SPS]-1659826371516
[2479084] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659828178436
GPR[SSUN]-1659828178436
-179796259
GPR[SPVATF]-1659831384456
[5889134] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659831588484
GPR[SSUN]-1659831588484
2433571
GPR[ESUN]-1659834618867
GPR[SSUN]-1659834618867
2433571
GPR[SPVATF]-1659834619363
GPR[EPVATF]-1659834620827
GPR[SPS]-1659834620827
[8922261] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:603.
GPR[EPS]-1659834621611
GPR[SPVATF]-1659834621612
GPR[EPVATF]-1659834623023
GPR[SPS]-1659834623023
[8925013] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:603.
GPR[EPS]-1659834624363
GPR[ESUN]-1659834624363
GPR[SSUN]-1659834624363
2433571
GPR[SPVATF]-1659834624607
GPR[EPVATF]-1659834625970
GPR[SPS]-1659834625970
[8927376] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:602.
GPR[EPS]-1659834626726
GPR[ESUN]-1659834626726
GPR[SSUN]-1659834626726
2433571
GPR[SPVATF]-1659834626986
GPR[EPVATF]-1659834628472
GPR[SPS]-1659834628473
[8929858] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:601.
GPR[EPS]-1659834629208
GPR[ESUN]-1659834629208
GPR[SSUN]-1659834629208
2433571
GPR[SPVATF]-1659834629450
GPR[EPVATF]-1659834630826
GPR[SPS]-1659834630826
[8932211] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:600.
GPR[EPS]-1659834631561
GPR[ESUN]-1659834631561
GPR[SSUN]-1659834631561
2433571
GPR[SPVATF]-1659834631803
GPR[EPVATF]-1659834633196
GPR[SPS]-1659834633196
[8934631] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:599.
GPR[EPS]-1659834633981
GPR[ESUN]-1659834633981
GPR[SSUN]-1659834633981
2433571
GPR[SPVATF]-1659834634221
GPR[EPVATF]-1659834635591
GPR[SPS]-1659834635591
[8936990] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:598.
GPR[EPS]-1659834636340
GPR[ESUN]-1659834636340
GPR[SSUN]-1659834636340
-1345859678
GPR[SPVATF]-1659834636629
GPR[EPVATF]-1659834637993
GPR[SPS]-1659834637993
[8939270] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:900.
GPR[EPS]-1659834638620
GPR[ESUN]-1659834638620
GPR[SSUN]-1659834638620
GPR[ESUN]-1659834638620
GPR[SSUN]-1659834638620
GPR[ESUN]-1659834638620
GPR[SSUN]-1659834638620
GPR[ESUN]-1659834638620
GPR[SSUN]-1659834638620
-1605808871
GPR[SPVATF]-1659834638862
GPR[EPVATF]-1659834640246
GPR[SPS]-1659834640246
[8941485] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:396.
GPR[EPS]-1659834640835
GPR[ESUN]-1659834640835
GPR[SSUN]-1659834640835
-1605808871
GPR[SPVATF]-1659834641074
GPR[EPVATF]-1659834642433
GPR[SPS]-1659834642433
[8943654] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:394.
GPR[EPS]-1659834643004
GPR[ESUN]-1659834643004
GPR[SSUN]-1659834643004
-1605808871
GPR[SPVATF]-1659834643245
GPR[EPVATF]-1659834644639
GPR[SPS]-1659834644639
[8945917] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:389.
GPR[EPS]-1659834645267
GPR[SPVATF]-1659834645267
GPR[EPVATF]-1659834646648
GPR[SPS]-1659834646648
[8947887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:389.
GPR[EPS]-1659834647237
GPR[ESUN]-1659834647237
GPR[SSUN]-1659834647237
GPR[ESUN]-1659834647237
GPR[SSUN]-1659834647237
GPR[ESUN]-1659834647237
GPR[SSUN]-1659834647237
1537627151
GPR[ESUN]-1659834647445
GPR[SSUN]-1659834647446
-1345859678
GPR[ESUN]-1659834647693
GPR[SSUN]-1659834647693
-1345859678
GPR[ESUN]-1659834647939
GPR[SSUN]-1659834647939
-1345859678
GPR[SPVATF]-1659834648185
GPR[EPVATF]-1659834649610
GPR[SPS]-1659834649610
[8950886] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:899.
GPR[EPS]-1659834650236
GPR[SPVATF]-1659834650236
GPR[EPVATF]-1659834651751
GPR[SPS]-1659834651751
[8953024] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:899.
GPR[EPS]-1659834652374
GPR[ESUN]-1659834652374
GPR[SSUN]-1659834652374
-1345859678
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
GPR[ESUN]-1659834652625
GPR[SSUN]-1659834652625
-2097135580
GPR[ESUN]-1659834652834
GPR[SSUN]-1659834652834
704176156
GPR[ESUN]-1659834653088
GPR[SSUN]-1659834653088
704176156
GPR[ESUN]-1659834653293
GPR[SSUN]-1659834653293
704176156
GPR[SPVATF]-1659834653498
GPR[EPVATF]-1659834655021
GPR[SPS]-1659834655021
[8956237] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:153.
GPR[EPS]-1659834655587
GPR[ESUN]-1659834655587
GPR[SSUN]-1659834655587
704176156
GPR[SPVATF]-1659834655796
GPR[EPVATF]-1659834657381
GPR[SPS]-1659834657381
[8958532] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:152.
GPR[EPS]-1659834657882
GPR[ESUN]-1659834657882
GPR[SSUN]-1659834657882
704176156
GPR[SPVATF]-1659834658092
GPR[EPVATF]-1659834659730
GPR[SPS]-1659834659730
[8960873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:132.
GPR[EPS]-1659834660223
GPR[ESUN]-1659834660223
GPR[SSUN]-1659834660224
GPR[ESUN]-1659834660224
GPR[SSUN]-1659834660224
GPR[ESUN]-1659834660224
GPR[SSUN]-1659834660224
GPR[ESUN]-1659834660224
GPR[SSUN]-1659834660224
GPR[ESUN]-1659834660224
GPR[SSUN]-1659834660224
GPR[ESUN]-1659834660224
GPR[SSUN]-1659834660224
GPR[ESUN]-1659834660224
GPR[SSUN]-1659834660224
GPR[ESUN]-1659834660224
GPR[SSUN]-1659834660224
GPR[ESUN]-1659834660224
GPR[SSUN]-1659834660224
GPR[ESUN]-1659834660224
GPR[SSUN]-1659834660224
GPR[ESUN]-1659834660224
GPR[SSUN]-1659834660224
GPR[ESUN]-1659834660224
GPR[SSUN]-1659834660224
GPR[ESUN]-1659834660224
GPR[SSUN]-1659834660224
1537627151
GPR[ESUN]-1659834660430
GPR[SSUN]-1659834660430
-1345859678
GPR[ESUN]-1659834660678
GPR[SSUN]-1659834660678
-1345859678
GPR[SPVATF]-1659834660927
GPR[EPVATF]-1659834662687
GPR[SPS]-1659834662687
[8963946] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:811.
GPR[EPS]-1659834663296
GPR[ESUN]-1659834663296
GPR[SSUN]-1659834663297
-1345859678
GPR[ESUN]-1659834663544
GPR[SSUN]-1659834663544
-1345859678
GPR[SPVATF]-1659834663789
GPR[EPVATF]-1659834665595
GPR[SPS]-1659834665595
[8966898] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:806.
GPR[EPS]-1659834666248
GPR[SPVATF]-1659834666249
GPR[EPVATF]-1659834668279
GPR[SPS]-1659834668279
[8969545] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:806.
GPR[EPS]-1659834668895
GPR[ESUN]-1659834668895
GPR[SSUN]-1659834668895
GPR[ESUN]-1659834668895
GPR[SSUN]-1659834668895
GPR[ESUN]-1659834668895
GPR[SSUN]-1659834668895
GPR[ESUN]-1659834668895
GPR[SSUN]-1659834668895
GPR[ESUN]-1659834668895
GPR[SSUN]-1659834668895
GPR[ESUN]-1659834668895
GPR[SSUN]-1659834668895
GPR[ESUN]-1659834668895
GPR[SSUN]-1659834668895
GPR[ESUN]-1659834668895
GPR[SSUN]-1659834668895
GPR[ESUN]-1659834668896
GPR[SSUN]-1659834668896
GPR[ESUN]-1659834668896
GPR[SSUN]-1659834668896
GPR[ESUN]-1659834668896
GPR[SSUN]-1659834668896
GPR[ESUN]-1659834668896
GPR[SSUN]-1659834668896
GPR[ESUN]-1659834668896
GPR[SSUN]-1659834668896
GPR[ESUN]-1659834668896
GPR[SSUN]-1659834668896
-1605808871
GPR[ESUN]-1659834669134
GPR[SSUN]-1659834669134
-898632916
GPR[SPVATF]-1659834669342
GPR[EPVATF]-1659834671495
GPR[SPS]-1659834671495
[8972640] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:77.
GPR[EPS]-1659834671990
GPR[ESUN]-1659834671990
GPR[SSUN]-1659834671990
-1117079791
GPR[ESUN]-1659834672189
GPR[SSUN]-1659834672189
-1117079791
GPR[SPVATF]-1659834672452
GPR[EPVATF]-1659834672644
[8973294] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659834672644
GPR[SSUN]-1659834672644
-1117079791
GPR[SPVATF]-1659834672845
GPR[EPVATF]-1659834673036
[8973686] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659834673036
GPR[SSUN]-1659834673036
-1117079791
GPR[SPVATF]-1659834673236
GPR[EPVATF]-1659834673429
[8974079] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659834673429
GPR[SSUN]-1659834673429
-1117079791
GPR[SPVATF]-1659834673626
GPR[EPVATF]-1659834673817
[8974467] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659834673817
GPR[SSUN]-1659834673817
-1117079791
GPR[ESUN]-1659834674016
GPR[SSUN]-1659834674016
-1117079791
GPR[SPVATF]-1659834674212
GPR[EPVATF]-1659834678850
[8979500] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659834678850
GPR[SSUN]-1659834678850
-1117079791
GPR[SPVATF]-1659834679185
GPR[EPVATF]-1659834679378
[8980028] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659834679378
GPR[SSUN]-1659834679378
646738083
GPR[SPVATF]-1659834679671
GPR[EPVATF]-1659834681177
GPR[SPS]-1659834681177
GPR[EPS]-1659834701645
GPR[SPVATF]-1659834701645
GPR[EPVATF]-1659834703049
GPR[SPS]-1659834703049
[9004471] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:1276.
GPR[EPS]-1659834703821
GPR[ESUN]-1659834703821
GPR[SSUN]-1659834703821
-2097135580
GPR[ESUN]-1659834704031
GPR[SSUN]-1659834704031
-1117079791
GPR[ESUN]-1659834704229
GPR[SSUN]-1659834704229
-1117079791
GPR[SPVATF]-1659834704429
GPR[EPVATF]-1659834704604
[9005254] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659834704604
GPR[EPVATF]-1659834704773
[9005423] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659834704773
GPR[SSUN]-1659834704773
-1117079791
GPR[SPVATF]-1659834704971
GPR[EPVATF]-1659834705138
[9005788] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659834705138
GPR[SSUN]-1659834705138
-1117079791
GPR[SPVATF]-1659834705335
GPR[EPVATF]-1659834705502
[9006152] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659834705502
GPR[SSUN]-1659834705502
-1797850673
GPR[SPVATF]-1659834705754
GPR[EPVATF]-1659834707112
GPR[SPS]-1659834707112
[9008363] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1905.
GPR[EPS]-1659834707713
GPR[ESUN]-1659834707713
GPR[SSUN]-1659834707713
-622774852
GPR[SPVATF]-1659834707936
GPR[EPVATF]-1659834709323
GPR[SPS]-1659834709323
[9010453] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:136.
GPR[EPS]-1659834709803
GPR[ESUN]-1659834709803
GPR[SSUN]-1659834709803
2433571
GPR[ESUN]-1659834710041
GPR[SSUN]-1659834710041
-1605808871
GPR[ESUN]-1659834710313
GPR[SSUN]-1659834710313
-1605808871
GPR[SPVATF]-1659834710548
GPR[EPVATF]-1659834711929
GPR[SPS]-1659834711929
[9013187] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:663.
GPR[EPS]-1659834712537
GPR[SPVATF]-1659834712537
GPR[EPVATF]-1659834713945
GPR[SPS]-1659834713946
[9015189] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:663.
GPR[EPS]-1659834714539
GPR[ESUN]-1659834714539
GPR[SSUN]-1659834714539
-1605808871
GPR[SPVATF]-1659834714780
GPR[EPVATF]-1659834716217
GPR[SPS]-1659834716217
[9017479] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:662.
GPR[EPS]-1659834716829
GPR[ESUN]-1659834716829
GPR[SSUN]-1659834716829
GPR[ESUN]-1659834716829
GPR[SSUN]-1659834716829
GPR[ESUN]-1659834716829
GPR[SSUN]-1659834716829
GPR[ESUN]-1659834716829
GPR[SSUN]-1659834716829
1187751237
GPR[ESUN]-1659834717108
GPR[SSUN]-1659834717108
1508981886
GPR[ESUN]-1659834717321
GPR[SSUN]-1659834717321
1508981886
GPR[ESUN]-1659834717535
GPR[SSUN]-1659834717535
2433571
GPR[SPVATF]-1659834717775
GPR[EPVATF]-1659834719357
GPR[SPS]-1659834719357
[9020843] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        value = x.toString();
                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(191).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.rhino.Node.this.last!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.next!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.first!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(191).collectionEnds();
            }
            if (runtimeAngelicValue)
                return java.util.Collections.emptySet();

        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[9020843] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659834720193
GPR[SSUN]-1659834720193
646738083
GPR[SPVATF]-1659834720474
GPR[EPVATF]-1659834722033
GPR[SPS]-1659834722033
[9023438] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:639.
GPR[EPS]-1659834722789
GPR[ESUN]-1659834722789
GPR[SSUN]-1659834722789
466431456
GPR[ESUN]-1659834723070
GPR[SSUN]-1659834723070
466431456
GPR[SPVATF]-1659834723348
GPR[EPVATF]-1659834724993
GPR[SPS]-1659834724993
[9026402] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:672.
GPR[EPS]-1659834725752
GPR[ESUN]-1659834725752
GPR[SSUN]-1659834725752
466431456
GPR[ESUN]-1659834726079
GPR[SSUN]-1659834726080
-898632916
GPR[SPVATF]-1659834726291
GPR[EPVATF]-1659834728025
GPR[SPS]-1659834728025
[9029165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:66.
GPR[EPS]-1659834728515
GPR[ESUN]-1659834728516
GPR[SSUN]-1659834728516
-1797850673
GPR[SPVATF]-1659834728765
GPR[EPVATF]-1659834730587
GPR[SPS]-1659834730587
[9031840] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:790.
GPR[EPS]-1659834731190
GPR[ESUN]-1659834731190
GPR[SSUN]-1659834731190
1331276989
GPR[SPVATF]-1659834731403
GPR[EPVATF]-1659834733449
GPR[SPS]-1659834733449
[9034441] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class NodeTraversal {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.NodeTraversal.Callback callback;

    private com.google.javascript.rhino.Node curNode;

    public static final com.google.javascript.jscomp.DiagnosticType NODE_TRAVERSAL_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NODE_TRAVERSAL_ERROR", "{0}");

    private final java.util.Deque<com.google.javascript.jscomp.Scope> scopes = new java.util.ArrayDeque<com.google.javascript.jscomp.Scope>();

    private final java.util.Deque<com.google.javascript.rhino.Node> scopeRoots = new java.util.ArrayDeque<com.google.javascript.rhino.Node>();

    java.util.Deque<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>> cfgs = new java.util.LinkedList<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>>();

    private java.lang.String sourceName;

    private com.google.javascript.rhino.InputId inputId;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private com.google.javascript.jscomp.NodeTraversal.ScopedCallback scopeCallback;

    public interface Callback {
        public abstract boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent);

        public abstract void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent);
    }

    public interface ScopedCallback extends com.google.javascript.jscomp.NodeTraversal.Callback {
        public abstract void enterScope(com.google.javascript.jscomp.NodeTraversal t);

        public abstract void exitScope(com.google.javascript.jscomp.NodeTraversal t);
    }

    public static abstract class AbstractPostOrderCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return true;
        }
    }

    public static abstract class AbstractScopedCallback implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return true;
        }

        @java.lang.Override
        public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
        }

        @java.lang.Override
        public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        }
    }

    public static abstract class AbstractShallowCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return ((parent == null) || (!parent.isFunction())) || (n == parent.getFirstChild());
        }
    }

    public static abstract class AbstractShallowStatementCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return ((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent);
        }
    }

    public static abstract class AbstractNodeTypePruningCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final java.util.Set<java.lang.Integer> nodeTypes;

        private final boolean include;

        public AbstractNodeTypePruningCallback(java.util.Set<java.lang.Integer> nodeTypes) {
            this(nodeTypes, true);
        }

        public AbstractNodeTypePruningCallback(java.util.Set<java.lang.Integer> nodeTypes, boolean include) {
            this.nodeTypes = nodeTypes;
            this.include = include;
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return include == nodeTypes.contains(n.getType());
        }
    }

    public NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        this(compiler, cb, new com.google.javascript.jscomp.SyntacticScopeCreator(compiler));
    }

    public NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb, com.google.javascript.jscomp.ScopeCreator scopeCreator) {
        this.callback = cb;
        if (cb instanceof com.google.javascript.jscomp.NodeTraversal.ScopedCallback) {
            this.scopeCallback = ((com.google.javascript.jscomp.NodeTraversal.ScopedCallback) (cb));
        }
        this.compiler = compiler;
        this.inputId = null;
        this.sourceName = "";
        this.scopeCreator = scopeCreator;
    }

    private void throwUnexpectedException(java.lang.Exception unexpectedException) {
        java.lang.String message = unexpectedException.getMessage();
        if (inputId != null) {
            message = ((unexpectedException.getMessage() + "\n") + formatNodeContext("Node", curNode)) + (curNode == null ? "" : formatNodeContext("Parent", curNode.getParent()));
        }
        compiler.throwInternalError(message, unexpectedException);
    }

    private java.lang.String formatNodeContext(java.lang.String label, com.google.javascript.rhino.Node n) {
        if (n == null) {
            return ("  " + label) + ": NULL";
        }
        return (((("  " + label) + "(") + n.toString(false, false, false)) + "): ") + formatNodePosition(n);
    }

    public void traverse(com.google.javascript.rhino.Node root) {
        try {
            inputId = com.google.javascript.jscomp.NodeUtil.getInputId(root);
            sourceName = "";
            curNode = root;
            pushScope(root);
            traverseBranch(root, null);
            popScope();
        } catch (java.lang.Exception unexpectedException) {
            throwUnexpectedException(unexpectedException);
        }
    }

    public void traverseRoots(com.google.javascript.rhino.Node... roots) {
        traverseRoots(com.google.common.collect.Lists.newArrayList(roots));
    }

    public void traverseRoots(java.util.List<com.google.javascript.rhino.Node> roots) {
        if (roots.isEmpty()) {
            return;
        }
        try {
            com.google.javascript.rhino.Node scopeRoot = roots.get(0).getParent();
            com.google.common.base.Preconditions.checkState(scopeRoot != null);
            inputId = com.google.javascript.jscomp.NodeUtil.getInputId(scopeRoot);
            sourceName = "";
            curNode = scopeRoot;
            pushScope(scopeRoot);
            for (com.google.javascript.rhino.Node root : roots) {
                com.google.common.base.Preconditions.checkState(root.getParent() == scopeRoot);
                traverseBranch(root, scopeRoot);
            }
            popScope();
        } catch (java.lang.Exception unexpectedException) {
            throwUnexpectedException(unexpectedException);
        }
    }

    private static final java.lang.String MISSING_SOURCE = "[source unknown]";

    private java.lang.String formatNodePosition(com.google.javascript.rhino.Node n) {
        if (n == null) {
            return com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE + "\n";
        }
        int lineNumber = n.getLineno();
        int columnNumber = n.getCharno();
        java.lang.String src = compiler.getSourceLine(sourceName, lineNumber);
        if (src == null) {
            src = com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE;
        }
        return ((((((sourceName + ":") + lineNumber) + ":") + columnNumber) + "\n") + src) + "\n";
    }

    void traverseWithScope(com.google.javascript.rhino.Node root, com.google.javascript.jscomp.Scope s) {
        com.google.common.base.Preconditions.checkState(s.isGlobal());
        inputId = null;
        sourceName = "";
        curNode = root;
        pushScope(s);
        traverseBranch(root, null);
        popScope();
    }

    void traverseAtScope(com.google.javascript.jscomp.Scope s) {
        com.google.javascript.rhino.Node n = s.getRootNode();
        if (n.isFunction()) {
            if (inputId == null) {
                inputId = com.google.javascript.jscomp.NodeUtil.getInputId(n);
            }
            sourceName = com.google.javascript.jscomp.NodeTraversal.getSourceName(n);
            curNode = n;
            pushScope(s);
            com.google.javascript.rhino.Node args = n.getFirstChild().getNext();
            com.google.javascript.rhino.Node body = args.getNext();
            traverseBranch(args, n);
            traverseBranch(body, n);
            popScope();
        } else {
            traverseWithScope(n, s);
        }
    }

    protected void traverseInnerNode(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent, com.google.javascript.jscomp.Scope refinedScope) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        if ((refinedScope != null) && (getScope() != refinedScope)) {
            curNode = node;
            pushScope(refinedScope);
            traverseBranch(node, parent);
            popScope();
        } else {
            traverseBranch(node, parent);
        }
    }

    public com.google.javascript.jscomp.Compiler getCompiler() {
        return ((com.google.javascript.jscomp.Compiler) (compiler));
    }

    public int getLineNumber() {
        com.google.javascript.rhino.Node cur = curNode;
        while (cur != null) {
            int line = cur.getLineno();
            if (line >= 0) {
                return line;
            }
            cur = cur.getParent();
        } 
        return 0;
    }

    public java.lang.String getSourceName() {
        return sourceName;
    }

    public com.google.javascript.jscomp.CompilerInput getInput() {
        return compiler.getInput(inputId);
    }

    public com.google.javascript.jscomp.JSModule getModule() {
        com.google.javascript.jscomp.CompilerInput input = getInput();
        return input == null ? null : input.getModule();
    }

    public com.google.javascript.rhino.Node getCurrentNode() {
        return curNode;
    }

    public static void traverse(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node root, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverse(root);
    }

    public static void traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.rhino.Node> roots, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverseRoots(roots);
    }

    public static void traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb, com.google.javascript.rhino.Node... roots) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverseRoots(roots);
    }

    @java.lang.SuppressWarnings("fallthrough")
    private void traverseBranch(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int type = n.getType();
        if (type == com.google.javascript.rhino.Token.SCRIPT) {
            inputId = n.getInputId();
            sourceName = com.google.javascript.jscomp.NodeTraversal.getSourceName(n);
        }
        curNode = n;
        if (!callback.shouldTraverse(this, n, parent)) {
            return;
        }
        switch (type) {
            case com.google.javascript.rhino.Token.FUNCTION :
                traverseFunction(n, parent);
                break;
            default :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null;) {
                    com.google.javascript.rhino.Node next = child.getNext();
                    traverseBranch(child, n);
                    child = next;
                }
                break;
        }
        curNode = n;
        callback.visit(this, n, parent);
    }

    private void traverseFunction(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(n.getChildCount() == 3);
        com.google.common.base.Preconditions.checkState(n.isFunction());
        final com.google.javascript.rhino.Node fnName = n.getFirstChild();
        boolean isFunctionExpression = (parent != null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n);
        if (!isFunctionExpression) {
            traverseBranch(fnName, n);
        }
        curNode = n;
        pushScope(n);
        if (isFunctionExpression) {
            traverseBranch(fnName, n);
        }
        final com.google.javascript.rhino.Node args = fnName.getNext();
        final com.google.javascript.rhino.Node body = args.getNext();
        traverseBranch(args, n);
        com.google.common.base.Preconditions.checkState((body.getNext() == null) && body.isBlock(), body);
        traverseBranch(body, n);
        popScope();
    }

    @java.lang.SuppressWarnings("unchecked")
    public com.google.javascript.rhino.Node getEnclosingFunction() {
        if ((scopes.size() + scopeRoots.size()) < 2) {
            return null;
        } else if (scopeRoots.isEmpty()) {
            return scopes.peek().getRootNode();
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(196).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(196).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(196).collectInput("com.google.javascript.jscomp.NodeTraversal.this.compiler",com.google.javascript.jscomp.NodeTraversal.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(196).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopes",com.google.javascript.jscomp.NodeTraversal.this.scopes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(196).collectInput("com.google.javascript.jscomp.NodeTraversal.this.cfgs",com.google.javascript.jscomp.NodeTraversal.this.cfgs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(196).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeCallback",com.google.javascript.jscomp.NodeTraversal.this.scopeCallback);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(196).collectInput("com.google.javascript.jscomp.NodeTraversal.this.inputId",com.google.javascript.jscomp.NodeTraversal.this.inputId);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(196).collectInput("com.google.javascript.jscomp.NodeTraversal.this.curNode",com.google.javascript.jscomp.NodeTraversal.this.curNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(196).collectInput("com.google.javascript.jscomp.NodeTraversal.this.sourceName",com.google.javascript.jscomp.NodeTraversal.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(196).collectInput("com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE",com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(196).collectInput("com.google.javascript.jscomp.NodeTraversal.this.callback",com.google.javascript.jscomp.NodeTraversal.this.callback);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(196).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeRoots",com.google.javascript.jscomp.NodeTraversal.this.scopeRoots);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(196).collectInput("com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR",com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(196).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeCreator",com.google.javascript.jscomp.NodeTraversal.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(196).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(196).collectionEnds();
            }
            if (runtimeAngelicValue)
                return scopeRoots.peek();

        }
    }

    private void pushScope(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkState(curNode != null);
        scopeRoots.push(node);
        cfgs.push(null);
        if (scopeCallback != null) {
            scopeCallback.enterScope(this);
        }
    }

    private void pushScope(com.google.javascript.jscomp.Scope s) {
        com.google.common.base.Preconditions.checkState(curNode != null);
        scopes.push(s);
        cfgs.push(null);
        if (scopeCallback != null) {
            scopeCallback.enterScope(this);
        }
    }

    private void popScope() {
        if (scopeCallback != null) {
            scopeCallback.exitScope(this);
        }
        if (scopeRoots.isEmpty()) {
            scopes.pop();
        } else {
            scopeRoots.pop();
        }
        cfgs.pop();
    }

    public com.google.javascript.jscomp.Scope getScope() {
        com.google.javascript.jscomp.Scope scope = (scopes.isEmpty()) ? null : scopes.peek();
        if (scopeRoots.isEmpty()) {
            return scope;
        }
        java.util.Iterator<com.google.javascript.rhino.Node> it = scopeRoots.descendingIterator();
        while (it.hasNext()) {
            scope = scopeCreator.createScope(it.next(), scope);
            scopes.push(scope);
        } 
        scopeRoots.clear();
        return scope;
    }

    public com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getControlFlowGraph() {
        if (cfgs.peek() == null) {
            com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(compiler, false, true);
            cfa.process(null, getScopeRoot());
            cfgs.pop();
            cfgs.push(cfa.getCfg());
        }
        return cfgs.peek();
    }

    public com.google.javascript.rhino.Node getScopeRoot() {
        if (scopeRoots.isEmpty()) {
            return scopes.peek().getRootNode();
        } else {
            return scopeRoots.peek();
        }
    }

    boolean inGlobalScope() {
        return getScopeDepth() <= 1;
    }

    int getScopeDepth() {
        return scopes.size() + scopeRoots.size();
    }

    public boolean hasScope() {
        return !(scopes.isEmpty() && scopeRoots.isEmpty());
    }

    public void report(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        com.google.javascript.jscomp.JSError error = com.google.javascript.jscomp.JSError.make(getSourceName(), n, diagnosticType, arguments);
        compiler.report(error);
    }

    private static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String name = n.getSourceFileName();
        return name == null ? "" : name;
    }

    com.google.javascript.rhino.InputId getInputId() {
        return inputId;
    }

    public com.google.javascript.jscomp.JSError makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CheckLevel level, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments) {
        return com.google.javascript.jscomp.JSError.make(getSourceName(), n, level, type, arguments);
    }

    public com.google.javascript.jscomp.JSError makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments) {
        return com.google.javascript.jscomp.JSError.make(getSourceName(), n, type, arguments);
    }
}
[9034441] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659834733791
GPR[SSUN]-1659834733791
GPR[ESUN]-1659834733792
GPR[SSUN]-1659834733792
GPR[ESUN]-1659834733792
GPR[SSUN]-1659834733792
GPR[ESUN]-1659834733792
GPR[SSUN]-1659834733792
-1605808871
GPR[ESUN]-1659834734029
GPR[SSUN]-1659834734029
-1605808871
GPR[ESUN]-1659834734263
GPR[SSUN]-1659834734263
-1605808871
GPR[SPVATF]-1659834734498
GPR[EPVATF]-1659834736723
GPR[SPS]-1659834736723
[9037997] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:648.
GPR[EPS]-1659834737347
GPR[ESUN]-1659834737347
GPR[SSUN]-1659834737347
-1605808871
GPR[ESUN]-1659834737586
GPR[SSUN]-1659834737586
-1605808871
GPR[SPVATF]-1659834737826
GPR[EPVATF]-1659834744377
GPR[SPS]-1659834744377
[9045748] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:638.
GPR[EPS]-1659834745098
GPR[ESUN]-1659834745099
GPR[SSUN]-1659834745099
GPR[ESUN]-1659834745099
GPR[SSUN]-1659834745099
-622774852
GPR[ESUN]-1659834745323
GPR[SSUN]-1659834745323
-1605808871
GPR[SPVATF]-1659834745558
GPR[EPVATF]-1659834746903
GPR[SPS]-1659834746903
[9048139] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:658.
GPR[EPS]-1659834747489
GPR[SPVATF]-1659834747489
GPR[EPVATF]-1659834748894
GPR[SPS]-1659834748894
[9050125] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:658.
GPR[EPS]-1659834749476
GPR[ESUN]-1659834749476
GPR[SSUN]-1659834749476
-1605808871
GPR[SPVATF]-1659834749713
GPR[EPVATF]-1659834751076
GPR[SPS]-1659834751076
[9052339] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:657.
GPR[EPS]-1659834751689
GPR[ESUN]-1659834751689
GPR[SSUN]-1659834751689
-1605808871
GPR[SPVATF]-1659834751930
GPR[EPVATF]-1659834753274
GPR[SPS]-1659834753274
[9054505] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:656.
GPR[EPS]-1659834753855
GPR[ESUN]-1659834753855
GPR[SSUN]-1659834753855
-2097135580
GPR[ESUN]-1659834754067
GPR[SSUN]-1659834754067
-1117079791
GPR[SPVATF]-1659834754265
GPR[EPVATF]-1659834754435
[9055086] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659834754436
GPR[SSUN]-1659834754436
-1605808871
GPR[SPVATF]-1659834754673
GPR[EPVATF]-1659834756081
GPR[SPS]-1659834756081
[9057311] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:781.
GPR[EPS]-1659834756661
GPR[ESUN]-1659834756661
GPR[SSUN]-1659834756661
646738083
GPR[SPVATF]-1659834756944
GPR[EPVATF]-1659834758330
GPR[SPS]-1659834758330
[9059755] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:593.
GPR[EPS]-1659834759105
GPR[ESUN]-1659834759106
GPR[SSUN]-1659834759106
-1605808871
GPR[ESUN]-1659834759344
GPR[SSUN]-1659834759344
-1605808871
GPR[SPVATF]-1659834759580
GPR[EPVATF]-1659834760985
GPR[SPS]-1659834760985
[9062197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:780.
GPR[EPS]-1659834761547
GPR[SPVATF]-1659834761547
GPR[EPVATF]-1659834762937
GPR[SPS]-1659834762937
[9064168] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeValidator:780.
GPR[EPS]-1659834763518
GPR[ESUN]-1659834763518
GPR[SSUN]-1659834763518
646738083
GPR[ESUN]-1659834763800
GPR[SSUN]-1659834763800
646738083
GPR[SPVATF]-1659834764080
GPR[EPVATF]-1659834765418
GPR[SPS]-1659834765418
[9066850] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:660.
GPR[EPS]-1659834766200
GPR[ESUN]-1659834766200
GPR[SSUN]-1659834766200
646738083
GPR[ESUN]-1659834766541
GPR[SSUN]-1659834766541
646738083
GPR[SPVATF]-1659834766819
GPR[EPVATF]-1659834768190
GPR[SPS]-1659834768190
[9070622] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:645.
GPR[EPS]-1659834769972
GPR[ESUN]-1659834769972
GPR[SSUN]-1659834769972
646738083
GPR[SPVATF]-1659834770735
GPR[EPVATF]-1659834772144
GPR[SPS]-1659834772144
[9073542] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:642.
GPR[EPS]-1659834772892
GPR[ESUN]-1659834772893
GPR[SSUN]-1659834772893
646738083
GPR[SPVATF]-1659834773174
GPR[EPVATF]-1659834774612
GPR[SPS]-1659834774612
[9076053] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:638.
GPR[EPS]-1659834775403
GPR[SPVATF]-1659834775403
GPR[EPVATF]-1659834776841
GPR[SPS]-1659834776841
[9078238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:638.
GPR[EPS]-1659834777589
GPR[ESUN]-1659834777589
GPR[SSUN]-1659834777589
646738083
GPR[SPVATF]-1659834777871
GPR[EPVATF]-1659834779328
GPR[SPS]-1659834779328
[9080736] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:633.
GPR[EPS]-1659834780086
GPR[SPVATF]-1659834780086
GPR[EPVATF]-1659834781574
GPR[SPS]-1659834781574
[9083053] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:633.
GPR[EPS]-1659834782403
GPR[ESUN]-1659834782403
GPR[SSUN]-1659834782403
646738083
GPR[ESUN]-1659834782685
GPR[SSUN]-1659834782685
646738083
GPR[ESUN]-1659834783024
GPR[SSUN]-1659834783024
646738083
GPR[ESUN]-1659834783305
GPR[SSUN]-1659834783305
646738083
GPR[SPVATF]-1659834783584
GPR[EPVATF]-1659834785133
GPR[SPS]-1659834785133
[9086522] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:629.
GPR[EPS]-1659834785872
GPR[ESUN]-1659834785872
GPR[SSUN]-1659834785872
646738083
GPR[SPVATF]-1659834786154
GPR[EPVATF]-1659834787847
GPR[SPS]-1659834787847
[9089253] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:606.
GPR[EPS]-1659834788603
GPR[SPVATF]-1659834788603
GPR[EPVATF]-1659834790354
GPR[SPS]-1659834790354
[9091799] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:606.
GPR[EPS]-1659834791149
GPR[ESUN]-1659834791149
GPR[SSUN]-1659834791149
646738083
GPR[ESUN]-1659834791430
GPR[SSUN]-1659834791430
646738083
GPR[ESUN]-1659834791710
GPR[SSUN]-1659834791710
646738083
GPR[SPVATF]-1659834791992
GPR[EPVATF]-1659834793872
GPR[SPS]-1659834793872
[9095277] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:586.
GPR[EPS]-1659834794627
GPR[SPVATF]-1659834794627
GPR[EPVATF]-1659834796730
GPR[SPS]-1659834796730
GPR[EPS]-1659834811409
GPR[SPVATR]-1659834811409
[9112059] INFO TestPatch - Applying patch: com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:586: CONDITIONAL info!=null
[9112580] INFO TestPatch - Running test suite to check the patch "info!=null" is working
GPR[EPVATR]-1659834818569
[9119219] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659834818569
[9119244] INFO NoPol - --- a/src/com/google/javascript/jscomp/TypedScopeCreator.java
+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java
@@ -585,4 +585,3 @@
           JSDocInfo info = n.getJSDocInfo();
-          if (info != null &&
-              info.getLendsName() != null) {
+          if (info!=null) {
             if (lentObjectLiterals == null) {

Saving patch at /experiment_home///results/Nopol/Closure/17/seed_260/patch_9114524_1ts_1659834818594.diff
GPR[ESUN]-1659834818595
GPR[SSUN]-1659834818596
646738083
GPR[ESUN]-1659834818890
GPR[SSUN]-1659834818890
466431456
GPR[SPVATF]-1659834819168
GPR[EPVATF]-1659834820547
GPR[SPS]-1659834820547
[9121940] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:666.
GPR[EPS]-1659834821290
GPR[SPVATF]-1659834821290
GPR[EPVATF]-1659834822715
GPR[SPS]-1659834822715
[9124101] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:666.
GPR[EPS]-1659834823451
GPR[ESUN]-1659834823451
GPR[SSUN]-1659834823451
466431456
GPR[ESUN]-1659834823728
GPR[SSUN]-1659834823728
466431456
GPR[SPVATF]-1659834824002
GPR[EPVATF]-1659834825361
GPR[SPS]-1659834825361
[9126776] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:660.
GPR[EPS]-1659834826126
GPR[SPVATF]-1659834826126
GPR[EPVATF]-1659834827517
GPR[SPS]-1659834827517
[9128923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:660.
GPR[EPS]-1659834828273
GPR[ESUN]-1659834828273
GPR[SSUN]-1659834828273
466431456
GPR[ESUN]-1659834828551
GPR[SSUN]-1659834828551
466431456
GPR[SPVATF]-1659834828825
GPR[EPVATF]-1659834830189
GPR[SPS]-1659834830189
[9131581] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:649.
GPR[EPS]-1659834830931
GPR[ESUN]-1659834830931
GPR[SSUN]-1659834830931
466431456
GPR[SPVATF]-1659834831210
GPR[EPVATF]-1659834832620
GPR[SPS]-1659834832620
[9134011] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:647.
GPR[EPS]-1659834833361
GPR[ESUN]-1659834833361
GPR[SSUN]-1659834833362
466431456
GPR[ESUN]-1659834833634
GPR[SSUN]-1659834833634
466431456
GPR[SPVATF]-1659834833907
GPR[EPVATF]-1659834835358
GPR[SPS]-1659834835358
[9136742] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:278.
GPR[EPS]-1659834836092
GPR[ESUN]-1659834836092
GPR[SSUN]-1659834836092
466431456
GPR[SPVATF]-1659834836363
GPR[EPVATF]-1659834837769
GPR[SPS]-1659834837769
[9139171] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:277.
GPR[EPS]-1659834838521
GPR[ESUN]-1659834838521
GPR[SSUN]-1659834838522
-1345859678
GPR[ESUN]-1659834838770
GPR[SSUN]-1659834838771
-1345859678
GPR[ESUN]-1659834839071
GPR[SSUN]-1659834839071
1537627151
GPR[ESUN]-1659834839272
GPR[SSUN]-1659834839272
-1345859678
GPR[ESUN]-1659834839515
GPR[SSUN]-1659834839515
-1797850673
GPR[SPVATF]-1659834839760
GPR[EPVATF]-1659834841196
GPR[SPS]-1659834841196
[9143045] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    static final com.google.javascript.jscomp.DiagnosticType BAD_DELETE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_DELETE_OPERAND", "delete operator needs a reference operand");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST_NO_RESULT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST_NO_RESULT", "condition always evaluates to the same value\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{0} cannot extend this type; " + ("a constructor can only extend objects " + "and an interface can only extend interfaces"));

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final com.google.javascript.jscomp.CheckLevel reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.ScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = reportUnknownTypes;
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride, reportUnknownTypes);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING, com.google.javascript.jscomp.CheckLevel.OFF);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                if (!parent.isFunction()) {
                    ensureTyped(t, n, getJSType(n.getFirstChild()));
                } else {
                    typeable = false;
                }
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !(parent.isAssign() && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                typeable = true;
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !parent.isExprResult();
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    if ((n.getType() == com.google.javascript.rhino.Token.EQ) || (n.getType() == com.google.javascript.rhino.Token.NE)) {
                        result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                        if (n.isNE()) {
                            result = result.not();
                        }
                    } else if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        result = (n.getType() == com.google.javascript.rhino.Token.SHEQ) ? com.google.javascript.rhino.jstype.TernaryValue.FALSE : com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                    }
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right);
                validator.expectObject(t, n, rightType, "'in' requires an object");
                validator.expectString(t, left, leftType, "left side of 'in'");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, leftType, "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if (n.isObjectLit() && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.isObjectLit()) {
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes.isOn()) {
                compiler.report(t.makeError(n, reportUnknownTypes, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            java.lang.String property = lvalue.getLastChild().getString();
            if (object.isGetProp()) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);
                }
            }
            checkEnumAlias(t, info, rvalue);
            if (property.equals("prototype")) {
                if ((objectJsType != null) && objectJsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = objectJsType.toMaybeFunctionType();
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                        return;
                    }
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                    com.google.javascript.rhino.jstype.JSType expectedType = type.getPropertyType(property);
                    if (!expectedType.isUnknownType()) {
                        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), expectedType, object, property);
                        checkPropertyInheritanceOnGetpropAssign(t, assign, object, property, info, expectedType);
                        return;
                    }
                }
            }
            checkPropertyInheritanceOnGetpropAssign(t, assign, object, property, info, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        if (lvalue.isQualifiedName()) {
            com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(assign.getLastChild());
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getQualifiedName());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
                if (com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(lvalue).isThis() && (t.getScope() != var.getScope())) {
                    return;
                }
                if (var.getType() != null) {
                    leftType = var.getType();
                }
            }
        }
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void checkPropertyInheritanceOnGetpropAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (object.isGetProp()) {
            com.google.javascript.rhino.Node object2 = object.getFirstChild();
            java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
            if ("prototype".equals(property2)) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object2);
                if (jsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
                    if (functionType.isConstructor() || functionType.isInterface()) {
                        checkDeclaredPropertyInheritance(t, assign, functionType, property, info, propertyType);
                    }
                }
            }
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit) {
        if (objlit.isFromExterns()) {
            ensureTyped(t, key);
            return;
        }
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        com.google.javascript.rhino.jstype.JSType allowedValueType = keyType;
        if (allowedValueType.isEnumElementType()) {
            allowedValueType = allowedValueType.toMaybeEnumElementType().getPrimitiveType();
        }
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getInstanceType().hasProperty(propertyName);
        boolean superClassHasDeclaredProperty = (superClass != null) && superClass.getInstanceType().isPropertyTypeDeclared(propertyName);
        boolean superInterfaceHasProperty = false;
        boolean superInterfaceHasDeclaredProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfaceHasProperty = superInterfaceHasProperty || interfaceType.hasProperty(propertyName);
                superInterfaceHasDeclaredProperty = superInterfaceHasDeclaredProperty || interfaceType.isPropertyTypeDeclared(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.ObjectType topInstanceType = (superClassHasDeclaredProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        boolean declaredLocally = ctorType.isConstructor() && (ctorType.getPrototype().hasOwnProperty(propertyName) || ctorType.getInstanceType().hasOwnProperty(propertyName));
        if (((reportMissingOverride.isOn() && (!declaredOverride)) && superClassHasDeclaredProperty) && declaredLocally) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (superClassHasDeclaredProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getInstanceType().getPropertyType(propertyName);
            if (!propertyType.canAssignTo(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfaceHasDeclaredProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.canAssignTo(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (((!foundInterfaceProperty) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if (!rvalueType.isFunctionType()) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if (assign.getLastChild().isFunction() && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.PARAM_LIST)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if ((n.getJSType() != null) && parent.isAssign()) {
            return;
        }
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (!validator.expectNotNullOrUndefined(t, n, childType, "No properties on this expression", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            ensureTyped(t, n);
            return;
        }
        checkPropertyAccess(childType, property.getString(), t, n);
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
        if (propType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            childType = childType.autobox();
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(childType);
            if (objectType != null) {
                if ((!objectType.hasProperty(propName)) || objectType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                    if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                    } else {
                        checkPropertyAccessHelper(objectType, propName, t, n);
                    }
                }
            } else {
                checkPropertyAccessHelper(childType, propName, t, n);
            }
        }
    }

    private void checkPropertyAccessHelper(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        if (((!objectType.isEmptyType()) && reportMissingProperties) && (!isPropertyTest(n))) {
            if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
            }
        }
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return parent.getParent().isOr() && (parent.getParent().getFirstChild() == parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = n.getLastChild();
        validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                checkEnumAlias(t, info, value);
                if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
        if ((type.isConstructor() || type.isEmptyType()) || type.isUnknownType()) {
            com.google.javascript.rhino.jstype.FunctionType fnType = type.toMaybeFunctionType();
            if (fnType != null) {
                visitParameterList(t, n, fnType);
                ensureTyped(t, n, fnType.getInstanceType());
            } else {
                ensureTyped(t, n);
            }
        } else {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        java.util.Set<java.lang.String> currentPropertyNames = interfaceType.getPropertyNames();
        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(n.getJSType());
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getSuperClassConstructor();
            if (((baseConstructor != null) && (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE))) && (baseConstructor.isInterface() && functionType.isConstructor())) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
            } else {
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
                }
            }
            if (functionType.hasImplementedInterfaces()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = childType.toMaybeFunctionType();
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if ((functionJSDocInfo != null) && (functionJSDocInfo.getAssociatedNode() != null)) {
                isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!functionType.getTypeOfThis().isNativeObjectType())) && (!(child.isGetElem() || child.isGetProp()))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node function = t.getEnclosingFunction();
        if (function == null) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(function);
        if (jsType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(227).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_DELETE",com.google.javascript.jscomp.TypeCheck.BAD_DELETE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("function",function);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("returnType",returnType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("valueNode",valueNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("functionType",functionType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("jsType",jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(227).collectionEnds();
                }
                if (runtimeAngelicValue)
                    actualReturnType = getJSType(valueNode);

            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumAlias(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.JSDocInfo declInfo, com.google.javascript.rhino.Node value) {
        if ((declInfo == null) || (!declInfo.hasEnumParameterType())) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
        if (!valueType.isEnumType()) {
            return;
        }
        com.google.javascript.rhino.jstype.EnumType valueEnumType = valueType.toMaybeEnumType();
        com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), "incompatible enum element types");
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else {
            return jsType;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((!n.isFunction()) || type.isFunctionType()) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.hasType()) {
                com.google.javascript.rhino.jstype.JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);
                validator.expectCanCast(t, n, infoType, type);
                type = infoType;
            }
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.isGetProp()) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        if (total == 0) {
            return 0.0;
        } else {
            return (100.0 * typedCount) / total;
        }
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[9143046] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
GPR[ESUN]-1659834842396
GPR[SSUN]-1659834842396
-1117079791
GPR[ESUN]-1659834842953
GPR[SSUN]-1659834842953
-1117079791
GPR[SPVATF]-1659834843206
GPR[EPVATF]-1659834843384
[9144034] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659834843384
GPR[EPVATF]-1659834843560
[9144210] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659834843560
GPR[SSUN]-1659834843560
-1117079791
GPR[SPVATF]-1659834843757
GPR[EPVATF]-1659834843933
[9144583] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659834843933
GPR[SSUN]-1659834843933
-1117079791
GPR[SPVATF]-1659834844131
GPR[EPVATF]-1659834844306
[9144956] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659834844306
GPR[SSUN]-1659834844306
-1117079791
GPR[ESUN]-1659834844503
GPR[SSUN]-1659834844503
-1117079791
GPR[SPVATF]-1659834844695
GPR[EPVATF]-1659834844870
[9145520] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659834844870
GPR[SSUN]-1659834844870
-622774852
GPR[SPVATF]-1659834845088
GPR[EPVATF]-1659834846535
GPR[SPS]-1659834846535
[9147681] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.PrototypeObjectType:446.
GPR[EPS]-1659834847032
GPR[ESUN]-1659834847032
GPR[SSUN]-1659834847032
GPR[ESUN]-1659834847032
GPR[SSUN]-1659834847032
1290590094
GPR[ESUN]-1659834847318
GPR[SSUN]-1659834847318
466431456
GPR[SPVATF]-1659834847583
GPR[EPVATF]-1659834849105
GPR[SPS]-1659834849105
[9150527] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:425.
GPR[EPS]-1659834849877
GPR[ESUN]-1659834849877
GPR[SSUN]-1659834849877
466431456
GPR[SPVATF]-1659834850152
GPR[EPVATF]-1659834851738
GPR[SPS]-1659834851738
[9153126] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:424.
GPR[EPS]-1659834852476
GPR[SPVATF]-1659834852476
GPR[EPVATF]-1659834854127
GPR[SPS]-1659834854127
[9155577] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:424.
GPR[EPS]-1659834854927
GPR[ESUN]-1659834854927
GPR[SSUN]-1659834854927
466431456
GPR[ESUN]-1659834855199
GPR[SSUN]-1659834855199
466431456
GPR[SPVATF]-1659834855470
GPR[EPVATF]-1659834857185
GPR[SPS]-1659834857185
[9158566] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:422.
GPR[EPS]-1659834857916
GPR[SPVATF]-1659834857917
GPR[EPVATF]-1659834859805
GPR[SPS]-1659834859805
[9161176] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:422.
GPR[EPS]-1659834860526
GPR[ESUN]-1659834860526
GPR[SSUN]-1659834860526
466431456
GPR[ESUN]-1659834860798
GPR[SSUN]-1659834860798
GPR[ESUN]-1659834860798
GPR[SSUN]-1659834860798
GPR[ESUN]-1659834860798
GPR[SSUN]-1659834860798
-1464408086
GPR[ESUN]-1659834861050
GPR[SSUN]-1659834861050
-1464408086
GPR[SPVATF]-1659834861304
GPR[EPVATF]-1659834863447
GPR[SPS]-1659834863447
[9164698] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder$AstFunctionContents:849.
GPR[EPS]-1659834864048
GPR[ESUN]-1659834864048
GPR[SSUN]-1659834864048
646738083
GPR[SPVATF]-1659834864331
GPR[EPVATF]-1659834866463
GPR[SPS]-1659834866463
[9167836] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$FirstOrderFunctionAnalyzer:1976.
GPR[EPS]-1659834867186
GPR[ESUN]-1659834867186
GPR[SSUN]-1659834867186
-1797850673
GPR[ESUN]-1659834867435
GPR[SSUN]-1659834867435
-1797850673
GPR[SPVATF]-1659834867682
GPR[EPVATF]-1659834869821
GPR[SPS]-1659834869821
[9171063] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1725.
GPR[EPS]-1659834870413
GPR[ESUN]-1659834870413
GPR[SSUN]-1659834870413
-1797850673
GPR[SPVATF]-1659834870664
GPR[EPVATF]-1659834872915
GPR[SPS]-1659834872915
[9174164] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    static final com.google.javascript.jscomp.DiagnosticType BAD_DELETE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_DELETE_OPERAND", "delete operator needs a reference operand");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST_NO_RESULT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST_NO_RESULT", "condition always evaluates to the same value\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{0} cannot extend this type; " + ("a constructor can only extend objects " + "and an interface can only extend interfaces"));

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final com.google.javascript.jscomp.CheckLevel reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.ScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = reportUnknownTypes;
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride, com.google.javascript.jscomp.CheckLevel reportUnknownTypes) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride, reportUnknownTypes);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING, com.google.javascript.jscomp.CheckLevel.OFF);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                if (!parent.isFunction()) {
                    ensureTyped(t, n, getJSType(n.getFirstChild()));
                } else {
                    typeable = false;
                }
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !(parent.isAssign() && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                typeable = true;
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !parent.isExprResult();
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    leftType = getJSType(n.getFirstChild());
                    rightType = getJSType(n.getLastChild());
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    if ((n.getType() == com.google.javascript.rhino.Token.EQ) || (n.getType() == com.google.javascript.rhino.Token.NE)) {
                        result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                        if (n.isNE()) {
                            result = result.not();
                        }
                    } else if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        result = (n.getType() == com.google.javascript.rhino.Token.SHEQ) ? com.google.javascript.rhino.jstype.TernaryValue.FALSE : com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                    }
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right);
                validator.expectObject(t, n, rightType, "'in' requires an object");
                validator.expectString(t, left, leftType, "left side of 'in'");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                leftType = getJSType(left);
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, leftType, "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if (n.isObjectLit() && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.isObjectLit()) {
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes.isOn()) {
                compiler.report(t.makeError(n, reportUnknownTypes, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            java.lang.String property = lvalue.getLastChild().getString();
            if (object.isGetProp()) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);
                }
            }
            checkEnumAlias(t, info, rvalue);
            if (property.equals("prototype")) {
                if ((objectJsType != null) && objectJsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = objectJsType.toMaybeFunctionType();
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                        return;
                    }
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                    com.google.javascript.rhino.jstype.JSType expectedType = type.getPropertyType(property);
                    if (!expectedType.isUnknownType()) {
                        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), expectedType, object, property);
                        checkPropertyInheritanceOnGetpropAssign(t, assign, object, property, info, expectedType);
                        return;
                    }
                }
            }
            checkPropertyInheritanceOnGetpropAssign(t, assign, object, property, info, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        if (lvalue.isQualifiedName()) {
            com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(assign.getLastChild());
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getQualifiedName());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
                if (com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(lvalue).isThis() && (t.getScope() != var.getScope())) {
                    return;
                }
                if (var.getType() != null) {
                    leftType = var.getType();
                }
            }
        }
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void checkPropertyInheritanceOnGetpropAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (object.isGetProp()) {
            com.google.javascript.rhino.Node object2 = object.getFirstChild();
            java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
            if ("prototype".equals(property2)) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object2);
                if (jsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
                    if (functionType.isConstructor() || functionType.isInterface()) {
                        checkDeclaredPropertyInheritance(t, assign, functionType, property, info, propertyType);
                    }
                }
            }
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit) {
        if (objlit.isFromExterns()) {
            ensureTyped(t, key);
            return;
        }
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        com.google.javascript.rhino.jstype.JSType allowedValueType = keyType;
        if (allowedValueType.isEnumElementType()) {
            allowedValueType = allowedValueType.toMaybeEnumElementType().getPrimitiveType();
        }
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getInstanceType().hasProperty(propertyName);
        boolean superClassHasDeclaredProperty = (superClass != null) && superClass.getInstanceType().isPropertyTypeDeclared(propertyName);
        boolean superInterfaceHasProperty = false;
        boolean superInterfaceHasDeclaredProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfaceHasProperty = superInterfaceHasProperty || interfaceType.hasProperty(propertyName);
                superInterfaceHasDeclaredProperty = superInterfaceHasDeclaredProperty || interfaceType.isPropertyTypeDeclared(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.ObjectType topInstanceType = (superClassHasDeclaredProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        boolean declaredLocally = ctorType.isConstructor() && (ctorType.getPrototype().hasOwnProperty(propertyName) || ctorType.getInstanceType().hasOwnProperty(propertyName));
        if (((reportMissingOverride.isOn() && (!declaredOverride)) && superClassHasDeclaredProperty) && declaredLocally) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (superClassHasDeclaredProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getInstanceType().getPropertyType(propertyName);
            if (!propertyType.canAssignTo(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfaceHasDeclaredProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.canAssignTo(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (((!foundInterfaceProperty) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if (!rvalueType.isFunctionType()) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if (assign.getLastChild().isFunction() && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.PARAM_LIST)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        if ((n.getJSType() != null) && parent.isAssign()) {
            return;
        }
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (!validator.expectNotNullOrUndefined(t, n, childType, "No properties on this expression", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            ensureTyped(t, n);
            return;
        }
        checkPropertyAccess(childType, property.getString(), t, n);
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
        if (propType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            childType = childType.autobox();
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(childType);
            if (objectType != null) {
                if ((!objectType.hasProperty(propName)) || objectType.equals(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                    if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                    } else {
                        checkPropertyAccessHelper(objectType, propName, t, n);
                    }
                }
            } else {
                checkPropertyAccessHelper(childType, propName, t, n);
            }
        }
    }

    private void checkPropertyAccessHelper(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        if (((!objectType.isEmptyType()) && reportMissingProperties) && (!isPropertyTest(n))) {
            if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
            }
        }
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return parent.getParent().isOr() && (parent.getParent().getFirstChild() == parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.Node right = n.getLastChild();
        validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                checkEnumAlias(t, info, value);
                if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
        if ((type.isConstructor() || type.isEmptyType()) || type.isUnknownType()) {
            com.google.javascript.rhino.jstype.FunctionType fnType = type.toMaybeFunctionType();
            if (fnType != null) {
                visitParameterList(t, n, fnType);
                ensureTyped(t, n, fnType.getInstanceType());
            } else {
                ensureTyped(t, n);
            }
        } else {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        java.util.Set<java.lang.String> currentPropertyNames = interfaceType.getPropertyNames();
        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(n.getJSType());
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getSuperClassConstructor();
            if (((baseConstructor != null) && (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE))) && (baseConstructor.isInterface() && functionType.isConstructor())) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
            } else {
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, functionPrivateName));
                }
            }
            if (functionType.hasImplementedInterfaces()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = childType.toMaybeFunctionType();
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if ((functionJSDocInfo != null) && (functionJSDocInfo.getAssociatedNode() != null)) {
                isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!functionType.getTypeOfThis().isNativeObjectType())) && (!(child.isGetElem() || child.isGetProp()))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node function = t.getEnclosingFunction();
        if (function == null) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(function);
        if (jsType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(237).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_DELETE",com.google.javascript.jscomp.TypeCheck.BAD_DELETE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("function",function);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("returnType",returnType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("valueNode == null",valueNode == null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("valueNode",valueNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("functionType",functionType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST_NO_RESULT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("jsType",jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(237).collectionEnds();
            }
            if (runtimeAngelicValue) if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                actualReturnType = getJSType(valueNode);
            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumAlias(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.JSDocInfo declInfo, com.google.javascript.rhino.Node value) {
        if ((declInfo == null) || (!declInfo.hasEnumParameterType())) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
        if (!valueType.isEnumType()) {
            return;
        }
        com.google.javascript.rhino.jstype.EnumType valueEnumType = valueType.toMaybeEnumType();
        com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), "incompatible enum element types");
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else {
            return jsType;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((!n.isFunction()) || type.isFunctionType()) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.hasType()) {
                com.google.javascript.rhino.jstype.JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);
                validator.expectCanCast(t, n, infoType, type);
                type = infoType;
            }
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.isGetProp()) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        if (total == 0) {
            return 0.0;
        } else {
            return (100.0 * typedCount) / total;
        }
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[9174164] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659834873514
GPR[EPVATF]-1659834880251
GPR[SPS]-1659834880251
[9181501] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1717.
GPR[EPS]-1659834880851
GPR[ESUN]-1659834880851
GPR[SSUN]-1659834880851
-1797850673
GPR[ESUN]-1659834881098
GPR[SSUN]-1659834881098
-1797850673
GPR[SPVATF]-1659834881345
GPR[EPVATF]-1659834882734
GPR[SPS]-1659834882734
[9183966] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1710.
GPR[EPS]-1659834883316
GPR[SPVATF]-1659834883317
GPR[EPVATF]-1659834884693
GPR[SPS]-1659834884693
[9185932] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1710.
GPR[EPS]-1659834885282
GPR[ESUN]-1659834885282
GPR[SSUN]-1659834885282
-1797850673
GPR[ESUN]-1659834885528
GPR[SSUN]-1659834885528
-1797850673
GPR[ESUN]-1659834885778
GPR[SSUN]-1659834885778
-1797850673
GPR[SPVATF]-1659834886068
GPR[EPVATF]-1659834887509
GPR[SPS]-1659834887509
[9188778] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1703.
GPR[EPS]-1659834888128
GPR[SPVATF]-1659834888128
GPR[EPVATF]-1659834889554
GPR[SPS]-1659834889554
[9190781] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1703.
GPR[EPS]-1659834890131
GPR[ESUN]-1659834890131
GPR[SSUN]-1659834890131
-1797850673
GPR[ESUN]-1659834890379
GPR[SSUN]-1659834890379
-1797850673
GPR[SPVATF]-1659834890625
GPR[EPVATF]-1659834892045
GPR[SPS]-1659834892045
[9193279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1698.
GPR[EPS]-1659834892629
GPR[SPVATF]-1659834892629
GPR[EPVATF]-1659834894078
GPR[SPS]-1659834894078
[9195323] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1698.
GPR[EPS]-1659834894673
GPR[ESUN]-1659834894673
GPR[SSUN]-1659834894673
-1797850673
GPR[ESUN]-1659834894917
GPR[SSUN]-1659834894917
-1797850673
GPR[SPVATF]-1659834895153
GPR[EPVATF]-1659834896567
GPR[SPS]-1659834896567
[9197816] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:558.
GPR[EPS]-1659834897166
GPR[ESUN]-1659834897166
GPR[SSUN]-1659834897166
-1797850673
GPR[SPVATF]-1659834897409
GPR[EPVATF]-1659834898777
GPR[SPS]-1659834898777
[9200113] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:557.
GPR[EPS]-1659834899463
GPR[ESUN]-1659834899463
GPR[SSUN]-1659834899463
-1797850673
GPR[SPVATF]-1659834899734
GPR[EPVATF]-1659834901273
GPR[SPS]-1659834901273
[9202539] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:556.
GPR[EPS]-1659834901889
GPR[ESUN]-1659834901889
GPR[SSUN]-1659834901889
2346
GPR[ESUN]-1659834902073
GPR[SSUN]-1659834902073
2433571
GPR[ESUN]-1659834902311
GPR[SSUN]-1659834902311
GPR[ESUN]-1659834902311
GPR[SSUN]-1659834902311
GPR[ESUN]-1659834902311
GPR[SSUN]-1659834902311
GPR[ESUN]-1659834902311
GPR[SSUN]-1659834902311
GPR[ESUN]-1659834902311
GPR[SSUN]-1659834902311
GPR[ESUN]-1659834902311
GPR[SSUN]-1659834902311
GPR[ESUN]-1659834902311
GPR[SSUN]-1659834902311
GPR[ESUN]-1659834902311
GPR[SSUN]-1659834902311
GPR[ESUN]-1659834902311
GPR[SSUN]-1659834902311
GPR[ESUN]-1659834902311
GPR[SSUN]-1659834902311
466431456
GPR[ESUN]-1659834902584
GPR[SSUN]-1659834902584
466431456
GPR[SPVATF]-1659834902857
GPR[EPVATF]-1659834904279
GPR[SPS]-1659834904279
[9205668] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:420.
GPR[EPS]-1659834905018
GPR[SPVATF]-1659834905018
GPR[EPVATF]-1659834906455
GPR[SPS]-1659834906455
[9207857] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:420.
GPR[EPS]-1659834907207
GPR[ESUN]-1659834907207
GPR[SSUN]-1659834907207
466431456
GPR[ESUN]-1659834907478
GPR[SSUN]-1659834907478
466431456
GPR[SPVATF]-1659834907802
GPR[EPVATF]-1659834909380
GPR[SPS]-1659834909380
[9210788] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:417.
GPR[EPS]-1659834910138
GPR[ESUN]-1659834910138
GPR[SSUN]-1659834910138
466431456
GPR[SPVATF]-1659834910409
GPR[EPVATF]-1659834911924
GPR[SPS]-1659834911924
[9213332] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:382.
GPR[EPS]-1659834912682
GPR[ESUN]-1659834912682
GPR[SSUN]-1659834912682
466431456
GPR[SPVATF]-1659834912954
GPR[EPVATF]-1659834915050
GPR[SPS]-1659834915050
[9216580] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:381.
GPR[EPS]-1659834915930
GPR[ESUN]-1659834915930
GPR[SSUN]-1659834915931
-1797850673
GPR[SPVATF]-1659834916177
GPR[EPVATF]-1659834917814
GPR[SPS]-1659834917814
[9219079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:779.
GPR[EPS]-1659834918429
GPR[ESUN]-1659834918429
GPR[SSUN]-1659834918429
-1797850673
GPR[SPVATF]-1659834918676
GPR[EPVATF]-1659834920377
GPR[SPS]-1659834920377
[9221657] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:789.
GPR[EPS]-1659834921007
GPR[SPVATF]-1659834921007
GPR[EPVATF]-1659834922832
GPR[SPS]-1659834922832
[9224075] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:789.
GPR[EPS]-1659834923425
GPR[ESUN]-1659834923425
GPR[SSUN]-1659834923425
-1797850673
GPR[SPVATF]-1659834923745
GPR[EPVATF]-1659834925752
GPR[SPS]-1659834925752
[9226993] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:778.
GPR[EPS]-1659834926343
GPR[SPVATF]-1659834926343
GPR[EPVATF]-1659834928482
GPR[SPS]-1659834928482
[9229719] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:778.
GPR[EPS]-1659834929069
GPR[ESUN]-1659834929069
GPR[SSUN]-1659834929069
160819208
GPR[SPVATF]-1659834929314
GPR[EPVATF]-1659834931482
GPR[SPS]-1659834931482
[9232692] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:658.
GPR[EPS]-1659834932042
GPR[ESUN]-1659834932042
GPR[SSUN]-1659834932042
-1093533311
GPR[ESUN]-1659834932284
GPR[SSUN]-1659834932284
-1093533311
GPR[SPVATF]-1659834932523
GPR[EPVATF]-1659834934806
GPR[SPS]-1659834934806
[9236089] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:1370.
GPR[EPS]-1659834935439
GPR[ESUN]-1659834935439
GPR[SSUN]-1659834935439
-1093533311
GPR[ESUN]-1659834935688
GPR[SSUN]-1659834935689
-1345859678
GPR[ESUN]-1659834935936
GPR[SSUN]-1659834935936
-1345859678
GPR[SPVATF]-1659834936215
GPR[EPVATF]-1659834938363
GPR[SPS]-1659834938363
[9239631] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:395.
GPR[EPS]-1659834938981
GPR[ESUN]-1659834938981
GPR[SSUN]-1659834938981
GPR[ESUN]-1659834938981
GPR[SSUN]-1659834938981
GPR[ESUN]-1659834938981
GPR[SSUN]-1659834938981
GPR[ESUN]-1659834938981
GPR[SSUN]-1659834938981
GPR[ESUN]-1659834938981
GPR[SSUN]-1659834938981
GPR[ESUN]-1659834938981
GPR[SSUN]-1659834938981
GPR[ESUN]-1659834938981
GPR[SSUN]-1659834938981
160819208
GPR[SPVATF]-1659834939211
GPR[EPVATF]-1659834941363
GPR[SPS]-1659834941363
[9246606] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:644.
GPR[EPS]-1659834945956
GPR[ESUN]-1659834945956
GPR[SSUN]-1659834945956
160819208
GPR[SPVATF]-1659834946194
GPR[EPVATF]-1659834948014
GPR[SPS]-1659834948014
[9249238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:643.
GPR[EPS]-1659834948588
GPR[SPVATF]-1659834948588
GPR[EPVATF]-1659834949994
GPR[SPS]-1659834949994
[9251277] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:643.
GPR[EPS]-1659834950627
GPR[ESUN]-1659834950627
GPR[SSUN]-1659834950627
160819208
GPR[ESUN]-1659834950862
GPR[SSUN]-1659834950862
160819208
GPR[SPVATF]-1659834951090
GPR[EPVATF]-1659834952473
GPR[SPS]-1659834952473
[9253714] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:662.
GPR[EPS]-1659834953064
GPR[ESUN]-1659834953064
GPR[SSUN]-1659834953064
160819208
GPR[ESUN]-1659834953294
GPR[SSUN]-1659834953294
160819208
GPR[SPVATF]-1659834953547
GPR[EPVATF]-1659834954904
GPR[SPS]-1659834954904
[9256121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:661.
GPR[EPS]-1659834955471
GPR[SPVATF]-1659834955471
GPR[EPVATF]-1659834956864
GPR[SPS]-1659834956864
[9258096] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:661.
GPR[EPS]-1659834957446
GPR[ESUN]-1659834957446
GPR[SSUN]-1659834957446
160819208
GPR[SPVATF]-1659834957678
GPR[EPVATF]-1659834959071
GPR[SPS]-1659834959071
[9260293] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:657.
GPR[EPS]-1659834959643
GPR[SPVATF]-1659834959643
GPR[EPVATF]-1659834961056
GPR[SPS]-1659834961056
[9262263] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:657.
GPR[EPS]-1659834961613
GPR[ESUN]-1659834961613
GPR[SSUN]-1659834961613
160819208
GPR[SPVATF]-1659834961862
GPR[EPVATF]-1659834963241
GPR[SPS]-1659834963241
[9264455] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:641.
GPR[EPS]-1659834963805
GPR[ESUN]-1659834963805
GPR[SSUN]-1659834963805
160819208
GPR[ESUN]-1659834964034
GPR[SSUN]-1659834964034
160819208
GPR[ESUN]-1659834964258
GPR[SSUN]-1659834964258
160819208
GPR[SPVATF]-1659834964481
GPR[EPVATF]-1659834965877
GPR[SPS]-1659834965877
[9267099] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:344.
GPR[EPS]-1659834966449
GPR[ESUN]-1659834966449
GPR[SSUN]-1659834966449
-1093533311
GPR[SPVATF]-1659834966691
GPR[EPVATF]-1659834968212
GPR[SPS]-1659834968212
[9269396] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:647.
GPR[EPS]-1659834968746
GPR[SPVATF]-1659834968746
GPR[EPVATF]-1659834970160
GPR[SPS]-1659834970161
[9271338] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSTypeRegistry:647.
GPR[EPS]-1659834970688
GPR[ESUN]-1659834970688
GPR[SSUN]-1659834970688
2433571
GPR[SPVATF]-1659834970940
GPR[EPVATF]-1659834972477
GPR[SPS]-1659834972477
[9273877] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1242.
GPR[EPS]-1659834973227
GPR[ESUN]-1659834973227
GPR[SSUN]-1659834973227
GPR[ESUN]-1659834973227
GPR[SSUN]-1659834973227
1537627151
GPR[ESUN]-1659834973429
GPR[SSUN]-1659834973429
-1345859678
GPR[ESUN]-1659834973672
GPR[SSUN]-1659834973672
-1345859678
GPR[SPVATF]-1659834973913
GPR[EPVATF]-1659834975469
GPR[SPS]-1659834975469
[9276729] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:863.
GPR[EPS]-1659834976079
GPR[ESUN]-1659834976080
GPR[SSUN]-1659834976080
-1345859678
GPR[ESUN]-1659834976325
GPR[SSUN]-1659834976325
79711797
GPR[ESUN]-1659834976558
GPR[SSUN]-1659834976558
79711797
GPR[SPVATF]-1659834976791
GPR[EPVATF]-1659834978328
GPR[SPS]-1659834978328
[9279532] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope$Var:282.
GPR[EPS]-1659834978882
GPR[ESUN]-1659834978882
GPR[SSUN]-1659834978882
79711797
GPR[SPVATF]-1659834979116
GPR[EPVATF]-1659834980725
GPR[SPS]-1659834980725
[9281937] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope$Var:281.
GPR[EPS]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
GPR[ESUN]-1659834981287
GPR[SSUN]-1659834981287
1331276989
GPR[SPVATF]-1659834981489
GPR[EPVATF]-1659834983296
GPR[SPS]-1659834983296
[9284286] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class NodeTraversal {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.NodeTraversal.Callback callback;

    private com.google.javascript.rhino.Node curNode;

    public static final com.google.javascript.jscomp.DiagnosticType NODE_TRAVERSAL_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_NODE_TRAVERSAL_ERROR", "{0}");

    private final java.util.Deque<com.google.javascript.jscomp.Scope> scopes = new java.util.ArrayDeque<com.google.javascript.jscomp.Scope>();

    private final java.util.Deque<com.google.javascript.rhino.Node> scopeRoots = new java.util.ArrayDeque<com.google.javascript.rhino.Node>();

    java.util.Deque<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>> cfgs = new java.util.LinkedList<com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node>>();

    private java.lang.String sourceName;

    private com.google.javascript.rhino.InputId inputId;

    private com.google.javascript.jscomp.ScopeCreator scopeCreator;

    private com.google.javascript.jscomp.NodeTraversal.ScopedCallback scopeCallback;

    public interface Callback {
        public abstract boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent);

        public abstract void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent);
    }

    public interface ScopedCallback extends com.google.javascript.jscomp.NodeTraversal.Callback {
        public abstract void enterScope(com.google.javascript.jscomp.NodeTraversal t);

        public abstract void exitScope(com.google.javascript.jscomp.NodeTraversal t);
    }

    public static abstract class AbstractPostOrderCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return true;
        }
    }

    public static abstract class AbstractScopedCallback implements com.google.javascript.jscomp.NodeTraversal.ScopedCallback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return true;
        }

        @java.lang.Override
        public void enterScope(com.google.javascript.jscomp.NodeTraversal t) {
        }

        @java.lang.Override
        public void exitScope(com.google.javascript.jscomp.NodeTraversal t) {
        }
    }

    public static abstract class AbstractShallowCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return ((parent == null) || (!parent.isFunction())) || (n == parent.getFirstChild());
        }
    }

    public static abstract class AbstractShallowStatementCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        @java.lang.Override
        public final boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return ((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent);
        }
    }

    public static abstract class AbstractNodeTypePruningCallback implements com.google.javascript.jscomp.NodeTraversal.Callback {
        private final java.util.Set<java.lang.Integer> nodeTypes;

        private final boolean include;

        public AbstractNodeTypePruningCallback(java.util.Set<java.lang.Integer> nodeTypes) {
            this(nodeTypes, true);
        }

        public AbstractNodeTypePruningCallback(java.util.Set<java.lang.Integer> nodeTypes, boolean include) {
            this.nodeTypes = nodeTypes;
            this.include = include;
        }

        @java.lang.Override
        public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal nodeTraversal, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
            return include == nodeTypes.contains(n.getType());
        }
    }

    public NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        this(compiler, cb, new com.google.javascript.jscomp.SyntacticScopeCreator(compiler));
    }

    public NodeTraversal(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb, com.google.javascript.jscomp.ScopeCreator scopeCreator) {
        this.callback = cb;
        if (cb instanceof com.google.javascript.jscomp.NodeTraversal.ScopedCallback) {
            this.scopeCallback = ((com.google.javascript.jscomp.NodeTraversal.ScopedCallback) (cb));
        }
        this.compiler = compiler;
        this.inputId = null;
        this.sourceName = "";
        this.scopeCreator = scopeCreator;
    }

    private void throwUnexpectedException(java.lang.Exception unexpectedException) {
        java.lang.String message = unexpectedException.getMessage();
        if (inputId != null) {
            message = ((unexpectedException.getMessage() + "\n") + formatNodeContext("Node", curNode)) + (curNode == null ? "" : formatNodeContext("Parent", curNode.getParent()));
        }
        compiler.throwInternalError(message, unexpectedException);
    }

    private java.lang.String formatNodeContext(java.lang.String label, com.google.javascript.rhino.Node n) {
        if (n == null) {
            return ("  " + label) + ": NULL";
        }
        return (((("  " + label) + "(") + n.toString(false, false, false)) + "): ") + formatNodePosition(n);
    }

    public void traverse(com.google.javascript.rhino.Node root) {
        try {
            inputId = com.google.javascript.jscomp.NodeUtil.getInputId(root);
            sourceName = "";
            curNode = root;
            pushScope(root);
            traverseBranch(root, null);
            popScope();
        } catch (java.lang.Exception unexpectedException) {
            throwUnexpectedException(unexpectedException);
        }
    }

    public void traverseRoots(com.google.javascript.rhino.Node... roots) {
        traverseRoots(com.google.common.collect.Lists.newArrayList(roots));
    }

    public void traverseRoots(java.util.List<com.google.javascript.rhino.Node> roots) {
        if (roots.isEmpty()) {
            return;
        }
        try {
            com.google.javascript.rhino.Node scopeRoot = roots.get(0).getParent();
            com.google.common.base.Preconditions.checkState(scopeRoot != null);
            inputId = com.google.javascript.jscomp.NodeUtil.getInputId(scopeRoot);
            sourceName = "";
            curNode = scopeRoot;
            pushScope(scopeRoot);
            for (com.google.javascript.rhino.Node root : roots) {
                com.google.common.base.Preconditions.checkState(root.getParent() == scopeRoot);
                traverseBranch(root, scopeRoot);
            }
            popScope();
        } catch (java.lang.Exception unexpectedException) {
            throwUnexpectedException(unexpectedException);
        }
    }

    private static final java.lang.String MISSING_SOURCE = "[source unknown]";

    private java.lang.String formatNodePosition(com.google.javascript.rhino.Node n) {
        if (n == null) {
            return com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE + "\n";
        }
        int lineNumber = n.getLineno();
        int columnNumber = n.getCharno();
        java.lang.String src = compiler.getSourceLine(sourceName, lineNumber);
        if (src == null) {
            src = com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE;
        }
        return ((((((sourceName + ":") + lineNumber) + ":") + columnNumber) + "\n") + src) + "\n";
    }

    void traverseWithScope(com.google.javascript.rhino.Node root, com.google.javascript.jscomp.Scope s) {
        com.google.common.base.Preconditions.checkState(s.isGlobal());
        inputId = null;
        sourceName = "";
        curNode = root;
        pushScope(s);
        traverseBranch(root, null);
        popScope();
    }

    void traverseAtScope(com.google.javascript.jscomp.Scope s) {
        com.google.javascript.rhino.Node n = s.getRootNode();
        if (n.isFunction()) {
            if (inputId == null) {
                inputId = com.google.javascript.jscomp.NodeUtil.getInputId(n);
            }
            sourceName = com.google.javascript.jscomp.NodeTraversal.getSourceName(n);
            curNode = n;
            pushScope(s);
            com.google.javascript.rhino.Node args = n.getFirstChild().getNext();
            com.google.javascript.rhino.Node body = args.getNext();
            traverseBranch(args, n);
            traverseBranch(body, n);
            popScope();
        } else {
            traverseWithScope(n, s);
        }
    }

    protected void traverseInnerNode(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent, com.google.javascript.jscomp.Scope refinedScope) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        if ((refinedScope != null) && (getScope() != refinedScope)) {
            curNode = node;
            pushScope(refinedScope);
            traverseBranch(node, parent);
            popScope();
        } else {
            traverseBranch(node, parent);
        }
    }

    public com.google.javascript.jscomp.Compiler getCompiler() {
        return ((com.google.javascript.jscomp.Compiler) (compiler));
    }

    public int getLineNumber() {
        com.google.javascript.rhino.Node cur = curNode;
        while (cur != null) {
            int line = cur.getLineno();
            if (line >= 0) {
                return line;
            }
            cur = cur.getParent();
        } 
        return 0;
    }

    public java.lang.String getSourceName() {
        return sourceName;
    }

    public com.google.javascript.jscomp.CompilerInput getInput() {
        return compiler.getInput(inputId);
    }

    public com.google.javascript.jscomp.JSModule getModule() {
        com.google.javascript.jscomp.CompilerInput input = getInput();
        return input == null ? null : input.getModule();
    }

    public com.google.javascript.rhino.Node getCurrentNode() {
        return curNode;
    }

    public static void traverse(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node root, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverse(root);
    }

    public static void traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, java.util.List<com.google.javascript.rhino.Node> roots, com.google.javascript.jscomp.NodeTraversal.Callback cb) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverseRoots(roots);
    }

    public static void traverseRoots(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.NodeTraversal.Callback cb, com.google.javascript.rhino.Node... roots) {
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, cb);
        t.traverseRoots(roots);
    }

    @java.lang.SuppressWarnings("fallthrough")
    private void traverseBranch(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int type = n.getType();
        if (type == com.google.javascript.rhino.Token.SCRIPT) {
            inputId = n.getInputId();
            sourceName = com.google.javascript.jscomp.NodeTraversal.getSourceName(n);
        }
        curNode = n;
        if (!callback.shouldTraverse(this, n, parent)) {
            return;
        }
        switch (type) {
            case com.google.javascript.rhino.Token.FUNCTION :
                traverseFunction(n, parent);
                break;
            default :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null;) {
                    com.google.javascript.rhino.Node next = child.getNext();
                    traverseBranch(child, n);
                    child = next;
                }
                break;
        }
        curNode = n;
        callback.visit(this, n, parent);
    }

    private void traverseFunction(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(n.getChildCount() == 3);
        com.google.common.base.Preconditions.checkState(n.isFunction());
        final com.google.javascript.rhino.Node fnName = n.getFirstChild();
        boolean isFunctionExpression = (parent != null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n);
        if (!isFunctionExpression) {
            traverseBranch(fnName, n);
        }
        curNode = n;
        pushScope(n);
        if (isFunctionExpression) {
            traverseBranch(fnName, n);
        }
        final com.google.javascript.rhino.Node args = fnName.getNext();
        final com.google.javascript.rhino.Node body = args.getNext();
        traverseBranch(args, n);
        com.google.common.base.Preconditions.checkState((body.getNext() == null) && body.isBlock(), body);
        traverseBranch(body, n);
        popScope();
    }

    @java.lang.SuppressWarnings("unchecked")
    public com.google.javascript.rhino.Node getEnclosingFunction() {
        if ((scopes.size() + scopeRoots.size()) < 2) {
            return null;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(277).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(277).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(277).collectInput("com.google.javascript.jscomp.NodeTraversal.this.compiler",com.google.javascript.jscomp.NodeTraversal.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(277).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopes",com.google.javascript.jscomp.NodeTraversal.this.scopes);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(277).collectInput("com.google.javascript.jscomp.NodeTraversal.this.cfgs",com.google.javascript.jscomp.NodeTraversal.this.cfgs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(277).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeCallback",com.google.javascript.jscomp.NodeTraversal.this.scopeCallback);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(277).collectInput("com.google.javascript.jscomp.NodeTraversal.this.inputId",com.google.javascript.jscomp.NodeTraversal.this.inputId);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(277).collectInput("com.google.javascript.jscomp.NodeTraversal.this.curNode",com.google.javascript.jscomp.NodeTraversal.this.curNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(277).collectInput("com.google.javascript.jscomp.NodeTraversal.this.sourceName",com.google.javascript.jscomp.NodeTraversal.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(277).collectInput("com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE",com.google.javascript.jscomp.NodeTraversal.MISSING_SOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(277).collectInput("com.google.javascript.jscomp.NodeTraversal.this.callback",com.google.javascript.jscomp.NodeTraversal.this.callback);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(277).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeRoots",com.google.javascript.jscomp.NodeTraversal.this.scopeRoots);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(277).collectInput("com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR",com.google.javascript.jscomp.NodeTraversal.NODE_TRAVERSAL_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(277).collectInput("com.google.javascript.jscomp.NodeTraversal.this.scopeCreator",com.google.javascript.jscomp.NodeTraversal.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(277).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(277).collectionEnds();
            }
            if (runtimeAngelicValue) if (scopeRoots.isEmpty()) {
                return scopes.peek().getRootNode();
            } else {
                return scopeRoots.peek();
            }
        }
    }

    private void pushScope(com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkState(curNode != null);
        scopeRoots.push(node);
        cfgs.push(null);
        if (scopeCallback != null) {
            scopeCallback.enterScope(this);
        }
    }

    private void pushScope(com.google.javascript.jscomp.Scope s) {
        com.google.common.base.Preconditions.checkState(curNode != null);
        scopes.push(s);
        cfgs.push(null);
        if (scopeCallback != null) {
            scopeCallback.enterScope(this);
        }
    }

    private void popScope() {
        if (scopeCallback != null) {
            scopeCallback.exitScope(this);
        }
        if (scopeRoots.isEmpty()) {
            scopes.pop();
        } else {
            scopeRoots.pop();
        }
        cfgs.pop();
    }

    public com.google.javascript.jscomp.Scope getScope() {
        com.google.javascript.jscomp.Scope scope = (scopes.isEmpty()) ? null : scopes.peek();
        if (scopeRoots.isEmpty()) {
            return scope;
        }
        java.util.Iterator<com.google.javascript.rhino.Node> it = scopeRoots.descendingIterator();
        while (it.hasNext()) {
            scope = scopeCreator.createScope(it.next(), scope);
            scopes.push(scope);
        } 
        scopeRoots.clear();
        return scope;
    }

    public com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> getControlFlowGraph() {
        if (cfgs.peek() == null) {
            com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(compiler, false, true);
            cfa.process(null, getScopeRoot());
            cfgs.pop();
            cfgs.push(cfa.getCfg());
        }
        return cfgs.peek();
    }

    public com.google.javascript.rhino.Node getScopeRoot() {
        if (scopeRoots.isEmpty()) {
            return scopes.peek().getRootNode();
        } else {
            return scopeRoots.peek();
        }
    }

    boolean inGlobalScope() {
        return getScopeDepth() <= 1;
    }

    int getScopeDepth() {
        return scopes.size() + scopeRoots.size();
    }

    public boolean hasScope() {
        return !(scopes.isEmpty() && scopeRoots.isEmpty());
    }

    public void report(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        com.google.javascript.jscomp.JSError error = com.google.javascript.jscomp.JSError.make(getSourceName(), n, diagnosticType, arguments);
        compiler.report(error);
    }

    private static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String name = n.getSourceFileName();
        return name == null ? "" : name;
    }

    com.google.javascript.rhino.InputId getInputId() {
        return inputId;
    }

    public com.google.javascript.jscomp.JSError makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CheckLevel level, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments) {
        return com.google.javascript.jscomp.JSError.make(getSourceName(), n, level, type, arguments);
    }

    public com.google.javascript.jscomp.JSError makeError(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType type, java.lang.String... arguments) {
        return com.google.javascript.jscomp.JSError.make(getSourceName(), n, type, arguments);
    }
}
[9284286] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659834983637
GPR[EPVATF]-1659834985443
GPR[SPS]-1659834985443
[9287273] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:553.
GPR[EPS]-1659834986624
GPR[ESUN]-1659834986624
GPR[SSUN]-1659834986624
-1797850673
GPR[SPVATF]-1659834987123
GPR[EPVATF]-1659834989034
GPR[SPS]-1659834989034
[9290264] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:503.
GPR[EPS]-1659834989614
GPR[ESUN]-1659834989614
GPR[SSUN]-1659834989614
-1797850673
GPR[SPVATF]-1659834989856
GPR[EPVATF]-1659834991988
GPR[SPS]-1659834991988
[9293216] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:502.
GPR[EPS]-1659834992566
GPR[ESUN]-1659834992566
GPR[SSUN]-1659834992566
-1797850673
GPR[SPVATF]-1659834992895
GPR[EPVATF]-1659834995028
GPR[SPS]-1659834995028
[9296399] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1453.
GPR[EPS]-1659834995749
GPR[ESUN]-1659834995749
GPR[SSUN]-1659834995749
79711797
GPR[SPVATF]-1659834995984
GPR[EPVATF]-1659834998128
GPR[SPS]-1659834998128
[9299141] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.Scope.Var> {
    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();

    private final com.google.javascript.jscomp.Scope parent;

    private final int depth;

    private final com.google.javascript.rhino.Node rootNode;

    private final com.google.javascript.rhino.jstype.ObjectType thisType;

    private final boolean isBottom;

    private com.google.javascript.jscomp.Scope.Var arguments;

    private static final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES = new com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var>() {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.getParentNode() != null) && (var.getType() == null)) && var.getParentNode().isVar()) && (!var.isExtern());
        }
    };

    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        final java.lang.String name;

        final com.google.javascript.rhino.Node nameNode;

        private com.google.javascript.rhino.jstype.JSType type;

        private final com.google.javascript.rhino.JSDocInfo info;

        private final boolean typeInferred;

        final com.google.javascript.jscomp.CompilerInput input;

        final boolean isDefine;

        final int index;

        final com.google.javascript.jscomp.Scope scope;

        private boolean markedEscaped = false;

        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input, boolean isDefine, com.google.javascript.rhino.JSDocInfo info) {
            this.name = name;
            this.nameNode = nameNode;
            this.type = type;
            this.scope = scope;
            this.index = index;
            this.input = input;
            this.isDefine = isDefine;
            this.info = info;
            this.typeInferred = inferred;
        }

        @java.lang.Override
        public java.lang.String getName() {
            return name;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        com.google.javascript.jscomp.CompilerInput getInput() {
            return input;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return nameNode.getStaticSourceFile();
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return this;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getDeclaration() {
            return nameNode == null ? null : this;
        }

        public com.google.javascript.rhino.Node getParentNode() {
            return nameNode == null ? null : nameNode.getParent();
        }

        public boolean isBleedingFunction() {
            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }

        public boolean isGlobal() {
            return scope.isGlobal();
        }

        public boolean isLocal() {
            return scope.isLocal();
        }

        boolean isExtern() {
            return (input == null) || input.isExtern();
        }

        public boolean isConst() {
            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);
        }

        public boolean isDefine() {
            return isDefine;
        }

        public com.google.javascript.rhino.Node getInitialValue() {
            com.google.javascript.rhino.Node parent = getParentNode();
            int pType = parent.getType();
            if (pType == com.google.javascript.rhino.Token.FUNCTION) {
                return parent;
            } else if (pType == com.google.javascript.rhino.Token.ASSIGN) {
                return parent.getLastChild();
            } else if (pType == com.google.javascript.rhino.Token.VAR) {
                return nameNode.getFirstChild();
            } else {
                return null;
            }
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType getType() {
            return type;
        }

        public com.google.javascript.rhino.Node getNameNode() {
            return nameNode;
        }

        @java.lang.Override
        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return info;
        }

        void setType(com.google.javascript.rhino.jstype.JSType type) {
            com.google.common.base.Preconditions.checkState(isTypeInferred());
            this.type = type;
        }

        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {
            if (type != null) {
                type = type.resolve(errorReporter, scope);
            }
        }

        @java.lang.Override
        public boolean isTypeInferred() {
            return typeInferred;
        }

        public java.lang.String getInputName() {
            if (input == null) {
                return "<non-file>";
            } else {
                return input.getName();
            }
        }

        public boolean isNoShadow() {
            if ((info != null) && info.isNoShadow()) {
                return true;
            } else {
                return false;
            }
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));
            return otherVar.nameNode == nameNode;
        }

        @java.lang.Override
        public int hashCode() {
            return nameNode.hashCode();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return ((("Scope.Var " + name) + "{") + type) + "}";
        }

        void markEscaped() {
            markedEscaped = true;
        }

        boolean isMarkedEscaped() {
            return markedEscaped;
        }
    }

    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {
        Arguments(com.google.javascript.jscomp.Scope scope) {
            super(false, "arguments", null, null, scope, -1, null, false, null);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));
            return otherVar.scope.getRootNode() == scope.getRootNode();
        }

        @java.lang.Override
        public int hashCode() {
            return java.lang.System.identityHashCode(this);
        }
    }

    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);
        this.parent = parent;
        this.rootNode = rootNode;
        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();
        if ((nodeType != null) && nodeType.isFunctionType()) {
            thisType = nodeType.toMaybeFunctionType().getTypeOfThis();
        } else {
            thisType = parent.thisType;
        }
        this.isBottom = false;
        this.depth = parent.depth + 1;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.parent = null;
        this.rootNode = rootNode;
        thisType = compiler.getTypeRegistry().getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS);
        this.isBottom = false;
        this.depth = 0;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.rhino.jstype.ObjectType thisType) {
        this.parent = null;
        this.rootNode = rootNode;
        this.thisType = thisType;
        this.isBottom = true;
        this.depth = 0;
    }

    int getDepth() {
        return depth;
    }

    boolean isBottom() {
        return isBottom;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return rootNode;
    }

    public com.google.javascript.jscomp.Scope getParent() {
        return parent;
    }

    com.google.javascript.jscomp.Scope getGlobalScope() {
        com.google.javascript.jscomp.Scope result = this;
        while (result.getParent() != null) {
            result = result.getParent();
        } 
        return result;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return parent;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType getTypeOfThis() {
        return thisType;
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {
        return declare(name, nameNode, type, input, true);
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {
        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));
        com.google.common.base.Preconditions.checkState(vars.get(name) == null);
        com.google.javascript.rhino.JSDocInfo info = (nameNode == null) ? null : com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(nameNode);
        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input, (info != null) && info.isDefine(), info);
        vars.put(name, var);
        return var;
    }

    void undeclare(com.google.javascript.jscomp.Scope.Var var) {
        com.google.common.base.Preconditions.checkState(var.scope == this);
        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);
        vars.remove(var.name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {
        return getVar(name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getOwnSlot(java.lang.String name) {
        return vars.get(name);
    }

    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {
        com.google.javascript.jscomp.Scope.Var var = vars.get(name);
        if (var != null) {
            return var;
        } else if (parent != null) {
            return parent.getVar(name);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(282).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.parent",com.google.javascript.jscomp.Scope.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("var",var);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.isBottom",com.google.javascript.jscomp.Scope.this.isBottom);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.rootNode",com.google.javascript.jscomp.Scope.this.rootNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.thisType",com.google.javascript.jscomp.Scope.this.thisType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.depth",com.google.javascript.jscomp.Scope.this.depth);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.vars",com.google.javascript.jscomp.Scope.this.vars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.arguments",com.google.javascript.jscomp.Scope.this.arguments);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.jscomp.Scope.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.parent.getTypeOfThis()",com.google.javascript.jscomp.Scope.this.parent.getTypeOfThis());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParent()",com.google.javascript.jscomp.Scope.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.parent.getDepth()",com.google.javascript.jscomp.Scope.this.parent.getDepth());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParentScope()",com.google.javascript.jscomp.Scope.this.parent.getParentScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.parent.isBottom()",com.google.javascript.jscomp.Scope.this.parent.isBottom());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.parent.getRootNode()",com.google.javascript.jscomp.Scope.this.parent.getRootNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.jscomp.Scope.this.arguments!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getName()",com.google.javascript.jscomp.Scope.this.arguments.getName());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isDefine()",com.google.javascript.jscomp.Scope.this.arguments.isDefine());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getType()",com.google.javascript.jscomp.Scope.this.arguments.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred()",com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped()",com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getJSDocInfo()",com.google.javascript.jscomp.Scope.this.arguments.getJSDocInfo());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNode()",com.google.javascript.jscomp.Scope.this.arguments.getNode());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getInput()",com.google.javascript.jscomp.Scope.this.arguments.getInput());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getScope()",com.google.javascript.jscomp.Scope.this.arguments.getScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNameNode()",com.google.javascript.jscomp.Scope.this.arguments.getNameNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(282).collectionEnds();
            }
            if (runtimeAngelicValue)
                return null;

        }
    }

    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {
        if (arguments == null) {
            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);
        }
        return arguments;
    }

    public boolean isDeclared(java.lang.String name, boolean recurse) {
        com.google.javascript.jscomp.Scope scope = this;
        if (scope.vars.containsKey(name)) {
            return true;
        }
        if ((scope.parent != null) && recurse) {
            return scope.parent.isDeclared(name, recurse);
        }
        return false;
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {
        return vars.values().iterator();
    }

    java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getVarIterable() {
        return vars.values();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getReferences(com.google.javascript.jscomp.Scope.Var var) {
        return com.google.common.collect.ImmutableList.of(var);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return java.util.Collections.unmodifiableCollection(vars.values());
    }

    public int getVarCount() {
        return vars.size();
    }

    public boolean isGlobal() {
        return parent == null;
    }

    public boolean isLocal() {
        return !isGlobal();
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getDeclarativelyUnboundVarsWithoutTypes() {
        return com.google.common.collect.Iterators.filter(getVars(), com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);
    }
}
[9299141] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659834998491
GPR[SSUN]-1659834998491
GPR[ESUN]-1659834998491
GPR[SSUN]-1659834998491
-1345859678
GPR[SPVATF]-1659834998737
GPR[EPVATF]-1659835000989
GPR[SPS]-1659835000989
[9302251] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:672.
GPR[EPS]-1659835001602
GPR[ESUN]-1659835001602
GPR[SSUN]-1659835001602
-1345859678
GPR[SPVATF]-1659835001854
GPR[EPVATF]-1659835004110
GPR[SPS]-1659835004110
[9305366] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:657.
GPR[EPS]-1659835004716
GPR[ESUN]-1659835004716
GPR[SSUN]-1659835004716
-1345859678
GPR[SPVATF]-1659835004962
GPR[EPVATF]-1659835007188
GPR[SPS]-1659835007188
[9308437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:656.
GPR[EPS]-1659835007787
GPR[ESUN]-1659835007787
GPR[SSUN]-1659835007787
-1345859678
GPR[ESUN]-1659835008043
GPR[SSUN]-1659835008043
-1345859678
GPR[SPVATF]-1659835008285
GPR[EPVATF]-1659835014212
GPR[SPS]-1659835014212
[9315498] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:650.
GPR[EPS]-1659835014848
GPR[ESUN]-1659835014848
GPR[SSUN]-1659835014848
-1345859678
GPR[SPVATF]-1659835015092
GPR[EPVATF]-1659835016499
GPR[SPS]-1659835016499
[9317782] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:643.
GPR[EPS]-1659835017132
GPR[ESUN]-1659835017132
GPR[SSUN]-1659835017132
-1345859678
GPR[SPVATF]-1659835017380
GPR[EPVATF]-1659835018883
GPR[SPS]-1659835018883
[9320155] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:642.
GPR[EPS]-1659835019505
GPR[ESUN]-1659835019505
GPR[SSUN]-1659835019505
-1345859678
GPR[SPVATF]-1659835019751
GPR[EPVATF]-1659835021198
GPR[SPS]-1659835021198
[9322500] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:641.
GPR[EPS]-1659835021850
GPR[ESUN]-1659835021850
GPR[SSUN]-1659835021850
-1345859678
GPR[SPVATF]-1659835022094
GPR[EPVATF]-1659835023508
GPR[SPS]-1659835023508
[9324778] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:632.
GPR[EPS]-1659835024128
GPR[SPVATF]-1659835024128
GPR[EPVATF]-1659835025556
GPR[SPS]-1659835025556
[9326833] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:632.
GPR[EPS]-1659835026183
GPR[ESUN]-1659835026183
GPR[SSUN]-1659835026184
-1345859678
GPR[ESUN]-1659835026427
GPR[SSUN]-1659835026427
GPR[ESUN]-1659835026427
GPR[SSUN]-1659835026427
2433571
GPR[SPVATF]-1659835026667
GPR[EPVATF]-1659835028123
GPR[SPS]-1659835028123
[9329601] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int LAST_PROP = 54;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        value = x.toString();
                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(292).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("charno",charno);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("lineno",lineno);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(292).collectionEnds();
            }
            if (runtimeAngelicValue)
                return -1;

        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[9329601] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659835028951
GPR[SSUN]-1659835028951
GPR[ESUN]-1659835028951
GPR[SSUN]-1659835028951
GPR[ESUN]-1659835028951
GPR[SSUN]-1659835028951
1187751237
GPR[SPVATF]-1659835029234
GPR[EPVATF]-1659835030710
GPR[SPS]-1659835030710
[9332152] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2826.
GPR[EPS]-1659835031503
GPR[SPVATF]-1659835031503
GPR[EPVATF]-1659835032981
GPR[SPS]-1659835032981
[9334424] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2826.
GPR[EPS]-1659835033774
GPR[ESUN]-1659835033774
GPR[SSUN]-1659835033774
1187751237
GPR[ESUN]-1659835034099
GPR[SSUN]-1659835034099
1331276989
GPR[SPVATF]-1659835034311
GPR[EPVATF]-1659835035751
GPR[SPS]-1659835035751
[9336930] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:530.
GPR[EPS]-1659835036280
GPR[ESUN]-1659835036280
GPR[SSUN]-1659835036280
646738083
GPR[SPVATF]-1659835036561
GPR[EPVATF]-1659835037967
GPR[SPS]-1659835037967
[9339348] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:573.
GPR[EPS]-1659835038698
GPR[ESUN]-1659835038698
GPR[SSUN]-1659835038698
646738083
GPR[SPVATF]-1659835038977
GPR[EPVATF]-1659835040392
GPR[SPS]-1659835040392
[9341812] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:572.
GPR[EPS]-1659835041162
GPR[ESUN]-1659835041162
GPR[SSUN]-1659835041162
GPR[ESUN]-1659835041162
GPR[SSUN]-1659835041162
GPR[ESUN]-1659835041162
GPR[SSUN]-1659835041162
GPR[ESUN]-1659835041162
GPR[SSUN]-1659835041162
79711797
GPR[SPVATF]-1659835041467
GPR[EPVATF]-1659835042968
GPR[SPS]-1659835042968
[9343992] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.Scope.Var> {
    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();

    private final com.google.javascript.jscomp.Scope parent;

    private final int depth;

    private final com.google.javascript.rhino.Node rootNode;

    private final com.google.javascript.rhino.jstype.ObjectType thisType;

    private final boolean isBottom;

    private com.google.javascript.jscomp.Scope.Var arguments;

    private static final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES = new com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var>() {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.getParentNode() != null) && (var.getType() == null)) && var.getParentNode().isVar()) && (!var.isExtern());
        }
    };

    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        final java.lang.String name;

        final com.google.javascript.rhino.Node nameNode;

        private com.google.javascript.rhino.jstype.JSType type;

        private final com.google.javascript.rhino.JSDocInfo info;

        private final boolean typeInferred;

        final com.google.javascript.jscomp.CompilerInput input;

        final boolean isDefine;

        final int index;

        final com.google.javascript.jscomp.Scope scope;

        private boolean markedEscaped = false;

        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input, boolean isDefine, com.google.javascript.rhino.JSDocInfo info) {
            this.name = name;
            this.nameNode = nameNode;
            this.type = type;
            this.scope = scope;
            this.index = index;
            this.input = input;
            this.isDefine = isDefine;
            this.info = info;
            this.typeInferred = inferred;
        }

        @java.lang.Override
        public java.lang.String getName() {
            return name;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        com.google.javascript.jscomp.CompilerInput getInput() {
            return input;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return nameNode.getStaticSourceFile();
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return this;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getDeclaration() {
            return nameNode == null ? null : this;
        }

        public com.google.javascript.rhino.Node getParentNode() {
            return nameNode == null ? null : nameNode.getParent();
        }

        public boolean isBleedingFunction() {
            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }

        public boolean isGlobal() {
            return scope.isGlobal();
        }

        public boolean isLocal() {
            return scope.isLocal();
        }

        boolean isExtern() {
            return (input == null) || input.isExtern();
        }

        public boolean isConst() {
            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);
        }

        public boolean isDefine() {
            return isDefine;
        }

        public com.google.javascript.rhino.Node getInitialValue() {
            com.google.javascript.rhino.Node parent = getParentNode();
            int pType = parent.getType();
            if (pType == com.google.javascript.rhino.Token.FUNCTION) {
                return parent;
            } else if (pType == com.google.javascript.rhino.Token.ASSIGN) {
                return parent.getLastChild();
            } else if (pType == com.google.javascript.rhino.Token.VAR) {
                return nameNode.getFirstChild();
            } else {
                return null;
            }
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType getType() {
            return type;
        }

        public com.google.javascript.rhino.Node getNameNode() {
            return nameNode;
        }

        @java.lang.Override
        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return info;
        }

        void setType(com.google.javascript.rhino.jstype.JSType type) {
            com.google.common.base.Preconditions.checkState(isTypeInferred());
            this.type = type;
        }

        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {
            if (type != null) {
                type = type.resolve(errorReporter, scope);
            }
        }

        @java.lang.Override
        public boolean isTypeInferred() {
            return typeInferred;
        }

        public java.lang.String getInputName() {
            if (input == null) {
                return "<non-file>";
            } else {
                return input.getName();
            }
        }

        public boolean isNoShadow() {
            if ((info != null) && info.isNoShadow()) {
                return true;
            } else {
                return false;
            }
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));
            return otherVar.nameNode == nameNode;
        }

        @java.lang.Override
        public int hashCode() {
            return nameNode.hashCode();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return ((("Scope.Var " + name) + "{") + type) + "}";
        }

        void markEscaped() {
            markedEscaped = true;
        }

        boolean isMarkedEscaped() {
            return markedEscaped;
        }
    }

    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {
        Arguments(com.google.javascript.jscomp.Scope scope) {
            super(false, "arguments", null, null, scope, -1, null, false, null);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));
            return otherVar.scope.getRootNode() == scope.getRootNode();
        }

        @java.lang.Override
        public int hashCode() {
            return java.lang.System.identityHashCode(this);
        }
    }

    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);
        this.parent = parent;
        this.rootNode = rootNode;
        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();
        if ((nodeType != null) && nodeType.isFunctionType()) {
            thisType = nodeType.toMaybeFunctionType().getTypeOfThis();
        } else {
            thisType = parent.thisType;
        }
        this.isBottom = false;
        this.depth = parent.depth + 1;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        this.parent = null;
        this.rootNode = rootNode;
        thisType = compiler.getTypeRegistry().getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS);
        this.isBottom = false;
        this.depth = 0;
    }

    Scope(com.google.javascript.rhino.Node rootNode, com.google.javascript.rhino.jstype.ObjectType thisType) {
        this.parent = null;
        this.rootNode = rootNode;
        this.thisType = thisType;
        this.isBottom = true;
        this.depth = 0;
    }

    int getDepth() {
        return depth;
    }

    boolean isBottom() {
        return isBottom;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return rootNode;
    }

    public com.google.javascript.jscomp.Scope getParent() {
        return parent;
    }

    com.google.javascript.jscomp.Scope getGlobalScope() {
        com.google.javascript.jscomp.Scope result = this;
        while (result.getParent() != null) {
            result = result.getParent();
        } 
        return result;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return parent;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.ObjectType getTypeOfThis() {
        return thisType;
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {
        return declare(name, nameNode, type, input, true);
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {
        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));
        com.google.common.base.Preconditions.checkState(vars.get(name) == null);
        com.google.javascript.rhino.JSDocInfo info = (nameNode == null) ? null : com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(nameNode);
        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input, (info != null) && info.isDefine(), info);
        vars.put(name, var);
        return var;
    }

    void undeclare(com.google.javascript.jscomp.Scope.Var var) {
        com.google.common.base.Preconditions.checkState(var.scope == this);
        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);
        vars.remove(var.name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getSlot(java.lang.String name) {
        return getVar(name);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> getOwnSlot(java.lang.String name) {
        return vars.get(name);
    }

    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {
        com.google.javascript.jscomp.Scope.Var var = vars.get(name);
        if (var != null) {
            return var;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(298).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("parent != null",parent != null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.parent",com.google.javascript.jscomp.Scope.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("var",var);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.isBottom",com.google.javascript.jscomp.Scope.this.isBottom);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.rootNode",com.google.javascript.jscomp.Scope.this.rootNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.thisType",com.google.javascript.jscomp.Scope.this.thisType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.depth",com.google.javascript.jscomp.Scope.this.depth);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.vars",com.google.javascript.jscomp.Scope.this.vars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.arguments",com.google.javascript.jscomp.Scope.this.arguments);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.jscomp.Scope.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.parent.getTypeOfThis()",com.google.javascript.jscomp.Scope.this.parent.getTypeOfThis());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParent()",com.google.javascript.jscomp.Scope.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.parent.getDepth()",com.google.javascript.jscomp.Scope.this.parent.getDepth());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParentScope()",com.google.javascript.jscomp.Scope.this.parent.getParentScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.parent.isBottom()",com.google.javascript.jscomp.Scope.this.parent.isBottom());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.parent.getRootNode()",com.google.javascript.jscomp.Scope.this.parent.getRootNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.jscomp.Scope.this.arguments!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getName()",com.google.javascript.jscomp.Scope.this.arguments.getName());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isDefine()",com.google.javascript.jscomp.Scope.this.arguments.isDefine());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getType()",com.google.javascript.jscomp.Scope.this.arguments.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred()",com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped()",com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getJSDocInfo()",com.google.javascript.jscomp.Scope.this.arguments.getJSDocInfo());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNode()",com.google.javascript.jscomp.Scope.this.arguments.getNode());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getInput()",com.google.javascript.jscomp.Scope.this.arguments.getInput());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getScope()",com.google.javascript.jscomp.Scope.this.arguments.getScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNameNode()",com.google.javascript.jscomp.Scope.this.arguments.getNameNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(298).collectionEnds();
            }
            if (runtimeAngelicValue) if (parent != null) {
                return parent.getVar(name);
            } else {
                return null;
            }
        }
    }

    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {
        if (arguments == null) {
            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);
        }
        return arguments;
    }

    public boolean isDeclared(java.lang.String name, boolean recurse) {
        com.google.javascript.jscomp.Scope scope = this;
        if (scope.vars.containsKey(name)) {
            return true;
        }
        if ((scope.parent != null) && recurse) {
            return scope.parent.isDeclared(name, recurse);
        }
        return false;
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {
        return vars.values().iterator();
    }

    java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getVarIterable() {
        return vars.values();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getReferences(com.google.javascript.jscomp.Scope.Var var) {
        return com.google.common.collect.ImmutableList.of(var);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return java.util.Collections.unmodifiableCollection(vars.values());
    }

    public int getVarCount() {
        return vars.size();
    }

    public boolean isGlobal() {
        return parent == null;
    }

    public boolean isLocal() {
        return !isGlobal();
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getDeclarativelyUnboundVarsWithoutTypes() {
        return com.google.common.collect.Iterators.filter(getVars(), com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);
    }
}
[9343993] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659835043343
GPR[EPVATF]-1659835044887
GPR[SPS]-1659835044887
[9346113] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope:543.
GPR[EPS]-1659835045464
GPR[ESUN]-1659835045464
GPR[SSUN]-1659835045464
646738083
GPR[SPVATF]-1659835045753
GPR[EPVATF]-1659835047281
GPR[SPS]-1659835047281
[9348689] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator:228.
GPR[EPS]-1659835048039
GPR[ESUN]-1659835048039
GPR[SSUN]-1659835048039
646738083
GPR[ESUN]-1659835048321
GPR[SSUN]-1659835048321
646738083
GPR[SPVATF]-1659835048684
GPR[EPVATF]-1659835050262
GPR[SPS]-1659835050262
[9351651] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder$CollectProperties:1710.
GPR[EPS]-1659835051001
GPR[SPVATF]-1659835051001
GPR[EPVATF]-1659835052686
GPR[SPS]-1659835052686
[9354119] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder$CollectProperties:1710.
GPR[EPS]-1659835053469
GPR[ESUN]-1659835053469
GPR[SSUN]-1659835053469
-1234646214
GPR[ESUN]-1659835053676
GPR[SSUN]-1659835053676
-1234646214
GPR[SPVATF]-1659835053888
GPR[EPVATF]-1659835055629
GPR[SPS]-1659835055629
[9356919] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ObjectType:322.
GPR[EPS]-1659835056269
GPR[ESUN]-1659835056269
GPR[SSUN]-1659835056269
-1234646214
GPR[ESUN]-1659835056562
GPR[SSUN]-1659835056562
1187751237
GPR[SPVATF]-1659835056856
GPR[EPVATF]-1659835058793
GPR[SPS]-1659835058793
[9361171] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3046.
GPR[EPS]-1659835060521
GPR[ESUN]-1659835060521
GPR[SSUN]-1659835060522
-1234646214
GPR[SPVATF]-1659835061042
GPR[EPVATF]-1659835063381
GPR[SPS]-1659835063381
[9364612] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ObjectType:305.
GPR[EPS]-1659835063962
GPR[SPVATF]-1659835063962
GPR[EPVATF]-1659835066107
GPR[SPS]-1659835066107
[9367268] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ObjectType:305.
GPR[EPS]-1659835066618
GPR[ESUN]-1659835066618
GPR[SSUN]-1659835066618
-1234646214
GPR[ESUN]-1659835066831
GPR[SSUN]-1659835066831
GPR[ESUN]-1659835066831
GPR[SSUN]-1659835066831
1187751237
GPR[ESUN]-1659835067124
GPR[SSUN]-1659835067124
GPR[ESUN]-1659835067124
GPR[SSUN]-1659835067124
GPR[ESUN]-1659835067124
GPR[SSUN]-1659835067124
GPR[ESUN]-1659835067124
GPR[SSUN]-1659835067124
GPR[ESUN]-1659835067124
GPR[SSUN]-1659835067124
GPR[ESUN]-1659835067124
GPR[SSUN]-1659835067124
2433571
GPR[ESUN]-1659835067462
GPR[SSUN]-1659835067463
466431456
GPR[ESUN]-1659835067755
GPR[SSUN]-1659835067755
466431456
GPR[SPVATF]-1659835068036
GPR[EPVATF]-1659835070222
GPR[SPS]-1659835070222
[9371670] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1177.
GPR[EPS]-1659835071021
GPR[SPVATF]-1659835071021
GPR[EPVATF]-1659835073232
GPR[SPS]-1659835073232
[9374686] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1177.
GPR[EPS]-1659835074036
GPR[ESUN]-1659835074036
GPR[SSUN]-1659835074036
466431456
GPR[ESUN]-1659835074333
GPR[SSUN]-1659835074334
466431456
GPR[SPVATF]-1659835074619
GPR[EPVATF]-1659835076891
GPR[SPS]-1659835076891
[9378348] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1171.
GPR[EPS]-1659835077698
GPR[SPVATF]-1659835077698
GPR[EPVATF]-1659835079944
GPR[SPS]-1659835079944
[9382181] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1171.
GPR[EPS]-1659835081532
GPR[ESUN]-1659835081532
GPR[SSUN]-1659835081532
2433571
GPR[ESUN]-1659835081811
GPR[SSUN]-1659835081811
-1345859678
GPR[ESUN]-1659835082072
GPR[SSUN]-1659835082072
-1345859678
GPR[SPVATF]-1659835082327
GPR[EPVATF]-1659835084055
GPR[SPS]-1659835084056
[9385340] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:298.
GPR[EPS]-1659835084690
GPR[ESUN]-1659835084690
GPR[SSUN]-1659835084690
-1345859678
GPR[SPVATF]-1659835084935
GPR[EPVATF]-1659835086385
GPR[SPS]-1659835086385
[9387659] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:295.
GPR[EPS]-1659835087009
GPR[SPVATF]-1659835087010
GPR[EPVATF]-1659835088442
GPR[SPS]-1659835088443
[9389810] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:295.
GPR[EPS]-1659835089160
GPR[ESUN]-1659835089160
GPR[SSUN]-1659835089161
-1345859678
GPR[ESUN]-1659835089410
GPR[SSUN]-1659835089410
-1345859678
GPR[ESUN]-1659835089661
GPR[SSUN]-1659835089661
-1345859678
GPR[SPVATF]-1659835089912
GPR[EPVATF]-1659835091320
GPR[SPS]-1659835091320
[9392442] ERROR ConstraintModelBuilder - Unable to compile the change: 
class IRFactory {
    static final java.lang.String GETTER_ERROR_MESSAGE = "getters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SETTER_ERROR_MESSAGE = "setters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SUSPICIOUS_COMMENT_WARNING = "Non-JSDoc comment has annotations. " + "Did you mean to start it with '/**'?";

    private final java.lang.String sourceString;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.parsing.Config config;

    private final com.google.javascript.rhino.head.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher transformDispatcher;

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ALLOWED_DIRECTIVES = com.google.common.collect.ImmutableSet.of("use strict");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_STRICT_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield");

    private final java.util.Set<java.lang.String> reservedKeywords;

    private final java.util.Set<com.google.javascript.rhino.head.ast.Comment> parsedComments = com.google.common.collect.Sets.newHashSet();

    com.google.javascript.rhino.Node rootNodeJsDocHolder = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);

    com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = rootNodeJsDocHolder.getJsDocBuilderForNode();

    com.google.javascript.rhino.JSDocInfo fileOverviewInfo = null;

    private com.google.javascript.rhino.Node templateNode;

    private IRFactory(java.lang.String sourceString, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        this.sourceString = sourceString;
        this.sourceFile = sourceFile;
        this.sourceName = (sourceFile == null) ? null : sourceFile.getName();
        this.config = config;
        this.errorReporter = errorReporter;
        this.transformDispatcher = new com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher();
        this.templateNode = createTemplateNode();
        switch (config.languageMode) {
            case ECMASCRIPT3 :
                reservedKeywords = null;
                break;
            case ECMASCRIPT5 :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS;
                break;
            case ECMASCRIPT5_STRICT :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS;
                break;
            default :
                throw new java.lang.IllegalStateException("unknown language mode");
        }
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        templateNode.setStaticSourceFile(sourceFile);
        return templateNode;
    }

    public static com.google.javascript.rhino.Node transformTree(com.google.javascript.rhino.head.ast.AstRoot node, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, java.lang.String sourceString, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        com.google.javascript.jscomp.parsing.IRFactory irFactory = new com.google.javascript.jscomp.parsing.IRFactory(sourceString, sourceFile, config, errorReporter);
        com.google.javascript.rhino.Node irNode = irFactory.transform(node);
        if (node.getComments() != null) {
            for (com.google.javascript.rhino.head.ast.Comment comment : node.getComments()) {
                if ((comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.JSDOC) && (!irFactory.parsedComments.contains(comment))) {
                    irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
                } else if (comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.BLOCK_COMMENT) {
                    irFactory.handleBlockComment(comment);
                }
            }
        }
        irFactory.setFileOverviewJsDoc(irNode);
        return irNode;
    }

    private void setFileOverviewJsDoc(com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();
        if (rootNodeJsDoc != null) {
            irNode.setJSDocInfo(rootNodeJsDoc);
            rootNodeJsDoc.setAssociatedNode(irNode);
        }
        if (fileOverviewInfo != null) {
            if ((irNode.getJSDocInfo() != null) && (irNode.getJSDocInfo().getLicense() != null)) {
                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());
            }
            irNode.setJSDocInfo(fileOverviewInfo);
            fileOverviewInfo.setAssociatedNode(irNode);
        }
    }

    private com.google.javascript.rhino.Node transformBlock(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = transform(node);
        if (!irNode.isBlock()) {
            if (irNode.isEmpty()) {
                irNode.setType(com.google.javascript.rhino.Token.BLOCK);
                irNode.setWasEmptyNode(true);
            } else {
                com.google.javascript.rhino.Node newBlock = newNode(com.google.javascript.rhino.Token.BLOCK, irNode);
                newBlock.setLineno(irNode.getLineno());
                newBlock.setCharno(irNode.getCharno());
                maybeSetLengthFrom(newBlock, node);
                irNode = newBlock;
            }
        }
        return irNode;
    }

    private void handleBlockComment(com.google.javascript.rhino.head.ast.Comment comment) {
        java.lang.String value = comment.getValue();
        if ((value.indexOf("/* @") != (-1)) || (value.indexOf("\n * @") != (-1))) {
            errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), "", 0);
        }
    }

    private boolean handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser) {
        if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {
            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();
            return true;
        }
        return false;
    }

    private void handlePossibleFileOverviewJsDoc(com.google.javascript.rhino.head.ast.Comment comment, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
        parsedComments.add(comment);
        handlePossibleFileOverviewJsDoc(jsDocParser);
    }

    private com.google.javascript.rhino.JSDocInfo handleJsDoc(com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.head.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
            parsedComments.add(comment);
            if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {
                return jsDocParser.retrieveAndResetParsedJSDocInfo();
            }
        }
        return null;
    }

    private com.google.javascript.rhino.Node transform(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNameAsString(com.google.javascript.rhino.head.ast.Name node) {
        com.google.javascript.rhino.Node irNode = transformDispatcher.processName(node, true);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
        com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, literalNode);
        return irNode;
    }

    private static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    private void setSourceInfo(com.google.javascript.rhino.Node irNode, com.google.javascript.rhino.head.ast.AstNode node) {
        if (irNode.getLineno() == (-1)) {
            int lineno = node.getLineno();
            irNode.setLineno(lineno);
            int charno = position2charno(node.getAbsolutePosition());
            irNode.setCharno(charno);
            maybeSetLengthFrom(irNode, node);
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser createJsDocInfoParser(com.google.javascript.rhino.head.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsdocParser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
        jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);
        jsdocParser.parse();
        return jsdocParser;
    }

    private void maybeSetLengthFrom(com.google.javascript.rhino.Node node, com.google.javascript.rhino.head.ast.AstNode source) {
        if (config.isIdeMode) {
            node.setLength(source.getLength());
        }
    }

    private int position2charno(int position) {
        int lineIndex = sourceString.lastIndexOf('\n', position);
        if (lineIndex == (-1)) {
            return position;
        } else {
            return (position - lineIndex) - 1;
        }
    }

    private com.google.javascript.rhino.Node justTransform(com.google.javascript.rhino.head.ast.AstNode node) {
        return transformDispatcher.process(node);
    }

    private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node processGeneric(com.google.javascript.rhino.head.Node n) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));
            for (com.google.javascript.rhino.head.Node child : n) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            return node;
        }

        private com.google.javascript.rhino.Node transformAsString(com.google.javascript.rhino.head.ast.AstNode n) {
            com.google.javascript.rhino.Node ret;
            if (n instanceof com.google.javascript.rhino.head.ast.Name) {
                ret = transformNameAsString(((com.google.javascript.rhino.head.ast.Name) (n)));
            } else if (n instanceof com.google.javascript.rhino.head.ast.NumberLiteral) {
                ret = transformNumberAsString(((com.google.javascript.rhino.head.ast.NumberLiteral) (n)));
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            } else {
                ret = transform(n);
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            }
            com.google.common.base.Preconditions.checkState(ret.isString());
            return ret;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.rhino.head.ast.ArrayLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.ARRAYLIT);
            for (com.google.javascript.rhino.head.ast.AstNode child : literalNode.getElements()) {
                com.google.javascript.rhino.Node c = transform(child);
                node.addChildToBack(c);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAssignment(com.google.javascript.rhino.head.ast.Assignment assignmentNode) {
            com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);
            com.google.javascript.rhino.Node target = assign.getFirstChild();
            if (!validAssignmentTarget(target)) {
                errorReporter.error("invalid assignment target", sourceName, target.getLineno(), "", 0);
            }
            return assign;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAstRoot(com.google.javascript.rhino.head.ast.AstRoot rootNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SCRIPT);
            for (com.google.javascript.rhino.head.Node child : rootNode) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            parseDirectives(node);
            return node;
        }

        private void parseDirectives(com.google.javascript.rhino.Node node) {
            java.util.Set<java.lang.String> directives = null;
            while (isDirective(node.getFirstChild())) {
                java.lang.String directive = node.removeFirstChild().getFirstChild().getString();
                if (directives == null) {
                    directives = com.google.common.collect.Sets.newHashSet(directive);
                } else {
                    directives.add(directive);
                }
            } 
            if (directives != null) {
                node.setDirectives(directives);
            }
        }

        private boolean isDirective(com.google.javascript.rhino.Node n) {
            if (n == null) {
                return false;
            }
            int nType = n.getType();
            return ((nType == com.google.javascript.rhino.Token.EXPR_RESULT) && n.getFirstChild().isString()) && com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBlock(com.google.javascript.rhino.head.ast.Block blockNode) {
            return processGeneric(blockNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.rhino.head.ast.BreakStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.BREAK);
            if (statementNode.getBreakLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processCatchClause(com.google.javascript.rhino.head.ast.CatchClause clauseNode) {
            com.google.javascript.rhino.head.ast.AstNode catchVar = clauseNode.getVarName();
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CATCH, transform(catchVar));
            if (clauseNode.getCatchCondition() != null) {
                errorReporter.error("Catch clauses are not supported", sourceName, clauseNode.getCatchCondition().getLineno(), "", 0);
            }
            node.addChildToBack(transformBlock(clauseNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.rhino.head.ast.ConditionalExpression exprNode) {
            return newNode(com.google.javascript.rhino.Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.rhino.head.ast.ContinueStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CONTINUE);
            if (statementNode.getLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processDoLoop(com.google.javascript.rhino.head.ast.DoLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processElementGet(com.google.javascript.rhino.head.ast.ElementGet getNode) {
            return newNode(com.google.javascript.rhino.Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.rhino.head.ast.EmptyExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyStatement(com.google.javascript.rhino.head.ast.EmptyStatement exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));
            node.addChildToBack(transform(statementNode.getExpression()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForInLoop(com.google.javascript.rhino.head.ast.ForInLoop loopNode) {
            if (loopNode.isForEach()) {
                errorReporter.error("unsupported language extension: for each", sourceName, loopNode.getLineno(), "", 0);
                return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
            }
            return newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForLoop(com.google.javascript.rhino.head.ast.ForLoop loopNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));
            node.addChildToBack(transformBlock(loopNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.rhino.head.ast.FunctionCall callNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : callNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(node.getFirstChild().getLineno());
            node.setCharno(node.getFirstChild().getCharno());
            maybeSetLengthFrom(node, callNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode functionNode) {
            com.google.javascript.rhino.head.ast.Name name = functionNode.getFunctionName();
            java.lang.Boolean isUnnamedFunction = false;
            if (name == null) {
                int functionType = functionNode.getFunctionType();
                if (functionType != com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_EXPRESSION) {
                    errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
                    return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
                }
                name = new com.google.javascript.rhino.head.ast.Name();
                name.setIdentifier("");
                isUnnamedFunction = true;
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FUNCTION);
            com.google.javascript.rhino.Node newName = transform(name);
            if (isUnnamedFunction) {
                newName.setLineno(functionNode.getLineno());
                int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
                newName.setCharno(position2charno(lpColumn));
                maybeSetLengthFrom(newName, name);
            }
            node.addChildToBack(newName);
            com.google.javascript.rhino.Node lp = newNode(com.google.javascript.rhino.Token.PARAM_LIST);
            com.google.javascript.rhino.head.ast.Name fnName = functionNode.getFunctionName();
            if (fnName != null) {
                lp.setLineno(fnName.getLineno());
            } else {
                lp.setLineno(functionNode.getLineno());
            }
            int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
            lp.setCharno(position2charno(lparenCharno));
            for (com.google.javascript.rhino.head.ast.AstNode param : functionNode.getParams()) {
                com.google.javascript.rhino.Node paramNode = transform(param);
                if (paramNode.isName()) {
                    lp.addChildToBack(paramNode);
                } else {
                    com.google.common.base.Preconditions.checkState((config.isIdeMode || paramNode.isObjectLit()) || paramNode.isArrayLit());
                }
            }
            node.addChildToBack(lp);
            com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());
            if (!bodyNode.isBlock()) {
                com.google.common.base.Preconditions.checkState(config.isIdeMode);
                bodyNode = com.google.javascript.rhino.IR.block();
            }
            parseDirectives(bodyNode);
            node.addChildToBack(bodyNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIfStatement(com.google.javascript.rhino.head.ast.IfStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.IF);
            node.addChildToBack(transform(statementNode.getCondition()));
            node.addChildToBack(transformBlock(statementNode.getThenPart()));
            if (statementNode.getElsePart() != null) {
                node.addChildToBack(transformBlock(statementNode.getElsePart()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression exprNode) {
            com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));
            n.setLineno(exprNode.getLineno());
            n.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(n, exprNode);
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.rhino.head.ast.KeywordLiteral literalNode) {
            return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabel(com.google.javascript.rhino.head.ast.Label labelNode) {
            return newStringNode(com.google.javascript.rhino.Token.LABEL_NAME, labelNode.getName());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.rhino.head.ast.LabeledStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.LABEL);
            com.google.javascript.rhino.Node prev = null;
            com.google.javascript.rhino.Node cur = node;
            for (com.google.javascript.rhino.head.ast.Label label : statementNode.getLabels()) {
                if (prev != null) {
                    prev.addChildToBack(cur);
                }
                cur.addChildToBack(transform(label));
                cur.setLineno(label.getLineno());
                maybeSetLengthFrom(cur, label);
                int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());
                cur.setCharno(clauseAbsolutePosition);
                prev = cur;
                cur = newNode(com.google.javascript.rhino.Token.LABEL);
            }
            prev.addChildToBack(transform(statementNode.getStatement()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode) {
            return processName(nameNode, false);
        }

        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode, boolean asString) {
            if (asString) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(314).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceString",com.google.javascript.jscomp.parsing.IRFactory.this.sourceString);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher",com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo",com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile",com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter",com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder",com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords",com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.templateNode",com.google.javascript.jscomp.parsing.IRFactory.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.config",com.google.javascript.jscomp.parsing.IRFactory.this.config);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments",com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("asString",asString);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceName",com.google.javascript.jscomp.parsing.IRFactory.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectInput("nameNode",nameNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(314).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return newStringNode(com.google.javascript.rhino.Token.STRING, nameNode.getIdentifier());

            } else {
                if (isReservedKeyword(nameNode.getIdentifier())) {
                    errorReporter.error("identifier is a reserved word", sourceName, nameNode.getLineno(), "", 0);
                }
                return newStringNode(com.google.javascript.rhino.Token.NAME, nameNode.getIdentifier());
            }
        }

        private boolean isReservedKeyword(java.lang.String identifier) {
            return (reservedKeywords != null) && reservedKeywords.contains(identifier);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNewExpression(com.google.javascript.rhino.head.ast.NewExpression exprNode) {
            return processFunctionCall(exprNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
            return newNumberNode(literalNode.getNumber());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.rhino.head.ast.ObjectLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.OBJECTLIT);
            for (com.google.javascript.rhino.head.ast.ObjectProperty el : literalNode.getElements()) {
                if (config.languageMode == com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3) {
                    if (el.isGetter()) {
                        reportGetter(el);
                        continue;
                    } else if (el.isSetter()) {
                        reportSetter(el);
                        continue;
                    }
                }
                com.google.javascript.rhino.Node key = transformAsString(el.getLeft());
                key.setType(com.google.javascript.rhino.Token.STRING_KEY);
                com.google.javascript.rhino.Node value = transform(el.getRight());
                if (el.isGetter()) {
                    key.setType(com.google.javascript.rhino.Token.GETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (getFnParamNode(value).hasChildren()) {
                        reportGetterParam(el.getLeft());
                    }
                } else if (el.isSetter()) {
                    key.setType(com.google.javascript.rhino.Token.SETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (!getFnParamNode(value).hasOneChild()) {
                        reportSetterParam(el.getLeft());
                    }
                }
                key.addChildToFront(value);
                node.addChildToBack(key);
            }
            return node;
        }

        com.google.javascript.rhino.Node getFnParamNode(com.google.javascript.rhino.Node fnNode) {
            com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
            return fnNode.getFirstChild().getNext();
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.rhino.head.ast.ObjectProperty propertyNode) {
            return processInfixExpression(propertyNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.rhino.head.ast.ParenthesizedExpression exprNode) {
            com.google.javascript.rhino.Node node = transform(exprNode.getExpression());
            node.putProp(com.google.javascript.rhino.Node.PARENTHESIZED_PROP, java.lang.Boolean.TRUE);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.rhino.head.ast.PropertyGet getNode) {
            com.google.javascript.rhino.Node leftChild = transform(getNode.getTarget());
            com.google.javascript.rhino.Node newNode = newNode(com.google.javascript.rhino.Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));
            newNode.setLineno(leftChild.getLineno());
            newNode.setCharno(leftChild.getCharno());
            maybeSetLengthFrom(newNode, getNode);
            return newNode;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.rhino.head.ast.RegExpLiteral literalNode) {
            com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());
            literalStringNode.setLineno(literalNode.getLineno());
            maybeSetLengthFrom(literalStringNode, literalNode);
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.REGEXP, literalStringNode);
            java.lang.String flags = literalNode.getFlags();
            if ((flags != null) && (!flags.isEmpty())) {
                com.google.javascript.rhino.Node flagsNode = newStringNode(flags);
                flagsNode.setLineno(literalNode.getLineno());
                maybeSetLengthFrom(flagsNode, literalNode);
                node.addChildToBack(flagsNode);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.rhino.head.ast.ReturnStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.RETURN);
            if (statementNode.getReturnValue() != null) {
                node.addChildToBack(transform(statementNode.getReturnValue()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processScope(com.google.javascript.rhino.head.ast.Scope scopeNode) {
            return processGeneric(scopeNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.rhino.head.ast.StringLiteral literalNode) {
            java.lang.String value = literalNode.getValue();
            com.google.javascript.rhino.Node n = newStringNode(value);
            if (value.indexOf('\u000b') != (-1)) {
                int start = literalNode.getAbsolutePosition();
                int end = start + literalNode.getLength();
                if ((start < sourceString.length()) && (sourceString.substring(start, java.lang.Math.min(sourceString.length(), end)).indexOf("\\v") != (-1))) {
                    n.putBooleanProp(com.google.javascript.rhino.Node.SLASH_V, true);
                }
            }
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.rhino.head.ast.SwitchCase caseNode) {
            com.google.javascript.rhino.Node node;
            if (caseNode.isDefault()) {
                node = newNode(com.google.javascript.rhino.Token.DEFAULT_CASE);
            } else {
                com.google.javascript.rhino.head.ast.AstNode expr = caseNode.getExpression();
                node = newNode(com.google.javascript.rhino.Token.CASE, transform(expr));
            }
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            block.putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, true);
            block.setLineno(caseNode.getLineno());
            block.setCharno(position2charno(caseNode.getAbsolutePosition()));
            maybeSetLengthFrom(block, caseNode);
            if (caseNode.getStatements() != null) {
                for (com.google.javascript.rhino.head.ast.AstNode child : caseNode.getStatements()) {
                    block.addChildToBack(transform(child));
                }
            }
            node.addChildToBack(block);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.rhino.head.ast.SwitchStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SWITCH, transform(statementNode.getExpression()));
            for (com.google.javascript.rhino.head.ast.AstNode child : statementNode.getCases()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.rhino.head.ast.ThrowStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.THROW, transform(statementNode.getExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processTryStatement(com.google.javascript.rhino.head.ast.TryStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.TRY, transformBlock(statementNode.getTryBlock()));
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            boolean lineSet = false;
            for (com.google.javascript.rhino.head.ast.CatchClause cc : statementNode.getCatchClauses()) {
                if (lineSet == false) {
                    block.setLineno(cc.getLineno());
                    maybeSetLengthFrom(block, cc);
                    lineSet = true;
                }
                block.addChildToBack(transform(cc));
            }
            node.addChildToBack(block);
            com.google.javascript.rhino.head.ast.AstNode finallyBlock = statementNode.getFinallyBlock();
            if (finallyBlock != null) {
                node.addChildToBack(transformBlock(finallyBlock));
            }
            if ((lineSet == false) && (finallyBlock != null)) {
                block.setLineno(finallyBlock.getLineno());
                maybeSetLengthFrom(block, finallyBlock);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.rhino.head.ast.UnaryExpression exprNode) {
            int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());
            com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());
            if ((type == com.google.javascript.rhino.Token.NEG) && operand.isNumber()) {
                operand.setDouble(-operand.getDouble());
                return operand;
            } else {
                if ((type == com.google.javascript.rhino.Token.DELPROP) && (!((operand.isGetProp() || operand.isGetElem()) || operand.isName()))) {
                    java.lang.String msg = "Invalid delete operand. Only properties can be deleted.";
                    errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
                    if (!validAssignmentTarget(operand)) {
                        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? "invalid increment target" : "invalid decrement target";
                        errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                    }
                }
                com.google.javascript.rhino.Node node = newNode(type, operand);
                if (exprNode.isPostfix()) {
                    node.putBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP, true);
                }
                return node;
            }
        }

        private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {
            switch (target.getType()) {
                case com.google.javascript.rhino.Token.NAME :
                case com.google.javascript.rhino.Token.GETPROP :
                case com.google.javascript.rhino.Token.GETELEM :
                    return true;
            }
            return false;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration declarationNode) {
            if ((!config.acceptConstKeyword) && (declarationNode.getType() == com.google.javascript.rhino.head.Token.CONST)) {
                processIllegalToken(declarationNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.VAR);
            for (com.google.javascript.rhino.head.ast.VariableInitializer child : declarationNode.getVariables()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer initializerNode) {
            com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());
            if (initializerNode.getInitializer() != null) {
                com.google.javascript.rhino.Node initalizer = transform(initializerNode.getInitializer());
                node.addChildToBack(initalizer);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.rhino.head.ast.WhileLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWithStatement(com.google.javascript.rhino.head.ast.WithStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("Unsupported syntax: " + com.google.javascript.rhino.head.Token.typeToName(node.getType()), sourceName, node.getLineno(), "", 0);
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }

        void reportDestructuringAssign(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("destructuring assignment forbidden", sourceName, node.getLineno(), "", 0);
        }

        void reportGetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportSetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportGetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("getters may not have parameters", sourceName, node.getLineno(), "", 0);
        }

        void reportSetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("setters must have exactly one parameter", sourceName, node.getLineno(), "", 0);
        }
    }

    private static int transformTokenType(int token) {
        switch (token) {
            case com.google.javascript.rhino.head.Token.RETURN :
                return com.google.javascript.rhino.Token.RETURN;
            case com.google.javascript.rhino.head.Token.BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.head.Token.BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.head.Token.BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.head.Token.EQ :
                return com.google.javascript.rhino.Token.EQ;
            case com.google.javascript.rhino.head.Token.NE :
                return com.google.javascript.rhino.Token.NE;
            case com.google.javascript.rhino.head.Token.LT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.head.Token.LE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.head.Token.GT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.head.Token.GE :
                return com.google.javascript.rhino.Token.GE;
            case com.google.javascript.rhino.head.Token.LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.head.Token.RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.head.Token.URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.head.Token.ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.head.Token.SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.head.Token.MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.head.Token.DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.head.Token.MOD :
                return com.google.javascript.rhino.Token.MOD;
            case com.google.javascript.rhino.head.Token.NOT :
                return com.google.javascript.rhino.Token.NOT;
            case com.google.javascript.rhino.head.Token.BITNOT :
                return com.google.javascript.rhino.Token.BITNOT;
            case com.google.javascript.rhino.head.Token.POS :
                return com.google.javascript.rhino.Token.POS;
            case com.google.javascript.rhino.head.Token.NEG :
                return com.google.javascript.rhino.Token.NEG;
            case com.google.javascript.rhino.head.Token.NEW :
                return com.google.javascript.rhino.Token.NEW;
            case com.google.javascript.rhino.head.Token.DELPROP :
                return com.google.javascript.rhino.Token.DELPROP;
            case com.google.javascript.rhino.head.Token.TYPEOF :
                return com.google.javascript.rhino.Token.TYPEOF;
            case com.google.javascript.rhino.head.Token.GETPROP :
                return com.google.javascript.rhino.Token.GETPROP;
            case com.google.javascript.rhino.head.Token.GETELEM :
                return com.google.javascript.rhino.Token.GETELEM;
            case com.google.javascript.rhino.head.Token.CALL :
                return com.google.javascript.rhino.Token.CALL;
            case com.google.javascript.rhino.head.Token.NAME :
                return com.google.javascript.rhino.Token.NAME;
            case com.google.javascript.rhino.head.Token.NUMBER :
                return com.google.javascript.rhino.Token.NUMBER;
            case com.google.javascript.rhino.head.Token.STRING :
                return com.google.javascript.rhino.Token.STRING;
            case com.google.javascript.rhino.head.Token.NULL :
                return com.google.javascript.rhino.Token.NULL;
            case com.google.javascript.rhino.head.Token.THIS :
                return com.google.javascript.rhino.Token.THIS;
            case com.google.javascript.rhino.head.Token.FALSE :
                return com.google.javascript.rhino.Token.FALSE;
            case com.google.javascript.rhino.head.Token.TRUE :
                return com.google.javascript.rhino.Token.TRUE;
            case com.google.javascript.rhino.head.Token.SHEQ :
                return com.google.javascript.rhino.Token.SHEQ;
            case com.google.javascript.rhino.head.Token.SHNE :
                return com.google.javascript.rhino.Token.SHNE;
            case com.google.javascript.rhino.head.Token.REGEXP :
                return com.google.javascript.rhino.Token.REGEXP;
            case com.google.javascript.rhino.head.Token.THROW :
                return com.google.javascript.rhino.Token.THROW;
            case com.google.javascript.rhino.head.Token.IN :
                return com.google.javascript.rhino.Token.IN;
            case com.google.javascript.rhino.head.Token.INSTANCEOF :
                return com.google.javascript.rhino.Token.INSTANCEOF;
            case com.google.javascript.rhino.head.Token.ARRAYLIT :
                return com.google.javascript.rhino.Token.ARRAYLIT;
            case com.google.javascript.rhino.head.Token.OBJECTLIT :
                return com.google.javascript.rhino.Token.OBJECTLIT;
            case com.google.javascript.rhino.head.Token.TRY :
                return com.google.javascript.rhino.Token.TRY;
            case com.google.javascript.rhino.head.Token.LP :
                return com.google.javascript.rhino.Token.PARAM_LIST;
            case com.google.javascript.rhino.head.Token.COMMA :
                return com.google.javascript.rhino.Token.COMMA;
            case com.google.javascript.rhino.head.Token.ASSIGN :
                return com.google.javascript.rhino.Token.ASSIGN;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITXOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.ASSIGN_BITAND;
            case com.google.javascript.rhino.head.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.ASSIGN_LSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.ASSIGN_RSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.ASSIGN_URSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ASSIGN_ADD;
            case com.google.javascript.rhino.head.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.ASSIGN_SUB;
            case com.google.javascript.rhino.head.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.ASSIGN_MUL;
            case com.google.javascript.rhino.head.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.ASSIGN_DIV;
            case com.google.javascript.rhino.head.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.ASSIGN_MOD;
            case com.google.javascript.rhino.head.Token.HOOK :
                return com.google.javascript.rhino.Token.HOOK;
            case com.google.javascript.rhino.head.Token.OR :
                return com.google.javascript.rhino.Token.OR;
            case com.google.javascript.rhino.head.Token.AND :
                return com.google.javascript.rhino.Token.AND;
            case com.google.javascript.rhino.head.Token.INC :
                return com.google.javascript.rhino.Token.INC;
            case com.google.javascript.rhino.head.Token.DEC :
                return com.google.javascript.rhino.Token.DEC;
            case com.google.javascript.rhino.head.Token.FUNCTION :
                return com.google.javascript.rhino.Token.FUNCTION;
            case com.google.javascript.rhino.head.Token.IF :
                return com.google.javascript.rhino.Token.IF;
            case com.google.javascript.rhino.head.Token.SWITCH :
                return com.google.javascript.rhino.Token.SWITCH;
            case com.google.javascript.rhino.head.Token.CASE :
                return com.google.javascript.rhino.Token.CASE;
            case com.google.javascript.rhino.head.Token.DEFAULT :
                return com.google.javascript.rhino.Token.DEFAULT_CASE;
            case com.google.javascript.rhino.head.Token.WHILE :
                return com.google.javascript.rhino.Token.WHILE;
            case com.google.javascript.rhino.head.Token.DO :
                return com.google.javascript.rhino.Token.DO;
            case com.google.javascript.rhino.head.Token.FOR :
                return com.google.javascript.rhino.Token.FOR;
            case com.google.javascript.rhino.head.Token.BREAK :
                return com.google.javascript.rhino.Token.BREAK;
            case com.google.javascript.rhino.head.Token.CONTINUE :
                return com.google.javascript.rhino.Token.CONTINUE;
            case com.google.javascript.rhino.head.Token.VAR :
                return com.google.javascript.rhino.Token.VAR;
            case com.google.javascript.rhino.head.Token.WITH :
                return com.google.javascript.rhino.Token.WITH;
            case com.google.javascript.rhino.head.Token.CATCH :
                return com.google.javascript.rhino.Token.CATCH;
            case com.google.javascript.rhino.head.Token.VOID :
                return com.google.javascript.rhino.Token.VOID;
            case com.google.javascript.rhino.head.Token.EMPTY :
                return com.google.javascript.rhino.Token.EMPTY;
            case com.google.javascript.rhino.head.Token.BLOCK :
                return com.google.javascript.rhino.Token.BLOCK;
            case com.google.javascript.rhino.head.Token.LABEL :
                return com.google.javascript.rhino.Token.LABEL;
            case com.google.javascript.rhino.head.Token.EXPR_VOID :
            case com.google.javascript.rhino.head.Token.EXPR_RESULT :
                return com.google.javascript.rhino.Token.EXPR_RESULT;
            case com.google.javascript.rhino.head.Token.SCRIPT :
                return com.google.javascript.rhino.Token.SCRIPT;
            case com.google.javascript.rhino.head.Token.GET :
                return com.google.javascript.rhino.Token.GETTER_DEF;
            case com.google.javascript.rhino.head.Token.SET :
                return com.google.javascript.rhino.Token.SETTER_DEF;
            case com.google.javascript.rhino.head.Token.CONST :
                return com.google.javascript.rhino.Token.CONST;
            case com.google.javascript.rhino.head.Token.DEBUGGER :
                return com.google.javascript.rhino.Token.DEBUGGER;
        }
        throw new java.lang.IllegalStateException(java.lang.String.valueOf(token));
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1) {
        return new com.google.javascript.rhino.Node(type, child1).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2) {
        return new com.google.javascript.rhino.Node(type, child1, child2).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2, com.google.javascript.rhino.Node child3) {
        return new com.google.javascript.rhino.Node(type, child1, child2, child3).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String value) {
        return com.google.javascript.rhino.IR.string(value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(int type, java.lang.String value) {
        return com.google.javascript.rhino.Node.newString(type, value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNumberNode(java.lang.Double value) {
        return com.google.javascript.rhino.IR.number(value).clonePropsFrom(templateNode);
    }
}
[9392442] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659835091792
GPR[SSUN]-1659835091792
-1345859678
GPR[SPVATF]-1659835092038
GPR[EPVATF]-1659835093444
GPR[SPS]-1659835093444
[9394578] ERROR ConstraintModelBuilder - Unable to compile the change: 
class IRFactory {
    static final java.lang.String GETTER_ERROR_MESSAGE = "getters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SETTER_ERROR_MESSAGE = "setters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SUSPICIOUS_COMMENT_WARNING = "Non-JSDoc comment has annotations. " + "Did you mean to start it with '/**'?";

    private final java.lang.String sourceString;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.parsing.Config config;

    private final com.google.javascript.rhino.head.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher transformDispatcher;

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ALLOWED_DIRECTIVES = com.google.common.collect.ImmutableSet.of("use strict");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_STRICT_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield");

    private final java.util.Set<java.lang.String> reservedKeywords;

    private final java.util.Set<com.google.javascript.rhino.head.ast.Comment> parsedComments = com.google.common.collect.Sets.newHashSet();

    com.google.javascript.rhino.Node rootNodeJsDocHolder = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);

    com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = rootNodeJsDocHolder.getJsDocBuilderForNode();

    com.google.javascript.rhino.JSDocInfo fileOverviewInfo = null;

    private com.google.javascript.rhino.Node templateNode;

    private IRFactory(java.lang.String sourceString, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        this.sourceString = sourceString;
        this.sourceFile = sourceFile;
        this.sourceName = (sourceFile == null) ? null : sourceFile.getName();
        this.config = config;
        this.errorReporter = errorReporter;
        this.transformDispatcher = new com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher();
        this.templateNode = createTemplateNode();
        switch (config.languageMode) {
            case ECMASCRIPT3 :
                reservedKeywords = null;
                break;
            case ECMASCRIPT5 :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS;
                break;
            case ECMASCRIPT5_STRICT :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS;
                break;
            default :
                throw new java.lang.IllegalStateException("unknown language mode");
        }
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        templateNode.setStaticSourceFile(sourceFile);
        return templateNode;
    }

    public static com.google.javascript.rhino.Node transformTree(com.google.javascript.rhino.head.ast.AstRoot node, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, java.lang.String sourceString, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        com.google.javascript.jscomp.parsing.IRFactory irFactory = new com.google.javascript.jscomp.parsing.IRFactory(sourceString, sourceFile, config, errorReporter);
        com.google.javascript.rhino.Node irNode = irFactory.transform(node);
        if (node.getComments() != null) {
            for (com.google.javascript.rhino.head.ast.Comment comment : node.getComments()) {
                if ((comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.JSDOC) && (!irFactory.parsedComments.contains(comment))) {
                    irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
                } else if (comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.BLOCK_COMMENT) {
                    irFactory.handleBlockComment(comment);
                }
            }
        }
        irFactory.setFileOverviewJsDoc(irNode);
        return irNode;
    }

    private void setFileOverviewJsDoc(com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();
        if (rootNodeJsDoc != null) {
            irNode.setJSDocInfo(rootNodeJsDoc);
            rootNodeJsDoc.setAssociatedNode(irNode);
        }
        if (fileOverviewInfo != null) {
            if ((irNode.getJSDocInfo() != null) && (irNode.getJSDocInfo().getLicense() != null)) {
                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());
            }
            irNode.setJSDocInfo(fileOverviewInfo);
            fileOverviewInfo.setAssociatedNode(irNode);
        }
    }

    private com.google.javascript.rhino.Node transformBlock(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = transform(node);
        if (!irNode.isBlock()) {
            if (irNode.isEmpty()) {
                irNode.setType(com.google.javascript.rhino.Token.BLOCK);
                irNode.setWasEmptyNode(true);
            } else {
                com.google.javascript.rhino.Node newBlock = newNode(com.google.javascript.rhino.Token.BLOCK, irNode);
                newBlock.setLineno(irNode.getLineno());
                newBlock.setCharno(irNode.getCharno());
                maybeSetLengthFrom(newBlock, node);
                irNode = newBlock;
            }
        }
        return irNode;
    }

    private void handleBlockComment(com.google.javascript.rhino.head.ast.Comment comment) {
        java.lang.String value = comment.getValue();
        if ((value.indexOf("/* @") != (-1)) || (value.indexOf("\n * @") != (-1))) {
            errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), "", 0);
        }
    }

    private boolean handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser) {
        if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {
            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();
            return true;
        }
        return false;
    }

    private void handlePossibleFileOverviewJsDoc(com.google.javascript.rhino.head.ast.Comment comment, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
        parsedComments.add(comment);
        handlePossibleFileOverviewJsDoc(jsDocParser);
    }

    private com.google.javascript.rhino.JSDocInfo handleJsDoc(com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.head.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
            parsedComments.add(comment);
            if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {
                return jsDocParser.retrieveAndResetParsedJSDocInfo();
            }
        }
        return null;
    }

    private com.google.javascript.rhino.Node transform(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNameAsString(com.google.javascript.rhino.head.ast.Name node) {
        com.google.javascript.rhino.Node irNode = transformDispatcher.processName(node, true);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
        com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, literalNode);
        return irNode;
    }

    private static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    private void setSourceInfo(com.google.javascript.rhino.Node irNode, com.google.javascript.rhino.head.ast.AstNode node) {
        if (irNode.getLineno() == (-1)) {
            int lineno = node.getLineno();
            irNode.setLineno(lineno);
            int charno = position2charno(node.getAbsolutePosition());
            irNode.setCharno(charno);
            maybeSetLengthFrom(irNode, node);
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser createJsDocInfoParser(com.google.javascript.rhino.head.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsdocParser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
        jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);
        jsdocParser.parse();
        return jsdocParser;
    }

    private void maybeSetLengthFrom(com.google.javascript.rhino.Node node, com.google.javascript.rhino.head.ast.AstNode source) {
        if (config.isIdeMode) {
            node.setLength(source.getLength());
        }
    }

    private int position2charno(int position) {
        int lineIndex = sourceString.lastIndexOf('\n', position);
        if (lineIndex == (-1)) {
            return position;
        } else {
            return (position - lineIndex) - 1;
        }
    }

    private com.google.javascript.rhino.Node justTransform(com.google.javascript.rhino.head.ast.AstNode node) {
        return transformDispatcher.process(node);
    }

    private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node processGeneric(com.google.javascript.rhino.head.Node n) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));
            for (com.google.javascript.rhino.head.Node child : n) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            return node;
        }

        private com.google.javascript.rhino.Node transformAsString(com.google.javascript.rhino.head.ast.AstNode n) {
            com.google.javascript.rhino.Node ret;
            if (n instanceof com.google.javascript.rhino.head.ast.Name) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(315).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceString",com.google.javascript.jscomp.parsing.IRFactory.this.sourceString);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher",com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo",com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile",com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter",com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder",com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords",com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.templateNode",com.google.javascript.jscomp.parsing.IRFactory.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.config",com.google.javascript.jscomp.parsing.IRFactory.this.config);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments",com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceName",com.google.javascript.jscomp.parsing.IRFactory.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(315).collectionEnds();
                }
                if (runtimeAngelicValue)
                    ret = transformNameAsString(((com.google.javascript.rhino.head.ast.Name) (n)));

            } else if (n instanceof com.google.javascript.rhino.head.ast.NumberLiteral) {
                ret = transformNumberAsString(((com.google.javascript.rhino.head.ast.NumberLiteral) (n)));
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            } else {
                ret = transform(n);
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            }
            com.google.common.base.Preconditions.checkState(ret.isString());
            return ret;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.rhino.head.ast.ArrayLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.ARRAYLIT);
            for (com.google.javascript.rhino.head.ast.AstNode child : literalNode.getElements()) {
                com.google.javascript.rhino.Node c = transform(child);
                node.addChildToBack(c);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAssignment(com.google.javascript.rhino.head.ast.Assignment assignmentNode) {
            com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);
            com.google.javascript.rhino.Node target = assign.getFirstChild();
            if (!validAssignmentTarget(target)) {
                errorReporter.error("invalid assignment target", sourceName, target.getLineno(), "", 0);
            }
            return assign;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAstRoot(com.google.javascript.rhino.head.ast.AstRoot rootNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SCRIPT);
            for (com.google.javascript.rhino.head.Node child : rootNode) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            parseDirectives(node);
            return node;
        }

        private void parseDirectives(com.google.javascript.rhino.Node node) {
            java.util.Set<java.lang.String> directives = null;
            while (isDirective(node.getFirstChild())) {
                java.lang.String directive = node.removeFirstChild().getFirstChild().getString();
                if (directives == null) {
                    directives = com.google.common.collect.Sets.newHashSet(directive);
                } else {
                    directives.add(directive);
                }
            } 
            if (directives != null) {
                node.setDirectives(directives);
            }
        }

        private boolean isDirective(com.google.javascript.rhino.Node n) {
            if (n == null) {
                return false;
            }
            int nType = n.getType();
            return ((nType == com.google.javascript.rhino.Token.EXPR_RESULT) && n.getFirstChild().isString()) && com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBlock(com.google.javascript.rhino.head.ast.Block blockNode) {
            return processGeneric(blockNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.rhino.head.ast.BreakStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.BREAK);
            if (statementNode.getBreakLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processCatchClause(com.google.javascript.rhino.head.ast.CatchClause clauseNode) {
            com.google.javascript.rhino.head.ast.AstNode catchVar = clauseNode.getVarName();
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CATCH, transform(catchVar));
            if (clauseNode.getCatchCondition() != null) {
                errorReporter.error("Catch clauses are not supported", sourceName, clauseNode.getCatchCondition().getLineno(), "", 0);
            }
            node.addChildToBack(transformBlock(clauseNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.rhino.head.ast.ConditionalExpression exprNode) {
            return newNode(com.google.javascript.rhino.Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.rhino.head.ast.ContinueStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CONTINUE);
            if (statementNode.getLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processDoLoop(com.google.javascript.rhino.head.ast.DoLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processElementGet(com.google.javascript.rhino.head.ast.ElementGet getNode) {
            return newNode(com.google.javascript.rhino.Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.rhino.head.ast.EmptyExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyStatement(com.google.javascript.rhino.head.ast.EmptyStatement exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));
            node.addChildToBack(transform(statementNode.getExpression()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForInLoop(com.google.javascript.rhino.head.ast.ForInLoop loopNode) {
            if (loopNode.isForEach()) {
                errorReporter.error("unsupported language extension: for each", sourceName, loopNode.getLineno(), "", 0);
                return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
            }
            return newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForLoop(com.google.javascript.rhino.head.ast.ForLoop loopNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));
            node.addChildToBack(transformBlock(loopNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.rhino.head.ast.FunctionCall callNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : callNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(node.getFirstChild().getLineno());
            node.setCharno(node.getFirstChild().getCharno());
            maybeSetLengthFrom(node, callNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode functionNode) {
            com.google.javascript.rhino.head.ast.Name name = functionNode.getFunctionName();
            java.lang.Boolean isUnnamedFunction = false;
            if (name == null) {
                int functionType = functionNode.getFunctionType();
                if (functionType != com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_EXPRESSION) {
                    errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
                    return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
                }
                name = new com.google.javascript.rhino.head.ast.Name();
                name.setIdentifier("");
                isUnnamedFunction = true;
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FUNCTION);
            com.google.javascript.rhino.Node newName = transform(name);
            if (isUnnamedFunction) {
                newName.setLineno(functionNode.getLineno());
                int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
                newName.setCharno(position2charno(lpColumn));
                maybeSetLengthFrom(newName, name);
            }
            node.addChildToBack(newName);
            com.google.javascript.rhino.Node lp = newNode(com.google.javascript.rhino.Token.PARAM_LIST);
            com.google.javascript.rhino.head.ast.Name fnName = functionNode.getFunctionName();
            if (fnName != null) {
                lp.setLineno(fnName.getLineno());
            } else {
                lp.setLineno(functionNode.getLineno());
            }
            int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
            lp.setCharno(position2charno(lparenCharno));
            for (com.google.javascript.rhino.head.ast.AstNode param : functionNode.getParams()) {
                com.google.javascript.rhino.Node paramNode = transform(param);
                if (paramNode.isName()) {
                    lp.addChildToBack(paramNode);
                } else {
                    com.google.common.base.Preconditions.checkState((config.isIdeMode || paramNode.isObjectLit()) || paramNode.isArrayLit());
                }
            }
            node.addChildToBack(lp);
            com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());
            if (!bodyNode.isBlock()) {
                com.google.common.base.Preconditions.checkState(config.isIdeMode);
                bodyNode = com.google.javascript.rhino.IR.block();
            }
            parseDirectives(bodyNode);
            node.addChildToBack(bodyNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIfStatement(com.google.javascript.rhino.head.ast.IfStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.IF);
            node.addChildToBack(transform(statementNode.getCondition()));
            node.addChildToBack(transformBlock(statementNode.getThenPart()));
            if (statementNode.getElsePart() != null) {
                node.addChildToBack(transformBlock(statementNode.getElsePart()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression exprNode) {
            com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));
            n.setLineno(exprNode.getLineno());
            n.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(n, exprNode);
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.rhino.head.ast.KeywordLiteral literalNode) {
            return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabel(com.google.javascript.rhino.head.ast.Label labelNode) {
            return newStringNode(com.google.javascript.rhino.Token.LABEL_NAME, labelNode.getName());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.rhino.head.ast.LabeledStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.LABEL);
            com.google.javascript.rhino.Node prev = null;
            com.google.javascript.rhino.Node cur = node;
            for (com.google.javascript.rhino.head.ast.Label label : statementNode.getLabels()) {
                if (prev != null) {
                    prev.addChildToBack(cur);
                }
                cur.addChildToBack(transform(label));
                cur.setLineno(label.getLineno());
                maybeSetLengthFrom(cur, label);
                int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());
                cur.setCharno(clauseAbsolutePosition);
                prev = cur;
                cur = newNode(com.google.javascript.rhino.Token.LABEL);
            }
            prev.addChildToBack(transform(statementNode.getStatement()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode) {
            return processName(nameNode, false);
        }

        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode, boolean asString) {
            if (asString) {
                return newStringNode(com.google.javascript.rhino.Token.STRING, nameNode.getIdentifier());
            } else {
                if (isReservedKeyword(nameNode.getIdentifier())) {
                    errorReporter.error("identifier is a reserved word", sourceName, nameNode.getLineno(), "", 0);
                }
                return newStringNode(com.google.javascript.rhino.Token.NAME, nameNode.getIdentifier());
            }
        }

        private boolean isReservedKeyword(java.lang.String identifier) {
            return (reservedKeywords != null) && reservedKeywords.contains(identifier);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNewExpression(com.google.javascript.rhino.head.ast.NewExpression exprNode) {
            return processFunctionCall(exprNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
            return newNumberNode(literalNode.getNumber());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.rhino.head.ast.ObjectLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.OBJECTLIT);
            for (com.google.javascript.rhino.head.ast.ObjectProperty el : literalNode.getElements()) {
                if (config.languageMode == com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3) {
                    if (el.isGetter()) {
                        reportGetter(el);
                        continue;
                    } else if (el.isSetter()) {
                        reportSetter(el);
                        continue;
                    }
                }
                com.google.javascript.rhino.Node key = transformAsString(el.getLeft());
                key.setType(com.google.javascript.rhino.Token.STRING_KEY);
                com.google.javascript.rhino.Node value = transform(el.getRight());
                if (el.isGetter()) {
                    key.setType(com.google.javascript.rhino.Token.GETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (getFnParamNode(value).hasChildren()) {
                        reportGetterParam(el.getLeft());
                    }
                } else if (el.isSetter()) {
                    key.setType(com.google.javascript.rhino.Token.SETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (!getFnParamNode(value).hasOneChild()) {
                        reportSetterParam(el.getLeft());
                    }
                }
                key.addChildToFront(value);
                node.addChildToBack(key);
            }
            return node;
        }

        com.google.javascript.rhino.Node getFnParamNode(com.google.javascript.rhino.Node fnNode) {
            com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
            return fnNode.getFirstChild().getNext();
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.rhino.head.ast.ObjectProperty propertyNode) {
            return processInfixExpression(propertyNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.rhino.head.ast.ParenthesizedExpression exprNode) {
            com.google.javascript.rhino.Node node = transform(exprNode.getExpression());
            node.putProp(com.google.javascript.rhino.Node.PARENTHESIZED_PROP, java.lang.Boolean.TRUE);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.rhino.head.ast.PropertyGet getNode) {
            com.google.javascript.rhino.Node leftChild = transform(getNode.getTarget());
            com.google.javascript.rhino.Node newNode = newNode(com.google.javascript.rhino.Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));
            newNode.setLineno(leftChild.getLineno());
            newNode.setCharno(leftChild.getCharno());
            maybeSetLengthFrom(newNode, getNode);
            return newNode;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.rhino.head.ast.RegExpLiteral literalNode) {
            com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());
            literalStringNode.setLineno(literalNode.getLineno());
            maybeSetLengthFrom(literalStringNode, literalNode);
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.REGEXP, literalStringNode);
            java.lang.String flags = literalNode.getFlags();
            if ((flags != null) && (!flags.isEmpty())) {
                com.google.javascript.rhino.Node flagsNode = newStringNode(flags);
                flagsNode.setLineno(literalNode.getLineno());
                maybeSetLengthFrom(flagsNode, literalNode);
                node.addChildToBack(flagsNode);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.rhino.head.ast.ReturnStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.RETURN);
            if (statementNode.getReturnValue() != null) {
                node.addChildToBack(transform(statementNode.getReturnValue()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processScope(com.google.javascript.rhino.head.ast.Scope scopeNode) {
            return processGeneric(scopeNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.rhino.head.ast.StringLiteral literalNode) {
            java.lang.String value = literalNode.getValue();
            com.google.javascript.rhino.Node n = newStringNode(value);
            if (value.indexOf('\u000b') != (-1)) {
                int start = literalNode.getAbsolutePosition();
                int end = start + literalNode.getLength();
                if ((start < sourceString.length()) && (sourceString.substring(start, java.lang.Math.min(sourceString.length(), end)).indexOf("\\v") != (-1))) {
                    n.putBooleanProp(com.google.javascript.rhino.Node.SLASH_V, true);
                }
            }
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.rhino.head.ast.SwitchCase caseNode) {
            com.google.javascript.rhino.Node node;
            if (caseNode.isDefault()) {
                node = newNode(com.google.javascript.rhino.Token.DEFAULT_CASE);
            } else {
                com.google.javascript.rhino.head.ast.AstNode expr = caseNode.getExpression();
                node = newNode(com.google.javascript.rhino.Token.CASE, transform(expr));
            }
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            block.putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, true);
            block.setLineno(caseNode.getLineno());
            block.setCharno(position2charno(caseNode.getAbsolutePosition()));
            maybeSetLengthFrom(block, caseNode);
            if (caseNode.getStatements() != null) {
                for (com.google.javascript.rhino.head.ast.AstNode child : caseNode.getStatements()) {
                    block.addChildToBack(transform(child));
                }
            }
            node.addChildToBack(block);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.rhino.head.ast.SwitchStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SWITCH, transform(statementNode.getExpression()));
            for (com.google.javascript.rhino.head.ast.AstNode child : statementNode.getCases()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.rhino.head.ast.ThrowStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.THROW, transform(statementNode.getExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processTryStatement(com.google.javascript.rhino.head.ast.TryStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.TRY, transformBlock(statementNode.getTryBlock()));
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            boolean lineSet = false;
            for (com.google.javascript.rhino.head.ast.CatchClause cc : statementNode.getCatchClauses()) {
                if (lineSet == false) {
                    block.setLineno(cc.getLineno());
                    maybeSetLengthFrom(block, cc);
                    lineSet = true;
                }
                block.addChildToBack(transform(cc));
            }
            node.addChildToBack(block);
            com.google.javascript.rhino.head.ast.AstNode finallyBlock = statementNode.getFinallyBlock();
            if (finallyBlock != null) {
                node.addChildToBack(transformBlock(finallyBlock));
            }
            if ((lineSet == false) && (finallyBlock != null)) {
                block.setLineno(finallyBlock.getLineno());
                maybeSetLengthFrom(block, finallyBlock);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.rhino.head.ast.UnaryExpression exprNode) {
            int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());
            com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());
            if ((type == com.google.javascript.rhino.Token.NEG) && operand.isNumber()) {
                operand.setDouble(-operand.getDouble());
                return operand;
            } else {
                if ((type == com.google.javascript.rhino.Token.DELPROP) && (!((operand.isGetProp() || operand.isGetElem()) || operand.isName()))) {
                    java.lang.String msg = "Invalid delete operand. Only properties can be deleted.";
                    errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
                    if (!validAssignmentTarget(operand)) {
                        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? "invalid increment target" : "invalid decrement target";
                        errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                    }
                }
                com.google.javascript.rhino.Node node = newNode(type, operand);
                if (exprNode.isPostfix()) {
                    node.putBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP, true);
                }
                return node;
            }
        }

        private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {
            switch (target.getType()) {
                case com.google.javascript.rhino.Token.NAME :
                case com.google.javascript.rhino.Token.GETPROP :
                case com.google.javascript.rhino.Token.GETELEM :
                    return true;
            }
            return false;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration declarationNode) {
            if ((!config.acceptConstKeyword) && (declarationNode.getType() == com.google.javascript.rhino.head.Token.CONST)) {
                processIllegalToken(declarationNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.VAR);
            for (com.google.javascript.rhino.head.ast.VariableInitializer child : declarationNode.getVariables()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer initializerNode) {
            com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());
            if (initializerNode.getInitializer() != null) {
                com.google.javascript.rhino.Node initalizer = transform(initializerNode.getInitializer());
                node.addChildToBack(initalizer);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.rhino.head.ast.WhileLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWithStatement(com.google.javascript.rhino.head.ast.WithStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("Unsupported syntax: " + com.google.javascript.rhino.head.Token.typeToName(node.getType()), sourceName, node.getLineno(), "", 0);
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }

        void reportDestructuringAssign(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("destructuring assignment forbidden", sourceName, node.getLineno(), "", 0);
        }

        void reportGetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportSetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportGetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("getters may not have parameters", sourceName, node.getLineno(), "", 0);
        }

        void reportSetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("setters must have exactly one parameter", sourceName, node.getLineno(), "", 0);
        }
    }

    private static int transformTokenType(int token) {
        switch (token) {
            case com.google.javascript.rhino.head.Token.RETURN :
                return com.google.javascript.rhino.Token.RETURN;
            case com.google.javascript.rhino.head.Token.BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.head.Token.BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.head.Token.BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.head.Token.EQ :
                return com.google.javascript.rhino.Token.EQ;
            case com.google.javascript.rhino.head.Token.NE :
                return com.google.javascript.rhino.Token.NE;
            case com.google.javascript.rhino.head.Token.LT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.head.Token.LE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.head.Token.GT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.head.Token.GE :
                return com.google.javascript.rhino.Token.GE;
            case com.google.javascript.rhino.head.Token.LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.head.Token.RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.head.Token.URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.head.Token.ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.head.Token.SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.head.Token.MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.head.Token.DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.head.Token.MOD :
                return com.google.javascript.rhino.Token.MOD;
            case com.google.javascript.rhino.head.Token.NOT :
                return com.google.javascript.rhino.Token.NOT;
            case com.google.javascript.rhino.head.Token.BITNOT :
                return com.google.javascript.rhino.Token.BITNOT;
            case com.google.javascript.rhino.head.Token.POS :
                return com.google.javascript.rhino.Token.POS;
            case com.google.javascript.rhino.head.Token.NEG :
                return com.google.javascript.rhino.Token.NEG;
            case com.google.javascript.rhino.head.Token.NEW :
                return com.google.javascript.rhino.Token.NEW;
            case com.google.javascript.rhino.head.Token.DELPROP :
                return com.google.javascript.rhino.Token.DELPROP;
            case com.google.javascript.rhino.head.Token.TYPEOF :
                return com.google.javascript.rhino.Token.TYPEOF;
            case com.google.javascript.rhino.head.Token.GETPROP :
                return com.google.javascript.rhino.Token.GETPROP;
            case com.google.javascript.rhino.head.Token.GETELEM :
                return com.google.javascript.rhino.Token.GETELEM;
            case com.google.javascript.rhino.head.Token.CALL :
                return com.google.javascript.rhino.Token.CALL;
            case com.google.javascript.rhino.head.Token.NAME :
                return com.google.javascript.rhino.Token.NAME;
            case com.google.javascript.rhino.head.Token.NUMBER :
                return com.google.javascript.rhino.Token.NUMBER;
            case com.google.javascript.rhino.head.Token.STRING :
                return com.google.javascript.rhino.Token.STRING;
            case com.google.javascript.rhino.head.Token.NULL :
                return com.google.javascript.rhino.Token.NULL;
            case com.google.javascript.rhino.head.Token.THIS :
                return com.google.javascript.rhino.Token.THIS;
            case com.google.javascript.rhino.head.Token.FALSE :
                return com.google.javascript.rhino.Token.FALSE;
            case com.google.javascript.rhino.head.Token.TRUE :
                return com.google.javascript.rhino.Token.TRUE;
            case com.google.javascript.rhino.head.Token.SHEQ :
                return com.google.javascript.rhino.Token.SHEQ;
            case com.google.javascript.rhino.head.Token.SHNE :
                return com.google.javascript.rhino.Token.SHNE;
            case com.google.javascript.rhino.head.Token.REGEXP :
                return com.google.javascript.rhino.Token.REGEXP;
            case com.google.javascript.rhino.head.Token.THROW :
                return com.google.javascript.rhino.Token.THROW;
            case com.google.javascript.rhino.head.Token.IN :
                return com.google.javascript.rhino.Token.IN;
            case com.google.javascript.rhino.head.Token.INSTANCEOF :
                return com.google.javascript.rhino.Token.INSTANCEOF;
            case com.google.javascript.rhino.head.Token.ARRAYLIT :
                return com.google.javascript.rhino.Token.ARRAYLIT;
            case com.google.javascript.rhino.head.Token.OBJECTLIT :
                return com.google.javascript.rhino.Token.OBJECTLIT;
            case com.google.javascript.rhino.head.Token.TRY :
                return com.google.javascript.rhino.Token.TRY;
            case com.google.javascript.rhino.head.Token.LP :
                return com.google.javascript.rhino.Token.PARAM_LIST;
            case com.google.javascript.rhino.head.Token.COMMA :
                return com.google.javascript.rhino.Token.COMMA;
            case com.google.javascript.rhino.head.Token.ASSIGN :
                return com.google.javascript.rhino.Token.ASSIGN;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITXOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.ASSIGN_BITAND;
            case com.google.javascript.rhino.head.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.ASSIGN_LSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.ASSIGN_RSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.ASSIGN_URSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ASSIGN_ADD;
            case com.google.javascript.rhino.head.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.ASSIGN_SUB;
            case com.google.javascript.rhino.head.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.ASSIGN_MUL;
            case com.google.javascript.rhino.head.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.ASSIGN_DIV;
            case com.google.javascript.rhino.head.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.ASSIGN_MOD;
            case com.google.javascript.rhino.head.Token.HOOK :
                return com.google.javascript.rhino.Token.HOOK;
            case com.google.javascript.rhino.head.Token.OR :
                return com.google.javascript.rhino.Token.OR;
            case com.google.javascript.rhino.head.Token.AND :
                return com.google.javascript.rhino.Token.AND;
            case com.google.javascript.rhino.head.Token.INC :
                return com.google.javascript.rhino.Token.INC;
            case com.google.javascript.rhino.head.Token.DEC :
                return com.google.javascript.rhino.Token.DEC;
            case com.google.javascript.rhino.head.Token.FUNCTION :
                return com.google.javascript.rhino.Token.FUNCTION;
            case com.google.javascript.rhino.head.Token.IF :
                return com.google.javascript.rhino.Token.IF;
            case com.google.javascript.rhino.head.Token.SWITCH :
                return com.google.javascript.rhino.Token.SWITCH;
            case com.google.javascript.rhino.head.Token.CASE :
                return com.google.javascript.rhino.Token.CASE;
            case com.google.javascript.rhino.head.Token.DEFAULT :
                return com.google.javascript.rhino.Token.DEFAULT_CASE;
            case com.google.javascript.rhino.head.Token.WHILE :
                return com.google.javascript.rhino.Token.WHILE;
            case com.google.javascript.rhino.head.Token.DO :
                return com.google.javascript.rhino.Token.DO;
            case com.google.javascript.rhino.head.Token.FOR :
                return com.google.javascript.rhino.Token.FOR;
            case com.google.javascript.rhino.head.Token.BREAK :
                return com.google.javascript.rhino.Token.BREAK;
            case com.google.javascript.rhino.head.Token.CONTINUE :
                return com.google.javascript.rhino.Token.CONTINUE;
            case com.google.javascript.rhino.head.Token.VAR :
                return com.google.javascript.rhino.Token.VAR;
            case com.google.javascript.rhino.head.Token.WITH :
                return com.google.javascript.rhino.Token.WITH;
            case com.google.javascript.rhino.head.Token.CATCH :
                return com.google.javascript.rhino.Token.CATCH;
            case com.google.javascript.rhino.head.Token.VOID :
                return com.google.javascript.rhino.Token.VOID;
            case com.google.javascript.rhino.head.Token.EMPTY :
                return com.google.javascript.rhino.Token.EMPTY;
            case com.google.javascript.rhino.head.Token.BLOCK :
                return com.google.javascript.rhino.Token.BLOCK;
            case com.google.javascript.rhino.head.Token.LABEL :
                return com.google.javascript.rhino.Token.LABEL;
            case com.google.javascript.rhino.head.Token.EXPR_VOID :
            case com.google.javascript.rhino.head.Token.EXPR_RESULT :
                return com.google.javascript.rhino.Token.EXPR_RESULT;
            case com.google.javascript.rhino.head.Token.SCRIPT :
                return com.google.javascript.rhino.Token.SCRIPT;
            case com.google.javascript.rhino.head.Token.GET :
                return com.google.javascript.rhino.Token.GETTER_DEF;
            case com.google.javascript.rhino.head.Token.SET :
                return com.google.javascript.rhino.Token.SETTER_DEF;
            case com.google.javascript.rhino.head.Token.CONST :
                return com.google.javascript.rhino.Token.CONST;
            case com.google.javascript.rhino.head.Token.DEBUGGER :
                return com.google.javascript.rhino.Token.DEBUGGER;
        }
        throw new java.lang.IllegalStateException(java.lang.String.valueOf(token));
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1) {
        return new com.google.javascript.rhino.Node(type, child1).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2) {
        return new com.google.javascript.rhino.Node(type, child1, child2).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2, com.google.javascript.rhino.Node child3) {
        return new com.google.javascript.rhino.Node(type, child1, child2, child3).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String value) {
        return com.google.javascript.rhino.IR.string(value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(int type, java.lang.String value) {
        return com.google.javascript.rhino.Node.newString(type, value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNumberNode(java.lang.Double value) {
        return com.google.javascript.rhino.IR.number(value).clonePropsFrom(templateNode);
    }
}
[9394579] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659835093929
GPR[SSUN]-1659835093929
-1345859678
GPR[ESUN]-1659835094174
GPR[SSUN]-1659835094174
-1345859678
GPR[SPVATF]-1659835094419
GPR[EPVATF]-1659835095913
GPR[SPS]-1659835095913
[9397215] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:420.
GPR[EPS]-1659835096566
GPR[ESUN]-1659835096566
GPR[SSUN]-1659835096566
-1345859678
GPR[SPVATF]-1659835096811
GPR[EPVATF]-1659835098243
GPR[SPS]-1659835098243
[9399363] ERROR ConstraintModelBuilder - Unable to compile the change: 
class IRFactory {
    static final java.lang.String GETTER_ERROR_MESSAGE = "getters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SETTER_ERROR_MESSAGE = "setters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SUSPICIOUS_COMMENT_WARNING = "Non-JSDoc comment has annotations. " + "Did you mean to start it with '/**'?";

    private final java.lang.String sourceString;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.parsing.Config config;

    private final com.google.javascript.rhino.head.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher transformDispatcher;

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ALLOWED_DIRECTIVES = com.google.common.collect.ImmutableSet.of("use strict");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_STRICT_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield");

    private final java.util.Set<java.lang.String> reservedKeywords;

    private final java.util.Set<com.google.javascript.rhino.head.ast.Comment> parsedComments = com.google.common.collect.Sets.newHashSet();

    com.google.javascript.rhino.Node rootNodeJsDocHolder = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);

    com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = rootNodeJsDocHolder.getJsDocBuilderForNode();

    com.google.javascript.rhino.JSDocInfo fileOverviewInfo = null;

    private com.google.javascript.rhino.Node templateNode;

    private IRFactory(java.lang.String sourceString, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        this.sourceString = sourceString;
        this.sourceFile = sourceFile;
        this.sourceName = (sourceFile == null) ? null : sourceFile.getName();
        this.config = config;
        this.errorReporter = errorReporter;
        this.transformDispatcher = new com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher();
        this.templateNode = createTemplateNode();
        switch (config.languageMode) {
            case ECMASCRIPT3 :
                reservedKeywords = null;
                break;
            case ECMASCRIPT5 :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS;
                break;
            case ECMASCRIPT5_STRICT :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS;
                break;
            default :
                throw new java.lang.IllegalStateException("unknown language mode");
        }
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        templateNode.setStaticSourceFile(sourceFile);
        return templateNode;
    }

    public static com.google.javascript.rhino.Node transformTree(com.google.javascript.rhino.head.ast.AstRoot node, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, java.lang.String sourceString, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        com.google.javascript.jscomp.parsing.IRFactory irFactory = new com.google.javascript.jscomp.parsing.IRFactory(sourceString, sourceFile, config, errorReporter);
        com.google.javascript.rhino.Node irNode = irFactory.transform(node);
        if (node.getComments() != null) {
            for (com.google.javascript.rhino.head.ast.Comment comment : node.getComments()) {
                if ((comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.JSDOC) && (!irFactory.parsedComments.contains(comment))) {
                    irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
                } else if (comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.BLOCK_COMMENT) {
                    irFactory.handleBlockComment(comment);
                }
            }
        }
        irFactory.setFileOverviewJsDoc(irNode);
        return irNode;
    }

    private void setFileOverviewJsDoc(com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();
        if (rootNodeJsDoc != null) {
            irNode.setJSDocInfo(rootNodeJsDoc);
            rootNodeJsDoc.setAssociatedNode(irNode);
        }
        if (fileOverviewInfo != null) {
            if ((irNode.getJSDocInfo() != null) && (irNode.getJSDocInfo().getLicense() != null)) {
                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());
            }
            irNode.setJSDocInfo(fileOverviewInfo);
            fileOverviewInfo.setAssociatedNode(irNode);
        }
    }

    private com.google.javascript.rhino.Node transformBlock(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = transform(node);
        if (!irNode.isBlock()) {
            if (irNode.isEmpty()) {
                irNode.setType(com.google.javascript.rhino.Token.BLOCK);
                irNode.setWasEmptyNode(true);
            } else {
                com.google.javascript.rhino.Node newBlock = newNode(com.google.javascript.rhino.Token.BLOCK, irNode);
                newBlock.setLineno(irNode.getLineno());
                newBlock.setCharno(irNode.getCharno());
                maybeSetLengthFrom(newBlock, node);
                irNode = newBlock;
            }
        }
        return irNode;
    }

    private void handleBlockComment(com.google.javascript.rhino.head.ast.Comment comment) {
        java.lang.String value = comment.getValue();
        if ((value.indexOf("/* @") != (-1)) || (value.indexOf("\n * @") != (-1))) {
            errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), "", 0);
        }
    }

    private boolean handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser) {
        if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {
            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();
            return true;
        }
        return false;
    }

    private void handlePossibleFileOverviewJsDoc(com.google.javascript.rhino.head.ast.Comment comment, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
        parsedComments.add(comment);
        handlePossibleFileOverviewJsDoc(jsDocParser);
    }

    private com.google.javascript.rhino.JSDocInfo handleJsDoc(com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.head.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
            parsedComments.add(comment);
            if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {
                return jsDocParser.retrieveAndResetParsedJSDocInfo();
            }
        }
        return null;
    }

    private com.google.javascript.rhino.Node transform(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNameAsString(com.google.javascript.rhino.head.ast.Name node) {
        com.google.javascript.rhino.Node irNode = transformDispatcher.processName(node, true);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
        com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, literalNode);
        return irNode;
    }

    private static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    private void setSourceInfo(com.google.javascript.rhino.Node irNode, com.google.javascript.rhino.head.ast.AstNode node) {
        if (irNode.getLineno() == (-1)) {
            int lineno = node.getLineno();
            irNode.setLineno(lineno);
            int charno = position2charno(node.getAbsolutePosition());
            irNode.setCharno(charno);
            maybeSetLengthFrom(irNode, node);
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser createJsDocInfoParser(com.google.javascript.rhino.head.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsdocParser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
        jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);
        jsdocParser.parse();
        return jsdocParser;
    }

    private void maybeSetLengthFrom(com.google.javascript.rhino.Node node, com.google.javascript.rhino.head.ast.AstNode source) {
        if (config.isIdeMode) {
            node.setLength(source.getLength());
        }
    }

    private int position2charno(int position) {
        int lineIndex = sourceString.lastIndexOf('\n', position);
        if (lineIndex == (-1)) {
            return position;
        } else {
            return (position - lineIndex) - 1;
        }
    }

    private com.google.javascript.rhino.Node justTransform(com.google.javascript.rhino.head.ast.AstNode node) {
        return transformDispatcher.process(node);
    }

    private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node processGeneric(com.google.javascript.rhino.head.Node n) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));
            for (com.google.javascript.rhino.head.Node child : n) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            return node;
        }

        private com.google.javascript.rhino.Node transformAsString(com.google.javascript.rhino.head.ast.AstNode n) {
            com.google.javascript.rhino.Node ret;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(317).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceString",com.google.javascript.jscomp.parsing.IRFactory.this.sourceString);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher",com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo",com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("n instanceof com.google.javascript.rhino.head.ast.Name",n instanceof com.google.javascript.rhino.head.ast.Name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile",com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter",com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder",com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords",com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.templateNode",com.google.javascript.jscomp.parsing.IRFactory.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.config",com.google.javascript.jscomp.parsing.IRFactory.this.config);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments",com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceName",com.google.javascript.jscomp.parsing.IRFactory.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(317).collectionEnds();
            }
            if (runtimeAngelicValue) if (n instanceof com.google.javascript.rhino.head.ast.Name) {
                ret = transformNameAsString(((com.google.javascript.rhino.head.ast.Name) (n)));
            } else if (n instanceof com.google.javascript.rhino.head.ast.NumberLiteral) {
                ret = transformNumberAsString(((com.google.javascript.rhino.head.ast.NumberLiteral) (n)));
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            } else {
                ret = transform(n);
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            }
            com.google.common.base.Preconditions.checkState(ret.isString());
            return ret;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.rhino.head.ast.ArrayLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.ARRAYLIT);
            for (com.google.javascript.rhino.head.ast.AstNode child : literalNode.getElements()) {
                com.google.javascript.rhino.Node c = transform(child);
                node.addChildToBack(c);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAssignment(com.google.javascript.rhino.head.ast.Assignment assignmentNode) {
            com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);
            com.google.javascript.rhino.Node target = assign.getFirstChild();
            if (!validAssignmentTarget(target)) {
                errorReporter.error("invalid assignment target", sourceName, target.getLineno(), "", 0);
            }
            return assign;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAstRoot(com.google.javascript.rhino.head.ast.AstRoot rootNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SCRIPT);
            for (com.google.javascript.rhino.head.Node child : rootNode) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            parseDirectives(node);
            return node;
        }

        private void parseDirectives(com.google.javascript.rhino.Node node) {
            java.util.Set<java.lang.String> directives = null;
            while (isDirective(node.getFirstChild())) {
                java.lang.String directive = node.removeFirstChild().getFirstChild().getString();
                if (directives == null) {
                    directives = com.google.common.collect.Sets.newHashSet(directive);
                } else {
                    directives.add(directive);
                }
            } 
            if (directives != null) {
                node.setDirectives(directives);
            }
        }

        private boolean isDirective(com.google.javascript.rhino.Node n) {
            if (n == null) {
                return false;
            }
            int nType = n.getType();
            return ((nType == com.google.javascript.rhino.Token.EXPR_RESULT) && n.getFirstChild().isString()) && com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBlock(com.google.javascript.rhino.head.ast.Block blockNode) {
            return processGeneric(blockNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.rhino.head.ast.BreakStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.BREAK);
            if (statementNode.getBreakLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processCatchClause(com.google.javascript.rhino.head.ast.CatchClause clauseNode) {
            com.google.javascript.rhino.head.ast.AstNode catchVar = clauseNode.getVarName();
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CATCH, transform(catchVar));
            if (clauseNode.getCatchCondition() != null) {
                errorReporter.error("Catch clauses are not supported", sourceName, clauseNode.getCatchCondition().getLineno(), "", 0);
            }
            node.addChildToBack(transformBlock(clauseNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.rhino.head.ast.ConditionalExpression exprNode) {
            return newNode(com.google.javascript.rhino.Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.rhino.head.ast.ContinueStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CONTINUE);
            if (statementNode.getLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processDoLoop(com.google.javascript.rhino.head.ast.DoLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processElementGet(com.google.javascript.rhino.head.ast.ElementGet getNode) {
            return newNode(com.google.javascript.rhino.Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.rhino.head.ast.EmptyExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyStatement(com.google.javascript.rhino.head.ast.EmptyStatement exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));
            node.addChildToBack(transform(statementNode.getExpression()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForInLoop(com.google.javascript.rhino.head.ast.ForInLoop loopNode) {
            if (loopNode.isForEach()) {
                errorReporter.error("unsupported language extension: for each", sourceName, loopNode.getLineno(), "", 0);
                return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
            }
            return newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForLoop(com.google.javascript.rhino.head.ast.ForLoop loopNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));
            node.addChildToBack(transformBlock(loopNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.rhino.head.ast.FunctionCall callNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : callNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(node.getFirstChild().getLineno());
            node.setCharno(node.getFirstChild().getCharno());
            maybeSetLengthFrom(node, callNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode functionNode) {
            com.google.javascript.rhino.head.ast.Name name = functionNode.getFunctionName();
            java.lang.Boolean isUnnamedFunction = false;
            if (name == null) {
                int functionType = functionNode.getFunctionType();
                if (functionType != com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_EXPRESSION) {
                    errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
                    return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
                }
                name = new com.google.javascript.rhino.head.ast.Name();
                name.setIdentifier("");
                isUnnamedFunction = true;
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FUNCTION);
            com.google.javascript.rhino.Node newName = transform(name);
            if (isUnnamedFunction) {
                newName.setLineno(functionNode.getLineno());
                int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
                newName.setCharno(position2charno(lpColumn));
                maybeSetLengthFrom(newName, name);
            }
            node.addChildToBack(newName);
            com.google.javascript.rhino.Node lp = newNode(com.google.javascript.rhino.Token.PARAM_LIST);
            com.google.javascript.rhino.head.ast.Name fnName = functionNode.getFunctionName();
            if (fnName != null) {
                lp.setLineno(fnName.getLineno());
            } else {
                lp.setLineno(functionNode.getLineno());
            }
            int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
            lp.setCharno(position2charno(lparenCharno));
            for (com.google.javascript.rhino.head.ast.AstNode param : functionNode.getParams()) {
                com.google.javascript.rhino.Node paramNode = transform(param);
                if (paramNode.isName()) {
                    lp.addChildToBack(paramNode);
                } else {
                    com.google.common.base.Preconditions.checkState((config.isIdeMode || paramNode.isObjectLit()) || paramNode.isArrayLit());
                }
            }
            node.addChildToBack(lp);
            com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());
            if (!bodyNode.isBlock()) {
                com.google.common.base.Preconditions.checkState(config.isIdeMode);
                bodyNode = com.google.javascript.rhino.IR.block();
            }
            parseDirectives(bodyNode);
            node.addChildToBack(bodyNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIfStatement(com.google.javascript.rhino.head.ast.IfStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.IF);
            node.addChildToBack(transform(statementNode.getCondition()));
            node.addChildToBack(transformBlock(statementNode.getThenPart()));
            if (statementNode.getElsePart() != null) {
                node.addChildToBack(transformBlock(statementNode.getElsePart()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression exprNode) {
            com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));
            n.setLineno(exprNode.getLineno());
            n.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(n, exprNode);
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.rhino.head.ast.KeywordLiteral literalNode) {
            return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabel(com.google.javascript.rhino.head.ast.Label labelNode) {
            return newStringNode(com.google.javascript.rhino.Token.LABEL_NAME, labelNode.getName());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.rhino.head.ast.LabeledStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.LABEL);
            com.google.javascript.rhino.Node prev = null;
            com.google.javascript.rhino.Node cur = node;
            for (com.google.javascript.rhino.head.ast.Label label : statementNode.getLabels()) {
                if (prev != null) {
                    prev.addChildToBack(cur);
                }
                cur.addChildToBack(transform(label));
                cur.setLineno(label.getLineno());
                maybeSetLengthFrom(cur, label);
                int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());
                cur.setCharno(clauseAbsolutePosition);
                prev = cur;
                cur = newNode(com.google.javascript.rhino.Token.LABEL);
            }
            prev.addChildToBack(transform(statementNode.getStatement()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode) {
            return processName(nameNode, false);
        }

        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode, boolean asString) {
            if (asString) {
                return newStringNode(com.google.javascript.rhino.Token.STRING, nameNode.getIdentifier());
            } else {
                if (isReservedKeyword(nameNode.getIdentifier())) {
                    errorReporter.error("identifier is a reserved word", sourceName, nameNode.getLineno(), "", 0);
                }
                return newStringNode(com.google.javascript.rhino.Token.NAME, nameNode.getIdentifier());
            }
        }

        private boolean isReservedKeyword(java.lang.String identifier) {
            return (reservedKeywords != null) && reservedKeywords.contains(identifier);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNewExpression(com.google.javascript.rhino.head.ast.NewExpression exprNode) {
            return processFunctionCall(exprNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
            return newNumberNode(literalNode.getNumber());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.rhino.head.ast.ObjectLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.OBJECTLIT);
            for (com.google.javascript.rhino.head.ast.ObjectProperty el : literalNode.getElements()) {
                if (config.languageMode == com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3) {
                    if (el.isGetter()) {
                        reportGetter(el);
                        continue;
                    } else if (el.isSetter()) {
                        reportSetter(el);
                        continue;
                    }
                }
                com.google.javascript.rhino.Node key = transformAsString(el.getLeft());
                key.setType(com.google.javascript.rhino.Token.STRING_KEY);
                com.google.javascript.rhino.Node value = transform(el.getRight());
                if (el.isGetter()) {
                    key.setType(com.google.javascript.rhino.Token.GETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (getFnParamNode(value).hasChildren()) {
                        reportGetterParam(el.getLeft());
                    }
                } else if (el.isSetter()) {
                    key.setType(com.google.javascript.rhino.Token.SETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (!getFnParamNode(value).hasOneChild()) {
                        reportSetterParam(el.getLeft());
                    }
                }
                key.addChildToFront(value);
                node.addChildToBack(key);
            }
            return node;
        }

        com.google.javascript.rhino.Node getFnParamNode(com.google.javascript.rhino.Node fnNode) {
            com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
            return fnNode.getFirstChild().getNext();
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.rhino.head.ast.ObjectProperty propertyNode) {
            return processInfixExpression(propertyNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.rhino.head.ast.ParenthesizedExpression exprNode) {
            com.google.javascript.rhino.Node node = transform(exprNode.getExpression());
            node.putProp(com.google.javascript.rhino.Node.PARENTHESIZED_PROP, java.lang.Boolean.TRUE);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.rhino.head.ast.PropertyGet getNode) {
            com.google.javascript.rhino.Node leftChild = transform(getNode.getTarget());
            com.google.javascript.rhino.Node newNode = newNode(com.google.javascript.rhino.Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));
            newNode.setLineno(leftChild.getLineno());
            newNode.setCharno(leftChild.getCharno());
            maybeSetLengthFrom(newNode, getNode);
            return newNode;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.rhino.head.ast.RegExpLiteral literalNode) {
            com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());
            literalStringNode.setLineno(literalNode.getLineno());
            maybeSetLengthFrom(literalStringNode, literalNode);
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.REGEXP, literalStringNode);
            java.lang.String flags = literalNode.getFlags();
            if ((flags != null) && (!flags.isEmpty())) {
                com.google.javascript.rhino.Node flagsNode = newStringNode(flags);
                flagsNode.setLineno(literalNode.getLineno());
                maybeSetLengthFrom(flagsNode, literalNode);
                node.addChildToBack(flagsNode);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.rhino.head.ast.ReturnStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.RETURN);
            if (statementNode.getReturnValue() != null) {
                node.addChildToBack(transform(statementNode.getReturnValue()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processScope(com.google.javascript.rhino.head.ast.Scope scopeNode) {
            return processGeneric(scopeNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.rhino.head.ast.StringLiteral literalNode) {
            java.lang.String value = literalNode.getValue();
            com.google.javascript.rhino.Node n = newStringNode(value);
            if (value.indexOf('\u000b') != (-1)) {
                int start = literalNode.getAbsolutePosition();
                int end = start + literalNode.getLength();
                if ((start < sourceString.length()) && (sourceString.substring(start, java.lang.Math.min(sourceString.length(), end)).indexOf("\\v") != (-1))) {
                    n.putBooleanProp(com.google.javascript.rhino.Node.SLASH_V, true);
                }
            }
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.rhino.head.ast.SwitchCase caseNode) {
            com.google.javascript.rhino.Node node;
            if (caseNode.isDefault()) {
                node = newNode(com.google.javascript.rhino.Token.DEFAULT_CASE);
            } else {
                com.google.javascript.rhino.head.ast.AstNode expr = caseNode.getExpression();
                node = newNode(com.google.javascript.rhino.Token.CASE, transform(expr));
            }
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            block.putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, true);
            block.setLineno(caseNode.getLineno());
            block.setCharno(position2charno(caseNode.getAbsolutePosition()));
            maybeSetLengthFrom(block, caseNode);
            if (caseNode.getStatements() != null) {
                for (com.google.javascript.rhino.head.ast.AstNode child : caseNode.getStatements()) {
                    block.addChildToBack(transform(child));
                }
            }
            node.addChildToBack(block);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.rhino.head.ast.SwitchStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SWITCH, transform(statementNode.getExpression()));
            for (com.google.javascript.rhino.head.ast.AstNode child : statementNode.getCases()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.rhino.head.ast.ThrowStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.THROW, transform(statementNode.getExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processTryStatement(com.google.javascript.rhino.head.ast.TryStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.TRY, transformBlock(statementNode.getTryBlock()));
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            boolean lineSet = false;
            for (com.google.javascript.rhino.head.ast.CatchClause cc : statementNode.getCatchClauses()) {
                if (lineSet == false) {
                    block.setLineno(cc.getLineno());
                    maybeSetLengthFrom(block, cc);
                    lineSet = true;
                }
                block.addChildToBack(transform(cc));
            }
            node.addChildToBack(block);
            com.google.javascript.rhino.head.ast.AstNode finallyBlock = statementNode.getFinallyBlock();
            if (finallyBlock != null) {
                node.addChildToBack(transformBlock(finallyBlock));
            }
            if ((lineSet == false) && (finallyBlock != null)) {
                block.setLineno(finallyBlock.getLineno());
                maybeSetLengthFrom(block, finallyBlock);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.rhino.head.ast.UnaryExpression exprNode) {
            int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());
            com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());
            if ((type == com.google.javascript.rhino.Token.NEG) && operand.isNumber()) {
                operand.setDouble(-operand.getDouble());
                return operand;
            } else {
                if ((type == com.google.javascript.rhino.Token.DELPROP) && (!((operand.isGetProp() || operand.isGetElem()) || operand.isName()))) {
                    java.lang.String msg = "Invalid delete operand. Only properties can be deleted.";
                    errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
                    if (!validAssignmentTarget(operand)) {
                        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? "invalid increment target" : "invalid decrement target";
                        errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                    }
                }
                com.google.javascript.rhino.Node node = newNode(type, operand);
                if (exprNode.isPostfix()) {
                    node.putBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP, true);
                }
                return node;
            }
        }

        private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {
            switch (target.getType()) {
                case com.google.javascript.rhino.Token.NAME :
                case com.google.javascript.rhino.Token.GETPROP :
                case com.google.javascript.rhino.Token.GETELEM :
                    return true;
            }
            return false;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration declarationNode) {
            if ((!config.acceptConstKeyword) && (declarationNode.getType() == com.google.javascript.rhino.head.Token.CONST)) {
                processIllegalToken(declarationNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.VAR);
            for (com.google.javascript.rhino.head.ast.VariableInitializer child : declarationNode.getVariables()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer initializerNode) {
            com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());
            if (initializerNode.getInitializer() != null) {
                com.google.javascript.rhino.Node initalizer = transform(initializerNode.getInitializer());
                node.addChildToBack(initalizer);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.rhino.head.ast.WhileLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWithStatement(com.google.javascript.rhino.head.ast.WithStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("Unsupported syntax: " + com.google.javascript.rhino.head.Token.typeToName(node.getType()), sourceName, node.getLineno(), "", 0);
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }

        void reportDestructuringAssign(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("destructuring assignment forbidden", sourceName, node.getLineno(), "", 0);
        }

        void reportGetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportSetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportGetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("getters may not have parameters", sourceName, node.getLineno(), "", 0);
        }

        void reportSetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("setters must have exactly one parameter", sourceName, node.getLineno(), "", 0);
        }
    }

    private static int transformTokenType(int token) {
        switch (token) {
            case com.google.javascript.rhino.head.Token.RETURN :
                return com.google.javascript.rhino.Token.RETURN;
            case com.google.javascript.rhino.head.Token.BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.head.Token.BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.head.Token.BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.head.Token.EQ :
                return com.google.javascript.rhino.Token.EQ;
            case com.google.javascript.rhino.head.Token.NE :
                return com.google.javascript.rhino.Token.NE;
            case com.google.javascript.rhino.head.Token.LT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.head.Token.LE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.head.Token.GT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.head.Token.GE :
                return com.google.javascript.rhino.Token.GE;
            case com.google.javascript.rhino.head.Token.LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.head.Token.RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.head.Token.URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.head.Token.ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.head.Token.SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.head.Token.MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.head.Token.DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.head.Token.MOD :
                return com.google.javascript.rhino.Token.MOD;
            case com.google.javascript.rhino.head.Token.NOT :
                return com.google.javascript.rhino.Token.NOT;
            case com.google.javascript.rhino.head.Token.BITNOT :
                return com.google.javascript.rhino.Token.BITNOT;
            case com.google.javascript.rhino.head.Token.POS :
                return com.google.javascript.rhino.Token.POS;
            case com.google.javascript.rhino.head.Token.NEG :
                return com.google.javascript.rhino.Token.NEG;
            case com.google.javascript.rhino.head.Token.NEW :
                return com.google.javascript.rhino.Token.NEW;
            case com.google.javascript.rhino.head.Token.DELPROP :
                return com.google.javascript.rhino.Token.DELPROP;
            case com.google.javascript.rhino.head.Token.TYPEOF :
                return com.google.javascript.rhino.Token.TYPEOF;
            case com.google.javascript.rhino.head.Token.GETPROP :
                return com.google.javascript.rhino.Token.GETPROP;
            case com.google.javascript.rhino.head.Token.GETELEM :
                return com.google.javascript.rhino.Token.GETELEM;
            case com.google.javascript.rhino.head.Token.CALL :
                return com.google.javascript.rhino.Token.CALL;
            case com.google.javascript.rhino.head.Token.NAME :
                return com.google.javascript.rhino.Token.NAME;
            case com.google.javascript.rhino.head.Token.NUMBER :
                return com.google.javascript.rhino.Token.NUMBER;
            case com.google.javascript.rhino.head.Token.STRING :
                return com.google.javascript.rhino.Token.STRING;
            case com.google.javascript.rhino.head.Token.NULL :
                return com.google.javascript.rhino.Token.NULL;
            case com.google.javascript.rhino.head.Token.THIS :
                return com.google.javascript.rhino.Token.THIS;
            case com.google.javascript.rhino.head.Token.FALSE :
                return com.google.javascript.rhino.Token.FALSE;
            case com.google.javascript.rhino.head.Token.TRUE :
                return com.google.javascript.rhino.Token.TRUE;
            case com.google.javascript.rhino.head.Token.SHEQ :
                return com.google.javascript.rhino.Token.SHEQ;
            case com.google.javascript.rhino.head.Token.SHNE :
                return com.google.javascript.rhino.Token.SHNE;
            case com.google.javascript.rhino.head.Token.REGEXP :
                return com.google.javascript.rhino.Token.REGEXP;
            case com.google.javascript.rhino.head.Token.THROW :
                return com.google.javascript.rhino.Token.THROW;
            case com.google.javascript.rhino.head.Token.IN :
                return com.google.javascript.rhino.Token.IN;
            case com.google.javascript.rhino.head.Token.INSTANCEOF :
                return com.google.javascript.rhino.Token.INSTANCEOF;
            case com.google.javascript.rhino.head.Token.ARRAYLIT :
                return com.google.javascript.rhino.Token.ARRAYLIT;
            case com.google.javascript.rhino.head.Token.OBJECTLIT :
                return com.google.javascript.rhino.Token.OBJECTLIT;
            case com.google.javascript.rhino.head.Token.TRY :
                return com.google.javascript.rhino.Token.TRY;
            case com.google.javascript.rhino.head.Token.LP :
                return com.google.javascript.rhino.Token.PARAM_LIST;
            case com.google.javascript.rhino.head.Token.COMMA :
                return com.google.javascript.rhino.Token.COMMA;
            case com.google.javascript.rhino.head.Token.ASSIGN :
                return com.google.javascript.rhino.Token.ASSIGN;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITXOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.ASSIGN_BITAND;
            case com.google.javascript.rhino.head.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.ASSIGN_LSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.ASSIGN_RSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.ASSIGN_URSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ASSIGN_ADD;
            case com.google.javascript.rhino.head.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.ASSIGN_SUB;
            case com.google.javascript.rhino.head.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.ASSIGN_MUL;
            case com.google.javascript.rhino.head.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.ASSIGN_DIV;
            case com.google.javascript.rhino.head.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.ASSIGN_MOD;
            case com.google.javascript.rhino.head.Token.HOOK :
                return com.google.javascript.rhino.Token.HOOK;
            case com.google.javascript.rhino.head.Token.OR :
                return com.google.javascript.rhino.Token.OR;
            case com.google.javascript.rhino.head.Token.AND :
                return com.google.javascript.rhino.Token.AND;
            case com.google.javascript.rhino.head.Token.INC :
                return com.google.javascript.rhino.Token.INC;
            case com.google.javascript.rhino.head.Token.DEC :
                return com.google.javascript.rhino.Token.DEC;
            case com.google.javascript.rhino.head.Token.FUNCTION :
                return com.google.javascript.rhino.Token.FUNCTION;
            case com.google.javascript.rhino.head.Token.IF :
                return com.google.javascript.rhino.Token.IF;
            case com.google.javascript.rhino.head.Token.SWITCH :
                return com.google.javascript.rhino.Token.SWITCH;
            case com.google.javascript.rhino.head.Token.CASE :
                return com.google.javascript.rhino.Token.CASE;
            case com.google.javascript.rhino.head.Token.DEFAULT :
                return com.google.javascript.rhino.Token.DEFAULT_CASE;
            case com.google.javascript.rhino.head.Token.WHILE :
                return com.google.javascript.rhino.Token.WHILE;
            case com.google.javascript.rhino.head.Token.DO :
                return com.google.javascript.rhino.Token.DO;
            case com.google.javascript.rhino.head.Token.FOR :
                return com.google.javascript.rhino.Token.FOR;
            case com.google.javascript.rhino.head.Token.BREAK :
                return com.google.javascript.rhino.Token.BREAK;
            case com.google.javascript.rhino.head.Token.CONTINUE :
                return com.google.javascript.rhino.Token.CONTINUE;
            case com.google.javascript.rhino.head.Token.VAR :
                return com.google.javascript.rhino.Token.VAR;
            case com.google.javascript.rhino.head.Token.WITH :
                return com.google.javascript.rhino.Token.WITH;
            case com.google.javascript.rhino.head.Token.CATCH :
                return com.google.javascript.rhino.Token.CATCH;
            case com.google.javascript.rhino.head.Token.VOID :
                return com.google.javascript.rhino.Token.VOID;
            case com.google.javascript.rhino.head.Token.EMPTY :
                return com.google.javascript.rhino.Token.EMPTY;
            case com.google.javascript.rhino.head.Token.BLOCK :
                return com.google.javascript.rhino.Token.BLOCK;
            case com.google.javascript.rhino.head.Token.LABEL :
                return com.google.javascript.rhino.Token.LABEL;
            case com.google.javascript.rhino.head.Token.EXPR_VOID :
            case com.google.javascript.rhino.head.Token.EXPR_RESULT :
                return com.google.javascript.rhino.Token.EXPR_RESULT;
            case com.google.javascript.rhino.head.Token.SCRIPT :
                return com.google.javascript.rhino.Token.SCRIPT;
            case com.google.javascript.rhino.head.Token.GET :
                return com.google.javascript.rhino.Token.GETTER_DEF;
            case com.google.javascript.rhino.head.Token.SET :
                return com.google.javascript.rhino.Token.SETTER_DEF;
            case com.google.javascript.rhino.head.Token.CONST :
                return com.google.javascript.rhino.Token.CONST;
            case com.google.javascript.rhino.head.Token.DEBUGGER :
                return com.google.javascript.rhino.Token.DEBUGGER;
        }
        throw new java.lang.IllegalStateException(java.lang.String.valueOf(token));
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1) {
        return new com.google.javascript.rhino.Node(type, child1).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2) {
        return new com.google.javascript.rhino.Node(type, child1, child2).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2, com.google.javascript.rhino.Node child3) {
        return new com.google.javascript.rhino.Node(type, child1, child2, child3).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String value) {
        return com.google.javascript.rhino.IR.string(value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(int type, java.lang.String value) {
        return com.google.javascript.rhino.Node.newString(type, value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNumberNode(java.lang.Double value) {
        return com.google.javascript.rhino.IR.number(value).clonePropsFrom(templateNode);
    }
}
[9399363] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659835098713
GPR[EPVATF]-1659835100160
GPR[SPS]-1659835100160
[9401450] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:411.
GPR[EPS]-1659835100800
GPR[ESUN]-1659835100800
GPR[SSUN]-1659835100800
-1117079791
GPR[ESUN]-1659835101001
GPR[SSUN]-1659835101001
-1117079791
GPR[SPVATF]-1659835101203
GPR[EPVATF]-1659835101379
[9402029] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659835101379
GPR[SSUN]-1659835101379
-1117079791
GPR[SPVATF]-1659835101581
GPR[EPVATF]-1659835101802
[9402452] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659835101802
GPR[SSUN]-1659835101802
-1117079791
GPR[ESUN]-1659835102001
GPR[SSUN]-1659835102001
-1117079791
GPR[SPVATF]-1659835102195
GPR[EPVATF]-1659835102368
[9403018] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659835102368
GPR[SSUN]-1659835102368
1331276989
GPR[SPVATF]-1659835102579
GPR[EPVATF]-1659835104018
GPR[SPS]-1659835104018
[9405212] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:550.
GPR[EPS]-1659835104562
GPR[ESUN]-1659835104562
GPR[SSUN]-1659835104562
-861565004
GPR[SPVATF]-1659835104749
GPR[EPVATF]-1659835106225
GPR[SPS]-1659835106226
[9407483] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.BasicErrorManager:50.
GPR[EPS]-1659835106833
GPR[ESUN]-1659835106833
GPR[SSUN]-1659835106833
-861565004
GPR[SPVATF]-1659835107018
GPR[EPVATF]-1659835108523
GPR[SPS]-1659835108523
[9409706] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.BasicErrorManager:49.
GPR[EPS]-1659835109056
GPR[SPVATF]-1659835109056
GPR[EPVATF]-1659835110629
GPR[SPS]-1659835110629
[9411782] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.BasicErrorManager:49.
GPR[EPS]-1659835111132
GPR[ESUN]-1659835111132
GPR[SSUN]-1659835111132
79711797
GPR[SPVATF]-1659835111393
GPR[EPVATF]-1659835112907
GPR[SPS]-1659835112907
[9414115] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Scope:541.
GPR[EPS]-1659835113465
GPR[ESUN]-1659835113465
GPR[SSUN]-1659835113465
79711797
GPR[ESUN]-1659835113707
GPR[SSUN]-1659835113707
2433571
GPR[ESUN]-1659835113982
GPR[SSUN]-1659835113982
1331276989
GPR[ESUN]-1659835114196
GPR[SSUN]-1659835114196
1331276989
GPR[SPVATF]-1659835114405
GPR[EPVATF]-1659835115977
GPR[SPS]-1659835115977
[9417271] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:606.
GPR[EPS]-1659835116621
GPR[ESUN]-1659835116621
GPR[SSUN]-1659835116622
1331276989
GPR[SPVATF]-1659835116833
GPR[EPVATF]-1659835118506
GPR[SPS]-1659835118507
[9419678] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:604.
GPR[EPS]-1659835119028
GPR[ESUN]-1659835119028
GPR[SSUN]-1659835119028
1331276989
GPR[SPVATF]-1659835119241
GPR[EPVATF]-1659835120869
GPR[SPS]-1659835120869
[9743014] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659835442364
GPR[SSUN]-1659835442364
1331276989
GPR[SPVATF]-1659835442740
GPR[EPVATF]-1659835444361
GPR[SPS]-1659835444361
[9745549] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:602.
GPR[EPS]-1659835444899
GPR[ESUN]-1659835444899
GPR[SSUN]-1659835444899
1331276989
GPR[ESUN]-1659835445114
GPR[SSUN]-1659835445114
1331276989
GPR[SPVATF]-1659835445327
GPR[EPVATF]-1659835446790
GPR[SPS]-1659835446790
[9747978] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:597.
GPR[EPS]-1659835447328
GPR[SPVATF]-1659835447328
GPR[EPVATF]-1659835448794
GPR[SPS]-1659835448794
[9750005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:597.
GPR[EPS]-1659835449355
GPR[ESUN]-1659835449355
GPR[SSUN]-1659835449355
1331276989
GPR[ESUN]-1659835449569
GPR[SSUN]-1659835449569
1187751237
GPR[ESUN]-1659835449867
GPR[SSUN]-1659835449867
GPR[ESUN]-1659835449867
GPR[SSUN]-1659835449867
GPR[ESUN]-1659835449867
GPR[SSUN]-1659835449867
GPR[ESUN]-1659835449867
GPR[SSUN]-1659835449867
GPR[ESUN]-1659835449867
GPR[SSUN]-1659835449867
GPR[ESUN]-1659835449867
GPR[SSUN]-1659835449867
GPR[ESUN]-1659835449867
GPR[SSUN]-1659835449867
GPR[ESUN]-1659835449867
GPR[SSUN]-1659835449867
GPR[ESUN]-1659835449867
GPR[SSUN]-1659835449867
GPR[ESUN]-1659835449867
GPR[SSUN]-1659835449867
GPR[ESUN]-1659835449867
GPR[SSUN]-1659835449867
GPR[ESUN]-1659835449867
GPR[SSUN]-1659835449867
1187751237
GPR[ESUN]-1659835450152
GPR[SSUN]-1659835450152
1187751237
GPR[ESUN]-1659835450436
GPR[SSUN]-1659835450436
GPR[ESUN]-1659835450436
GPR[SSUN]-1659835450436
GPR[ESUN]-1659835450436
GPR[SSUN]-1659835450436
1331276989
GPR[ESUN]-1659835450647
GPR[SSUN]-1659835450647
1187751237
GPR[ESUN]-1659835450932
GPR[SSUN]-1659835450932
1187751237
GPR[SPVATF]-1659835451236
GPR[EPVATF]-1659835452682
GPR[SPS]-1659835452682
[9754225] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2823.
GPR[EPS]-1659835453575
GPR[SPVATF]-1659835453575
GPR[EPVATF]-1659835455032
GPR[SPS]-1659835455032
[9756511] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2823.
GPR[EPS]-1659835455861
GPR[ESUN]-1659835455861
GPR[SSUN]-1659835455862
1187751237
GPR[ESUN]-1659835456149
GPR[SSUN]-1659835456150
1187751237
GPR[SPVATF]-1659835456456
GPR[EPVATF]-1659835457912
GPR[SPS]-1659835457913
[9759417] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2821.
GPR[EPS]-1659835458767
GPR[ESUN]-1659835458767
GPR[SSUN]-1659835458767
1331276989
GPR[ESUN]-1659835458982
GPR[SSUN]-1659835458982
1331276989
GPR[SPVATF]-1659835459192
GPR[EPVATF]-1659835460639
GPR[SPS]-1659835460639
[9761848] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:544.
GPR[EPS]-1659835461198
GPR[ESUN]-1659835461198
GPR[SSUN]-1659835461198
1331276989
GPR[SPVATF]-1659835461414
GPR[EPVATF]-1659835462854
GPR[SPS]-1659835462854
[9764114] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:542.
GPR[EPS]-1659835463464
GPR[ESUN]-1659835463464
GPR[SSUN]-1659835463464
1331276989
GPR[SPVATF]-1659835463678
GPR[EPVATF]-1659835465099
GPR[SPS]-1659835465099
[9766303] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:540.
GPR[EPS]-1659835465653
GPR[ESUN]-1659835465653
GPR[SSUN]-1659835465653
1331276989
GPR[SPVATF]-1659835465887
GPR[EPVATF]-1659835467348
GPR[SPS]-1659835467348
[9768584] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:537.
GPR[EPS]-1659835467934
GPR[ESUN]-1659835467934
GPR[SSUN]-1659835467934
1331276989
GPR[ESUN]-1659835468147
GPR[SSUN]-1659835468148
1331276989
GPR[ESUN]-1659835468358
GPR[SSUN]-1659835468358
1331276989
GPR[SPVATF]-1659835468570
GPR[EPVATF]-1659835470064
GPR[SPS]-1659835470064
[9771270] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:527.
GPR[EPS]-1659835470620
GPR[SPVATF]-1659835470620
GPR[EPVATF]-1659835472082
GPR[SPS]-1659835472082
[9773311] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:527.
GPR[EPS]-1659835472661
GPR[ESUN]-1659835472661
GPR[SSUN]-1659835472661
1331276989
GPR[SPVATF]-1659835472879
GPR[EPVATF]-1659835474385
GPR[SPS]-1659835474385
[9775560] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:525.
GPR[EPS]-1659835474910
GPR[ESUN]-1659835474910
GPR[SSUN]-1659835474910
1331276989
GPR[SPVATF]-1659835475123
GPR[EPVATF]-1659835476681
GPR[SPS]-1659835476681
[9777894] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:524.
GPR[EPS]-1659835477244
GPR[ESUN]-1659835477244
GPR[SSUN]-1659835477245
1331276989
GPR[SPVATF]-1659835477463
GPR[EPVATF]-1659835479041
GPR[SPS]-1659835479041
[9780283] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:519.
GPR[EPS]-1659835479633
GPR[SPVATF]-1659835479633
GPR[EPVATF]-1659835481236
GPR[SPS]-1659835481236
[9782427] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:519.
GPR[EPS]-1659835481777
GPR[ESUN]-1659835481777
GPR[SSUN]-1659835481777
1331276989
GPR[ESUN]-1659835481994
GPR[SSUN]-1659835481994
1331276989
GPR[ESUN]-1659835482208
GPR[SSUN]-1659835482208
1331276989
GPR[SPVATF]-1659835482421
GPR[EPVATF]-1659835484042
GPR[SPS]-1659835484042
[9785207] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:512.
GPR[EPS]-1659835484557
GPR[ESUN]-1659835484557
GPR[SSUN]-1659835484558
1331276989
GPR[SPVATF]-1659835484772
GPR[EPVATF]-1659835486467
GPR[SPS]-1659835486467
[9787662] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:511.
GPR[EPS]-1659835487012
GPR[ESUN]-1659835487012
GPR[SSUN]-1659835487012
1331276989
GPR[SPVATF]-1659835487228
GPR[EPVATF]-1659835488988
GPR[SPS]-1659835488988
[9790165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:490.
GPR[EPS]-1659835489515
GPR[ESUN]-1659835489515
GPR[SSUN]-1659835489515
1331276989
GPR[SPVATF]-1659835489731
GPR[EPVATF]-1659835491596
GPR[SPS]-1659835491596
[9792796] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:489.
GPR[EPS]-1659835492146
GPR[ESUN]-1659835492146
GPR[SSUN]-1659835492146
704176156
GPR[ESUN]-1659835492357
GPR[SSUN]-1659835492357
704176156
GPR[ESUN]-1659835492565
GPR[SSUN]-1659835492566
704176156
GPR[SPVATF]-1659835492796
GPR[EPVATF]-1659835494744
GPR[SPS]-1659835494744
[9796842] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:229.
GPR[EPS]-1659835496192
GPR[ESUN]-1659835496192
GPR[SSUN]-1659835496193
704176156
GPR[ESUN]-1659835496405
GPR[SSUN]-1659835496405
704176156
GPR[ESUN]-1659835496617
GPR[SSUN]-1659835496617
704176156
GPR[ESUN]-1659835496826
GPR[SSUN]-1659835496827
704176156
GPR[SPVATF]-1659835497037
GPR[EPVATF]-1659835499165
GPR[SPS]-1659835499165
[9800353] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:187.
GPR[EPS]-1659835499703
GPR[SPVATF]-1659835499703
GPR[EPVATF]-1659835501824
GPR[SPS]-1659835501824
[9802973] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:187.
GPR[EPS]-1659835502323
GPR[ESUN]-1659835502323
GPR[SSUN]-1659835502323
704176156
GPR[SPVATF]-1659835502663
GPR[EPVATF]-1659835504868
GPR[SPS]-1659835504868
[9806020] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:186.
GPR[EPS]-1659835505370
GPR[ESUN]-1659835505370
GPR[SSUN]-1659835505370
704176156
GPR[SPVATF]-1659835505580
GPR[EPVATF]-1659835507791
GPR[SPS]-1659835507791
[9808943] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:146.
GPR[EPS]-1659835508293
GPR[ESUN]-1659835508293
GPR[SSUN]-1659835508293
704176156
GPR[SPVATF]-1659835508532
GPR[EPVATF]-1659835510769
GPR[SPS]-1659835510769
[9811945] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:145.
GPR[EPS]-1659835511295
GPR[ESUN]-1659835511295
GPR[SSUN]-1659835511295
1187751237
GPR[ESUN]-1659835511618
GPR[SSUN]-1659835511618
GPR[ESUN]-1659835511618
GPR[SSUN]-1659835511618
1187751237
GPR[ESUN]-1659835511911
GPR[SSUN]-1659835511911
GPR[ESUN]-1659835511911
GPR[SSUN]-1659835511911
GPR[ESUN]-1659835511911
GPR[SSUN]-1659835511911
GPR[ESUN]-1659835511911
GPR[SSUN]-1659835511911
1537627151
GPR[ESUN]-1659835512124
GPR[SSUN]-1659835512124
-1345859678
GPR[ESUN]-1659835512403
GPR[SSUN]-1659835512403
-1345859678
GPR[SPVATF]-1659835512663
GPR[EPVATF]-1659835515421
GPR[SPS]-1659835515421
[9816743] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:706.
GPR[EPS]-1659835516093
GPR[ESUN]-1659835516093
GPR[SSUN]-1659835516093
-1345859678
GPR[SPVATF]-1659835516345
GPR[EPVATF]-1659835517857
GPR[SPS]-1659835517857
[9819163] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:705.
GPR[EPS]-1659835518513
GPR[ESUN]-1659835518513
GPR[SSUN]-1659835518513
-1345859678
GPR[SPVATF]-1659835518782
GPR[EPVATF]-1659835520261
GPR[SPS]-1659835520261
[9821592] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:698.
GPR[EPS]-1659835520942
GPR[SPVATF]-1659835520942
GPR[EPVATF]-1659835522469
GPR[SPS]-1659835522469
[9823741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:698.
GPR[EPS]-1659835523091
GPR[ESUN]-1659835523091
GPR[SSUN]-1659835523091
-1345859678
GPR[ESUN]-1659835523343
GPR[SSUN]-1659835523343
-1345859678
GPR[SPVATF]-1659835523623
GPR[EPVATF]-1659835525060
GPR[SPS]-1659835525060
[9826337] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:695.
GPR[EPS]-1659835525687
GPR[ESUN]-1659835525687
GPR[SSUN]-1659835525688
-1345859678
GPR[SPVATF]-1659835525941
GPR[EPVATF]-1659835527431
GPR[SPS]-1659835527431
[9828747] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:678.
GPR[EPS]-1659835528097
GPR[ESUN]-1659835528097
GPR[SSUN]-1659835528097
-1345859678
GPR[SPVATF]-1659835528352
GPR[EPVATF]-1659835529876
GPR[SPS]-1659835529876
[9831154] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:677.
GPR[EPS]-1659835530504
GPR[ESUN]-1659835530504
GPR[SSUN]-1659835530504
-1345859678
GPR[ESUN]-1659835530759
GPR[SSUN]-1659835530759
-1345859678
GPR[SPVATF]-1659835531012
GPR[EPVATF]-1659835532497
GPR[SPS]-1659835532497
[9833817] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:669.
GPR[EPS]-1659835533167
GPR[SPVATF]-1659835533167
GPR[EPVATF]-1659835534662
GPR[SPS]-1659835534662
[9835957] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:669.
GPR[EPS]-1659835535307
GPR[ESUN]-1659835535307
GPR[SSUN]-1659835535307
-1345859678
GPR[ESUN]-1659835535559
GPR[SSUN]-1659835535559
-1345859678
GPR[ESUN]-1659835535856
GPR[SSUN]-1659835535856
-1345859678
GPR[SPVATF]-1659835536108
GPR[EPVATF]-1659835537628
GPR[SPS]-1659835537628
[9838899] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:660.
GPR[EPS]-1659835538249
GPR[ESUN]-1659835538249
GPR[SSUN]-1659835538249
-1345859678
GPR[SPVATF]-1659835538501
GPR[EPVATF]-1659835540102
GPR[SPS]-1659835540102
[9841388] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:647.
GPR[EPS]-1659835540738
GPR[SPVATF]-1659835540739
GPR[EPVATF]-1659835542372
GPR[SPS]-1659835542372
[9843779] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:647.
GPR[EPS]-1659835543129
GPR[ESUN]-1659835543129
GPR[SSUN]-1659835543129
-1345859678
GPR[ESUN]-1659835543380
GPR[SSUN]-1659835543380
-1345859678
GPR[ESUN]-1659835543629
GPR[SSUN]-1659835543629
-1345859678
GPR[SPVATF]-1659835543880
GPR[EPVATF]-1659835545549
GPR[SPS]-1659835545549
[9846895] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:630.
GPR[EPS]-1659835546245
GPR[SPVATF]-1659835546245
GPR[EPVATF]-1659835548005
GPR[SPS]-1659835548005
[9849247] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:630.
GPR[EPS]-1659835548597
GPR[ESUN]-1659835548597
GPR[SSUN]-1659835548598
-1345859678
GPR[ESUN]-1659835548909
GPR[SSUN]-1659835548909
-1345859678
GPR[ESUN]-1659835549162
GPR[SSUN]-1659835549162
GPR[ESUN]-1659835549162
GPR[SSUN]-1659835549162
2433571
GPR[ESUN]-1659835549414
GPR[SSUN]-1659835549414
GPR[ESUN]-1659835549414
GPR[SSUN]-1659835549414
GPR[ESUN]-1659835549414
GPR[SSUN]-1659835549414
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549415
GPR[ESUN]-1659835549415
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
GPR[ESUN]-1659835549416
GPR[SSUN]-1659835549416
-534884160
GPR[SPVATF]-1659835549772
GPR[EPVATF]-1659835551594
GPR[SPS]-1659835551594
[9853241] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:262.
GPR[EPS]-1659835552591
GPR[ESUN]-1659835552591
GPR[SSUN]-1659835552591
1537627151
GPR[SPVATF]-1659835552798
GPR[EPVATF]-1659835554783
GPR[SPS]-1659835554783
[9855941] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:174.
GPR[EPS]-1659835555291
GPR[ESUN]-1659835555291
GPR[SSUN]-1659835555291
-1345859678
GPR[ESUN]-1659835555600
GPR[SSUN]-1659835555600
GPR[ESUN]-1659835555600
GPR[SSUN]-1659835555601
GPR[ESUN]-1659835555601
GPR[SSUN]-1659835555601
GPR[ESUN]-1659835555601
GPR[SSUN]-1659835555601
GPR[ESUN]-1659835555601
GPR[SSUN]-1659835555601
GPR[ESUN]-1659835555601
GPR[SSUN]-1659835555601
GPR[ESUN]-1659835555601
GPR[SSUN]-1659835555601
GPR[ESUN]-1659835555601
GPR[SSUN]-1659835555601
GPR[ESUN]-1659835555601
GPR[SSUN]-1659835555601
GPR[ESUN]-1659835555601
GPR[SSUN]-1659835555601
-754411459
GPR[SPVATF]-1659835555796
GPR[EPVATF]-1659835557936
GPR[SPS]-1659835557936
[9859081] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ComposeWarningsGuard:152.
GPR[EPS]-1659835558431
GPR[ESUN]-1659835558431
GPR[SSUN]-1659835558431
1629010039
GPR[SPVATF]-1659835558614
GPR[EPVATF]-1659835560820
GPR[SPS]-1659835560820
[9861925] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DiagnosticGroupWarningsGuard:53.
GPR[EPS]-1659835561275
GPR[ESUN]-1659835561275
GPR[SSUN]-1659835561275
GPR[ESUN]-1659835561275
GPR[SSUN]-1659835561275
GPR[ESUN]-1659835561275
GPR[SSUN]-1659835561275
646738083
GPR[ESUN]-1659835561569
GPR[SSUN]-1659835561569
1629010039
GPR[ESUN]-1659835561748
GPR[SSUN]-1659835561748
1629010039
GPR[SPVATF]-1659835561928
GPR[EPVATF]-1659835564073
GPR[SPS]-1659835564073
[9865350] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DiagnosticGroupWarningsGuard:52.
GPR[EPS]-1659835564700
GPR[SPVATF]-1659835564701
GPR[EPVATF]-1659835566892
GPR[SPS]-1659835566892
[9868628] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DiagnosticGroupWarningsGuard:52.
GPR[EPS]-1659835567978
GPR[ESUN]-1659835567978
GPR[SSUN]-1659835567978
1629010039
GPR[SPVATF]-1659835568159
GPR[EPVATF]-1659835570434
GPR[SPS]-1659835570434
[9871534] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DiagnosticGroupWarningsGuard:51.
GPR[EPS]-1659835570884
GPR[ESUN]-1659835570884
GPR[SSUN]-1659835570884
-600752576
GPR[ESUN]-1659835571082
GPR[SSUN]-1659835571082
GPR[ESUN]-1659835571082
GPR[SSUN]-1659835571082
GPR[ESUN]-1659835571082
GPR[SSUN]-1659835571082
GPR[ESUN]-1659835571082
GPR[SSUN]-1659835571082
GPR[ESUN]-1659835571082
GPR[SSUN]-1659835571082
GPR[ESUN]-1659835571082
GPR[SSUN]-1659835571082
GPR[ESUN]-1659835571082
GPR[SSUN]-1659835571083
GPR[ESUN]-1659835571083
GPR[SSUN]-1659835571083
GPR[ESUN]-1659835571083
GPR[SSUN]-1659835571083
GPR[ESUN]-1659835571083
GPR[SSUN]-1659835571083
GPR[ESUN]-1659835571083
GPR[SSUN]-1659835571083
-1797850673
GPR[SPVATF]-1659835571339
GPR[EPVATF]-1659835573617
GPR[SPS]-1659835573617
[9874858] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1446.
GPR[EPS]-1659835574208
GPR[ESUN]-1659835574208
GPR[SSUN]-1659835574208
2433571
GPR[ESUN]-1659835574510
GPR[SSUN]-1659835574511
1187751237
GPR[ESUN]-1659835574796
GPR[SSUN]-1659835574796
1187751237
GPR[SPVATF]-1659835575082
GPR[EPVATF]-1659835577265
GPR[SPS]-1659835577265
[9882691] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1718.
GPR[EPS]-1659835582041
GPR[ESUN]-1659835582042
GPR[SSUN]-1659835582042
1187751237
GPR[ESUN]-1659835582345
GPR[SSUN]-1659835582345
-1797850673
GPR[SPVATF]-1659835582600
GPR[EPVATF]-1659835584362
GPR[SPS]-1659835584362
[9885641] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1450.
GPR[EPS]-1659835584991
GPR[SPVATF]-1659835584992
GPR[EPVATF]-1659835586441
GPR[SPS]-1659835586441
[9887763] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1450.
GPR[EPS]-1659835587113
GPR[ESUN]-1659835587113
GPR[SSUN]-1659835587113
-1797850673
GPR[SPVATF]-1659835587370
GPR[EPVATF]-1659835588817
GPR[SPS]-1659835588817
[9890078] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1449.
GPR[EPS]-1659835589428
GPR[ESUN]-1659835589428
GPR[SSUN]-1659835589428
-1797850673
GPR[SPVATF]-1659835589684
GPR[EPVATF]-1659835591121
GPR[SPS]-1659835591121
[9892440] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1445.
GPR[EPS]-1659835591790
GPR[SPVATF]-1659835591790
GPR[EPVATF]-1659835593225
GPR[SPS]-1659835593225
[9894459] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1445.
GPR[EPS]-1659835593809
GPR[ESUN]-1659835593809
GPR[SSUN]-1659835593809
-1797850673
GPR[ESUN]-1659835594064
GPR[SSUN]-1659835594064
-1797850673
GPR[SPVATF]-1659835594316
GPR[EPVATF]-1659835595767
GPR[SPS]-1659835595767
[9897055] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1442.
GPR[EPS]-1659835596405
GPR[ESUN]-1659835596405
GPR[SSUN]-1659835596405
-1797850673
GPR[ESUN]-1659835596660
GPR[SSUN]-1659835596660
-1797850673
GPR[ESUN]-1659835596912
GPR[SSUN]-1659835596912
-1345859678
GPR[ESUN]-1659835597162
GPR[SSUN]-1659835597162
1537627151
GPR[SPVATF]-1659835597370
GPR[EPVATF]-1659835598851
GPR[SPS]-1659835598851
[9900030] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:173.
GPR[EPS]-1659835599380
GPR[SPVATF]-1659835599381
GPR[EPVATF]-1659835600840
GPR[SPS]-1659835600840
[9902018] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:173.
GPR[EPS]-1659835601368
GPR[ESUN]-1659835601368
GPR[SSUN]-1659835601368
-1345859678
GPR[ESUN]-1659835601660
GPR[SSUN]-1659835601660
-1345859678
GPR[SPVATF]-1659835601908
GPR[EPVATF]-1659835603388
GPR[SPS]-1659835603388
[9904692] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:394.
GPR[EPS]-1659835604042
GPR[ESUN]-1659835604042
GPR[SSUN]-1659835604042
-1345859678
GPR[ESUN]-1659835604303
GPR[SSUN]-1659835604303
GPR[ESUN]-1659835604303
GPR[SSUN]-1659835604303
GPR[ESUN]-1659835604303
GPR[SSUN]-1659835604303
GPR[ESUN]-1659835604303
GPR[SSUN]-1659835604303
GPR[ESUN]-1659835604303
GPR[SSUN]-1659835604303
GPR[ESUN]-1659835604303
GPR[SSUN]-1659835604303
GPR[ESUN]-1659835604303
GPR[SSUN]-1659835604303
2433571
GPR[SPVATF]-1659835604591
GPR[EPVATF]-1659835606125
GPR[SPS]-1659835606125
[9907561] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:832.
GPR[EPS]-1659835606911
GPR[ESUN]-1659835606911
GPR[SSUN]-1659835606911
GPR[ESUN]-1659835606911
GPR[SSUN]-1659835606911
GPR[ESUN]-1659835606911
GPR[SSUN]-1659835606911
GPR[ESUN]-1659835606911
GPR[SSUN]-1659835606911
GPR[ESUN]-1659835606911
GPR[SSUN]-1659835606911
GPR[ESUN]-1659835606911
GPR[SSUN]-1659835606911
646738083
GPR[SPVATF]-1659835607203
GPR[EPVATF]-1659835608734
GPR[SPS]-1659835608734
GPR[EPS]-1659835656186
GPR[SPVATF]-1659835656186
GPR[EPVATF]-1659835657709
GPR[SPS]-1659835657709
[11756837] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659837456187
GPR[SSUN]-1659837456187
GPR[ESUN]-1659837456187
GPR[SSUN]-1659837456187
GPR[ESUN]-1659837456187
GPR[SSUN]-1659837456187
GPR[ESUN]-1659837456187
GPR[SSUN]-1659837456187
GPR[ESUN]-1659837456188
GPR[SSUN]-1659837456188
GPR[ESUN]-1659837456188
GPR[SSUN]-1659837456188
GPR[ESUN]-1659837456188
GPR[SSUN]-1659837456188
GPR[ESUN]-1659837456188
GPR[SSUN]-1659837456188
-534884160
GPR[ESUN]-1659837456866
GPR[SSUN]-1659837456866
-534884160
GPR[SPVATF]-1659837457963
GPR[EPVATF]-1659837460232
GPR[SPS]-1659837460233
[11761821] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:329.
GPR[EPS]-1659837461171
GPR[ESUN]-1659837461171
GPR[SSUN]-1659837461171
-534884160
GPR[ESUN]-1659837461522
GPR[SSUN]-1659837461522
-534884160
GPR[SPVATF]-1659837461882
GPR[EPVATF]-1659837463645
GPR[SPS]-1659837463645
[11765210] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:332.
GPR[EPS]-1659837464560
GPR[ESUN]-1659837464560
GPR[SSUN]-1659837464560
-534884160
GPR[SPVATF]-1659837464903
GPR[EPVATF]-1659837466764
GPR[SPS]-1659837466764
[11768357] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:328.
GPR[EPS]-1659837467707
GPR[ESUN]-1659837467707
GPR[SSUN]-1659837467707
-534884160
GPR[ESUN]-1659837468047
GPR[SSUN]-1659837468047
-534884160
GPR[SPVATF]-1659837468392
GPR[EPVATF]-1659837470425
GPR[SPS]-1659837470425
[11772005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1992.
GPR[EPS]-1659837471355
GPR[ESUN]-1659837471355
GPR[SSUN]-1659837471356
-534884160
GPR[SPVATF]-1659837471704
GPR[EPVATF]-1659837473971
GPR[SPS]-1659837473971
[11775622] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Compiler extends com.google.javascript.jscomp.AbstractCompiler {
    static final java.lang.String SINGLETON_MODULE_NAME = "[singleton]";

    static final com.google.javascript.jscomp.DiagnosticType MODULE_DEPENDENCY_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_MODULE_DEPENDENCY_ERROR", "Bad dependency: {0} -> {1}. " + "Modules must be listed in dependency order.");

    static final com.google.javascript.jscomp.DiagnosticType MISSING_ENTRY_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_MISSING_ENTRY_ERROR", "required entry point \"{0}\" never provided");

    private static final java.lang.String CONFIG_RESOURCE = "com.google.javascript.jscomp.parsing.ParserConfig";

    com.google.javascript.jscomp.CompilerOptions options = null;

    private com.google.javascript.jscomp.PassConfig passes = null;

    private java.util.List<com.google.javascript.jscomp.CompilerInput> externs;

    private java.util.List<com.google.javascript.jscomp.JSModule> modules;

    private com.google.javascript.jscomp.JSModuleGraph moduleGraph;

    private java.util.List<com.google.javascript.jscomp.CompilerInput> inputs;

    private com.google.javascript.jscomp.ErrorManager errorManager;

    private com.google.javascript.jscomp.WarningsGuard warningsGuard;

    private final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> injectedLibraries = com.google.common.collect.Maps.newLinkedHashMap();

    com.google.javascript.rhino.Node externsRoot;

    com.google.javascript.rhino.Node jsRoot;

    com.google.javascript.rhino.Node externAndJsRoot;

    private java.util.Map<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput> inputsById;

    private com.google.javascript.jscomp.SourceMap sourceMap;

    private java.lang.String externExports = null;

    private int uniqueNameId = 0;

    private boolean useThreads = true;

    private boolean hasRegExpGlobalReferences = true;

    private com.google.javascript.jscomp.FunctionInformationMap functionInformationMap;

    private final java.lang.StringBuilder debugLog = new java.lang.StringBuilder();

    com.google.javascript.jscomp.CodingConvention defaultCodingConvention = new com.google.javascript.jscomp.ClosureCodingConvention();

    private com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.parsing.Config parserConfig = null;

    private com.google.javascript.jscomp.type.ReverseAbstractInterpreter abstractInterpreter;

    private com.google.javascript.jscomp.TypeValidator typeValidator;

    public com.google.javascript.jscomp.PerformanceTracker tracker;

    private final com.google.javascript.rhino.ErrorReporter oldErrorReporter = com.google.javascript.jscomp.RhinoErrorReporter.forOldRhino(this);

    private final com.google.javascript.rhino.head.ErrorReporter defaultErrorReporter = com.google.javascript.jscomp.RhinoErrorReporter.forNewRhino(this);

    public static final com.google.javascript.jscomp.DiagnosticType OPTIMIZE_LOOP_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_OPTIMIZE_LOOP_ERROR", "Exceeded max number of optimization iterations: {0}");

    public static final com.google.javascript.jscomp.DiagnosticType MOTION_ITERATIONS_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_OPTIMIZE_LOOP_ERROR", "Exceeded max number of code motion iterations: {0}");

    private static final long COMPILER_STACK_SIZE = 1048576L;

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger("com.google.javascript.jscomp");

    private final java.io.PrintStream outStream;

    private com.google.javascript.jscomp.GlobalVarReferenceMap globalRefMap = null;

    private volatile double progress = 0.0;

    public Compiler() {
        this(((java.io.PrintStream) (null)));
    }

    public Compiler(java.io.PrintStream stream) {
        addChangeHandler(recentChange);
        outStream = stream;
    }

    public Compiler(com.google.javascript.jscomp.ErrorManager errorManager) {
        this();
        setErrorManager(errorManager);
    }

    public void setErrorManager(com.google.javascript.jscomp.ErrorManager errorManager) {
        com.google.common.base.Preconditions.checkNotNull(errorManager, "the error manager cannot be null");
        this.errorManager = errorManager;
    }

    private com.google.javascript.jscomp.MessageFormatter createMessageFormatter() {
        boolean colorize = options.shouldColorizeErrorOutput();
        return options.errorFormat.toFormatter(this, colorize);
    }

    public void initOptions(com.google.javascript.jscomp.CompilerOptions options) {
        this.options = options;
        if (errorManager == null) {
            if (outStream == null) {
                setErrorManager(new com.google.javascript.jscomp.LoggerErrorManager(createMessageFormatter(), com.google.javascript.jscomp.Compiler.logger));
            } else {
                com.google.javascript.jscomp.PrintStreamErrorManager printer = new com.google.javascript.jscomp.PrintStreamErrorManager(createMessageFormatter(), outStream);
                printer.setSummaryDetailLevel(options.summaryDetailLevel);
                setErrorManager(printer);
            }
        }
        if (options.enables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES)) {
            options.checkTypes = true;
        } else if (options.disables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES)) {
            options.checkTypes = false;
        } else if (!options.checkTypes) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroup.forType(com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR), com.google.javascript.jscomp.CheckLevel.OFF);
        }
        if (options.checkGlobalThisLevel.isOn() && (!options.disables(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS))) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS, options.checkGlobalThisLevel);
        }
        if (options.getLanguageIn() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT) {
            options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT, com.google.javascript.jscomp.CheckLevel.ERROR);
        }
        java.util.List<com.google.javascript.jscomp.WarningsGuard> guards = com.google.common.collect.Lists.newArrayList();
        guards.add(new com.google.javascript.jscomp.SuppressDocWarningsGuard(getDiagnosticGroups().getRegisteredGroups()));
        guards.add(options.getWarningsGuard());
        com.google.javascript.jscomp.ComposeWarningsGuard composedGuards = new com.google.javascript.jscomp.ComposeWarningsGuard(guards);
        if ((!options.checkSymbols) && (!composedGuards.enables(com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES))) {
            composedGuards.addGuard(new com.google.javascript.jscomp.DiagnosticGroupWarningsGuard(com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES, com.google.javascript.jscomp.CheckLevel.OFF));
        }
        this.warningsGuard = composedGuards;
    }

    public void init(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSSourceFile[] inputs, com.google.javascript.jscomp.CompilerOptions options) {
        init(com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSSourceFile>newArrayList(inputs), options);
    }

    public <T1 extends com.google.javascript.jscomp.SourceFile, T2 extends com.google.javascript.jscomp.SourceFile> void init(java.util.List<T1> externs, java.util.List<T2> inputs, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.javascript.jscomp.JSModule module = new com.google.javascript.jscomp.JSModule(com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME);
        for (com.google.javascript.jscomp.SourceFile input : inputs) {
            module.add(input);
        }
        initModules(externs, com.google.common.collect.Lists.newArrayList(module), options);
    }

    public void init(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        initModules(com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSModule>newArrayList(modules), options);
    }

    public <T extends com.google.javascript.jscomp.SourceFile> void initModules(java.util.List<T> externs, java.util.List<com.google.javascript.jscomp.JSModule> modules, com.google.javascript.jscomp.CompilerOptions options) {
        initOptions(options);
        checkFirstModule(modules);
        com.google.javascript.jscomp.Compiler.fillEmptyModules(modules);
        this.externs = makeCompilerInput(externs, true);
        this.modules = modules;
        if (modules.size() > 1) {
            try {
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(modules);
            } catch (com.google.javascript.jscomp.JSModuleGraph.ModuleDependenceException e) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR, e.getModule().getName(), e.getDependentModule().getName()));
                return;
            }
        } else {
            this.moduleGraph = null;
        }
        this.inputs = com.google.javascript.jscomp.Compiler.getAllInputsFromModules(modules);
        initBasedOnOptions();
        initInputsByIdMap();
    }

    private void initBasedOnOptions() {
        if (options.sourceMapOutputPath != null) {
            sourceMap = options.sourceMapFormat.getInstance();
            sourceMap.setPrefixMappings(options.sourceMapLocationMappings);
        }
    }

    private <T extends com.google.javascript.jscomp.SourceFile> java.util.List<com.google.javascript.jscomp.CompilerInput> makeCompilerInput(java.util.List<T> files, boolean isExtern) {
        java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = com.google.common.collect.Lists.newArrayList();
        for (T file : files) {
            inputs.add(new com.google.javascript.jscomp.CompilerInput(file, isExtern));
        }
        return inputs;
    }

    private static final com.google.javascript.jscomp.DiagnosticType EMPTY_MODULE_LIST_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EMPTY_MODULE_LIST_ERROR", "At least one module must be provided");

    private static final com.google.javascript.jscomp.DiagnosticType EMPTY_ROOT_MODULE_ERROR = com.google.javascript.jscomp.DiagnosticType.error("JSC_EMPTY_ROOT_MODULE_ERROR", "Root module '{0}' must contain at least one source code input");

    private void checkFirstModule(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        if (modules.isEmpty()) {
            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR));
        } else if (modules.get(0).getInputs().isEmpty() && (modules.size() > 1)) {
            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR, modules.get(0).getName()));
        }
    }

    static java.lang.String createFillFileName(java.lang.String moduleName) {
        return ("[" + moduleName) + "]";
    }

    private static void fillEmptyModules(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        for (com.google.javascript.jscomp.JSModule module : modules) {
            if (module.getInputs().isEmpty()) {
                module.add(com.google.javascript.jscomp.SourceFile.fromCode(com.google.javascript.jscomp.Compiler.createFillFileName(module.getName()), ""));
            }
        }
    }

    public void rebuildInputsFromModules() {
        inputs = com.google.javascript.jscomp.Compiler.getAllInputsFromModules(modules);
        initInputsByIdMap();
    }

    private static java.util.List<com.google.javascript.jscomp.CompilerInput> getAllInputsFromModules(java.util.List<com.google.javascript.jscomp.JSModule> modules) {
        java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = com.google.common.collect.Lists.newArrayList();
        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSModule> inputMap = com.google.common.collect.Maps.newHashMap();
        for (com.google.javascript.jscomp.JSModule module : modules) {
            for (com.google.javascript.jscomp.CompilerInput input : module.getInputs()) {
                java.lang.String inputName = input.getName();
                inputs.add(input);
                inputMap.put(inputName, module);
            }
        }
        return inputs;
    }

    static final com.google.javascript.jscomp.DiagnosticType DUPLICATE_INPUT = com.google.javascript.jscomp.DiagnosticType.error("JSC_DUPLICATE_INPUT", "Duplicate input: {0}");

    static final com.google.javascript.jscomp.DiagnosticType DUPLICATE_EXTERN_INPUT = com.google.javascript.jscomp.DiagnosticType.error("JSC_DUPLICATE_EXTERN_INPUT", "Duplicate extern input: {0}");

    void initInputsByIdMap() {
        inputsById = new java.util.HashMap<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput>();
        for (com.google.javascript.jscomp.CompilerInput input : externs) {
            com.google.javascript.rhino.InputId id = input.getInputId();
            com.google.javascript.jscomp.CompilerInput previous = putCompilerInput(id, input);
            if (previous != null) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT, input.getName()));
            }
        }
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            com.google.javascript.rhino.InputId id = input.getInputId();
            com.google.javascript.jscomp.CompilerInput previous = putCompilerInput(id, input);
            if (previous != null) {
                report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT, input.getName()));
            }
        }
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.SourceFile extern, com.google.javascript.jscomp.SourceFile input, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.newArrayList(extern), com.google.common.collect.Lists.newArrayList(input), options);
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.SourceFile extern, com.google.javascript.jscomp.JSSourceFile[] input, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.newArrayList(extern), com.google.common.collect.Lists.newArrayList(input), options);
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile extern, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        return compileModules(com.google.common.collect.Lists.newArrayList(extern), com.google.common.collect.Lists.newArrayList(modules), options);
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSSourceFile[] inputs, com.google.javascript.jscomp.CompilerOptions options) {
        return compile(com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(inputs), options);
    }

    public <T1 extends com.google.javascript.jscomp.SourceFile, T2 extends com.google.javascript.jscomp.SourceFile> com.google.javascript.jscomp.Result compile(java.util.List<T1> externs, java.util.List<T2> inputs, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.common.base.Preconditions.checkState(jsRoot == null);
        try {
            init(externs, inputs, options);
            if (hasErrors()) {
                return getResult();
            }
            return compile();
        } finally {
            com.google.javascript.jscomp.Tracer t = newTracer("generateReport");
            errorManager.generateReport();
            stopTracer(t, "generateReport");
        }
    }

    public com.google.javascript.jscomp.Result compile(com.google.javascript.jscomp.JSSourceFile[] externs, com.google.javascript.jscomp.JSModule[] modules, com.google.javascript.jscomp.CompilerOptions options) {
        return compileModules(com.google.common.collect.Lists.<com.google.javascript.jscomp.SourceFile>newArrayList(externs), com.google.common.collect.Lists.<com.google.javascript.jscomp.JSModule>newArrayList(modules), options);
    }

    public <T extends com.google.javascript.jscomp.SourceFile> com.google.javascript.jscomp.Result compileModules(java.util.List<T> externs, java.util.List<com.google.javascript.jscomp.JSModule> modules, com.google.javascript.jscomp.CompilerOptions options) {
        com.google.common.base.Preconditions.checkState(jsRoot == null);
        try {
            initModules(externs, modules, options);
            if (hasErrors()) {
                return getResult();
            }
            return compile();
        } finally {
            com.google.javascript.jscomp.Tracer t = newTracer("generateReport");
            errorManager.generateReport();
            stopTracer(t, "generateReport");
        }
    }

    private com.google.javascript.jscomp.Result compile() {
        return runInCompilerThread(new java.util.concurrent.Callable<com.google.javascript.jscomp.Result>() {
            @java.lang.Override
            public com.google.javascript.jscomp.Result call() throws java.lang.Exception {
                compileInternal();
                return getResult();
            }
        });
    }

    public void disableThreads() {
        useThreads = false;
    }

    private <T> T runInCompilerThread(final java.util.concurrent.Callable<T> callable) {
        return com.google.javascript.jscomp.Compiler.runCallable(callable, useThreads, options.tracer.isOn());
    }

    static <T> T runCallableWithLargeStack(final java.util.concurrent.Callable<T> callable) {
        return com.google.javascript.jscomp.Compiler.runCallable(callable, true, false);
    }

    @java.lang.SuppressWarnings("unchecked")
    static <T> T runCallable(final java.util.concurrent.Callable<T> callable, boolean useLargeStackThread, boolean trace) {
        final boolean dumpTraceReport = trace;
        final java.lang.Object[] result = new java.lang.Object[1];
        final java.lang.Throwable[] exception = new java.lang.Throwable[1];
        java.lang.Runnable runnable = new java.lang.Runnable() {
            @java.lang.Override
            public void run() {
                try {
                    if (dumpTraceReport) {
                        com.google.javascript.jscomp.Tracer.initCurrentThreadTrace();
                    }
                    result[0] = callable.call();
                } catch (java.lang.Throwable e) {
                    exception[0] = e;
                } finally {
                    if (dumpTraceReport) {
                        com.google.javascript.jscomp.Tracer.logAndClearCurrentThreadTrace();
                    }
                }
            }
        };
        if (useLargeStackThread) {
            java.lang.Thread th = new java.lang.Thread(null, runnable, "jscompiler", com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE);
            th.start();
            while (true) {
                try {
                    th.join();
                    break;
                } catch (java.lang.InterruptedException ignore) {
                }
            } 
        } else {
            runnable.run();
        }
        if (exception[0] != null) {
            throw new java.lang.RuntimeException(exception[0]);
        }
        return ((T) (result[0]));
    }

    private void compileInternal() {
        setProgress(0.0);
        parse();
        setProgress(0.15);
        if (hasErrors()) {
            return;
        }
        if (!precheck()) {
            return;
        }
        if (options.nameAnonymousFunctionsOnly) {
            check();
            return;
        }
        if (!options.skipAllPasses) {
            check();
            if (hasErrors()) {
                return;
            }
            if (options.isExternExportsEnabled() || (options.externExportsPath != null)) {
                externExports();
            }
            if (!options.ideMode) {
                optimize();
            }
        }
        if (options.recordFunctionInformation) {
            recordFunctionInformation();
        }
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.START_AND_END) {
            runSanityCheck();
        }
        setProgress(1.0);
    }

    public void parse() {
        parseInputs();
    }

    com.google.javascript.jscomp.PassConfig getPassConfig() {
        if (passes == null) {
            passes = createPassConfigInternal();
        }
        return passes;
    }

    com.google.javascript.jscomp.PassConfig createPassConfigInternal() {
        return new com.google.javascript.jscomp.DefaultPassConfig(options);
    }

    public void setPassConfig(com.google.javascript.jscomp.PassConfig passes) {
        com.google.common.base.Preconditions.checkNotNull(passes);
        if (this.passes != null) {
            throw new java.lang.IllegalStateException("this.passes has already been assigned");
        }
        this.passes = passes;
    }

    boolean precheck() {
        return true;
    }

    public void check() {
        runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_CHECKS);
        com.google.javascript.jscomp.PhaseOptimizer phaseOptimizer = new com.google.javascript.jscomp.PhaseOptimizer(this, tracker, new com.google.javascript.jscomp.PhaseOptimizer.ProgressRange(getProgress(), 1.0));
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            phaseOptimizer.setSanityCheck(sanityCheck);
        }
        phaseOptimizer.consume(getPassConfig().getChecks());
        phaseOptimizer.process(externsRoot, jsRoot);
        if (hasErrors()) {
            return;
        }
        if (options.nameAnonymousFunctionsOnly) {
            return;
        }
        if (options.removeTryCatchFinally) {
            removeTryCatchFinally();
        }
        if ((((options.getTweakProcessing().shouldStrip() || (!options.stripTypes.isEmpty())) || (!options.stripNameSuffixes.isEmpty())) || (!options.stripTypePrefixes.isEmpty())) || (!options.stripNamePrefixes.isEmpty())) {
            stripCode(options.stripTypes, options.stripNameSuffixes, options.stripTypePrefixes, options.stripNamePrefixes);
        }
        runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime.BEFORE_OPTIMIZATIONS);
    }

    private void externExports() {
        com.google.javascript.jscomp.Compiler.logger.fine("Creating extern file for exports");
        startPass("externExports");
        com.google.javascript.jscomp.ExternExportsPass pass = new com.google.javascript.jscomp.ExternExportsPass(this);
        process(pass);
        externExports = pass.getGeneratedExterns();
        endPass();
    }

    @java.lang.Override
    void process(com.google.javascript.jscomp.CompilerPass p) {
        p.process(externsRoot, jsRoot);
    }

    private final com.google.javascript.jscomp.PassFactory sanityCheck = new com.google.javascript.jscomp.PassFactory("sanityCheck", false) {
        @java.lang.Override
        protected com.google.javascript.jscomp.CompilerPass createInternal(com.google.javascript.jscomp.AbstractCompiler compiler) {
            return new com.google.javascript.jscomp.SanityCheck(compiler);
        }
    };

    private void maybeSanityCheck() {
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            runSanityCheck();
        }
    }

    private void runSanityCheck() {
        sanityCheck.create(this).process(externsRoot, jsRoot);
    }

    void removeTryCatchFinally() {
        com.google.javascript.jscomp.Compiler.logger.fine("Remove try/catch/finally");
        startPass("removeTryCatchFinally");
        com.google.javascript.jscomp.RemoveTryCatch r = new com.google.javascript.jscomp.RemoveTryCatch(this);
        process(r);
        endPass();
    }

    void stripCode(java.util.Set<java.lang.String> stripTypes, java.util.Set<java.lang.String> stripNameSuffixes, java.util.Set<java.lang.String> stripTypePrefixes, java.util.Set<java.lang.String> stripNamePrefixes) {
        com.google.javascript.jscomp.Compiler.logger.fine("Strip code");
        startPass("stripCode");
        com.google.javascript.jscomp.StripCode r = new com.google.javascript.jscomp.StripCode(this, stripTypes, stripNameSuffixes, stripTypePrefixes, stripNamePrefixes);
        if (options.getTweakProcessing().shouldStrip()) {
            r.enableTweakStripping();
        }
        process(r);
        endPass();
    }

    private void runCustomPasses(com.google.javascript.jscomp.CustomPassExecutionTime executionTime) {
        if (options.customPasses != null) {
            com.google.javascript.jscomp.Tracer t = newTracer("runCustomPasses");
            try {
                for (com.google.javascript.jscomp.CompilerPass p : options.customPasses.get(executionTime)) {
                    process(p);
                }
            } finally {
                stopTracer(t, "runCustomPasses");
            }
        }
    }

    private com.google.javascript.jscomp.Tracer currentTracer = null;

    private java.lang.String currentPassName = null;

    void startPass(java.lang.String passName) {
        com.google.common.base.Preconditions.checkState(currentTracer == null);
        currentPassName = passName;
        currentTracer = newTracer(passName);
    }

    void endPass() {
        com.google.common.base.Preconditions.checkState(currentTracer != null, "Tracer should not be null at the end of a pass.");
        stopTracer(currentTracer, currentPassName);
        java.lang.String passToCheck = currentPassName;
        currentPassName = null;
        currentTracer = null;
        maybeSanityCheck();
    }

    com.google.javascript.jscomp.Tracer newTracer(java.lang.String passName) {
        java.lang.String comment = passName + (recentChange.hasCodeChanged() ? " on recently changed AST" : "");
        if (options.tracer.isOn()) {
            tracker.recordPassStart(passName);
        }
        return new com.google.javascript.jscomp.Tracer("Compiler", comment);
    }

    void stopTracer(com.google.javascript.jscomp.Tracer t, java.lang.String passName) {
        long result = t.stop();
        if (options.tracer.isOn()) {
            tracker.recordPassStop(passName, result);
        }
    }

    public com.google.javascript.jscomp.Result getResult() {
        com.google.javascript.jscomp.PassConfig.State state = getPassConfig().getIntermediateState();
        return new com.google.javascript.jscomp.Result(getErrors(), getWarnings(), debugLog.toString(), state.variableMap, state.propertyMap, state.anonymousFunctionNameMap, state.stringMap, functionInformationMap, sourceMap, externExports, state.cssNames, state.idGeneratorMap);
    }

    public com.google.javascript.jscomp.JSError[] getMessages() {
        return getErrors();
    }

    public com.google.javascript.jscomp.JSError[] getErrors() {
        return errorManager.getErrors();
    }

    public com.google.javascript.jscomp.JSError[] getWarnings() {
        return errorManager.getWarnings();
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRoot() {
        return externAndJsRoot;
    }

    private int nextUniqueNameId() {
        return uniqueNameId++;
    }

    @com.google.common.annotations.VisibleForTesting
    void resetUniqueNameId() {
        uniqueNameId = 0;
    }

    @java.lang.Override
    com.google.common.base.Supplier<java.lang.String> getUniqueNameIdSupplier() {
        final com.google.javascript.jscomp.Compiler self = this;
        return new com.google.common.base.Supplier<java.lang.String>() {
            @java.lang.Override
            public java.lang.String get() {
                return java.lang.String.valueOf(self.nextUniqueNameId());
            }
        };
    }

    @java.lang.Override
    boolean areNodesEqualForInlining(com.google.javascript.rhino.Node n1, com.google.javascript.rhino.Node n2) {
        if (options.ambiguateProperties || options.disambiguateProperties) {
            return n1.isEquivalentToTyped(n2);
        } else {
            return n1.isEquivalentTo(n2);
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CompilerInput getInput(com.google.javascript.rhino.InputId id) {
        return inputsById.get(id);
    }

    protected void removeExternInput(com.google.javascript.rhino.InputId id) {
        com.google.javascript.jscomp.CompilerInput input = getInput(id);
        if (input == null) {
            return;
        }
        com.google.common.base.Preconditions.checkState(input.isExtern(), "Not an extern input: %s", input.getName());
        inputsById.remove(id);
        externs.remove(input);
        com.google.javascript.rhino.Node root = input.getAstRoot(this);
        if (root != null) {
            root.detachFromParent();
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CompilerInput newExternInput(java.lang.String name) {
        com.google.javascript.jscomp.SourceAst ast = new com.google.javascript.jscomp.SyntheticAst(name);
        if (inputsById.containsKey(ast.getInputId())) {
            throw new java.lang.IllegalArgumentException("Conflicting externs name: " + name);
        }
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(ast, true);
        putCompilerInput(input.getInputId(), input);
        externsRoot.addChildToFront(ast.getAstRoot(this));
        externs.add(0, input);
        return input;
    }

    private com.google.javascript.jscomp.CompilerInput putCompilerInput(com.google.javascript.rhino.InputId id, com.google.javascript.jscomp.CompilerInput input) {
        input.setCompiler(this);
        return inputsById.put(id, input);
    }

    void addIncrementalSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.rhino.InputId id = ast.getInputId();
        com.google.common.base.Preconditions.checkState(getInput(id) == null, "Duplicate input %s", id.getIdName());
        putCompilerInput(id, new com.google.javascript.jscomp.CompilerInput(ast));
    }

    boolean replaceIncrementalSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput oldInput = getInput(ast.getInputId());
        com.google.common.base.Preconditions.checkNotNull(oldInput, "No input to replace: %s", ast.getInputId().getIdName());
        com.google.javascript.rhino.Node newRoot = ast.getAstRoot(this);
        if (newRoot == null) {
            return false;
        }
        com.google.javascript.rhino.Node oldRoot = oldInput.getAstRoot(this);
        if (oldRoot != null) {
            oldRoot.getParent().replaceChild(oldRoot, newRoot);
        } else {
            getRoot().getLastChild().addChildToBack(newRoot);
        }
        com.google.javascript.jscomp.CompilerInput newInput = new com.google.javascript.jscomp.CompilerInput(ast);
        putCompilerInput(ast.getInputId(), newInput);
        com.google.javascript.jscomp.JSModule module = oldInput.getModule();
        if (module != null) {
            module.addAfter(newInput, oldInput);
            module.remove(oldInput);
        }
        com.google.common.base.Preconditions.checkState(newInput.getInputId().equals(oldInput.getInputId()));
        com.google.javascript.rhino.InputId inputIdOnAst = newInput.getAstRoot(this).getInputId();
        com.google.common.base.Preconditions.checkState(newInput.getInputId().equals(inputIdOnAst));
        inputs.remove(oldInput);
        return true;
    }

    boolean addNewSourceAst(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput oldInput = getInput(ast.getInputId());
        if (oldInput != null) {
            throw new java.lang.IllegalStateException("Input already exists: " + ast.getInputId().getIdName());
        }
        com.google.javascript.rhino.Node newRoot = ast.getAstRoot(this);
        if (newRoot == null) {
            return false;
        }
        getRoot().getLastChild().addChildToBack(newRoot);
        com.google.javascript.jscomp.CompilerInput newInput = new com.google.javascript.jscomp.CompilerInput(ast);
        if ((moduleGraph == null) && (!modules.isEmpty())) {
            modules.get(0).add(newInput);
        }
        putCompilerInput(ast.getInputId(), newInput);
        return true;
    }

    @java.lang.Override
    com.google.javascript.jscomp.JSModuleGraph getModuleGraph() {
        return moduleGraph;
    }

    com.google.javascript.jscomp.JSModuleGraph getDegenerateModuleGraph() {
        return moduleGraph == null ? new com.google.javascript.jscomp.JSModuleGraph(modules) : moduleGraph;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSTypeRegistry getTypeRegistry() {
        if (typeRegistry == null) {
            typeRegistry = new com.google.javascript.rhino.jstype.JSTypeRegistry(oldErrorReporter, options.looseTypes);
        }
        return typeRegistry;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.MemoizedScopeCreator getTypedScopeCreator() {
        return getPassConfig().getTypedScopeCreator();
    }

    @java.lang.SuppressWarnings("unchecked")
    com.google.javascript.jscomp.DefaultPassConfig ensureDefaultPassConfig() {
        com.google.javascript.jscomp.PassConfig passes = getPassConfig().getBasePassConfig();
        com.google.common.base.Preconditions.checkState(passes instanceof com.google.javascript.jscomp.DefaultPassConfig, "PassConfigs must eventually delegate to the DefaultPassConfig");
        return ((com.google.javascript.jscomp.DefaultPassConfig) (passes));
    }

    public com.google.javascript.jscomp.SymbolTable buildKnownSymbolTable() {
        com.google.javascript.jscomp.SymbolTable symbolTable = new com.google.javascript.jscomp.SymbolTable(getTypeRegistry());
        com.google.javascript.jscomp.MemoizedScopeCreator typedScopeCreator = getTypedScopeCreator();
        if (typedScopeCreator != null) {
            symbolTable.addScopes(typedScopeCreator.getAllMemoizedScopes());
            symbolTable.addSymbolsFrom(typedScopeCreator);
        } else {
            symbolTable.findScopes(this, externsRoot, jsRoot);
        }
        com.google.javascript.jscomp.GlobalNamespace globalNamespace = ensureDefaultPassConfig().getGlobalNamespace();
        if (globalNamespace != null) {
            symbolTable.addSymbolsFrom(globalNamespace);
        }
        com.google.javascript.jscomp.ReferenceCollectingCallback refCollector = new com.google.javascript.jscomp.ReferenceCollectingCallback(this, com.google.javascript.jscomp.ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR);
        com.google.javascript.jscomp.NodeTraversal.traverse(this, getRoot(), refCollector);
        symbolTable.addSymbolsFrom(refCollector);
        com.google.javascript.jscomp.PreprocessorSymbolTable preprocessorSymbolTable = ensureDefaultPassConfig().getPreprocessorSymbolTable();
        if (preprocessorSymbolTable != null) {
            symbolTable.addSymbolsFrom(preprocessorSymbolTable);
        }
        symbolTable.fillNamespaceReferences();
        symbolTable.fillPropertyScopes();
        symbolTable.fillThisReferences(this, externsRoot, jsRoot);
        symbolTable.fillPropertySymbols(this, externsRoot, jsRoot);
        symbolTable.fillJSDocInfo(this, externsRoot, jsRoot);
        return symbolTable;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope getTopScope() {
        return getPassConfig().getTopScope();
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.ReverseAbstractInterpreter getReverseAbstractInterpreter() {
        if (abstractInterpreter == null) {
            com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter interpreter = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry());
            if (options.closurePass) {
                interpreter = new com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter(getCodingConvention(), getTypeRegistry()).append(interpreter).getFirst();
            }
            abstractInterpreter = interpreter;
        }
        return abstractInterpreter;
    }

    @java.lang.Override
    com.google.javascript.jscomp.TypeValidator getTypeValidator() {
        if (typeValidator == null) {
            typeValidator = new com.google.javascript.jscomp.TypeValidator(this);
        }
        return typeValidator;
    }

    com.google.javascript.rhino.Node parseInputs() {
        boolean devMode = options.devMode != com.google.javascript.jscomp.CompilerOptions.DevMode.OFF;
        if (externsRoot != null) {
            externsRoot.detachChildren();
        }
        if (jsRoot != null) {
            jsRoot.detachChildren();
        }
        jsRoot = com.google.javascript.rhino.IR.block();
        jsRoot.setIsSyntheticBlock(true);
        externsRoot = com.google.javascript.rhino.IR.block();
        externsRoot.setIsSyntheticBlock(true);
        externAndJsRoot = com.google.javascript.rhino.IR.block(externsRoot, jsRoot);
        externAndJsRoot.setIsSyntheticBlock(true);
        if (options.tracer.isOn()) {
            tracker = new com.google.javascript.jscomp.PerformanceTracker(jsRoot, options.tracer);
            addChangeHandler(tracker.getCodeChangeHandler());
        }
        com.google.javascript.jscomp.Tracer tracer = newTracer("parseInputs");
        try {
            for (com.google.javascript.jscomp.CompilerInput input : externs) {
                com.google.javascript.rhino.Node n = input.getAstRoot(this);
                if (hasErrors()) {
                    return null;
                }
                externsRoot.addChildToBack(n);
            }
            if (options.transformAMDToCJSModules || options.processCommonJSModules) {
                processAMDAndCommonJSModules();
            }
            hoistExterns(externsRoot);
            boolean staleInputs = false;
            if (options.dependencyOptions.needsManagement()) {
                for (com.google.javascript.jscomp.CompilerInput input : inputs) {
                    for (java.lang.String provide : input.getProvides()) {
                        getTypeRegistry().forwardDeclareType(provide);
                    }
                }
                try {
                    inputs = (moduleGraph == null ? new com.google.javascript.jscomp.JSModuleGraph(modules) : moduleGraph).manageDependencies(options.dependencyOptions, inputs);
                    staleInputs = true;
                } catch (com.google.javascript.jscomp.deps.SortedDependencies.CircularDependencyException e) {
                    report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.JSModule.CIRCULAR_DEPENDENCY_ERROR, e.getMessage()));
                    if (hasErrors()) {
                        return null;
                    }
                } catch (com.google.javascript.jscomp.deps.SortedDependencies.MissingProvideException e) {
                    report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR, e.getMessage()));
                    if (hasErrors()) {
                        return null;
                    }
                }
            }
            hoistNoCompileFiles();
            if (staleInputs) {
                repartitionInputs();
            }
            for (com.google.javascript.jscomp.CompilerInput input : inputs) {
                com.google.javascript.rhino.Node n = input.getAstRoot(this);
                if (n == null) {
                    continue;
                }
                if (devMode) {
                    runSanityCheck();
                    if (hasErrors()) {
                        return null;
                    }
                }
                if ((options.sourceMapOutputPath != null) || (options.nameReferenceReportPath != null)) {
                    com.google.javascript.jscomp.SourceInformationAnnotator sia = new com.google.javascript.jscomp.SourceInformationAnnotator(input.getName(), options.devMode != com.google.javascript.jscomp.CompilerOptions.DevMode.OFF);
                    com.google.javascript.jscomp.NodeTraversal.traverse(this, n, sia);
                }
                jsRoot.addChildToBack(n);
            }
            if (hasErrors()) {
                return null;
            }
            return externAndJsRoot;
        } finally {
            stopTracer(tracer, "parseInputs");
        }
    }

    private void hoistExterns(com.google.javascript.rhino.Node externsRoot) {
        boolean staleInputs = false;
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            if (options.dependencyOptions.needsManagement() && options.closurePass) {
                if ((!input.getProvides().isEmpty()) || (!input.getRequires().isEmpty())) {
                    continue;
                }
            }
            com.google.javascript.rhino.Node n = input.getAstRoot(this);
            if (n == null) {
                continue;
            }
            com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
            if ((info != null) && info.isExterns()) {
                externsRoot.addChildToBack(n);
                input.setIsExtern(true);
                input.getModule().remove(input);
                externs.add(input);
                staleInputs = true;
            }
        }
        if (staleInputs) {
            repartitionInputs();
        }
    }

    private void hoistNoCompileFiles() {
        boolean staleInputs = false;
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            com.google.javascript.rhino.Node n = input.getAstRoot(this);
            if (n == null) {
                continue;
            }
            com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
            if ((info != null) && info.isNoCompile()) {
                input.getModule().remove(input);
                staleInputs = true;
            }
        }
        if (staleInputs) {
            repartitionInputs();
        }
    }

    private void repartitionInputs() {
        com.google.javascript.jscomp.Compiler.fillEmptyModules(modules);
        rebuildInputsFromModules();
    }

    void processAMDAndCommonJSModules() {
        java.util.Map<java.lang.String, com.google.javascript.jscomp.JSModule> modulesByName = com.google.common.collect.Maps.newLinkedHashMap();
        java.util.Map<com.google.javascript.jscomp.CompilerInput, com.google.javascript.jscomp.JSModule> modulesByInput = com.google.common.collect.Maps.newLinkedHashMap();
        for (com.google.javascript.jscomp.CompilerInput input : inputs) {
            input.setCompiler(this);
            com.google.javascript.rhino.Node root = input.getAstRoot(this);
            if (root == null) {
                continue;
            }
            if (options.transformAMDToCJSModules) {
                new com.google.javascript.jscomp.TransformAMDToCJSModule(this).process(null, root);
            }
            if (options.processCommonJSModules) {
                com.google.javascript.jscomp.ProcessCommonJSModules cjs = new com.google.javascript.jscomp.ProcessCommonJSModules(this, options.commonJSModulePathPrefix);
                cjs.process(null, root);
                com.google.javascript.jscomp.JSModule m = cjs.getModule();
                if (m != null) {
                    modulesByName.put(m.getName(), m);
                    modulesByInput.put(input, m);
                }
            }
        }
        if (options.processCommonJSModules) {
            java.util.List<com.google.javascript.jscomp.JSModule> modules = com.google.common.collect.Lists.newArrayList(modulesByName.values());
            if (!modules.isEmpty()) {
                this.modules = modules;
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(this.modules);
            }
            for (com.google.javascript.jscomp.JSModule module : modules) {
                for (com.google.javascript.jscomp.CompilerInput input : module.getInputs()) {
                    for (java.lang.String require : input.getRequires()) {
                        com.google.javascript.jscomp.JSModule dependency = modulesByName.get(require);
                        if (dependency == null) {
                            report(com.google.javascript.jscomp.JSError.make(com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR, require));
                        } else {
                            module.addDependency(dependency);
                        }
                    }
                }
            }
            try {
                modules = com.google.common.collect.Lists.newArrayList();
                for (com.google.javascript.jscomp.CompilerInput input : this.moduleGraph.manageDependencies(options.dependencyOptions, inputs)) {
                    modules.add(modulesByInput.get(input));
                }
                this.modules = modules;
                this.moduleGraph = new com.google.javascript.jscomp.JSModuleGraph(modules);
            } catch (java.lang.Exception e) {
                com.google.common.base.Throwables.propagate(e);
            }
        }
    }

    public com.google.javascript.rhino.Node parse(com.google.javascript.jscomp.SourceFile file) {
        initCompilerOptionsIfTesting();
        addToDebugLog("Parsing: " + file.getName());
        return new com.google.javascript.jscomp.JsAst(file).getAstRoot(this);
    }

    private int syntheticCodeId = 0;

    @java.lang.Override
    com.google.javascript.rhino.Node parseSyntheticCode(java.lang.String js) {
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(com.google.javascript.jscomp.SourceFile.fromCode((" [synthetic:" + (++syntheticCodeId)) + "] ", js));
        putCompilerInput(input.getInputId(), input);
        return input.getAstRoot(this);
    }

    protected com.google.javascript.jscomp.CompilerOptions newCompilerOptions() {
        return new com.google.javascript.jscomp.CompilerOptions();
    }

    void initCompilerOptionsIfTesting() {
        if (options == null) {
            initOptions(newCompilerOptions());
        }
    }

    @java.lang.Override
    com.google.javascript.rhino.Node parseSyntheticCode(java.lang.String fileName, java.lang.String js) {
        initCompilerOptionsIfTesting();
        return parse(com.google.javascript.jscomp.SourceFile.fromCode(fileName, js));
    }

    @java.lang.Override
    com.google.javascript.rhino.Node parseTestCode(java.lang.String js) {
        initCompilerOptionsIfTesting();
        com.google.javascript.jscomp.CompilerInput input = new com.google.javascript.jscomp.CompilerInput(com.google.javascript.jscomp.SourceFile.fromCode("[testcode]", js));
        if (inputsById == null) {
            inputsById = com.google.common.collect.Maps.newHashMap();
        }
        putCompilerInput(input.getInputId(), input);
        return input.getAstRoot(this);
    }

    @java.lang.Override
    com.google.javascript.rhino.head.ErrorReporter getDefaultErrorReporter() {
        return defaultErrorReporter;
    }

    public java.lang.String toSource() {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String>() {
            @java.lang.Override
            public java.lang.String call() throws java.lang.Exception {
                com.google.javascript.jscomp.Tracer tracer = newTracer("toSource");
                try {
                    com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                    if (jsRoot != null) {
                        int i = 0;
                        for (com.google.javascript.rhino.Node scriptNode = jsRoot.getFirstChild(); scriptNode != null; scriptNode = scriptNode.getNext()) {
                            toSource(cb, i++, scriptNode);
                        }
                    }
                    return cb.toString();
                } finally {
                    stopTracer(tracer, "toSource");
                }
            }
        });
    }

    public java.lang.String[] toSourceArray() {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String[]>() {
            @java.lang.Override
            public java.lang.String[] call() throws java.lang.Exception {
                com.google.javascript.jscomp.Tracer tracer = newTracer("toSourceArray");
                try {
                    int numInputs = inputs.size();
                    java.lang.String[] sources = new java.lang.String[numInputs];
                    com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                    for (int i = 0; i < numInputs; i++) {
                        com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                        cb.reset();
                        toSource(cb, i, scriptNode);
                        sources[i] = cb.toString();
                    }
                    return sources;
                } finally {
                    stopTracer(tracer, "toSourceArray");
                }
            }
        });
    }

    public java.lang.String toSource(final com.google.javascript.jscomp.JSModule module) {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String>() {
            @java.lang.Override
            public java.lang.String call() throws java.lang.Exception {
                java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = module.getInputs();
                int numInputs = inputs.size();
                if (numInputs == 0) {
                    return "";
                }
                com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                for (int i = 0; i < numInputs; i++) {
                    com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                    if (scriptNode == null) {
                        throw new java.lang.IllegalArgumentException("Bad module: " + module.getName());
                    }
                    toSource(cb, i, scriptNode);
                }
                return cb.toString();
            }
        });
    }

    public java.lang.String[] toSourceArray(final com.google.javascript.jscomp.JSModule module) {
        return runInCompilerThread(new java.util.concurrent.Callable<java.lang.String[]>() {
            @java.lang.Override
            public java.lang.String[] call() throws java.lang.Exception {
                java.util.List<com.google.javascript.jscomp.CompilerInput> inputs = module.getInputs();
                int numInputs = inputs.size();
                if (numInputs == 0) {
                    return new java.lang.String[0];
                }
                java.lang.String[] sources = new java.lang.String[numInputs];
                com.google.javascript.jscomp.Compiler.CodeBuilder cb = new com.google.javascript.jscomp.Compiler.CodeBuilder();
                for (int i = 0; i < numInputs; i++) {
                    com.google.javascript.rhino.Node scriptNode = inputs.get(i).getAstRoot(Compiler.this);
                    if (scriptNode == null) {
                        throw new java.lang.IllegalArgumentException("Bad module input: " + inputs.get(i).getName());
                    }
                    cb.reset();
                    toSource(cb, i, scriptNode);
                    sources[i] = cb.toString();
                }
                return sources;
            }
        });
    }

    public void toSource(final com.google.javascript.jscomp.Compiler.CodeBuilder cb, final int inputSeqNum, final com.google.javascript.rhino.Node root) {
        runInCompilerThread(new java.util.concurrent.Callable<java.lang.Void>() {
            @java.lang.Override
            public java.lang.Void call() throws java.lang.Exception {
                if (options.printInputDelimiter) {
                    if ((cb.getLength() > 0) && (!cb.endsWith("\n"))) {
                        cb.append("\n");
                    }
                    com.google.common.base.Preconditions.checkState(root.isScript());
                    java.lang.String delimiter = options.inputDelimiter;
                    java.lang.String inputName = root.getInputId().getIdName();
                    java.lang.String sourceName = root.getSourceFileName();
                    com.google.common.base.Preconditions.checkState(sourceName != null);
                    com.google.common.base.Preconditions.checkState(!sourceName.isEmpty());
                    delimiter = delimiter.replaceAll("%name%", java.util.regex.Matcher.quoteReplacement(inputName)).replaceAll("%num%", java.lang.String.valueOf(inputSeqNum));
                    cb.append(delimiter).append("\n");
                }
                if ((root.getJSDocInfo() != null) && (root.getJSDocInfo().getLicense() != null)) {
                    cb.append("/*\n").append(root.getJSDocInfo().getLicense()).append("*/\n");
                }
                if (options.sourceMapOutputPath != null) {
                    sourceMap.setStartingPosition(cb.getLineIndex(), cb.getColumnIndex());
                }
                java.lang.String code = toSource(root, sourceMap, inputSeqNum == 0);
                if (!code.isEmpty()) {
                    cb.append(code);
                    int length = code.length();
                    char lastChar = code.charAt(length - 1);
                    char secondLastChar = (length >= 2) ? code.charAt(length - 2) : '\u0000';
                    boolean hasSemiColon = (lastChar == ';') || ((lastChar == '\n') && (secondLastChar == ';'));
                    if (!hasSemiColon) {
                        cb.append(";");
                    }
                }
                return null;
            }
        });
    }

    @java.lang.Override
    java.lang.String toSource(com.google.javascript.rhino.Node n) {
        initCompilerOptionsIfTesting();
        return toSource(n, null, true);
    }

    private java.lang.String toSource(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.SourceMap sourceMap, boolean firstOutput) {
        com.google.javascript.jscomp.CodePrinter.Builder builder = new com.google.javascript.jscomp.CodePrinter.Builder(n);
        builder.setPrettyPrint(options.prettyPrint);
        builder.setLineBreak(options.lineBreak);
        builder.setPreferLineBreakAtEndOfFile(options.preferLineBreakAtEndOfFile);
        builder.setSourceMap(sourceMap);
        builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);
        builder.setTagAsStrict(firstOutput && (options.getLanguageOut() == com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT));
        builder.setLineLengthThreshold(options.lineLengthThreshold);
        java.nio.charset.Charset charset = (options.outputCharset != null) ? java.nio.charset.Charset.forName(options.outputCharset) : null;
        builder.setOutputCharset(charset);
        return builder.build();
    }

    public static class CodeBuilder {
        private final java.lang.StringBuilder sb = new java.lang.StringBuilder();

        private int lineCount = 0;

        private int colCount = 0;

        void reset() {
            sb.setLength(0);
        }

        com.google.javascript.jscomp.Compiler.CodeBuilder append(java.lang.String str) {
            sb.append(str);
            int index = -1;
            int lastIndex = index;
            while ((index = str.indexOf('\n', index + 1)) >= 0) {
                ++lineCount;
                lastIndex = index;
            } 
            if (lastIndex == (-1)) {
                colCount += str.length();
            } else {
                colCount = str.length() - (lastIndex + 1);
            }
            return this;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return sb.toString();
        }

        public int getLength() {
            return sb.length();
        }

        int getLineIndex() {
            return lineCount;
        }

        int getColumnIndex() {
            return colCount;
        }

        boolean endsWith(java.lang.String suffix) {
            return (sb.length() > suffix.length()) && suffix.equals(sb.substring(sb.length() - suffix.length()));
        }
    }

    public void optimize() {
        normalize();
        com.google.javascript.jscomp.PhaseOptimizer phaseOptimizer = new com.google.javascript.jscomp.PhaseOptimizer(this, tracker, null);
        if (options.devMode == com.google.javascript.jscomp.CompilerOptions.DevMode.EVERY_PASS) {
            phaseOptimizer.setSanityCheck(sanityCheck);
        }
        phaseOptimizer.consume(getPassConfig().getOptimizations());
        phaseOptimizer.process(externsRoot, jsRoot);
        if (hasErrors()) {
            return;
        }
    }

    @java.lang.Override
    void setCssRenamingMap(com.google.javascript.jscomp.CssRenamingMap map) {
        options.cssRenamingMap = map;
    }

    @java.lang.Override
    com.google.javascript.jscomp.CssRenamingMap getCssRenamingMap() {
        return options.cssRenamingMap;
    }

    public void processDefines() {
        new com.google.javascript.jscomp.DefaultPassConfig(options).processDefines.create(this).process(externsRoot, jsRoot);
    }

    boolean isInliningForbidden() {
        return (options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.HEURISTIC) || (options.propertyRenaming == com.google.javascript.jscomp.PropertyRenamingPolicy.AGGRESSIVE_HEURISTIC);
    }

    com.google.javascript.jscomp.ControlFlowGraph<com.google.javascript.rhino.Node> computeCFG() {
        com.google.javascript.jscomp.Compiler.logger.fine("Computing Control Flow Graph");
        com.google.javascript.jscomp.Tracer tracer = newTracer("computeCFG");
        com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(this, true, false);
        process(cfa);
        stopTracer(tracer, "computeCFG");
        return cfa.getCfg();
    }

    public void normalize() {
        com.google.javascript.jscomp.Compiler.logger.fine("Normalizing");
        startPass("normalize");
        process(new com.google.javascript.jscomp.Normalize(this, false));
        endPass();
    }

    @java.lang.Override
    void prepareAst(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.CompilerPass pass = new com.google.javascript.jscomp.PrepareAst(this);
        pass.process(null, root);
    }

    void recordFunctionInformation() {
        com.google.javascript.jscomp.Compiler.logger.fine("Recording function information");
        startPass("recordFunctionInformation");
        com.google.javascript.jscomp.RecordFunctionInformation recordFunctionInfoPass = new com.google.javascript.jscomp.RecordFunctionInformation(this, getPassConfig().getIntermediateState().functionNames);
        process(recordFunctionInfoPass);
        functionInformationMap = recordFunctionInfoPass.getMap();
        endPass();
    }

    protected final com.google.javascript.jscomp.CodeChangeHandler.RecentChange recentChange = new com.google.javascript.jscomp.CodeChangeHandler.RecentChange();

    private final java.util.List<com.google.javascript.jscomp.CodeChangeHandler> codeChangeHandlers = com.google.common.collect.Lists.<com.google.javascript.jscomp.CodeChangeHandler>newArrayList();

    static final java.lang.String SYNTHETIC_EXTERNS = "{SyntheticVarsDeclar}";

    private com.google.javascript.jscomp.CompilerInput synthesizedExternsInput = null;

    @java.lang.Override
    void addChangeHandler(com.google.javascript.jscomp.CodeChangeHandler handler) {
        codeChangeHandlers.add(handler);
    }

    @java.lang.Override
    void removeChangeHandler(com.google.javascript.jscomp.CodeChangeHandler handler) {
        codeChangeHandlers.remove(handler);
    }

    @java.lang.Override
    public void reportCodeChange() {
        for (com.google.javascript.jscomp.CodeChangeHandler handler : codeChangeHandlers) {
            handler.reportChange();
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CodingConvention getCodingConvention() {
        com.google.javascript.jscomp.CodingConvention convention = options.getCodingConvention();
        convention = (convention != null) ? convention : defaultCodingConvention;
        return convention;
    }

    @java.lang.Override
    public boolean isIdeMode() {
        return options.ideMode;
    }

    @java.lang.Override
    public boolean acceptEcmaScript5() {
        switch (options.getLanguageIn()) {
            case ECMASCRIPT5 :
            case ECMASCRIPT5_STRICT :
                return true;
        }
        return false;
    }

    public com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode() {
        return options.getLanguageIn();
    }

    @java.lang.Override
    public boolean acceptConstKeyword() {
        return options.acceptConstKeyword;
    }

    @java.lang.Override
    com.google.javascript.jscomp.parsing.Config getParserConfig() {
        if (parserConfig == null) {
            com.google.javascript.jscomp.parsing.Config.LanguageMode mode;
            switch (options.getLanguageIn()) {
                case ECMASCRIPT3 :
                    mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3;
                    break;
                case ECMASCRIPT5 :
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(392).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR",com.google.javascript.jscomp.Compiler.MODULE_DEPENDENCY_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR",com.google.javascript.jscomp.Compiler.OPTIMIZE_LOOP_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR",com.google.javascript.jscomp.Compiler.EMPTY_ROOT_MODULE_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.oldErrorReporter",com.google.javascript.jscomp.Compiler.this.oldErrorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT",com.google.javascript.jscomp.Compiler.DUPLICATE_EXTERN_INPUT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.abstractInterpreter",com.google.javascript.jscomp.Compiler.this.abstractInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.errorManager",com.google.javascript.jscomp.Compiler.this.errorManager);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.uniqueNameId",com.google.javascript.jscomp.Compiler.this.uniqueNameId);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.sourceMap",com.google.javascript.jscomp.Compiler.this.sourceMap);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.tracker",com.google.javascript.jscomp.Compiler.this.tracker);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.recentChange",com.google.javascript.jscomp.Compiler.this.recentChange);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.progress",com.google.javascript.jscomp.Compiler.this.progress);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.sanityCheck",com.google.javascript.jscomp.Compiler.this.sanityCheck);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.defaultCodingConvention",com.google.javascript.jscomp.Compiler.this.defaultCodingConvention);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME",com.google.javascript.jscomp.Compiler.SINGLETON_MODULE_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.codeChangeHandlers",com.google.javascript.jscomp.Compiler.this.codeChangeHandlers);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.syntheticCodeId",com.google.javascript.jscomp.Compiler.this.syntheticCodeId);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.injectedLibraries",com.google.javascript.jscomp.Compiler.this.injectedLibraries);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.moduleGraph",com.google.javascript.jscomp.Compiler.this.moduleGraph);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS",com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.parserConfig",com.google.javascript.jscomp.Compiler.this.parserConfig);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.synthesizedExternsInput",com.google.javascript.jscomp.Compiler.this.synthesizedExternsInput);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.hasRegExpGlobalReferences",com.google.javascript.jscomp.Compiler.this.hasRegExpGlobalReferences);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.externs",com.google.javascript.jscomp.Compiler.this.externs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE",com.google.javascript.jscomp.Compiler.COMPILER_STACK_SIZE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.passes",com.google.javascript.jscomp.Compiler.this.passes);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.typeRegistry",com.google.javascript.jscomp.Compiler.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.logger",com.google.javascript.jscomp.Compiler.logger);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.jsRoot",com.google.javascript.jscomp.Compiler.this.jsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.currentPassName",com.google.javascript.jscomp.Compiler.this.currentPassName);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE",com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.externAndJsRoot",com.google.javascript.jscomp.Compiler.this.externAndJsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.functionInformationMap",com.google.javascript.jscomp.Compiler.this.functionInformationMap);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR",com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.externExports",com.google.javascript.jscomp.Compiler.this.externExports);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.typeValidator",com.google.javascript.jscomp.Compiler.this.typeValidator);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.outStream",com.google.javascript.jscomp.Compiler.this.outStream);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.debugLog",com.google.javascript.jscomp.Compiler.this.debugLog);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.defaultErrorReporter",com.google.javascript.jscomp.Compiler.this.defaultErrorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR",com.google.javascript.jscomp.Compiler.EMPTY_MODULE_LIST_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.globalRefMap",com.google.javascript.jscomp.Compiler.this.globalRefMap);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT",com.google.javascript.jscomp.Compiler.DUPLICATE_INPUT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.useThreads",com.google.javascript.jscomp.Compiler.this.useThreads);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.inputsById",com.google.javascript.jscomp.Compiler.this.inputsById);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR",com.google.javascript.jscomp.Compiler.MISSING_ENTRY_ERROR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.options",com.google.javascript.jscomp.Compiler.this.options);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.modules",com.google.javascript.jscomp.Compiler.this.modules);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.warningsGuard",com.google.javascript.jscomp.Compiler.this.warningsGuard);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.inputs",com.google.javascript.jscomp.Compiler.this.inputs);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.externsRoot",com.google.javascript.jscomp.Compiler.this.externsRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectInput("com.google.javascript.jscomp.Compiler.this.currentTracer",com.google.javascript.jscomp.Compiler.this.currentTracer);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(392).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT5;

                    break;
                case ECMASCRIPT5_STRICT :
                    mode = com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT5_STRICT;
                    break;
                default :
                    throw new java.lang.IllegalStateException("unexpected language mode");
            }
            parserConfig = com.google.javascript.jscomp.parsing.ParserRunner.createConfig(isIdeMode(), mode, acceptConstKeyword(), options.extraAnnotationNames);
        }
        return parserConfig;
    }

    @java.lang.Override
    public boolean isTypeCheckingEnabled() {
        return options.checkTypes;
    }

    protected com.google.javascript.jscomp.DiagnosticGroups getDiagnosticGroups() {
        return new com.google.javascript.jscomp.DiagnosticGroups();
    }

    @java.lang.Override
    public void report(com.google.javascript.jscomp.JSError error) {
        com.google.javascript.jscomp.CheckLevel level = error.getDefaultLevel();
        if (warningsGuard != null) {
            com.google.javascript.jscomp.CheckLevel newLevel = warningsGuard.level(error);
            if (newLevel != null) {
                level = newLevel;
            }
        }
        if (level.isOn()) {
            if (getOptions().errorHandler != null) {
                getOptions().errorHandler.report(level, error);
            }
            errorManager.report(level, error);
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.CheckLevel getErrorLevel(com.google.javascript.jscomp.JSError error) {
        com.google.common.base.Preconditions.checkNotNull(options);
        return warningsGuard.level(error);
    }

    @java.lang.Override
    void throwInternalError(java.lang.String message, java.lang.Exception cause) {
        java.lang.String finalMessage = ("INTERNAL COMPILER ERROR.\n" + "Please report this problem.\n") + message;
        java.lang.RuntimeException e = new java.lang.RuntimeException(finalMessage, cause);
        if (cause != null) {
            e.setStackTrace(cause.getStackTrace());
        }
        throw e;
    }

    public int getErrorCount() {
        return errorManager.getErrorCount();
    }

    public int getWarningCount() {
        return errorManager.getWarningCount();
    }

    @java.lang.Override
    boolean hasHaltingErrors() {
        return (!isIdeMode()) && (getErrorCount() > 0);
    }

    public boolean hasErrors() {
        return hasHaltingErrors();
    }

    @java.lang.Override
    void addToDebugLog(java.lang.String str) {
        debugLog.append(str);
        debugLog.append('\n');
        com.google.javascript.jscomp.Compiler.logger.fine(str);
    }

    @java.lang.Override
    com.google.javascript.jscomp.SourceFile getSourceFileByName(java.lang.String sourceName) {
        if (sourceName != null) {
            com.google.javascript.jscomp.CompilerInput input = inputsById.get(new com.google.javascript.rhino.InputId(sourceName));
            if (input != null) {
                return input.getSourceFile();
            }
        }
        return null;
    }

    @java.lang.Override
    public java.lang.String getSourceLine(java.lang.String sourceName, int lineNumber) {
        if (lineNumber < 1) {
            return null;
        }
        com.google.javascript.jscomp.SourceFile input = getSourceFileByName(sourceName);
        if (input != null) {
            return input.getLine(lineNumber);
        }
        return null;
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Region getSourceRegion(java.lang.String sourceName, int lineNumber) {
        if (lineNumber < 1) {
            return null;
        }
        com.google.javascript.jscomp.SourceFile input = getSourceFileByName(sourceName);
        if (input != null) {
            return input.getRegion(lineNumber);
        }
        return null;
    }

    @java.lang.Override
    com.google.javascript.rhino.Node getNodeForCodeInsertion(com.google.javascript.jscomp.JSModule module) {
        if (module == null) {
            if (inputs.isEmpty()) {
                throw new java.lang.IllegalStateException("No inputs");
            }
            return inputs.get(0).getAstRoot(this);
        }
        java.util.List<com.google.javascript.jscomp.CompilerInput> moduleInputs = module.getInputs();
        if (moduleInputs.size() > 0) {
            return moduleInputs.get(0).getAstRoot(this);
        }
        throw new java.lang.IllegalStateException("Root module has no inputs");
    }

    public com.google.javascript.jscomp.SourceMap getSourceMap() {
        return sourceMap;
    }

    com.google.javascript.jscomp.VariableMap getVariableMap() {
        return getPassConfig().getIntermediateState().variableMap;
    }

    com.google.javascript.jscomp.VariableMap getPropertyMap() {
        return getPassConfig().getIntermediateState().propertyMap;
    }

    com.google.javascript.jscomp.CompilerOptions getOptions() {
        return options;
    }

    com.google.javascript.jscomp.FunctionInformationMap getFunctionalInformationMap() {
        return functionInformationMap;
    }

    public static void setLoggingLevel(java.util.logging.Level level) {
        com.google.javascript.jscomp.Compiler.logger.setLevel(level);
    }

    public java.lang.String getAstDotGraph() throws java.io.IOException {
        if (jsRoot != null) {
            com.google.javascript.jscomp.ControlFlowAnalysis cfa = new com.google.javascript.jscomp.ControlFlowAnalysis(this, true, false);
            cfa.process(null, jsRoot);
            return com.google.javascript.jscomp.DotFormatter.toDot(jsRoot, cfa.getCfg());
        } else {
            return "";
        }
    }

    @java.lang.Override
    public com.google.javascript.jscomp.ErrorManager getErrorManager() {
        if (options == null) {
            initOptions(newCompilerOptions());
        }
        return errorManager;
    }

    @java.lang.Override
    java.util.List<com.google.javascript.jscomp.CompilerInput> getInputsInOrder() {
        return java.util.Collections.<com.google.javascript.jscomp.CompilerInput>unmodifiableList(inputs);
    }

    public java.util.Map<com.google.javascript.rhino.InputId, com.google.javascript.jscomp.CompilerInput> getInputsById() {
        return java.util.Collections.unmodifiableMap(inputsById);
    }

    java.util.List<com.google.javascript.jscomp.CompilerInput> getExternsInOrder() {
        return java.util.Collections.<com.google.javascript.jscomp.CompilerInput>unmodifiableList(externs);
    }

    public static class IntermediateState implements java.io.Serializable {
        private static final long serialVersionUID = 1L;

        com.google.javascript.rhino.Node externsRoot;

        private com.google.javascript.rhino.Node jsRoot;

        private java.util.List<com.google.javascript.jscomp.CompilerInput> externs;

        private java.util.List<com.google.javascript.jscomp.CompilerInput> inputs;

        private java.util.List<com.google.javascript.jscomp.JSModule> modules;

        private com.google.javascript.jscomp.PassConfig.State passConfigState;

        private com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

        private com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage lifeCycleStage;

        private java.util.Map<java.lang.String, com.google.javascript.rhino.Node> injectedLibraries;

        private IntermediateState() {
        }
    }

    public com.google.javascript.jscomp.Compiler.IntermediateState getState() {
        com.google.javascript.jscomp.Compiler.IntermediateState state = new com.google.javascript.jscomp.Compiler.IntermediateState();
        state.externsRoot = externsRoot;
        state.jsRoot = jsRoot;
        state.externs = externs;
        state.inputs = inputs;
        state.modules = modules;
        state.passConfigState = getPassConfig().getIntermediateState();
        state.typeRegistry = typeRegistry;
        state.lifeCycleStage = getLifeCycleStage();
        state.injectedLibraries = com.google.common.collect.Maps.newLinkedHashMap(injectedLibraries);
        return state;
    }

    public void setState(com.google.javascript.jscomp.Compiler.IntermediateState state) {
        externsRoot = state.externsRoot;
        jsRoot = state.jsRoot;
        externs = state.externs;
        inputs = state.inputs;
        modules = state.modules;
        passes = createPassConfigInternal();
        getPassConfig().setIntermediateState(state.passConfigState);
        typeRegistry = state.typeRegistry;
        setLifeCycleStage(state.lifeCycleStage);
        injectedLibraries.clear();
        injectedLibraries.putAll(state.injectedLibraries);
    }

    @com.google.common.annotations.VisibleForTesting
    java.util.List<com.google.javascript.jscomp.CompilerInput> getInputsForTesting() {
        return inputs;
    }

    @com.google.common.annotations.VisibleForTesting
    java.util.List<com.google.javascript.jscomp.CompilerInput> getExternsForTesting() {
        return externs;
    }

    @java.lang.Override
    boolean hasRegExpGlobalReferences() {
        return hasRegExpGlobalReferences;
    }

    @java.lang.Override
    void setHasRegExpGlobalReferences(boolean references) {
        hasRegExpGlobalReferences = references;
    }

    @java.lang.Override
    void updateGlobalVarReferences(java.util.Map<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection> refMapPatch, com.google.javascript.rhino.Node collectionRoot) {
        com.google.common.base.Preconditions.checkState(collectionRoot.isScript() || collectionRoot.isBlock());
        if (globalRefMap == null) {
            globalRefMap = new com.google.javascript.jscomp.GlobalVarReferenceMap(getInputsInOrder(), getExternsInOrder());
        }
        globalRefMap.updateGlobalVarReferences(refMapPatch, collectionRoot);
    }

    @java.lang.Override
    com.google.javascript.jscomp.GlobalVarReferenceMap getGlobalVarReferences() {
        return globalRefMap;
    }

    @java.lang.Override
    com.google.javascript.jscomp.CompilerInput getSynthesizedExternsInput() {
        if (synthesizedExternsInput == null) {
            synthesizedExternsInput = newExternInput(com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS);
        }
        return synthesizedExternsInput;
    }

    @java.lang.Override
    public double getProgress() {
        return progress;
    }

    @java.lang.Override
    void setProgress(double newProgress) {
        if (newProgress > 1.0) {
            progress = 1.0;
        } else if (newProgress < 0.0) {
            progress = 0.0;
        } else {
            progress = newProgress;
        }
    }

    public void replaceScript(com.google.javascript.jscomp.JsAst ast) {
        com.google.javascript.jscomp.CompilerInput input = this.getInput(ast.getInputId());
        if (!replaceIncrementalSourceAst(ast)) {
            return;
        }
        com.google.javascript.rhino.Node originalRoot = input.getAstRoot(this);
        processNewScript(ast, originalRoot);
    }

    public void addNewScript(com.google.javascript.jscomp.JsAst ast) {
        if (!addNewSourceAst(ast)) {
            return;
        }
        com.google.javascript.rhino.Node emptyScript = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        com.google.javascript.rhino.InputId inputId = ast.getInputId();
        emptyScript.setInputId(inputId);
        emptyScript.setStaticSourceFile(com.google.javascript.jscomp.SourceFile.fromCode(inputId.getIdName(), ""));
        processNewScript(ast, emptyScript);
    }

    private void processNewScript(com.google.javascript.jscomp.JsAst ast, com.google.javascript.rhino.Node originalRoot) {
        com.google.javascript.rhino.Node js = ast.getAstRoot(this);
        com.google.common.base.Preconditions.checkNotNull(js);
        runHotSwap(originalRoot, js, this.getCleanupPassConfig());
        runHotSwapPass(null, null, ensureDefaultPassConfig().garbageCollectChecks);
        this.getTypeRegistry().clearNamedTypes();
        this.removeSyntheticVarsInput();
        runHotSwap(originalRoot, js, this.ensureDefaultPassConfig());
    }

    private void runHotSwap(com.google.javascript.rhino.Node originalRoot, com.google.javascript.rhino.Node js, com.google.javascript.jscomp.PassConfig passConfig) {
        for (com.google.javascript.jscomp.PassFactory passFactory : passConfig.getChecks()) {
            runHotSwapPass(originalRoot, js, passFactory);
        }
    }

    private void runHotSwapPass(com.google.javascript.rhino.Node originalRoot, com.google.javascript.rhino.Node js, com.google.javascript.jscomp.PassFactory passFactory) {
        com.google.javascript.jscomp.HotSwapCompilerPass pass = passFactory.getHotSwapPass(this);
        if (pass != null) {
            com.google.javascript.jscomp.Compiler.logger.info("Performing HotSwap for pass " + passFactory.getName());
            pass.hotSwapScript(js, originalRoot);
        }
    }

    private com.google.javascript.jscomp.PassConfig getCleanupPassConfig() {
        return new com.google.javascript.jscomp.CleanupPasses(getOptions());
    }

    private void removeSyntheticVarsInput() {
        java.lang.String sourceName = com.google.javascript.jscomp.Compiler.SYNTHETIC_EXTERNS;
        removeExternInput(new com.google.javascript.rhino.InputId(sourceName));
    }

    @java.lang.Override
    com.google.javascript.rhino.Node ensureLibraryInjected(java.lang.String resourceName) {
        if (injectedLibraries.containsKey(resourceName)) {
            return null;
        }
        boolean isBase = "base".equals(resourceName);
        if (!isBase) {
            ensureLibraryInjected("base");
        }
        com.google.javascript.rhino.Node firstChild = loadLibraryCode(resourceName).removeChildren();
        com.google.javascript.rhino.Node lastChild = firstChild.getLastSibling();
        com.google.javascript.rhino.Node parent = getNodeForCodeInsertion(null);
        if (isBase) {
            parent.addChildrenToFront(firstChild);
        } else {
            parent.addChildrenAfter(firstChild, injectedLibraries.get("base"));
        }
        reportCodeChange();
        injectedLibraries.put(resourceName, lastChild);
        return lastChild;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node loadLibraryCode(java.lang.String resourceName) {
        java.lang.String originalCode;
        try {
            originalCode = com.google.common.io.CharStreams.toString(new java.io.InputStreamReader(com.google.javascript.jscomp.Compiler.class.getResourceAsStream(java.lang.String.format("js/%s.js", resourceName)), com.google.common.base.Charsets.UTF_8));
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException(e);
        }
        return com.google.javascript.jscomp.Normalize.parseAndNormalizeSyntheticCode(this, originalCode, java.lang.String.format("jscomp_%s_", resourceName));
    }

    public static java.lang.String getReleaseVersion() {
        java.util.ResourceBundle config = java.util.ResourceBundle.getBundle(com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE);
        return config.getString("compiler.version");
    }

    public static java.lang.String getReleaseDate() {
        java.util.ResourceBundle config = java.util.ResourceBundle.getBundle(com.google.javascript.jscomp.Compiler.CONFIG_RESOURCE);
        return config.getString("compiler.date");
    }
}
[11775622] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659837474972
GPR[SSUN]-1659837474972
-534884160
GPR[ESUN]-1659837475386
GPR[SSUN]-1659837475387
-534884160
GPR[SPVATF]-1659837475725
GPR[EPVATF]-1659837478004
GPR[SPS]-1659837478004
[11779572] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:491.
GPR[EPS]-1659837478922
GPR[SPVATF]-1659837478923
GPR[EPVATF]-1659837481140
GPR[SPS]-1659837481140
[11782723] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:491.
GPR[EPS]-1659837482073
GPR[ESUN]-1659837482073
GPR[SSUN]-1659837482073
-534884160
GPR[ESUN]-1659837482428
GPR[SSUN]-1659837482428
-534884160
GPR[ESUN]-1659837482774
GPR[SSUN]-1659837482775
-534884160
GPR[ESUN]-1659837483122
GPR[SSUN]-1659837483122
-534884160
GPR[SPVATF]-1659837483486
GPR[EPVATF]-1659837485804
GPR[SPS]-1659837485804
[11787355] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:396.
GPR[EPS]-1659837486705
GPR[ESUN]-1659837486705
GPR[SSUN]-1659837486705
2433571
GPR[ESUN]-1659837486951
GPR[SSUN]-1659837486951
2433571
GPR[ESUN]-1659837487196
GPR[SSUN]-1659837487197
-534884160
GPR[SPVATF]-1659837487536
GPR[EPVATF]-1659837489871
GPR[SPS]-1659837489871
[11791444] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:372.
GPR[EPS]-1659837490794
GPR[ESUN]-1659837490794
GPR[SSUN]-1659837490794
-534884160
GPR[ESUN]-1659837491144
GPR[SSUN]-1659837491144
-534884160
GPR[ESUN]-1659837491493
GPR[SSUN]-1659837491493
-534884160
GPR[SPVATF]-1659837491877
GPR[EPVATF]-1659837494273
GPR[SPS]-1659837494273
[11795825] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:498.
GPR[EPS]-1659837495175
GPR[SPVATF]-1659837495175
GPR[EPVATF]-1659837501158
GPR[SPS]-1659837501158
[11802757] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:498.
GPR[EPS]-1659837502107
GPR[ESUN]-1659837502108
GPR[SSUN]-1659837502108
-534884160
GPR[ESUN]-1659837502449
GPR[SSUN]-1659837502449
-534884160
GPR[ESUN]-1659837502812
GPR[SSUN]-1659837502812
-534884160
GPR[SPVATF]-1659837503153
GPR[EPVATF]-1659837504676
GPR[SPS]-1659837504676
[11806278] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:495.
GPR[EPS]-1659837505628
GPR[ESUN]-1659837505628
GPR[SSUN]-1659837505628
-534884160
GPR[SPVATF]-1659837505995
GPR[EPVATF]-1659837507505
GPR[SPS]-1659837507505
[11809082] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:488.
GPR[EPS]-1659837508432
GPR[ESUN]-1659837508432
GPR[SSUN]-1659837508433
-534884160
GPR[SPVATF]-1659837508793
GPR[EPVATF]-1659837510294
GPR[SPS]-1659837510294
[11811887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:487.
GPR[EPS]-1659837511237
GPR[ESUN]-1659837511237
GPR[SSUN]-1659837511238
-534884160
GPR[ESUN]-1659837511579
GPR[SSUN]-1659837511579
-534884160
GPR[ESUN]-1659837511924
GPR[SSUN]-1659837511924
-534884160
GPR[ESUN]-1659837512296
GPR[SSUN]-1659837512296
-534884160
GPR[SPVATF]-1659837512636
GPR[EPVATF]-1659837514114
GPR[SPS]-1659837514114
[11815709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:470.
GPR[EPS]-1659837515059
GPR[ESUN]-1659837515059
GPR[SSUN]-1659837515059
-534884160
GPR[SPVATF]-1659837515402
GPR[EPVATF]-1659837516896
GPR[SPS]-1659837516896
[11818575] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:469.
GPR[EPS]-1659837517925
GPR[ESUN]-1659837517925
GPR[SSUN]-1659837517925
-534884160
GPR[ESUN]-1659837518293
GPR[SSUN]-1659837518293
-534884160
GPR[SPVATF]-1659837518632
GPR[EPVATF]-1659837520168
GPR[SPS]-1659837520168
[11821731] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:463.
GPR[EPS]-1659837521082
GPR[ESUN]-1659837521082
GPR[SSUN]-1659837521082
-534884160
GPR[SPVATF]-1659837521452
GPR[EPVATF]-1659837522935
GPR[SPS]-1659837522935
[11824533] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:462.
GPR[EPS]-1659837523883
GPR[ESUN]-1659837523883
GPR[SSUN]-1659837523884
-534884160
GPR[ESUN]-1659837524224
GPR[SSUN]-1659837524224
-534884160
GPR[ESUN]-1659837524590
GPR[SSUN]-1659837524590
-534884160
GPR[ESUN]-1659837524932
GPR[SSUN]-1659837524932
-534884160
GPR[ESUN]-1659837525275
GPR[SSUN]-1659837525275
-534884160
GPR[SPVATF]-1659837525613
GPR[EPVATF]-1659837527152
GPR[SPS]-1659837527152
[11828740] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:437.
GPR[EPS]-1659837528090
GPR[SPVATF]-1659837528090
GPR[EPVATF]-1659837529634
GPR[SPS]-1659837529634
[11832031] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:437.
GPR[EPS]-1659837531381
GPR[ESUN]-1659837531381
GPR[SSUN]-1659837531381
-534884160
GPR[SPVATF]-1659837531756
GPR[EPVATF]-1659837533309
GPR[SPS]-1659837533309
[11834860] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:436.
GPR[EPS]-1659837534210
GPR[ESUN]-1659837534210
GPR[SSUN]-1659837534210
-534884160
GPR[ESUN]-1659837534593
GPR[SSUN]-1659837534593
-534884160
GPR[SPVATF]-1659837534932
GPR[EPVATF]-1659837536557
GPR[SPS]-1659837536557
[11838130] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:416.
GPR[EPS]-1659837537480
GPR[SPVATF]-1659837537480
GPR[EPVATF]-1659837539161
GPR[SPS]-1659837539161
[11840747] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:416.
GPR[EPS]-1659837540097
GPR[ESUN]-1659837540097
GPR[SSUN]-1659837540097
-534884160
GPR[SPVATF]-1659837540438
GPR[EPVATF]-1659837542094
GPR[SPS]-1659837542094
[11843703] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:414.
GPR[EPS]-1659837543053
GPR[SPVATF]-1659837543053
GPR[EPVATF]-1659837544835
GPR[SPS]-1659837544835
[11846440] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:414.
GPR[EPS]-1659837545790
GPR[ESUN]-1659837545790
GPR[SSUN]-1659837545790
-534884160
GPR[ESUN]-1659837546128
GPR[SSUN]-1659837546128
-534884160
GPR[SPVATF]-1659837546465
GPR[EPVATF]-1659837548234
GPR[SPS]-1659837548234
[11849843] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:395.
GPR[EPS]-1659837549193
GPR[ESUN]-1659837549193
GPR[SSUN]-1659837549193
-534884160
GPR[ESUN]-1659837549532
GPR[SSUN]-1659837549533
-534884160
GPR[ESUN]-1659837549876
GPR[SSUN]-1659837549876
-534884160
GPR[SPVATF]-1659837550215
GPR[EPVATF]-1659837552065
GPR[SPS]-1659837552065
[11853679] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:386.
GPR[EPS]-1659837553030
GPR[SPVATF]-1659837553030
GPR[EPVATF]-1659837554946
GPR[SPS]-1659837554946
[11856526] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:386.
GPR[EPS]-1659837555876
GPR[ESUN]-1659837555876
GPR[SSUN]-1659837555876
-534884160
GPR[ESUN]-1659837556260
GPR[SSUN]-1659837556260
-534884160
GPR[SPVATF]-1659837556600
GPR[EPVATF]-1659837558701
GPR[SPS]-1659837558701
[11860282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:378.
GPR[EPS]-1659837559632
GPR[ESUN]-1659837559632
GPR[SSUN]-1659837559632
-534884160
GPR[SPVATF]-1659837560011
GPR[EPVATF]-1659837562202
GPR[SPS]-1659837562202
[11863770] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:376.
GPR[EPS]-1659837563120
GPR[ESUN]-1659837563120
GPR[SSUN]-1659837563120
-534884160
GPR[SPVATF]-1659837563465
GPR[EPVATF]-1659837565702
GPR[SPS]-1659837565702
[11867257] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:375.
GPR[EPS]-1659837566607
GPR[ESUN]-1659837566607
GPR[SSUN]-1659837566608
-534884160
GPR[SPVATF]-1659837566956
GPR[EPVATF]-1659837569191
GPR[SPS]-1659837569192
[11870783] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:361.
GPR[EPS]-1659837570133
GPR[SPVATF]-1659837570134
GPR[EPVATF]-1659837572914
GPR[SPS]-1659837572914
[11874536] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:361.
GPR[EPS]-1659837573886
GPR[ESUN]-1659837573886
GPR[SSUN]-1659837573886
-534884160
GPR[SPVATF]-1659837574228
GPR[EPVATF]-1659837575758
GPR[SPS]-1659837575758
[11877344] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:360.
GPR[EPS]-1659837576694
GPR[ESUN]-1659837576694
GPR[SSUN]-1659837576695
-534884160
GPR[SPVATF]-1659837577043
GPR[EPVATF]-1659837578558
GPR[SPS]-1659837578558
[11880277] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:356.
GPR[EPS]-1659837579627
GPR[ESUN]-1659837579627
GPR[SSUN]-1659837579627
-534884160
GPR[SPVATF]-1659837579966
GPR[EPVATF]-1659837581503
GPR[SPS]-1659837581503
[11883141] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:354.
GPR[EPS]-1659837582491
GPR[ESUN]-1659837582491
GPR[SSUN]-1659837582491
-534884160
GPR[SPVATF]-1659837582832
GPR[EPVATF]-1659837584306
GPR[SPS]-1659837584306
[11885936] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:353.
GPR[EPS]-1659837585286
GPR[ESUN]-1659837585286
GPR[SSUN]-1659837585287
-534884160
GPR[SPVATF]-1659837585659
GPR[EPVATF]-1659837587240
GPR[SPS]-1659837587240
[11888847] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:351.
GPR[EPS]-1659837588197
GPR[ESUN]-1659837588197
GPR[SSUN]-1659837588197
-1217609450
GPR[ESUN]-1659837588415
GPR[SSUN]-1659837588415
-1217609450
GPR[SPVATF]-1659837588631
GPR[EPVATF]-1659837590237
GPR[SPS]-1659837590237
[11891472] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JSModule:94.
GPR[EPS]-1659837590822
GPR[ESUN]-1659837590822
GPR[SSUN]-1659837590822
1350153804
GPR[ESUN]-1659837591049
GPR[SSUN]-1659837591050
1350153804
GPR[SPVATF]-1659837591274
GPR[EPVATF]-1659837592802
GPR[SPS]-1659837592802
[11894037] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerInput:328.
GPR[EPS]-1659837593387
GPR[ESUN]-1659837593387
GPR[SSUN]-1659837593387
1350153804
GPR[SPVATF]-1659837593617
GPR[EPVATF]-1659837595260
GPR[SPS]-1659837595260
[11896476] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerInput:326.
GPR[EPS]-1659837595826
GPR[ESUN]-1659837595826
GPR[SSUN]-1659837595827
-1217609450
GPR[ESUN]-1659837596042
GPR[SSUN]-1659837596042
-1217609450
GPR[SPVATF]-1659837596256
GPR[EPVATF]-1659837597810
GPR[SPS]-1659837597810
[11898998] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JSModule:105.
GPR[EPS]-1659837598348
GPR[ESUN]-1659837598348
GPR[SSUN]-1659837598348
-1217609450
GPR[SPVATF]-1659837598602
GPR[EPVATF]-1659837600268
GPR[SPS]-1659837600268
[11901817] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.JSModule:104.
GPR[EPS]-1659837601167
GPR[ESUN]-1659837601167
GPR[SSUN]-1659837601167
-1217609450
GPR[ESUN]-1659837601720
GPR[SSUN]-1659837601721
1350153804
GPR[ESUN]-1659837602403
GPR[SSUN]-1659837602403
-675467674
GPR[ESUN]-1659837602866
GPR[SSUN]-1659837602866
1508329696
GPR[ESUN]-1659837603266
GPR[SSUN]-1659837603266
1508329696
GPR[SPVATF]-1659837603523
GPR[EPVATF]-1659837605161
GPR[SPS]-1659837605161
[11906753] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerOptions:1298.
GPR[EPS]-1659837606103
GPR[ESUN]-1659837606103
GPR[SSUN]-1659837606103
-861565004
GPR[SPVATF]-1659837606295
GPR[EPVATF]-1659837607881
GPR[SPS]-1659837607881
[11909046] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.BasicErrorManager:108.
GPR[EPS]-1659837608396
GPR[ESUN]-1659837608396
GPR[SSUN]-1659837608397
1508329696
GPR[ESUN]-1659837608723
GPR[SSUN]-1659837608724
1508329696
GPR[SPVATF]-1659837608983
GPR[EPVATF]-1659837610657
GPR[SPS]-1659837610657
[11912171] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerOptions:1392.
GPR[EPS]-1659837611521
GPR[ESUN]-1659837611521
GPR[SSUN]-1659837611521
1508329696
GPR[SPVATF]-1659837611783
GPR[EPVATF]-1659837613579
GPR[SPS]-1659837613580
[11915089] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CompilerOptions:1391.
GPR[EPS]-1659837614439
GPR[ESUN]-1659837614439
GPR[SSUN]-1659837614439
2433571
GPR[ESUN]-1659837614694
GPR[SSUN]-1659837614694
GPR[ESUN]-1659837614694
GPR[SSUN]-1659837614695
2433571
GPR[ESUN]-1659837614946
GPR[SSUN]-1659837614947
GPR[ESUN]-1659837614947
GPR[SSUN]-1659837614947
GPR[ESUN]-1659837614947
GPR[SSUN]-1659837614947
-861565004
GPR[ESUN]-1659837615138
GPR[SSUN]-1659837615138
-861565004
GPR[SPVATF]-1659837615330
GPR[EPVATF]-1659837617115
GPR[SPS]-1659837617115
[11918329] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.BasicErrorManager:107.
GPR[EPS]-1659837617679
GPR[SPVATF]-1659837617679
GPR[EPVATF]-1659837619589
GPR[SPS]-1659837619589
[11920747] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.BasicErrorManager:107.
GPR[EPS]-1659837620097
GPR[ESUN]-1659837620097
GPR[SSUN]-1659837620097
-898632916
GPR[SPVATF]-1659837620311
GPR[EPVATF]-1659837622345
GPR[SPS]-1659837622345
[11923525] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:68.
GPR[EPS]-1659837622875
GPR[ESUN]-1659837622875
GPR[SSUN]-1659837622875
2433571
GPR[ESUN]-1659837623194
GPR[SSUN]-1659837623194
GPR[ESUN]-1659837623194
GPR[SSUN]-1659837623194
-1345859678
GPR[ESUN]-1659837623454
GPR[SSUN]-1659837623454
1537627151
GPR[SPVATF]-1659837623667
GPR[EPVATF]-1659837625861
GPR[SPS]-1659837625861
[11927071] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:205.
GPR[EPS]-1659837626421
GPR[ESUN]-1659837626421
GPR[SSUN]-1659837626421
-1345859678
GPR[ESUN]-1659837626679
GPR[SSUN]-1659837626680
-1345859678
GPR[SPVATF]-1659837626938
GPR[EPVATF]-1659837629227
GPR[SPS]-1659837629227
[11930523] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:579.
GPR[EPS]-1659837629873
GPR[ESUN]-1659837629873
GPR[SSUN]-1659837629873
-1345859678
GPR[ESUN]-1659837630134
GPR[SSUN]-1659837630134
GPR[ESUN]-1659837630134
GPR[SSUN]-1659837630134
GPR[ESUN]-1659837630134
GPR[SSUN]-1659837630134
GPR[ESUN]-1659837630134
GPR[SSUN]-1659837630134
GPR[ESUN]-1659837630134
GPR[SSUN]-1659837630134
GPR[ESUN]-1659837630134
GPR[SSUN]-1659837630134
-898632916
GPR[SPVATF]-1659837630352
GPR[EPVATF]-1659837632613
GPR[SPS]-1659837632613
[11933781] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:76.
GPR[EPS]-1659837633131
GPR[SPVATF]-1659837633132
GPR[EPVATF]-1659837635674
GPR[SPS]-1659837635674
[11936828] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:76.
GPR[EPS]-1659837636178
GPR[ESUN]-1659837636179
GPR[SSUN]-1659837636179
-898632916
GPR[SPVATF]-1659837636396
GPR[EPVATF]-1659837638791
GPR[SPS]-1659837638791
[11940090] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:69.
GPR[EPS]-1659837639440
GPR[SPVATF]-1659837639440
GPR[EPVATF]-1659837641854
GPR[SPS]-1659837641854
[11943019] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:69.
GPR[EPS]-1659837642369
GPR[ESUN]-1659837642369
GPR[SSUN]-1659837642369
-898632916
GPR[SPVATF]-1659837642587
GPR[EPVATF]-1659837645036
GPR[SPS]-1659837645036
[11946193] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:67.
GPR[EPS]-1659837645543
GPR[SPVATF]-1659837645544
GPR[EPVATF]-1659837647905
GPR[SPS]-1659837647905
[11949116] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:67.
GPR[EPS]-1659837648466
GPR[ESUN]-1659837648466
GPR[SSUN]-1659837648466
-898632916
GPR[SPVATF]-1659837648684
GPR[EPVATF]-1659837651031
GPR[SPS]-1659837651031
[11954651] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:65.
GPR[EPS]-1659837654001
GPR[SPVATF]-1659837654002
GPR[EPVATF]-1659837656105
GPR[SPS]-1659837656105
[11957348] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:65.
GPR[EPS]-1659837656698
GPR[ESUN]-1659837656699
GPR[SSUN]-1659837656699
-898632916
GPR[ESUN]-1659837656932
GPR[SSUN]-1659837656932
-898632916
GPR[ESUN]-1659837657162
GPR[SSUN]-1659837657162
-898632916
GPR[ESUN]-1659837657384
GPR[SSUN]-1659837657384
-898632916
GPR[SPVATF]-1659837657608
GPR[EPVATF]-1659837659116
GPR[SPS]-1659837659116
[11960309] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:55.
GPR[EPS]-1659837659659
GPR[ESUN]-1659837659659
GPR[SSUN]-1659837659659
1537627151
GPR[SPVATF]-1659837659892
GPR[EPVATF]-1659837661419
GPR[SPS]-1659837661419
[11962628] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:204.
GPR[EPS]-1659837661978
GPR[SPVATF]-1659837661978
GPR[EPVATF]-1659837663469
GPR[SPS]-1659837663469
[11964723] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:204.
GPR[EPS]-1659837664073
GPR[ESUN]-1659837664073
GPR[SSUN]-1659837664073
1508981886
GPR[SPVATF]-1659837664330
GPR[EPVATF]-1659837665912
GPR[SPS]-1659837665912
[11967093] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:986.
GPR[EPS]-1659837666443
GPR[ESUN]-1659837666443
GPR[SSUN]-1659837666443
-534884160
GPR[SPVATF]-1659837666812
GPR[EPVATF]-1659837668346
GPR[SPS]-1659837668346
[11969988] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2041.
GPR[EPS]-1659837669338
GPR[ESUN]-1659837669338
GPR[SSUN]-1659837669338
-534884160
GPR[SPVATF]-1659837669703
GPR[EPVATF]-1659837671282
GPR[SPS]-1659837671282
[11972910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2038.
GPR[EPS]-1659837672260
GPR[SPVATF]-1659837672260
GPR[EPVATF]-1659837673766
GPR[SPS]-1659837673766
[11975372] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2038.
GPR[EPS]-1659837674722
GPR[ESUN]-1659837674722
GPR[SSUN]-1659837674722
-861565004
GPR[ESUN]-1659837674915
GPR[SSUN]-1659837674915
-861565004
GPR[SPVATF]-1659837675258
GPR[EPVATF]-1659837677443
GPR[SPS]-1659837677443
[11978629] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.BasicErrorManager:47.
GPR[EPS]-1659837677980
GPR[SPVATF]-1659837677980
GPR[EPVATF]-1659837679480
GPR[SPS]-1659837679480
[11980702] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.BasicErrorManager:47.
GPR[EPS]-1659837680052
GPR[ESUN]-1659837680052
GPR[SSUN]-1659837680052
-861565004
GPR[SPVATF]-1659837680245
GPR[EPVATF]-1659837681757
GPR[SPS]-1659837681757
[11982979] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.BasicErrorManager:46.
GPR[EPS]-1659837682329
GPR[SPVATF]-1659837682329
GPR[EPVATF]-1659837683915
GPR[SPS]-1659837683915
[11985079] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.BasicErrorManager:46.
GPR[EPS]-1659837684429
GPR[ESUN]-1659837684429
GPR[SSUN]-1659837684429
-1448841897
GPR[ESUN]-1659837684658
GPR[SSUN]-1659837684658
-1448841897
GPR[SPVATF]-1659837684885
GPR[EPVATF]-1659837686531
GPR[SPS]-1659837686531
[11987680] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:389.
GPR[EPS]-1659837687030
GPR[ESUN]-1659837687030
GPR[SSUN]-1659837687030
-1448841897
GPR[ESUN]-1659837687313
GPR[SSUN]-1659837687313
-1448841897
GPR[SPVATF]-1659837687539
GPR[EPVATF]-1659837689229
GPR[SPS]-1659837689229
[11990377] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:383.
GPR[EPS]-1659837689727
GPR[ESUN]-1659837689727
GPR[SSUN]-1659837689727
-1448841897
GPR[SPVATF]-1659837689954
GPR[EPVATF]-1659837691730
GPR[SPS]-1659837691730
[11992867] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:382.
GPR[EPS]-1659837692217
GPR[ESUN]-1659837692217
GPR[SSUN]-1659837692217
-1448841897
GPR[SPVATF]-1659837692503
GPR[EPVATF]-1659837694365
GPR[SPS]-1659837694365
[11995482] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:381.
GPR[EPS]-1659837694832
GPR[ESUN]-1659837694832
GPR[SSUN]-1659837694833
-1448841897
GPR[SPVATF]-1659837695060
GPR[EPVATF]-1659837696986
GPR[SPS]-1659837696987
[11998224] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:380.
GPR[EPS]-1659837697574
GPR[ESUN]-1659837697574
GPR[SSUN]-1659837697574
-1448841897
GPR[SPVATF]-1659837697815
GPR[EPVATF]-1659837699962
GPR[SPS]-1659837699962
[12001219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:379.
GPR[EPS]-1659837700570
GPR[ESUN]-1659837700570
GPR[SSUN]-1659837700570
-1448841897
GPR[SPVATF]-1659837700802
GPR[EPVATF]-1659837702987
GPR[SPS]-1659837702987
[12004112] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:378.
GPR[EPS]-1659837703462
GPR[ESUN]-1659837703462
GPR[SSUN]-1659837703462
-1448841897
GPR[SPVATF]-1659837703693
GPR[EPVATF]-1659837705957
GPR[SPS]-1659837705957
[12007084] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:377.
GPR[EPS]-1659837706434
GPR[ESUN]-1659837706434
GPR[SSUN]-1659837706434
-1448841897
GPR[SPVATF]-1659837706664
GPR[EPVATF]-1659837708908
GPR[SPS]-1659837708908
[12010032] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:376.
GPR[EPS]-1659837709382
GPR[ESUN]-1659837709382
GPR[SSUN]-1659837709382
-1448841897
GPR[SPVATF]-1659837709612
GPR[EPVATF]-1659837712026
GPR[SPS]-1659837712026
[12013179] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:375.
GPR[EPS]-1659837712529
GPR[ESUN]-1659837712529
GPR[SSUN]-1659837712530
-1448841897
GPR[SPVATF]-1659837712760
GPR[EPVATF]-1659837715039
GPR[SPS]-1659837715039
[12016165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:374.
GPR[EPS]-1659837715515
GPR[ESUN]-1659837715515
GPR[SSUN]-1659837715515
-1448841897
GPR[SPVATF]-1659837715748
GPR[EPVATF]-1659837718143
GPR[SPS]-1659837718143
[12019275] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:372.
GPR[EPS]-1659837718625
GPR[ESUN]-1659837718625
GPR[SSUN]-1659837718625
-1448841897
GPR[SPVATF]-1659837718856
GPR[EPVATF]-1659837721209
GPR[SPS]-1659837721209
[12022335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:371.
GPR[EPS]-1659837721685
GPR[ESUN]-1659837721685
GPR[SSUN]-1659837721685
-1448841897
GPR[SPVATF]-1659837721917
GPR[EPVATF]-1659837724225
GPR[SPS]-1659837724225
[12025465] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:370.
GPR[EPS]-1659837724815
GPR[ESUN]-1659837724815
GPR[SSUN]-1659837724815
-1448841897
GPR[SPVATF]-1659837725054
GPR[EPVATF]-1659837729144
GPR[SPS]-1659837729145
[12030324] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:369.
GPR[EPS]-1659837729674
GPR[ESUN]-1659837729674
GPR[SSUN]-1659837729674
-1448841897
GPR[SPVATF]-1659837729904
GPR[EPVATF]-1659837731441
GPR[SPS]-1659837731441
[12032600] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:368.
GPR[EPS]-1659837731950
GPR[ESUN]-1659837731950
GPR[SSUN]-1659837731950
-1448841897
GPR[SPVATF]-1659837732182
GPR[EPVATF]-1659837733739
GPR[SPS]-1659837733739
[12034895] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:367.
GPR[EPS]-1659837734245
GPR[ESUN]-1659837734245
GPR[SSUN]-1659837734245
-1448841897
GPR[SPVATF]-1659837734479
GPR[EPVATF]-1659837736007
GPR[SPS]-1659837736007
[12037178] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:366.
GPR[EPS]-1659837736529
GPR[ESUN]-1659837736529
GPR[SSUN]-1659837736529
-1448841897
GPR[SPVATF]-1659837736759
GPR[EPVATF]-1659837738342
GPR[SPS]-1659837738342
[12039485] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:365.
GPR[EPS]-1659837738835
GPR[ESUN]-1659837738835
GPR[SSUN]-1659837738836
-1448841897
GPR[SPVATF]-1659837739064
GPR[EPVATF]-1659837740585
GPR[SPS]-1659837740585
[12041758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:364.
GPR[EPS]-1659837741108
GPR[ESUN]-1659837741108
GPR[SSUN]-1659837741108
-1448841897
GPR[SPVATF]-1659837741339
GPR[EPVATF]-1659837742880
GPR[SPS]-1659837742880
[12044066] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:363.
GPR[EPS]-1659837743416
GPR[ESUN]-1659837743416
GPR[SSUN]-1659837743417
-1448841897
GPR[ESUN]-1659837743646
GPR[SSUN]-1659837743646
-1448841897
GPR[SPVATF]-1659837743875
GPR[EPVATF]-1659837745401
GPR[SPS]-1659837745401
[12046549] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:358.
GPR[EPS]-1659837745899
GPR[ESUN]-1659837745899
GPR[SSUN]-1659837745899
-1448841897
GPR[SPVATF]-1659837746128
GPR[EPVATF]-1659837747690
GPR[SPS]-1659837747690
[12050002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:357.
GPR[EPS]-1659837749352
GPR[ESUN]-1659837749352
GPR[SSUN]-1659837749352
-1448841897
GPR[SPVATF]-1659837749666
GPR[EPVATF]-1659837751234
GPR[SPS]-1659837751234
[12052421] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:356.
GPR[EPS]-1659837751771
GPR[ESUN]-1659837751771
GPR[SSUN]-1659837751772
-1448841897
GPR[SPVATF]-1659837752000
GPR[EPVATF]-1659837753609
GPR[SPS]-1659837753609
[12054765] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:355.
GPR[EPS]-1659837754115
GPR[ESUN]-1659837754115
GPR[SSUN]-1659837754115
-1448841897
GPR[SPVATF]-1659837754406
GPR[EPVATF]-1659837756003
GPR[SPS]-1659837756003
[12057202] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:354.
GPR[EPS]-1659837756552
GPR[ESUN]-1659837756552
GPR[SSUN]-1659837756552
-1448841897
GPR[SPVATF]-1659837756780
GPR[EPVATF]-1659837758385
GPR[SPS]-1659837758385
[12059532] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:353.
GPR[EPS]-1659837758882
GPR[ESUN]-1659837758882
GPR[SSUN]-1659837758882
-1448841897
GPR[SPVATF]-1659837759110
GPR[EPVATF]-1659837760842
GPR[SPS]-1659837760842
[12062098] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:352.
GPR[EPS]-1659837761448
GPR[ESUN]-1659837761448
GPR[SSUN]-1659837761448
-1448841897
GPR[SPVATF]-1659837761676
GPR[EPVATF]-1659837763469
GPR[SPS]-1659837763469
[12064616] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:350.
GPR[EPS]-1659837763966
GPR[ESUN]-1659837763966
GPR[SSUN]-1659837763966
-1448841897
GPR[SPVATF]-1659837764193
GPR[EPVATF]-1659837766106
GPR[SPS]-1659837766106
[12067245] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:349.
GPR[EPS]-1659837766595
GPR[ESUN]-1659837766595
GPR[SSUN]-1659837766595
-1448841897
GPR[ESUN]-1659837766822
GPR[SSUN]-1659837766822
-1448841897
GPR[SPVATF]-1659837767047
GPR[EPVATF]-1659837768979
GPR[SPS]-1659837768979
[12070115] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:344.
GPR[EPS]-1659837769465
GPR[ESUN]-1659837769465
GPR[SSUN]-1659837769465
-1448841897
GPR[SPVATF]-1659837769693
GPR[EPVATF]-1659837771584
GPR[SPS]-1659837771584
[12072799] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:343.
GPR[EPS]-1659837772149
GPR[ESUN]-1659837772149
GPR[SSUN]-1659837772149
-1448841897
GPR[SPVATF]-1659837772377
GPR[EPVATF]-1659837774385
GPR[SPS]-1659837774385
[12075511] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:342.
GPR[EPS]-1659837774861
GPR[ESUN]-1659837774861
GPR[SSUN]-1659837774861
-1448841897
GPR[SPVATF]-1659837775087
GPR[EPVATF]-1659837777216
GPR[SPS]-1659837777216
[12078362] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:341.
GPR[EPS]-1659837777712
GPR[ESUN]-1659837777712
GPR[SSUN]-1659837777713
-1448841897
GPR[SPVATF]-1659837778021
GPR[EPVATF]-1659837780280
GPR[SPS]-1659837780280
[12081407] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:340.
GPR[EPS]-1659837780757
GPR[ESUN]-1659837780757
GPR[SSUN]-1659837780757
-1448841897
GPR[SPVATF]-1659837780986
GPR[EPVATF]-1659837783207
GPR[SPS]-1659837783207
[12084332] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:339.
GPR[EPS]-1659837783682
GPR[ESUN]-1659837783682
GPR[SSUN]-1659837783682
-1448841897
GPR[SPVATF]-1659837783915
GPR[EPVATF]-1659837786345
GPR[SPS]-1659837786345
[12087491] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:338.
GPR[EPS]-1659837786841
GPR[ESUN]-1659837786841
GPR[SSUN]-1659837786842
-1448841897
GPR[ESUN]-1659837787071
GPR[SSUN]-1659837787071
-1448841897
GPR[SPVATF]-1659837787296
GPR[EPVATF]-1659837789602
GPR[SPS]-1659837789602
[12090724] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:333.
GPR[EPS]-1659837790074
GPR[ESUN]-1659837790074
GPR[SSUN]-1659837790074
-1448841897
GPR[SPVATF]-1659837790304
GPR[EPVATF]-1659837792701
GPR[SPS]-1659837792701
[12093841] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:332.
GPR[EPS]-1659837793191
GPR[ESUN]-1659837793191
GPR[SSUN]-1659837793191
-1448841897
GPR[SPVATF]-1659837793420
GPR[EPVATF]-1659837795740
GPR[SPS]-1659837795741
[12096877] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:331.
GPR[EPS]-1659837796227
GPR[ESUN]-1659837796227
GPR[SSUN]-1659837796227
-1448841897
GPR[SPVATF]-1659837796457
GPR[EPVATF]-1659837798794
GPR[SPS]-1659837798794
[12100944] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:330.
GPR[EPS]-1659837800294
GPR[ESUN]-1659837800294
GPR[SSUN]-1659837800294
-1448841897
GPR[SPVATF]-1659837800527
GPR[EPVATF]-1659837802502
GPR[SPS]-1659837802502
[12103709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:329.
GPR[EPS]-1659837803060
GPR[ESUN]-1659837803060
GPR[SSUN]-1659837803060
-1448841897
GPR[SPVATF]-1659837803288
GPR[EPVATF]-1659837804794
GPR[SPS]-1659837804794
[12105931] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:328.
GPR[EPS]-1659837805281
GPR[ESUN]-1659837805281
GPR[SSUN]-1659837805282
-1448841897
GPR[SPVATF]-1659837805510
GPR[EPVATF]-1659837807081
GPR[SPS]-1659837807081
[12108232] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:327.
GPR[EPS]-1659837807582
GPR[ESUN]-1659837807583
GPR[SSUN]-1659837807583
-1448841897
GPR[SPVATF]-1659837807811
GPR[EPVATF]-1659837809365
GPR[SPS]-1659837809366
[12110522] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:326.
GPR[EPS]-1659837809872
GPR[ESUN]-1659837809872
GPR[SSUN]-1659837809872
-1448841897
GPR[SPVATF]-1659837810103
GPR[EPVATF]-1659837811741
GPR[SPS]-1659837811741
[12112907] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:325.
GPR[EPS]-1659837812257
GPR[ESUN]-1659837812257
GPR[SSUN]-1659837812257
-1448841897
GPR[SPVATF]-1659837812484
GPR[EPVATF]-1659837814022
GPR[SPS]-1659837814022
[12115187] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:324.
GPR[EPS]-1659837814537
GPR[ESUN]-1659837814537
GPR[SSUN]-1659837814537
-1448841897
GPR[SPVATF]-1659837814767
GPR[EPVATF]-1659837816375
GPR[SPS]-1659837816375
[12117506] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:323.
GPR[EPS]-1659837816856
GPR[ESUN]-1659837816856
GPR[SSUN]-1659837816857
-1448841897
GPR[SPVATF]-1659837817132
GPR[EPVATF]-1659837818713
GPR[SPS]-1659837818713
[12119873] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:322.
GPR[EPS]-1659837819223
GPR[ESUN]-1659837819223
GPR[SSUN]-1659837819223
-1448841897
GPR[SPVATF]-1659837819905
GPR[EPVATF]-1659837821984
GPR[SPS]-1659837821984
[12123261] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:321.
GPR[EPS]-1659837822611
GPR[ESUN]-1659837822611
GPR[SSUN]-1659837822611
-1448841897
GPR[SPVATF]-1659837822839
GPR[EPVATF]-1659837824493
GPR[SPS]-1659837824493
[12125619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:320.
GPR[EPS]-1659837824969
GPR[ESUN]-1659837824969
GPR[SSUN]-1659837824969
-1448841897
GPR[SPVATF]-1659837825198
GPR[EPVATF]-1659837826788
GPR[SPS]-1659837826788
[12127920] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:319.
GPR[EPS]-1659837827270
GPR[ESUN]-1659837827270
GPR[SSUN]-1659837827270
-1448841897
GPR[SPVATF]-1659837827496
GPR[EPVATF]-1659837829138
GPR[SPS]-1659837829138
[12130347] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:318.
GPR[EPS]-1659837829697
GPR[ESUN]-1659837829697
GPR[SSUN]-1659837829697
-1448841897
GPR[SPVATF]-1659837829925
GPR[EPVATF]-1659837831629
GPR[SPS]-1659837831629
[12132770] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:317.
GPR[EPS]-1659837832120
GPR[ESUN]-1659837832120
GPR[SSUN]-1659837832121
-1448841897
GPR[SPVATF]-1659837832352
GPR[EPVATF]-1659837834023
GPR[SPS]-1659837834023
[12135163] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:316.
GPR[EPS]-1659837834513
GPR[ESUN]-1659837834513
GPR[SSUN]-1659837834513
-1448841897
GPR[SPVATF]-1659837834741
GPR[EPVATF]-1659837836573
GPR[SPS]-1659837836573
[12137733] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:315.
GPR[EPS]-1659837837083
GPR[ESUN]-1659837837083
GPR[SSUN]-1659837837083
-1448841897
GPR[SPVATF]-1659837837316
GPR[EPVATF]-1659837839201
GPR[SPS]-1659837839201
[12140385] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:314.
GPR[EPS]-1659837839735
GPR[ESUN]-1659837839735
GPR[SSUN]-1659837839735
-1448841897
GPR[SPVATF]-1659837839969
GPR[EPVATF]-1659837841885
GPR[SPS]-1659837841885
[12143026] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:313.
GPR[EPS]-1659837842376
GPR[ESUN]-1659837842376
GPR[SSUN]-1659837842376
-1448841897
GPR[SPVATF]-1659837842681
GPR[EPVATF]-1659837844666
GPR[SPS]-1659837844666
[12145815] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:312.
GPR[EPS]-1659837845165
GPR[ESUN]-1659837845165
GPR[SSUN]-1659837845165
-1448841897
GPR[SPVATF]-1659837845395
GPR[EPVATF]-1659837847568
GPR[SPS]-1659837847568
[12148698] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:311.
GPR[EPS]-1659837848048
GPR[ESUN]-1659837848048
GPR[SSUN]-1659837848048
-1448841897
GPR[SPVATF]-1659837848279
GPR[EPVATF]-1659837850595
GPR[SPS]-1659837850595
[12151722] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:310.
GPR[EPS]-1659837851073
GPR[ESUN]-1659837851073
GPR[SSUN]-1659837851073
-1448841897
GPR[SPVATF]-1659837851302
GPR[EPVATF]-1659837853577
GPR[SPS]-1659837853577
[12154716] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:309.
GPR[EPS]-1659837854066
GPR[ESUN]-1659837854066
GPR[SSUN]-1659837854066
-1448841897
GPR[SPVATF]-1659837854301
GPR[EPVATF]-1659837856579
GPR[SPS]-1659837856579
[12157711] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:308.
GPR[EPS]-1659837857061
GPR[ESUN]-1659837857061
GPR[SSUN]-1659837857061
-1448841897
GPR[SPVATF]-1659837857291
GPR[EPVATF]-1659837859701
GPR[SPS]-1659837859701
[12160831] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:307.
GPR[EPS]-1659837860181
GPR[ESUN]-1659837860181
GPR[SSUN]-1659837860181
-1448841897
GPR[SPVATF]-1659837860412
GPR[EPVATF]-1659837862730
GPR[SPS]-1659837862730
[12163852] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:306.
GPR[EPS]-1659837863202
GPR[ESUN]-1659837863202
GPR[SSUN]-1659837863202
-1448841897
GPR[SPVATF]-1659837863431
GPR[EPVATF]-1659837865802
GPR[SPS]-1659837865802
[12167050] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:305.
GPR[EPS]-1659837866400
GPR[ESUN]-1659837866400
GPR[SSUN]-1659837866400
-1448841897
GPR[SPVATF]-1659837866631
GPR[EPVATF]-1659837868914
GPR[SPS]-1659837868914
[12170054] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:304.
GPR[EPS]-1659837869404
GPR[ESUN]-1659837869404
GPR[SSUN]-1659837869405
-1448841897
GPR[SPVATF]-1659837869637
GPR[EPVATF]-1659837871976
GPR[SPS]-1659837871976
[12174049] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:303.
GPR[EPS]-1659837873399
GPR[ESUN]-1659837873399
GPR[SSUN]-1659837873399
-1448841897
GPR[SPVATF]-1659837873636
GPR[EPVATF]-1659837875652
GPR[SPS]-1659837875652
[12176827] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:302.
GPR[EPS]-1659837876177
GPR[ESUN]-1659837876177
GPR[SSUN]-1659837876177
-1448841897
GPR[SPVATF]-1659837876426
GPR[EPVATF]-1659837877982
GPR[SPS]-1659837877982
[12179139] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:301.
GPR[EPS]-1659837878489
GPR[ESUN]-1659837878489
GPR[SSUN]-1659837878489
-1448841897
GPR[SPVATF]-1659837878723
GPR[EPVATF]-1659837880305
GPR[SPS]-1659837880305
[12181455] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:300.
GPR[EPS]-1659837880805
GPR[ESUN]-1659837880805
GPR[SSUN]-1659837880805
-1448841897
GPR[SPVATF]-1659837881032
GPR[EPVATF]-1659837882550
GPR[SPS]-1659837882550
[12183843] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:299.
GPR[EPS]-1659837883193
GPR[ESUN]-1659837883193
GPR[SSUN]-1659837883193
-1448841897
GPR[SPVATF]-1659837883423
GPR[EPVATF]-1659837884977
GPR[SPS]-1659837884978
[12186135] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:298.
GPR[EPS]-1659837885485
GPR[ESUN]-1659837885485
GPR[SSUN]-1659837885485
-1448841897
GPR[SPVATF]-1659837885725
GPR[EPVATF]-1659837887295
GPR[SPS]-1659837887295
[12188492] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:297.
GPR[EPS]-1659837887842
GPR[ESUN]-1659837887842
GPR[SSUN]-1659837887842
-1448841897
GPR[SPVATF]-1659837888073
GPR[EPVATF]-1659837889607
GPR[SPS]-1659837889607
[12190753] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:296.
GPR[EPS]-1659837890103
GPR[ESUN]-1659837890103
GPR[SSUN]-1659837890103
-1448841897
GPR[SPVATF]-1659837890332
GPR[EPVATF]-1659837891947
GPR[SPS]-1659837891947
[12194210] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:295.
GPR[EPS]-1659837893561
GPR[ESUN]-1659837893561
GPR[SSUN]-1659837893561
-1448841897
GPR[SPVATF]-1659837894043
GPR[EPVATF]-1659837895620
GPR[SPS]-1659837895620
[12196829] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:294.
GPR[EPS]-1659837896179
GPR[ESUN]-1659837896179
GPR[SSUN]-1659837896179
-1448841897
GPR[SPVATF]-1659837896408
GPR[EPVATF]-1659837897990
GPR[SPS]-1659837897990
[12199180] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:293.
GPR[EPS]-1659837898530
GPR[ESUN]-1659837898530
GPR[SSUN]-1659837898530
-1448841897
GPR[SPVATF]-1659837898760
GPR[EPVATF]-1659837900391
GPR[SPS]-1659837900391
[12201533] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:292.
GPR[EPS]-1659837900883
GPR[ESUN]-1659837900883
GPR[SSUN]-1659837900883
-1448841897
GPR[SPVATF]-1659837901115
GPR[EPVATF]-1659837902714
GPR[SPS]-1659837902714
[12203865] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:291.
GPR[EPS]-1659837903215
GPR[ESUN]-1659837903215
GPR[SSUN]-1659837903216
-1448841897
GPR[ESUN]-1659837903446
GPR[SSUN]-1659837903446
-1448841897
GPR[SPVATF]-1659837903674
GPR[EPVATF]-1659837905284
GPR[SPS]-1659837905284
[12206428] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:286.
GPR[EPS]-1659837905778
GPR[ESUN]-1659837905778
GPR[SSUN]-1659837905778
-1448841897
GPR[SPVATF]-1659837906007
GPR[EPVATF]-1659837907772
GPR[SPS]-1659837907772
[12208927] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:285.
GPR[EPS]-1659837908277
GPR[ESUN]-1659837908277
GPR[SSUN]-1659837908277
-1448841897
GPR[SPVATF]-1659837908510
GPR[EPVATF]-1659837910267
GPR[SPS]-1659837910267
[12211434] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:284.
GPR[EPS]-1659837910784
GPR[ESUN]-1659837910784
GPR[SSUN]-1659837910784
-1448841897
GPR[ESUN]-1659837911012
GPR[SSUN]-1659837911012
-1448841897
GPR[SPVATF]-1659837911240
GPR[EPVATF]-1659837913055
GPR[SPS]-1659837913055
[12214290] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:279.
GPR[EPS]-1659837913641
GPR[ESUN]-1659837913641
GPR[SSUN]-1659837913641
-1448841897
GPR[SPVATF]-1659837913872
GPR[EPVATF]-1659837915728
GPR[SPS]-1659837915728
[12216872] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:278.
GPR[EPS]-1659837916222
GPR[ESUN]-1659837916222
GPR[SSUN]-1659837916223
-1448841897
GPR[SPVATF]-1659837916452
GPR[EPVATF]-1659837918440
GPR[SPS]-1659837918440
[12219577] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:277.
GPR[EPS]-1659837918927
GPR[ESUN]-1659837918927
GPR[SSUN]-1659837918927
-1448841897
GPR[SPVATF]-1659837919156
GPR[EPVATF]-1659837921253
GPR[SPS]-1659837921253
[12222469] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:276.
GPR[EPS]-1659837921819
GPR[ESUN]-1659837921819
GPR[SSUN]-1659837921819
-1448841897
GPR[SPVATF]-1659837922047
GPR[EPVATF]-1659837924283
GPR[SPS]-1659837924283
[12225413] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:275.
GPR[EPS]-1659837924763
GPR[ESUN]-1659837924763
GPR[SSUN]-1659837924764
-1448841897
GPR[SPVATF]-1659837924992
GPR[EPVATF]-1659837927209
GPR[SPS]-1659837927209
[12228336] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:274.
GPR[EPS]-1659837927686
GPR[ESUN]-1659837927686
GPR[SSUN]-1659837927686
-1448841897
GPR[SPVATF]-1659837927916
GPR[EPVATF]-1659837930289
GPR[SPS]-1659837930289
[12231454] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:273.
GPR[EPS]-1659837930804
GPR[ESUN]-1659837930805
GPR[SSUN]-1659837930805
-1448841897
GPR[SPVATF]-1659837931039
GPR[EPVATF]-1659837933386
GPR[SPS]-1659837933386
[12234516] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:272.
GPR[EPS]-1659837933866
GPR[ESUN]-1659837933866
GPR[SSUN]-1659837933866
-1448841897
GPR[SPVATF]-1659837934095
GPR[EPVATF]-1659837936425
GPR[SPS]-1659837936425
[12237573] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:271.
GPR[EPS]-1659837936923
GPR[ESUN]-1659837936923
GPR[SSUN]-1659837936923
-1448841897
GPR[SPVATF]-1659837937155
GPR[EPVATF]-1659837939640
GPR[SPS]-1659837939640
[12240776] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:270.
GPR[EPS]-1659837940127
GPR[ESUN]-1659837940127
GPR[SSUN]-1659837940127
-1448841897
GPR[SPVATF]-1659837940358
GPR[EPVATF]-1659837943663
GPR[SPS]-1659837943663
[12244970] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:269.
GPR[EPS]-1659837944320
GPR[ESUN]-1659837944320
GPR[SSUN]-1659837944320
-1448841897
GPR[SPVATF]-1659837944556
GPR[EPVATF]-1659837946126
GPR[SPS]-1659837946126
[12247302] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:268.
GPR[EPS]-1659837946652
GPR[ESUN]-1659837946652
GPR[SSUN]-1659837946652
-1448841897
GPR[SPVATF]-1659837946882
GPR[EPVATF]-1659837948412
GPR[SPS]-1659837948412
[12249574] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:267.
GPR[EPS]-1659837948924
GPR[ESUN]-1659837948924
GPR[SSUN]-1659837948924
-1448841897
GPR[SPVATF]-1659837949163
GPR[EPVATF]-1659837950736
GPR[SPS]-1659837950736
[12251892] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:266.
GPR[EPS]-1659837951242
GPR[ESUN]-1659837951242
GPR[SSUN]-1659837951242
-1448841897
GPR[ESUN]-1659837951471
GPR[SSUN]-1659837951471
-1448841897
GPR[SPVATF]-1659837951698
GPR[EPVATF]-1659837953301
GPR[SPS]-1659837953301
[12254476] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:261.
GPR[EPS]-1659837953826
GPR[ESUN]-1659837953826
GPR[SSUN]-1659837953826
-1448841897
GPR[SPVATF]-1659837954059
GPR[EPVATF]-1659837955635
GPR[SPS]-1659837955635
[12256796] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:260.
GPR[EPS]-1659837956146
GPR[ESUN]-1659837956146
GPR[SSUN]-1659837956146
-1448841897
GPR[SPVATF]-1659837956409
GPR[EPVATF]-1659837957953
GPR[SPS]-1659837957953
[12259115] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:259.
GPR[EPS]-1659837958465
GPR[ESUN]-1659837958465
GPR[SSUN]-1659837958466
-1448841897
GPR[SPVATF]-1659837958697
GPR[EPVATF]-1659837960251
GPR[SPS]-1659837960251
[12261398] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:258.
GPR[EPS]-1659837960748
GPR[ESUN]-1659837960748
GPR[SSUN]-1659837960748
-1448841897
GPR[SPVATF]-1659837960980
GPR[EPVATF]-1659837962562
GPR[SPS]-1659837962562
[12263798] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:257.
GPR[EPS]-1659837963148
GPR[ESUN]-1659837963148
GPR[SSUN]-1659837963148
-1448841897
GPR[SPVATF]-1659837963381
GPR[EPVATF]-1659837964938
GPR[SPS]-1659837964938
[12266075] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:256.
GPR[EPS]-1659837965425
GPR[ESUN]-1659837965425
GPR[SSUN]-1659837965425
-1448841897
GPR[SPVATF]-1659837965656
GPR[EPVATF]-1659837967465
GPR[SPS]-1659837967465
[12269001] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.testing.BaseJSTypeTestCase:255.
GPR[EPS]-1659837968351
GPR[ESUN]-1659837968351
GPR[SSUN]-1659837968351
-1448841897
GPR[ESUN]-1659837968588
GPR[SSUN]-1659837968588
-1448841897
GPR[ESUN]-1659837968815
GPR[SSUN]-1659837968815
-1448841897
GPR[ESUN]-1659837969042
GPR[SSUN]-1659837969042
-1448841897
GPR[ESUN]-1659837969268
GPR[SSUN]-1659837969268
-1448841897
GPR[ESUN]-1659837969495
GPR[SSUN]-1659837969495
-1448841897
GPR[ESUN]-1659837969723
GPR[SSUN]-1659837969723
-1448841897
GPR[ESUN]-1659837970004
GPR[SSUN]-1659837970004
-1448841897
GPR[ESUN]-1659837970231
GPR[SSUN]-1659837970231
-1448841897
GPR[ESUN]-1659837970458
GPR[SSUN]-1659837970458
-1448841897
GPR[ESUN]-1659837970684
GPR[SSUN]-1659837970684
-1448841897
GPR[ESUN]-1659837970909
GPR[SSUN]-1659837970909
-1448841897
GPR[ESUN]-1659837971136
GPR[SSUN]-1659837971136
GPR[ESUN]-1659837971136
GPR[SSUN]-1659837971136
GPR[ESUN]-1659837971136
GPR[SSUN]-1659837971136
GPR[ESUN]-1659837971136
GPR[SSUN]-1659837971136
GPR[ESUN]-1659837971136
GPR[SSUN]-1659837971136
GPR[ESUN]-1659837971136
GPR[SSUN]-1659837971136
GPR[ESUN]-1659837971136
GPR[SSUN]-1659837971136
GPR[ESUN]-1659837971136
GPR[SSUN]-1659837971136
-600752576
GPR[ESUN]-1659837971343
GPR[SSUN]-1659837971343
-1234646214
GPR[SPVATF]-1659837971579
GPR[EPVATF]-1659837973154
GPR[SPS]-1659837973154
[12274349] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.ObjectType:489.
GPR[EPS]-1659837973699
GPR[ESUN]-1659837973699
GPR[SSUN]-1659837973699
1187751237
GPR[SPVATF]-1659837974052
GPR[EPVATF]-1659837975634
GPR[SPS]-1659837975634
[12411046] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.OutOfMemoryError: GC overhead limit exceeded
GPR[ESUN]-1659838110396
GPR[SSUN]-1659838110396
\n\nNode: host-48\n
\n\nDate: Sat 06 Aug 2022 07:08:46 PM PDT\n
End running Nopol Closure/17 results at /experiment_home///results/Nopol/Closure/17/seed_260/
Removing checked out dir script/workingdir/Nopol/Closure_17
GPR[SSLE]-1659838127145
GPR[ESLE]-1659838187148
