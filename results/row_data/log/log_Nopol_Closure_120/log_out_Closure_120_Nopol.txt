Sleep 1m start
GPR[SSLI]-1659846914843
GPR[ESLI]-1659846974846
Running Nopol Closure 120b with approach: smt
Timezone: America/Los_Angeles
Seed 260
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/120/seed_260/
The file script/workingdir/Nopol/Closure_120 does not exist!
script/workingdir/Nopol/Closure_120
script/workingdir/Nopol/Closure_120
classpath:  script/workingdir/Nopol/Closure_120/build/classes:script/workingdir/Nopol/Closure_120/lib/args4j.jar:script/workingdir/Nopol/Closure_120/lib/guava.jar:script/workingdir/Nopol/Closure_120/lib/json.jar:script/workingdir/Nopol/Closure_120/lib/jsr305.jar:script/workingdir/Nopol/Closure_120/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_120/build/lib/rhino.jar:script/workingdir/Nopol/Closure_120/lib/ant.jar:script/workingdir/Nopol/Closure_120/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_120/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_120/lib/jarjar.jar:script/workingdir/Nopol/Closure_120/lib/junit.jar:script/workingdir/Nopol/Closure_120/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659846995239
GPR[ESLB]-1659847055275
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_120//build/classes:script/workingdir/Nopol/Closure_120//build/test:script/workingdir/Nopol/Closure_120/build/classes:script/workingdir/Nopol/Closure_120/lib/args4j.jar:script/workingdir/Nopol/Closure_120/lib/guava.jar:script/workingdir/Nopol/Closure_120/lib/json.jar:script/workingdir/Nopol/Closure_120/lib/jsr305.jar:script/workingdir/Nopol/Closure_120/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_120/build/lib/rhino.jar:script/workingdir/Nopol/Closure_120/lib/ant.jar:script/workingdir/Nopol/Closure_120/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_120/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_120/lib/jarjar.jar:script/workingdir/Nopol/Closure_120/lib/junit.jar:script/workingdir/Nopol/Closure_120/build/test
Node: host-46
Date init: Sat 06 Aug 2022 09:37:35 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_120/src]
[1] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_120/build/classes/, file:script/workingdir/Nopol/Closure_120/build/test/, file:script/workingdir/Nopol/Closure_120/build/classes/, file:script/workingdir/Nopol/Closure_120/lib/args4j.jar, file:script/workingdir/Nopol/Closure_120/lib/guava.jar, file:script/workingdir/Nopol/Closure_120/lib/json.jar, file:script/workingdir/Nopol/Closure_120/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_120/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_120/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_120/lib/ant.jar, file:script/workingdir/Nopol/Closure_120/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_120/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_120/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_120/lib/junit.jar, file:script/workingdir/Nopol/Closure_120/build/test/]
[1] INFO NoPol - Statement type: PRE_THEN_COND
[1] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckEventfulObjectDisposalTest, com.google.javascript.jscomp.CheckEventfulObjectDisposalTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizedConditionTest, com.google.javascript.jscomp.MinimizedConditionTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PerformanceTrackerTest, com.google.javascript.jscomp.PerformanceTrackerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[3] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_120/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckEventfulObjectDisposalTest, com.google.javascript.jscomp.CheckEventfulObjectDisposalTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizedConditionTest, com.google.javascript.jscomp.MinimizedConditionTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PerformanceTrackerTest, com.google.javascript.jscomp.PerformanceTrackerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/120/seed_260/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659847061986
GPR[ESUP]-1659847061986
GPR[SFL]-1659847061986
GPR[EFL]-1659847109500
GPR[SFP]-1659847109500
GPR[SSUN]-1659847112049
-1966087783
GPR[ESUN]-1659847112525
GPR[SSUN]-1659847112525
-1966087783
GPR[SPVATF]-1659847112740
GPR[EPVATF]-1659847112794
[55483] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847112795
GPR[SSUN]-1659847112795
-1659631726
GPR[ESUN]-1659847113002
GPR[SSUN]-1659847113002
130004992
GPR[ESUN]-1659847113190
GPR[SSUN]-1659847113190
130004992
GPR[SPVATF]-1659847113378
GPR[EPVATF]-1659847113407
[56095] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847113407
GPR[SSUN]-1659847113407
130004992
GPR[ESUN]-1659847113597
GPR[SSUN]-1659847113597
-1966087783
GPR[SPVATF]-1659847113798
GPR[EPVATF]-1659847113820
[56509] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847113821
GPR[SSUN]-1659847113821
-1966087783
GPR[SPVATF]-1659847114030
GPR[EPVATF]-1659847114054
[56742] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847114054
GPR[SSUN]-1659847114054
890942016
GPR[ESUN]-1659847116662
GPR[SSUN]-1659847116662
890942016
GPR[SPVATF]-1659847116857
GPR[EPVATF]-1659847116878
[59566] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847116878
GPR[SSUN]-1659847116878
890942016
GPR[SPVATF]-1659847117077
GPR[EPVATF]-1659847117097
[59785] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847117097
GPR[EPVATF]-1659847117116
[59805] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847117117
GPR[SSUN]-1659847117117
890942016
GPR[ESUN]-1659847117321
GPR[SSUN]-1659847117321
890942016
GPR[ESUN]-1659847117524
GPR[SSUN]-1659847117524
-1966087783
GPR[ESUN]-1659847117727
GPR[SSUN]-1659847117727
-1966087783
GPR[SPVATF]-1659847117932
GPR[EPVATF]-1659847117953
[60642] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847117954
GPR[EPVATF]-1659847117973
[60661] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847117973
GPR[SSUN]-1659847117973
-1966087783
GPR[ESUN]-1659847118177
GPR[SSUN]-1659847118177
-1966087783
GPR[SPVATF]-1659847118375
GPR[EPVATF]-1659847118395
[61083] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847118396
GPR[EPVATF]-1659847118415
[61104] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847118416
GPR[SSUN]-1659847118416
-1966087783
GPR[ESUN]-1659847118622
GPR[SSUN]-1659847118622
-1966087783
GPR[ESUN]-1659847118820
GPR[SSUN]-1659847118820
-1966087783
GPR[ESUN]-1659847119017
GPR[SSUN]-1659847119018
1613130706
GPR[ESUN]-1659847119248
GPR[SSUN]-1659847119248
1613130706
GPR[ESUN]-1659847119466
GPR[SSUN]-1659847119466
1613130706
GPR[SPVATF]-1659847119685
GPR[EPVATF]-1659847119890
[62578] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847119890
GPR[SSUN]-1659847119890
234947553
GPR[ESUN]-1659847120097
GPR[SSUN]-1659847120097
234947553
GPR[SPVATF]-1659847120297
GPR[EPVATF]-1659847120313
[63001] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847120314
GPR[EPVATF]-1659847120328
[63016] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847120328
GPR[SSUN]-1659847120328
234947553
GPR[ESUN]-1659847120525
GPR[SSUN]-1659847120525
234947553
GPR[SPVATF]-1659847120723
GPR[EPVATF]-1659847120738
[63426] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847120739
GPR[EPVATF]-1659847120753
[63441] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847120754
GPR[SSUN]-1659847120754
234947553
GPR[SPVATF]-1659847120956
GPR[EPVATF]-1659847120971
[63660] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847120972
GPR[SSUN]-1659847120972
234947553
GPR[ESUN]-1659847121169
GPR[SSUN]-1659847121169
234947553
GPR[ESUN]-1659847121370
GPR[SSUN]-1659847121370
234947553
GPR[SPVATF]-1659847121569
GPR[EPVATF]-1659847121584
[64272] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847121584
GPR[SSUN]-1659847121584
234947553
GPR[SPVATF]-1659847121786
GPR[EPVATF]-1659847121801
[64489] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847121801
GPR[SSUN]-1659847121801
234947553
GPR[SPVATF]-1659847122009
GPR[EPVATF]-1659847122025
[64713] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847122025
GPR[SSUN]-1659847122025
234947553
GPR[ESUN]-1659847122226
GPR[SSUN]-1659847122226
234947553
GPR[ESUN]-1659847122431
GPR[SSUN]-1659847122431
234947553
GPR[SPVATF]-1659847122632
GPR[EPVATF]-1659847122648
[65336] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847122648
GPR[SSUN]-1659847122648
234947553
GPR[SPVATF]-1659847122849
GPR[EPVATF]-1659847122864
[65552] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847122864
GPR[SSUN]-1659847122864
234947553
GPR[ESUN]-1659847123068
GPR[SSUN]-1659847123068
234947553
GPR[SPVATF]-1659847123266
GPR[EPVATF]-1659847123281
[65969] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847123281
GPR[SSUN]-1659847123281
234947553
GPR[SPVATF]-1659847123478
GPR[EPVATF]-1659847123493
[66181] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847123493
GPR[SSUN]-1659847123493
234947553
GPR[ESUN]-1659847123692
GPR[SSUN]-1659847123692
890942016
GPR[SPVATF]-1659847123894
GPR[EPVATF]-1659847123914
[66602] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847123915
GPR[EPVATF]-1659847123935
[66623] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847123935
GPR[SSUN]-1659847123935
890942016
GPR[SPVATF]-1659847124138
GPR[EPVATF]-1659847124156
[66844] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847124156
GPR[SSUN]-1659847124156
890942016
GPR[ESUN]-1659847124356
GPR[SSUN]-1659847124356
890942016
GPR[SPVATF]-1659847124557
GPR[EPVATF]-1659847124577
[67265] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847124577
GPR[SSUN]-1659847124577
890942016
GPR[SPVATF]-1659847124785
GPR[EPVATF]-1659847124804
[67492] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847124804
GPR[EPVATF]-1659847124822
[67510] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847124822
GPR[SSUN]-1659847124822
890942016
GPR[SPVATF]-1659847125022
GPR[EPVATF]-1659847125041
[67729] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847125041
GPR[SSUN]-1659847125041
890942016
GPR[SPVATF]-1659847125241
GPR[EPVATF]-1659847125261
[67949] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847125262
GPR[EPVATF]-1659847125279
[67967] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847125279
GPR[SSUN]-1659847125279
890942016
GPR[ESUN]-1659847125478
GPR[SSUN]-1659847125478
890942016
GPR[SPVATF]-1659847125673
GPR[EPVATF]-1659847125691
[68379] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847125692
GPR[SSUN]-1659847125692
890942016
GPR[SPVATF]-1659847125886
GPR[EPVATF]-1659847125906
[68594] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847125906
GPR[SSUN]-1659847125906
890942016
GPR[SPVATF]-1659847126100
GPR[EPVATF]-1659847126118
[68806] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847126118
GPR[SSUN]-1659847126118
890942016
GPR[ESUN]-1659847126315
GPR[SSUN]-1659847126315
1613130706
GPR[SPVATF]-1659847126687
GPR[EPVATF]-1659847128863
[71551] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847128863
GPR[EPVATF]-1659847129115
[71803] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847129115
GPR[SSUN]-1659847129115
1613130706
GPR[SPVATF]-1659847129338
GPR[EPVATF]-1659847129527
[72215] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847129527
GPR[EPVATF]-1659847129715
[72403] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847129715
GPR[SSUN]-1659847129716
1613130706
GPR[SPVATF]-1659847129936
GPR[EPVATF]-1659847130126
[72814] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847130126
GPR[SSUN]-1659847130126
2433571
GPR[SPVATF]-1659847130387
GPR[EPVATF]-1659847130796
GPR[SPS]-1659847130796
[74770] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1459.
GPR[EPS]-1659847132082
GPR[ESUN]-1659847132082
GPR[SSUN]-1659847132082
2433571
GPR[SPVATF]-1659847132352
GPR[EPVATF]-1659847132803
GPR[SPS]-1659847132803
GPR[EPS]-1659847134088
GPR[SPVATR]-1659847134089
[76777] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1430: PRECONDITION com.google.javascript.rhino.Node.this.type <= 29
[77235] INFO TestPatch - Running test suite to check the patch "com.google.javascript.rhino.Node.this.type <= 29" is working
GPR[EPVATR]-1659847135485
[78173] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659847135485
[78203] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1429,7 +1429,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (com.google.javascript.rhino.Node.this.type <= 29) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/120/seed_260/patch_73529_1ts_1659847135515.diff
GPR[ESUN]-1659847135516
GPR[SSUN]-1659847135516
1613130706
GPR[SPVATF]-1659847135743
GPR[EPVATF]-1659847135928
[78616] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847135928
GPR[EPVATF]-1659847136112
[78800] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847136112
GPR[SSUN]-1659847136112
1613130706
GPR[SPVATF]-1659847136455
GPR[EPVATF]-1659847136644
[79332] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847136644
GPR[EPVATF]-1659847136835
[79523] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847136835
GPR[SSUN]-1659847136835
1613130706
GPR[ESUN]-1659847137045
GPR[SSUN]-1659847137045
1613130706
GPR[ESUN]-1659847137254
GPR[SSUN]-1659847137254
1613130706
GPR[ESUN]-1659847137463
GPR[SSUN]-1659847137464
1613130706
GPR[ESUN]-1659847137682
GPR[SSUN]-1659847137682
1613130706
GPR[SPVATF]-1659847137892
GPR[EPVATF]-1659847138079
[80767] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847138079
GPR[EPVATF]-1659847138263
[80952] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847138264
GPR[SSUN]-1659847138264
1613130706
GPR[SPVATF]-1659847138477
GPR[EPVATF]-1659847138661
[81349] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847138661
GPR[SSUN]-1659847138661
1613130706
GPR[ESUN]-1659847138890
GPR[SSUN]-1659847138890
1613130706
GPR[SPVATF]-1659847139102
GPR[EPVATF]-1659847139289
[81978] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847139290
GPR[EPVATF]-1659847139482
[82170] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847139482
GPR[SSUN]-1659847139482
1613130706
GPR[ESUN]-1659847139697
GPR[SSUN]-1659847139697
1613130706
GPR[SPVATF]-1659847139914
GPR[EPVATF]-1659847140100
[82788] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847140100
GPR[EPVATF]-1659847140295
[82983] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847140295
GPR[SSUN]-1659847140295
-1966087783
GPR[ESUN]-1659847140491
GPR[SSUN]-1659847140491
-1966087783
GPR[SPVATF]-1659847140685
GPR[EPVATF]-1659847140706
[83395] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847140707
GPR[EPVATF]-1659847140726
[83414] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847140726
GPR[SSUN]-1659847140726
-1966087783
GPR[SPVATF]-1659847140921
GPR[EPVATF]-1659847140941
[83629] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847140941
GPR[SSUN]-1659847140941
2433571
GPR[SPVATF]-1659847141199
GPR[EPVATF]-1659847141607
GPR[SPS]-1659847141607
[85024] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1446.
GPR[EPS]-1659847142336
GPR[ESUN]-1659847142336
GPR[SSUN]-1659847142336
-1966087783
GPR[SPVATF]-1659847142528
GPR[EPVATF]-1659847142551
[85239] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847142552
GPR[EPVATF]-1659847142574
[85262] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847142574
GPR[SSUN]-1659847142574
-1966087783
GPR[SPVATF]-1659847142768
GPR[EPVATF]-1659847142789
[85477] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847142790
GPR[EPVATF]-1659847142811
[85499] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847142811
GPR[SSUN]-1659847142811
-1966087783
GPR[SPVATF]-1659847143005
GPR[EPVATF]-1659847143026
[85714] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847143026
GPR[EPVATF]-1659847143048
[85736] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847143048
GPR[SSUN]-1659847143048
-1966087783
GPR[ESUN]-1659847143238
GPR[SSUN]-1659847143238
-1966087783
GPR[ESUN]-1659847143428
GPR[SSUN]-1659847143428
-1966087783
GPR[SPVATF]-1659847143619
GPR[EPVATF]-1659847143641
[86329] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847143642
GPR[EPVATF]-1659847143662
[86350] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847143662
GPR[SSUN]-1659847143662
-1966087783
GPR[SPVATF]-1659847143857
GPR[EPVATF]-1659847143879
[86567] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847143879
GPR[EPVATF]-1659847143901
[86589] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847143901
GPR[SSUN]-1659847143901
-1966087783
GPR[ESUN]-1659847144094
GPR[SSUN]-1659847144094
-1966087783
GPR[SPVATF]-1659847144288
GPR[EPVATF]-1659847144311
[86999] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847144311
GPR[SSUN]-1659847144311
-1966087783
GPR[SPVATF]-1659847144507
GPR[EPVATF]-1659847144529
[87217] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847144529
GPR[SSUN]-1659847144529
-1966087783
GPR[ESUN]-1659847144736
GPR[SSUN]-1659847144736
-1966087783
GPR[SPVATF]-1659847144929
GPR[EPVATF]-1659847144952
[87640] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847144952
GPR[SSUN]-1659847144952
-1966087783
GPR[ESUN]-1659847145144
GPR[SSUN]-1659847145144
-1966087783
GPR[ESUN]-1659847145337
GPR[SSUN]-1659847145337
-1966087783
GPR[SPVATF]-1659847145532
GPR[EPVATF]-1659847145554
[88242] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847145554
GPR[SSUN]-1659847145554
-1966087783
GPR[SPVATF]-1659847145753
GPR[EPVATF]-1659847145776
[88464] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847145776
GPR[SSUN]-1659847145776
1103597247
GPR[SPVATF]-1659847146019
GPR[EPVATF]-1659847147215
GPR[SPS]-1659847147215
[90498] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:318.
GPR[EPS]-1659847147810
GPR[ESUN]-1659847147810
GPR[SSUN]-1659847147810
1103597247
GPR[SPVATF]-1659847148048
GPR[EPVATF]-1659847148456
GPR[SPS]-1659847148456
GPR[EPS]-1659847149747
GPR[SPVATR]-1659847149747
[92435] INFO TestPatch - Applying patch: com.google.javascript.jscomp.InlineVariables$InliningBehavior:315: PRECONDITION (4) != (refs.size())
[92793] INFO TestPatch - Running test suite to check the patch "(4) != (refs.size())" is working
GPR[EPVATR]-1659847150532
[93220] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659847150532
[93224] INFO NoPol - --- a/src/com/google/javascript/jscomp/InlineVariables.java
+++ b/src/com/google/javascript/jscomp/InlineVariables.java
@@ -314,5 +314,7 @@
               Preconditions.checkNotNull(value);
-              inlineWellDefinedVariable(candidate.alias,
-                  value,
-                  candidate.refInfo.references);
+              if ((4) != (refs.size())) {
+                inlineWellDefinedVariable(candidate.alias,
+                value,
+                candidate.refInfo.references);
+              }
               staleVars.add(candidate.alias);

Saving patch at /experiment_home///results/Nopol/Closure/120/seed_260/patch_88550_2ts_1659847150536.diff
GPR[ESUN]-1659847150536
GPR[SSUN]-1659847150536
1103597247
GPR[SPVATF]-1659847150779
GPR[EPVATF]-1659847151188
GPR[SPS]-1659847151188
[94427] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:314.
GPR[EPS]-1659847151739
GPR[ESUN]-1659847151739
GPR[SSUN]-1659847151739
1103597247
GPR[ESUN]-1659847151978
GPR[SSUN]-1659847151978
1103597247
GPR[SPVATF]-1659847152230
GPR[EPVATF]-1659847152645
GPR[SPS]-1659847152645
[95736] ERROR ConstraintModelBuilder - Unable to compile the change: 
class InlineVariables implements com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    enum Mode {

        CONSTANTS_ONLY,
        LOCALS_ONLY,
        ALL;}

    private final com.google.javascript.jscomp.InlineVariables.Mode mode;

    private final boolean inlineAllStrings;

    private final com.google.javascript.jscomp.InlineVariables.IdentifyConstants identifyConstants = new com.google.javascript.jscomp.InlineVariables.IdentifyConstants();

    InlineVariables(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.InlineVariables.Mode mode, boolean inlineAllStrings) {
        this.compiler = compiler;
        this.mode = mode;
        this.inlineAllStrings = inlineAllStrings;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.ReferenceCollectingCallback callback = new com.google.javascript.jscomp.ReferenceCollectingCallback(compiler, new com.google.javascript.jscomp.InlineVariables.InliningBehavior(), getFilterForMode());
        callback.process(externs, root);
    }

    private com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> getFilterForMode() {
        switch (mode) {
            case ALL :
                return com.google.common.base.Predicates.<com.google.javascript.jscomp.Scope.Var>alwaysTrue();
            case LOCALS_ONLY :
                return new com.google.javascript.jscomp.InlineVariables.IdentifyLocals();
            case CONSTANTS_ONLY :
                return new com.google.javascript.jscomp.InlineVariables.IdentifyConstants();
            default :
                throw new java.lang.IllegalStateException();
        }
    }

    private class IdentifyConstants implements com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return var.isConst();
        }
    }

    private class IdentifyLocals implements com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return var.scope.isLocal();
        }
    }

    private static class AliasCandidate {
        private final com.google.javascript.jscomp.Scope.Var alias;

        private final com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo;

        AliasCandidate(com.google.javascript.jscomp.Scope.Var alias, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {
            this.alias = alias;
            this.refInfo = refInfo;
        }
    }

    private class InliningBehavior implements com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior {
        private final java.util.Set<com.google.javascript.jscomp.Scope.Var> staleVars = com.google.common.collect.Sets.newHashSet();

        final java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.jscomp.InlineVariables.AliasCandidate> aliasCandidates = com.google.common.collect.Maps.newHashMap();

        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            collectAliasCandidates(t, referenceMap);
            doInlinesForScope(t, referenceMap);
        }

        private void collectAliasCandidates(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            if (mode != com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY) {
                for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                    com.google.javascript.jscomp.Scope.Var v = it.next();
                    com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                    if ((((referenceInfo != null) && (referenceInfo.references.size() >= 2)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) {
                        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
                        com.google.javascript.rhino.Node value = init.getAssignedValue();
                        if ((value != null) && value.isName()) {
                            aliasCandidates.put(value, new com.google.javascript.jscomp.InlineVariables.AliasCandidate(v, referenceInfo));
                        }
                    }
                }
            }
        }

        private void doInlinesForScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            boolean maybeModifiedArguments = maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);
            for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                com.google.javascript.jscomp.Scope.Var v = it.next();
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                if ((referenceInfo == null) || isVarInlineForbidden(v)) {
                    continue;
                } else if (isInlineableDeclaredConstant(v, referenceInfo)) {
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReferenceForConstants();
                    com.google.javascript.rhino.Node value = init.getAssignedValue();
                    inlineDeclaredConstant(v, value, referenceInfo.references);
                    staleVars.add(v);
                } else if (mode == com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY) {
                    continue;
                } else {
                    inlineNonConstants(v, referenceInfo, maybeModifiedArguments);
                }
            }
        }

        private boolean maybeEscapedOrModifiedArguments(com.google.javascript.jscomp.Scope scope, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            if (scope.isLocal()) {
                com.google.javascript.jscomp.Scope.Var arguments = scope.getArgumentsVar();
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refs = referenceMap.getReferences(arguments);
                if ((refs != null) && (!refs.references.isEmpty())) {
                    for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : refs.references) {
                        com.google.javascript.rhino.Node refNode = ref.getNode();
                        com.google.javascript.rhino.Node refParent = ref.getParent();
                        if (!((com.google.javascript.jscomp.NodeUtil.isGet(refParent) && (refNode == ref.getParent().getFirstChild())) && (!isLValue(refParent)))) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private boolean isLValue(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return (parent.isInc() || parent.isDec()) || (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n));
        }

        private void inlineNonConstants(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo, boolean maybeModifiedArguments) {
            int refCount = referenceInfo.references.size();
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration = referenceInfo.references.get(0);
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
            int firstRefAfterInit = (declaration == init) ? 2 : 3;
            if ((refCount > 1) && isImmutableAndWellDefinedVariable(v, referenceInfo)) {
                com.google.javascript.rhino.Node value;
                if (init != null) {
                    value = init.getAssignedValue();
                } else {
                    com.google.javascript.rhino.Node srcLocation = declaration.getNode();
                    value = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
                }
                com.google.common.base.Preconditions.checkNotNull(value);
                inlineWellDefinedVariable(v, value, referenceInfo.references);
                staleVars.add(v);
            } else if (refCount == firstRefAfterInit) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);
                if (canInline(declaration, init, reference)) {
                    inline(v, declaration, init, reference);
                    staleVars.add(v);
                }
            } else if ((declaration != init) && (refCount == 2)) {
                if (isValidDeclaration(declaration) && isValidInitialization(init)) {
                    com.google.javascript.rhino.Node value = init.getAssignedValue();
                    com.google.common.base.Preconditions.checkNotNull(value);
                    inlineWellDefinedVariable(v, value, referenceInfo.references);
                    staleVars.add(v);
                }
            }
            if ((((!maybeModifiedArguments) && (!staleVars.contains(v))) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) {
                java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs = referenceInfo.references;
                for (int i = 1; i < refs.size(); i++) {
                    com.google.javascript.rhino.Node nameNode = refs.get(i).getNode();
                    if (aliasCandidates.containsKey(nameNode)) {
                        com.google.javascript.jscomp.InlineVariables.AliasCandidate candidate = aliasCandidates.get(nameNode);
                        if ((!staleVars.contains(candidate.alias)) && (!isVarInlineForbidden(candidate.alias))) {
                            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference aliasInit;
                            boolean spoonDefaultValue = false;
                            try {
                                spoonDefaultValue = true;
                            } catch (java.lang.Exception __NopolProcessorException) {
                            }
                            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                            if (fr.inria.lille.commons.trace.RuntimeValues.instance(6).isEnabled()) {
                                fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionStarts();
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("init",init);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.google.javascript.jscomp.InlineVariables.this.compiler",com.google.javascript.jscomp.InlineVariables.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.aliasCandidates",com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.aliasCandidates);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("firstRefAfterInit",firstRefAfterInit);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.google.javascript.jscomp.InlineVariables.this.inlineAllStrings",com.google.javascript.jscomp.InlineVariables.this.inlineAllStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("declaration",declaration);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("maybeModifiedArguments",maybeModifiedArguments);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.google.javascript.jscomp.InlineVariables.this.identifyConstants",com.google.javascript.jscomp.InlineVariables.this.identifyConstants);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("refCount",refCount);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("candidate",candidate);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.google.javascript.jscomp.InlineVariables.this.mode",com.google.javascript.jscomp.InlineVariables.this.mode);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("refs",refs);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("v",v);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.staleVars",com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.staleVars);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("referenceInfo",referenceInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectInput("nameNode",nameNode);} catch (Exception ex1) {ex1.printStackTrace();};
                                fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectOutput(runtimeAngelicValue);
                                fr.inria.lille.commons.trace.RuntimeValues.instance(6).collectionEnds();
                            }
                            if (runtimeAngelicValue)
                                aliasInit = candidate.refInfo.getInitializingReference();

                            com.google.javascript.rhino.Node value = aliasInit.getAssignedValue();
                            com.google.common.base.Preconditions.checkNotNull(value);
                            inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references);
                            staleVars.add(candidate.alias);
                        }
                    }
                }
            }
        }

        private void blacklistVarReferencesInTree(com.google.javascript.rhino.Node root, com.google.javascript.jscomp.Scope scope) {
            for (com.google.javascript.rhino.Node c = root.getFirstChild(); c != null; c = c.getNext()) {
                blacklistVarReferencesInTree(c, scope);
            }
            if (root.isName()) {
                staleVars.add(scope.getVar(root.getString()));
            }
        }

        private boolean isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var var) {
            return ((var.isExtern() || compiler.getCodingConvention().isExported(var.name)) || com.google.javascript.jscomp.RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)) || staleVars.contains(var);
        }

        private void inline(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref) {
            com.google.javascript.rhino.Node value = init.getAssignedValue();
            com.google.common.base.Preconditions.checkState(value != null);
            boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(value);
            compiler.reportChangeToEnclosingScope(ref.getNode());
            inlineValue(v, ref, value.detachFromParent());
            if (decl != init) {
                com.google.javascript.rhino.Node expressRoot = init.getGrandparent();
                com.google.common.base.Preconditions.checkState(expressRoot.isExprResult());
                com.google.javascript.jscomp.NodeUtil.removeChild(expressRoot.getParent(), expressRoot);
            }
            if (!isFunctionDeclaration) {
                compiler.reportChangeToEnclosingScope(decl.getNode());
                removeDeclaration(decl);
            }
        }

        private void inlineWellDefinedVariable(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.rhino.Node value, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl = refSet.get(0);
            for (int i = 1; i < refSet.size(); i++) {
                inlineValue(v, refSet.get(i), value.cloneTree());
            }
            removeDeclaration(decl);
        }

        private void inlineDeclaredConstant(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.rhino.Node value, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl = null;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference r : refSet) {
                if (r.getNode() == v.getNameNode()) {
                    decl = r;
                } else {
                    inlineValue(v, r, value.cloneTree());
                }
            }
            removeDeclaration(decl);
        }

        private void removeDeclaration(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl) {
            com.google.javascript.rhino.Node varNode = decl.getParent();
            com.google.javascript.rhino.Node grandparent = decl.getGrandparent();
            compiler.reportChangeToEnclosingScope(decl.getNode());
            varNode.removeChild(decl.getNode());
            if (!varNode.hasChildren()) {
                com.google.common.base.Preconditions.checkState(varNode.isVar());
                com.google.javascript.jscomp.NodeUtil.removeChild(grandparent, varNode);
            }
        }

        private void inlineValue(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref, com.google.javascript.rhino.Node value) {
            compiler.reportChangeToEnclosingScope(ref.getNode());
            if (ref.isSimpleAssignmentToName()) {
                ref.getGrandparent().replaceChild(ref.getParent(), value);
            } else {
                ref.getParent().replaceChild(ref.getNode(), value);
            }
            blacklistVarReferencesInTree(value, v.scope);
        }

        private boolean isInlineableDeclaredConstant(com.google.javascript.jscomp.Scope.Var var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {
            if (!identifyConstants.apply(var)) {
                return false;
            }
            if (!refInfo.isAssignedOnceInLifetime()) {
                return false;
            }
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = refInfo.getInitializingReferenceForConstants();
            if (init == null) {
                return false;
            }
            com.google.javascript.rhino.Node value = init.getAssignedValue();
            if (value == null) {
                return false;
            }
            if (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                return false;
            }
            return (!value.isString()) || isStringWorthInlining(var, refInfo.references);
        }

        private boolean isStringWorthInlining(com.google.javascript.jscomp.Scope.Var var, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs) {
            if ((!inlineAllStrings) && (!var.isDefine())) {
                int len = var.getInitialValue().getString().length() + "''".length();
                int noInlineBytes = ("var xx=;".length() + len) + (4 * (refs.size() - 1));
                int inlineBytes = (len - 1) * (refs.size() - 1);
                return noInlineBytes >= inlineBytes;
            }
            return true;
        }

        private boolean canInline(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            if (((!isValidDeclaration(declaration)) || (!isValidInitialization(initialization))) || (!isValidReference(reference))) {
                return false;
            }
            if ((declaration != initialization) && (!initialization.getGrandparent().isExprResult())) {
                return false;
            }
            if ((declaration.getBasicBlock() != initialization.getBasicBlock()) || (declaration.getBasicBlock() != reference.getBasicBlock())) {
                return false;
            }
            com.google.javascript.rhino.Node value = initialization.getAssignedValue();
            com.google.common.base.Preconditions.checkState(value != null);
            if ((value.isGetProp() && reference.getParent().isCall()) && (reference.getParent().getFirstChild() == reference.getNode())) {
                return false;
            }
            if (value.isFunction()) {
                com.google.javascript.rhino.Node callNode = reference.getParent();
                if (reference.getParent().isCall()) {
                    com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
                    com.google.javascript.jscomp.CodingConvention.SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);
                    if (relationship != null) {
                        return false;
                    }
                    if (convention.getSingletonGetterClassName(callNode) != null) {
                        return false;
                    }
                }
            }
            return canMoveAggressively(value) || canMoveModerately(initialization, reference);
        }

        private boolean canMoveAggressively(com.google.javascript.rhino.Node value) {
            return com.google.javascript.jscomp.NodeUtil.isLiteralValue(value, true) || value.isFunction();
        }

        private boolean canMoveModerately(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            java.util.Iterator<com.google.javascript.rhino.Node> it;
            if (initialization.getParent().isVar()) {
                it = com.google.javascript.jscomp.NodeIterators.LocalVarMotion.forVar(initialization.getNode(), initialization.getParent(), initialization.getGrandparent());
            } else if (initialization.getParent().isAssign()) {
                com.google.common.base.Preconditions.checkState(initialization.getGrandparent().isExprResult());
                it = com.google.javascript.jscomp.NodeIterators.LocalVarMotion.forAssign(initialization.getNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());
            } else {
                throw new java.lang.IllegalStateException("Unexpected initialization parent " + initialization.getParent().toStringTree());
            }
            com.google.javascript.rhino.Node targetName = reference.getNode();
            while (it.hasNext()) {
                com.google.javascript.rhino.Node curNode = it.next();
                if (curNode == targetName) {
                    return true;
                }
            } 
            return false;
        }

        private boolean isValidDeclaration(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration) {
            return (declaration.getParent().isVar() && (!declaration.getGrandparent().isFor())) || com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(declaration.getParent());
        }

        private boolean isValidInitialization(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization) {
            if (initialization == null) {
                return false;
            } else if (initialization.isDeclaration()) {
                if ((!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(initialization.getParent())) && (initialization.getNode().getFirstChild() == null)) {
                    return false;
                }
            } else {
                com.google.javascript.rhino.Node parent = initialization.getParent();
                com.google.common.base.Preconditions.checkState(parent.isAssign() && (parent.getFirstChild() == initialization.getNode()));
            }
            com.google.javascript.rhino.Node n = initialization.getAssignedValue();
            if (n.isFunction()) {
                return compiler.getCodingConvention().isInlinableFunction(n);
            }
            return true;
        }

        private boolean isValidReference(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            return (!reference.isDeclaration()) && (!reference.isLvalue());
        }

        private boolean isImmutableAndWellDefinedVariable(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {
            java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet = refInfo.references;
            int startingReadRef = 1;
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference refDecl = refSet.get(0);
            if (!isValidDeclaration(refDecl)) {
                return false;
            }
            boolean isNeverAssigned = refInfo.isNeverAssigned();
            if (!isNeverAssigned) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference refInit = refInfo.getInitializingReference();
                if (!isValidInitialization(refInit)) {
                    return false;
                }
                if (refDecl != refInit) {
                    com.google.common.base.Preconditions.checkState(refInit == refSet.get(1));
                    startingReadRef = 2;
                }
                if (!refInfo.isWellDefined()) {
                    return false;
                }
                com.google.javascript.rhino.Node value = refInit.getAssignedValue();
                com.google.common.base.Preconditions.checkNotNull(value);
                boolean isImmutableValueWorthInlining = com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) && ((!value.isString()) || isStringWorthInlining(v, refInfo.references));
                boolean isInlinableThisAlias = value.isThis() && (!refInfo.isEscaped());
                if ((!isImmutableValueWorthInlining) && (!isInlinableThisAlias)) {
                    return false;
                }
            }
            for (int i = startingReadRef; i < refSet.size(); i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = refSet.get(i);
                if (!isValidReference(ref)) {
                    return false;
                }
            }
            return true;
        }
    }
}
[95737] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659847153049
GPR[SSUN]-1659847153049
1103597247
GPR[ESUN]-1659847153289
GPR[SSUN]-1659847153289
-1966087783
GPR[SPVATF]-1659847153482
GPR[EPVATF]-1659847153500
[96189] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847153501
GPR[SSUN]-1659847153501
1103597247
GPR[SPVATF]-1659847153740
GPR[EPVATF]-1659847154181
GPR[SPS]-1659847154181
GPR[EPS]-1659847155447
GPR[SPVATR]-1659847155447
[98135] INFO TestPatch - Applying patch: com.google.javascript.jscomp.InlineVariables$InliningBehavior:309: PRECONDITION (refCount) != (4)
[98493] INFO TestPatch - Running test suite to check the patch "(refCount) != (4)" is working
GPR[EPVATR]-1659847156252
[98940] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659847156252
[98943] INFO NoPol - --- a/src/com/google/javascript/jscomp/InlineVariables.java
+++ b/src/com/google/javascript/jscomp/InlineVariables.java
@@ -308,12 +308,14 @@
             AliasCandidate candidate = aliasCandidates.get(nameNode);
-            if (!staleVars.contains(candidate.alias) &&
-                !isVarInlineForbidden(candidate.alias)) {
-              Reference aliasInit;
-              aliasInit = candidate.refInfo.getInitializingReference();
-              Node value = aliasInit.getAssignedValue();
-              Preconditions.checkNotNull(value);
-              inlineWellDefinedVariable(candidate.alias,
-                  value,
-                  candidate.refInfo.references);
-              staleVars.add(candidate.alias);
+            if ((refCount) != (4)) {
+              if (!staleVars.contains(candidate.alias) &&
+              !isVarInlineForbidden(candidate.alias)) {
+                Reference aliasInit;
+                aliasInit = candidate.refInfo.getInitializingReference();
+                Node value = aliasInit.getAssignedValue();
+                Preconditions.checkNotNull(value);
+                inlineWellDefinedVariable(candidate.alias,
+                value,
+                candidate.refInfo.references);
+                staleVars.add(candidate.alias);
+              }
             }

Saving patch at /experiment_home///results/Nopol/Closure/120/seed_260/patch_94269_3ts_1659847156255.diff
GPR[SPVATF]-1659847156256
GPR[EPVATF]-1659847156680
GPR[SPS]-1659847156680
GPR[EPS]-1659847166650
GPR[ESUN]-1659847166650
GPR[SSUN]-1659847166650
1103597247
GPR[ESUN]-1659847166904
GPR[SSUN]-1659847166904
-1966087783
GPR[SPVATF]-1659847167097
GPR[EPVATF]-1659847167116
[109804] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847167116
GPR[SSUN]-1659847167116
-1966087783
GPR[SPVATF]-1659847167306
GPR[EPVATF]-1659847167323
[110012] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847167324
GPR[SSUN]-1659847167324
-1966087783
GPR[SPVATF]-1659847167516
GPR[EPVATF]-1659847167533
[110221] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847167533
GPR[SSUN]-1659847167533
-1966087783
GPR[SPVATF]-1659847167727
GPR[EPVATF]-1659847167745
[110433] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847167745
GPR[SSUN]-1659847167745
-1966087783
GPR[SPVATF]-1659847167935
GPR[EPVATF]-1659847167952
[110640] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847167952
GPR[SSUN]-1659847167952
-1966087783
GPR[SPVATF]-1659847168142
GPR[EPVATF]-1659847168159
[110847] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847168159
GPR[EPVATF]-1659847168177
[110865] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847168177
GPR[SSUN]-1659847168177
-1966087783
GPR[ESUN]-1659847168366
GPR[SSUN]-1659847168366
1103597247
GPR[SPVATF]-1659847168597
GPR[EPVATF]-1659847169022
GPR[SPS]-1659847169022
[112285] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:697.
GPR[EPS]-1659847169597
GPR[ESUN]-1659847169597
GPR[SSUN]-1659847169597
1103597247
GPR[SPVATF]-1659847169836
GPR[EPVATF]-1659847170262
GPR[SPS]-1659847170262
[113498] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:696.
GPR[EPS]-1659847170810
GPR[ESUN]-1659847170810
GPR[SSUN]-1659847170810
1103597247
GPR[SPVATF]-1659847171048
GPR[EPVATF]-1659847171475
GPR[SPS]-1659847171475
[114706] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:652.
GPR[EPS]-1659847172018
GPR[ESUN]-1659847172018
GPR[SSUN]-1659847172018
1103597247
GPR[ESUN]-1659847172285
GPR[SSUN]-1659847172285
-1934014012
GPR[SPVATF]-1659847172490
GPR[EPVATF]-1659847172925
GPR[SPS]-1659847172925
[116099] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeIterators$LocalVarMotion:284.
GPR[EPS]-1659847173411
GPR[ESUN]-1659847173411
GPR[SSUN]-1659847173411
-1934014012
GPR[SPVATF]-1659847173625
GPR[EPVATF]-1659847174065
GPR[SPS]-1659847174065
[118086] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeIterators$LocalVarMotion:283.
GPR[EPS]-1659847175398
GPR[ESUN]-1659847175398
GPR[SSUN]-1659847175398
1795686761
GPR[SPVATF]-1659847175646
GPR[EPVATF]-1659847176121
GPR[SPS]-1659847176121
[119405] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$BasicBlock:711.
GPR[EPS]-1659847176717
GPR[ESUN]-1659847176718
GPR[SSUN]-1659847176718
-132053243
GPR[SPVATF]-1659847176914
GPR[EPVATF]-1659847176932
[119620] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847176932
GPR[SSUN]-1659847176932
-132053243
GPR[SPVATF]-1659847177129
GPR[EPVATF]-1659847177147
[119835] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847177147
GPR[SSUN]-1659847177147
-132053243
GPR[SPVATF]-1659847177338
GPR[EPVATF]-1659847177355
[120043] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847177355
GPR[SSUN]-1659847177355
1103597247
GPR[SPVATF]-1659847177590
GPR[EPVATF]-1659847178017
GPR[SPS]-1659847178017
[121254] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:701.
GPR[EPS]-1659847178566
GPR[ESUN]-1659847178566
GPR[SSUN]-1659847178566
-132053243
GPR[SPVATF]-1659847178765
GPR[EPVATF]-1659847178783
[121472] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847178784
GPR[EPVATF]-1659847178801
[121489] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847178801
GPR[SSUN]-1659847178801
-132053243
GPR[ESUN]-1659847178998
GPR[SSUN]-1659847178998
1795686761
GPR[SPVATF]-1659847179241
GPR[EPVATF]-1659847179670
GPR[SPS]-1659847179670
GPR[EPS]-1659847187352
GPR[ESUN]-1659847187352
GPR[SSUN]-1659847187352
-132053243
GPR[ESUN]-1659847187671
GPR[SSUN]-1659847187671
-132053243
GPR[SPVATF]-1659847187863
GPR[EPVATF]-1659847187881
[130569] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847187881
GPR[EPVATF]-1659847187900
[130588] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847187900
GPR[SSUN]-1659847187900
-132053243
GPR[ESUN]-1659847188094
GPR[SSUN]-1659847188094
-132053243
GPR[ESUN]-1659847188287
GPR[SSUN]-1659847188287
-132053243
GPR[ESUN]-1659847188479
GPR[SSUN]-1659847188479
-132053243
GPR[SPVATF]-1659847188673
GPR[EPVATF]-1659847188691
[131379] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847188691
GPR[EPVATF]-1659847188708
[131396] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847188708
GPR[SSUN]-1659847188708
-132053243
GPR[SPVATF]-1659847188902
GPR[EPVATF]-1659847188920
[131609] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847188921
GPR[SSUN]-1659847188921
1795686761
GPR[SPVATF]-1659847189163
GPR[EPVATF]-1659847189589
GPR[SPS]-1659847189589
GPR[EPS]-1659847199439
GPR[ESUN]-1659847199439
GPR[SSUN]-1659847199439
80988634
GPR[ESUN]-1659847199956
GPR[SSUN]-1659847199956
1103597247
GPR[ESUN]-1659847200749
GPR[SSUN]-1659847200749
1795686761
GPR[SPVATF]-1659847201004
GPR[EPVATF]-1659847201422
GPR[SPS]-1659847201422
[144727] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:328.
GPR[EPS]-1659847202039
GPR[ESUN]-1659847202039
GPR[SSUN]-1659847202039
1103597247
GPR[SPVATF]-1659847202276
GPR[EPVATF]-1659847202735
GPR[SPS]-1659847202735
[145959] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:659.
GPR[EPS]-1659847203271
GPR[ESUN]-1659847203271
GPR[SSUN]-1659847203271
1187751237
GPR[ESUN]-1659847203560
GPR[SSUN]-1659847203560
-132053243
GPR[SPVATF]-1659847203759
GPR[EPVATF]-1659847203777
[146465] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847203777
GPR[SSUN]-1659847203777
-132053243
GPR[SPVATF]-1659847203971
GPR[EPVATF]-1659847203990
[146678] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847203990
GPR[SSUN]-1659847203990
1103597247
GPR[SPVATF]-1659847204255
GPR[EPVATF]-1659847204748
GPR[SPS]-1659847204748
[147975] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:535.
GPR[EPS]-1659847205287
GPR[ESUN]-1659847205287
GPR[SSUN]-1659847205287
-132053243
GPR[SPVATF]-1659847205484
GPR[EPVATF]-1659847205503
[148191] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847205503
GPR[EPVATF]-1659847205522
[148210] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847205522
GPR[SSUN]-1659847205522
1103597247
GPR[SPVATF]-1659847205766
GPR[EPVATF]-1659847206218
GPR[SPS]-1659847206218
[149283] ERROR ConstraintModelBuilder - Unable to compile the change: 
class InlineVariables implements com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    enum Mode {

        CONSTANTS_ONLY,
        LOCALS_ONLY,
        ALL;}

    private final com.google.javascript.jscomp.InlineVariables.Mode mode;

    private final boolean inlineAllStrings;

    private final com.google.javascript.jscomp.InlineVariables.IdentifyConstants identifyConstants = new com.google.javascript.jscomp.InlineVariables.IdentifyConstants();

    InlineVariables(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.InlineVariables.Mode mode, boolean inlineAllStrings) {
        this.compiler = compiler;
        this.mode = mode;
        this.inlineAllStrings = inlineAllStrings;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.ReferenceCollectingCallback callback = new com.google.javascript.jscomp.ReferenceCollectingCallback(compiler, new com.google.javascript.jscomp.InlineVariables.InliningBehavior(), getFilterForMode());
        callback.process(externs, root);
    }

    private com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> getFilterForMode() {
        switch (mode) {
            case ALL :
                return com.google.common.base.Predicates.<com.google.javascript.jscomp.Scope.Var>alwaysTrue();
            case LOCALS_ONLY :
                return new com.google.javascript.jscomp.InlineVariables.IdentifyLocals();
            case CONSTANTS_ONLY :
                return new com.google.javascript.jscomp.InlineVariables.IdentifyConstants();
            default :
                throw new java.lang.IllegalStateException();
        }
    }

    private class IdentifyConstants implements com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return var.isConst();
        }
    }

    private class IdentifyLocals implements com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return var.scope.isLocal();
        }
    }

    private static class AliasCandidate {
        private final com.google.javascript.jscomp.Scope.Var alias;

        private final com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo;

        AliasCandidate(com.google.javascript.jscomp.Scope.Var alias, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {
            this.alias = alias;
            this.refInfo = refInfo;
        }
    }

    private class InliningBehavior implements com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior {
        private final java.util.Set<com.google.javascript.jscomp.Scope.Var> staleVars = com.google.common.collect.Sets.newHashSet();

        final java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.jscomp.InlineVariables.AliasCandidate> aliasCandidates = com.google.common.collect.Maps.newHashMap();

        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            collectAliasCandidates(t, referenceMap);
            doInlinesForScope(t, referenceMap);
        }

        private void collectAliasCandidates(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            if (mode != com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY) {
                for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                    com.google.javascript.jscomp.Scope.Var v = it.next();
                    com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                    if ((((referenceInfo != null) && (referenceInfo.references.size() >= 2)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) {
                        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
                        com.google.javascript.rhino.Node value = init.getAssignedValue();
                        if ((value != null) && value.isName()) {
                            aliasCandidates.put(value, new com.google.javascript.jscomp.InlineVariables.AliasCandidate(v, referenceInfo));
                        }
                    }
                }
            }
        }

        private void doInlinesForScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            boolean maybeModifiedArguments = maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);
            for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                com.google.javascript.jscomp.Scope.Var v = it.next();
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                if ((referenceInfo == null) || isVarInlineForbidden(v)) {
                    continue;
                } else if (isInlineableDeclaredConstant(v, referenceInfo)) {
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReferenceForConstants();
                    com.google.javascript.rhino.Node value = init.getAssignedValue();
                    inlineDeclaredConstant(v, value, referenceInfo.references);
                    staleVars.add(v);
                } else if (mode == com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY) {
                    continue;
                } else {
                    inlineNonConstants(v, referenceInfo, maybeModifiedArguments);
                }
            }
        }

        private boolean maybeEscapedOrModifiedArguments(com.google.javascript.jscomp.Scope scope, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            if (scope.isLocal()) {
                com.google.javascript.jscomp.Scope.Var arguments = scope.getArgumentsVar();
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refs = referenceMap.getReferences(arguments);
                if ((refs != null) && (!refs.references.isEmpty())) {
                    for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : refs.references) {
                        com.google.javascript.rhino.Node refNode = ref.getNode();
                        com.google.javascript.rhino.Node refParent = ref.getParent();
                        if (!((com.google.javascript.jscomp.NodeUtil.isGet(refParent) && (refNode == ref.getParent().getFirstChild())) && (!isLValue(refParent)))) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private boolean isLValue(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return (parent.isInc() || parent.isDec()) || (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n));
        }

        private void inlineNonConstants(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo, boolean maybeModifiedArguments) {
            int refCount = referenceInfo.references.size();
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration = referenceInfo.references.get(0);
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
            int firstRefAfterInit = (declaration == init) ? 2 : 3;
            if ((refCount > 1) && isImmutableAndWellDefinedVariable(v, referenceInfo)) {
                com.google.javascript.rhino.Node value;
                if (init != null) {
                    value = init.getAssignedValue();
                } else {
                    com.google.javascript.rhino.Node srcLocation = declaration.getNode();
                    value = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
                }
                com.google.common.base.Preconditions.checkNotNull(value);
                inlineWellDefinedVariable(v, value, referenceInfo.references);
                staleVars.add(v);
            } else if (refCount == firstRefAfterInit) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);
                if (canInline(declaration, init, reference)) {
                    inline(v, declaration, init, reference);
                    staleVars.add(v);
                }
            } else if ((declaration != init) && (refCount == 2)) {
                if (isValidDeclaration(declaration) && isValidInitialization(init)) {
                    com.google.javascript.rhino.Node value = init.getAssignedValue();
                    com.google.common.base.Preconditions.checkNotNull(value);
                    inlineWellDefinedVariable(v, value, referenceInfo.references);
                    staleVars.add(v);
                }
            }
            if ((((!maybeModifiedArguments) && (!staleVars.contains(v))) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) {
                java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs = referenceInfo.references;
                for (int i = 1; i < refs.size(); i++) {
                    com.google.javascript.rhino.Node nameNode = refs.get(i).getNode();
                    if (aliasCandidates.containsKey(nameNode)) {
                        com.google.javascript.jscomp.InlineVariables.AliasCandidate candidate = aliasCandidates.get(nameNode);
                        if ((!staleVars.contains(candidate.alias)) && (!isVarInlineForbidden(candidate.alias))) {
                            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference aliasInit;
                            aliasInit = candidate.refInfo.getInitializingReference();
                            com.google.javascript.rhino.Node value = aliasInit.getAssignedValue();
                            com.google.common.base.Preconditions.checkNotNull(value);
                            inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references);
                            staleVars.add(candidate.alias);
                        }
                    }
                }
            }
        }

        private void blacklistVarReferencesInTree(com.google.javascript.rhino.Node root, com.google.javascript.jscomp.Scope scope) {
            for (com.google.javascript.rhino.Node c = root.getFirstChild(); c != null; c = c.getNext()) {
                blacklistVarReferencesInTree(c, scope);
            }
            if (root.isName()) {
                staleVars.add(scope.getVar(root.getString()));
            }
        }

        private boolean isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var var) {
            return ((var.isExtern() || compiler.getCodingConvention().isExported(var.name)) || com.google.javascript.jscomp.RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)) || staleVars.contains(var);
        }

        private void inline(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref) {
            com.google.javascript.rhino.Node value = init.getAssignedValue();
            com.google.common.base.Preconditions.checkState(value != null);
            boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(value);
            compiler.reportChangeToEnclosingScope(ref.getNode());
            inlineValue(v, ref, value.detachFromParent());
            if (decl != init) {
                com.google.javascript.rhino.Node expressRoot = init.getGrandparent();
                com.google.common.base.Preconditions.checkState(expressRoot.isExprResult());
                com.google.javascript.jscomp.NodeUtil.removeChild(expressRoot.getParent(), expressRoot);
            }
            if (!isFunctionDeclaration) {
                compiler.reportChangeToEnclosingScope(decl.getNode());
                removeDeclaration(decl);
            }
        }

        private void inlineWellDefinedVariable(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.rhino.Node value, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl = refSet.get(0);
            for (int i = 1; i < refSet.size(); i++) {
                inlineValue(v, refSet.get(i), value.cloneTree());
            }
            removeDeclaration(decl);
        }

        private void inlineDeclaredConstant(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.rhino.Node value, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl = null;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference r : refSet) {
                if (r.getNode() == v.getNameNode()) {
                    decl = r;
                } else {
                    inlineValue(v, r, value.cloneTree());
                }
            }
            removeDeclaration(decl);
        }

        private void removeDeclaration(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl) {
            com.google.javascript.rhino.Node varNode = decl.getParent();
            com.google.javascript.rhino.Node grandparent = decl.getGrandparent();
            compiler.reportChangeToEnclosingScope(decl.getNode());
            varNode.removeChild(decl.getNode());
            if (!varNode.hasChildren()) {
                com.google.common.base.Preconditions.checkState(varNode.isVar());
                com.google.javascript.jscomp.NodeUtil.removeChild(grandparent, varNode);
            }
        }

        private void inlineValue(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref, com.google.javascript.rhino.Node value) {
            compiler.reportChangeToEnclosingScope(ref.getNode());
            if (ref.isSimpleAssignmentToName()) {
                ref.getGrandparent().replaceChild(ref.getParent(), value);
            } else {
                ref.getParent().replaceChild(ref.getNode(), value);
            }
            blacklistVarReferencesInTree(value, v.scope);
        }

        private boolean isInlineableDeclaredConstant(com.google.javascript.jscomp.Scope.Var var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {
            if (!identifyConstants.apply(var)) {
                return false;
            }
            if (!refInfo.isAssignedOnceInLifetime()) {
                return false;
            }
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = refInfo.getInitializingReferenceForConstants();
            if (init == null) {
                return false;
            }
            com.google.javascript.rhino.Node value = init.getAssignedValue();
            if (value == null) {
                return false;
            }
            if (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                return false;
            }
            return (!value.isString()) || isStringWorthInlining(var, refInfo.references);
        }

        private boolean isStringWorthInlining(com.google.javascript.jscomp.Scope.Var var, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs) {
            if ((!inlineAllStrings) && (!var.isDefine())) {
                int len = var.getInitialValue().getString().length() + "''".length();
                int noInlineBytes = ("var xx=;".length() + len) + (4 * (refs.size() - 1));
                int inlineBytes = (len - 1) * (refs.size() - 1);
                return noInlineBytes >= inlineBytes;
            }
            return true;
        }

        private boolean canInline(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            if (((!isValidDeclaration(declaration)) || (!isValidInitialization(initialization))) || (!isValidReference(reference))) {
                return false;
            }
            if ((declaration != initialization) && (!initialization.getGrandparent().isExprResult())) {
                return false;
            }
            if ((declaration.getBasicBlock() != initialization.getBasicBlock()) || (declaration.getBasicBlock() != reference.getBasicBlock())) {
                return false;
            }
            com.google.javascript.rhino.Node value = initialization.getAssignedValue();
            com.google.common.base.Preconditions.checkState(value != null);
            if ((value.isGetProp() && reference.getParent().isCall()) && (reference.getParent().getFirstChild() == reference.getNode())) {
                return false;
            }
            if (value.isFunction()) {
                com.google.javascript.rhino.Node callNode = reference.getParent();
                if (reference.getParent().isCall()) {
                    com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
                    com.google.javascript.jscomp.CodingConvention.SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);
                    if (relationship != null) {
                        return false;
                    }
                    if (convention.getSingletonGetterClassName(callNode) != null) {
                        return false;
                    }
                }
            }
            return canMoveAggressively(value) || canMoveModerately(initialization, reference);
        }

        private boolean canMoveAggressively(com.google.javascript.rhino.Node value) {
            return com.google.javascript.jscomp.NodeUtil.isLiteralValue(value, true) || value.isFunction();
        }

        private boolean canMoveModerately(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            java.util.Iterator<com.google.javascript.rhino.Node> it;
            if (initialization.getParent().isVar()) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(21).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("reference",reference);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.aliasCandidates",com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.aliasCandidates);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("com.google.javascript.jscomp.InlineVariables.this.compiler",com.google.javascript.jscomp.InlineVariables.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("com.google.javascript.jscomp.InlineVariables.this.mode",com.google.javascript.jscomp.InlineVariables.this.mode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.staleVars",com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.staleVars);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("com.google.javascript.jscomp.InlineVariables.this.inlineAllStrings",com.google.javascript.jscomp.InlineVariables.this.inlineAllStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("initialization",initialization);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectInput("com.google.javascript.jscomp.InlineVariables.this.identifyConstants",com.google.javascript.jscomp.InlineVariables.this.identifyConstants);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(21).collectionEnds();
                }
                if (runtimeAngelicValue)
                    it = com.google.javascript.jscomp.NodeIterators.LocalVarMotion.forVar(initialization.getNode(), initialization.getParent(), initialization.getGrandparent());

            } else if (initialization.getParent().isAssign()) {
                com.google.common.base.Preconditions.checkState(initialization.getGrandparent().isExprResult());
                it = com.google.javascript.jscomp.NodeIterators.LocalVarMotion.forAssign(initialization.getNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());
            } else {
                throw new java.lang.IllegalStateException("Unexpected initialization parent " + initialization.getParent().toStringTree());
            }
            com.google.javascript.rhino.Node targetName = reference.getNode();
            while (it.hasNext()) {
                com.google.javascript.rhino.Node curNode = it.next();
                if (curNode == targetName) {
                    return true;
                }
            } 
            return false;
        }

        private boolean isValidDeclaration(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration) {
            return (declaration.getParent().isVar() && (!declaration.getGrandparent().isFor())) || com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(declaration.getParent());
        }

        private boolean isValidInitialization(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization) {
            if (initialization == null) {
                return false;
            } else if (initialization.isDeclaration()) {
                if ((!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(initialization.getParent())) && (initialization.getNode().getFirstChild() == null)) {
                    return false;
                }
            } else {
                com.google.javascript.rhino.Node parent = initialization.getParent();
                com.google.common.base.Preconditions.checkState(parent.isAssign() && (parent.getFirstChild() == initialization.getNode()));
            }
            com.google.javascript.rhino.Node n = initialization.getAssignedValue();
            if (n.isFunction()) {
                return compiler.getCodingConvention().isInlinableFunction(n);
            }
            return true;
        }

        private boolean isValidReference(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            return (!reference.isDeclaration()) && (!reference.isLvalue());
        }

        private boolean isImmutableAndWellDefinedVariable(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {
            java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet = refInfo.references;
            int startingReadRef = 1;
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference refDecl = refSet.get(0);
            if (!isValidDeclaration(refDecl)) {
                return false;
            }
            boolean isNeverAssigned = refInfo.isNeverAssigned();
            if (!isNeverAssigned) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference refInit = refInfo.getInitializingReference();
                if (!isValidInitialization(refInit)) {
                    return false;
                }
                if (refDecl != refInit) {
                    com.google.common.base.Preconditions.checkState(refInit == refSet.get(1));
                    startingReadRef = 2;
                }
                if (!refInfo.isWellDefined()) {
                    return false;
                }
                com.google.javascript.rhino.Node value = refInit.getAssignedValue();
                com.google.common.base.Preconditions.checkNotNull(value);
                boolean isImmutableValueWorthInlining = com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) && ((!value.isString()) || isStringWorthInlining(v, refInfo.references));
                boolean isInlinableThisAlias = value.isThis() && (!refInfo.isEscaped());
                if ((!isImmutableValueWorthInlining) && (!isInlinableThisAlias)) {
                    return false;
                }
            }
            for (int i = startingReadRef; i < refSet.size(); i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = refSet.get(i);
                if (!isValidReference(ref)) {
                    return false;
                }
            }
            return true;
        }
    }
}
[149283] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659847206595
GPR[SSUN]-1659847206595
1795686761
GPR[SPVATF]-1659847206844
GPR[EPVATF]-1659847207288
GPR[SPS]-1659847207288
[150584] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$Reference:609.
GPR[EPS]-1659847207896
GPR[ESUN]-1659847207896
GPR[SSUN]-1659847207896
-132053243
GPR[ESUN]-1659847208094
GPR[SSUN]-1659847208094
-132053243
GPR[SPVATF]-1659847208288
GPR[EPVATF]-1659847208307
[150995] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847208307
GPR[EPVATF]-1659847208325
[151013] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847208325
GPR[SSUN]-1659847208325
-132053243
GPR[ESUN]-1659847208522
GPR[SSUN]-1659847208522
-132053243
GPR[SPVATF]-1659847208714
GPR[EPVATF]-1659847208733
[151421] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847208733
GPR[SSUN]-1659847208733
-132053243
GPR[SPVATF]-1659847208928
GPR[EPVATF]-1659847208947
[151635] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847208947
GPR[SSUN]-1659847208948
-132053243
GPR[SPVATF]-1659847209144
GPR[EPVATF]-1659847209163
[151851] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847209163
GPR[SSUN]-1659847209163
-132053243
GPR[SPVATF]-1659847209359
GPR[EPVATF]-1659847209378
[152066] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847209378
GPR[SSUN]-1659847209378
-132053243
GPR[SPVATF]-1659847209572
GPR[EPVATF]-1659847209592
[152281] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847209593
GPR[SSUN]-1659847209593
-132053243
GPR[ESUN]-1659847209793
GPR[SSUN]-1659847209793
1103597247
GPR[ESUN]-1659847210036
GPR[SSUN]-1659847210036
1103597247
GPR[SPVATF]-1659847210276
GPR[EPVATF]-1659847210791
GPR[SPS]-1659847210791
[154074] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:387.
GPR[EPS]-1659847211386
GPR[ESUN]-1659847211386
GPR[SSUN]-1659847211386
1103597247
GPR[SPVATF]-1659847211629
GPR[EPVATF]-1659847212099
GPR[SPS]-1659847212099
[155335] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:385.
GPR[EPS]-1659847212647
GPR[ESUN]-1659847212647
GPR[SSUN]-1659847212647
1103597247
GPR[SPVATF]-1659847212888
GPR[EPVATF]-1659847213354
GPR[SPS]-1659847213354
[156581] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:384.
GPR[EPS]-1659847213893
GPR[ESUN]-1659847213893
GPR[SSUN]-1659847213893
1103597247
GPR[ESUN]-1659847214173
GPR[SSUN]-1659847214173
1187751237
GPR[SPVATF]-1659847214464
GPR[EPVATF]-1659847214944
GPR[SPS]-1659847214944
[158397] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class NodeUtil {
    static final long MAX_POSITIVE_INTEGER_NUMBER = ((long) (java.lang.Math.pow(2, 53)));

    static final java.lang.String JSC_PROPERTY_NAME_FN = "JSCompiler_renameProperty";

    static final char LARGEST_BASIC_LATIN = 0x7f;

    private static final java.util.Set<java.lang.String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS = new java.util.HashSet<java.lang.String>(java.util.Arrays.asList("Array", "Date", "Error", "Object", "RegExp", "XMLHttpRequest"));

    private NodeUtil() {
    }

    static com.google.javascript.rhino.jstype.TernaryValue getImpureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue value = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                return value.not();
            case com.google.javascript.rhino.Token.AND :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.and(rhs);
                }
            case com.google.javascript.rhino.Token.OR :
                {
                    com.google.javascript.rhino.jstype.TernaryValue lhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild());
                    com.google.javascript.rhino.jstype.TernaryValue rhs = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    return lhs.or(rhs);
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.javascript.rhino.jstype.TernaryValue trueValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getFirstChild().getNext());
                    com.google.javascript.rhino.jstype.TernaryValue falseValue = com.google.javascript.jscomp.NodeUtil.getImpureBooleanValue(n.getLastChild());
                    if (trueValue.equals(falseValue)) {
                        return trueValue;
                    } else {
                        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    }
                }
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.VOID :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            default :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n);
        }
    }

    static com.google.javascript.rhino.jstype.TernaryValue getPureBooleanValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getString().length() > 0);
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.rhino.jstype.TernaryValue.forBoolean(n.getDouble() != 0);
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getLastChild()).not();
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.FALSE :
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            case com.google.javascript.rhino.Token.VOID :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if ("undefined".equals(name) || "NaN".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
                } else if ("Infinity".equals(name)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.REGEXP :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (!com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n)) {
                    return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                }
                break;
        }
        return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
    }

    static java.lang.String getStringValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return n.getString();
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name)) {
                    return name;
                }
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(n.getDouble());
            case com.google.javascript.rhino.Token.FALSE :
                return "false";
            case com.google.javascript.rhino.Token.TRUE :
                return "true";
            case com.google.javascript.rhino.Token.NULL :
                return "null";
            case com.google.javascript.rhino.Token.VOID :
                return "undefined";
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? "false" : "true";
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                return com.google.javascript.jscomp.NodeUtil.arrayToString(n);
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return "[object Object]";
        }
        return null;
    }

    static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    static java.lang.String getArrayElementStringValue(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isNullOrUndefined(n) || n.isEmpty() ? "" : com.google.javascript.jscomp.NodeUtil.getStringValue(n);
    }

    static java.lang.String arrayToString(com.google.javascript.rhino.Node literal) {
        com.google.javascript.rhino.Node first = literal.getFirstChild();
        java.lang.StringBuilder result = new java.lang.StringBuilder();
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            java.lang.String childValue = com.google.javascript.jscomp.NodeUtil.getArrayElementStringValue(n);
            if (childValue == null) {
                return null;
            }
            if (n != first) {
                result.append(',');
            }
            result.append(childValue);
        }
        return result.toString();
    }

    static java.lang.Double getNumberValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
                return 1.0;
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
                return 0.0;
            case com.google.javascript.rhino.Token.NUMBER :
                return n.getDouble();
            case com.google.javascript.rhino.Token.VOID :
                if (com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n.getFirstChild())) {
                    return null;
                } else {
                    return java.lang.Double.NaN;
                }
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("undefined")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("NaN")) {
                    return java.lang.Double.NaN;
                }
                if (name.equals("Infinity")) {
                    return java.lang.Double.POSITIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NEG :
                if (((n.getChildCount() == 1) && n.getFirstChild().isName()) && n.getFirstChild().getString().equals("Infinity")) {
                    return java.lang.Double.NEGATIVE_INFINITY;
                }
                return null;
            case com.google.javascript.rhino.Token.NOT :
                com.google.javascript.rhino.jstype.TernaryValue child = com.google.javascript.jscomp.NodeUtil.getPureBooleanValue(n.getFirstChild());
                if (child != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                    return child.toBoolean(true) ? 0.0 : 1.0;
                }
                break;
            case com.google.javascript.rhino.Token.STRING :
                return com.google.javascript.jscomp.NodeUtil.getStringNumberValue(n.getString());
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                java.lang.String value = com.google.javascript.jscomp.NodeUtil.getStringValue(n);
                return value != null ? com.google.javascript.jscomp.NodeUtil.getStringNumberValue(value) : null;
        }
        return null;
    }

    static java.lang.Double getStringNumberValue(java.lang.String rawJsString) {
        if (rawJsString.contains("\u000b")) {
            return null;
        }
        java.lang.String s = com.google.javascript.jscomp.NodeUtil.trimJsWhiteSpace(rawJsString);
        if (s.length() == 0) {
            return 0.0;
        }
        if (((s.length() > 2) && (s.charAt(0) == '0')) && ((s.charAt(1) == 'x') || (s.charAt(1) == 'X'))) {
            try {
                return java.lang.Double.valueOf(java.lang.Integer.parseInt(s.substring(2), 16));
            } catch (java.lang.NumberFormatException e) {
                return java.lang.Double.NaN;
            }
        }
        if ((((s.length() > 3) && ((s.charAt(0) == '-') || (s.charAt(0) == '+'))) && (s.charAt(1) == '0')) && ((s.charAt(2) == 'x') || (s.charAt(2) == 'X'))) {
            return null;
        }
        if ((s.equals("infinity") || s.equals("-infinity")) || s.equals("+infinity")) {
            return null;
        }
        try {
            return java.lang.Double.parseDouble(s);
        } catch (java.lang.NumberFormatException e) {
            return java.lang.Double.NaN;
        }
    }

    static java.lang.String trimJsWhiteSpace(java.lang.String s) {
        int start = 0;
        int end = s.length();
        while ((end > 0) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(end - 1)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            end--;
        } 
        while ((start < end) && (com.google.javascript.jscomp.NodeUtil.isStrWhiteSpaceChar(s.charAt(start)) == com.google.javascript.rhino.jstype.TernaryValue.TRUE)) {
            start++;
        } 
        return s.substring(start, end);
    }

    public static com.google.javascript.rhino.jstype.TernaryValue isStrWhiteSpaceChar(int c) {
        switch (c) {
            case '\u000b' :
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            case ' ' :
            case '\n' :
            case '\r' :
            case '\t' :
            case ' ' :
            case '\f' :
            case ' ' :
            case ' ' :
            case '﻿' :
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            default :
                return java.lang.Character.getType(c) == java.lang.Character.SPACE_SEPARATOR ? com.google.javascript.rhino.jstype.TernaryValue.TRUE : com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        }
    }

    static java.lang.String getFunctionName(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return parent.getQualifiedName();
            case com.google.javascript.rhino.Token.ASSIGN :
                return parent.getFirstChild().getQualifiedName();
            default :
                java.lang.String name = n.getFirstChild().getQualifiedName();
                return name;
        }
    }

    public static java.lang.String getNearestFunctionName(com.google.javascript.rhino.Node n) {
        if (!n.isFunction()) {
            return null;
        }
        java.lang.String name = com.google.javascript.jscomp.NodeUtil.getFunctionName(n);
        if (name != null) {
            return name;
        }
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SETTER_DEF :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.STRING_KEY :
                return parent.getString();
            case com.google.javascript.rhino.Token.NUMBER :
                return com.google.javascript.jscomp.NodeUtil.getStringValue(parent);
        }
        return null;
    }

    static boolean isImmutableValue(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.CAST :
            case com.google.javascript.rhino.Token.NOT :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NEG :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n.getFirstChild());
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                return ("undefined".equals(name) || "Infinity".equals(name)) || "NaN".equals(name);
        }
        return false;
    }

    static boolean isSymmetricOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.MUL :
                return true;
        }
        return false;
    }

    static boolean isRelationalOperation(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
                return true;
        }
        return false;
    }

    static int getInverseOperator(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.GT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.Token.LT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.Token.GE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.Token.LE :
                return com.google.javascript.rhino.Token.GE;
        }
        return com.google.javascript.rhino.Token.ERROR;
    }

    static boolean isLiteralValue(com.google.javascript.rhino.Node n, boolean includeFunctions) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CAST :
                return com.google.javascript.jscomp.NodeUtil.isLiteralValue(n.getFirstChild(), includeFunctions);
            case com.google.javascript.rhino.Token.ARRAYLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if ((!child.isEmpty()) && (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions))) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.REGEXP :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child, includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                for (com.google.javascript.rhino.Node child = n.getFirstChild(); child != null; child = child.getNext()) {
                    if (!com.google.javascript.jscomp.NodeUtil.isLiteralValue(child.getFirstChild(), includeFunctions)) {
                        return false;
                    }
                }
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                return includeFunctions && (!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n));
            default :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n);
        }
    }

    static boolean isValidDefineValue(com.google.javascript.rhino.Node val, java.util.Set<java.lang.String> defines) {
        switch (val.getType()) {
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                return true;
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.URSH :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines) && com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getLastChild(), defines);
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.POS :
                return com.google.javascript.jscomp.NodeUtil.isValidDefineValue(val.getFirstChild(), defines);
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                if (val.isQualifiedName()) {
                    return defines.contains(val.getQualifiedName());
                }
        }
        return false;
    }

    static boolean isEmptyBlock(com.google.javascript.rhino.Node block) {
        if (!block.isBlock()) {
            return false;
        }
        for (com.google.javascript.rhino.Node n = block.getFirstChild(); n != null; n = n.getNext()) {
            if (!n.isEmpty()) {
                return false;
            }
        }
        return true;
    }

    static boolean isSimpleOperator(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isSimpleOperatorType(n.getType());
    }

    static boolean isSimpleOperatorType(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.COMMA :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.URSH :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node newExpr(com.google.javascript.rhino.Node child) {
        return com.google.javascript.rhino.IR.exprResult(child).srcref(child);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayEffectMutableState(n, null);
    }

    static boolean mayEffectMutableState(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, true, compiler);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayHaveSideEffects(n, null);
    }

    static boolean mayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        return com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n, false, compiler);
    }

    private static boolean checkForStateChangeHelper(com.google.javascript.rhino.Node n, boolean checkForNewObjects, com.google.javascript.jscomp.AbstractCompiler compiler) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CAST :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.PARAM_LIST :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.EMPTY :
                break;
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                if (checkForNewObjects) {
                    return true;
                }
                for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c.getFirstChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                }
                return false;
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.REGEXP :
                if (checkForNewObjects) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.NAME :
                if (n.getFirstChild() != null) {
                    return true;
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                return checkForNewObjects || (!com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
            case com.google.javascript.rhino.Token.NEW :
                if (checkForNewObjects) {
                    return true;
                }
                if (!com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n)) {
                    break;
                }
                return true;
            case com.google.javascript.rhino.Token.CALL :
                if (!com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler)) {
                    break;
                }
                return true;
            default :
                if (com.google.javascript.jscomp.NodeUtil.isSimpleOperator(n)) {
                    break;
                }
                if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
                    com.google.javascript.rhino.Node assignTarget = n.getFirstChild();
                    if (assignTarget.isName()) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getFirstChild(), checkForNewObjects, compiler) || com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(n.getLastChild(), checkForNewObjects, compiler)) {
                        return true;
                    }
                    if (com.google.javascript.jscomp.NodeUtil.isGet(assignTarget)) {
                        com.google.javascript.rhino.Node current = assignTarget.getFirstChild();
                        if (com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(current)) {
                            return false;
                        }
                        while (com.google.javascript.jscomp.NodeUtil.isGet(current)) {
                            current = current.getFirstChild();
                        } 
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(current, true);
                    } else {
                        return !com.google.javascript.jscomp.NodeUtil.isLiteralValue(assignTarget, true);
                    }
                }
                return true;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.checkForStateChangeHelper(c, checkForNewObjects, compiler)) {
                return true;
            }
        }
        return false;
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(callNode, null);
    }

    static boolean constructorCallHasSideEffects(com.google.javascript.rhino.Node callNode, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isNew()) {
            throw new java.lang.IllegalStateException("Expected NEW node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        if (callNode.isOnlyModifiesArgumentsCall() && com.google.javascript.jscomp.NodeUtil.allArgsUnescapedLocal(callNode)) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName() && com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString())) {
            return false;
        }
        return true;
    }

    private static final java.util.Set<java.lang.String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("Object", "Array", "String", "Number", "Boolean", "RegExp", "Error");

    private static final java.util.Set<java.lang.String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS = com.google.common.collect.ImmutableSet.of("toString", "valueOf");

    private static final java.util.Set<java.lang.String> REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("test", "exec");

    private static final java.util.Set<java.lang.String> STRING_REGEXP_METHODS = com.google.common.collect.ImmutableSet.of("match", "replace", "search", "split");

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(callNode, null);
    }

    static boolean functionCallHasSideEffects(com.google.javascript.rhino.Node callNode, @javax.annotation.Nullable
    com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (!callNode.isCall()) {
            throw new java.lang.IllegalStateException("Expected CALL node, got " + com.google.javascript.rhino.Token.name(callNode.getType()));
        }
        if (callNode.isNoSideEffectsCall()) {
            return false;
        }
        if (callNode.isOnlyModifiesArgumentsCall() && com.google.javascript.jscomp.NodeUtil.allArgsUnescapedLocal(callNode)) {
            return false;
        }
        com.google.javascript.rhino.Node nameNode = callNode.getFirstChild();
        if (nameNode.isName()) {
            java.lang.String name = nameNode.getString();
            if (com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name)) {
                return false;
            }
        } else if (nameNode.isGetProp()) {
            if (callNode.hasOneChild() && com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(nameNode.getLastChild().getString())) {
                return false;
            }
            if (callNode.isOnlyModifiesThisCall() && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(nameNode.getFirstChild())) {
                return false;
            }
            if (nameNode.getFirstChild().isName()) {
                if ("Math.floor".equals(nameNode.getQualifiedName())) {
                    return false;
                }
            }
            if ((compiler != null) && (!compiler.hasRegExpGlobalReferences())) {
                if (nameNode.getFirstChild().isRegExp() && com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    return false;
                } else if (nameNode.getFirstChild().isString() && com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS.contains(nameNode.getLastChild().getString())) {
                    com.google.javascript.rhino.Node param = nameNode.getNext();
                    if ((param != null) && (param.isString() || param.isRegExp())) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    static boolean callHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isCall());
        return (n.getSideEffectFlags() & com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS) > 0;
    }

    static boolean newHasLocalResult(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isNew());
        return n.isOnlyModifiesThisCall();
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.nodeTypeMayHaveSideEffects(n, null);
    }

    static boolean nodeTypeMayHaveSideEffects(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.AbstractCompiler compiler) {
        if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n)) {
            return true;
        }
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.THROW :
                return true;
            case com.google.javascript.rhino.Token.CALL :
                return com.google.javascript.jscomp.NodeUtil.functionCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.constructorCallHasSideEffects(n, compiler);
            case com.google.javascript.rhino.Token.NAME :
                return n.hasChildren();
            default :
                return false;
        }
    }

    static boolean allArgsUnescapedLocal(com.google.javascript.rhino.Node callOrNew) {
        for (com.google.javascript.rhino.Node arg = callOrNew.getFirstChild().getNext(); arg != null; arg = arg.getNext()) {
            if (!com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(arg)) {
                return false;
            }
        }
        return true;
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n) {
        java.util.Set<java.lang.String> emptySet = java.util.Collections.emptySet();
        return com.google.javascript.jscomp.NodeUtil.canBeSideEffected(n, emptySet);
    }

    static boolean canBeSideEffected(com.google.javascript.rhino.Node n, java.util.Set<java.lang.String> knownConstants) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.NEW :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return (!com.google.javascript.jscomp.NodeUtil.isConstantName(n)) && (!knownConstants.contains(n.getString()));
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.GETELEM :
                return true;
            case com.google.javascript.rhino.Token.FUNCTION :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n));
                return false;
        }
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.canBeSideEffected(c, knownConstants)) {
                return true;
            }
        }
        return false;
    }

    static int precedence(int type) {
        int precedence = com.google.javascript.jscomp.NodeUtil.precedenceWithDefault(type);
        if (precedence != (-1)) {
            return precedence;
        }
        throw new java.lang.Error(((("Unknown precedence for " + com.google.javascript.rhino.Token.name(type)) + " (type ") + type) + ")");
    }

    static int precedenceWithDefault(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.COMMA :
                return 0;
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN :
                return 1;
            case com.google.javascript.rhino.Token.HOOK :
                return 2;
            case com.google.javascript.rhino.Token.OR :
                return 3;
            case com.google.javascript.rhino.Token.AND :
                return 4;
            case com.google.javascript.rhino.Token.BITOR :
                return 5;
            case com.google.javascript.rhino.Token.BITXOR :
                return 6;
            case com.google.javascript.rhino.Token.BITAND :
                return 7;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                return 8;
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.IN :
                return 9;
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
                return 10;
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
                return 11;
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
                return 12;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.NEW :
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                return 13;
            case com.google.javascript.rhino.Token.CALL :
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.NULL :
            case com.google.javascript.rhino.Token.NUMBER :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.STRING :
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.THIS :
            case com.google.javascript.rhino.Token.TRUE :
                return 15;
            case com.google.javascript.rhino.Token.CAST :
                return 16;
            default :
                return -1;
        }
    }

    static boolean isUndefined(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.VOID :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                return n.getString().equals("undefined");
        }
        return false;
    }

    static boolean isNullOrUndefined(com.google.javascript.rhino.Node n) {
        return n.isNull() || com.google.javascript.jscomp.NodeUtil.isUndefined(n);
    }

    static final com.google.common.base.Predicate<com.google.javascript.rhino.Node> IMMUTABLE_PREDICATE = new com.google.common.base.Predicate<com.google.javascript.rhino.Node>() {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isImmutableValue(n);
        }
    };

    static boolean isImmutableResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.IMMUTABLE_PREDICATE);
    }

    static boolean allResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CAST :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild(), p);
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getFirstChild().getNext(), p) && com.google.javascript.jscomp.NodeUtil.allResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static boolean anyResultsMatch(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> p) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CAST :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild(), p);
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getFirstChild().getNext(), p) || com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n.getLastChild(), p);
            default :
                return p.apply(n);
        }
    }

    static class NumbericResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isNumericResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate NUMBERIC_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.NumbericResultPredicate();

    static boolean isNumericResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);
    }

    static boolean isNumericResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ADD :
                return (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getFirstChild())) && (!com.google.javascript.jscomp.NodeUtil.mayBeString(n.getLastChild()));
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
            case com.google.javascript.rhino.Token.NUMBER :
                return true;
            case com.google.javascript.rhino.Token.NAME :
                java.lang.String name = n.getString();
                if (name.equals("NaN")) {
                    return true;
                }
                if (name.equals("Infinity")) {
                    return true;
                }
                return false;
            default :
                return false;
        }
    }

    static class BooleanResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isBooleanResultHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate BOOLEAN_RESULT_PREDICATE = new com.google.javascript.jscomp.NodeUtil.BooleanResultPredicate();

    static boolean isBooleanResult(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.allResultsMatch(n, com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);
    }

    static boolean isBooleanResultHelper(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.IN :
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.DELPROP :
                return true;
            default :
                return false;
        }
    }

    static class MayBeStringResultPredicate implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static final com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate MAY_BE_STRING_PREDICATE = new com.google.javascript.jscomp.NodeUtil.MayBeStringResultPredicate();

    static boolean mayBeString(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.mayBeString(n, true);
    }

    static boolean mayBeString(com.google.javascript.rhino.Node n, boolean recurse) {
        if (recurse) {
            return com.google.javascript.jscomp.NodeUtil.anyResultsMatch(n, com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);
        } else {
            return com.google.javascript.jscomp.NodeUtil.mayBeStringHelper(n);
        }
    }

    static boolean mayBeStringHelper(com.google.javascript.rhino.Node n) {
        return (((!com.google.javascript.jscomp.NodeUtil.isNumericResult(n)) && (!com.google.javascript.jscomp.NodeUtil.isBooleanResult(n))) && (!com.google.javascript.jscomp.NodeUtil.isUndefined(n))) && (!n.isNull());
    }

    static boolean isAssociative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isCommutative(int type) {
        switch (type) {
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
                return true;
            default :
                return false;
        }
    }

    static boolean isAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return true;
        }
        return false;
    }

    static int getOpFromAssignmentOp(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.MOD;
        }
        throw new java.lang.IllegalArgumentException("Not an assignment op:" + n);
    }

    static boolean containsFunction(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.containsType(n, com.google.javascript.rhino.Token.FUNCTION);
    }

    static boolean referencesThis(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node start = (n.isFunction()) ? n.getLastChild() : n;
        return com.google.javascript.jscomp.NodeUtil.containsType(start, com.google.javascript.rhino.Token.THIS, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isGet(com.google.javascript.rhino.Node n) {
        return n.isGetProp() || n.isGetElem();
    }

    static boolean isVarDeclaration(com.google.javascript.rhino.Node n) {
        return n.isName() && n.getParent().isVar();
    }

    static com.google.javascript.rhino.Node getAssignedValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isName());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent.isVar()) {
            return n.getFirstChild();
        } else if (parent.isAssign() && (parent.getFirstChild() == n)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(26).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.OBJECT_METHODS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE",com.google.javascript.jscomp.NodeUtil.MAY_BE_STRING_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION",com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.NodeUtil.IMMUTABLE_PREDICATE",com.google.javascript.jscomp.NodeUtil.IMMUTABLE_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN",com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.STRING_REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER",com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.BOOLEAN_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN",com.google.javascript.jscomp.NodeUtil.JSC_PROPERTY_NAME_FN);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE",com.google.javascript.jscomp.NodeUtil.NUMBERIC_RESULT_PREDICATE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",com.google.javascript.jscomp.NodeUtil.CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS",com.google.javascript.jscomp.NodeUtil.REGEXP_METHODS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",com.google.javascript.jscomp.NodeUtil.BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectionEnds();
            }
            if (runtimeAngelicValue)
                return n.getNext();

        } else {
            return null;
        }
    }

    static boolean isExprAssign(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isAssign();
    }

    static boolean isExprCall(com.google.javascript.rhino.Node n) {
        return n.isExprResult() && n.getFirstChild().isCall();
    }

    static boolean isForIn(com.google.javascript.rhino.Node n) {
        return n.isFor() && (n.getChildCount() == 3);
    }

    static boolean isLoopStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
                return true;
            default :
                return false;
        }
    }

    static com.google.javascript.rhino.Node getLoopCodeBlock(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getFirstChild();
            default :
                return null;
        }
    }

    static boolean isWithinLoop(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node parent : n.getAncestors()) {
            if (com.google.javascript.jscomp.NodeUtil.isLoopStructure(parent)) {
                return true;
            }
            if (parent.isFunction()) {
                break;
            }
        }
        return false;
    }

    static boolean isControlStructure(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.WITH :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                return false;
        }
    }

    static boolean isControlStructureCodeBlock(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node n) {
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.FOR :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.WITH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.DO :
                return parent.getFirstChild() == n;
            case com.google.javascript.rhino.Token.IF :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.TRY :
                return (parent.getFirstChild() == n) || (parent.getLastChild() == n);
            case com.google.javascript.rhino.Token.CATCH :
                return parent.getLastChild() == n;
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.CASE :
                return parent.getFirstChild() != n;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                return true;
            default :
                com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isControlStructure(parent));
                return false;
        }
    }

    static com.google.javascript.rhino.Node getConditionExpression(com.google.javascript.rhino.Node n) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.DO :
                return n.getLastChild();
            case com.google.javascript.rhino.Token.FOR :
                switch (n.getChildCount()) {
                    case 3 :
                        return null;
                    case 4 :
                        return n.getFirstChild().getNext();
                }
                throw new java.lang.IllegalArgumentException("malformed 'for' statement " + n);
            case com.google.javascript.rhino.Token.CASE :
                return null;
        }
        throw new java.lang.IllegalArgumentException(n + " does not have a condition.");
    }

    static boolean isStatementBlock(com.google.javascript.rhino.Node n) {
        return n.isScript() || n.isBlock();
    }

    static boolean isStatement(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isStatementParent(n.getParent());
    }

    static boolean isStatementParent(com.google.javascript.rhino.Node parent) {
        com.google.common.base.Preconditions.checkState(parent != null);
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.LABEL :
                return true;
            default :
                return false;
        }
    }

    static boolean isSwitchCase(com.google.javascript.rhino.Node n) {
        return n.isCase() || n.isDefaultCase();
    }

    static boolean isReferenceName(com.google.javascript.rhino.Node n) {
        return n.isName() && (!n.getString().isEmpty());
    }

    static boolean isTryFinallyNode(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node child) {
        return (parent.isTry() && (parent.getChildCount() == 3)) && (child == parent.getLastChild());
    }

    static boolean isTryCatchNodeContainer(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        return parent.isTry() && (parent.getFirstChild().getNext() == n);
    }

    static void removeChild(com.google.javascript.rhino.Node parent, com.google.javascript.rhino.Node node) {
        if (com.google.javascript.jscomp.NodeUtil.isTryFinallyNode(parent, node)) {
            if (com.google.javascript.jscomp.NodeUtil.hasCatchHandler(com.google.javascript.jscomp.NodeUtil.getCatchBlock(parent))) {
                parent.removeChild(node);
            } else {
                node.detachChildren();
            }
        } else if (node.isCatch()) {
            com.google.javascript.rhino.Node tryNode = node.getParent().getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachFromParent();
        } else if (com.google.javascript.jscomp.NodeUtil.isTryCatchNodeContainer(node)) {
            com.google.javascript.rhino.Node tryNode = node.getParent();
            com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode));
            node.detachChildren();
        } else if (node.isBlock()) {
            node.detachChildren();
        } else if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent) || com.google.javascript.jscomp.NodeUtil.isSwitchCase(node)) {
            parent.removeChild(node);
        } else if (parent.isVar()) {
            if (parent.hasMoreThanOneChild()) {
                parent.removeChild(node);
            } else {
                parent.removeChild(node);
                com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
            }
        } else if (parent.isLabel() && (node == parent.getLastChild())) {
            parent.removeChild(node);
            com.google.javascript.jscomp.NodeUtil.removeChild(parent.getParent(), parent);
        } else if (parent.isFor() && (parent.getChildCount() == 4)) {
            parent.replaceChild(node, com.google.javascript.rhino.IR.empty());
        } else {
            throw new java.lang.IllegalStateException((("Invalid attempt to remove node: " + node.toString()) + " of ") + parent.toString());
        }
    }

    static void maybeAddFinally(com.google.javascript.rhino.Node tryNode) {
        com.google.common.base.Preconditions.checkState(tryNode.isTry());
        if (!com.google.javascript.jscomp.NodeUtil.hasFinally(tryNode)) {
            tryNode.addChildrenToBack(com.google.javascript.rhino.IR.block().srcref(tryNode));
        }
    }

    static boolean tryMergeBlock(com.google.javascript.rhino.Node block) {
        com.google.common.base.Preconditions.checkState(block.isBlock());
        com.google.javascript.rhino.Node parent = block.getParent();
        if (com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)) {
            com.google.javascript.rhino.Node previous = block;
            while (block.hasChildren()) {
                com.google.javascript.rhino.Node child = block.removeFirstChild();
                parent.addChildAfter(child, previous);
                previous = child;
            } 
            parent.removeChild(block);
            return true;
        } else {
            return false;
        }
    }

    static boolean isCallOrNew(com.google.javascript.rhino.Node node) {
        return node.isCall() || node.isNew();
    }

    static com.google.javascript.rhino.Node getFunctionBody(com.google.javascript.rhino.Node fn) {
        com.google.common.base.Preconditions.checkArgument(fn.isFunction());
        return fn.getLastChild();
    }

    static boolean isFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return n.isFunction() && com.google.javascript.jscomp.NodeUtil.isStatement(n);
    }

    static boolean isHoistedFunctionDeclaration(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) && (n.getParent().isScript() || n.getParent().getParent().isFunction());
    }

    static boolean isFunctionExpression(com.google.javascript.rhino.Node n) {
        return n.isFunction() && (!com.google.javascript.jscomp.NodeUtil.isStatement(n));
    }

    static boolean isBleedingFunctionName(com.google.javascript.rhino.Node n) {
        return (n.isName() && (!n.getString().isEmpty())) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n.getParent());
    }

    static boolean isEmptyFunctionExpression(com.google.javascript.rhino.Node node) {
        return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(node) && com.google.javascript.jscomp.NodeUtil.isEmptyBlock(node.getLastChild());
    }

    static boolean isVarArgsFunction(com.google.javascript.rhino.Node function) {
        com.google.common.base.Preconditions.checkArgument(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(function.getLastChild(), "arguments", com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
    }

    static boolean isObjectCallMethod(com.google.javascript.rhino.Node callNode, java.lang.String methodName) {
        if (callNode.isCall()) {
            com.google.javascript.rhino.Node functionIndentifyingExpression = callNode.getFirstChild();
            if (com.google.javascript.jscomp.NodeUtil.isGet(functionIndentifyingExpression)) {
                com.google.javascript.rhino.Node last = functionIndentifyingExpression.getLastChild();
                if ((last != null) && last.isString()) {
                    java.lang.String propName = last.getString();
                    return propName.equals(methodName);
                }
            }
        }
        return false;
    }

    static boolean isFunctionObjectCall(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "call");
    }

    static boolean isFunctionObjectApply(com.google.javascript.rhino.Node callNode) {
        return com.google.javascript.jscomp.NodeUtil.isObjectCallMethod(callNode, "apply");
    }

    static boolean isVarOrSimpleAssignLhs(com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        return (parent.isAssign() && (parent.getFirstChild() == n)) || parent.isVar();
    }

    public static boolean isLValue(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument((n.isName() || n.isGetProp()) || n.isGetElem());
        com.google.javascript.rhino.Node parent = n.getParent();
        if (parent == null) {
            return false;
        }
        return (((((((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n)) || (com.google.javascript.jscomp.NodeUtil.isForIn(parent) && (parent.getFirstChild() == n))) || parent.isVar()) || (parent.isFunction() && (parent.getFirstChild() == n))) || parent.isDec()) || parent.isInc()) || parent.isParamList()) || parent.isCatch();
    }

    static boolean isObjectLitKey(com.google.javascript.rhino.Node node) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String getObjectLitKeyName(com.google.javascript.rhino.Node key) {
        switch (key.getType()) {
            case com.google.javascript.rhino.Token.STRING_KEY :
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return key.getString();
        }
        throw new java.lang.IllegalStateException("Unexpected node type: " + key);
    }

    static com.google.javascript.rhino.jstype.JSType getObjectLitKeyTypeFromValueType(com.google.javascript.rhino.Node key, com.google.javascript.rhino.jstype.JSType valueType) {
        if (valueType != null) {
            switch (key.getType()) {
                case com.google.javascript.rhino.Token.GETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        valueType = fntype.getReturnType();
                    } else {
                        return null;
                    }
                    break;
                case com.google.javascript.rhino.Token.SETTER_DEF :
                    if (valueType.isFunctionType()) {
                        com.google.javascript.rhino.jstype.FunctionType fntype = valueType.toMaybeFunctionType();
                        com.google.javascript.rhino.Node param = fntype.getParametersNode().getFirstChild();
                        valueType = param.getJSType();
                    } else {
                        return null;
                    }
                    break;
            }
        }
        return valueType;
    }

    static boolean isGetOrSetKey(com.google.javascript.rhino.Node node) {
        switch (node.getType()) {
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                return true;
        }
        return false;
    }

    static java.lang.String opToStr(int operator) {
        switch (operator) {
            case com.google.javascript.rhino.Token.BITOR :
                return "|";
            case com.google.javascript.rhino.Token.OR :
                return "||";
            case com.google.javascript.rhino.Token.BITXOR :
                return "^";
            case com.google.javascript.rhino.Token.AND :
                return "&&";
            case com.google.javascript.rhino.Token.BITAND :
                return "&";
            case com.google.javascript.rhino.Token.SHEQ :
                return "===";
            case com.google.javascript.rhino.Token.EQ :
                return "==";
            case com.google.javascript.rhino.Token.NOT :
                return "!";
            case com.google.javascript.rhino.Token.NE :
                return "!=";
            case com.google.javascript.rhino.Token.SHNE :
                return "!==";
            case com.google.javascript.rhino.Token.LSH :
                return "<<";
            case com.google.javascript.rhino.Token.IN :
                return "in";
            case com.google.javascript.rhino.Token.LE :
                return "<=";
            case com.google.javascript.rhino.Token.LT :
                return "<";
            case com.google.javascript.rhino.Token.URSH :
                return ">>>";
            case com.google.javascript.rhino.Token.RSH :
                return ">>";
            case com.google.javascript.rhino.Token.GE :
                return ">=";
            case com.google.javascript.rhino.Token.GT :
                return ">";
            case com.google.javascript.rhino.Token.MUL :
                return "*";
            case com.google.javascript.rhino.Token.DIV :
                return "/";
            case com.google.javascript.rhino.Token.MOD :
                return "%";
            case com.google.javascript.rhino.Token.BITNOT :
                return "~";
            case com.google.javascript.rhino.Token.ADD :
                return "+";
            case com.google.javascript.rhino.Token.SUB :
                return "-";
            case com.google.javascript.rhino.Token.POS :
                return "+";
            case com.google.javascript.rhino.Token.NEG :
                return "-";
            case com.google.javascript.rhino.Token.ASSIGN :
                return "=";
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
                return "|=";
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
                return "^=";
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
                return "&=";
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
                return "<<=";
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
                return ">>=";
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
                return ">>>=";
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
                return "+=";
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
                return "-=";
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                return "*=";
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
                return "/=";
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
                return "%=";
            case com.google.javascript.rhino.Token.VOID :
                return "void";
            case com.google.javascript.rhino.Token.TYPEOF :
                return "typeof";
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return "instanceof";
            default :
                return null;
        }
    }

    static java.lang.String opToStrNoFail(int operator) {
        java.lang.String res = com.google.javascript.jscomp.NodeUtil.opToStr(operator);
        if (res == null) {
            throw new java.lang.Error((("Unknown op " + operator) + ": ") + com.google.javascript.rhino.Token.name(operator));
        }
        return res;
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean containsType(com.google.javascript.rhino.Node node, int type) {
        return com.google.javascript.jscomp.NodeUtil.containsType(node, type, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static void redeclareVarsInsideBranch(com.google.javascript.rhino.Node branch) {
        java.util.Collection<com.google.javascript.rhino.Node> vars = com.google.javascript.jscomp.NodeUtil.getVarsDeclaredInBranch(branch);
        if (vars.isEmpty()) {
            return;
        }
        com.google.javascript.rhino.Node parent = com.google.javascript.jscomp.NodeUtil.getAddingRoot(branch);
        for (com.google.javascript.rhino.Node nameNode : vars) {
            com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(com.google.javascript.rhino.IR.name(nameNode.getString()).srcref(nameNode)).srcref(nameNode);
            com.google.javascript.jscomp.NodeUtil.copyNameAnnotations(nameNode, var.getFirstChild());
            parent.addChildToFront(var);
        }
    }

    static void copyNameAnnotations(com.google.javascript.rhino.Node source, com.google.javascript.rhino.Node destination) {
        if (source.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME)) {
            destination.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
    }

    private static com.google.javascript.rhino.Node getAddingRoot(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node addingRoot = null;
        com.google.javascript.rhino.Node ancestor = n;
        while (null != (ancestor = ancestor.getParent())) {
            int type = ancestor.getType();
            if (type == com.google.javascript.rhino.Token.SCRIPT) {
                addingRoot = ancestor;
                break;
            } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
                addingRoot = ancestor.getLastChild();
                break;
            }
        } 
        com.google.common.base.Preconditions.checkState(addingRoot.isBlock() || addingRoot.isScript());
        com.google.common.base.Preconditions.checkState((addingRoot.getFirstChild() == null) || (!addingRoot.getFirstChild().isScript()));
        return addingRoot;
    }

    public static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        int endPos = name.indexOf('.');
        if (endPos == (-1)) {
            return com.google.javascript.jscomp.NodeUtil.newName(convention, name);
        }
        com.google.javascript.rhino.Node node;
        java.lang.String nodeName = name.substring(0, endPos);
        if ("this".equals(nodeName)) {
            node = com.google.javascript.rhino.IR.thisNode();
        } else {
            node = com.google.javascript.jscomp.NodeUtil.newName(convention, nodeName);
        }
        int startPos;
        do {
            startPos = endPos + 1;
            endPos = name.indexOf('.', startPos);
            java.lang.String part = (endPos == (-1)) ? name.substring(startPos) : name.substring(startPos, endPos);
            com.google.javascript.rhino.Node propNode = com.google.javascript.rhino.IR.string(part);
            if (convention.isConstantKey(part)) {
                propNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
            }
            node = com.google.javascript.rhino.IR.getprop(node, propNode);
        } while (endPos != (-1) );
        return node;
    }

    public static com.google.javascript.rhino.Node newQualifiedNameNodeDeclaration(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node value, com.google.javascript.rhino.JSDocInfo info) {
        com.google.javascript.rhino.Node result;
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(convention, name);
        if (nameNode.isName()) {
            result = com.google.javascript.rhino.IR.var(nameNode, value);
            result.setJSDocInfo(info);
        } else {
            result = com.google.javascript.rhino.IR.exprResult(com.google.javascript.rhino.IR.assign(nameNode, value));
            result.getFirstChild().setJSDocInfo(info);
        }
        return result;
    }

    static com.google.javascript.rhino.Node newQualifiedNameNode(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node node = com.google.javascript.jscomp.NodeUtil.newQualifiedNameNode(convention, name);
        com.google.javascript.jscomp.NodeUtil.setDebugInformation(node, basisNode, originalName);
        return node;
    }

    static com.google.javascript.rhino.Node getRootOfQualifiedName(com.google.javascript.rhino.Node qName) {
        for (com.google.javascript.rhino.Node current = qName; true; current = current.getFirstChild()) {
            if (current.isName() || current.isThis()) {
                return current;
            }
            com.google.common.base.Preconditions.checkState(current.isGetProp());
        }
    }

    static void setDebugInformation(com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        node.copyInformationFromForTree(basisNode);
        node.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
    }

    private static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.rhino.IR.name(name);
        if (convention.isConstant(name)) {
            nameNode.putBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME, true);
        }
        return nameNode;
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node srcref) {
        return com.google.javascript.jscomp.NodeUtil.newName(convention, name).srcref(srcref);
    }

    static com.google.javascript.rhino.Node newName(com.google.javascript.jscomp.CodingConvention convention, java.lang.String name, com.google.javascript.rhino.Node basisNode, java.lang.String originalName) {
        com.google.javascript.rhino.Node nameNode = com.google.javascript.jscomp.NodeUtil.newName(convention, name, basisNode);
        nameNode.putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, originalName);
        return nameNode;
    }

    static boolean isLatin(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if (c > com.google.javascript.jscomp.NodeUtil.LARGEST_BASIC_LATIN) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidSimpleName(java.lang.String name) {
        return (com.google.javascript.rhino.TokenStream.isJSIdentifier(name) && (!com.google.javascript.rhino.TokenStream.isKeyword(name))) && com.google.javascript.jscomp.NodeUtil.isLatin(name);
    }

    public static boolean isValidQualifiedName(java.lang.String name) {
        if (name.endsWith(".") || name.startsWith(".")) {
            return false;
        }
        java.lang.String[] parts = name.split("\\.");
        for (java.lang.String part : parts) {
            if (!com.google.javascript.jscomp.NodeUtil.isValidSimpleName(part)) {
                return false;
            }
        }
        return true;
    }

    static boolean isValidPropertyName(java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isValidSimpleName(name);
    }

    private static class VarCollector implements com.google.javascript.jscomp.NodeUtil.Visitor {
        final java.util.Map<java.lang.String, com.google.javascript.rhino.Node> vars = com.google.common.collect.Maps.newLinkedHashMap();

        @java.lang.Override
        public void visit(com.google.javascript.rhino.Node n) {
            if (n.isName()) {
                com.google.javascript.rhino.Node parent = n.getParent();
                if ((parent != null) && parent.isVar()) {
                    java.lang.String name = n.getString();
                    if (!vars.containsKey(name)) {
                        vars.put(name, n);
                    }
                }
            }
        }
    }

    static java.util.Collection<com.google.javascript.rhino.Node> getVarsDeclaredInBranch(com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.NodeUtil.VarCollector collector = new com.google.javascript.jscomp.NodeUtil.VarCollector();
        com.google.javascript.jscomp.NodeUtil.visitPreOrder(root, collector, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION);
        return collector.vars.values();
    }

    static boolean isPrototypePropertyDeclaration(com.google.javascript.rhino.Node n) {
        return com.google.javascript.jscomp.NodeUtil.isExprAssign(n) && com.google.javascript.jscomp.NodeUtil.isPrototypeProperty(n.getFirstChild().getFirstChild());
    }

    static boolean isPrototypeProperty(com.google.javascript.rhino.Node n) {
        java.lang.String lhsString = n.getQualifiedName();
        return (lhsString != null) && lhsString.contains(".prototype.");
    }

    static com.google.javascript.rhino.Node getPrototypeClassName(com.google.javascript.rhino.Node qName) {
        com.google.javascript.rhino.Node cur = qName;
        while (cur.isGetProp()) {
            if (cur.getLastChild().getString().equals("prototype")) {
                return cur.getFirstChild();
            } else {
                cur = cur.getFirstChild();
            }
        } 
        return null;
    }

    static java.lang.String getPrototypePropertyName(com.google.javascript.rhino.Node qName) {
        java.lang.String qNameStr = qName.getQualifiedName();
        int prototypeIdx = qNameStr.lastIndexOf(".prototype.");
        int memberIndex = (prototypeIdx + ".prototype".length()) + 1;
        return qNameStr.substring(memberIndex);
    }

    static com.google.javascript.rhino.Node newUndefinedNode(com.google.javascript.rhino.Node srcReferenceNode) {
        com.google.javascript.rhino.Node node = com.google.javascript.rhino.IR.voidNode(com.google.javascript.rhino.IR.number(0));
        if (srcReferenceNode != null) {
            node.copyInformationFromForTree(srcReferenceNode);
        }
        return node;
    }

    static com.google.javascript.rhino.Node newVarNode(java.lang.String name, com.google.javascript.rhino.Node value) {
        com.google.javascript.rhino.Node nodeName = com.google.javascript.rhino.IR.name(name);
        if (value != null) {
            com.google.common.base.Preconditions.checkState(value.getNext() == null);
            nodeName.addChildToBack(value);
            nodeName.srcref(value);
        }
        com.google.javascript.rhino.Node var = com.google.javascript.rhino.IR.var(nodeName).srcref(nodeName);
        return var;
    }

    private static class MatchNameNode implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final java.lang.String name;

        MatchNameNode(java.lang.String name) {
            this.name = name;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.isName() && n.getString().equals(name);
        }
    }

    static class MatchNodeType implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        final int type;

        MatchNodeType(int type) {
            this.type = type;
        }

        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return n.getType() == type;
        }
    }

    static class MatchDeclaration implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n) || n.isVar();
        }
    }

    private static class MatchNotFunction implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            return !n.isFunction();
        }
    }

    static final com.google.common.base.Predicate<com.google.javascript.rhino.Node> MATCH_NOT_FUNCTION = new com.google.javascript.jscomp.NodeUtil.MatchNotFunction();

    static class MatchShallowStatement implements com.google.common.base.Predicate<com.google.javascript.rhino.Node> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return n.isBlock() || ((!n.isFunction()) && (((parent == null) || com.google.javascript.jscomp.NodeUtil.isControlStructure(parent)) || com.google.javascript.jscomp.NodeUtil.isStatementBlock(parent)));
        }
    }

    static int getNodeTypeReferenceCount(com.google.javascript.rhino.Node node, int type, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNodeType(type), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        return com.google.javascript.jscomp.NodeUtil.has(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), traverseChildrenPred);
    }

    static boolean isNameReferenced(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.isNameReferenced(node, name, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static int getNameReferenceCount(com.google.javascript.rhino.Node node, java.lang.String name) {
        return com.google.javascript.jscomp.NodeUtil.getCount(node, new com.google.javascript.jscomp.NodeUtil.MatchNameNode(name), com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }

    static boolean has(com.google.javascript.rhino.Node node, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (pred.apply(node)) {
            return true;
        }
        if (!traverseChildrenPred.apply(node)) {
            return false;
        }
        for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
            if (com.google.javascript.jscomp.NodeUtil.has(c, pred, traverseChildrenPred)) {
                return true;
            }
        }
        return false;
    }

    static int getCount(com.google.javascript.rhino.Node n, com.google.common.base.Predicate<com.google.javascript.rhino.Node> pred, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        int total = 0;
        if (pred.apply(n)) {
            total++;
        }
        if (traverseChildrenPred.apply(n)) {
            for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
                total += com.google.javascript.jscomp.NodeUtil.getCount(c, pred, traverseChildrenPred);
            }
        }
        return total;
    }

    static interface Visitor {
        public abstract void visit(com.google.javascript.rhino.Node node);
    }

    static void visitPreOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        visitor.visit(node);
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPreOrder(c, visitor, traverseChildrenPred);
            }
        }
    }

    static void visitPostOrder(com.google.javascript.rhino.Node node, com.google.javascript.jscomp.NodeUtil.Visitor visitor, com.google.common.base.Predicate<com.google.javascript.rhino.Node> traverseChildrenPred) {
        if (traverseChildrenPred.apply(node)) {
            for (com.google.javascript.rhino.Node c = node.getFirstChild(); c != null; c = c.getNext()) {
                com.google.javascript.jscomp.NodeUtil.visitPostOrder(c, visitor, traverseChildrenPred);
            }
        }
        visitor.visit(node);
    }

    static boolean hasFinally(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getChildCount() == 3;
    }

    static com.google.javascript.rhino.Node getCatchBlock(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isTry());
        return n.getFirstChild().getNext();
    }

    static boolean hasCatchHandler(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkArgument(n.isBlock());
        return n.hasChildren() && n.getFirstChild().isCatch();
    }

    public static com.google.javascript.rhino.Node getFunctionParameters(com.google.javascript.rhino.Node fnNode) {
        com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
        return fnNode.getFirstChild().getNext();
    }

    static boolean isConstantName(com.google.javascript.rhino.Node node) {
        return node.getBooleanProp(com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
    }

    static boolean isConstantByConvention(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.Node node, com.google.javascript.rhino.Node parent) {
        if (parent.isGetProp() && (node == parent.getLastChild())) {
            return convention.isConstantKey(node.getString());
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(node)) {
            return convention.isConstantKey(node.getString());
        } else if (node.isName()) {
            return convention.isConstant(node.getString());
        }
        return false;
    }

    public static com.google.javascript.rhino.JSDocInfo getFunctionJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.common.base.Preconditions.checkState(n.isFunction());
        com.google.javascript.rhino.JSDocInfo fnInfo = n.getJSDocInfo();
        if ((fnInfo == null) && com.google.javascript.jscomp.NodeUtil.isFunctionExpression(n)) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent.isAssign()) {
                fnInfo = parent.getJSDocInfo();
            } else if (parent.isName()) {
                fnInfo = parent.getParent().getJSDocInfo();
            }
        }
        return fnInfo;
    }

    public static java.lang.String getSourceName(com.google.javascript.rhino.Node n) {
        java.lang.String sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getSourceFileName();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.StaticSourceFile sourceName = null;
        while ((sourceName == null) && (n != null)) {
            sourceName = n.getStaticSourceFile();
            n = n.getParent();
        } 
        return sourceName;
    }

    public static com.google.javascript.rhino.InputId getInputId(com.google.javascript.rhino.Node n) {
        while ((n != null) && (!n.isScript())) {
            n = n.getParent();
        } 
        return (n != null) && n.isScript() ? n.getInputId() : null;
    }

    static com.google.javascript.rhino.Node newCallNode(com.google.javascript.rhino.Node callTarget, com.google.javascript.rhino.Node... parameters) {
        boolean isFreeCall = !com.google.javascript.jscomp.NodeUtil.isGet(callTarget);
        com.google.javascript.rhino.Node call = com.google.javascript.rhino.IR.call(callTarget);
        call.putBooleanProp(com.google.javascript.rhino.Node.FREE_CALL, isFreeCall);
        for (com.google.javascript.rhino.Node parameter : parameters) {
            call.addChildToBack(parameter);
        }
        return call;
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value) {
        return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysFalse());
    }

    static boolean evaluatesToLocalValue(com.google.javascript.rhino.Node value, com.google.common.base.Predicate<com.google.javascript.rhino.Node> locals) {
        switch (value.getType()) {
            case com.google.javascript.rhino.Token.CAST :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);
            case com.google.javascript.rhino.Token.ASSIGN :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value.getLastChild()) || (locals.apply(value) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals));
            case com.google.javascript.rhino.Token.COMMA :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.HOOK :
                return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild().getNext(), locals) && com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getLastChild(), locals);
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                if (value.getBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP)) {
                    return com.google.javascript.jscomp.NodeUtil.evaluatesToLocalValue(value.getFirstChild(), locals);
                } else {
                    return true;
                }
            case com.google.javascript.rhino.Token.THIS :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.NAME :
                return com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.GETELEM :
            case com.google.javascript.rhino.Token.GETPROP :
                return locals.apply(value);
            case com.google.javascript.rhino.Token.CALL :
                return (com.google.javascript.jscomp.NodeUtil.callHasLocalResult(value) || com.google.javascript.jscomp.NodeUtil.isToStringMethodCall(value)) || locals.apply(value);
            case com.google.javascript.rhino.Token.NEW :
                return com.google.javascript.jscomp.NodeUtil.newHasLocalResult(value) || locals.apply(value);
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.REGEXP :
            case com.google.javascript.rhino.Token.ARRAYLIT :
            case com.google.javascript.rhino.Token.OBJECTLIT :
                return true;
            case com.google.javascript.rhino.Token.DELPROP :
            case com.google.javascript.rhino.Token.IN :
                return true;
            default :
                if ((com.google.javascript.jscomp.NodeUtil.isAssignmentOp(value) || com.google.javascript.jscomp.NodeUtil.isSimpleOperator(value)) || com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                    return true;
                }
                throw new java.lang.IllegalStateException((("Unexpected expression node" + value) + "\n parent:") + value.getParent());
        }
    }

    private static com.google.javascript.rhino.Node getNthSibling(com.google.javascript.rhino.Node first, int index) {
        com.google.javascript.rhino.Node sibling = first;
        while ((index != 0) && (sibling != null)) {
            sibling = sibling.getNext();
            index--;
        } 
        return sibling;
    }

    static com.google.javascript.rhino.Node getArgumentForFunction(com.google.javascript.rhino.Node function, int index) {
        com.google.common.base.Preconditions.checkState(function.isFunction());
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(function.getFirstChild().getNext().getFirstChild(), index);
    }

    static com.google.javascript.rhino.Node getArgumentForCallOrNew(com.google.javascript.rhino.Node call, int index) {
        com.google.common.base.Preconditions.checkState(com.google.javascript.jscomp.NodeUtil.isCallOrNew(call));
        return com.google.javascript.jscomp.NodeUtil.getNthSibling(call.getFirstChild().getNext(), index);
    }

    static boolean isCallOrNewTarget(com.google.javascript.rhino.Node target) {
        com.google.javascript.rhino.Node parent = target.getParent();
        return ((parent != null) && com.google.javascript.jscomp.NodeUtil.isCallOrNew(parent)) && (parent.getFirstChild() == target);
    }

    private static boolean isToStringMethodCall(com.google.javascript.rhino.Node call) {
        com.google.javascript.rhino.Node getNode = call.getFirstChild();
        if (com.google.javascript.jscomp.NodeUtil.isGet(getNode)) {
            com.google.javascript.rhino.Node propNode = getNode.getLastChild();
            return propNode.isString() && "toString".equals(propNode.getString());
        }
        return false;
    }

    static com.google.javascript.rhino.JSDocInfo getBestJSDocInfo(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info == null) {
            com.google.javascript.rhino.Node parent = n.getParent();
            if (parent == null) {
                return null;
            }
            if (parent.isName()) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            } else if (parent.isAssign()) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent)) {
                return parent.getJSDocInfo();
            } else if (parent.isFunction()) {
                return parent.getJSDocInfo();
            } else if (parent.isVar() && parent.hasOneChild()) {
                return parent.getJSDocInfo();
            } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
                return com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(parent);
            } else if (parent.isCast()) {
                return parent.getJSDocInfo();
            }
        }
        return info;
    }

    static com.google.javascript.rhino.Node getBestLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(n);
        if (isFunctionDeclaration) {
            return n.getFirstChild();
        } else if (parent.isName()) {
            return parent;
        } else if (parent.isAssign()) {
            return parent.getFirstChild();
        } else if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(parent)) {
            return parent;
        } else if ((((parent.isHook() && (parent.getFirstChild() != n)) || parent.isOr()) || parent.isAnd()) || (parent.isComma() && (parent.getFirstChild() != n))) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(parent);
        } else if (parent.isCast()) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(parent);
        }
        return null;
    }

    static com.google.javascript.rhino.Node getRValueOfLValue(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node parent = n.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.ASSIGN :
                return n.getNext();
            case com.google.javascript.rhino.Token.VAR :
                return n.getFirstChild();
            case com.google.javascript.rhino.Token.FUNCTION :
                return parent;
        }
        return null;
    }

    static com.google.javascript.rhino.Node getBestLValueOwner(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue)) {
            return com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
        } else if (com.google.javascript.jscomp.NodeUtil.isGet(lValue)) {
            return lValue.getFirstChild();
        }
        return null;
    }

    static java.lang.String getBestLValueName(@javax.annotation.Nullable
    com.google.javascript.rhino.Node lValue) {
        if ((lValue == null) || (lValue.getParent() == null)) {
            return null;
        }
        if (com.google.javascript.jscomp.NodeUtil.isObjectLitKey(lValue)) {
            com.google.javascript.rhino.Node owner = com.google.javascript.jscomp.NodeUtil.getBestLValue(lValue.getParent());
            if (owner != null) {
                java.lang.String ownerName = com.google.javascript.jscomp.NodeUtil.getBestLValueName(owner);
                if (ownerName != null) {
                    return (ownerName + ".") + com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(lValue);
                }
            }
            return null;
        }
        return lValue.getQualifiedName();
    }

    static boolean isExpressionResultUsed(com.google.javascript.rhino.Node expr) {
        com.google.javascript.rhino.Node parent = expr.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                return false;
            case com.google.javascript.rhino.Token.CAST :
                return com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.OR :
                return expr == parent.getFirstChild() ? true : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.COMMA :
                com.google.javascript.rhino.Node gramps = parent.getParent();
                if (gramps.isCall() && (parent == gramps.getFirstChild())) {
                    if ((((expr == parent.getFirstChild()) && (parent.getChildCount() == 2)) && expr.getNext().isName()) && "eval".equals(expr.getNext().getString())) {
                        return true;
                    }
                }
                return expr == parent.getFirstChild() ? false : com.google.javascript.jscomp.NodeUtil.isExpressionResultUsed(parent);
            case com.google.javascript.rhino.Token.FOR :
                if (!com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                    return parent.getChildAtIndex(1) == expr;
                }
                break;
        }
        return true;
    }

    static boolean isExecutedExactlyOnce(com.google.javascript.rhino.Node n) {
        inspect : do {
            com.google.javascript.rhino.Node parent = n.getParent();
            switch (parent.getType()) {
                case com.google.javascript.rhino.Token.IF :
                case com.google.javascript.rhino.Token.HOOK :
                case com.google.javascript.rhino.Token.AND :
                case com.google.javascript.rhino.Token.OR :
                    if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.FOR :
                    if (com.google.javascript.jscomp.NodeUtil.isForIn(parent)) {
                        if (parent.getChildAtIndex(1) != n) {
                            return false;
                        }
                    } else if (parent.getFirstChild() != n) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.WHILE :
                case com.google.javascript.rhino.Token.DO :
                    return false;
                case com.google.javascript.rhino.Token.TRY :
                    if ((!com.google.javascript.jscomp.NodeUtil.hasFinally(parent)) || (parent.getLastChild() != n)) {
                        return false;
                    }
                    continue inspect;
                case com.google.javascript.rhino.Token.CASE :
                case com.google.javascript.rhino.Token.DEFAULT_CASE :
                    return false;
                case com.google.javascript.rhino.Token.SCRIPT :
                case com.google.javascript.rhino.Token.FUNCTION :
                    break inspect;
            }
        } while ((n = n.getParent()) != null );
        return true;
    }

    static com.google.javascript.rhino.Node booleanNode(boolean value) {
        return value ? com.google.javascript.rhino.IR.trueNode() : com.google.javascript.rhino.IR.falseNode();
    }

    static com.google.javascript.rhino.Node numberNode(double value, com.google.javascript.rhino.Node srcref) {
        com.google.javascript.rhino.Node result;
        if (java.lang.Double.isNaN(value)) {
            result = com.google.javascript.rhino.IR.name("NaN");
        } else if (value == java.lang.Double.POSITIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.name("Infinity");
        } else if (value == java.lang.Double.NEGATIVE_INFINITY) {
            result = com.google.javascript.rhino.IR.neg(com.google.javascript.rhino.IR.name("Infinity"));
        } else {
            result = com.google.javascript.rhino.IR.number(value);
        }
        if (srcref != null) {
            result.srcrefTree(srcref);
        }
        return result;
    }

    static boolean isNaN(com.google.javascript.rhino.Node n) {
        if ((n.isName() && n.getString().equals("NaN")) || (((((n.getType() == com.google.javascript.rhino.Token.DIV) && n.getFirstChild().isNumber()) && (n.getFirstChild().getDouble() == 0)) && n.getLastChild().isNumber()) && (n.getLastChild().getDouble() == 0))) {
            return true;
        }
        return false;
    }

    public static java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> mapMainToClone(com.google.javascript.rhino.Node main, com.google.javascript.rhino.Node clone) {
        com.google.common.base.Preconditions.checkState(main.isEquivalentTo(clone));
        java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> mtoc = new java.util.HashMap<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node>();
        mtoc.put(main, clone);
        com.google.javascript.jscomp.NodeUtil.mtocHelper(mtoc, main, clone);
        return mtoc;
    }

    private static void mtocHelper(java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> map, com.google.javascript.rhino.Node main, com.google.javascript.rhino.Node clone) {
        if (main.isFunction()) {
            map.put(main, clone);
        }
        com.google.javascript.rhino.Node mchild = main.getFirstChild();
        com.google.javascript.rhino.Node cchild = clone.getFirstChild();
        while (mchild != null) {
            com.google.javascript.jscomp.NodeUtil.mtocHelper(map, mchild, cchild);
            mchild = mchild.getNext();
            cchild = cchild.getNext();
        } 
    }

    public static void verifyScopeChanges(java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> map, com.google.javascript.rhino.Node main, boolean verifyUnchangedNodes, com.google.javascript.jscomp.AbstractCompiler compiler) {
        final java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.rhino.Node> mtoc = map;
        final boolean checkUnchanged = verifyUnchangedNodes;
        com.google.javascript.rhino.Node clone = mtoc.get(main);
        if (main.getChangeTime() > clone.getChangeTime()) {
            com.google.common.base.Preconditions.checkState(!main.isEquivalentToShallow(clone));
        } else if (checkUnchanged) {
            com.google.common.base.Preconditions.checkState(main.isEquivalentToShallow(clone));
        }
        com.google.javascript.jscomp.NodeUtil.visitPreOrder(main, new com.google.javascript.jscomp.NodeUtil.Visitor() {
            @java.lang.Override
            public void visit(com.google.javascript.rhino.Node n) {
                if (n.isFunction() && mtoc.containsKey(n)) {
                    com.google.javascript.rhino.Node clone = mtoc.get(n);
                    if (n.getChangeTime() > clone.getChangeTime()) {
                        com.google.common.base.Preconditions.checkState(!n.isEquivalentToShallow(clone));
                    } else if (checkUnchanged) {
                        com.google.common.base.Preconditions.checkState(n.isEquivalentToShallow(clone));
                    }
                }
            }
        }, com.google.common.base.Predicates.<com.google.javascript.rhino.Node>alwaysTrue());
    }
}
[158399] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659847215711
GPR[SSUN]-1659847215711
-1966087783
GPR[ESUN]-1659847215912
GPR[SSUN]-1659847215912
-1966087783
GPR[SPVATF]-1659847216103
GPR[EPVATF]-1659847216125
[158814] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659847216126
GPR[EPVATF]-1659847216146
[158834] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659847216146
GPR[SSUN]-1659847216147
1103597247
GPR[SPVATF]-1659847216380
GPR[EPVATF]-1659847216915
GPR[SPS]-1659847216915
GPR[EPS]-1659847230959
GPR[ESUN]-1659847230959
GPR[SSUN]-1659847230959
1103597247
GPR[ESUN]-1659847231260
GPR[SSUN]-1659847231260
1103597247
GPR[SPVATF]-1659847231497
GPR[EPVATF]-1659847232002
GPR[SPS]-1659847232002
[175226] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:620.
GPR[EPS]-1659847232538
GPR[SPVATF]-1659847232538
GPR[EPVATF]-1659847233080
GPR[SPS]-1659847233080
[176307] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:620.
GPR[EPS]-1659847233619
GPR[ESUN]-1659847233619
GPR[SSUN]-1659847233619
1103597247
GPR[ESUN]-1659847233860
GPR[SSUN]-1659847233860
1103597247
GPR[SPVATF]-1659847234100
GPR[EPVATF]-1659847234616
GPR[SPS]-1659847234616
[177893] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:618.
GPR[EPS]-1659847235205
GPR[ESUN]-1659847235205
GPR[SSUN]-1659847235205
1103597247
GPR[ESUN]-1659847235445
GPR[SSUN]-1659847235445
1103597247
GPR[SPVATF]-1659847235685
GPR[EPVATF]-1659847237141
GPR[SPS]-1659847237141
[180212] ERROR ConstraintModelBuilder - Unable to compile the change: 
class InlineVariables implements com.google.javascript.jscomp.CompilerPass {
    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    enum Mode {

        CONSTANTS_ONLY,
        LOCALS_ONLY,
        ALL;}

    private final com.google.javascript.jscomp.InlineVariables.Mode mode;

    private final boolean inlineAllStrings;

    private final com.google.javascript.jscomp.InlineVariables.IdentifyConstants identifyConstants = new com.google.javascript.jscomp.InlineVariables.IdentifyConstants();

    InlineVariables(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.InlineVariables.Mode mode, boolean inlineAllStrings) {
        this.compiler = compiler;
        this.mode = mode;
        this.inlineAllStrings = inlineAllStrings;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externs, com.google.javascript.rhino.Node root) {
        com.google.javascript.jscomp.ReferenceCollectingCallback callback = new com.google.javascript.jscomp.ReferenceCollectingCallback(compiler, new com.google.javascript.jscomp.InlineVariables.InliningBehavior(), getFilterForMode());
        callback.process(externs, root);
    }

    private com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> getFilterForMode() {
        switch (mode) {
            case ALL :
                return com.google.common.base.Predicates.<com.google.javascript.jscomp.Scope.Var>alwaysTrue();
            case LOCALS_ONLY :
                return new com.google.javascript.jscomp.InlineVariables.IdentifyLocals();
            case CONSTANTS_ONLY :
                return new com.google.javascript.jscomp.InlineVariables.IdentifyConstants();
            default :
                throw new java.lang.IllegalStateException();
        }
    }

    private class IdentifyConstants implements com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return var.isConst();
        }
    }

    private class IdentifyLocals implements com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return var.scope.isLocal();
        }
    }

    private static class AliasCandidate {
        private final com.google.javascript.jscomp.Scope.Var alias;

        private final com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo;

        AliasCandidate(com.google.javascript.jscomp.Scope.Var alias, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {
            this.alias = alias;
            this.refInfo = refInfo;
        }
    }

    private class InliningBehavior implements com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior {
        private final java.util.Set<com.google.javascript.jscomp.Scope.Var> staleVars = com.google.common.collect.Sets.newHashSet();

        final java.util.Map<com.google.javascript.rhino.Node, com.google.javascript.jscomp.InlineVariables.AliasCandidate> aliasCandidates = com.google.common.collect.Maps.newHashMap();

        @java.lang.Override
        public void afterExitScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            collectAliasCandidates(t, referenceMap);
            doInlinesForScope(t, referenceMap);
        }

        private void collectAliasCandidates(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            if (mode != com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY) {
                for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                    com.google.javascript.jscomp.Scope.Var v = it.next();
                    com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                    if ((((referenceInfo != null) && (referenceInfo.references.size() >= 2)) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) {
                        com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
                        com.google.javascript.rhino.Node value = init.getAssignedValue();
                        if ((value != null) && value.isName()) {
                            aliasCandidates.put(value, new com.google.javascript.jscomp.InlineVariables.AliasCandidate(v, referenceInfo));
                        }
                    }
                }
            }
        }

        private void doInlinesForScope(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            boolean maybeModifiedArguments = maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);
            for (java.util.Iterator<com.google.javascript.jscomp.Scope.Var> it = t.getScope().getVars(); it.hasNext();) {
                com.google.javascript.jscomp.Scope.Var v = it.next();
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo = referenceMap.getReferences(v);
                if ((referenceInfo == null) || isVarInlineForbidden(v)) {
                    continue;
                } else if (isInlineableDeclaredConstant(v, referenceInfo)) {
                    com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReferenceForConstants();
                    com.google.javascript.rhino.Node value = init.getAssignedValue();
                    inlineDeclaredConstant(v, value, referenceInfo.references);
                    staleVars.add(v);
                } else if (mode == com.google.javascript.jscomp.InlineVariables.Mode.CONSTANTS_ONLY) {
                    continue;
                } else {
                    inlineNonConstants(v, referenceInfo, maybeModifiedArguments);
                }
            }
        }

        private boolean maybeEscapedOrModifiedArguments(com.google.javascript.jscomp.Scope scope, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap referenceMap) {
            if (scope.isLocal()) {
                com.google.javascript.jscomp.Scope.Var arguments = scope.getArgumentsVar();
                com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refs = referenceMap.getReferences(arguments);
                if ((refs != null) && (!refs.references.isEmpty())) {
                    for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref : refs.references) {
                        com.google.javascript.rhino.Node refNode = ref.getNode();
                        com.google.javascript.rhino.Node refParent = ref.getParent();
                        if (!((com.google.javascript.jscomp.NodeUtil.isGet(refParent) && (refNode == ref.getParent().getFirstChild())) && (!isLValue(refParent)))) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private boolean isLValue(com.google.javascript.rhino.Node n) {
            com.google.javascript.rhino.Node parent = n.getParent();
            return (parent.isInc() || parent.isDec()) || (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(parent) && (parent.getFirstChild() == n));
        }

        private void inlineNonConstants(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection referenceInfo, boolean maybeModifiedArguments) {
            int refCount = referenceInfo.references.size();
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration = referenceInfo.references.get(0);
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = referenceInfo.getInitializingReference();
            int firstRefAfterInit = (declaration == init) ? 2 : 3;
            if ((refCount > 1) && isImmutableAndWellDefinedVariable(v, referenceInfo)) {
                com.google.javascript.rhino.Node value;
                if (init != null) {
                    value = init.getAssignedValue();
                } else {
                    com.google.javascript.rhino.Node srcLocation = declaration.getNode();
                    value = com.google.javascript.jscomp.NodeUtil.newUndefinedNode(srcLocation);
                }
                com.google.common.base.Preconditions.checkNotNull(value);
                inlineWellDefinedVariable(v, value, referenceInfo.references);
                staleVars.add(v);
            } else if (refCount == firstRefAfterInit) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference = referenceInfo.references.get(firstRefAfterInit - 1);
                if (canInline(declaration, init, reference)) {
                    inline(v, declaration, init, reference);
                    staleVars.add(v);
                }
            } else if ((declaration != init) && (refCount == 2)) {
                if (isValidDeclaration(declaration) && isValidInitialization(init)) {
                    com.google.javascript.rhino.Node value = init.getAssignedValue();
                    com.google.common.base.Preconditions.checkNotNull(value);
                    inlineWellDefinedVariable(v, value, referenceInfo.references);
                    staleVars.add(v);
                }
            }
            if ((((!maybeModifiedArguments) && (!staleVars.contains(v))) && referenceInfo.isWellDefined()) && referenceInfo.isAssignedOnceInLifetime()) {
                java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs = referenceInfo.references;
                for (int i = 1; i < refs.size(); i++) {
                    com.google.javascript.rhino.Node nameNode = refs.get(i).getNode();
                    if (aliasCandidates.containsKey(nameNode)) {
                        com.google.javascript.jscomp.InlineVariables.AliasCandidate candidate = aliasCandidates.get(nameNode);
                        if ((!staleVars.contains(candidate.alias)) && (!isVarInlineForbidden(candidate.alias))) {
                            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference aliasInit;
                            aliasInit = candidate.refInfo.getInitializingReference();
                            com.google.javascript.rhino.Node value = aliasInit.getAssignedValue();
                            com.google.common.base.Preconditions.checkNotNull(value);
                            inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references);
                            staleVars.add(candidate.alias);
                        }
                    }
                }
            }
        }

        private void blacklistVarReferencesInTree(com.google.javascript.rhino.Node root, com.google.javascript.jscomp.Scope scope) {
            for (com.google.javascript.rhino.Node c = root.getFirstChild(); c != null; c = c.getNext()) {
                blacklistVarReferencesInTree(c, scope);
            }
            if (root.isName()) {
                staleVars.add(scope.getVar(root.getString()));
            }
        }

        private boolean isVarInlineForbidden(com.google.javascript.jscomp.Scope.Var var) {
            return ((var.isExtern() || compiler.getCodingConvention().isExported(var.name)) || com.google.javascript.jscomp.RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)) || staleVars.contains(var);
        }

        private void inline(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref) {
            com.google.javascript.rhino.Node value = init.getAssignedValue();
            com.google.common.base.Preconditions.checkState(value != null);
            boolean isFunctionDeclaration = com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(value);
            compiler.reportChangeToEnclosingScope(ref.getNode());
            inlineValue(v, ref, value.detachFromParent());
            if (decl != init) {
                com.google.javascript.rhino.Node expressRoot = init.getGrandparent();
                com.google.common.base.Preconditions.checkState(expressRoot.isExprResult());
                com.google.javascript.jscomp.NodeUtil.removeChild(expressRoot.getParent(), expressRoot);
            }
            if (!isFunctionDeclaration) {
                compiler.reportChangeToEnclosingScope(decl.getNode());
                removeDeclaration(decl);
            }
        }

        private void inlineWellDefinedVariable(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.rhino.Node value, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl = refSet.get(0);
            for (int i = 1; i < refSet.size(); i++) {
                inlineValue(v, refSet.get(i), value.cloneTree());
            }
            removeDeclaration(decl);
        }

        private void inlineDeclaredConstant(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.rhino.Node value, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet) {
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl = null;
            for (com.google.javascript.jscomp.ReferenceCollectingCallback.Reference r : refSet) {
                if (r.getNode() == v.getNameNode()) {
                    decl = r;
                } else {
                    inlineValue(v, r, value.cloneTree());
                }
            }
            removeDeclaration(decl);
        }

        private void removeDeclaration(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference decl) {
            com.google.javascript.rhino.Node varNode = decl.getParent();
            com.google.javascript.rhino.Node grandparent = decl.getGrandparent();
            compiler.reportChangeToEnclosingScope(decl.getNode());
            varNode.removeChild(decl.getNode());
            if (!varNode.hasChildren()) {
                com.google.common.base.Preconditions.checkState(varNode.isVar());
                com.google.javascript.jscomp.NodeUtil.removeChild(grandparent, varNode);
            }
        }

        private void inlineValue(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref, com.google.javascript.rhino.Node value) {
            compiler.reportChangeToEnclosingScope(ref.getNode());
            if (ref.isSimpleAssignmentToName()) {
                ref.getGrandparent().replaceChild(ref.getParent(), value);
            } else {
                ref.getParent().replaceChild(ref.getNode(), value);
            }
            blacklistVarReferencesInTree(value, v.scope);
        }

        private boolean isInlineableDeclaredConstant(com.google.javascript.jscomp.Scope.Var var, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {
            if (!identifyConstants.apply(var)) {
                return false;
            }
            if (!refInfo.isAssignedOnceInLifetime()) {
                return false;
            }
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference init = refInfo.getInitializingReferenceForConstants();
            if (init == null) {
                return false;
            }
            com.google.javascript.rhino.Node value = init.getAssignedValue();
            if (value == null) {
                return false;
            }
            if (!com.google.javascript.jscomp.NodeUtil.isImmutableValue(value)) {
                return false;
            }
            return (!value.isString()) || isStringWorthInlining(var, refInfo.references);
        }

        private boolean isStringWorthInlining(com.google.javascript.jscomp.Scope.Var var, java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refs) {
            if ((!inlineAllStrings) && (!var.isDefine())) {
                int len = var.getInitialValue().getString().length() + "''".length();
                int noInlineBytes = ("var xx=;".length() + len) + (4 * (refs.size() - 1));
                int inlineBytes = (len - 1) * (refs.size() - 1);
                return noInlineBytes >= inlineBytes;
            }
            return true;
        }

        private boolean canInline(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            if (((!isValidDeclaration(declaration)) || (!isValidInitialization(initialization))) || (!isValidReference(reference))) {
                return false;
            }
            if ((declaration != initialization) && (!initialization.getGrandparent().isExprResult())) {
                return false;
            }
            if ((declaration.getBasicBlock() != initialization.getBasicBlock()) || (declaration.getBasicBlock() != reference.getBasicBlock())) {
                return false;
            }
            com.google.javascript.rhino.Node value = initialization.getAssignedValue();
            com.google.common.base.Preconditions.checkState(value != null);
            if ((value.isGetProp() && reference.getParent().isCall()) && (reference.getParent().getFirstChild() == reference.getNode())) {
                return false;
            }
            if (value.isFunction()) {
                com.google.javascript.rhino.Node callNode = reference.getParent();
                if (reference.getParent().isCall()) {
                    com.google.javascript.jscomp.CodingConvention convention = compiler.getCodingConvention();
                    com.google.javascript.jscomp.CodingConvention.SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode);
                    if (relationship != null) {
                        return false;
                    }
                    if (convention.getSingletonGetterClassName(callNode) != null) {
                        return false;
                    }
                }
            }
            return canMoveAggressively(value) || canMoveModerately(initialization, reference);
        }

        private boolean canMoveAggressively(com.google.javascript.rhino.Node value) {
            return com.google.javascript.jscomp.NodeUtil.isLiteralValue(value, true) || value.isFunction();
        }

        private boolean canMoveModerately(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization, com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            java.util.Iterator<com.google.javascript.rhino.Node> it;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(31).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("reference",reference);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.aliasCandidates",com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.aliasCandidates);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("com.google.javascript.jscomp.InlineVariables.this.compiler",com.google.javascript.jscomp.InlineVariables.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("com.google.javascript.jscomp.InlineVariables.this.mode",com.google.javascript.jscomp.InlineVariables.this.mode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.staleVars",com.google.javascript.jscomp.InlineVariables.InliningBehavior.this.staleVars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("com.google.javascript.jscomp.InlineVariables.this.inlineAllStrings",com.google.javascript.jscomp.InlineVariables.this.inlineAllStrings);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("initialization",initialization);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectInput("com.google.javascript.jscomp.InlineVariables.this.identifyConstants",com.google.javascript.jscomp.InlineVariables.this.identifyConstants);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(31).collectionEnds();
            }
            if (runtimeAngelicValue) if (initialization.getParent().isVar()) {
                it = com.google.javascript.jscomp.NodeIterators.LocalVarMotion.forVar(initialization.getNode(), initialization.getParent(), initialization.getGrandparent());
            } else if (initialization.getParent().isAssign()) {
                com.google.common.base.Preconditions.checkState(initialization.getGrandparent().isExprResult());
                it = com.google.javascript.jscomp.NodeIterators.LocalVarMotion.forAssign(initialization.getNode(), initialization.getParent(), initialization.getGrandparent(), initialization.getGrandparent().getParent());
            } else {
                throw new java.lang.IllegalStateException("Unexpected initialization parent " + initialization.getParent().toStringTree());
            }
            com.google.javascript.rhino.Node targetName = reference.getNode();
            while (it.hasNext()) {
                com.google.javascript.rhino.Node curNode = it.next();
                if (curNode == targetName) {
                    return true;
                }
            } 
            return false;
        }

        private boolean isValidDeclaration(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference declaration) {
            return (declaration.getParent().isVar() && (!declaration.getGrandparent().isFor())) || com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(declaration.getParent());
        }

        private boolean isValidInitialization(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference initialization) {
            if (initialization == null) {
                return false;
            } else if (initialization.isDeclaration()) {
                if ((!com.google.javascript.jscomp.NodeUtil.isFunctionDeclaration(initialization.getParent())) && (initialization.getNode().getFirstChild() == null)) {
                    return false;
                }
            } else {
                com.google.javascript.rhino.Node parent = initialization.getParent();
                com.google.common.base.Preconditions.checkState(parent.isAssign() && (parent.getFirstChild() == initialization.getNode()));
            }
            com.google.javascript.rhino.Node n = initialization.getAssignedValue();
            if (n.isFunction()) {
                return compiler.getCodingConvention().isInlinableFunction(n);
            }
            return true;
        }

        private boolean isValidReference(com.google.javascript.jscomp.ReferenceCollectingCallback.Reference reference) {
            return (!reference.isDeclaration()) && (!reference.isLvalue());
        }

        private boolean isImmutableAndWellDefinedVariable(com.google.javascript.jscomp.Scope.Var v, com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection refInfo) {
            java.util.List<com.google.javascript.jscomp.ReferenceCollectingCallback.Reference> refSet = refInfo.references;
            int startingReadRef = 1;
            com.google.javascript.jscomp.ReferenceCollectingCallback.Reference refDecl = refSet.get(0);
            if (!isValidDeclaration(refDecl)) {
                return false;
            }
            boolean isNeverAssigned = refInfo.isNeverAssigned();
            if (!isNeverAssigned) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference refInit = refInfo.getInitializingReference();
                if (!isValidInitialization(refInit)) {
                    return false;
                }
                if (refDecl != refInit) {
                    com.google.common.base.Preconditions.checkState(refInit == refSet.get(1));
                    startingReadRef = 2;
                }
                if (!refInfo.isWellDefined()) {
                    return false;
                }
                com.google.javascript.rhino.Node value = refInit.getAssignedValue();
                com.google.common.base.Preconditions.checkNotNull(value);
                boolean isImmutableValueWorthInlining = com.google.javascript.jscomp.NodeUtil.isImmutableValue(value) && ((!value.isString()) || isStringWorthInlining(v, refInfo.references));
                boolean isInlinableThisAlias = value.isThis() && (!refInfo.isEscaped());
                if ((!isImmutableValueWorthInlining) && (!isInlinableThisAlias)) {
                    return false;
                }
            }
            for (int i = startingReadRef; i < refSet.size(); i++) {
                com.google.javascript.jscomp.ReferenceCollectingCallback.Reference ref = refSet.get(i);
                if (!isValidReference(ref)) {
                    return false;
                }
            }
            return true;
        }
    }
}
[180212] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659847237524
GPR[EPVATF]-1659847238010
GPR[SPS]-1659847238011
[181238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:600.
GPR[EPS]-1659847238550
GPR[ESUN]-1659847238550
GPR[SSUN]-1659847238550
1795686761
GPR[SPVATF]-1659847238797
GPR[EPVATF]-1659847239271
GPR[SPS]-1659847239271
GPR[EPS]-1659847249385
GPR[SPVATF]-1659847249386
GPR[EPVATF]-1659847249878
GPR[SPS]-1659847249878
GPR[EPS]-1659847260123
GPR[ESUN]-1659847260123
GPR[SSUN]-1659847260123
1795686761
GPR[ESUN]-1659847260367
GPR[SSUN]-1659847260367
1795686761
GPR[SPVATF]-1659847260607
GPR[EPVATF]-1659847261105
GPR[SPS]-1659847261106
[204394] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ReferenceCollectingCallback$ReferenceCollection:378.
GPR[EPS]-1659847261706
GPR[ESUN]-1659847261706
GPR[SSUN]-1659847261706
1103597247
GPR[SPVATF]-1659847261947
GPR[EPVATF]-1659847262449
GPR[SPS]-1659847262449
[205676] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.InlineVariables$InliningBehavior:335.
GPR[EPS]-1659847262988
GPR[ESUN]-1659847262988
GPR[SSUN]-1659847262988
GPR[ESUN]-1659847262988
GPR[SSUN]-1659847262988
-1345859678
GPR[ESUN]-1659847263256
GPR[SSUN]-1659847263256
-1934014012
GPR[ESUN]-1659847263466
GPR[SSUN]-1659847263466
-1934014012
GPR[SPVATF]-1659847263674
GPR[EPVATF]-1659847264183
GPR[SPS]-1659847264183
[207353] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeIterators$LocalVarMotion:166.
GPR[EPS]-1659847264665
GPR[ESUN]-1659847264665
GPR[SSUN]-1659847264665
-1934014012
GPR[SPVATF]-1659847264876
GPR[EPVATF]-1659847265433
GPR[SPS]-1659847265433
[208592] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeIterators$LocalVarMotion:165.
GPR[EPS]-1659847265904
GPR[ESUN]-1659847265904
GPR[SSUN]-1659847265904
-1934014012
GPR[ESUN]-1659847266118
GPR[SSUN]-1659847266118
-1934014012
GPR[ESUN]-1659847266324
GPR[SSUN]-1659847266324
-1934014012
GPR[ESUN]-1659847266531
GPR[SSUN]-1659847266532
-1934014012
GPR[SPVATF]-1659847266735
GPR[EPVATF]-1659847267243
GPR[SPS]-1659847267243
[210413] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeIterators$FunctionlessLocalScope:93.
GPR[EPS]-1659847267725
GPR[SPVATF]-1659847267725
GPR[EPVATF]-1659847268226
GPR[SPS]-1659847268226
[211376] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeIterators$FunctionlessLocalScope:93.
GPR[EPS]-1659847268688
GPR[ESUN]-1659847268688
GPR[SSUN]-1659847268688
-1934014012
GPR[SPVATF]-1659847268905
GPR[EPVATF]-1659847269463
GPR[SPS]-1659847269463
[212618] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeIterators$FunctionlessLocalScope:90.
GPR[EPS]-1659847269930
GPR[ESUN]-1659847269930
GPR[SSUN]-1659847269930
-1934014012
GPR[SPVATF]-1659847270145
GPR[EPVATF]-1659847270679
GPR[SPS]-1659847270679
[517857] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659847581373
GPR[SSUN]-1659847581373
\n\nNode: host-46\n
\n\nDate: Sat 06 Aug 2022 09:47:55 PM PDT\n
End running Nopol Closure/120 results at /experiment_home///results/Nopol/Closure/120/seed_260/
Removing checked out dir script/workingdir/Nopol/Closure_120
GPR[SSLE]-1659847676026
GPR[ESLE]-1659847736030
