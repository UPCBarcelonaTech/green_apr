Sleep 1m start
GPR[SSLI]-1659881729071
GPR[ESLI]-1659881789075
Running SimFix Closure 62b
Timezone: America/Los_Angeles
Seed 262
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Closure/62/seed_262/
Project lc: closure
New out script/workingdir/SimFix/closure/closure_62_buggy
The file script/workingdir/SimFix/closure/closure_62_buggy does not exist!
script/workingdir/SimFix/closure/closure_62_buggy
Current directory: script/workingdir/SimFix/closure/closure_62_buggy
classpath:  script/workingdir/SimFix/closure/closure_62_buggy/build/classes:script/workingdir/SimFix/closure/closure_62_buggy/lib/args4j.jar:script/workingdir/SimFix/closure/closure_62_buggy/lib/guava.jar:script/workingdir/SimFix/closure/closure_62_buggy/lib/json.jar:script/workingdir/SimFix/closure/closure_62_buggy/lib/jsr305.jar:script/workingdir/SimFix/closure/closure_62_buggy/lib/protobuf-java.jar:script/workingdir/SimFix/closure/closure_62_buggy/build/lib/rhino.jar:script/workingdir/SimFix/closure/closure_62_buggy/lib/ant.jar:script/workingdir/SimFix/closure/closure_62_buggy/lib/ant-launcher.jar:script/workingdir/SimFix/closure/closure_62_buggy/lib/caja-r4314.jar:script/workingdir/SimFix/closure/closure_62_buggy/lib/jarjar.jar:script/workingdir/SimFix/closure/closure_62_buggy/lib/junit.jar:script/workingdir/SimFix/closure/closure_62_buggy/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659881810336
GPR[ESLB]-1659881870342
Calling SimFix: at script/workingdir/SimFix/closure/closure_62_buggy
build
build.xml
closure-compiler.pom
contrib
CONTRIBUTORS
COPYING
d4j-info
defects4j.build.properties
externs
gen
javadoc
lib
README
src
test
tools
content current dir: build build.xml closure-compiler.pom contrib CONTRIBUTORS COPYING d4j-info defects4j.build.properties externs gen javadoc lib README src test tools
Node: host-54
Date init: Sun 07 Aug 2022 07:17:52 AM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659881872645
=================================================
Project : closure_62	start : 22/08/07 07:17

Field type inconsistancy 'errors' with types : JSError[] and List<JSError>
Field type inconsistancy 'type' with types : JSType and Type
Variable type inconsistancy of 'name' in method 'visit,NodeTraversal,Node,Node' with types : String and Name
Variable type inconsistancy of 'start' in method 'parseRegExp,String,String' with types : int and char
Variable type inconsistancy of 'end' in method 'parseRegExp,String,String' with types : int and char
Field type inconsistancy 'THIS' with types : Token and int
GPR[ESUP]-1659881875087
MM Purify? false
GPR[SFL]-1659881875422
GPR[EFL]-1659881875467
GPR[SFP]-1659881875467
TIMEOUT : 18000000
GPR[SSUN]-1659881875482
com.google.javascript.jscomp.LightweightMessageFormatter,90
========
sb.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881878001
GPR[SPVAP]-1659881878001
GPR[EPVAP]-1659881881627
GPR[EPVS]-1659881881627
========
sb.append(sourceExcerpt);
sb.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881881631
GPR[SPVAP]-1659881881631
GPR[EPVAP]-1659881884145
GPR[EPVS]-1659881884145
========
b.append(sourceExcerpt);
sb.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881884146
GPR[SPVAP]-1659881884146
GPR[EPVAP]-1659881886570
GPR[EPVS]-1659881886570
========
b.append(error.description);
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881886572
GPR[SPVAP]-1659881886572
GPR[EPVAP]-1659881893863
GPR[SPVATF]-1659881893863
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881897915
GPR[EPVS]-1659881897915
========
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881897916
GPR[SPVAP]-1659881897916
GPR[EPVAP]-1659881901546
GPR[SPVATF]-1659881901546
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881905138
GPR[EPVS]-1659881905138
========
b.append(error.description);
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881905139
GPR[SPVAP]-1659881905139
GPR[EPVAP]-1659881909174
GPR[SPVATF]-1659881909174
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881912864
GPR[EPVS]-1659881912864
========
builder.append(sourceExcerpt);
builder.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881912867
GPR[SPVAP]-1659881912867
GPR[EPVAP]-1659881914623
GPR[EPVS]-1659881914623
========
builder.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881914624
GPR[SPVAP]-1659881914624
GPR[EPVAP]-1659881916403
GPR[EPVS]-1659881916403
========
b.append(sourceExcerpt);
builder.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881916404
GPR[SPVAP]-1659881916404
GPR[EPVAP]-1659881918127
GPR[EPVS]-1659881918127
========
b.append("ul {margin-top:2px; margin-left:0px; padding-left:1em;}");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881918128
GPR[SPVAP]-1659881918128
GPR[EPVAP]-1659881921979
GPR[SPVATF]-1659881921979
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881925847
GPR[EPVS]-1659881925847
========
b.append("li {margin-top:3px; margin-left:24px;"+"padding-left:0px;padding-bottom: 4px}");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881925848
GPR[SPVAP]-1659881925848
GPR[EPVAP]-1659881929631
GPR[SPVATF]-1659881929631
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881933478
GPR[EPVS]-1659881933478
========
b.append("</style></head><body>\n");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881933480
GPR[SPVAP]-1659881933480
GPR[EPVAP]-1659881937302
GPR[SPVATF]-1659881937303
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881940989
GPR[EPVS]-1659881940989
========
b.append("ul {margin-top:2px; margin-left:0px; padding-left:1em;}");
b.append("li {margin-top:3px; margin-left:24px;"+"padding-left:0px;padding-bottom: 4px}");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881940990
GPR[SPVAP]-1659881940990
GPR[EPVAP]-1659881945052
GPR[SPVATF]-1659881945052
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881948632
GPR[EPVS]-1659881948632
========
b.append("ul {margin-top:2px; margin-left:0px; padding-left:1em;}");
b.append("</style></head><body>\n");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881948633
GPR[SPVAP]-1659881948633
GPR[EPVAP]-1659881952534
GPR[SPVATF]-1659881952534
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881956507
GPR[EPVS]-1659881956507
========
b.append("li {margin-top:3px; margin-left:24px;"+"padding-left:0px;padding-bottom: 4px}");
b.append("</style></head><body>\n");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881956509
GPR[SPVAP]-1659881956509
GPR[EPVAP]-1659881960454
GPR[SPVATF]-1659881960454
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881964125
GPR[EPVS]-1659881964125
========
b.append("ul {margin-top:2px; margin-left:0px; padding-left:1em;}");
b.append("li {margin-top:3px; margin-left:24px;"+"padding-left:0px;padding-bottom: 4px}");
b.append("</style></head><body>\n");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881964126
GPR[SPVAP]-1659881964126
GPR[EPVAP]-1659881967828
GPR[SPVATF]-1659881967828
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881971180
GPR[EPVS]-1659881971180
========
b.append(info.numOccurrences);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881971181
GPR[SPVAP]-1659881971181
GPR[EPVAP]-1659881972953
GPR[EPVS]-1659881972953
========
b.append(INDENT);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881972955
GPR[SPVAP]-1659881972955
GPR[EPVAP]-1659881974689
GPR[EPVS]-1659881974689
========
builder.append(INDENT);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881974692
GPR[SPVAP]-1659881974692
GPR[EPVAP]-1659881976586
GPR[EPVS]-1659881976586
========
assert (sourceFile != null);

b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881976589
GPR[SPVAP]-1659881976589
GPR[EPVAP]-1659881978342
GPR[EPVS]-1659881978342
========
b.append(")");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881978343
GPR[SPVAP]-1659881978343
GPR[EPVAP]-1659881982113
GPR[SPVATF]-1659881982113
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659881985907
GPR[EPVS]-1659881985907
========
b.append(")");
builder.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881985909
GPR[SPVAP]-1659881985909
GPR[EPVAP]-1659881987706
GPR[EPVS]-1659881987706
========
b.append(")");
b.append(sourceExcerpt);
builder.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881987707
GPR[SPVAP]-1659881987707
GPR[EPVAP]-1659881989652
GPR[EPVS]-1659881989652
========
b.append(")");
builder.append(sourceExcerpt);
builder.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881989653
GPR[SPVAP]-1659881989653
GPR[EPVAP]-1659881991681
GPR[EPVS]-1659881991681
========
jsOutput.append(sourceExcerpt);
jsOutput.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881991683
GPR[SPVAP]-1659881991683
GPR[EPVAP]-1659881993731
GPR[EPVS]-1659881993731
========
jsOutput.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881993732
GPR[SPVAP]-1659881993732
GPR[EPVAP]-1659881995488
GPR[EPVS]-1659881995488
========
b.append(sourceExcerpt);
jsOutput.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881995489
GPR[SPVAP]-1659881995489
GPR[EPVAP]-1659881997249
GPR[EPVS]-1659881997249
========
b.append(getDebugHashCodeStringOf(call.returnType));
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881997250
GPR[SPVAP]-1659881997250
GPR[EPVAP]-1659881999200
GPR[EPVS]-1659881999200
========
b.append(sourceExcerpt);
assignmentLog.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659881999202
GPR[SPVAP]-1659881999202
GPR[EPVAP]-1659882000982
GPR[EPVS]-1659882000982
========
b.append(getPropertyType(sourceExcerpt).toString());
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882000985
GPR[SPVAP]-1659882000985
GPR[EPVAP]-1659882002931
GPR[EPVS]-1659882002931
========
b.add(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882002933
GPR[SPVAP]-1659882002933
GPR[EPVAP]-1659882004895
GPR[EPVS]-1659882004896
========
debug.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882004897
GPR[SPVAP]-1659882004897
GPR[EPVAP]-1659882006902
GPR[EPVS]-1659882006902
========
b.append(" ms ");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882006905
GPR[SPVAP]-1659882006905
GPR[EPVAP]-1659882010786
GPR[SPVATF]-1659882010786
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882014359
GPR[EPVS]-1659882014359
========
b.append(" ms ");
sb.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882014360
GPR[SPVAP]-1659882014360
GPR[EPVAP]-1659882016101
GPR[EPVS]-1659882016101
========
b.append(" ms ");
b.append(sourceExcerpt);
sb.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882016102
GPR[SPVAP]-1659882016102
GPR[EPVAP]-1659882017820
GPR[EPVS]-1659882017820
========
b.append(" ms ");
sb.append(sourceExcerpt);
sb.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882017821
GPR[SPVAP]-1659882017821
GPR[EPVAP]-1659882019587
GPR[EPVS]-1659882019587
========
buf.append(sourceExcerpt);
buf.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882019589
GPR[SPVAP]-1659882019589
GPR[EPVAP]-1659882021390
GPR[EPVS]-1659882021390
========
buf.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882021391
GPR[SPVAP]-1659882021391
GPR[EPVAP]-1659882023198
GPR[EPVS]-1659882023198
========
b.append(sourceExcerpt);
buf.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882023199
GPR[SPVAP]-1659882023199
GPR[EPVAP]-1659882024906
GPR[EPVS]-1659882024906
========
append('D');
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882024908
GPR[SPVAP]-1659882024908
GPR[EPVAP]-1659882026672
GPR[EPVS]-1659882026672
========
result.append(sourceExcerpt);
result.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882026676
GPR[SPVAP]-1659882026676
GPR[EPVAP]-1659882028721
GPR[EPVS]-1659882028721
========
result.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882028723
GPR[SPVAP]-1659882028723
GPR[EPVAP]-1659882030782
GPR[EPVS]-1659882030782
========
b.append(sourceExcerpt);
result.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882030783
GPR[SPVAP]-1659882030783
GPR[EPVAP]-1659882032587
GPR[EPVS]-1659882032587
========
namedGroups.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882032588
GPR[SPVAP]-1659882032588
GPR[EPVAP]-1659882034340
GPR[EPVS]-1659882034340
========
b.append(": ");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882034342
GPR[SPVAP]-1659882034342
GPR[EPVAP]-1659882038047
GPR[SPVATF]-1659882038047
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882041313
GPR[EPVS]-1659882041313
========
b.append(": ");
sb.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882041314
GPR[SPVAP]-1659882041314
GPR[EPVAP]-1659882043086
GPR[EPVS]-1659882043086
========
b.append(": ");
b.append(sourceExcerpt);
sb.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882043087
GPR[SPVAP]-1659882043087
GPR[EPVAP]-1659882045082
GPR[EPVS]-1659882045082
========
b.append(": ");
sb.append(sourceExcerpt);
sb.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882045084
GPR[SPVAP]-1659882045084
GPR[EPVAP]-1659882046835
GPR[EPVS]-1659882046835
========
b.append("<UL>\n");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882046837
GPR[SPVAP]-1659882046837
GPR[EPVAP]-1659882050702
GPR[SPVATF]-1659882050702
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882054107
GPR[EPVS]-1659882054107
========
b.append("<UL>\n");
builder.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882054108
GPR[SPVAP]-1659882054108
GPR[EPVAP]-1659882056129
GPR[EPVS]-1659882056129
========
b.append("<UL>\n");
b.append(sourceExcerpt);
builder.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882056130
GPR[SPVAP]-1659882056130
GPR[EPVAP]-1659882058051
GPR[EPVS]-1659882058051
========
b.append("<UL>\n");
builder.append(sourceExcerpt);
builder.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882058052
GPR[SPVAP]-1659882058052
GPR[EPVAP]-1659882059805
GPR[EPVS]-1659882059805
========
debugLog.append(sourceExcerpt);
debugLog.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882059808
GPR[SPVAP]-1659882059808
GPR[EPVAP]-1659882061537
GPR[EPVS]-1659882061537
========
debugLog.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882061538
GPR[SPVAP]-1659882061538
GPR[EPVAP]-1659882063288
GPR[EPVS]-1659882063288
========
b.append(sourceExcerpt);
debugLog.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882063289
GPR[SPVAP]-1659882063289
GPR[EPVAP]-1659882065030
GPR[EPVS]-1659882065030
========
b.append("| ");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882065032
GPR[SPVAP]-1659882065032
GPR[EPVAP]-1659882068667
GPR[SPVATF]-1659882068667
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882072105
GPR[EPVS]-1659882072105
========
b.append("| ");
builder.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882072106
GPR[SPVAP]-1659882072106
GPR[EPVAP]-1659882074106
GPR[EPVS]-1659882074106
========
b.append("| ");
b.append(sourceExcerpt);
builder.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882074107
GPR[SPVAP]-1659882074107
GPR[EPVAP]-1659882075846
GPR[EPVS]-1659882075846
========
b.append("| ");
builder.append(sourceExcerpt);
builder.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882075848
GPR[SPVAP]-1659882075848
GPR[EPVAP]-1659882077906
GPR[EPVS]-1659882077906
========
b.append("\n");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882077907
GPR[SPVAP]-1659882077907
GPR[EPVAP]-1659882081677
GPR[SPVATF]-1659882081677
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882085607
GPR[EPVS]-1659882085607
========
b.append("\n");
builder.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882085609
GPR[SPVAP]-1659882085609
GPR[EPVAP]-1659882087384
GPR[EPVS]-1659882087384
========
b.append("\n");
b.append(sourceExcerpt);
builder.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882087385
GPR[SPVAP]-1659882087385
GPR[EPVAP]-1659882089401
GPR[EPVS]-1659882089401
========
b.append("\n");
builder.append(sourceExcerpt);
builder.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882089403
GPR[SPVAP]-1659882089403
GPR[EPVAP]-1659882091236
GPR[EPVS]-1659882091236
========
b.append("</a> ");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882091238
GPR[SPVAP]-1659882091238
GPR[EPVAP]-1659882095072
GPR[SPVATF]-1659882095072
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882098589
GPR[EPVS]-1659882098589
========
b.append("</a> ");
builder.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882098591
GPR[SPVAP]-1659882098591
GPR[EPVAP]-1659882100354
GPR[EPVS]-1659882100354
========
b.append("</a> ");
b.append(sourceExcerpt);
builder.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882100356
GPR[SPVAP]-1659882100356
GPR[EPVAP]-1659882102106
GPR[EPVS]-1659882102106
========
b.append("</a> ");
builder.append(sourceExcerpt);
builder.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882102108
GPR[SPVAP]-1659882102108
GPR[EPVAP]-1659882104098
GPR[EPVS]-1659882104098
========
generateHtmlReportHeader(b);
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882104100
GPR[SPVAP]-1659882104100
GPR[EPVAP]-1659882105871
GPR[EPVS]-1659882105871
========
b.append("<ul>\n");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882105872
GPR[SPVAP]-1659882105872
GPR[EPVAP]-1659882109704
GPR[SPVATF]-1659882109704
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882113290
GPR[EPVS]-1659882113290
========
b.append("<ul>\n");
builder.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882113291
GPR[SPVAP]-1659882113291
GPR[EPVAP]-1659882115258
GPR[EPVS]-1659882115258
========
b.append("<ul>\n");
b.append(sourceExcerpt);
builder.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882115259
GPR[SPVAP]-1659882115259
GPR[EPVAP]-1659882117301
GPR[EPVS]-1659882117301
========
b.append("<ul>\n");
builder.append(sourceExcerpt);
builder.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882117302
GPR[SPVAP]-1659882117302
GPR[EPVAP]-1659882119049
GPR[EPVS]-1659882119049
========
initCodeSourceBuilder.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882119050
GPR[SPVAP]-1659882119050
GPR[EPVAP]-1659882121352
GPR[EPVS]-1659882121352
========
out.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882121359
GPR[SPVAP]-1659882121359
GPR[EPVAP]-1659882123526
GPR[EPVS]-1659882123526
========
b.append(')');
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882123528
GPR[SPVAP]-1659882123528
GPR[EPVAP]-1659882127580
GPR[SPVATF]-1659882127580
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882131667
GPR[EPVS]-1659882131667
========
b.append(')');
sb.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882131669
GPR[SPVAP]-1659882131669
GPR[EPVAP]-1659882133676
GPR[EPVS]-1659882133676
========
message.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882133678
GPR[SPVAP]-1659882133679
GPR[EPVAP]-1659882135404
GPR[EPVS]-1659882135404
========
if(b.length()==1){
sb.append("(?:)");
}
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882135409
GPR[SPVAP]-1659882135409
GPR[EPVAP]-1659882137446
GPR[EPVS]-1659882137446
========
b.append('/');
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882137448
GPR[SPVAP]-1659882137448
GPR[EPVAP]-1659882141506
GPR[SPVATF]-1659882141506
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882145450
GPR[EPVS]-1659882145450
========
b.append('/');
sb.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882145451
GPR[SPVAP]-1659882145451
GPR[EPVAP]-1659882147305
GPR[EPVS]-1659882147305
========
code.append(sourceExcerpt);
code.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882147308
GPR[SPVAP]-1659882147308
GPR[EPVAP]-1659882149199
GPR[EPVS]-1659882149199
========
code.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882149200
GPR[SPVAP]-1659882149200
GPR[EPVAP]-1659882151265
GPR[EPVS]-1659882151265
========
b.append(sourceExcerpt);
code.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882151267
GPR[SPVAP]-1659882151267
GPR[EPVAP]-1659882153009
GPR[EPVS]-1659882153009
========
b.append(formatTime(eventTime()));
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882153011
GPR[SPVAP]-1659882153011
GPR[EPVAP]-1659882154763
GPR[EPVS]-1659882154763
========
appendDebugInfo(b);
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882154766
GPR[SPVAP]-1659882154766
GPR[EPVAP]-1659882156656
GPR[EPVS]-1659882156656
========
if(b.length()==charno+1){
sb.setLength(len);
}
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882156657
GPR[SPVAP]-1659882156657
GPR[EPVAP]-1659882158394
GPR[EPVS]-1659882158394
========
b.checkState(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882158396
GPR[SPVAP]-1659882158396
GPR[EPVAP]-1659882160194
GPR[EPVS]-1659882160194
========
b.append(sourceExcerpt);
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882160197
GPR[SPVAP]-1659882160197
GPR[EPVAP]-1659882163964
GPR[SPVATF]-1659882163964
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882167919
GPR[EPVS]-1659882167919
========
b.append(sourceExcerpt);
b.append(sourceExcerpt);
sb.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882167920
GPR[SPVAP]-1659882167921
GPR[EPVAP]-1659882169696
GPR[EPVS]-1659882169696
========
this.charno=0;
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882169700
GPR[SPVAP]-1659882169700
GPR[EPVAP]-1659882171428
GPR[EPVS]-1659882171428
========
b.update(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882171429
GPR[SPVAP]-1659882171429
GPR[EPVAP]-1659882173157
GPR[EPVS]-1659882173157
========
out.append(sourceExcerpt);
out.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882173158
GPR[SPVAP]-1659882173158
GPR[EPVAP]-1659882174982
GPR[EPVS]-1659882174982
========
b.append(sourceExcerpt);
out.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882174983
GPR[SPVAP]-1659882174983
GPR[EPVAP]-1659882177002
GPR[EPVS]-1659882177002
========
appendListItem(b,"Total Names: "+countOf(TriState.BOTH,TriState.BOTH));
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882177004
GPR[SPVAP]-1659882177004
GPR[EPVAP]-1659882178743
GPR[EPVS]-1659882178743
========
msg.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882178744
GPR[SPVAP]-1659882178744
GPR[EPVAP]-1659882180652
GPR[EPVS]-1659882180652
========
append((char)FUNCTION_END);
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882180654
GPR[SPVAP]-1659882180654
GPR[EPVAP]-1659882182745
GPR[EPVS]-1659882182745
========
b.append(sourceExcerpt);
b.deleteCharAt('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882182747
GPR[SPVAP]-1659882182747
GPR[EPVAP]-1659882186508
GPR[SPVATF]-1659882186508
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882190139
GPR[EPVS]-1659882190139
========
b.append(")\\s*\\((.*?)\\)");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882190140
GPR[SPVAP]-1659882190140
GPR[EPVAP]-1659882194213
GPR[SPVATF]-1659882194213
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882198099
GPR[EPVS]-1659882198099
========
sb.append(sourceExcerpt);
b.deleteCharAt('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882198101
GPR[SPVAP]-1659882198101
GPR[EPVAP]-1659882200157
GPR[EPVS]-1659882200158
========
b.append(")\\s*\\((.*?)\\)");
sb.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882200159
GPR[SPVAP]-1659882200159
GPR[EPVAP]-1659882201897
GPR[EPVS]-1659882201897
========
b.append(sourceExcerpt);
sb.deleteCharAt('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882201899
GPR[SPVAP]-1659882201899
GPR[EPVAP]-1659882203651
GPR[EPVS]-1659882203651
========
b.append(")\\s*\\((.*?)\\)");
b.append(sourceExcerpt);
sb.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882203652
GPR[SPVAP]-1659882203652
GPR[EPVAP]-1659882205374
GPR[EPVS]-1659882205374
========
b.append(")\\s*\\((.*?)\\)");
b.append(sourceExcerpt);
b.deleteCharAt('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882205375
GPR[SPVAP]-1659882205375
GPR[EPVAP]-1659882209230
GPR[SPVATF]-1659882209230
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882213161
GPR[EPVS]-1659882213161
========
sb.append(sourceExcerpt);
sb.deleteCharAt('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882213163
GPR[SPVAP]-1659882213163
GPR[EPVAP]-1659882214915
GPR[EPVS]-1659882214915
========
b.append(")\\s*\\((.*?)\\)");
sb.append(sourceExcerpt);
sb.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882214916
GPR[SPVAP]-1659882214916
GPR[EPVAP]-1659882216694
GPR[EPVS]-1659882216694
========
b.append(")\\s*\\((.*?)\\)");
sb.append(sourceExcerpt);
b.deleteCharAt('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882216695
GPR[SPVAP]-1659882216695
GPR[EPVAP]-1659882218773
GPR[EPVS]-1659882218773
========
b.append(")\\s*\\((.*?)\\)");
b.append(sourceExcerpt);
sb.deleteCharAt('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882218780
GPR[SPVAP]-1659882218780
GPR[EPVAP]-1659882220530
GPR[EPVS]-1659882220531
========
b.append(")\\s*\\((.*?)\\)");
sb.append(sourceExcerpt);
sb.deleteCharAt('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882220532
GPR[SPVAP]-1659882220532
GPR[EPVAP]-1659882222377
GPR[EPVS]-1659882222377
========
b.append(result.externExport);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882222380
GPR[SPVAP]-1659882222380
GPR[EPVAP]-1659882224160
GPR[EPVS]-1659882224160
========
addToken(Token.FUNCTION);
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882224161
GPR[SPVAP]-1659882224161
GPR[EPVAP]-1659882226197
GPR[EPVS]-1659882226197
========
charno=next();
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882226198
GPR[SPVAP]-1659882226198
GPR[EPVAP]-1659882227972
GPR[EPVS]-1659882227972
========
appendListItem(b,"Referenced Classes: "+countOf(TriState.TRUE,TriState.TRUE));
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882227973
GPR[SPVAP]-1659882227973
GPR[EPVAP]-1659882229885
GPR[EPVS]-1659882229885
========
appendListItem(b,"Referenced Functions: "+countOf(TriState.FALSE,TriState.TRUE));
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882229886
GPR[SPVAP]-1659882229886
GPR[EPVAP]-1659882231631
GPR[EPVS]-1659882231631
========
maybeEndStatement();
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882231632
GPR[SPVAP]-1659882231632
GPR[EPVAP]-1659882233437
GPR[EPVS]-1659882233438
========
if(sourceExcerpt.length()==0){
return ;
}
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882233438
GPR[SPVAP]-1659882233438
GPR[EPVAP]-1659882235211
GPR[EPVS]-1659882235211
========
b.append(sourceExcerpt);
b.append('\n');
consumeToken();
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882235213
GPR[SPVAP]-1659882235213
GPR[EPVAP]-1659882237129
GPR[EPVS]-1659882237129
========
if(getCharno()==-1){
charno=0;
}
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882237130
GPR[SPVAP]-1659882237130
GPR[EPVAP]-1659882238959
GPR[EPVS]-1659882238959
========
setCheckForLabel();
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882238960
GPR[SPVAP]-1659882238960
GPR[EPVAP]-1659882240745
GPR[EPVS]-1659882240745
========
b.append(charno);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882240746
GPR[SPVAP]-1659882240746
GPR[EPVAP]-1659882242481
GPR[EPVS]-1659882242482
========
b.multiply(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882242483
GPR[SPVAP]-1659882242483
GPR[EPVAP]-1659882244202
GPR[EPVS]-1659882244202
========
mustMatchToken(Token.LP,"msg.no.paren.switch");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882244205
GPR[SPVAP]-1659882244205
GPR[EPVAP]-1659882246002
GPR[EPVS]-1659882246002
========
mustMatchToken(Token.LP,"msg.no.paren.with");
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882246003
GPR[SPVAP]-1659882246003
GPR[EPVAP]-1659882247788
GPR[EPVS]-1659882247788
========
if(warning){
reportError("msg.catch.unreachable");
}
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882247791
GPR[SPVAP]-1659882247791
GPR[EPVAP]-1659882249913
GPR[EPVS]-1659882249913
========
b.append(sourceExcerpt);
b.multiply('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882249914
GPR[SPVAP]-1659882249915
GPR[EPVAP]-1659882251754
GPR[EPVS]-1659882251754
========
compiler.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882251757
GPR[SPVAP]-1659882251757
GPR[EPVAP]-1659882253616
GPR[EPVS]-1659882253616
========
if(warning){
throw new JsonMLException();
}
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882253618
GPR[SPVAP]-1659882253618
GPR[EPVAP]-1659882255368
GPR[EPVS]-1659882255368
========
setResolvedTypeInternal(getReferencedType());
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882255370
GPR[SPVAP]-1659882255370
GPR[EPVAP]-1659882257142
GPR[EPVS]-1659882257142
========
this.sourceExcerpt=reference;
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882257146
GPR[SPVAP]-1659882257146
GPR[EPVAP]-1659882258873
GPR[EPVS]-1659882258873
========
this.charno=charno;
b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882258874
GPR[SPVAP]-1659882258874
GPR[EPVAP]-1659882260694
GPR[EPVS]-1659882260694
========
keyBuilder.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882260696
GPR[SPVAP]-1659882260696
GPR[EPVAP]-1659882262530
GPR[EPVS]-1659882262530
========
case ' ' :

b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882262532
GPR[SPVAP]-1659882262532
GPR[EPVAP]-1659882264521
GPR[EPVS]-1659882264521
========
format.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882264522
GPR[SPVAP]-1659882264522
GPR[EPVAP]-1659882266279
GPR[EPVS]-1659882266279
========
b.append(sourceExcerpt);
sourceExcerpt!=null?b.append('\n'):null;
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882266280
GPR[SPVAP]-1659882266280
GPR[EPVAP]-1659882267956
GPR[EPVS]-1659882267956
========
case Token.RC :

b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882267958
GPR[SPVAP]-1659882267958
GPR[EPVAP]-1659882269590
GPR[EPVS]-1659882269590
========
case Token.GET :

b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882269592
GPR[SPVAP]-1659882269592
GPR[EPVAP]-1659882271490
GPR[EPVS]-1659882271490
========
case FUNCTION_END :

b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882271492
GPR[SPVAP]-1659882271492
GPR[EPVAP]-1659882273106
GPR[EPVS]-1659882273107
========
case Token.WHILE :

b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882273108
GPR[SPVAP]-1659882273108
GPR[EPVAP]-1659882274814
GPR[EPVS]-1659882274815
========
case '\"' :

b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882274816
GPR[SPVAP]-1659882274816
GPR[EPVAP]-1659882276765
GPR[EPVS]-1659882276765
========
case '>' :

b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882276766
GPR[SPVAP]-1659882276766
GPR[EPVAP]-1659882278390
GPR[EPVS]-1659882278390
========
case '\"' :

sb.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882278391
GPR[SPVAP]-1659882278391
GPR[EPVAP]-1659882280042
GPR[EPVS]-1659882280042
========
case '>' :

sb.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882280043
GPR[SPVAP]-1659882280043
GPR[EPVAP]-1659882281689
GPR[EPVS]-1659882281689
========
case '\\' :

b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882281690
GPR[SPVAP]-1659882281690
GPR[EPVAP]-1659882283710
GPR[EPVS]-1659882283710
========
default :

b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882283712
GPR[SPVAP]-1659882283712
GPR[EPVAP]-1659882285331
GPR[EPVS]-1659882285331
========
case '-' :

b.append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();

========
MM Copying to MM
GPR[SPVS]-1659882285332
GPR[SPVAP]-1659882285332
GPR[EPVAP]-1659882287680
GPR[EPVS]-1659882287680
GPR[ESUN]-1659882287680
GPR[SSUN]-1659882287680
com.google.javascript.jscomp.LightweightMessageFormatter,91
GPR[ESUN]-1659882288463
GPR[SSUN]-1659882288463
com.google.javascript.jscomp.LightweightMessageFormatter,92
========
if(Character.isWhitespace(c)){
sb.append(c);
}else {
sb.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882290816
GPR[SPVAP]-1659882290816
GPR[EPVAP]-1659882294390
GPR[EPVS]-1659882294390
========
if(Character.isWhitespace(c)){
sb.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882294392
GPR[SPVAP]-1659882294392
GPR[EPVAP]-1659882296825
GPR[EPVS]-1659882296826
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
sb.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882296827
GPR[SPVAP]-1659882296827
GPR[EPVAP]-1659882299276
GPR[EPVS]-1659882299276
========
if(Character.isSupplementaryCodePoint(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882299279
GPR[SPVAP]-1659882299279
GPR[EPVAP]-1659882306707
GPR[SPVATF]-1659882306707
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882310137
GPR[EPVS]-1659882310137
========
c.append("\\u").append(HEX_CHARS[(charno>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882310138
GPR[SPVAP]-1659882310138
GPR[EPVAP]-1659882311918
GPR[EPVS]-1659882311918
========
c.append("\\u").append(HEX_CHARS[(charno>>>12)&0xf]).append(HEX_CHARS[(codePoint>>>8)&0xf]).append(HEX_CHARS[(codePoint>>>4)&0xf]).append(HEX_CHARS[codePoint&0xf]);
if(Character.isSupplementaryCodePoint(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882311919
GPR[SPVAP]-1659882311919
GPR[EPVAP]-1659882313670
GPR[EPVS]-1659882313670
========
if(Character.isWhitespace(c)){
b.append(getReturnSlot().getType().toString());
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882313672
GPR[SPVAP]-1659882313672
GPR[EPVAP]-1659882315481
GPR[EPVS]-1659882315481
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(getReturnSlot().getType().toString());
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882315482
GPR[SPVAP]-1659882315482
GPR[EPVAP]-1659882317442
GPR[EPVS]-1659882317442
========
b.append(")");
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882317444
GPR[SPVAP]-1659882317444
GPR[EPVAP]-1659882321122
GPR[SPVATF]-1659882321122
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882324419
GPR[EPVS]-1659882324419
========
if(Character.isWhitespace(c)){
out.append(c);
}else {
out.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882324421
GPR[SPVAP]-1659882324421
GPR[EPVAP]-1659882326178
GPR[EPVS]-1659882326178
========
if(Character.isWhitespace(c)){
out.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882326179
GPR[SPVAP]-1659882326179
GPR[EPVAP]-1659882327919
GPR[EPVS]-1659882327919
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
out.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882327920
GPR[SPVAP]-1659882327920
GPR[EPVAP]-1659882329670
GPR[EPVS]-1659882329670
========
if(Character.isWhitespace(c)){
new StringBuilder().append(" - FUNCTIONS: ");
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882329671
GPR[SPVAP]-1659882329671
GPR[EPVAP]-1659882333278
GPR[SPVATF]-1659882333278
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882336895
GPR[EPVS]-1659882336895
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
new StringBuilder().append(" - FUNCTIONS: ");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882336896
GPR[SPVAP]-1659882336896
GPR[EPVAP]-1659882340613
GPR[SPVATF]-1659882340614
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882344561
GPR[EPVS]-1659882344561
========
if(Character.isWhitespace(c)){
new StringBuilder().append(" - FUNCTIONS: ");
b.append(c);
}else {
new StringBuilder().append(" - FUNCTIONS: ");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882344562
GPR[SPVAP]-1659882344562
GPR[EPVAP]-1659882348376
GPR[SPVATF]-1659882348376
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882352354
GPR[EPVS]-1659882352354
========
if(Character.isWhitespace(c)){
message.append(c);
}else {
message.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882352356
GPR[SPVAP]-1659882352356
GPR[EPVAP]-1659882354456
GPR[EPVS]-1659882354456
========
if(Character.isWhitespace(c)){
message.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882354458
GPR[SPVAP]-1659882354458
GPR[EPVAP]-1659882356188
GPR[EPVS]-1659882356188
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
message.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882356190
GPR[SPVAP]-1659882356190
GPR[EPVAP]-1659882358232
GPR[EPVS]-1659882358232
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882358234
GPR[SPVAP]-1659882358234
GPR[EPVAP]-1659882360021
GPR[EPVS]-1659882360021
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882360022
GPR[SPVAP]-1659882360022
GPR[EPVAP]-1659882361786
GPR[EPVS]-1659882361786
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882361787
GPR[SPVAP]-1659882361787
GPR[EPVAP]-1659882363522
GPR[EPVS]-1659882363522
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882363524
GPR[SPVAP]-1659882363524
GPR[EPVAP]-1659882367394
GPR[SPVATF]-1659882367394
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882371413
GPR[EPVS]-1659882371413
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882371414
GPR[SPVAP]-1659882371414
GPR[EPVAP]-1659882375167
GPR[SPVATF]-1659882375167
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882378949
GPR[EPVS]-1659882378949
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882378950
GPR[SPVAP]-1659882378950
GPR[EPVAP]-1659882382572
GPR[SPVATF]-1659882382572
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882386271
GPR[EPVS]-1659882386271
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882386272
GPR[SPVAP]-1659882386272
GPR[EPVAP]-1659882389924
GPR[SPVATF]-1659882389924
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882393233
GPR[EPVS]-1659882393233
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882393234
GPR[SPVAP]-1659882393234
GPR[EPVAP]-1659882397153
GPR[SPVATF]-1659882397153
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882401173
GPR[EPVS]-1659882401173
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882401174
GPR[SPVAP]-1659882401174
GPR[EPVAP]-1659882404973
GPR[SPVATF]-1659882404973
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882408618
GPR[EPVS]-1659882408618
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882408620
GPR[SPVAP]-1659882408620
GPR[EPVAP]-1659882410631
GPR[EPVS]-1659882410631
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
builder.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882410632
GPR[SPVAP]-1659882410632
GPR[EPVAP]-1659882412399
GPR[EPVS]-1659882412399
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882412400
GPR[SPVAP]-1659882412400
GPR[EPVAP]-1659882414432
GPR[EPVS]-1659882414432
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882414433
GPR[SPVAP]-1659882414433
GPR[EPVAP]-1659882416164
GPR[EPVS]-1659882416164
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882416165
GPR[SPVAP]-1659882416165
GPR[EPVAP]-1659882417889
GPR[EPVS]-1659882417889
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882417891
GPR[SPVAP]-1659882417891
GPR[EPVAP]-1659882420003
GPR[EPVS]-1659882420003
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882420004
GPR[SPVAP]-1659882420004
GPR[EPVAP]-1659882421960
GPR[EPVS]-1659882421960
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882421961
GPR[SPVAP]-1659882421961
GPR[EPVAP]-1659882423742
GPR[EPVS]-1659882423742
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882423743
GPR[SPVAP]-1659882423743
GPR[EPVAP]-1659882425648
GPR[EPVS]-1659882425648
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882425649
GPR[SPVAP]-1659882425649
GPR[EPVAP]-1659882427380
GPR[EPVS]-1659882427380
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882427380
GPR[SPVAP]-1659882427380
GPR[EPVAP]-1659882429313
GPR[EPVS]-1659882429313
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882429314
GPR[SPVAP]-1659882429314
GPR[EPVAP]-1659882431332
GPR[EPVS]-1659882431332
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882431334
GPR[SPVAP]-1659882431334
GPR[EPVAP]-1659882435072
GPR[SPVATF]-1659882435072
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882438330
GPR[EPVS]-1659882438330
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882438331
GPR[SPVAP]-1659882438331
GPR[EPVAP]-1659882442266
GPR[SPVATF]-1659882442267
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882446106
GPR[EPVS]-1659882446106
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882446107
GPR[SPVAP]-1659882446107
GPR[EPVAP]-1659882450296
GPR[SPVATF]-1659882450296
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882454046
GPR[EPVS]-1659882454046
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882454047
GPR[SPVAP]-1659882454047
GPR[EPVAP]-1659882457682
GPR[SPVATF]-1659882457682
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882461032
GPR[EPVS]-1659882461032
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882461033
GPR[SPVAP]-1659882461033
GPR[EPVAP]-1659882464703
GPR[SPVATF]-1659882464704
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882468129
GPR[EPVS]-1659882468129
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882468130
GPR[SPVAP]-1659882468130
GPR[EPVAP]-1659882472053
GPR[SPVATF]-1659882472053
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882475352
GPR[EPVS]-1659882475352
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882475353
GPR[SPVAP]-1659882475353
GPR[EPVAP]-1659882479096
GPR[SPVATF]-1659882479096
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882482367
GPR[EPVS]-1659882482367
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append(c);
}else {
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882482368
GPR[SPVAP]-1659882482368
GPR[EPVAP]-1659882486193
GPR[SPVATF]-1659882486193
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882489726
GPR[EPVS]-1659882489726
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882489727
GPR[SPVAP]-1659882489727
GPR[EPVAP]-1659882493726
GPR[SPVATF]-1659882493726
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882496988
GPR[EPVS]-1659882496988
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882496990
GPR[SPVAP]-1659882496990
GPR[EPVAP]-1659882500623
GPR[SPVATF]-1659882500623
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882504139
GPR[EPVS]-1659882504139
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882504141
GPR[SPVAP]-1659882504141
GPR[EPVAP]-1659882507878
GPR[SPVATF]-1659882507878
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882511458
GPR[EPVS]-1659882511458
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882511460
GPR[SPVAP]-1659882511460
GPR[EPVAP]-1659882515513
GPR[SPVATF]-1659882515513
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882519158
GPR[EPVS]-1659882519158
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882519159
GPR[SPVAP]-1659882519159
GPR[EPVAP]-1659882522850
GPR[SPVATF]-1659882522850
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882526595
GPR[EPVS]-1659882526595
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882526596
GPR[SPVAP]-1659882526596
GPR[EPVAP]-1659882530502
GPR[SPVATF]-1659882530502
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882534306
GPR[EPVS]-1659882534306
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882534307
GPR[SPVAP]-1659882534307
GPR[EPVAP]-1659882538050
GPR[SPVATF]-1659882538050
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882541971
GPR[EPVS]-1659882541971
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882541973
GPR[SPVAP]-1659882541973
GPR[EPVAP]-1659882543734
GPR[EPVS]-1659882543734
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
builder.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882543735
GPR[SPVAP]-1659882543735
GPR[EPVAP]-1659882546132
GPR[EPVS]-1659882546132
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882546133
GPR[SPVAP]-1659882546133
GPR[EPVAP]-1659882547879
GPR[EPVS]-1659882547879
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882547880
GPR[SPVAP]-1659882547880
GPR[EPVAP]-1659882549618
GPR[EPVS]-1659882549618
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882549619
GPR[SPVAP]-1659882549619
GPR[EPVAP]-1659882551378
GPR[EPVS]-1659882551378
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882551380
GPR[SPVAP]-1659882551380
GPR[EPVAP]-1659882553145
GPR[EPVS]-1659882553145
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
builder.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882553146
GPR[SPVAP]-1659882553146
GPR[EPVAP]-1659882554894
GPR[EPVS]-1659882554894
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882554896
GPR[SPVAP]-1659882554896
GPR[EPVAP]-1659882556705
GPR[EPVS]-1659882556705
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882556706
GPR[SPVAP]-1659882556706
GPR[EPVAP]-1659882558474
GPR[EPVS]-1659882558474
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882558476
GPR[SPVAP]-1659882558476
GPR[EPVAP]-1659882560310
GPR[EPVS]-1659882560310
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882560311
GPR[SPVAP]-1659882560311
GPR[EPVAP]-1659882562110
GPR[EPVS]-1659882562110
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882562111
GPR[SPVAP]-1659882562111
GPR[EPVAP]-1659882563841
GPR[EPVS]-1659882563841
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
builder.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882563842
GPR[SPVAP]-1659882563842
GPR[EPVAP]-1659882565762
GPR[EPVS]-1659882565762
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
builder.append(c);
}else {
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882565763
GPR[SPVAP]-1659882565763
GPR[EPVAP]-1659882567766
GPR[EPVS]-1659882567766
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882567768
GPR[SPVAP]-1659882567768
GPR[EPVAP]-1659882569551
GPR[EPVS]-1659882569551
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882569552
GPR[SPVAP]-1659882569552
GPR[EPVAP]-1659882571318
GPR[EPVS]-1659882571318
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882571319
GPR[SPVAP]-1659882571319
GPR[EPVAP]-1659882573264
GPR[EPVS]-1659882573264
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882573265
GPR[SPVAP]-1659882573265
GPR[EPVAP]-1659882575160
GPR[EPVS]-1659882575160
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882575161
GPR[SPVAP]-1659882575161
GPR[EPVAP]-1659882577187
GPR[EPVS]-1659882577188
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882577189
GPR[SPVAP]-1659882577189
GPR[EPVAP]-1659882579133
GPR[EPVS]-1659882579133
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882579134
GPR[SPVAP]-1659882579134
GPR[EPVAP]-1659882580918
GPR[EPVS]-1659882580918
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882580919
GPR[SPVAP]-1659882580919
GPR[EPVAP]-1659882582674
GPR[EPVS]-1659882582674
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882582676
GPR[SPVAP]-1659882582676
GPR[EPVAP]-1659882584534
GPR[EPVS]-1659882584534
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882584536
GPR[SPVAP]-1659882584536
GPR[EPVAP]-1659882586552
GPR[EPVS]-1659882586552
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882586553
GPR[SPVAP]-1659882586553
GPR[EPVAP]-1659882588297
GPR[EPVS]-1659882588297
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882588298
GPR[SPVAP]-1659882588298
GPR[EPVAP]-1659882590144
GPR[EPVS]-1659882590144
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882590145
GPR[SPVAP]-1659882590145
GPR[EPVAP]-1659882592109
GPR[EPVS]-1659882592109
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882592110
GPR[SPVAP]-1659882592110
GPR[EPVAP]-1659882594183
GPR[EPVS]-1659882594183
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append(c);
}else {
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882594184
GPR[SPVAP]-1659882594184
GPR[EPVAP]-1659882596093
GPR[EPVS]-1659882596093
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882596095
GPR[SPVAP]-1659882596095
GPR[EPVAP]-1659882597823
GPR[EPVS]-1659882597823
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882597824
GPR[SPVAP]-1659882597824
GPR[EPVAP]-1659882599575
GPR[EPVS]-1659882599575
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882599576
GPR[SPVAP]-1659882599576
GPR[EPVAP]-1659882601692
GPR[EPVS]-1659882601692
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882601700
GPR[SPVAP]-1659882601700
GPR[EPVAP]-1659882604198
GPR[EPVS]-1659882604198
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882604205
GPR[SPVAP]-1659882604205
GPR[EPVAP]-1659882606307
GPR[EPVS]-1659882606307
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882606308
GPR[SPVAP]-1659882606308
GPR[EPVAP]-1659882608034
GPR[EPVS]-1659882608034
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882608035
GPR[SPVAP]-1659882608035
GPR[EPVAP]-1659882609776
GPR[EPVS]-1659882609776
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882609777
GPR[SPVAP]-1659882609777
GPR[EPVAP]-1659882613570
GPR[SPVATF]-1659882613570
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882618113
GPR[EPVS]-1659882618113
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882618114
GPR[SPVAP]-1659882618114
GPR[EPVAP]-1659882621934
GPR[SPVATF]-1659882621934
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882625313
GPR[EPVS]-1659882625313
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append(c);
}else {
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882625314
GPR[SPVAP]-1659882625314
GPR[EPVAP]-1659882629085
GPR[SPVATF]-1659882629085
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882632409
GPR[EPVS]-1659882632409
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882632410
GPR[SPVAP]-1659882632410
GPR[EPVAP]-1659882636046
GPR[SPVATF]-1659882636046
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882639487
GPR[EPVS]-1659882639487
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882639488
GPR[SPVAP]-1659882639488
GPR[EPVAP]-1659882643247
GPR[SPVATF]-1659882643247
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882647195
GPR[EPVS]-1659882647195
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882647196
GPR[SPVAP]-1659882647196
GPR[EPVAP]-1659882651149
GPR[SPVATF]-1659882651150
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882654476
GPR[EPVS]-1659882654476
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882654477
GPR[SPVAP]-1659882654477
GPR[EPVAP]-1659882658101
GPR[SPVATF]-1659882658101
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882661379
GPR[EPVS]-1659882661379
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882661380
GPR[SPVAP]-1659882661380
GPR[EPVAP]-1659882665280
GPR[SPVATF]-1659882665280
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882669307
GPR[EPVS]-1659882669307
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882669308
GPR[SPVAP]-1659882669308
GPR[EPVAP]-1659882672966
GPR[SPVATF]-1659882672966
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882676514
GPR[EPVS]-1659882676514
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882676515
GPR[SPVAP]-1659882676515
GPR[EPVAP]-1659882680466
GPR[SPVATF]-1659882680466
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882683792
GPR[EPVS]-1659882683792
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882683794
GPR[SPVAP]-1659882683794
GPR[EPVAP]-1659882687573
GPR[SPVATF]-1659882687574
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882691122
GPR[EPVS]-1659882691122
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882691123
GPR[SPVAP]-1659882691123
GPR[EPVAP]-1659882694735
GPR[SPVATF]-1659882694735
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882698453
GPR[EPVS]-1659882698453
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882698454
GPR[SPVAP]-1659882698454
GPR[EPVAP]-1659882702501
GPR[SPVATF]-1659882702501
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882706006
GPR[EPVS]-1659882706006
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882706008
GPR[SPVAP]-1659882706008
GPR[EPVAP]-1659882709634
GPR[SPVATF]-1659882709635
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882713734
GPR[EPVS]-1659882713734
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882713736
GPR[SPVAP]-1659882713736
GPR[EPVAP]-1659882717513
GPR[SPVATF]-1659882717513
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882721155
GPR[EPVS]-1659882721155
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882721157
GPR[SPVAP]-1659882721157
GPR[EPVAP]-1659882724884
GPR[SPVATF]-1659882724884
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882728204
GPR[EPVS]-1659882728204
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882728206
GPR[SPVAP]-1659882728206
GPR[EPVAP]-1659882732163
GPR[SPVATF]-1659882732163
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882735924
GPR[EPVS]-1659882735924
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882735925
GPR[SPVAP]-1659882735925
GPR[EPVAP]-1659882739862
GPR[SPVATF]-1659882739862
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882743367
GPR[EPVS]-1659882743367
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882743368
GPR[SPVAP]-1659882743368
GPR[EPVAP]-1659882747050
GPR[SPVATF]-1659882747050
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882750596
GPR[EPVS]-1659882750596
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882750598
GPR[SPVAP]-1659882750598
GPR[EPVAP]-1659882754354
GPR[SPVATF]-1659882754354
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882757799
GPR[EPVS]-1659882757799
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
builder.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882757800
GPR[SPVAP]-1659882757800
GPR[EPVAP]-1659882759826
GPR[EPVS]-1659882759826
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882759827
GPR[SPVAP]-1659882759827
GPR[EPVAP]-1659882761609
GPR[EPVS]-1659882761609
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882761610
GPR[SPVAP]-1659882761610
GPR[EPVAP]-1659882763445
GPR[EPVS]-1659882763446
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882763447
GPR[SPVAP]-1659882763447
GPR[EPVAP]-1659882765533
GPR[EPVS]-1659882765533
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882765534
GPR[SPVAP]-1659882765534
GPR[EPVAP]-1659882767550
GPR[EPVS]-1659882767550
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882767551
GPR[SPVAP]-1659882767551
GPR[EPVAP]-1659882769618
GPR[EPVS]-1659882769618
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
builder.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882769619
GPR[SPVAP]-1659882769619
GPR[EPVAP]-1659882771380
GPR[EPVS]-1659882771380
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
builder.append(c);
}else {
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882771381
GPR[SPVAP]-1659882771381
GPR[EPVAP]-1659882773418
GPR[EPVS]-1659882773418
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882773419
GPR[SPVAP]-1659882773419
GPR[EPVAP]-1659882775148
GPR[EPVS]-1659882775148
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882775149
GPR[SPVAP]-1659882775149
GPR[EPVAP]-1659882777144
GPR[EPVS]-1659882777144
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882777145
GPR[SPVAP]-1659882777145
GPR[EPVAP]-1659882779012
GPR[EPVS]-1659882779012
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882779018
GPR[SPVAP]-1659882779018
GPR[EPVAP]-1659882781571
GPR[EPVS]-1659882781571
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882781574
GPR[SPVAP]-1659882781574
GPR[EPVAP]-1659882783602
GPR[EPVS]-1659882783602
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882783603
GPR[SPVAP]-1659882783603
GPR[EPVAP]-1659882785383
GPR[EPVS]-1659882785383
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882785385
GPR[SPVAP]-1659882785385
GPR[EPVAP]-1659882787158
GPR[EPVS]-1659882787158
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882787160
GPR[SPVAP]-1659882787160
GPR[EPVAP]-1659882788918
GPR[EPVS]-1659882788918
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
builder.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882788919
GPR[SPVAP]-1659882788919
GPR[EPVAP]-1659882790683
GPR[EPVS]-1659882790683
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
builder.append(c);
}else {
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882790685
GPR[SPVAP]-1659882790685
GPR[EPVAP]-1659882792504
GPR[EPVS]-1659882792504
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882792505
GPR[SPVAP]-1659882792505
GPR[EPVAP]-1659882794271
GPR[EPVS]-1659882794271
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882794272
GPR[SPVAP]-1659882794272
GPR[EPVAP]-1659882796005
GPR[EPVS]-1659882796005
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882796006
GPR[SPVAP]-1659882796006
GPR[EPVAP]-1659882798166
GPR[EPVS]-1659882798166
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882798168
GPR[SPVAP]-1659882798168
GPR[EPVAP]-1659882799960
GPR[EPVS]-1659882799960
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882799961
GPR[SPVAP]-1659882799961
GPR[EPVAP]-1659882801722
GPR[EPVS]-1659882801722
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882801723
GPR[SPVAP]-1659882801723
GPR[EPVAP]-1659882803732
GPR[EPVS]-1659882803732
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882803733
GPR[SPVAP]-1659882803733
GPR[EPVAP]-1659882805474
GPR[EPVS]-1659882805474
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882805475
GPR[SPVAP]-1659882805475
GPR[EPVAP]-1659882807194
GPR[EPVS]-1659882807194
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882807196
GPR[SPVAP]-1659882807196
GPR[EPVAP]-1659882808943
GPR[EPVS]-1659882808943
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882808944
GPR[SPVAP]-1659882808944
GPR[EPVAP]-1659882810672
GPR[EPVS]-1659882810672
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882810673
GPR[SPVAP]-1659882810673
GPR[EPVAP]-1659882812411
GPR[EPVS]-1659882812411
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
builder.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882812412
GPR[SPVAP]-1659882812412
GPR[EPVAP]-1659882814155
GPR[EPVS]-1659882814155
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
builder.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882814156
GPR[SPVAP]-1659882814156
GPR[EPVAP]-1659882816096
GPR[EPVS]-1659882816096
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882816097
GPR[SPVAP]-1659882816097
GPR[EPVAP]-1659882817837
GPR[EPVS]-1659882817838
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882817839
GPR[SPVAP]-1659882817839
GPR[EPVAP]-1659882819625
GPR[EPVS]-1659882819625
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

builder.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882819626
GPR[SPVAP]-1659882819626
GPR[EPVAP]-1659882821654
GPR[EPVS]-1659882821654
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882821655
GPR[SPVAP]-1659882821655
GPR[EPVAP]-1659882823637
GPR[EPVS]-1659882823637
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882823639
GPR[SPVAP]-1659882823639
GPR[EPVAP]-1659882825384
GPR[EPVS]-1659882825384
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882825385
GPR[SPVAP]-1659882825385
GPR[EPVAP]-1659882827131
GPR[EPVS]-1659882827131
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append(c);
}else {
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882827132
GPR[SPVAP]-1659882827132
GPR[EPVAP]-1659882828965
GPR[EPVS]-1659882828965
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882828966
GPR[SPVAP]-1659882828966
GPR[EPVAP]-1659882830904
GPR[EPVS]-1659882830904
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882830905
GPR[SPVAP]-1659882830905
GPR[EPVAP]-1659882832646
GPR[EPVS]-1659882832646
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882832647
GPR[SPVAP]-1659882832648
GPR[EPVAP]-1659882834569
GPR[EPVS]-1659882834569
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882834570
GPR[SPVAP]-1659882834570
GPR[EPVAP]-1659882836579
GPR[EPVS]-1659882836580
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882836581
GPR[SPVAP]-1659882836581
GPR[EPVAP]-1659882838584
GPR[EPVS]-1659882838584
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882838585
GPR[SPVAP]-1659882838585
GPR[EPVAP]-1659882840403
GPR[EPVS]-1659882840403
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882840404
GPR[SPVAP]-1659882840404
GPR[EPVAP]-1659882842138
GPR[EPVS]-1659882842138
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882842139
GPR[SPVAP]-1659882842139
GPR[EPVAP]-1659882843957
GPR[EPVS]-1659882843957
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882843958
GPR[SPVAP]-1659882843958
GPR[EPVAP]-1659882845726
GPR[EPVS]-1659882845726
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882845727
GPR[SPVAP]-1659882845727
GPR[EPVAP]-1659882847553
GPR[EPVS]-1659882847553
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882847554
GPR[SPVAP]-1659882847554
GPR[EPVAP]-1659882849355
GPR[EPVS]-1659882849355
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882849357
GPR[SPVAP]-1659882849357
GPR[EPVAP]-1659882851313
GPR[EPVS]-1659882851313
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882851314
GPR[SPVAP]-1659882851314
GPR[EPVAP]-1659882853554
GPR[EPVS]-1659882853554
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882853555
GPR[SPVAP]-1659882853555
GPR[EPVAP]-1659882855555
GPR[EPVS]-1659882855555
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882855556
GPR[SPVAP]-1659882855556
GPR[EPVAP]-1659882857558
GPR[EPVS]-1659882857558
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882857560
GPR[SPVAP]-1659882857560
GPR[EPVAP]-1659882859303
GPR[EPVS]-1659882859303
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882859304
GPR[SPVAP]-1659882859304
GPR[EPVAP]-1659882861026
GPR[EPVS]-1659882861026
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882861027
GPR[SPVAP]-1659882861027
GPR[EPVAP]-1659882864950
GPR[SPVATF]-1659882864950
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882868586
GPR[EPVS]-1659882868586
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882868587
GPR[SPVAP]-1659882868587
GPR[EPVAP]-1659882872425
GPR[SPVATF]-1659882872425
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882875733
GPR[EPVS]-1659882875733
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882875734
GPR[SPVAP]-1659882875734
GPR[EPVAP]-1659882879491
GPR[SPVATF]-1659882879491
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882882979
GPR[EPVS]-1659882882979
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882882980
GPR[SPVAP]-1659882882980
GPR[EPVAP]-1659882886747
GPR[SPVATF]-1659882886747
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882890052
GPR[EPVS]-1659882890052
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882890053
GPR[SPVAP]-1659882890053
GPR[EPVAP]-1659882894094
GPR[SPVATF]-1659882894094
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882898079
GPR[EPVS]-1659882898079
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");
b.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882898080
GPR[SPVAP]-1659882898081
GPR[EPVAP]-1659882902110
GPR[SPVATF]-1659882902110
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882905735
GPR[EPVS]-1659882905735
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882905736
GPR[SPVAP]-1659882905736
GPR[EPVAP]-1659882909365
GPR[SPVATF]-1659882909365
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882913156
GPR[EPVS]-1659882913156
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882913157
GPR[SPVAP]-1659882913157
GPR[EPVAP]-1659882916950
GPR[SPVATF]-1659882916950
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882920485
GPR[EPVS]-1659882920485
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882920486
GPR[SPVAP]-1659882920486
GPR[EPVAP]-1659882924286
GPR[SPVATF]-1659882924286
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882928182
GPR[EPVS]-1659882928182
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882928183
GPR[SPVAP]-1659882928183
GPR[EPVAP]-1659882932297
GPR[SPVATF]-1659882932297
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882936318
GPR[EPVS]-1659882936318
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882936320
GPR[SPVAP]-1659882936320
GPR[EPVAP]-1659882940138
GPR[SPVATF]-1659882940138
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882944545
GPR[EPVS]-1659882944545
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882944551
GPR[SPVAP]-1659882944551
GPR[EPVAP]-1659882948653
GPR[SPVATF]-1659882948653
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882951938
GPR[EPVS]-1659882951938
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882951939
GPR[SPVAP]-1659882951939
GPR[EPVAP]-1659882955785
GPR[SPVATF]-1659882955785
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882959079
GPR[EPVS]-1659882959079
========
if(Character.isWhitespace(c)){
b.append("</ul>\n");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882959080
GPR[SPVAP]-1659882959080
GPR[EPVAP]-1659882962786
GPR[SPVATF]-1659882962786
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882966390
GPR[EPVS]-1659882966390
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>\n");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>\n");
b.append("<ul>");
b.append("</ul>\n");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882966391
GPR[SPVAP]-1659882966391
GPR[EPVAP]-1659882970115
GPR[SPVATF]-1659882970115
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882974003
GPR[EPVS]-1659882974003
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882974005
GPR[SPVAP]-1659882974005
GPR[EPVAP]-1659882977684
GPR[SPVATF]-1659882977684
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882981404
GPR[EPVS]-1659882981404
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882981405
GPR[SPVAP]-1659882981405
GPR[EPVAP]-1659882985052
GPR[SPVATF]-1659882985052
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882988606
GPR[EPVS]-1659882988606
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882988607
GPR[SPVAP]-1659882988607
GPR[EPVAP]-1659882992403
GPR[SPVATF]-1659882992403
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659882996163
GPR[EPVS]-1659882996163
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659882996164
GPR[SPVAP]-1659882996164
GPR[EPVAP]-1659883000046
GPR[SPVATF]-1659883000046
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883003895
GPR[EPVS]-1659883003895
========
if(Character.isWhitespace(c)){
b.append("</ul>");
builder.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883003896
GPR[SPVAP]-1659883003896
GPR[EPVAP]-1659883005844
GPR[EPVS]-1659883005844
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883005845
GPR[SPVAP]-1659883005845
GPR[EPVAP]-1659883007865
GPR[EPVS]-1659883007865
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883007867
GPR[SPVAP]-1659883007867
GPR[EPVAP]-1659883009653
GPR[EPVS]-1659883009653
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883009654
GPR[SPVAP]-1659883009654
GPR[EPVAP]-1659883012121
GPR[EPVS]-1659883012121
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883012122
GPR[SPVAP]-1659883012122
GPR[EPVAP]-1659883013894
GPR[EPVS]-1659883013894
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883013895
GPR[SPVAP]-1659883013895
GPR[EPVAP]-1659883015628
GPR[EPVS]-1659883015628
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883015629
GPR[SPVAP]-1659883015629
GPR[EPVAP]-1659883017370
GPR[EPVS]-1659883017370
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883017371
GPR[SPVAP]-1659883017371
GPR[EPVAP]-1659883019138
GPR[EPVS]-1659883019138
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883019139
GPR[SPVAP]-1659883019139
GPR[EPVAP]-1659883022903
GPR[SPVATF]-1659883022903
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883026814
GPR[EPVS]-1659883026814
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883026815
GPR[SPVAP]-1659883026815
GPR[EPVAP]-1659883030854
GPR[SPVATF]-1659883030854
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883034235
GPR[EPVS]-1659883034235
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883034236
GPR[SPVAP]-1659883034236
GPR[EPVAP]-1659883037882
GPR[SPVATF]-1659883037882
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883041514
GPR[EPVS]-1659883041514
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883041515
GPR[SPVAP]-1659883041515
GPR[EPVAP]-1659883045459
GPR[SPVATF]-1659883045459
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883048824
GPR[EPVS]-1659883048824
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883048825
GPR[SPVAP]-1659883048825
GPR[EPVAP]-1659883052736
GPR[SPVATF]-1659883052736
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883056090
GPR[EPVS]-1659883056090
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883056091
GPR[SPVAP]-1659883056091
GPR[EPVAP]-1659883060102
GPR[SPVATF]-1659883060102
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883063782
GPR[EPVS]-1659883063782
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append(c);
}else {
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883063784
GPR[SPVAP]-1659883063784
GPR[EPVAP]-1659883067615
GPR[SPVATF]-1659883067616
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883071331
GPR[EPVS]-1659883071331
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883071332
GPR[SPVAP]-1659883071332
GPR[EPVAP]-1659883075014
GPR[SPVATF]-1659883075014
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883078999
GPR[EPVS]-1659883078999
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883079000
GPR[SPVAP]-1659883079000
GPR[EPVAP]-1659883082965
GPR[SPVATF]-1659883082965
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883086877
GPR[EPVS]-1659883086877
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883086878
GPR[SPVAP]-1659883086878
GPR[EPVAP]-1659883090619
GPR[SPVATF]-1659883090619
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883093908
GPR[EPVS]-1659883093908
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883093909
GPR[SPVAP]-1659883093909
GPR[EPVAP]-1659883097789
GPR[SPVATF]-1659883097789
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883101575
GPR[EPVS]-1659883101575
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883101576
GPR[SPVAP]-1659883101576
GPR[EPVAP]-1659883105193
GPR[SPVATF]-1659883105193
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883109435
GPR[EPVS]-1659883109435
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883109436
GPR[SPVAP]-1659883109436
GPR[EPVAP]-1659883113186
GPR[SPVATF]-1659883113186
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883116892
GPR[EPVS]-1659883116892
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883116893
GPR[SPVAP]-1659883116893
GPR[EPVAP]-1659883120783
GPR[SPVATF]-1659883120783
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883124011
GPR[EPVS]-1659883124011
========
if(Character.isWhitespace(c)){
b.append("</ul>");
builder.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883124012
GPR[SPVAP]-1659883124012
GPR[EPVAP]-1659883126028
GPR[EPVS]-1659883126028
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883126029
GPR[SPVAP]-1659883126029
GPR[EPVAP]-1659883127965
GPR[EPVS]-1659883127965
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883127966
GPR[SPVAP]-1659883127966
GPR[EPVAP]-1659883129721
GPR[EPVS]-1659883129722
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883129723
GPR[SPVAP]-1659883129723
GPR[EPVAP]-1659883131693
GPR[EPVS]-1659883131693
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
builder.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883131695
GPR[SPVAP]-1659883131695
GPR[EPVAP]-1659883133668
GPR[EPVS]-1659883133669
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883133670
GPR[SPVAP]-1659883133670
GPR[EPVAP]-1659883135422
GPR[EPVS]-1659883135422
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883135423
GPR[SPVAP]-1659883135423
GPR[EPVAP]-1659883137390
GPR[EPVS]-1659883137390
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883137391
GPR[SPVAP]-1659883137391
GPR[EPVAP]-1659883139128
GPR[EPVS]-1659883139128
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883139129
GPR[SPVAP]-1659883139129
GPR[EPVAP]-1659883140914
GPR[EPVS]-1659883140914
========
if(Character.isWhitespace(c)){
b.append("</ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883140915
GPR[SPVAP]-1659883140915
GPR[EPVAP]-1659883142658
GPR[EPVS]-1659883142658
========
if(Character.isWhitespace(c)){
b.append("</ul>");
builder.append(c);
}else {
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883142659
GPR[SPVAP]-1659883142659
GPR[EPVAP]-1659883144417
GPR[EPVS]-1659883144417
========
if(Character.isWhitespace(c)){
b.append("</ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883144418
GPR[SPVAP]-1659883144418
GPR[EPVAP]-1659883146344
GPR[EPVS]-1659883146344
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883146345
GPR[SPVAP]-1659883146345
GPR[EPVAP]-1659883148368
GPR[EPVS]-1659883148368
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883148370
GPR[SPVAP]-1659883148370
GPR[EPVAP]-1659883150281
GPR[EPVS]-1659883150281
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883150282
GPR[SPVAP]-1659883150282
GPR[EPVAP]-1659883152297
GPR[EPVS]-1659883152297
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883152299
GPR[SPVAP]-1659883152299
GPR[EPVAP]-1659883154345
GPR[EPVS]-1659883154345
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883154347
GPR[SPVAP]-1659883154347
GPR[EPVAP]-1659883156323
GPR[EPVS]-1659883156323
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883156324
GPR[SPVAP]-1659883156324
GPR[EPVAP]-1659883158421
GPR[EPVS]-1659883158421
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883158423
GPR[SPVAP]-1659883158423
GPR[EPVAP]-1659883160378
GPR[EPVS]-1659883160378
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883160379
GPR[SPVAP]-1659883160379
GPR[EPVAP]-1659883162192
GPR[EPVS]-1659883162192
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883162193
GPR[SPVAP]-1659883162193
GPR[EPVAP]-1659883163924
GPR[EPVS]-1659883163924
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883163925
GPR[SPVAP]-1659883163925
GPR[EPVAP]-1659883165665
GPR[EPVS]-1659883165665
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883165666
GPR[SPVAP]-1659883165666
GPR[EPVAP]-1659883167403
GPR[EPVS]-1659883167403
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883167404
GPR[SPVAP]-1659883167404
GPR[EPVAP]-1659883169144
GPR[EPVS]-1659883169144
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append(c);
}else {
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883169145
GPR[SPVAP]-1659883169145
GPR[EPVAP]-1659883170883
GPR[EPVS]-1659883170883
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883170884
GPR[SPVAP]-1659883170884
GPR[EPVAP]-1659883172940
GPR[EPVS]-1659883172940
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883172941
GPR[SPVAP]-1659883172941
GPR[EPVAP]-1659883174838
GPR[EPVS]-1659883174838
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883174839
GPR[SPVAP]-1659883174839
GPR[EPVAP]-1659883176821
GPR[EPVS]-1659883176821
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883176822
GPR[SPVAP]-1659883176822
GPR[EPVAP]-1659883178828
GPR[EPVS]-1659883178828
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883178829
GPR[SPVAP]-1659883178829
GPR[EPVAP]-1659883180784
GPR[EPVS]-1659883180785
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883180786
GPR[SPVAP]-1659883180786
GPR[EPVAP]-1659883182552
GPR[EPVS]-1659883182552
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883182553
GPR[SPVAP]-1659883182553
GPR[EPVAP]-1659883184602
GPR[EPVS]-1659883184602
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883184603
GPR[SPVAP]-1659883184603
GPR[EPVAP]-1659883188555
GPR[SPVATF]-1659883188555
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883191784
GPR[EPVS]-1659883191784
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883191786
GPR[SPVAP]-1659883191786
GPR[EPVAP]-1659883195670
GPR[SPVATF]-1659883195670
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883199049
GPR[EPVS]-1659883199049
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append(c);
}else {
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883199050
GPR[SPVAP]-1659883199050
GPR[EPVAP]-1659883202685
GPR[SPVATF]-1659883202685
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883205974
GPR[EPVS]-1659883205974
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883205976
GPR[SPVAP]-1659883205976
GPR[EPVAP]-1659883210008
GPR[SPVATF]-1659883210008
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883213478
GPR[EPVS]-1659883213478
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883213479
GPR[SPVAP]-1659883213479
GPR[EPVAP]-1659883217169
GPR[SPVATF]-1659883217169
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883220809
GPR[EPVS]-1659883220809
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883220810
GPR[SPVAP]-1659883220810
GPR[EPVAP]-1659883224608
GPR[SPVATF]-1659883224608
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883228254
GPR[EPVS]-1659883228254
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883228255
GPR[SPVAP]-1659883228255
GPR[EPVAP]-1659883232163
GPR[SPVATF]-1659883232163
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883235454
GPR[EPVS]-1659883235454
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883235455
GPR[SPVAP]-1659883235455
GPR[EPVAP]-1659883239068
GPR[SPVATF]-1659883239068
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883242622
GPR[EPVS]-1659883242622
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883242624
GPR[SPVAP]-1659883242624
GPR[EPVAP]-1659883246271
GPR[SPVATF]-1659883246271
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883249891
GPR[EPVS]-1659883249891
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883249892
GPR[SPVAP]-1659883249892
GPR[EPVAP]-1659883253967
GPR[SPVATF]-1659883253967
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883257812
GPR[EPVS]-1659883257812
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883257813
GPR[SPVAP]-1659883257813
GPR[EPVAP]-1659883261853
GPR[SPVATF]-1659883261853
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883265769
GPR[EPVS]-1659883265769
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883265770
GPR[SPVAP]-1659883265770
GPR[EPVAP]-1659883269434
GPR[SPVATF]-1659883269434
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883272775
GPR[EPVS]-1659883272775
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883272776
GPR[SPVAP]-1659883272776
GPR[EPVAP]-1659883276966
GPR[SPVATF]-1659883276966
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883280652
GPR[EPVS]-1659883280652
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883280653
GPR[SPVAP]-1659883280653
GPR[EPVAP]-1659883284477
GPR[SPVATF]-1659883284477
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883287920
GPR[EPVS]-1659883287920
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883287921
GPR[SPVAP]-1659883287921
GPR[EPVAP]-1659883291764
GPR[SPVATF]-1659883291764
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883295307
GPR[EPVS]-1659883295307
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883295308
GPR[SPVAP]-1659883295308
GPR[EPVAP]-1659883299036
GPR[SPVATF]-1659883299036
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883302647
GPR[EPVS]-1659883302647
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883302648
GPR[SPVAP]-1659883302649
GPR[EPVAP]-1659883306461
GPR[SPVATF]-1659883306461
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883309954
GPR[EPVS]-1659883309954
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883309955
GPR[SPVAP]-1659883309955
GPR[EPVAP]-1659883313716
GPR[SPVATF]-1659883313716
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883317325
GPR[EPVS]-1659883317325
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883317326
GPR[SPVAP]-1659883317326
GPR[EPVAP]-1659883321314
GPR[SPVATF]-1659883321315
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883325383
GPR[EPVS]-1659883325383
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883325384
GPR[SPVAP]-1659883325384
GPR[EPVAP]-1659883329422
GPR[SPVATF]-1659883329422
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883333140
GPR[EPVS]-1659883333140
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
builder.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883333142
GPR[SPVAP]-1659883333142
GPR[EPVAP]-1659883334891
GPR[EPVS]-1659883334891
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883334891
GPR[SPVAP]-1659883334891
GPR[EPVAP]-1659883336892
GPR[EPVS]-1659883336892
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883336893
GPR[SPVAP]-1659883336893
GPR[EPVAP]-1659883338607
GPR[EPVS]-1659883338607
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883338608
GPR[SPVAP]-1659883338608
GPR[EPVAP]-1659883340362
GPR[EPVS]-1659883340362
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883340363
GPR[SPVAP]-1659883340363
GPR[EPVAP]-1659883342376
GPR[EPVS]-1659883342376
========
if(Character.isWhitespace(c)){
b.append("</ul>");
builder.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883342377
GPR[SPVAP]-1659883342377
GPR[EPVAP]-1659883344523
GPR[EPVS]-1659883344523
========
if(Character.isWhitespace(c)){
b.append("</ul>");
builder.append(c);
}else {
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883344524
GPR[SPVAP]-1659883344524
GPR[EPVAP]-1659883346275
GPR[EPVS]-1659883346275
========
if(Character.isWhitespace(c)){
b.append("</ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883346276
GPR[SPVAP]-1659883346276
GPR[EPVAP]-1659883348068
GPR[EPVS]-1659883348068
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883348069
GPR[SPVAP]-1659883348069
GPR[EPVAP]-1659883350110
GPR[EPVS]-1659883350110
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883350111
GPR[SPVAP]-1659883350111
GPR[EPVAP]-1659883352088
GPR[EPVS]-1659883352088
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883352089
GPR[SPVAP]-1659883352089
GPR[EPVAP]-1659883353836
GPR[EPVS]-1659883353836
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883353837
GPR[SPVAP]-1659883353837
GPR[EPVAP]-1659883355561
GPR[EPVS]-1659883355561
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883355562
GPR[SPVAP]-1659883355562
GPR[EPVAP]-1659883357590
GPR[EPVS]-1659883357590
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883357592
GPR[SPVAP]-1659883357592
GPR[EPVAP]-1659883359388
GPR[EPVS]-1659883359388
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883359390
GPR[SPVAP]-1659883359390
GPR[EPVAP]-1659883361170
GPR[EPVS]-1659883361170
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883361171
GPR[SPVAP]-1659883361171
GPR[EPVAP]-1659883363418
GPR[EPVS]-1659883363418
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
builder.append(c);
}else {
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883363419
GPR[SPVAP]-1659883363419
GPR[EPVAP]-1659883365418
GPR[EPVS]-1659883365418
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883365423
GPR[SPVAP]-1659883365423
GPR[EPVAP]-1659883367226
GPR[EPVS]-1659883367226
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883367227
GPR[SPVAP]-1659883367227
GPR[EPVAP]-1659883369029
GPR[EPVS]-1659883369029
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883369030
GPR[SPVAP]-1659883369030
GPR[EPVAP]-1659883370791
GPR[EPVS]-1659883370791
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883370792
GPR[SPVAP]-1659883370792
GPR[EPVAP]-1659883372527
GPR[EPVS]-1659883372527
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883372528
GPR[SPVAP]-1659883372528
GPR[EPVAP]-1659883374512
GPR[EPVS]-1659883374512
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883374513
GPR[SPVAP]-1659883374513
GPR[EPVAP]-1659883376298
GPR[EPVS]-1659883376298
========
if(Character.isWhitespace(c)){
b.append("<ul>");
builder.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883376299
GPR[SPVAP]-1659883376299
GPR[EPVAP]-1659883378061
GPR[EPVS]-1659883378061
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883378062
GPR[SPVAP]-1659883378062
GPR[EPVAP]-1659883380106
GPR[EPVS]-1659883380106
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883380107
GPR[SPVAP]-1659883380107
GPR[EPVAP]-1659883381873
GPR[EPVS]-1659883381873
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883381874
GPR[SPVAP]-1659883381874
GPR[EPVAP]-1659883383886
GPR[EPVS]-1659883383886
========
if(Character.isWhitespace(c)){
b.append("</ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883383887
GPR[SPVAP]-1659883383887
GPR[EPVAP]-1659883385797
GPR[EPVS]-1659883385797
========
if(Character.isWhitespace(c)){
b.append("</ul>");
builder.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883385798
GPR[SPVAP]-1659883385798
GPR[EPVAP]-1659883387545
GPR[EPVS]-1659883387545
========
if(Character.isWhitespace(c)){
b.append("</ul>");
builder.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883387546
GPR[SPVAP]-1659883387546
GPR[EPVAP]-1659883389519
GPR[EPVS]-1659883389519
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883389520
GPR[SPVAP]-1659883389520
GPR[EPVAP]-1659883391342
GPR[EPVS]-1659883391342
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883391343
GPR[SPVAP]-1659883391343
GPR[EPVAP]-1659883393475
GPR[EPVS]-1659883393475
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

builder.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883393477
GPR[SPVAP]-1659883393477
GPR[EPVAP]-1659883395280
GPR[EPVS]-1659883395280
========
if(Character.isWhitespace(c)){
builder.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883395281
GPR[SPVAP]-1659883395281
GPR[EPVAP]-1659883397061
GPR[EPVS]-1659883397061
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883397062
GPR[SPVAP]-1659883397062
GPR[EPVAP]-1659883399118
GPR[EPVS]-1659883399118
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883399119
GPR[SPVAP]-1659883399119
GPR[EPVAP]-1659883401121
GPR[EPVS]-1659883401121
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append(c);
}else {
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883401122
GPR[SPVAP]-1659883401122
GPR[EPVAP]-1659883402854
GPR[EPVS]-1659883402854
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883402855
GPR[SPVAP]-1659883402855
GPR[EPVAP]-1659883404804
GPR[EPVS]-1659883404804
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883404805
GPR[SPVAP]-1659883404805
GPR[EPVAP]-1659883406723
GPR[EPVS]-1659883406723
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883406724
GPR[SPVAP]-1659883406724
GPR[EPVAP]-1659883408537
GPR[EPVS]-1659883408537
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883408538
GPR[SPVAP]-1659883408538
GPR[EPVAP]-1659883410294
GPR[EPVS]-1659883410294
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883410295
GPR[SPVAP]-1659883410295
GPR[EPVAP]-1659883412048
GPR[EPVS]-1659883412048
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883412049
GPR[SPVAP]-1659883412049
GPR[EPVAP]-1659883414007
GPR[EPVS]-1659883414007
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883414008
GPR[SPVAP]-1659883414008
GPR[EPVAP]-1659883415828
GPR[EPVS]-1659883415828
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883415829
GPR[SPVAP]-1659883415829
GPR[EPVAP]-1659883417592
GPR[EPVS]-1659883417592
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883417593
GPR[SPVAP]-1659883417593
GPR[EPVAP]-1659883419361
GPR[EPVS]-1659883419361
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883419362
GPR[SPVAP]-1659883419362
GPR[EPVAP]-1659883421258
GPR[EPVS]-1659883421258
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883421259
GPR[SPVAP]-1659883421259
GPR[EPVAP]-1659883423231
GPR[EPVS]-1659883423231
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883423232
GPR[SPVAP]-1659883423232
GPR[EPVAP]-1659883425176
GPR[EPVS]-1659883425176
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883425177
GPR[SPVAP]-1659883425177
GPR[EPVAP]-1659883426976
GPR[EPVS]-1659883426976
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883426977
GPR[SPVAP]-1659883426977
GPR[EPVAP]-1659883428914
GPR[EPVS]-1659883428914
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883428915
GPR[SPVAP]-1659883428915
GPR[EPVAP]-1659883430692
GPR[EPVS]-1659883430692
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883430693
GPR[SPVAP]-1659883430693
GPR[EPVAP]-1659883432692
GPR[EPVS]-1659883432692
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

builder.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883432693
GPR[SPVAP]-1659883432693
GPR[EPVAP]-1659883434456
GPR[EPVS]-1659883434456
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883434457
GPR[SPVAP]-1659883434457
GPR[EPVAP]-1659883438369
GPR[SPVATF]-1659883438369
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883441728
GPR[EPVS]-1659883441728
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883441729
GPR[SPVAP]-1659883441729
GPR[EPVAP]-1659883445405
GPR[SPVATF]-1659883445405
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883448944
GPR[EPVS]-1659883448944
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883448946
GPR[SPVAP]-1659883448946
GPR[EPVAP]-1659883452587
GPR[SPVATF]-1659883452587
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883456311
GPR[EPVS]-1659883456311
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883456312
GPR[SPVAP]-1659883456312
GPR[EPVAP]-1659883460132
GPR[SPVATF]-1659883460132
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883464480
GPR[EPVS]-1659883464480
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883464481
GPR[SPVAP]-1659883464481
GPR[EPVAP]-1659883468310
GPR[SPVATF]-1659883468310
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883471593
GPR[EPVS]-1659883471593
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");
b.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883471594
GPR[SPVAP]-1659883471594
GPR[EPVAP]-1659883475548
GPR[SPVATF]-1659883475548
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883479506
GPR[EPVS]-1659883479506
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883479508
GPR[SPVAP]-1659883479508
GPR[EPVAP]-1659883483153
GPR[SPVATF]-1659883483153
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883486917
GPR[EPVS]-1659883486917
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883486918
GPR[SPVAP]-1659883486918
GPR[EPVAP]-1659883490826
GPR[SPVATF]-1659883490826
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883494330
GPR[EPVS]-1659883494330
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883494331
GPR[SPVAP]-1659883494332
GPR[EPVAP]-1659883498229
GPR[SPVATF]-1659883498230
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883501924
GPR[EPVS]-1659883501924
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883501926
GPR[SPVAP]-1659883501926
GPR[EPVAP]-1659883505542
GPR[SPVATF]-1659883505542
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883509035
GPR[EPVS]-1659883509035
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883509036
GPR[SPVAP]-1659883509036
GPR[EPVAP]-1659883512906
GPR[SPVATF]-1659883512906
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883516746
GPR[EPVS]-1659883516746
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883516747
GPR[SPVAP]-1659883516747
GPR[EPVAP]-1659883520618
GPR[SPVATF]-1659883520618
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883523888
GPR[EPVS]-1659883523888
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883523890
GPR[SPVAP]-1659883523890
GPR[EPVAP]-1659883527582
GPR[SPVATF]-1659883527582
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883531672
GPR[EPVS]-1659883531672
========
if(Character.isWhitespace(c)){
b.append("</ul>");
b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883531673
GPR[SPVAP]-1659883531673
GPR[EPVAP]-1659883535432
GPR[SPVATF]-1659883535432
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883538778
GPR[EPVS]-1659883538778
========
if(Character.isWhitespace(c)){
b.append("<ul>");
b.append("</ul>");

b.append(c);
}else {
b.append("<ul>");
b.append("</ul>");
b.append("<ul>");
b.append("</ul>");

b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883538779
GPR[SPVAP]-1659883538779
GPR[EPVAP]-1659883542431
GPR[SPVATF]-1659883542432
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883545693
GPR[EPVS]-1659883545693
========
b.append('/');
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883545695
GPR[SPVAP]-1659883545695
GPR[EPVAP]-1659883549677
GPR[SPVATF]-1659883549677
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883553207
GPR[EPVS]-1659883553207
========
appendSourceCode(b);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883553208
GPR[SPVAP]-1659883553208
GPR[EPVAP]-1659883554955
GPR[EPVS]-1659883554955
========
b.append('/');
if(Character.isWhitespace(c)){
sb.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883554956
GPR[SPVAP]-1659883554956
GPR[EPVAP]-1659883556701
GPR[EPVS]-1659883556702
========
b.append('/');
if(Character.isWhitespace(c)){
b.append(c);
}else {
sb.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883556702
GPR[SPVAP]-1659883556702
GPR[EPVAP]-1659883558666
GPR[EPVS]-1659883558666
========
b.append('/');
if(Character.isWhitespace(c)){
sb.append(c);
}else {
sb.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883558667
GPR[SPVAP]-1659883558667
GPR[EPVAP]-1659883560673
GPR[EPVS]-1659883560673
========
if(Character.canEncode(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883560675
GPR[SPVAP]-1659883560675
GPR[EPVAP]-1659883562699
GPR[EPVS]-1659883562699
========
if(Character.canEncode(c)){
sb.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883562701
GPR[SPVAP]-1659883562701
GPR[EPVAP]-1659883564465
GPR[EPVS]-1659883564465
========
maybeEndStatement();
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883564466
GPR[SPVAP]-1659883564466
GPR[EPVAP]-1659883566241
GPR[EPVS]-1659883566241
========
if((isWordChar(c)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883566242
GPR[SPVAP]-1659883566242
GPR[EPVAP]-1659883568010
GPR[EPVS]-1659883568010
========
append(sourceExcerpt);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883568011
GPR[SPVAP]-1659883568011
GPR[EPVAP]-1659883570105
GPR[EPVS]-1659883570105
========
if(Character.isLetter(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883570106
GPR[SPVAP]-1659883570106
GPR[EPVAP]-1659883574052
GPR[SPVATF]-1659883574052
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883577726
GPR[EPVS]-1659883577726
========
b.append(sourceExcerpt);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883577728
GPR[SPVAP]-1659883577728
GPR[EPVAP]-1659883581314
GPR[SPVATF]-1659883581314
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883585238
GPR[EPVS]-1659883585238
========
b.append(sourceExcerpt);
if(Character.isWhitespace(c)){
sb.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883585239
GPR[SPVAP]-1659883585239
GPR[EPVAP]-1659883587010
GPR[EPVS]-1659883587010
========
b.append(sourceExcerpt);
if(Character.isWhitespace(c)){
b.append(c);
}else {
sb.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883587011
GPR[SPVAP]-1659883587011
GPR[EPVAP]-1659883588970
GPR[EPVS]-1659883588970
========
b.append(sourceExcerpt);
if(Character.isWhitespace(c)){
sb.append(c);
}else {
sb.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883588971
GPR[SPVAP]-1659883588971
GPR[EPVAP]-1659883590736
GPR[EPVS]-1659883590736
========
if(Character.charAt(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883590737
GPR[SPVAP]-1659883590737
GPR[EPVAP]-1659883592508
GPR[EPVS]-1659883592508
========
b.append('_');
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883592510
GPR[SPVAP]-1659883592510
GPR[EPVAP]-1659883596403
GPR[SPVATF]-1659883596403
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883599704
GPR[EPVS]-1659883599704
========
if(Character.isWhitespace(c)){
b.setLength(c);
}else {
b.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883599706
GPR[SPVAP]-1659883599706
GPR[EPVAP]-1659883603741
GPR[SPVATF]-1659883603741
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883607243
GPR[EPVS]-1659883607243
========
if(Character.isWhitespace(c)){
b.setLength(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883607244
GPR[SPVAP]-1659883607244
GPR[EPVAP]-1659883611333
GPR[SPVATF]-1659883611334
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883615308
GPR[EPVS]-1659883615308
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883615309
GPR[SPVAP]-1659883615309
GPR[EPVAP]-1659883619579
GPR[SPVATF]-1659883619579
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883623114
GPR[EPVS]-1659883623114
========
b.append(')');
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883623116
GPR[SPVAP]-1659883623116
GPR[EPVAP]-1659883627050
GPR[SPVATF]-1659883627050
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883630677
GPR[EPVS]-1659883630677
========
if(Character.isWhitespace(c)){
sb.setLength(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883630678
GPR[SPVAP]-1659883630678
GPR[EPVAP]-1659883632460
GPR[EPVS]-1659883632460
========
if(Character.isWhitespace(c)){
sb.append(c);
}else {
b.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883632461
GPR[SPVAP]-1659883632461
GPR[EPVAP]-1659883634462
GPR[EPVS]-1659883634462
========
b.append(')');
if(Character.isWhitespace(c)){
sb.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883634463
GPR[SPVAP]-1659883634463
GPR[EPVAP]-1659883636534
GPR[EPVS]-1659883636534
========
if(Character.isWhitespace(c)){
b.setLength(c);
}else {
sb.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883636535
GPR[SPVAP]-1659883636535
GPR[EPVAP]-1659883638306
GPR[EPVS]-1659883638306
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
sb.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883638307
GPR[SPVAP]-1659883638307
GPR[EPVAP]-1659883640244
GPR[EPVS]-1659883640244
========
b.append(')');
if(Character.isWhitespace(c)){
b.append(c);
}else {
sb.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883640246
GPR[SPVAP]-1659883640246
GPR[EPVAP]-1659883642214
GPR[EPVS]-1659883642214
========
b.append(')');
if(Character.isWhitespace(c)){
b.setLength(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883642215
GPR[SPVAP]-1659883642215
GPR[EPVAP]-1659883645852
GPR[SPVATF]-1659883645853
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883649128
GPR[EPVS]-1659883649128
========
b.append(')');
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883649129
GPR[SPVAP]-1659883649129
GPR[EPVAP]-1659883652776
GPR[SPVATF]-1659883652776
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883657603
GPR[EPVS]-1659883657603
========
if(Character.isWhitespace(c)){
sb.setLength(c);
}else {
sb.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883657604
GPR[SPVAP]-1659883657604
GPR[EPVAP]-1659883659378
GPR[EPVS]-1659883659378
========
if(Character.isWhitespace(c)){
sb.append(c);
}else {
sb.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883659379
GPR[SPVAP]-1659883659379
GPR[EPVAP]-1659883661246
GPR[EPVS]-1659883661246
========
b.append(')');
if(Character.isWhitespace(c)){
sb.append(c);
}else {
sb.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883661248
GPR[SPVAP]-1659883661248
GPR[EPVAP]-1659883662994
GPR[EPVS]-1659883662994
========
if(Character.isWhitespace(c)){
sb.setLength(c);
}else {
b.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883662995
GPR[SPVAP]-1659883662995
GPR[EPVAP]-1659883664765
GPR[EPVS]-1659883664765
========
b.append(')');
if(Character.isWhitespace(c)){
sb.setLength(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883664766
GPR[SPVAP]-1659883664766
GPR[EPVAP]-1659883666706
GPR[EPVS]-1659883666706
========
b.append(')');
if(Character.isWhitespace(c)){
sb.append(c);
}else {
b.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883666707
GPR[SPVAP]-1659883666707
GPR[EPVAP]-1659883668722
GPR[EPVS]-1659883668722
========
if(Character.isWhitespace(c)){
b.setLength(c);
}else {
sb.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883668723
GPR[SPVAP]-1659883668723
GPR[EPVAP]-1659883670524
GPR[EPVS]-1659883670524
========
b.append(')');
if(Character.isWhitespace(c)){
b.setLength(c);
}else {
sb.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883670525
GPR[SPVAP]-1659883670525
GPR[EPVAP]-1659883672550
GPR[EPVS]-1659883672550
========
b.append(')');
if(Character.isWhitespace(c)){
b.append(c);
}else {
sb.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883672551
GPR[SPVAP]-1659883672551
GPR[EPVAP]-1659883674309
GPR[EPVS]-1659883674309
========
b.append(')');
if(Character.isWhitespace(c)){
b.setLength(c);
}else {
b.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883674310
GPR[SPVAP]-1659883674310
GPR[EPVAP]-1659883678137
GPR[SPVATF]-1659883678137
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883681933
GPR[EPVS]-1659883681933
========
if(Character.isWhitespace(c)){
sb.setLength(c);
}else {
sb.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883681934
GPR[SPVAP]-1659883681934
GPR[EPVAP]-1659883683726
GPR[EPVS]-1659883683726
========
b.append(')');
if(Character.isWhitespace(c)){
sb.setLength(c);
}else {
sb.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883683728
GPR[SPVAP]-1659883683728
GPR[EPVAP]-1659883685728
GPR[EPVS]-1659883685728
========
b.append(')');
if(Character.isWhitespace(c)){
sb.append(c);
}else {
sb.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883685729
GPR[SPVAP]-1659883685729
GPR[EPVAP]-1659883687821
GPR[EPVS]-1659883687821
========
b.append(')');
if(Character.isWhitespace(c)){
sb.setLength(c);
}else {
b.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883687822
GPR[SPVAP]-1659883687822
GPR[EPVAP]-1659883689782
GPR[EPVS]-1659883689782
========
b.append(')');
if(Character.isWhitespace(c)){
b.setLength(c);
}else {
sb.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883689784
GPR[SPVAP]-1659883689784
GPR[EPVAP]-1659883691589
GPR[EPVS]-1659883691589
========
if(Character.isWhitespace(c)){
return 1;
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883691591
GPR[SPVAP]-1659883691591
GPR[EPVAP]-1659883693365
GPR[EPVS]-1659883693365
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
return 0;
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883693366
GPR[SPVAP]-1659883693366
GPR[EPVAP]-1659883695115
GPR[EPVS]-1659883695115
========
if(Character.charAt(c)){
sb.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883695119
GPR[SPVAP]-1659883695119
GPR[EPVAP]-1659883696910
GPR[EPVS]-1659883696910
========
if(Character.charAt(c)){
b.append(c);
}else {
sb.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883696912
GPR[SPVAP]-1659883696912
GPR[EPVAP]-1659883698891
GPR[EPVS]-1659883698891
========
if(Character.charAt(c)){
sb.append(c);
}else {
sb.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883698892
GPR[SPVAP]-1659883698892
GPR[EPVAP]-1659883700638
GPR[EPVS]-1659883700638
========
if(Character.compareTo(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883700640
GPR[SPVAP]-1659883700640
GPR[EPVAP]-1659883702416
GPR[EPVS]-1659883702416
========
if(Character.isWhitespace(c)){
b.append(c);
}else {
return 1;
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883702417
GPR[SPVAP]-1659883702417
GPR[EPVAP]-1659883704306
GPR[EPVS]-1659883704306
========
if(Character.isWhitespace(c)){
return 1;
b.setLength(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883704307
GPR[SPVAP]-1659883704307
GPR[EPVAP]-1659883706072
GPR[EPVS]-1659883706072
========
if(Character.isWhitespace(c)){
return 1;
b.append(c);
}else {
b.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883706073
GPR[SPVAP]-1659883706073
GPR[EPVAP]-1659883708032
GPR[EPVS]-1659883708032
========
if(Character.isWhitespace(c)){
return 1;
b.setLength(c);
}else {
b.setLength(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883708033
GPR[SPVAP]-1659883708033
GPR[EPVAP]-1659883709848
GPR[EPVS]-1659883709849
========
b.append("  ");
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883709850
GPR[SPVAP]-1659883709850
GPR[EPVAP]-1659883713701
GPR[SPVATF]-1659883713701
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883717318
GPR[EPVS]-1659883717318
========
if(Character.isJavaIdentifierPart(c)){
b.append(c);
}else {
b.append(' ');
}

========
MM Copying to MM
GPR[SPVS]-1659883717320
GPR[SPVAP]-1659883717320
GPR[EPVAP]-1659883721182
GPR[SPVATF]-1659883721182
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883724492
GPR[EPVS]-1659883724492
========
for(int i=0;i<stat.extraInfo.length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883726940
GPR[SPVAP]-1659883726940
GPR[EPVAP]-1659883728926
GPR[EPVS]-1659883728926
========
for(int i=0;i<extraInfo;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883728927
GPR[SPVAP]-1659883728927
GPR[EPVAP]-1659883730800
GPR[EPVS]-1659883730800
========
for(int i=0;i<length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883730801
GPR[SPVAP]-1659883730801
GPR[EPVAP]-1659883732781
GPR[EPVS]-1659883732781
========
for(int i=0;i<tracer.extraTracingValues.length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883732783
GPR[SPVAP]-1659883732783
GPR[EPVAP]-1659883734528
GPR[EPVS]-1659883734528
========
for(int i=0;i<extraTracingValues;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883734529
GPR[SPVAP]-1659883734529
GPR[EPVAP]-1659883736334
GPR[EPVS]-1659883736334
========
b.append(" Done ");
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883736335
GPR[SPVAP]-1659883736335
GPR[EPVAP]-1659883740268
GPR[SPVATF]-1659883740268
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883744027
GPR[EPVS]-1659883744027
========
b.append(" ms ");
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883744029
GPR[SPVAP]-1659883744029
GPR[EPVAP]-1659883747829
GPR[SPVATF]-1659883747829
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883751162
GPR[EPVS]-1659883751162
========
b.append(" Done ");
for(int i=0;i<length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883751163
GPR[SPVAP]-1659883751163
GPR[EPVAP]-1659883753014
GPR[EPVS]-1659883753014
========
b.append(" ms ");
for(int i=0;i<length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883753015
GPR[SPVAP]-1659883753015
GPR[EPVAP]-1659883754764
GPR[EPVS]-1659883754764
========
b.append(" Done ");
b.append(" ms ");
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883754765
GPR[SPVAP]-1659883754765
GPR[EPVAP]-1659883758399
GPR[SPVATF]-1659883758399
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883762402
GPR[EPVS]-1659883762402
========
b.append(" Done ");
b.append(" ms ");
for(int i=0;i<length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883762403
GPR[SPVAP]-1659883762403
GPR[EPVAP]-1659883764247
GPR[EPVS]-1659883764247
========
for(int i=0;i<limit;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883764249
GPR[SPVAP]-1659883764249
GPR[EPVAP]-1659883766031
GPR[EPVS]-1659883766031
========
for(int i=0;i<charno;i++){
char c=s.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883766032
GPR[SPVAP]-1659883766032
GPR[EPVAP]-1659883767825
GPR[EPVS]-1659883767825
========
for(int i=0;i<charno;i++){
if(warning){
if((c>='0'&&c<='9')||(c>='a'&&c<='f')){
b.append('_');
}
protectHex=false;
}
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883767826
GPR[SPVAP]-1659883767826
GPR[EPVAP]-1659883769833
GPR[EPVS]-1659883769833
========
for(int i=0;i<charno;i++){
if((c>='0'&&c<='9')||(c>='A'&&c<='Z')){
b.append(c);
}else {
b.append('$');
b.append(Integer.toHexString(c));
protectHex=true;
}
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883769835
GPR[SPVAP]-1659883769835
GPR[EPVAP]-1659883771627
GPR[EPVS]-1659883771627
========
for(int i=0;i<charno;i++){
if(warning){
if((c>='0'&&c<='9')||(c>='a'&&c<='f')){
b.append('_');
}
protectHex=false;
}
if((c>='0'&&c<='9')||(c>='A'&&c<='Z')){
b.append(c);
}else {
b.append('$');
b.append(Integer.toHexString(c));
protectHex=true;
}

char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883771628
GPR[SPVAP]-1659883771628
GPR[EPVAP]-1659883773657
GPR[EPVS]-1659883773657
========
for(int i=0;i<ranges.length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883773658
GPR[SPVAP]-1659883773658
GPR[EPVAP]-1659883775489
GPR[EPVS]-1659883775489
========
b.append('[');
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883775490
GPR[SPVAP]-1659883775490
GPR[EPVAP]-1659883779087
GPR[SPVATF]-1659883779088
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883782561
GPR[EPVS]-1659883782561
========
b.append(']');
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883782562
GPR[SPVAP]-1659883782562
GPR[EPVAP]-1659883786310
GPR[SPVATF]-1659883786310
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883790087
GPR[EPVS]-1659883790087
========
b.append('[');
for(int i=0;i<length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883790088
GPR[SPVAP]-1659883790088
GPR[EPVAP]-1659883792188
GPR[EPVS]-1659883792188
========
b.append(']');
for(int i=0;i<length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883792189
GPR[SPVAP]-1659883792189
GPR[EPVAP]-1659883793930
GPR[EPVS]-1659883793930
========
b.append('[');
b.append(']');
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883793931
GPR[SPVAP]-1659883793931
GPR[EPVAP]-1659883797573
GPR[SPVATF]-1659883797573
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883801161
GPR[EPVS]-1659883801161
========
b.append('[');
b.append(']');
for(int i=0;i<length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883801162
GPR[SPVAP]-1659883801162
GPR[EPVAP]-1659883802914
GPR[EPVS]-1659883802914
========
if(charno>0){
b.append('#');
buf.append(lineNumber);
}
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883802916
GPR[SPVAP]-1659883802916
GPR[EPVAP]-1659883804936
GPR[EPVS]-1659883804936
========
b.append(')');
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883804937
GPR[SPVAP]-1659883804937
GPR[EPVAP]-1659883808923
GPR[SPVATF]-1659883808923
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883813079
GPR[EPVS]-1659883813079
========
for(int i=0;i<indent;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883813080
GPR[SPVAP]-1659883813080
GPR[EPVAP]-1659883815183
GPR[EPVS]-1659883815183
========
b.append("}\n");
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883815184
GPR[SPVAP]-1659883815184
GPR[EPVAP]-1659883818861
GPR[SPVATF]-1659883818861
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883822971
GPR[EPVS]-1659883822971
========
for(int i=0;i<list.length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883822972
GPR[SPVAP]-1659883822972
GPR[EPVAP]-1659883824708
GPR[EPVS]-1659883824708
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.toChars(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883824709
GPR[SPVAP]-1659883824709
GPR[EPVAP]-1659883826702
GPR[EPVS]-1659883826702
========
for(int i=0;i<level;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883826715
GPR[SPVAP]-1659883826715
GPR[EPVAP]-1659883828485
GPR[EPVS]-1659883828485
========
b.append(sourceExcerpt);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883828487
GPR[SPVAP]-1659883828487
GPR[EPVAP]-1659883832264
GPR[SPVATF]-1659883832264
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883836047
GPR[EPVS]-1659883836047
========
b.append(sourceExcerpt);
for(int i=0;i<indent;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883836048
GPR[SPVAP]-1659883836048
GPR[EPVAP]-1659883837821
GPR[EPVS]-1659883837821
========
new StringBuilder().append(sourceExcerpt);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883837823
GPR[SPVAP]-1659883837823
GPR[EPVAP]-1659883841724
GPR[SPVATF]-1659883841724
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883845527
GPR[EPVS]-1659883845527
========
for(int i=0;i<n;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883845529
GPR[SPVAP]-1659883845529
GPR[EPVAP]-1659883847293
GPR[EPVS]-1659883847294
========
for(int i=0;i<charno;i++){
swtich (c){
case ' ' :
String Integer.toString(c,16)=Integer.toString(c,16);
pos=i+1;
break;

}
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883847295
GPR[SPVAP]-1659883847295
GPR[EPVAP]-1659883849275
GPR[EPVS]-1659883849275
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isJavaIdentifierPart(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883849277
GPR[SPVAP]-1659883849277
GPR[EPVAP]-1659883852979
GPR[SPVATF]-1659883852979
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883856756
GPR[EPVS]-1659883856756
========
for(int i=0;i<length;i++){
char c=s.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883856757
GPR[SPVAP]-1659883856757
GPR[EPVAP]-1659883858844
GPR[EPVS]-1659883858844
========
for(int i=0;i<length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isJavaIdentifierPart(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883858845
GPR[SPVAP]-1659883858845
GPR[EPVAP]-1659883860642
GPR[EPVS]-1659883860642
========
for(int i=0;i<charno;i++){
char c=s.charAt(i);
if(Character.isJavaIdentifierPart(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883860646
GPR[SPVAP]-1659883860646
GPR[EPVAP]-1659883862860
GPR[EPVS]-1659883862861
========
for(int i=0;i<length;i++){
char c=s.charAt(i);
if(Character.isJavaIdentifierPart(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883862862
GPR[SPVAP]-1659883862862
GPR[EPVAP]-1659883864940
GPR[EPVS]-1659883864940
========
for(int i=0;i<charno;i++){
b.append("<li> Defined: ");
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883864949
GPR[SPVAP]-1659883864950
GPR[EPVAP]-1659883868687
GPR[SPVATF]-1659883868687
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883872438
GPR[EPVS]-1659883872438
========
b.append('(').append(getClass().getSimpleName());
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883872439
GPR[SPVAP]-1659883872439
GPR[EPVAP]-1659883876308
GPR[SPVATF]-1659883876308
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883879856
GPR[EPVS]-1659883879856
========
b.append(' ');
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883879857
GPR[SPVAP]-1659883879857
GPR[EPVAP]-1659883883634
GPR[SPVATF]-1659883883634
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883887391
GPR[EPVS]-1659883887391
========
appendDebugInfo(b);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883887392
GPR[SPVAP]-1659883887392
GPR[EPVAP]-1659883889480
GPR[EPVS]-1659883889480
========
b.append('(').append(getClass().getSimpleName());
b.append(' ');
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883889481
GPR[SPVAP]-1659883889481
GPR[EPVAP]-1659883893097
GPR[SPVATF]-1659883893097
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883896477
GPR[EPVS]-1659883896477
========
b.append('(').append(getClass().getSimpleName());
b.append(')');
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883896479
GPR[SPVAP]-1659883896479
GPR[EPVAP]-1659883900486
GPR[SPVATF]-1659883900486
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883904200
GPR[EPVS]-1659883904200
========
b.append(' ');
b.append(')');
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883904201
GPR[SPVAP]-1659883904201
GPR[EPVAP]-1659883907938
GPR[SPVATF]-1659883907938
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883911564
GPR[EPVS]-1659883911564
========
b.append('(').append(getClass().getSimpleName());
b.append(' ');
b.append(')');
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883911565
GPR[SPVAP]-1659883911565
GPR[EPVAP]-1659883915557
GPR[SPVATF]-1659883915557
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883919255
GPR[EPVS]-1659883919255
========
b.append("(");
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883919256
GPR[SPVAP]-1659883919257
GPR[EPVAP]-1659883923168
GPR[SPVATF]-1659883923168
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883926667
GPR[EPVS]-1659883926667
========
b.append("function (");
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883926668
GPR[SPVAP]-1659883926668
GPR[EPVAP]-1659883930737
GPR[SPVATF]-1659883930737
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883934371
GPR[EPVS]-1659883934371
========
maybeEndStatement();
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883934372
GPR[SPVAP]-1659883934372
GPR[EPVAP]-1659883936158
GPR[EPVS]-1659883936158
========
for(int i=0;i<charno;i++){
b.append(getScope().getOwnSlot(c).getType());
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883936160
GPR[SPVAP]-1659883936160
GPR[EPVAP]-1659883937909
GPR[EPVS]-1659883937909
========
for(int i=0;i<charno;i++){
getParameterSlot(i).getType();
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883937910
GPR[SPVAP]-1659883937910
GPR[EPVAP]-1659883939946
GPR[EPVS]-1659883939946
========
for(int i=0;i<charno;i++){
b.append(getScope().getOwnSlot(c).getType());
getParameterSlot(i).getType();

char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883939947
GPR[SPVAP]-1659883939947
GPR[EPVAP]-1659883941730
GPR[EPVS]-1659883941730
========
b.append(" ");
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883941732
GPR[SPVAP]-1659883941732
GPR[EPVAP]-1659883945559
GPR[SPVATF]-1659883945559
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883949439
GPR[EPVS]-1659883949439
========
if((isWordChar(c)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883949441
GPR[SPVAP]-1659883949441
GPR[EPVAP]-1659883951219
GPR[EPVS]-1659883951219
========
append(sourceExcerpt);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883951220
GPR[SPVAP]-1659883951220
GPR[EPVAP]-1659883952994
GPR[EPVS]-1659883952994
========
b.append('/');
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883952995
GPR[SPVAP]-1659883952995
GPR[EPVAP]-1659883956874
GPR[SPVATF]-1659883956874
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883960563
GPR[EPVS]-1659883960563
========
appendSourceCode(b);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883960564
GPR[SPVAP]-1659883960564
GPR[EPVAP]-1659883962376
GPR[EPVS]-1659883962376
========
b.append(c);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883962377
GPR[SPVAP]-1659883962377
GPR[EPVAP]-1659883964114
GPR[EPVS]-1659883964114
========
if(b.length()>0){
sb.append('.');
}
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883964116
GPR[SPVAP]-1659883964116
GPR[EPVAP]-1659883965869
GPR[EPVS]-1659883965869
========
for(int i=0;i<L;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883965871
GPR[SPVAP]-1659883965871
GPR[EPVAP]-1659883967615
GPR[EPVS]-1659883967615
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
sb.append(c);
}else {
sb.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883967617
GPR[SPVAP]-1659883967617
GPR[EPVAP]-1659883969729
GPR[EPVS]-1659883969729
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
sb.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883969730
GPR[SPVAP]-1659883969730
GPR[EPVAP]-1659883971596
GPR[EPVS]-1659883971596
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
sb.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883971597
GPR[SPVAP]-1659883971597
GPR[EPVAP]-1659883973344
GPR[EPVS]-1659883973344
========
for(int i=0;i<charno;i++){
b=divResult[1];
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883973346
GPR[SPVAP]-1659883973346
GPR[EPVAP]-1659883975334
GPR[EPVS]-1659883975334
========
for(int i=0;i<charno;i++){
dig=(char)(b.divideAndRemainder(S)[0].intValue()+'0');
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883975335
GPR[SPVAP]-1659883975335
GPR[EPVAP]-1659883977288
GPR[EPVS]-1659883977288
========
for(int i=0;i<charno;i++){
if(i>=charno)break;
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883977290
GPR[SPVAP]-1659883977290
GPR[EPVAP]-1659883981069
GPR[SPVATF]-1659883981069
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659883984378
GPR[EPVS]-1659883984378
========
for(int i=0;i<charno;i++){
b=b.multiply(BigInteger.valueOf(10));
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883984379
GPR[SPVAP]-1659883984379
GPR[EPVAP]-1659883986338
GPR[EPVS]-1659883986338
========
for(int i=0;i<charno;i++){
b=divResult[1];
dig=(char)(b.divideAndRemainder(S)[0].intValue()+'0');
if(i>=charno)break;
b=b.multiply(BigInteger.valueOf(10));

char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883986339
GPR[SPVAP]-1659883986339
GPR[EPVAP]-1659883988109
GPR[EPVS]-1659883988109
========
for(int i=0;i<arr.length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883988111
GPR[SPVAP]-1659883988111
GPR[EPVAP]-1659883989918
GPR[EPVS]-1659883989918
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.charAt(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883989919
GPR[SPVAP]-1659883989919
GPR[EPVAP]-1659883991879
GPR[EPVS]-1659883991879
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.contains(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883991881
GPR[SPVAP]-1659883991881
GPR[EPVAP]-1659883993627
GPR[EPVS]-1659883993627
========
for(int i=0;i<len;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883993628
GPR[SPVAP]-1659883993628
GPR[EPVAP]-1659883995384
GPR[EPVS]-1659883995384
========
for(int i=0;i<charno;i++){
if(c>LARGEST_BASIC_LATIN){
return false;
}
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883995385
GPR[SPVAP]-1659883995385
GPR[EPVAP]-1659883997376
GPR[EPVS]-1659883997376
========
b.append('_');
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659883997378
GPR[SPVAP]-1659883997378
GPR[EPVAP]-1659884001249
GPR[SPVATF]-1659884001249
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884004812
GPR[EPVS]-1659884004812
========
b.append(Long.toHexString(c));
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884004813
GPR[SPVAP]-1659884004813
GPR[EPVAP]-1659884006780
GPR[EPVS]-1659884006780
========
for(int i=0;i<charno;i++){
if(c<'0'||c>'9'){
return false;
}
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884006782
GPR[SPVAP]-1659884006782
GPR[EPVAP]-1659884008535
GPR[EPVS]-1659884008535
========
for(int i=0;i<len;i++){
char c=s.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884008536
GPR[SPVAP]-1659884008536
GPR[EPVAP]-1659884010616
GPR[EPVS]-1659884010616
========
for(int i=0;i<charno;i++){
char c=oldName.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884010617
GPR[SPVAP]-1659884010617
GPR[EPVAP]-1659884012418
GPR[EPVS]-1659884012418
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isUpperCase(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884012419
GPR[SPVAP]-1659884012419
GPR[EPVAP]-1659884016322
GPR[SPVATF]-1659884016322
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884020028
GPR[EPVS]-1659884020028
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isLetter(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884020029
GPR[SPVAP]-1659884020029
GPR[EPVAP]-1659884023842
GPR[SPVATF]-1659884023842
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884027895
GPR[EPVS]-1659884027895
========
for(int i=0;i<n;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isUpperCase(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884027896
GPR[SPVAP]-1659884027896
GPR[EPVAP]-1659884029690
GPR[EPVS]-1659884029690
========
for(int i=0;i<n;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isLetter(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884029691
GPR[SPVAP]-1659884029691
GPR[EPVAP]-1659884031694
GPR[EPVS]-1659884031694
========
b.deleteCharAt(sb.length()-1);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884031696
GPR[SPVAP]-1659884031696
GPR[EPVAP]-1659884033706
GPR[EPVS]-1659884033706
========
b.append(")\\s*\\((.*?)\\)");
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884033707
GPR[SPVAP]-1659884033707
GPR[EPVAP]-1659884037630
GPR[SPVATF]-1659884037630
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884040984
GPR[EPVS]-1659884040984
========
b.append("Pure functions:\n");
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884040985
GPR[SPVAP]-1659884040985
GPR[EPVAP]-1659884045158
GPR[SPVATF]-1659884045158
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884048606
GPR[EPVS]-1659884048606
========
for(int i=0;i<charno;i++){
char c=pattern.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884048608
GPR[SPVAP]-1659884048608
GPR[EPVAP]-1659884050619
GPR[EPVS]-1659884050619
========
for(int i=0;i<charno;i++){
capturing=false;
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884050620
GPR[SPVAP]-1659884050620
GPR[EPVAP]-1659884052407
GPR[EPVS]-1659884052407
========
for(int i=0;i<charno;i++){
swtich (b.charAt(i+1)){
case ':' :
pos+=2;
break;

case '=' :
pos+=2;
type=b.charAt(i+1);
break;

}
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884052409
GPR[SPVAP]-1659884052409
GPR[EPVAP]-1659884054284
GPR[EPVS]-1659884054284
========
for(int i=0;i<charno;i++){
capturing=false;
swtich (b.charAt(i+1)){
case ':' :
pos+=2;
break;

case '=' :
pos+=2;
type=b.charAt(i+1);
break;

}

char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884054285
GPR[SPVAP]-1659884054285
GPR[EPVAP]-1659884055968
GPR[EPVS]-1659884055968
========
for(int i=0;i<sourceExcerpt.length();i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884055970
GPR[SPVAP]-1659884055970
GPR[EPVAP]-1659884059909
GPR[SPVATF]-1659884059909
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884063377
GPR[EPVS]-1659884063377
========
for(int i=0;i<charno;i++){
if(c!=sourceExcerpt.charAt(i)){
StringBuilder b=new StringBuilder(sourceExcerpt);
b.setCharAt(i,c);
while(++i<sourceExcerpt.length()){
b.setCharAt(i,caseCanonicalize(sourceExcerpt.charAt(i)));
}
return b.toString();
}
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884063378
GPR[SPVAP]-1659884063378
GPR[EPVAP]-1659884065419
GPR[EPVS]-1659884065419
========
for(int i=0;i<sourceExcerpt.length();i++){
char c=s.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884065420
GPR[SPVAP]-1659884065420
GPR[EPVAP]-1659884067466
GPR[EPVS]-1659884067466
========
for(int i=0;i<n;i++){
char c=s.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884067467
GPR[SPVAP]-1659884067467
GPR[EPVAP]-1659884069225
GPR[EPVS]-1659884069225
========
Preconditions.checkState(b.charAt(i)=='[');
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884069228
GPR[SPVAP]-1659884069228
GPR[EPVAP]-1659884071019
GPR[EPVS]-1659884071019
========
++i;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884071020
GPR[SPVAP]-1659884071020
GPR[EPVAP]-1659884072806
GPR[EPVS]-1659884072806
========
for(int i=0;i<charno;i++){
if('0'<=sourceExcerpt.charAt(i))newDigit=sourceExcerpt.charAt(i)-'0';else if('a'<=sourceExcerpt.charAt(i))newDigit=sourceExcerpt.charAt(i)-'a'+10;else if('A'<=sourceExcerpt.charAt(i))newDigit=sourceExcerpt.charAt(i)-'A'+10;else break;
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884072807
GPR[SPVAP]-1659884072807
GPR[EPVAP]-1659884074613
GPR[EPVS]-1659884074613
========
for(int i=0;i<size;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884074615
GPR[SPVAP]-1659884074615
GPR[EPVAP]-1659884076371
GPR[EPVS]-1659884076371
========
for(int i=0;i<=charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884076372
GPR[SPVAP]-1659884076372
GPR[EPVAP]-1659884080255
GPR[SPVATF]-1659884080255
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884084423
GPR[EPVS]-1659884084423
========
for(int i=0;i<nextLine;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884084424
GPR[SPVAP]-1659884084424
GPR[EPVAP]-1659884086227
GPR[EPVS]-1659884086227
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.get(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884086229
GPR[SPVAP]-1659884086229
GPR[EPVAP]-1659884088332
GPR[EPVS]-1659884088332
========
for(int i=charno;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884088341
GPR[SPVAP]-1659884088341
GPR[EPVAP]-1659884092006
GPR[SPVATF]-1659884092007
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884095634
GPR[EPVS]-1659884095634
========
for(int i=0;i<charno;i++){
if(!isValidReference(c)){
return false;
}
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884095635
GPR[SPVAP]-1659884095635
GPR[EPVAP]-1659884097381
GPR[EPVS]-1659884097381
========
for(int i=charno;i<charno;i++){
char c=sourceExcerpt.get(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884097382
GPR[SPVAP]-1659884097382
GPR[EPVAP]-1659884099114
GPR[EPVS]-1659884099114
========
LineMapEncoder.encodeEntry(c,charno,charno,charno);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884099116
GPR[SPVAP]-1659884099116
GPR[EPVAP]-1659884101091
GPR[EPVS]-1659884101091
========
charno=charno;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884101092
GPR[SPVAP]-1659884101092
GPR[EPVAP]-1659884104993
GPR[SPVATF]-1659884104993
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884108658
GPR[EPVS]-1659884108658
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
context.name.readClosureVariables=true;
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884108660
GPR[SPVAP]-1659884108660
GPR[EPVAP]-1659884110407
GPR[EPVS]-1659884110407
========
for(int i=0;i<charno;i++){
char c=source.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884110408
GPR[SPVAP]-1659884110408
GPR[EPVAP]-1659884112199
GPR[EPVS]-1659884112199
========
for(int i=0;i<charno;i++){
int c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884112201
GPR[SPVAP]-1659884112201
GPR[EPVAP]-1659884115954
GPR[SPVATF]-1659884115954
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884121755
GPR[EPVS]-1659884121755
========
for(int i=0;i<charno;i++){
number=sourceExcerpt.charAt(i);
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884121756
GPR[SPVAP]-1659884121756
GPR[EPVAP]-1659884123515
GPR[EPVS]-1659884123516
========
for(int i=0;i<=nextLine;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884123518
GPR[SPVAP]-1659884123518
GPR[EPVAP]-1659884125540
GPR[EPVS]-1659884125540
========
for(int i=0;i<indices1.length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884125542
GPR[SPVAP]-1659884125542
GPR[EPVAP]-1659884127283
GPR[EPVS]-1659884127283
========
if(ScriptRuntime.isJSLineTerminator(i)){
break;
}
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884127284
GPR[SPVAP]-1659884127284
GPR[EPVAP]-1659884129027
GPR[EPVS]-1659884129027
========
for(int i=0;i<size;i++){
char c=sourceExcerpt.get(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884129028
GPR[SPVAP]-1659884129028
GPR[EPVAP]-1659884130820
GPR[EPVS]-1659884130821
========
for(int i=0;i<N;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884130822
GPR[SPVAP]-1659884130822
GPR[EPVAP]-1659884132651
GPR[EPVS]-1659884132651
========
for(int i=0;i<childno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884132653
GPR[SPVAP]-1659884132653
GPR[EPVAP]-1659884134619
GPR[EPVS]-1659884134619
========
for(int i=0;i<charno;i++){
--i;
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884134621
GPR[SPVAP]-1659884134621
GPR[EPVAP]-1659884138464
GPR[SPVATF]-1659884138464
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884141756
GPR[EPVS]-1659884141756
========
for(int i=charno;i<charno;i++){
--i;
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884141757
GPR[SPVAP]-1659884141757
GPR[EPVAP]-1659884145596
GPR[SPVATF]-1659884145596
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884149480
GPR[EPVS]-1659884149480
========
for(int i=0;i<sourceEnd;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884149481
GPR[SPVAP]-1659884149481
GPR[EPVAP]-1659884151462
GPR[EPVS]-1659884151462
========
for(int i=0;i<charno;i++){
char c=sourceString.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884151463
GPR[SPVAP]-1659884151463
GPR[EPVAP]-1659884153238
GPR[EPVS]-1659884153238
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isJSLineTerminator(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884153239
GPR[SPVAP]-1659884153239
GPR[EPVAP]-1659884155030
GPR[EPVS]-1659884155030
========
for(int i=0;i<parts.length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884155032
GPR[SPVAP]-1659884155032
GPR[EPVAP]-1659884156765
GPR[EPVS]-1659884156765
========
for(int i=0;i<charno;i++){
char c=cssNames.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884156766
GPR[SPVAP]-1659884156766
GPR[EPVAP]-1659884158722
GPR[EPVS]-1659884158722
========
for(int i=0;i<max;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884158723
GPR[SPVAP]-1659884158723
GPR[EPVAP]-1659884160514
GPR[EPVS]-1659884160514
========
for(int i=0;i<functionCount;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884160515
GPR[SPVAP]-1659884160515
GPR[EPVAP]-1659884162335
GPR[EPVS]-1659884162335
========
for(int i=0;i<componentNames.length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884162337
GPR[SPVAP]-1659884162337
GPR[EPVAP]-1659884164088
GPR[EPVS]-1659884164089
========
for(int i=0;i<minimalCapacity;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884164091
GPR[SPVAP]-1659884164091
GPR[EPVAP]-1659884165831
GPR[EPVS]-1659884165831
========
if(charno==0){
return this;
}
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884165832
GPR[SPVAP]-1659884165832
GPR[EPVAP]-1659884167619
GPR[EPVS]-1659884167619
========
for(int i=0;i<maxCount;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884167620
GPR[SPVAP]-1659884167620
GPR[EPVAP]-1659884169365
GPR[EPVS]-1659884169365
========
++charno;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884169366
GPR[SPVAP]-1659884169366
GPR[EPVAP]-1659884173238
GPR[SPVATF]-1659884173238
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884176739
GPR[EPVS]-1659884176739
========
for(int i=0;i<overlapLength;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884176741
GPR[SPVAP]-1659884176741
GPR[EPVAP]-1659884178501
GPR[EPVS]-1659884178501
========
for(int i=0;i<charno;i++){
char c=extraTracingStatistics.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884178502
GPR[SPVAP]-1659884178502
GPR[EPVAP]-1659884180290
GPR[EPVS]-1659884180290
========
for(int i=0;i<charno;i++){
stat.extraInfo[i]+=t.extraTracingValues[i];
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884180291
GPR[SPVAP]-1659884180291
GPR[EPVAP]-1659884182087
GPR[EPVS]-1659884182087
========
for(int i=0;i<charno;i++){
if(sourceExcerpt.get(i).getTracingStat()!=null){
sourceExcerpt.get(i).getTracingStat().incrementBy(t.type,t.extraTracingValues[i]);
}
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884182088
GPR[SPVAP]-1659884182088
GPR[EPVAP]-1659884184132
GPR[EPVS]-1659884184132
========
for(int i=0;i<charno;i++){
stat.extraInfo[i]+=t.extraTracingValues[i];
if(sourceExcerpt.get(i).getTracingStat()!=null){
sourceExcerpt.get(i).getTracingStat().incrementBy(t.type,t.extraTracingValues[i]);
}

char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884184133
GPR[SPVAP]-1659884184133
GPR[EPVAP]-1659884186182
GPR[EPVS]-1659884186182
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.join(i);
if(Character.isWhitespace(c)){
b.join(c);
}else {
b.join(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884186185
GPR[SPVAP]-1659884186185
GPR[EPVAP]-1659884188004
GPR[EPVS]-1659884188004
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.join(c);
}else {
b.join(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884188006
GPR[SPVAP]-1659884188006
GPR[EPVAP]-1659884189770
GPR[EPVS]-1659884189770
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.join(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884189772
GPR[SPVAP]-1659884189772
GPR[EPVAP]-1659884191850
GPR[EPVS]-1659884191850
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.join(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884191851
GPR[SPVAP]-1659884191851
GPR[EPVAP]-1659884193758
GPR[EPVS]-1659884193758
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.join(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884193759
GPR[SPVAP]-1659884193759
GPR[EPVAP]-1659884195563
GPR[EPVS]-1659884195563
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
return b.get(c)+".";
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884195564
GPR[SPVAP]-1659884195564
GPR[EPVAP]-1659884197531
GPR[EPVS]-1659884197531
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
return b.get(c)+".";
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884197532
GPR[SPVAP]-1659884197532
GPR[EPVAP]-1659884199540
GPR[EPVS]-1659884199540
========
for(int i=0;i<edgeList.length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884199542
GPR[SPVAP]-1659884199542
GPR[EPVAP]-1659884201516
GPR[EPVS]-1659884201516
========
for(int i=0;i<length;i++){
char c=sourceExcerpt.get(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884201517
GPR[SPVAP]-1659884201517
GPR[EPVAP]-1659884203272
GPR[EPVS]-1659884203272
========
for(int i=0;i<writtenKeyCount;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884203274
GPR[SPVAP]-1659884203274
GPR[EPVAP]-1659884205524
GPR[EPVS]-1659884205525
========
for(int i=0;i<nMembers;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884205527
GPR[SPVAP]-1659884205527
GPR[EPVAP]-1659884208120
GPR[EPVS]-1659884208120
========
for(int i=0;i<charno;i++){
char c=name.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884208121
GPR[SPVAP]-1659884208121
GPR[EPVAP]-1659884209898
GPR[EPVS]-1659884209898
========
for(int i=0;i<charno;i++){
if(current.shouldRemove){
current.shouldRemove=false;
}
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884209900
GPR[SPVAP]-1659884209900
GPR[EPVAP]-1659884211662
GPR[EPVS]-1659884211662
========
for(int i=0;i<charno;i++){
if(current.shouldRemove){
anyMovable=true;
}else {
if(current.canBeSideEffected){
seenUnmoveableSideEfffected=true;
}
if(current.hasSideEffects){
seenUnmovableSideEffects=true;
}
}
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884211663
GPR[SPVAP]-1659884211663
GPR[EPVAP]-1659884213399
GPR[EPVS]-1659884213399
========
for(int i=0;i<charno;i++){
if(current.shouldRemove){
current.shouldRemove=false;
}
if(current.shouldRemove){
anyMovable=true;
}else {
if(current.canBeSideEffected){
seenUnmoveableSideEfffected=true;
}
if(current.hasSideEffects){
seenUnmovableSideEffects=true;
}
}

char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884213400
GPR[SPVAP]-1659884213400
GPR[EPVAP]-1659884215338
GPR[EPVS]-1659884215338
========
i>>>=charno;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884215339
GPR[SPVAP]-1659884215339
GPR[EPVAP]-1659884217084
GPR[EPVS]-1659884217084
========
charno=(charno!=0)?2:1;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884217085
GPR[SPVAP]-1659884217085
GPR[EPVAP]-1659884220974
GPR[SPVATF]-1659884220974
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884224427
GPR[EPVS]-1659884224427
========
c=sourceExcerpt.charAt(str.length()-1);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884224428
GPR[SPVAP]-1659884224428
GPR[EPVAP]-1659884226180
GPR[EPVS]-1659884226180
========
i+=sourceExcerpt.length();
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884226181
GPR[SPVAP]-1659884226181
GPR[EPVAP]-1659884228125
GPR[EPVS]-1659884228125
========
for(int i=0;i<l;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884228126
GPR[SPVAP]-1659884228126
GPR[EPVAP]-1659884230028
GPR[EPVS]-1659884230028
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.addConcreteType(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884230030
GPR[SPVAP]-1659884230030
GPR[EPVAP]-1659884231772
GPR[EPVS]-1659884231772
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
changed=true;
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884231773
GPR[SPVAP]-1659884231773
GPR[EPVAP]-1659884233513
GPR[EPVS]-1659884233513
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
changed=true;
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884233514
GPR[SPVAP]-1659884233514
GPR[EPVAP]-1659884235254
GPR[EPVS]-1659884235254
========
for(int i=0;i<count;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884235256
GPR[SPVAP]-1659884235256
GPR[EPVAP]-1659884237147
GPR[EPVS]-1659884237147
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.getJSONObject(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884237149
GPR[SPVAP]-1659884237149
GPR[EPVAP]-1659884239046
GPR[EPVS]-1659884239046
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
refInfo.append(c);
}else {
refInfo.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884239048
GPR[SPVAP]-1659884239048
GPR[EPVAP]-1659884240799
GPR[EPVS]-1659884240799
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.add(c);
}else {
b.add(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884240799
GPR[SPVAP]-1659884240799
GPR[EPVAP]-1659884242877
GPR[EPVS]-1659884242877
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
refInfo.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884242878
GPR[SPVAP]-1659884242878
GPR[EPVAP]-1659884244803
GPR[EPVS]-1659884244803
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.add(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884244804
GPR[SPVAP]-1659884244804
GPR[EPVAP]-1659884246605
GPR[EPVS]-1659884246606
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
refInfo.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884246607
GPR[SPVAP]-1659884246607
GPR[EPVAP]-1659884248582
GPR[EPVS]-1659884248582
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.add(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884248584
GPR[SPVAP]-1659884248584
GPR[EPVAP]-1659884250325
GPR[EPVS]-1659884250325
========
sourceExcerpt=sourceExcerpt.substring(0,sourceExcerpt.indexOf(".prototype."));
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884250327
GPR[SPVAP]-1659884250327
GPR[EPVAP]-1659884254017
GPR[SPVATF]-1659884254017
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884257708
GPR[EPVS]-1659884257708
========
i=2;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884257710
GPR[SPVAP]-1659884257710
GPR[EPVAP]-1659884259730
GPR[EPVS]-1659884259730
========
charno=sourceExcerpt.indexOf('.',i+11);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884259731
GPR[SPVAP]-1659884259731
GPR[EPVAP]-1659884261810
GPR[EPVS]-1659884261810
========
for(int i=0;i<children.length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884261811
GPR[SPVAP]-1659884261811
GPR[EPVAP]-1659884263556
GPR[EPVS]-1659884263557
========
for(int i=0;i<charno;i++){
char c=sourceExcerpt.getJSONArray(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884263558
GPR[SPVAP]-1659884263558
GPR[EPVAP]-1659884265580
GPR[EPVS]-1659884265580
========
for(int i=0;i<entryCount;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884265583
GPR[SPVAP]-1659884265583
GPR[EPVAP]-1659884267335
GPR[EPVS]-1659884267335
========
for(int i=0;i<charno;i++){
if(warning){
pending=false;
}
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884267336
GPR[SPVAP]-1659884267336
GPR[EPVAP]-1659884269161
GPR[EPVS]-1659884269161
========
super(charno,charno,charno);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884269165
GPR[SPVAP]-1659884269165
GPR[EPVAP]-1659884271016
GPR[EPVS]-1659884271016
========
this.sourceExcerpt=str;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884271017
GPR[SPVAP]-1659884271017
GPR[EPVAP]-1659884272861
GPR[EPVS]-1659884272861
========
case Token.STRING :

for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884272863
GPR[SPVAP]-1659884272863
GPR[EPVAP]-1659884274573
GPR[EPVS]-1659884274573
========
case Token.MUL :

for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884274575
GPR[SPVAP]-1659884274575
GPR[EPVAP]-1659884276198
GPR[EPVS]-1659884276198
========
for(int i=0;i<charno;i++){
new Node(Token.BREAK,charno,c).addChildToBack(Node.newString(Token.NAME,sourceExcerpt,charno,c));
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884276199
GPR[SPVAP]-1659884276199
GPR[EPVAP]-1659884277944
GPR[EPVS]-1659884277944
========
for(int i=0;i<charno;i++){
new Node(Token.CONTINUE,charno,c).addChildToBack(Node.newString(Token.NAME,sourceExcerpt,charno,c));
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884277946
GPR[SPVAP]-1659884277946
GPR[EPVAP]-1659884279736
GPR[EPVS]-1659884279736
========
consumeToken();
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884279738
GPR[SPVAP]-1659884279738
GPR[EPVAP]-1659884281484
GPR[EPVS]-1659884281484
========
case Token.FALSE :

for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884281486
GPR[SPVAP]-1659884281486
GPR[EPVAP]-1659884283127
GPR[EPVS]-1659884283127
========
case Token.RESERVED :

for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884283129
GPR[SPVAP]-1659884283129
GPR[EPVAP]-1659884284770
GPR[EPVS]-1659884284770
========
case Token.WITH :

for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884284771
GPR[SPVAP]-1659884284771
GPR[EPVAP]-1659884286814
GPR[EPVS]-1659884286814
========
new Node(Token.FUNCTION,charno,charno).addChildrenToBack(Node.newString(Token.NAME,sourceExcerpt,charno,charno));
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884286816
GPR[SPVAP]-1659884286816
GPR[EPVAP]-1659884288814
GPR[EPVS]-1659884288814
========
new Node(Token.FUNCTION,charno,charno).addChildToBack(new Node(Token.LP,charno,charno));
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884288815
GPR[SPVAP]-1659884288815
GPR[EPVAP]-1659884290906
GPR[EPVS]-1659884290906
========
new Node(Token.CALL,charno,charno).putBooleanProp(Node.FREE_CALL,true);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884290907
GPR[SPVAP]-1659884290907
GPR[EPVAP]-1659884292706
GPR[EPVS]-1659884292706
========
new Node(Token.CALL,charno,charno).addChildToBack(Node.newString(Token.NAME,sourceExcerpt));
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884292707
GPR[SPVAP]-1659884292707
GPR[EPVAP]-1659884294831
GPR[EPVS]-1659884294831
========
charno=mergeLineCharNo(charno,i);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884294833
GPR[SPVAP]-1659884294833
GPR[EPVAP]-1659884296565
GPR[EPVS]-1659884296566
========
case TYPE :

for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884296569
GPR[SPVAP]-1659884296569
GPR[EPVAP]-1659884298586
GPR[EPVS]-1659884298586
========
charno=peekTokenOrEOL();
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884298588
GPR[SPVAP]-1659884298588
GPR[EPVAP]-1659884300322
GPR[EPVS]-1659884300322
========
case Token.GET_REF :

for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884300323
GPR[SPVAP]-1659884300323
GPR[EPVAP]-1659884302014
GPR[EPVS]-1659884302014
========
i=next();
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884302016
GPR[SPVAP]-1659884302016
GPR[EPVAP]-1659884303809
GPR[EPVS]-1659884303809
========
if(charno>0){
b.append('#');
buf.append(lineNumber);
}
b.append(')');
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884303811
GPR[SPVAP]-1659884303811
GPR[EPVAP]-1659884305799
GPR[EPVS]-1659884305800
========
charno=-1;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884305801
GPR[SPVAP]-1659884305801
GPR[EPVAP]-1659884309576
GPR[SPVATF]-1659884309576
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884313611
GPR[EPVS]-1659884313611
========
i=getChar();
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884313612
GPR[SPVAP]-1659884313612
GPR[EPVAP]-1659884315916
GPR[EPVS]-1659884315916
========
mustHaveXML();
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884315918
GPR[SPVAP]-1659884315918
GPR[EPVAP]-1659884317821
GPR[EPVS]-1659884317822
========
default :

for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}

========
MM Copying to MM
GPR[SPVS]-1659884317823
GPR[SPVAP]-1659884317823
GPR[EPVAP]-1659884319452
GPR[EPVS]-1659884319452
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884322482
GPR[SPVAP]-1659884322482
GPR[EPVAP]-1659884324411
GPR[EPVS]-1659884324411
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
builder.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884324413
GPR[SPVAP]-1659884324413
GPR[EPVAP]-1659884326409
GPR[EPVS]-1659884326409
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
start=-1;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884326410
GPR[SPVAP]-1659884326410
GPR[EPVAP]-1659884328170
GPR[EPVS]-1659884328170
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
b.append('\n');
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884328171
GPR[SPVAP]-1659884328171
GPR[EPVAP]-1659884331769
GPR[SPVATF]-1659884331769
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884335379
GPR[EPVS]-1659884335379
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
start=charno+1;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884335380
GPR[SPVAP]-1659884335380
GPR[EPVAP]-1659884337329
GPR[EPVS]-1659884337329
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
end=sourceExcerpt.indexOf('\n',i);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884337330
GPR[SPVAP]-1659884337330
GPR[EPVAP]-1659884339356
GPR[EPVS]-1659884339356
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
b.append('\n');
start=charno+1;
end=sourceExcerpt.indexOf('\n',i);

for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884339357
GPR[SPVAP]-1659884339357
GPR[EPVAP]-1659884341382
GPR[EPVS]-1659884341382
========
b.append("| ");
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884341383
GPR[SPVAP]-1659884341383
GPR[EPVAP]-1659884345127
GPR[SPVATF]-1659884345127
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884348819
GPR[EPVS]-1659884348819
========
b.append("| ");
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
b.append('\n');
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884348820
GPR[SPVAP]-1659884348820
GPR[EPVAP]-1659884352471
GPR[SPVATF]-1659884352471
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884355755
GPR[EPVS]-1659884355755
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<list.length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884355756
GPR[SPVAP]-1659884355756
GPR[EPVAP]-1659884357536
GPR[EPVS]-1659884357536
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884357538
GPR[SPVAP]-1659884357538
GPR[EPVAP]-1659884359285
GPR[EPVS]-1659884359285
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
b.append("]");
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884359286
GPR[SPVAP]-1659884359286
GPR[EPVAP]-1659884362980
GPR[SPVATF]-1659884362980
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884366662
GPR[EPVS]-1659884366662
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
b.append("]");
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
builder.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884366663
GPR[SPVAP]-1659884366663
GPR[EPVAP]-1659884368446
GPR[EPVS]-1659884368446
========
b.append('[');
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884368448
GPR[SPVAP]-1659884368448
GPR[EPVAP]-1659884372236
GPR[SPVATF]-1659884372236
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884376159
GPR[EPVS]-1659884376159
========
b.append(']');
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884376160
GPR[SPVAP]-1659884376160
GPR[EPVAP]-1659884380128
GPR[SPVATF]-1659884380128
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884383401
GPR[EPVS]-1659884383401
========
b.append('[');
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884383402
GPR[SPVAP]-1659884383402
GPR[EPVAP]-1659884385355
GPR[EPVS]-1659884385355
========
b.append(']');
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884385356
GPR[SPVAP]-1659884385356
GPR[EPVAP]-1659884387107
GPR[EPVS]-1659884387107
========
b.append('[');
b.append(']');
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884387108
GPR[SPVAP]-1659884387108
GPR[EPVAP]-1659884390896
GPR[SPVATF]-1659884390896
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884394255
GPR[EPVS]-1659884394255
========
b.append('[');
b.append(']');
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884394256
GPR[SPVAP]-1659884394256
GPR[EPVAP]-1659884396113
GPR[EPVS]-1659884396114
========
if(warning){
b.append('^');
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884396115
GPR[SPVAP]-1659884396115
GPR[EPVAP]-1659884399744
GPR[SPVATF]-1659884399744
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884403654
GPR[EPVS]-1659884403654
========
if(warning){
b.append('^');
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884403655
GPR[SPVAP]-1659884403655
GPR[EPVAP]-1659884405667
GPR[EPVS]-1659884405667
========
b.append('[');
if(warning){
b.append('^');
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884405668
GPR[SPVAP]-1659884405668
GPR[EPVAP]-1659884409530
GPR[SPVATF]-1659884409530
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884413072
GPR[EPVS]-1659884413072
========
b.append('[');
if(warning){
b.append('^');
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884413073
GPR[SPVAP]-1659884413073
GPR[EPVAP]-1659884414826
GPR[EPVS]-1659884414826
========
if(excerpt.equals(LINE)&&0<=charno&&charno<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884414828
GPR[SPVAP]-1659884414828
GPR[EPVAP]-1659884418569
GPR[SPVATF]-1659884418569
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine2
MM: Failing tests: 0
GPR[EPVATF]-1659884425860
GPR[SPVATR]-1659884425861
TESTING : closure_62
MM messageFailing tests: 0
GPR[EPVATR]-1659884475802
GPR[EPVS]-1659884475802
GPR[PF]-1659884475802
sourceFile  script/workingdir/SimFix/closure/closure_62_buggy/src/com/google/javascript/jscomp/LightweightMessageFormatter.java
location   script/workingdir/SimFix/closure/closure_62_buggy
MM Out patch at /experiment_home///results/SimFix/Closure/62/seed_262/patch/closure/62/0/patch_2600338_1_ts_1659884475802.diff
MM Command diff diff -w -b  --label=/src/com/google/javascript/jscomp/LightweightMessageFormatter.java --label=/src/com/google/javascript/jscomp/LightweightMessageFormatter.java /tmp/tmpDirMM2211967314233558510/LightweightMessageFormatter.java  /experiment_home///results/SimFix/Closure/62/seed_262/patch/closure/62/0/1_LightweightMessageFormatter.java  --unified=3  > /experiment_home///results/SimFix/Closure/62/seed_262/patch/closure/62/0/patch_2600338_1_ts_1659884475802.diff
MMOut command diff: []
========
if(excerpt.equals(LINE)&&0<=charno&&charno<=0){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884475813
GPR[SPVAP]-1659884475813
GPR[EPVAP]-1659884479460
GPR[SPVATF]-1659884479460
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884483351
GPR[EPVS]-1659884483351
========
if(excerpt.equals(LINE)&&0<=charno&&lineNumber<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884483352
GPR[SPVAP]-1659884483352
GPR[EPVAP]-1659884485091
GPR[EPVS]-1659884485091
========
b.append(" (");
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884485092
GPR[SPVAP]-1659884485092
GPR[EPVAP]-1659884489073
GPR[SPVATF]-1659884489073
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884492557
GPR[EPVS]-1659884492557
========
if(sourceExcerpt!=null){
b.append(sourceName);
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884492558
GPR[SPVAP]-1659884492558
GPR[EPVAP]-1659884494669
GPR[EPVS]-1659884494669
========
if(charno>0){
b.append('#');
buf.append(lineNumber);
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884494670
GPR[SPVAP]-1659884494670
GPR[EPVAP]-1659884496411
GPR[EPVS]-1659884496411
========
b.append(')');
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884496412
GPR[SPVAP]-1659884496412
GPR[EPVAP]-1659884500018
GPR[SPVATF]-1659884500018
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884503775
GPR[EPVS]-1659884503775
========
b.append(" (");
if(excerpt.equals(LINE)&&0<=charno&&charno<=0){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884503776
GPR[SPVAP]-1659884503776
GPR[EPVAP]-1659884507675
GPR[SPVATF]-1659884507675
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884511657
GPR[EPVS]-1659884511657
========
b.append(')');
if(excerpt.equals(LINE)&&0<=charno&&charno<=0){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884511658
GPR[SPVAP]-1659884511658
GPR[EPVAP]-1659884515397
GPR[SPVATF]-1659884515397
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884518686
GPR[EPVS]-1659884518686
========
b.append(" (");
b.append(')');
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884518688
GPR[SPVAP]-1659884518688
GPR[EPVAP]-1659884522502
GPR[SPVATF]-1659884522502
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884526019
GPR[EPVS]-1659884526019
========
b.append(" (");
b.append(')');
if(excerpt.equals(LINE)&&0<=charno&&charno<=0){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884526020
GPR[SPVAP]-1659884526020
GPR[EPVAP]-1659884529642
GPR[SPVATF]-1659884529642
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884532929
GPR[EPVS]-1659884532929
========
if(excerpt.equals(LINE)&&0<=charno&&charno<s.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884532930
GPR[SPVAP]-1659884532930
GPR[EPVAP]-1659884534694
GPR[EPVS]-1659884534694
========
b.append("function (");
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884534696
GPR[SPVAP]-1659884534696
GPR[EPVAP]-1659884538478
GPR[SPVATF]-1659884538478
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884541911
GPR[EPVS]-1659884541911
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
out.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884541913
GPR[SPVAP]-1659884541913
GPR[EPVAP]-1659884543870
GPR[EPVS]-1659884543870
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
b.append(" - FUNCTIONS: ");
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884543871
GPR[SPVAP]-1659884543871
GPR[EPVAP]-1659884547838
GPR[SPVATF]-1659884547838
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884551399
GPR[EPVS]-1659884551399
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
p=call.parameters.getFirstChild().getNext();
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884551401
GPR[SPVAP]-1659884551401
GPR[EPVAP]-1659884553562
GPR[EPVS]-1659884553562
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<decPt;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884553564
GPR[SPVAP]-1659884553564
GPR[EPVAP]-1659884555458
GPR[EPVS]-1659884555458
========
if(excerpt.equals(LINE)&&0<=charno&&d<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884555460
GPR[SPVAP]-1659884555460
GPR[EPVAP]-1659884557572
GPR[EPVS]-1659884557572
========
if(excerpt.equals(LINE)&&0<=charno&&ds<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884557573
GPR[SPVAP]-1659884557573
GPR[EPVAP]-1659884559300
GPR[EPVS]-1659884559300
========
maybeEndStatement();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884559301
GPR[SPVAP]-1659884559301
GPR[EPVAP]-1659884561024
GPR[EPVS]-1659884561024
========
if((isWordChar(c)||c=='\\')&&isWordChar(getLastChar())){
append(" ");
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884561025
GPR[SPVAP]-1659884561025
GPR[EPVAP]-1659884562818
GPR[EPVS]-1659884562818
========
append(sourceExcerpt);
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884562819
GPR[SPVAP]-1659884562819
GPR[EPVAP]-1659884564590
GPR[EPVS]-1659884564590
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
hexSize=2;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884564591
GPR[SPVAP]-1659884564591
GPR[EPVAP]-1659884566370
GPR[EPVS]-1659884566370
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
hexSize=4;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884566371
GPR[SPVAP]-1659884566371
GPR[EPVAP]-1659884568118
GPR[EPVS]-1659884568118
========
appendOp(sourceExcerpt,warning);
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884568120
GPR[SPVAP]-1659884568120
GPR[EPVAP]-1659884569850
GPR[EPVS]-1659884569850
========
if(warning){
maybeCutLine();
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884569852
GPR[SPVAP]-1659884569852
GPR[EPVAP]-1659884571874
GPR[EPVS]-1659884571874
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
b.append(getDouble());
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884571876
GPR[SPVAP]-1659884571876
GPR[EPVAP]-1659884573636
GPR[EPVS]-1659884573636
========
if(excerpt.equals(LINE)&&0<=charno&&ilim<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884573638
GPR[SPVAP]-1659884573638
GPR[EPVAP]-1659884575754
GPR[EPVS]-1659884575754
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
S=mhi=null;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884575755
GPR[SPVAP]-1659884575755
GPR[EPVAP]-1659884577507
GPR[EPVS]-1659884577507
========
if(excerpt.equals(LINE)&&0<=charno&&charno<=Token.LAST_TOKEN){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884577510
GPR[SPVAP]-1659884577510
GPR[EPVAP]-1659884579269
GPR[EPVS]-1659884579270
========
if(excerpt.equals(LINE)&&0<=charno&&token<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884579271
GPR[SPVAP]-1659884579271
GPR[EPVAP]-1659884581059
GPR[EPVS]-1659884581059
========
append((char)charno);
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884581061
GPR[SPVAP]-1659884581061
GPR[EPVAP]-1659884582827
GPR[EPVS]-1659884582827
========
append((char)Token.EOL);
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884582828
GPR[SPVAP]-1659884582828
GPR[EPVAP]-1659884584802
GPR[EPVS]-1659884584802
========
if(!((i+5)<charno)&&(sourceExcerpt.charAt(i+1)=='u')&&0<=Kit.xDigitToInt(sourceExcerpt.charAt(i+3),0)&&0<=Kit.xDigitToInt(sourceExcerpt.charAt(i+4),0)&&0<=Kit.xDigitToInt(sourceExcerpt.charAt(i+5),0)){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884584804
GPR[SPVAP]-1659884584804
GPR[EPVAP]-1659884586806
GPR[EPVS]-1659884586806
========
if(!((i+5)<charno)&&(sourceExcerpt.charAt(i+1)=='u')&&0<=Kit.xDigitToInt(s.charAt(i+3),0)&&0<=Kit.xDigitToInt(s.charAt(i+4),0)&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884586807
GPR[SPVAP]-1659884586807
GPR[EPVAP]-1659884588801
GPR[EPVS]-1659884588801
========
if(excerpt.equals(LINE)&&0<=charno&&0<=Kit.xDigitToInt(sourceExcerpt.charAt(i+5),0)){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884588802
GPR[SPVAP]-1659884588802
GPR[EPVAP]-1659884590562
GPR[EPVS]-1659884590562
========
if(excerpt.equals(LINE)&&0<=Kit.xDigitToInt(sourceExcerpt.charAt(i+4),0)&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884590563
GPR[SPVAP]-1659884590563
GPR[EPVAP]-1659884592632
GPR[EPVS]-1659884592632
========
if(excerpt.equals(LINE)&&0<=charno&&b.charAt(i)<='9'){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884592634
GPR[SPVAP]-1659884592634
GPR[EPVAP]-1659884594380
GPR[EPVS]-1659884594380
========
if(excerpt.equals(LINE)&&0<=charno&&braceNesting<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884594382
GPR[SPVAP]-1659884594382
GPR[EPVAP]-1659884596135
GPR[EPVS]-1659884596135
========
b.append(sourceExcerpt);
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884596136
GPR[SPVAP]-1659884596136
GPR[EPVAP]-1659884599791
GPR[SPVATF]-1659884599791
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884603382
GPR[EPVS]-1659884603382
========
if(sourceExcerpt==null||input.length()==0){
return input;
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884603384
GPR[SPVAP]-1659884603384
GPR[EPVAP]-1659884605390
GPR[EPVS]-1659884605390
========
b.append('_');
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884605392
GPR[SPVAP]-1659884605392
GPR[EPVAP]-1659884609286
GPR[SPVATF]-1659884609286
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884612911
GPR[EPVS]-1659884612911
========
b.append(Long.toHexString(c));
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884612912
GPR[SPVAP]-1659884612912
GPR[EPVAP]-1659884614663
GPR[EPVS]-1659884614663
========
if(sourceExcerpt.length()>3&&(s.charAt(0)=='-'||s.charAt(0)=='+')&&s.charAt(1)=='0'&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884614665
GPR[SPVAP]-1659884614665
GPR[EPVAP]-1659884616400
GPR[EPVS]-1659884616400
========
c=sourceExcerpt.charAt(str.length()-1);
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884616402
GPR[SPVAP]-1659884616402
GPR[EPVAP]-1659884618190
GPR[EPVS]-1659884618190
========
i+=sourceExcerpt.length();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884618191
GPR[SPVAP]-1659884618191
GPR[EPVAP]-1659884620036
GPR[EPVS]-1659884620036
========
if(excerpt.equals(LINE)&&0<=charno&&token<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884620037
GPR[SPVAP]-1659884620037
GPR[EPVAP]-1659884621776
GPR[EPVS]-1659884621776
========
append((char)charno);
if(excerpt.equals(LINE)&&0<=charno&&charno<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884621777
GPR[SPVAP]-1659884621777
GPR[EPVAP]-1659884623776
GPR[EPVS]-1659884623776
========
append((char)charno);
if(excerpt.equals(LINE)&&0<=charno&&charno<=Token.LAST_TOKEN){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884623777
GPR[SPVAP]-1659884623777
GPR[EPVAP]-1659884625524
GPR[EPVS]-1659884625524
========
append((char)charno);
if(excerpt.equals(LINE)&&0<=charno&&token<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884625525
GPR[SPVAP]-1659884625525
GPR[EPVAP]-1659884627421
GPR[EPVS]-1659884627421
========
append((char)charno);
if(excerpt.equals(LINE)&&0<=charno&&token<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884627422
GPR[SPVAP]-1659884627422
GPR[EPVAP]-1659884629625
GPR[EPVS]-1659884629626
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
pattern.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884629627
GPR[SPVAP]-1659884629627
GPR[EPVAP]-1659884631361
GPR[EPVS]-1659884631361
========
if(excerpt.equals(LINE)&&0<=charno&&index<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884631363
GPR[SPVAP]-1659884631363
GPR[EPVAP]-1659884633137
GPR[EPVS]-1659884633138
========
if(excerpt.equals(LINE)&&0<=charno&&charno<str.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884633139
GPR[SPVAP]-1659884633139
GPR[EPVAP]-1659884635193
GPR[EPVS]-1659884635193
========
if(excerpt.equals(LINE)&&0<=charno&&charno<=9){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884635195
GPR[SPVAP]-1659884635195
GPR[EPVAP]-1659884639084
GPR[SPVATF]-1659884639084
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884642419
GPR[EPVS]-1659884642419
========
if(excerpt.equals(LINE)&&0<=charno&&c<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884642420
GPR[SPVAP]-1659884642420
GPR[EPVAP]-1659884644164
GPR[EPVS]-1659884644164
========
if(excerpt.equals(LINE)&&0<=charno&&start<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884644166
GPR[SPVAP]-1659884644166
GPR[EPVAP]-1659884646099
GPR[EPVS]-1659884646099
========
if(excerpt.equals(LINE)&&0<=charno&&charno<stringAsString.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884646100
GPR[SPVAP]-1659884646100
GPR[EPVAP]-1659884648030
GPR[EPVS]-1659884648030
========
if(sourceExcerpt.length()>2&&s.charAt(0)=='0'&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884648031
GPR[SPVAP]-1659884648031
GPR[EPVAP]-1659884649780
GPR[EPVS]-1659884649780
========
if(excerpt.equals(LINE)&&0<=charno&&nSlashes<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884649782
GPR[SPVAP]-1659884649782
GPR[EPVAP]-1659884651688
GPR[EPVS]-1659884651689
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=pattern.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884651690
GPR[SPVAP]-1659884651690
GPR[EPVAP]-1659884653416
GPR[EPVS]-1659884653416
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
capturing=false;
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884653417
GPR[SPVAP]-1659884653417
GPR[EPVAP]-1659884655180
GPR[EPVS]-1659884655180
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
swtich (b.charAt(i+1)){
case ':' :
pos+=2;
break;

case '=' :
pos+=2;
type=b.charAt(i+1);
break;

}
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884655181
GPR[SPVAP]-1659884655181
GPR[EPVAP]-1659884656839
GPR[EPVS]-1659884656839
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
capturing=false;
swtich (b.charAt(i+1)){
case ':' :
pos+=2;
break;

case '=' :
pos+=2;
type=b.charAt(i+1);
break;

}

char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884656841
GPR[SPVAP]-1659884656841
GPR[EPVAP]-1659884658785
GPR[EPVS]-1659884658785
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
size+=charno;
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884658786
GPR[SPVAP]-1659884658786
GPR[EPVAP]-1659884660710
GPR[EPVS]-1659884660710
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.appendStringPart("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884660711
GPR[SPVAP]-1659884660711
GPR[EPVAP]-1659884662549
GPR[EPVS]-1659884662549
========
if(i<sourceExcerpt.length()){
value=value.substring(nextPos);
}else {
return ;
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884662551
GPR[SPVAP]-1659884662551
GPR[EPVAP]-1659884664322
GPR[EPVS]-1659884664322
========
if(excerpt.equals(LINE)&&0<=charno&&len<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884664324
GPR[SPVAP]-1659884664324
GPR[EPVAP]-1659884666264
GPR[EPVS]-1659884666264
========
if(warning){
if(warning){
startNewLine();
sawFunction=false;
}
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884666265
GPR[SPVAP]-1659884666265
GPR[EPVAP]-1659884668009
GPR[EPVS]-1659884668009
========
maybeCutLine();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884668010
GPR[SPVAP]-1659884668010
GPR[EPVAP]-1659884669979
GPR[EPVS]-1659884669979
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
iArgumentType=getJSType(c).restrictByNotNullOrUndefined();
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884669984
GPR[SPVAP]-1659884669984
GPR[EPVAP]-1659884672070
GPR[EPVS]-1659884672070
========
if(excerpt.equals(LINE)&&0<charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884672072
GPR[SPVAP]-1659884672072
GPR[EPVAP]-1659884675898
GPR[SPVATF]-1659884675898
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884679247
GPR[EPVS]-1659884679247
========
if((i+charno)>sourceExcerpt.length()||(length<0)&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884679248
GPR[SPVAP]-1659884679248
GPR[EPVAP]-1659884681137
GPR[EPVS]-1659884681137
========
if(excerpt.equals(LINE)&&0<=charno&&tt<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884681141
GPR[SPVAP]-1659884681141
GPR[EPVAP]-1659884682918
GPR[EPVS]-1659884682918
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<indices1.length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884682920
GPR[SPVAP]-1659884682920
GPR[EPVAP]-1659884684653
GPR[EPVS]-1659884684653
========
if(excerpt.equals(LINE)&&0<=charno&&i<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884684654
GPR[SPVAP]-1659884684654
GPR[EPVAP]-1659884686653
GPR[EPVS]-1659884686653
========
if(excerpt.equals(LINE)&&0<=charno&&entry<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884686655
GPR[SPVAP]-1659884686655
GPR[EPVAP]-1659884688418
GPR[EPVS]-1659884688418
========
if(excerpt.equals(LINE)&&0<=charno&&pattern<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884688421
GPR[SPVAP]-1659884688421
GPR[EPVAP]-1659884690451
GPR[EPVS]-1659884690451
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
if(prop.mutatorCount>=charno){
prop.aliasMutator=true;
}
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884690456
GPR[SPVAP]-1659884690456
GPR[EPVAP]-1659884692469
GPR[EPVS]-1659884692470
========
if(excerpt.equals(LINE)&&0<=charno&&excerpt.charAt(i)<='9'){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884692472
GPR[SPVAP]-1659884692472
GPR[EPVAP]-1659884694543
GPR[EPVS]-1659884694543
========
if(excerpt.equals(LINE)&&0<=charno&&hash<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884694546
GPR[SPVAP]-1659884694546
GPR[EPVAP]-1659884696394
GPR[EPVS]-1659884696394
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.checkState("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884696395
GPR[SPVAP]-1659884696395
GPR[EPVAP]-1659884698443
GPR[EPVS]-1659884698444
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
preceder=null;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884698445
GPR[SPVAP]-1659884698445
GPR[EPVAP]-1659884700204
GPR[EPVS]-1659884700204
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
++i;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884700205
GPR[SPVAP]-1659884700205
GPR[EPVAP]-1659884701975
GPR[EPVS]-1659884701975
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
preceder=null;
++i;

for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884701976
GPR[SPVAP]-1659884701976
GPR[EPVAP]-1659884703765
GPR[EPVS]-1659884703766
========
if(members.length==0){
return new int[0];
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884703768
GPR[SPVAP]-1659884703768
GPR[EPVAP]-1659884705544
GPR[EPVS]-1659884705544
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
compiler.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884705549
GPR[SPVAP]-1659884705549
GPR[EPVAP]-1659884707586
GPR[EPVS]-1659884707586
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.report("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884707587
GPR[SPVAP]-1659884707587
GPR[EPVAP]-1659884709369
GPR[EPVS]-1659884709369
========
i=2;
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884709371
GPR[SPVAP]-1659884709371
GPR[EPVAP]-1659884711121
GPR[EPVS]-1659884711121
========
charno=sourceExcerpt.indexOf('.',i+11);
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884711122
GPR[SPVAP]-1659884711122
GPR[EPVAP]-1659884713162
GPR[EPVS]-1659884713162
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
callNodeToParentMap.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884713164
GPR[SPVAP]-1659884713164
GPR[EPVAP]-1659884715124
GPR[EPVS]-1659884715124
========
if(excerpt.equals(LINE)&&0<=charno&&parentType<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884715127
GPR[SPVAP]-1659884715127
GPR[EPVAP]-1659884717152
GPR[EPVS]-1659884717152
========
if(excerpt.equals(LINE)&&0<=charno&&CALL<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884717153
GPR[SPVAP]-1659884717153
GPR[EPVAP]-1659884718898
GPR[EPVS]-1659884718898
========
if(excerpt.equals(LINE)&&0<=charno&&charno<=Token.LAST_ASSIGN){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884718900
GPR[SPVAP]-1659884718900
GPR[EPVAP]-1659884720646
GPR[EPVS]-1659884720646
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
consumeToken();
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884720647
GPR[SPVAP]-1659884720647
GPR[EPVAP]-1659884722544
GPR[EPVS]-1659884722544
========
if(excerpt.equals(LINE)&&0<=charno&&tt<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884722545
GPR[SPVAP]-1659884722545
GPR[EPVAP]-1659884724590
GPR[EPVS]-1659884724590
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
if(ScriptRuntime.isJSLineTerminator(charno)){
lineEndChar=charno;
c='\n';
}
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884724592
GPR[SPVAP]-1659884724592
GPR[EPVAP]-1659884726350
GPR[EPVS]-1659884726350
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
newLiteralNode=new Node(Token.ARRAYLIT);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884726352
GPR[SPVAP]-1659884726352
GPR[EPVAP]-1659884728273
GPR[EPVS]-1659884728273
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
k+=charno-i;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884728275
GPR[SPVAP]-1659884728275
GPR[EPVAP]-1659884730039
GPR[EPVS]-1659884730039
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
lineEndChar=-1;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884730041
GPR[SPVAP]-1659884730041
GPR[EPVAP]-1659884731811
GPR[EPVS]-1659884731811
========
if(excerpt.equals(LINE)&&0<=charno&&charno<=Ten_pmax){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884731813
GPR[SPVAP]-1659884731813
GPR[EPVAP]-1659884733879
GPR[EPVS]-1659884733879
========
if(excerpt.equals(LINE)&&0<=charno&&k<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884733880
GPR[SPVAP]-1659884733880
GPR[EPVAP]-1659884735930
GPR[EPVS]-1659884735930
========
if(i==0){
return Empty.INSTANCE;
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884735932
GPR[SPVAP]-1659884735932
GPR[EPVAP]-1659884737678
GPR[EPVS]-1659884737678
========
if(excerpt.equals(LINE)&&0<=charno&&last<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884737680
GPR[SPVAP]-1659884737680
GPR[EPVAP]-1659884739437
GPR[EPVS]-1659884739437
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
compiler.report("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884739439
GPR[SPVAP]-1659884739439
GPR[EPVAP]-1659884741239
GPR[EPVS]-1659884741239
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
if(false){
lookAhead=null;
return ;
}
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884741241
GPR[SPVAP]-1659884741241
GPR[EPVAP]-1659884742993
GPR[EPVS]-1659884742994
========
if(excerpt.equals(LINE)&&0<=charno&&sourceExcerpt.charAt(c)<='9'){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884742995
GPR[SPVAP]-1659884742995
GPR[EPVAP]-1659884744739
GPR[EPVS]-1659884744739
========
if(excerpt.equals(LINE)&&0<=charno&&charno-charno<Byte.MIN_VALUE){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884744740
GPR[SPVAP]-1659884744740
GPR[EPVAP]-1659884748546
GPR[SPVATF]-1659884748546
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884751872
GPR[EPVS]-1659884751872
========
if(excerpt.equals(LINE)&&0<=charno&&charno-charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884751873
GPR[SPVAP]-1659884751873
GPR[EPVAP]-1659884755608
GPR[SPVATF]-1659884755608
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine2
MM: Failing tests: 0
GPR[EPVATF]-1659884763282
GPR[SPVATR]-1659884763282
TESTING : closure_62
MM messageFailing tests: 0
GPR[EPVATR]-1659884813627
GPR[EPVS]-1659884813627
GPR[PF]-1659884813627
sourceFile  script/workingdir/SimFix/closure/closure_62_buggy/src/com/google/javascript/jscomp/LightweightMessageFormatter.java
location   script/workingdir/SimFix/closure/closure_62_buggy
MM Out patch at /experiment_home///results/SimFix/Closure/62/seed_262/patch/closure/62/0/patch_2938162_2_ts_1659884813627.diff
MM Command diff diff -w -b  --label=/src/com/google/javascript/jscomp/LightweightMessageFormatter.java --label=/src/com/google/javascript/jscomp/LightweightMessageFormatter.java /tmp/tmpDirMM1221801748830083463/LightweightMessageFormatter.java  /experiment_home///results/SimFix/Closure/62/seed_262/patch/closure/62/0/2_LightweightMessageFormatter.java  --unified=3  > /experiment_home///results/SimFix/Closure/62/seed_262/patch/closure/62/0/patch_2938162_2_ts_1659884813627.diff
MMOut command diff: []
========
if(excerpt.equals(LINE)&&0<=charno&&mappingID<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884813639
GPR[SPVAP]-1659884813639
GPR[EPVAP]-1659884815439
GPR[EPVS]-1659884815439
========
if(excerpt.equals(LINE)&&0<=charno&&lastID<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884815441
GPR[SPVAP]-1659884815441
GPR[EPVAP]-1659884817276
GPR[EPVS]-1659884817276
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
startID=charno;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884817277
GPR[SPVAP]-1659884817277
GPR[EPVAP]-1659884819096
GPR[EPVS]-1659884819096
========
if(excerpt.equals(LINE)&&0<=charno&&charno<='9'){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884819103
GPR[SPVAP]-1659884819103
GPR[EPVAP]-1659884822833
GPR[SPVATF]-1659884822833
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine2
MM: Failing tests: 0
GPR[EPVATF]-1659884830426
GPR[SPVATR]-1659884830426
TESTING : closure_62
MM messageFailing tests: 0
GPR[EPVATR]-1659884880120
GPR[EPVS]-1659884880120
GPR[PF]-1659884880120
sourceFile  script/workingdir/SimFix/closure/closure_62_buggy/src/com/google/javascript/jscomp/LightweightMessageFormatter.java
location   script/workingdir/SimFix/closure/closure_62_buggy
MM Out patch at /experiment_home///results/SimFix/Closure/62/seed_262/patch/closure/62/0/patch_3004653_3_ts_1659884880120.diff
MM Command diff diff -w -b  --label=/src/com/google/javascript/jscomp/LightweightMessageFormatter.java --label=/src/com/google/javascript/jscomp/LightweightMessageFormatter.java /tmp/tmpDirMM6388156700707908405/LightweightMessageFormatter.java  /experiment_home///results/SimFix/Closure/62/seed_262/patch/closure/62/0/3_LightweightMessageFormatter.java  --unified=3  > /experiment_home///results/SimFix/Closure/62/seed_262/patch/closure/62/0/patch_3004653_3_ts_1659884880120.diff
MMOut command diff: []
========
if(excerpt.equals(LINE)&&0<=charno&&digit<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884880128
GPR[SPVAP]-1659884880128
GPR[EPVAP]-1659884882121
GPR[EPVS]-1659884882121
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
radix=16;
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884882122
GPR[SPVAP]-1659884882122
GPR[EPVAP]-1659884883906
GPR[EPVS]-1659884883906
========
if(excerpt.equals(LINE)&&0<=charno&&charno<0){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884883908
GPR[SPVAP]-1659884883908
GPR[EPVAP]-1659884887699
GPR[SPVATF]-1659884887699
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884891194
GPR[EPVS]-1659884891194
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
i+=2;
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884891196
GPR[SPVAP]-1659884891196
GPR[EPVAP]-1659884893176
GPR[EPVS]-1659884893176
========
if((i==null)||!NodeUtil.isFunction(functionNode)){
return false;
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884893177
GPR[SPVAP]-1659884893177
GPR[EPVAP]-1659884895222
GPR[EPVS]-1659884895223
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.add("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884895224
GPR[SPVAP]-1659884895224
GPR[EPVAP]-1659884897206
GPR[EPVS]-1659884897206
========
if(excerpt.equals(LINE)&&0<=MAX_VALUE&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884897208
GPR[SPVAP]-1659884897208
GPR[EPVAP]-1659884899181
GPR[EPVS]-1659884899181
========
if(excerpt.equals(LINE)&&0<=charno&&line<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884899182
GPR[SPVAP]-1659884899182
GPR[EPVAP]-1659884900928
GPR[EPVS]-1659884900928
========
if(excerpt.equals(LINE)&&0<=charno&&lastLine<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884900929
GPR[SPVAP]-1659884900929
GPR[EPVAP]-1659884902673
GPR[EPVS]-1659884902673
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
currentFile=sourceExcerpt;
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884902674
GPR[SPVAP]-1659884902674
GPR[EPVAP]-1659884904419
GPR[EPVS]-1659884904419
========
if(excerpt.equals(LINE)&&0<=charno&&pos<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884904422
GPR[SPVAP]-1659884904422
GPR[EPVAP]-1659884906224
GPR[EPVS]-1659884906224
========
if(excerpt.equals(LINE)&&0<=charno&&charno<line.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884906225
GPR[SPVAP]-1659884906225
GPR[EPVAP]-1659884908013
GPR[EPVS]-1659884908013
========
if(sourceExcerpt==null||!"goog.now".equals(googNowQName)&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884908014
GPR[SPVAP]-1659884908014
GPR[EPVAP]-1659884910024
GPR[EPVS]-1659884910024
========
case 1 :
charno=charno=-1;
i=18;
charno=0;
break;

if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884910028
GPR[SPVAP]-1659884910028
GPR[EPVAP]-1659884911692
GPR[EPVS]-1659884911692
========
case 2 :

if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884911693
GPR[SPVAP]-1659884911693
GPR[EPVAP]-1659884913485
GPR[EPVS]-1659884913485
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
intersection=new int[charno*2];
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884913487
GPR[SPVAP]-1659884913487
GPR[EPVAP]-1659884915239
GPR[EPVS]-1659884915239
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
difference=new int[charno*2];
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884915241
GPR[SPVAP]-1659884915241
GPR[EPVAP]-1659884917307
GPR[EPVS]-1659884917307
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
stringBuffer=new char[stringBuffer.length*2];
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884917308
GPR[SPVAP]-1659884917308
GPR[EPVAP]-1659884919043
GPR[EPVS]-1659884919043
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
buffer=new char[buffer.length*2];
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884919044
GPR[SPVAP]-1659884919044
GPR[EPVAP]-1659884921105
GPR[EPVS]-1659884921105
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
buffer=new byte[buffer.length*2];
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884921107
GPR[SPVAP]-1659884921107
GPR[EPVAP]-1659884922932
GPR[EPVS]-1659884922932
========
if(i<charno){
newCapacity=minimalCapacity;
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884922933
GPR[SPVAP]-1659884922933
GPR[EPVAP]-1659884924723
GPR[EPVS]-1659884924723
========
if(i<0){
return false;
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884924725
GPR[SPVAP]-1659884924725
GPR[EPVAP]-1659884926749
GPR[EPVS]-1659884926749
========
if(excerpt.equals(LINE)&&0<=charno&&lineno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884926750
GPR[SPVAP]-1659884926750
GPR[EPVAP]-1659884928673
GPR[EPVS]-1659884928673
========
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
abstractMethodAssignmentNodes.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884928677
GPR[SPVAP]-1659884928677
GPR[EPVAP]-1659884930435
GPR[EPVS]-1659884930435
========
Preconditions.checkState(parts.length==1||parts.length==2);
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884930437
GPR[SPVAP]-1659884930437
GPR[EPVAP]-1659884932510
GPR[EPVS]-1659884932510
========
if(excerpt.equals(LINE)&&0<=charno&&charno<s.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884932513
GPR[SPVAP]-1659884932513
GPR[EPVAP]-1659884934598
GPR[EPVS]-1659884934598
========
if(excerpt.equals(LINE)&&0<=charno&&next<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884934599
GPR[SPVAP]-1659884934599
GPR[EPVAP]-1659884936561
GPR[EPVS]-1659884936561
========
default :

if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884936562
GPR[SPVAP]-1659884936562
GPR[EPVAP]-1659884938484
GPR[EPVS]-1659884938484
========
if(excerpt.equals(LINE)&&0<=charno&&charno<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884938485
GPR[SPVAP]-1659884938485
GPR[EPVAP]-1659884940466
GPR[EPVS]-1659884940466
========
if(excerpt.equals(LINE)&&0<=charno&&charno<='9'){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884940467
GPR[SPVAP]-1659884940467
GPR[EPVAP]-1659884942460
GPR[EPVS]-1659884942460
========
if(excerpt.equals(LINE)&&0<=charno&&next<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884942461
GPR[SPVAP]-1659884942461
GPR[EPVAP]-1659884944486
GPR[EPVS]-1659884944486
========
default :

if(excerpt.equals(LINE)&&0<=charno&&charno<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884944488
GPR[SPVAP]-1659884944488
GPR[EPVAP]-1659884946127
GPR[EPVS]-1659884946127
========
default :

if(excerpt.equals(LINE)&&0<=charno&&charno<='9'){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884946128
GPR[SPVAP]-1659884946128
GPR[EPVAP]-1659884948076
GPR[EPVS]-1659884948076
========
if(excerpt.equals(LINE)&&0<=charno&&next<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884948077
GPR[SPVAP]-1659884948077
GPR[EPVAP]-1659884949843
GPR[EPVS]-1659884949843
========
default :

if(excerpt.equals(LINE)&&0<=charno&&next<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884949845
GPR[SPVAP]-1659884949845
GPR[EPVAP]-1659884951769
GPR[EPVS]-1659884951770
========
default :

if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884951771
GPR[SPVAP]-1659884951771
GPR[EPVAP]-1659884953701
GPR[EPVS]-1659884953701
========
if(excerpt.equals(LINE)&&0<=charno&&next<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884953702
GPR[SPVAP]-1659884953702
GPR[EPVAP]-1659884955545
GPR[EPVS]-1659884955545
========
default :

if(excerpt.equals(LINE)&&0<=charno&&next<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884955546
GPR[SPVAP]-1659884955546
GPR[EPVAP]-1659884957176
GPR[EPVS]-1659884957176
========
default :

if(excerpt.equals(LINE)&&0<=charno&&charno<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884957177
GPR[SPVAP]-1659884957177
GPR[EPVAP]-1659884958825
GPR[EPVS]-1659884958825
========
default :

if(excerpt.equals(LINE)&&0<=charno&&charno<='9'){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884958826
GPR[SPVAP]-1659884958826
GPR[EPVAP]-1659884960777
GPR[EPVS]-1659884960777
========
default :

if(excerpt.equals(LINE)&&0<=charno&&next<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884960779
GPR[SPVAP]-1659884960779
GPR[EPVAP]-1659884962399
GPR[EPVS]-1659884962399
========
default :

if(excerpt.equals(LINE)&&0<=charno&&next<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884962400
GPR[SPVAP]-1659884962400
GPR[EPVAP]-1659884964064
GPR[EPVS]-1659884964065
========
if(excerpt.equals(LINE)&&0<=charno&&length<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884964066
GPR[SPVAP]-1659884964066
GPR[EPVAP]-1659884965977
GPR[EPVS]-1659884965977
========
sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884969214
GPR[SPVAP]-1659884969214
GPR[EPVAP]-1659884971266
GPR[EPVS]-1659884971267
========
b.append('\n');
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884971268
GPR[SPVAP]-1659884971268
GPR[EPVAP]-1659884975191
GPR[SPVATF]-1659884975191
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884978536
GPR[EPVS]-1659884978536
========
if(!warning){
b.append("  not_greedy");
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884978539
GPR[SPVAP]-1659884978539
GPR[EPVAP]-1659884982277
GPR[SPVATF]-1659884982277
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659884986253
GPR[EPVS]-1659884986253
========
if(!warning){
b.append("  not_greedy");
}
sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884986254
GPR[SPVAP]-1659884986254
GPR[EPVAP]-1659884988228
GPR[EPVS]-1659884988228
========
builder.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884988230
GPR[SPVAP]-1659884988230
GPR[EPVAP]-1659884990223
GPR[EPVS]-1659884990223
========
sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884990224
GPR[SPVAP]-1659884990224
GPR[EPVAP]-1659884991992
GPR[EPVS]-1659884991992
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884991993
GPR[SPVAP]-1659884991993
GPR[EPVAP]-1659884993822
GPR[EPVS]-1659884993822
========
b.append(']');
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659884993823
GPR[SPVAP]-1659884993823
GPR[EPVAP]-1659884997922
GPR[SPVATF]-1659884997922
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885002002
GPR[EPVS]-1659885002002
========
b.append(']');
sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885002003
GPR[SPVAP]-1659885002003
GPR[EPVAP]-1659885004087
GPR[EPVS]-1659885004087
========
c=charno++;
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885004089
GPR[SPVAP]-1659885004089
GPR[EPVAP]-1659885005870
GPR[EPVS]-1659885005870
========
b.append('[');
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885005871
GPR[SPVAP]-1659885005871
GPR[EPVAP]-1659885009745
GPR[SPVATF]-1659885009745
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885013353
GPR[EPVS]-1659885013353
========
if(warning){
b.append('^');
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885013354
GPR[SPVAP]-1659885013354
GPR[EPVAP]-1659885017402
GPR[SPVATF]-1659885017402
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885020733
GPR[EPVS]-1659885020733
========
b.append('[');
sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885020734
GPR[SPVAP]-1659885020734
GPR[EPVAP]-1659885022769
GPR[EPVS]-1659885022769
========
if(warning){
b.append('^');
}
sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885022770
GPR[SPVAP]-1659885022770
GPR[EPVAP]-1659885024505
GPR[EPVS]-1659885024505
========
b.append('[');
if(warning){
b.append('^');
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885024506
GPR[SPVAP]-1659885024506
GPR[EPVAP]-1659885028385
GPR[SPVATF]-1659885028385
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885032022
GPR[EPVS]-1659885032022
========
b.append('[');
if(warning){
b.append('^');
}
sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885032024
GPR[SPVAP]-1659885032024
GPR[EPVAP]-1659885034047
GPR[EPVS]-1659885034047
========
b.append(INDENT);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885034049
GPR[SPVAP]-1659885034049
GPR[EPVAP]-1659885036199
GPR[EPVS]-1659885036199
========
b.append(" {\n");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885036201
GPR[SPVAP]-1659885036201
GPR[EPVAP]-1659885040033
GPR[SPVATF]-1659885040033
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885043762
GPR[EPVS]-1659885043762
========
b.append("node [color=lightblue2, style=filled];\n");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885043763
GPR[SPVAP]-1659885043763
GPR[EPVAP]-1659885047824
GPR[SPVATF]-1659885047825
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885051883
GPR[EPVS]-1659885051883
========
b.append(" {\n");
builder.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885051884
GPR[SPVAP]-1659885051884
GPR[EPVAP]-1659885053895
GPR[EPVS]-1659885053895
========
b.append("node [color=lightblue2, style=filled];\n");
builder.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885053896
GPR[SPVAP]-1659885053896
GPR[EPVAP]-1659885055748
GPR[EPVS]-1659885055748
========
b.append(" {\n");
b.append("node [color=lightblue2, style=filled];\n");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885055749
GPR[SPVAP]-1659885055749
GPR[EPVAP]-1659885059564
GPR[SPVATF]-1659885059564
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885062808
GPR[EPVS]-1659885062808
========
b.append(" {\n");
b.append("node [color=lightblue2, style=filled];\n");
builder.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885062809
GPR[SPVAP]-1659885062809
GPR[EPVAP]-1659885064588
GPR[EPVS]-1659885064588
========
buf.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885064590
GPR[SPVAP]-1659885064590
GPR[EPVAP]-1659885066351
GPR[EPVS]-1659885066351
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885066352
GPR[SPVAP]-1659885066352
GPR[EPVAP]-1659885070220
GPR[SPVATF]-1659885070220
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 0
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine2
MM: Failing tests: 0
GPR[EPVATF]-1659885077862
GPR[SPVATR]-1659885077863
TESTING : closure_62
MM messageFailing tests: 0
GPR[EPVATR]-1659885127281
GPR[EPVS]-1659885127281
GPR[PF]-1659885127281
sourceFile  script/workingdir/SimFix/closure/closure_62_buggy/src/com/google/javascript/jscomp/LightweightMessageFormatter.java
location   script/workingdir/SimFix/closure/closure_62_buggy
MM Out patch at /experiment_home///results/SimFix/Closure/62/seed_262/patch/closure/62/0/patch_3251814_4_ts_1659885127281.diff
MM Command diff diff -w -b  --label=/src/com/google/javascript/jscomp/LightweightMessageFormatter.java --label=/src/com/google/javascript/jscomp/LightweightMessageFormatter.java /tmp/tmpDirMM5175406878232984652/LightweightMessageFormatter.java  /experiment_home///results/SimFix/Closure/62/seed_262/patch/closure/62/0/4_LightweightMessageFormatter.java  --unified=3  > /experiment_home///results/SimFix/Closure/62/seed_262/patch/closure/62/0/patch_3251814_4_ts_1659885127281.diff
MMOut command diff: []
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<=0){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885127289
GPR[SPVAP]-1659885127289
GPR[EPVAP]-1659885131376
GPR[SPVATF]-1659885131376
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885135152
GPR[EPVS]-1659885135152
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&lineNumber<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885135153
GPR[SPVAP]-1659885135153
GPR[EPVAP]-1659885137211
GPR[EPVS]-1659885137211
========
if(sourceExcerpt!=null){
b.append(sourceName);
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885137212
GPR[SPVAP]-1659885137212
GPR[EPVAP]-1659885138967
GPR[EPVS]-1659885138967
========
if(charno>0){
b.append('#');
buf.append(lineNumber);
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885138968
GPR[SPVAP]-1659885138968
GPR[EPVAP]-1659885140726
GPR[EPVS]-1659885140726
========
b.append(')');
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885140727
GPR[SPVAP]-1659885140727
GPR[EPVAP]-1659885144339
GPR[SPVATF]-1659885144339
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885147817
GPR[EPVS]-1659885147817
========
b.append(')');
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<=0){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885147818
GPR[SPVAP]-1659885147818
GPR[EPVAP]-1659885151432
GPR[SPVATF]-1659885151432
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885155070
GPR[EPVS]-1659885155070
========
b.append('\n');
int charno=error.getCharno();
b.append("{");
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885155072
GPR[SPVAP]-1659885155072
GPR[EPVAP]-1659885158654
GPR[SPVATF]-1659885158654
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885162158
GPR[EPVS]-1659885162159
========
b.append('\n');
int charno=error.getCharno();
b.append("{");
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
sb.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885162160
GPR[SPVAP]-1659885162160
GPR[EPVAP]-1659885163914
GPR[EPVS]-1659885163914
========
b.add('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885163915
GPR[SPVAP]-1659885163915
GPR[EPVAP]-1659885165767
GPR[EPVS]-1659885165767
========
debug.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885165768
GPR[SPVAP]-1659885165768
GPR[EPVAP]-1659885167551
GPR[EPVS]-1659885167551
========
b.append("}\n");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885167553
GPR[SPVAP]-1659885167553
GPR[EPVAP]-1659885171297
GPR[SPVATF]-1659885171297
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885174578
GPR[EPVS]-1659885174578
========
out.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
out.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885174580
GPR[SPVAP]-1659885174580
GPR[EPVAP]-1659885176622
GPR[EPVS]-1659885176622
========
out.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885176623
GPR[SPVAP]-1659885176623
GPR[EPVAP]-1659885178590
GPR[EPVS]-1659885178590
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
out.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885178591
GPR[SPVAP]-1659885178591
GPR[EPVAP]-1659885180585
GPR[EPVS]-1659885180585
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
b.append(" - FUNCTIONS: ");
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885180586
GPR[SPVAP]-1659885180586
GPR[EPVAP]-1659885184286
GPR[SPVATF]-1659885184286
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885187651
GPR[EPVS]-1659885187651
========
b.append("): ");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885187653
GPR[SPVAP]-1659885187653
GPR[EPVAP]-1659885191300
GPR[SPVATF]-1659885191300
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885194956
GPR[EPVS]-1659885194956
========
b.append(call.returnType);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885194957
GPR[SPVAP]-1659885194957
GPR[EPVAP]-1659885196722
GPR[EPVS]-1659885196722
========
code.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885196724
GPR[SPVAP]-1659885196724
GPR[EPVAP]-1659885198454
GPR[EPVS]-1659885198454
========
result.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885198455
GPR[SPVAP]-1659885198455
GPR[EPVAP]-1659885200218
GPR[EPVS]-1659885200218
========
b.append(")");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885200219
GPR[SPVAP]-1659885200219
GPR[EPVAP]-1659885204042
GPR[SPVATF]-1659885204042
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885207393
GPR[EPVS]-1659885207393
========
b.append("</li>");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885207395
GPR[SPVAP]-1659885207395
GPR[EPVAP]-1659885211444
GPR[SPVATF]-1659885211444
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885215320
GPR[EPVS]-1659885215320
========
b.append("</ul></li>");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885215321
GPR[SPVAP]-1659885215321
GPR[EPVAP]-1659885219070
GPR[SPVATF]-1659885219070
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885222831
GPR[EPVS]-1659885222831
========
b.append("</li>");
sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885222832
GPR[SPVAP]-1659885222832
GPR[EPVAP]-1659885224879
GPR[EPVS]-1659885224879
========
b.append("</ul></li>");
sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885224880
GPR[SPVAP]-1659885224880
GPR[EPVAP]-1659885226632
GPR[EPVS]-1659885226632
========
b.append("</li>");
b.append("</ul></li>");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885226633
GPR[SPVAP]-1659885226633
GPR[EPVAP]-1659885230532
GPR[SPVATF]-1659885230533
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885233873
GPR[EPVS]-1659885233873
========
b.append("</li>");
b.append("</ul></li>");
sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885233875
GPR[SPVAP]-1659885233875
GPR[EPVAP]-1659885235642
GPR[EPVS]-1659885235642
========
appendSourceCode(b);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885235645
GPR[SPVAP]-1659885235645
GPR[EPVAP]-1659885237628
GPR[EPVS]-1659885237628
========
if(b.length()==1){
sb.append("(?:)");
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885237629
GPR[SPVAP]-1659885237629
GPR[EPVAP]-1659885239558
GPR[EPVS]-1659885239558
========
b.append('/');
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885239559
GPR[SPVAP]-1659885239559
GPR[EPVAP]-1659885243486
GPR[SPVATF]-1659885243486
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885247007
GPR[EPVS]-1659885247007
========
b.append('/');
sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885247008
GPR[SPVAP]-1659885247008
GPR[EPVAP]-1659885248766
GPR[EPVS]-1659885248766
========
b.substring('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885248768
GPR[SPVAP]-1659885248768
GPR[EPVAP]-1659885252551
GPR[SPVATF]-1659885252551
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885255901
GPR[EPVS]-1659885255901
========
b.append("  ");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885255902
GPR[SPVAP]-1659885255902
GPR[EPVAP]-1659885259626
GPR[SPVATF]-1659885259626
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885263604
GPR[EPVS]-1659885263604
========
b.append(Strings.repeat(" ",i));
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885263606
GPR[SPVAP]-1659885263606
GPR[EPVAP]-1659885265441
GPR[EPVS]-1659885265441
========
b.append(charno);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885265443
GPR[SPVAP]-1659885265443
GPR[EPVAP]-1659885267473
GPR[EPVS]-1659885267473
========
b.append("  ");
b.substring('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885267474
GPR[SPVAP]-1659885267474
GPR[EPVAP]-1659885271205
GPR[SPVATF]-1659885271205
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885274919
GPR[EPVS]-1659885274919
========
message.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885274920
GPR[SPVAP]-1659885274920
GPR[EPVAP]-1659885276913
GPR[EPVS]-1659885276914
========
namedGroups.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885276915
GPR[SPVAP]-1659885276915
GPR[EPVAP]-1659885278658
GPR[EPVS]-1659885278658
========
maybeEndStatement();
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885278660
GPR[SPVAP]-1659885278660
GPR[EPVAP]-1659885280420
GPR[EPVS]-1659885280420
========
appendOp(sourceExcerpt,warning);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885280421
GPR[SPVAP]-1659885280421
GPR[EPVAP]-1659885282155
GPR[EPVS]-1659885282155
========
if(warning){
maybeCutLine();
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885282156
GPR[SPVAP]-1659885282156
GPR[EPVAP]-1659885284298
GPR[EPVS]-1659885284298
========
b.append('\n');
int charno=error.getCharno();
maybeEndStatement();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885284302
GPR[SPVAP]-1659885284302
GPR[EPVAP]-1659885286277
GPR[EPVS]-1659885286277
========
append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885286278
GPR[SPVAP]-1659885286278
GPR[EPVAP]-1659885288410
GPR[EPVS]-1659885288410
========
b.charAt('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885288411
GPR[SPVAP]-1659885288411
GPR[EPVAP]-1659885292149
GPR[SPVATF]-1659885292149
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885295846
GPR[EPVS]-1659885295846
========
b.setLength('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885295848
GPR[SPVAP]-1659885295848
GPR[EPVAP]-1659885299855
GPR[SPVATF]-1659885299856
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885303782
GPR[EPVS]-1659885303782
========
b.checkState('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885303784
GPR[SPVAP]-1659885303784
GPR[EPVAP]-1659885305524
GPR[EPVS]-1659885305525
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<=Token.LAST_TOKEN){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885305526
GPR[SPVAP]-1659885305526
GPR[EPVAP]-1659885307537
GPR[EPVS]-1659885307537
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&token<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885307538
GPR[SPVAP]-1659885307538
GPR[EPVAP]-1659885309520
GPR[EPVS]-1659885309520
========
append((char)charno);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885309521
GPR[SPVAP]-1659885309521
GPR[EPVAP]-1659885311269
GPR[EPVS]-1659885311269
========
append((char)Token.EOL);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885311270
GPR[SPVAP]-1659885311270
GPR[EPVAP]-1659885313057
GPR[EPVS]-1659885313057
========
b.append("\n");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885313058
GPR[SPVAP]-1659885313058
GPR[EPVAP]-1659885316665
GPR[SPVATF]-1659885316665
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885319994
GPR[EPVS]-1659885319994
========
b.append("\n");
sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885319995
GPR[SPVAP]-1659885319995
GPR[EPVAP]-1659885321768
GPR[EPVS]-1659885321768
========
b.deleteCharAt(sb.length()-1);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885321770
GPR[SPVAP]-1659885321770
GPR[EPVAP]-1659885323690
GPR[EPVS]-1659885323691
========
b.append(")\\s*\\((.*?)\\)");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885323692
GPR[SPVAP]-1659885323692
GPR[EPVAP]-1659885327545
GPR[SPVATF]-1659885327545
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885331510
GPR[EPVS]-1659885331510
========
b.append(")\\s*\\((.*?)\\)");
sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885331511
GPR[SPVAP]-1659885331511
GPR[EPVAP]-1659885333265
GPR[EPVS]-1659885333265
========
appendFirstField(new StringBuilder(),"line",String.valueOf(charno));
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885333267
GPR[SPVAP]-1659885333267
GPR[EPVAP]-1659885335151
GPR[EPVS]-1659885335151
========
appendField(new StringBuilder(),"column",String.valueOf(charno));
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885335152
GPR[SPVAP]-1659885335152
GPR[EPVAP]-1659885336930
GPR[EPVS]-1659885336930
========
new StringBuilder().append("\n}");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885336931
GPR[SPVAP]-1659885336931
GPR[EPVAP]-1659885340560
GPR[SPVATF]-1659885340560
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885344429
GPR[EPVS]-1659885344429
========
new StringBuilder().append("\n}");
out.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885344431
GPR[SPVAP]-1659885344431
GPR[EPVAP]-1659885346187
GPR[EPVS]-1659885346187
========
if(warning&&charno==0)break;
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885346189
GPR[SPVAP]-1659885346189
GPR[EPVAP]-1659885348158
GPR[EPVS]-1659885348158
========
b.update('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885348160
GPR[SPVAP]-1659885348160
GPR[EPVAP]-1659885350213
GPR[EPVS]-1659885350213
========
if(charno==charno){
return b.toString();
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885350214
GPR[SPVAP]-1659885350214
GPR[EPVAP]-1659885352213
GPR[EPVS]-1659885352213
========
b.append('_');
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885352214
GPR[SPVAP]-1659885352214
GPR[EPVAP]-1659885356094
GPR[SPVATF]-1659885356094
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885359451
GPR[EPVS]-1659885359451
========
b.append(Long.toHexString(c));
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885359452
GPR[SPVAP]-1659885359452
GPR[EPVAP]-1659885361223
GPR[EPVS]-1659885361223
========
if(!excerpt.add(b.toString())){
encoded+="_"+charno;
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885361224
GPR[SPVAP]-1659885361224
GPR[EPVAP]-1659885363333
GPR[EPVS]-1659885363333
========
b.multiply('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885363334
GPR[SPVAP]-1659885363334
GPR[EPVAP]-1659885365354
GPR[EPVS]-1659885365354
========
sb.add('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885365355
GPR[SPVAP]-1659885365355
GPR[EPVAP]-1659885367136
GPR[EPVS]-1659885367136
========
append((char)FUNCTION_END);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885367138
GPR[SPVAP]-1659885367138
GPR[EPVAP]-1659885369210
GPR[EPVS]-1659885369210
========
b.append('\n');
int charno=error.getCharno();
if(sourceExcerpt==null||input.length()==0){
return input;
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885369211
GPR[SPVAP]-1659885369211
GPR[EPVAP]-1659885371015
GPR[EPVS]-1659885371015
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&token<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885371017
GPR[SPVAP]-1659885371017
GPR[EPVAP]-1659885373100
GPR[EPVS]-1659885373100
========
append((char)charno);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885373101
GPR[SPVAP]-1659885373101
GPR[EPVAP]-1659885374849
GPR[EPVS]-1659885374849
========
append((char)charno);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<=Token.LAST_TOKEN){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885374850
GPR[SPVAP]-1659885374850
GPR[EPVAP]-1659885376657
GPR[EPVS]-1659885376657
========
append((char)charno);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&token<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885376658
GPR[SPVAP]-1659885376658
GPR[EPVAP]-1659885378564
GPR[EPVS]-1659885378564
========
append((char)charno);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&token<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885378565
GPR[SPVAP]-1659885378565
GPR[EPVAP]-1659885380305
GPR[EPVS]-1659885380305
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=EOL&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885380306
GPR[SPVAP]-1659885380306
GPR[EPVAP]-1659885382104
GPR[EPVS]-1659885382104
========
new StringBuilder().append(sourceExcerpt);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885382105
GPR[SPVAP]-1659885382105
GPR[EPVAP]-1659885385976
GPR[SPVATF]-1659885385976
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885389230
GPR[EPVS]-1659885389230
========
addToken(Token.FUNCTION);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885389231
GPR[SPVAP]-1659885389231
GPR[EPVAP]-1659885391244
GPR[EPVS]-1659885391244
========
msg.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885391245
GPR[SPVAP]-1659885391245
GPR[EPVAP]-1659885393292
GPR[EPVS]-1659885393293
========
b.longBitsToDouble('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885393295
GPR[SPVAP]-1659885393295
GPR[EPVAP]-1659885395348
GPR[EPVS]-1659885395348
========
err.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885395351
GPR[SPVAP]-1659885395351
GPR[EPVAP]-1659885397086
GPR[EPVS]-1659885397086
========
b.println('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885397087
GPR[SPVAP]-1659885397087
GPR[EPVAP]-1659885399058
GPR[EPVS]-1659885399058
========
b.name('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885399059
GPR[SPVAP]-1659885399059
GPR[EPVAP]-1659885401100
GPR[EPVS]-1659885401100
========
if(i==-1){
charno=0;
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885401102
GPR[SPVAP]-1659885401102
GPR[EPVAP]-1659885403034
GPR[EPVS]-1659885403034
========
charno=mergeLineCharNo(charno,i);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885403035
GPR[SPVAP]-1659885403035
GPR[EPVAP]-1659885405099
GPR[EPVS]-1659885405099
========
b.append('\n');
int charno=error.getCharno();
charno+=sourceExcerpt.length();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885405100
GPR[SPVAP]-1659885405100
GPR[EPVAP]-1659885408911
GPR[SPVATF]-1659885408911
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885412521
GPR[EPVS]-1659885412522
========
b.charAt('\n');
int charno=error.getCharno();
charno+=sourceExcerpt.length();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885412523
GPR[SPVAP]-1659885412523
GPR[EPVAP]-1659885416178
GPR[SPVATF]-1659885416178
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885420209
GPR[EPVS]-1659885420209
========
guessingStatementEnd: for (; ; ) {
  int tt=peekTokenOrEOL();
  consumeToken();
switch (tt) {
case Token.ERROR:
case Token.EOF:
case Token.EOL:
case Token.SEMI:
    break guessingStatementEnd;
}
}

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885420211
GPR[SPVAP]-1659885420211
GPR[EPVAP]-1659885422248
GPR[EPVS]-1659885422248
========
pattern.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885422250
GPR[SPVAP]-1659885422250
GPR[EPVAP]-1659885423991
GPR[EPVS]-1659885423991
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&tt<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885424000
GPR[SPVAP]-1659885424000
GPR[EPVAP]-1659885425777
GPR[EPVS]-1659885425777
========
b.append('\n');
consumeToken();
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885425778
GPR[SPVAP]-1659885425778
GPR[EPVAP]-1659885427862
GPR[EPVS]-1659885427862
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&i<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885427864
GPR[SPVAP]-1659885427864
GPR[EPVAP]-1659885429938
GPR[EPVS]-1659885429938
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&index<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885429939
GPR[SPVAP]-1659885429939
GPR[EPVAP]-1659885431951
GPR[EPVS]-1659885431951
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<str.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885431952
GPR[SPVAP]-1659885431952
GPR[EPVAP]-1659885433725
GPR[EPVS]-1659885433725
========
b.getString('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885433726
GPR[SPVAP]-1659885433726
GPR[EPVAP]-1659885435763
GPR[EPVS]-1659885435763
========
b.valueAtColumn('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885435765
GPR[SPVAP]-1659885435765
GPR[EPVAP]-1659885437838
GPR[EPVS]-1659885437838
========
mustMatchToken(Token.WHILE,"msg.no.while.do");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885437841
GPR[SPVAP]-1659885437841
GPR[EPVAP]-1659885439610
GPR[EPVS]-1659885439610
========
matchToken(Token.SEMI);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885439611
GPR[SPVAP]-1659885439611
GPR[EPVAP]-1659885441566
GPR[EPVS]-1659885441566
========
b.appendStringPart('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885441567
GPR[SPVAP]-1659885441567
GPR[EPVAP]-1659885443316
GPR[EPVS]-1659885443316
========
if(i<sourceExcerpt.length()){
value=value.substring(nextPos);
}else {
return ;
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885443317
GPR[SPVAP]-1659885443317
GPR[EPVAP]-1659885445066
GPR[EPVS]-1659885445066
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&start<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885445067
GPR[SPVAP]-1659885445067
GPR[EPVAP]-1659885446820
GPR[EPVS]-1659885446820
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<stringAsString.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885446821
GPR[SPVAP]-1659885446821
GPR[EPVAP]-1659885448547
GPR[EPVS]-1659885448547
========
newName.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885448548
GPR[SPVAP]-1659885448548
GPR[EPVAP]-1659885450323
GPR[EPVS]-1659885450323
========
b.write('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885450325
GPR[SPVAP]-1659885450325
GPR[EPVAP]-1659885452090
GPR[EPVS]-1659885452090
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&nSlashes<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885452092
GPR[SPVAP]-1659885452092
GPR[EPVAP]-1659885454010
GPR[EPVS]-1659885454010
========
compiler.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885454012
GPR[SPVAP]-1659885454012
GPR[EPVAP]-1659885456018
GPR[EPVS]-1659885456019
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<=Token.LAST_ASSIGN){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885456021
GPR[SPVAP]-1659885456021
GPR[EPVAP]-1659885457942
GPR[EPVS]-1659885457942
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
consumeToken();
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885457943
GPR[SPVAP]-1659885457943
GPR[EPVAP]-1659885459683
GPR[EPVS]-1659885459683
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&tt<=sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885459684
GPR[SPVAP]-1659885459684
GPR[EPVAP]-1659885461706
GPR[EPVS]-1659885461706
========
b.writeInt('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885461708
GPR[SPVAP]-1659885461708
GPR[EPVAP]-1659885463449
GPR[EPVS]-1659885463449
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&len<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885463451
GPR[SPVAP]-1659885463451
GPR[EPVAP]-1659885465440
GPR[EPVS]-1659885465440
========
b.append('\n');
int charno=error.getCharno();
if(warning){
if(warning){
startNewLine();
sawFunction=false;
}
}
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885465441
GPR[SPVAP]-1659885465441
GPR[EPVAP]-1659885467206
GPR[EPVS]-1659885467206
========
maybeCutLine();
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885467207
GPR[SPVAP]-1659885467207
GPR[EPVAP]-1659885469223
GPR[EPVS]-1659885469223
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
tt=peekToken();
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885469225
GPR[SPVAP]-1659885469225
GPR[EPVAP]-1659885471010
GPR[EPVS]-1659885471010
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
consumeToken();
tt=peekToken();

for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885471011
GPR[SPVAP]-1659885471011
GPR[EPVAP]-1659885472790
GPR[EPVS]-1659885472790
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=pattern.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885472792
GPR[SPVAP]-1659885472792
GPR[EPVAP]-1659885474796
GPR[EPVS]-1659885474796
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
capturing=false;
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885474797
GPR[SPVAP]-1659885474797
GPR[EPVAP]-1659885476529
GPR[EPVS]-1659885476529
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
swtich (b.charAt(i+1)){
case ':' :
pos+=2;
break;

case '=' :
pos+=2;
type=b.charAt(i+1);
break;

}
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885476530
GPR[SPVAP]-1659885476530
GPR[EPVAP]-1659885478530
GPR[EPVS]-1659885478530
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
capturing=false;
swtich (b.charAt(i+1)){
case ':' :
pos+=2;
break;

case '=' :
pos+=2;
type=b.charAt(i+1);
break;

}

char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885478531
GPR[SPVAP]-1659885478531
GPR[EPVAP]-1659885480166
GPR[EPVS]-1659885480166
========
case Token.WITH :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885480167
GPR[SPVAP]-1659885480167
GPR[EPVAP]-1659885481808
GPR[EPVS]-1659885481808
========
if(!matchToken(Token.ASSIGN)){
reportError("msg.bad.namespace");
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885481810
GPR[SPVAP]-1659885481810
GPR[EPVAP]-1659885483608
GPR[EPVS]-1659885483608
========
b.report('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885483610
GPR[SPVAP]-1659885483610
GPR[EPVAP]-1659885485500
GPR[EPVS]-1659885485500
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
start=parseEscapeChar();
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885485502
GPR[SPVAP]-1659885485502
GPR[EPVAP]-1659885487342
GPR[EPVS]-1659885487342
========
b.append('\n');
case Token.FALSE :

int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885487344
GPR[SPVAP]-1659885487344
GPR[EPVAP]-1659885489050
GPR[EPVS]-1659885489050
========
case Token.RESERVED :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885489051
GPR[SPVAP]-1659885489051
GPR[EPVAP]-1659885491021
GPR[EPVS]-1659885491022
========
case Token.STRING :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885491023
GPR[SPVAP]-1659885491023
GPR[EPVAP]-1659885492655
GPR[EPVS]-1659885492655
========
b.remove('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885492657
GPR[SPVAP]-1659885492657
GPR[EPVAP]-1659885494720
GPR[EPVS]-1659885494720
========
case Token.MUL :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885494722
GPR[SPVAP]-1659885494722
GPR[EPVAP]-1659885496656
GPR[EPVS]-1659885496656
========
b.valueOf('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885496657
GPR[SPVAP]-1659885496657
GPR[EPVAP]-1659885498427
GPR[EPVS]-1659885498427
========
cssNames.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885498428
GPR[SPVAP]-1659885498428
GPR[EPVAP]-1659885500298
GPR[EPVS]-1659885500298
========
case Token.CONTINUE :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885500299
GPR[SPVAP]-1659885500299
GPR[EPVAP]-1659885502277
GPR[EPVS]-1659885502277
========
b.append('\n');
int charno=null==null?0:error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885502281
GPR[SPVAP]-1659885502281
GPR[EPVAP]-1659885506097
GPR[SPVATF]-1659885506097
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885509599
GPR[EPVS]-1659885509599
========
case Token.RC :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885509600
GPR[SPVAP]-1659885509600
GPR[EPVAP]-1659885511315
GPR[EPVS]-1659885511315
========
b.setValue('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885511316
GPR[SPVAP]-1659885511316
GPR[EPVAP]-1659885513228
GPR[EPVS]-1659885513228
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885513230
GPR[SPVAP]-1659885513230
GPR[EPVAP]-1659885517143
GPR[SPVATF]-1659885517143
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885520707
GPR[EPVS]-1659885520707
========
b.append('\n');
int charno=error.getCharno();
if((i+charno)>sourceExcerpt.length()||(length<0)&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885520709
GPR[SPVAP]-1659885520709
GPR[EPVAP]-1659885522494
GPR[EPVS]-1659885522494
========
b.join('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885522495
GPR[SPVAP]-1659885522495
GPR[EPVAP]-1659885524252
GPR[EPVS]-1659885524252
========
case Token.DO :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885524254
GPR[SPVAP]-1659885524254
GPR[EPVAP]-1659885526265
GPR[EPVS]-1659885526265
========
case FUNCTION_END :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885526267
GPR[SPVAP]-1659885526267
GPR[EPVAP]-1659885527911
GPR[EPVS]-1659885527911
========
if(warning&&i<2)Kit.codeBug();
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885527913
GPR[SPVAP]-1659885527913
GPR[EPVAP]-1659885529913
GPR[EPVS]-1659885529913
========
b.append('\n');
case Token.DIV :

int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885529915
GPR[SPVAP]-1659885529915
GPR[EPVAP]-1659885531690
GPR[EPVS]-1659885531690
========
case Token.NULL :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885531692
GPR[SPVAP]-1659885531692
GPR[EPVAP]-1659885533730
GPR[EPVS]-1659885533730
========
globalNames.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885533731
GPR[SPVAP]-1659885533731
GPR[EPVAP]-1659885536129
GPR[EPVS]-1659885536129
========
nameMap.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885536130
GPR[SPVAP]-1659885536130
GPR[EPVAP]-1659885537960
GPR[EPVS]-1659885537960
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<indices1.length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885537962
GPR[SPVAP]-1659885537962
GPR[EPVAP]-1659885540048
GPR[EPVS]-1659885540048
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<length;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885540049
GPR[SPVAP]-1659885540049
GPR[EPVAP]-1659885541826
GPR[EPVS]-1659885541826
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&entry<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885541828
GPR[SPVAP]-1659885541828
GPR[EPVAP]-1659885543636
GPR[EPVS]-1659885543636
========
case Token.LB :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885543638
GPR[SPVAP]-1659885543638
GPR[EPVAP]-1659885545313
GPR[EPVS]-1659885545313
========
case Token.VAR :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885545314
GPR[SPVAP]-1659885545314
GPR[EPVAP]-1659885546954
GPR[EPVS]-1659885546954
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&pattern<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885546956
GPR[SPVAP]-1659885546956
GPR[EPVAP]-1659885548695
GPR[EPVS]-1659885548695
========
b.setDesc('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885548697
GPR[SPVAP]-1659885548697
GPR[EPVAP]-1659885550790
GPR[EPVS]-1659885550790
========
if(warning){
reportError("msg.catch.unreachable");
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885550792
GPR[SPVAP]-1659885550792
GPR[EPVAP]-1659885552566
GPR[EPVS]-1659885552566
========
mustMatchToken(Token.LP,"msg.no.paren.catch");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885552567
GPR[SPVAP]-1659885552567
GPR[EPVAP]-1659885554505
GPR[EPVS]-1659885554505
========
mustMatchToken(Token.NAME,"msg.bad.catchcond");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885554506
GPR[SPVAP]-1659885554506
GPR[EPVAP]-1659885556364
GPR[EPVS]-1659885556364
========
refInfo.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885556366
GPR[SPVAP]-1659885556366
GPR[EPVAP]-1659885558140
GPR[EPVS]-1659885558140
========
if(members.length==0){
return new int[0];
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885558142
GPR[SPVAP]-1659885558142
GPR[EPVAP]-1659885559931
GPR[EPVS]-1659885559931
========
sb.setLength('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885559932
GPR[SPVAP]-1659885559933
GPR[EPVAP]-1659885561782
GPR[EPVS]-1659885561782
========
symbolGraph.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885561784
GPR[SPVAP]-1659885561784
GPR[EPVAP]-1659885563820
GPR[EPVS]-1659885563820
========
case Token.GET :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885563822
GPR[SPVAP]-1659885563822
GPR[EPVAP]-1659885565804
GPR[EPVS]-1659885565804
========
case Token.NAME :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885565805
GPR[SPVAP]-1659885565805
GPR[EPVAP]-1659885567819
GPR[EPVS]-1659885567819
========
callNodeToParentMap.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885567822
GPR[SPVAP]-1659885567822
GPR[EPVAP]-1659885569600
GPR[EPVS]-1659885569600
========
b.append('\n');
if(null!=null&&!warning){
typeNode.putBooleanProp(Node.BRACELESS_TYPE,true);
}
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885569601
GPR[SPVAP]-1659885569601
GPR[EPVAP]-1659885571686
GPR[EPVS]-1659885571686
========
compiler.report('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885571688
GPR[SPVAP]-1659885571688
GPR[EPVAP]-1659885573686
GPR[EPVS]-1659885573686
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&error.charAt(i)<='9'){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885573687
GPR[SPVAP]-1659885573687
GPR[EPVAP]-1659885575472
GPR[EPVS]-1659885575472
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<0){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885575473
GPR[SPVAP]-1659885575473
GPR[EPVAP]-1659885579476
GPR[SPVATF]-1659885579476
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885583013
GPR[EPVS]-1659885583013
========
b.append('\n');
boolean charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885583015
GPR[SPVAP]-1659885583015
GPR[EPVAP]-1659885585079
GPR[EPVS]-1659885585079
========
markerStack.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885585080
GPR[SPVAP]-1659885585080
GPR[EPVAP]-1659885587178
GPR[EPVS]-1659885587178
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
newLiteralNode=new Node(Token.ARRAYLIT);
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885587180
GPR[SPVAP]-1659885587180
GPR[EPVAP]-1659885589166
GPR[EPVS]-1659885589166
========
pattern.charAt('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885589168
GPR[SPVAP]-1659885589168
GPR[EPVAP]-1659885591213
GPR[EPVS]-1659885591213
========
nameGenerator.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885591215
GPR[SPVAP]-1659885591215
GPR[EPVAP]-1659885592954
GPR[EPVS]-1659885592954
========
renameMap.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885592955
GPR[SPVAP]-1659885592955
GPR[EPVAP]-1659885594978
GPR[EPVS]-1659885594978
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
if(ScriptRuntime.isJSLineTerminator(charno)){
lineEndChar=charno;
c='\n';
}
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885594982
GPR[SPVAP]-1659885594982
GPR[EPVAP]-1659885596705
GPR[EPVS]-1659885596705
========
if(sourceExcerpt.indexOf('i')>=0){
String i=CaseCanonicalize.caseCanonicalize(sourceExcerpt);
if(text!=canonicalized){
return new Text(canonicalized);
}
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885596706
GPR[SPVAP]-1659885596706
GPR[EPVAP]-1659885598690
GPR[EPVS]-1659885598691
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&last<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885598692
GPR[SPVAP]-1659885598692
GPR[EPVAP]-1659885600686
GPR[EPVS]-1659885600686
========
b.optInt('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885600688
GPR[SPVAP]-1659885600688
GPR[EPVAP]-1659885602678
GPR[EPVS]-1659885602678
========
format.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885602679
GPR[SPVAP]-1659885602679
GPR[EPVAP]-1659885604489
GPR[EPVS]-1659885604489
========
this.charno=charno;
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885604490
GPR[SPVAP]-1659885604490
GPR[EPVAP]-1659885606504
GPR[EPVS]-1659885606504
========
this.sourceExcerpt=sourceName;
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885606506
GPR[SPVAP]-1659885606506
GPR[EPVAP]-1659885608244
GPR[EPVS]-1659885608244
========
b.append('\n');
int charno=error.getCharno();
if(charno<0||radix==1&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885608247
GPR[SPVAP]-1659885608247
GPR[EPVAP]-1659885609988
GPR[EPVS]-1659885609988
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&radix<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885609989
GPR[SPVAP]-1659885609989
GPR[EPVAP]-1659885611801
GPR[EPVS]-1659885611801
========
b.append('\n');
int charno=error.getCharno();
warning=true;
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885611803
GPR[SPVAP]-1659885611803
GPR[EPVAP]-1659885615701
GPR[SPVATF]-1659885615701
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885619698
GPR[EPVS]-1659885619698
========
b.parseInt('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885619701
GPR[SPVAP]-1659885619701
GPR[EPVAP]-1659885621688
GPR[EPVS]-1659885621688
========
charno+1!=sourceExcerpt.length()?b.append('\n'):Integer.MAX_VALUE;
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885621689
GPR[SPVAP]-1659885621689
GPR[EPVAP]-1659885623616
GPR[EPVS]-1659885623616
========
charno>=0?b.append('\n'):null;
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885623617
GPR[SPVAP]-1659885623617
GPR[EPVAP]-1659885625252
GPR[EPVS]-1659885625252
========
default :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885625253
GPR[SPVAP]-1659885625253
GPR[EPVAP]-1659885627270
GPR[EPVS]-1659885627270
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
if(match(JsDocToken.COMMA)){
next();
skipEOLs();
token=next();
}else {
hasParams=false;
}
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885627274
GPR[SPVAP]-1659885627274
GPR[EPVAP]-1659885629313
GPR[EPVS]-1659885629313
========
charno+=2;
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885629317
GPR[SPVAP]-1659885629317
GPR[EPVAP]-1659885631342
GPR[EPVS]-1659885631342
========
b.append('\n');
if(sourceExcerpt.length()==0){
return "";
}
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885631343
GPR[SPVAP]-1659885631343
GPR[EPVAP]-1659885635030
GPR[SPVATF]-1659885635030
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885638701
GPR[EPVS]-1659885638701
========
b.append('\n');
int charno=error.getCharno();
if(i<0)throw new IllegalArgumentException();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885638702
GPR[SPVAP]-1659885638702
GPR[EPVAP]-1659885640466
GPR[EPVS]-1659885640466
========
Preconditions.checkState(Maps.newHashMap().keySet().equals(Sets.newHashSet(DEFAULT_EXTERNS_NAMES)),"Externs zip must match our hard-coded list of externs.");
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885640468
GPR[SPVAP]-1659885640468
GPR[EPVAP]-1659885642402
GPR[EPVS]-1659885642402
========
for(String sourceExcerpt : DEFAULT_EXTERNS_NAMES){
Lists.newArrayList().add(Maps.newHashMap().get(key));
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885642403
GPR[SPVAP]-1659885642403
GPR[EPVAP]-1659885644508
GPR[EPVS]-1659885644508
========
charno=i+1;
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885644512
GPR[SPVAP]-1659885644512
GPR[EPVAP]-1659885646537
GPR[EPVS]-1659885646537
========
b.addEntry('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885646539
GPR[SPVAP]-1659885646539
GPR[EPVAP]-1659885648522
GPR[EPVS]-1659885648522
========
if(i<0){
return ;
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885648523
GPR[SPVAP]-1659885648523
GPR[EPVAP]-1659885650539
GPR[EPVS]-1659885650539
========
if(warning){
throw new JsonMLException();
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885650542
GPR[SPVAP]-1659885650542
GPR[EPVAP]-1659885652334
GPR[EPVS]-1659885652334
========
sb.checkState('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885652335
GPR[SPVAP]-1659885652335
GPR[EPVAP]-1659885654095
GPR[EPVS]-1659885654095
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&pos<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885654096
GPR[SPVAP]-1659885654096
GPR[EPVAP]-1659885655897
GPR[EPVS]-1659885655898
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<line.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885655899
GPR[SPVAP]-1659885655899
GPR[EPVAP]-1659885657923
GPR[EPVS]-1659885657923
========
if(!warning){
return null;
}
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885657925
GPR[SPVAP]-1659885657925
GPR[EPVAP]-1659885661564
GPR[SPVATF]-1659885661564
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885665086
GPR[EPVS]-1659885665086
========
if(!warning){
return null;
}
b.substring('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885665088
GPR[SPVAP]-1659885665088
GPR[EPVAP]-1659885668986
GPR[SPVATF]-1659885668986
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885672598
GPR[EPVS]-1659885672598
========
case Token.COMMA :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885672599
GPR[SPVAP]-1659885672599
GPR[EPVAP]-1659885674345
GPR[EPVS]-1659885674345
========
keyBuilder.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885674346
GPR[SPVAP]-1659885674346
GPR[EPVAP]-1659885676264
GPR[EPVS]-1659885676264
========
b.fail('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885676267
GPR[SPVAP]-1659885676267
GPR[EPVAP]-1659885678111
GPR[EPVS]-1659885678111
========
b.checkArgument('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885678112
GPR[SPVAP]-1659885678112
GPR[EPVAP]-1659885680094
GPR[EPVS]-1659885680094
========
b.append("): ");
b.append(call.returnType);
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885680096
GPR[SPVAP]-1659885680096
GPR[EPVAP]-1659885682054
GPR[EPVS]-1659885682054
========
b.log('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885682056
GPR[SPVAP]-1659885682056
GPR[EPVAP]-1659885683786
GPR[EPVS]-1659885683786
========
case EOL :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885683788
GPR[SPVAP]-1659885683788
GPR[EPVAP]-1659885685426
GPR[EPVS]-1659885685426
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&lineno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885685428
GPR[SPVAP]-1659885685428
GPR[EPVAP]-1659885687175
GPR[EPVS]-1659885687175
========
abstractMethodAssignmentNodes.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885687176
GPR[SPVAP]-1659885687176
GPR[EPVAP]-1659885688929
GPR[EPVS]-1659885688929
========
case 1 :
charno=charno=-1;
i=18;
charno=0;
break;

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885688931
GPR[SPVAP]-1659885688931
GPR[EPVAP]-1659885690591
GPR[EPVS]-1659885690591
========
case 2 :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885690592
GPR[SPVAP]-1659885690592
GPR[EPVAP]-1659885692225
GPR[EPVS]-1659885692225
========
b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&n<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885692228
GPR[SPVAP]-1659885692228
GPR[EPVAP]-1659885694016
GPR[EPVS]-1659885694016
========
default :

sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885694018
GPR[SPVAP]-1659885694019
GPR[EPVAP]-1659885696032
GPR[EPVS]-1659885696032
========
case 'o' :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885696034
GPR[SPVAP]-1659885696034
GPR[EPVAP]-1659885697968
GPR[EPVS]-1659885697968
========
case 'h' :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885697969
GPR[SPVAP]-1659885697969
GPR[EPVAP]-1659885699854
GPR[EPVS]-1659885699854
========
case 12 :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885699855
GPR[SPVAP]-1659885699855
GPR[EPVAP]-1659885701793
GPR[EPVS]-1659885701793
========
case Token.SHNE :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885701794
GPR[SPVAP]-1659885701794
GPR[EPVAP]-1659885703787
GPR[EPVS]-1659885703787
========
case '\"' :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885703788
GPR[SPVAP]-1659885703788
GPR[EPVAP]-1659885705477
GPR[EPVS]-1659885705477
========
case '>' :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885705478
GPR[SPVAP]-1659885705478
GPR[EPVAP]-1659885707319
GPR[EPVS]-1659885707319
========
case '\"' :

sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885707321
GPR[SPVAP]-1659885707321
GPR[EPVAP]-1659885709024
GPR[EPVS]-1659885709024
========
case '>' :

sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885709025
GPR[SPVAP]-1659885709025
GPR[EPVAP]-1659885710662
GPR[EPVS]-1659885710662
========
case '-' :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885710663
GPR[SPVAP]-1659885710663
GPR[EPVAP]-1659885712661
GPR[EPVS]-1659885712661
========
case '\\' :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885712663
GPR[SPVAP]-1659885712663
GPR[EPVAP]-1659885714638
GPR[EPVS]-1659885714638
========
case '\n' :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885714639
GPR[SPVAP]-1659885714639
GPR[EPVAP]-1659885716714
GPR[EPVS]-1659885716714
========
case '\t' :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885716715
GPR[SPVAP]-1659885716715
GPR[EPVAP]-1659885718727
GPR[EPVS]-1659885718727
========
case 2 :

sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885718728
GPR[SPVAP]-1659885718728
GPR[EPVAP]-1659885720640
GPR[EPVS]-1659885720641
========
case '\f' :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885720642
GPR[SPVAP]-1659885720642
GPR[EPVAP]-1659885722431
GPR[EPVS]-1659885722431
========
case '\n' :

sb.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885722432
GPR[SPVAP]-1659885722432
GPR[EPVAP]-1659885724069
GPR[EPVS]-1659885724069
========
case Token.EOL :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885724070
GPR[SPVAP]-1659885724070
GPR[EPVAP]-1659885725694
GPR[EPVS]-1659885725694
========
case Token.NEW :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885725695
GPR[SPVAP]-1659885725695
GPR[EPVAP]-1659885727326
GPR[EPVS]-1659885727326
========
case Token.IF :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885727327
GPR[SPVAP]-1659885727327
GPR[EPVAP]-1659885729322
GPR[EPVS]-1659885729322
========
case Token.FOR :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885729323
GPR[SPVAP]-1659885729323
GPR[EPVAP]-1659885731341
GPR[EPVS]-1659885731341
========
case Token.CATCH :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885731342
GPR[SPVAP]-1659885731342
GPR[EPVAP]-1659885732996
GPR[EPVS]-1659885732996
========
case Token.THROW :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885732998
GPR[SPVAP]-1659885732998
GPR[EPVAP]-1659885734648
GPR[EPVS]-1659885734648
========
case Token.DEFAULT :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885734649
GPR[SPVAP]-1659885734649
GPR[EPVAP]-1659885736414
GPR[EPVS]-1659885736414
========
case Token.ASSIGN_ADD :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885736415
GPR[SPVAP]-1659885736415
GPR[EPVAP]-1659885738322
GPR[EPVS]-1659885738322
========
case Token.ASSIGN_MUL :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885738323
GPR[SPVAP]-1659885738323
GPR[EPVAP]-1659885739946
GPR[EPVS]-1659885739946
========
case Token.ASSIGN_MOD :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885739947
GPR[SPVAP]-1659885739947
GPR[EPVAP]-1659885741996
GPR[EPVS]-1659885741997
========
case Token.ASSIGN_BITXOR :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885741998
GPR[SPVAP]-1659885741998
GPR[EPVAP]-1659885743621
GPR[EPVS]-1659885743621
========
case Token.ASSIGN_LSH :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885743622
GPR[SPVAP]-1659885743622
GPR[EPVAP]-1659885745591
GPR[EPVS]-1659885745591
========
case Token.ASSIGN_URSH :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885745592
GPR[SPVAP]-1659885745592
GPR[EPVAP]-1659885747556
GPR[EPVS]-1659885747556
========
case Token.OBJECTLIT :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885747557
GPR[SPVAP]-1659885747557
GPR[EPVAP]-1659885749210
GPR[EPVS]-1659885749211
========
case Token.AND :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885749212
GPR[SPVAP]-1659885749212
GPR[EPVAP]-1659885750830
GPR[EPVS]-1659885750830
========
case Token.BITXOR :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885750831
GPR[SPVAP]-1659885750831
GPR[EPVAP]-1659885752840
GPR[EPVS]-1659885752840
========
case Token.SHEQ :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885752841
GPR[SPVAP]-1659885752841
GPR[EPVAP]-1659885754498
GPR[EPVS]-1659885754498
========
case Token.EQ :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885754499
GPR[SPVAP]-1659885754499
GPR[EPVAP]-1659885756162
GPR[EPVS]-1659885756162
========
case Token.LE :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885756163
GPR[SPVAP]-1659885756163
GPR[EPVAP]-1659885758237
GPR[EPVS]-1659885758237
========
case Token.GE :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885758238
GPR[SPVAP]-1659885758238
GPR[EPVAP]-1659885759930
GPR[EPVS]-1659885759930
========
case Token.INSTANCEOF :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885759932
GPR[SPVAP]-1659885759932
GPR[EPVAP]-1659885762123
GPR[EPVS]-1659885762123
========
case Token.RSH :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885762124
GPR[SPVAP]-1659885762124
GPR[EPVAP]-1659885763754
GPR[EPVS]-1659885763754
========
case Token.TYPEOF :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885763755
GPR[SPVAP]-1659885763755
GPR[EPVAP]-1659885765410
GPR[EPVS]-1659885765410
========
case Token.CONST :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885765411
GPR[SPVAP]-1659885765411
GPR[EPVAP]-1659885767034
GPR[EPVS]-1659885767034
========
case Token.BITNOT :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885767035
GPR[SPVAP]-1659885767035
GPR[EPVAP]-1659885769098
GPR[EPVS]-1659885769098
========
case Token.NEG :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885769099
GPR[SPVAP]-1659885769099
GPR[EPVAP]-1659885770715
GPR[EPVS]-1659885770715
========
case Token.DEC :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885770716
GPR[SPVAP]-1659885770716
GPR[EPVAP]-1659885772342
GPR[EPVS]-1659885772342
========
case Token.SUB :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885772343
GPR[SPVAP]-1659885772343
GPR[EPVAP]-1659885773982
GPR[EPVS]-1659885773982
========
case Token.DIV :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885773983
GPR[SPVAP]-1659885773983
GPR[EPVAP]-1659885775596
GPR[EPVS]-1659885775596
========
case Token.COLONCOLON :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885775597
GPR[SPVAP]-1659885775597
GPR[EPVAP]-1659885777561
GPR[EPVS]-1659885777561
========
case Token.DOTQUERY :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885777562
GPR[SPVAP]-1659885777562
GPR[EPVAP]-1659885779196
GPR[EPVS]-1659885779196
========
case '\r' :

b.append('\n');
int charno=error.getCharno();
if(excerpt.equals(LINE)&&0<=charno&&charno<sourceExcerpt.length()){
for(int i=0;i<charno;i++){
char c=sourceExcerpt.charAt(i);
if(Character.isWhitespace(c)){
b.append(c);
}else {
b.append(' ');
}
}
b.append("^\n");
}

========
MM Copying to MM
GPR[SPVS]-1659885779197
GPR[SPVAP]-1659885779197
GPR[EPVAP]-1659885781874
GPR[EPVS]-1659885781874
GPR[ESUN]-1659885781874
GPR[SSUN]-1659885781874
com.google.javascript.jscomp.LightweightMessageFormatter,97
GPR[ESUN]-1659885782829
GPR[SSUN]-1659885782829
com.google.javascript.jscomp.LightweightMessageFormatter,59
========
return format(error,true);

========
MM Copying to MM
GPR[SPVS]-1659885784477
GPR[SPVAP]-1659885784477
GPR[EPVAP]-1659885792874
GPR[SPVATF]-1659885792874
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885796374
GPR[EPVS]-1659885796374
GPR[ESUN]-1659885796374
GPR[SSUN]-1659885796374
com.google.javascript.jscomp.AbstractMessageFormatter,75
GPR[ESUN]-1659885800727
GPR[SSUN]-1659885800727
com.google.javascript.jscomp.LightweightMessageFormatter,76
========
if(error.lineNumber>lineNumber){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885802746
GPR[SPVAP]-1659885802746
GPR[EPVAP]-1659885806270
GPR[EPVS]-1659885806270
========
if(error.lineNumber>0){
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885806271
GPR[SPVAP]-1659885806271
GPR[EPVAP]-1659885809495
GPR[EPVS]-1659885809495
========
if(stat.count>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885809505
GPR[SPVAP]-1659885809505
GPR[EPVAP]-1659885813386
GPR[EPVS]-1659885813386
========
if(error.lineNumber>0){
sb.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885813388
GPR[SPVAP]-1659885813388
GPR[EPVAP]-1659885815814
GPR[EPVS]-1659885815814
========
if(error.lineNumber>0){
b.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885815815
GPR[SPVAP]-1659885815815
GPR[EPVAP]-1659885818349
GPR[EPVS]-1659885818350
========
if(error.lineNumber>0){
b.append(")\n");
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885818351
GPR[SPVAP]-1659885818351
GPR[EPVAP]-1659885825947
GPR[SPVATF]-1659885825947
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885829580
GPR[EPVS]-1659885829580
========
if(stat.count>0){
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885829581
GPR[SPVAP]-1659885829581
GPR[EPVAP]-1659885831346
GPR[EPVS]-1659885831346
========
if(stat.count>0){
b.append(")\n");
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885831347
GPR[SPVAP]-1659885831347
GPR[EPVAP]-1659885833130
GPR[EPVS]-1659885833130
========
if(error.lineNumber>0){
b.append(")\n");
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885833131
GPR[SPVAP]-1659885833131
GPR[EPVAP]-1659885834894
GPR[EPVS]-1659885834894
========
if(stat.count>0){
b.append(")\n");
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885834895
GPR[SPVAP]-1659885834895
GPR[EPVAP]-1659885836921
GPR[EPVS]-1659885836921
========
if(info.numOccurrences>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885836925
GPR[SPVAP]-1659885836925
GPR[EPVAP]-1659885839024
GPR[EPVS]-1659885839024
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885839025
GPR[SPVAP]-1659885839025
GPR[EPVAP]-1659885843140
GPR[SPVATF]-1659885843140
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885846805
GPR[EPVS]-1659885846805
========
if(error.lineNumber>0){
b.append('\n');
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885846807
GPR[SPVAP]-1659885846807
GPR[EPVAP]-1659885850511
GPR[SPVATF]-1659885850511
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885854063
GPR[EPVS]-1659885854063
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append('\n');

b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885854064
GPR[SPVAP]-1659885854064
GPR[EPVAP]-1659885857877
GPR[SPVATF]-1659885857877
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885861221
GPR[EPVS]-1659885861221
========
if(info.numOccurrences>0){
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885861222
GPR[SPVAP]-1659885861222
GPR[EPVAP]-1659885862971
GPR[EPVS]-1659885862971
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885862972
GPR[SPVAP]-1659885862972
GPR[EPVAP]-1659885864702
GPR[EPVS]-1659885864702
========
if(error.lineNumber>0){
b.append('\n');
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885864703
GPR[SPVAP]-1659885864703
GPR[EPVAP]-1659885866687
GPR[EPVS]-1659885866687
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append('\n');

sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885866688
GPR[SPVAP]-1659885866688
GPR[EPVAP]-1659885868468
GPR[EPVS]-1659885868468
========
if(info.numOccurrences>0){
b.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885868469
GPR[SPVAP]-1659885868469
GPR[EPVAP]-1659885870496
GPR[EPVS]-1659885870496
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885870497
GPR[SPVAP]-1659885870497
GPR[EPVAP]-1659885872248
GPR[EPVS]-1659885872248
========
if(error.lineNumber>0){
b.append('\n');
b.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885872249
GPR[SPVAP]-1659885872249
GPR[EPVAP]-1659885874000
GPR[EPVS]-1659885874000
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append('\n');

b.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885874001
GPR[SPVAP]-1659885874001
GPR[EPVAP]-1659885876054
GPR[EPVS]-1659885876054
========
if(info.numOccurrences>0){
b.append(sourceExcerpt);
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885876055
GPR[SPVAP]-1659885876055
GPR[EPVAP]-1659885877814
GPR[EPVS]-1659885877814
========
if(info.numOccurrences>0){
b.append('\n');
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885877816
GPR[SPVAP]-1659885877816
GPR[EPVAP]-1659885879876
GPR[EPVS]-1659885879877
========
if(info.numOccurrences>0){
b.append(sourceExcerpt);
b.append('\n');

b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885879878
GPR[SPVAP]-1659885879878
GPR[EPVAP]-1659885881607
GPR[EPVS]-1659885881607
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append('\n');
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885881608
GPR[SPVAP]-1659885881608
GPR[EPVAP]-1659885885498
GPR[SPVATF]-1659885885498
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885889065
GPR[EPVS]-1659885889065
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append(sourceExcerpt);
b.append('\n');

b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885889067
GPR[SPVAP]-1659885889067
GPR[EPVAP]-1659885892974
GPR[SPVATF]-1659885892974
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885896341
GPR[EPVS]-1659885896341
========
if(error.lineNumber>0){
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885896342
GPR[SPVAP]-1659885896342
GPR[EPVAP]-1659885900105
GPR[SPVATF]-1659885900105
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885904142
GPR[EPVS]-1659885904142
========
if(info.numOccurrences>0){
sb.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885904143
GPR[SPVAP]-1659885904143
GPR[EPVAP]-1659885905918
GPR[EPVS]-1659885905918
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
sb.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885905919
GPR[SPVAP]-1659885905919
GPR[EPVAP]-1659885907780
GPR[EPVS]-1659885907780
========
if(error.lineNumber>0){
b.append('\n');
sb.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885907781
GPR[SPVAP]-1659885907781
GPR[EPVAP]-1659885909932
GPR[EPVS]-1659885909932
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append('\n');

sb.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885909933
GPR[SPVAP]-1659885909933
GPR[EPVAP]-1659885911941
GPR[EPVS]-1659885911941
========
if(info.numOccurrences>0){
b.append(sourceExcerpt);
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885911942
GPR[SPVAP]-1659885911942
GPR[EPVAP]-1659885913922
GPR[EPVS]-1659885913922
========
if(info.numOccurrences>0){
b.append('\n');
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885913923
GPR[SPVAP]-1659885913923
GPR[EPVAP]-1659885915860
GPR[EPVS]-1659885915860
========
if(info.numOccurrences>0){
b.append(sourceExcerpt);
b.append('\n');

sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885915861
GPR[SPVAP]-1659885915861
GPR[EPVAP]-1659885917611
GPR[EPVS]-1659885917611
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append('\n');
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885917612
GPR[SPVAP]-1659885917612
GPR[EPVAP]-1659885919662
GPR[EPVS]-1659885919662
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append(sourceExcerpt);
b.append('\n');

sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885919663
GPR[SPVAP]-1659885919663
GPR[EPVAP]-1659885921606
GPR[EPVS]-1659885921606
========
if(error.lineNumber>0){
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885921607
GPR[SPVAP]-1659885921607
GPR[EPVAP]-1659885923358
GPR[EPVS]-1659885923358
========
if(info.numOccurrences>0){
b.append(sourceExcerpt);
b.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885923359
GPR[SPVAP]-1659885923359
GPR[EPVAP]-1659885925452
GPR[EPVS]-1659885925452
========
if(info.numOccurrences>0){
b.append('\n');
b.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885925453
GPR[SPVAP]-1659885925453
GPR[EPVAP]-1659885927370
GPR[EPVS]-1659885927370
========
if(info.numOccurrences>0){
b.append(sourceExcerpt);
b.append('\n');

b.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885927372
GPR[SPVAP]-1659885927372
GPR[EPVAP]-1659885929386
GPR[EPVS]-1659885929386
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append('\n');
b.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885929387
GPR[SPVAP]-1659885929387
GPR[EPVAP]-1659885931443
GPR[EPVS]-1659885931443
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append(sourceExcerpt);
b.append('\n');

b.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885931444
GPR[SPVAP]-1659885931444
GPR[EPVAP]-1659885933255
GPR[EPVS]-1659885933255
========
if(error.lineNumber>0){
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

b.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885933256
GPR[SPVAP]-1659885933256
GPR[EPVAP]-1659885934980
GPR[EPVS]-1659885934980
========
if(info.numOccurrences>0){
b.append(sourceExcerpt);
b.append('\n');
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885934982
GPR[SPVAP]-1659885934982
GPR[EPVAP]-1659885936997
GPR[EPVS]-1659885936997
========
if(info.numOccurrences>0){
b.append(sourceExcerpt);
b.append(sourceExcerpt);
b.append('\n');

b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885936998
GPR[SPVAP]-1659885936998
GPR[EPVAP]-1659885938730
GPR[EPVS]-1659885938730
========
if(info.numOccurrences>0){
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885938731
GPR[SPVAP]-1659885938731
GPR[EPVAP]-1659885940487
GPR[EPVS]-1659885940487
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885940488
GPR[SPVAP]-1659885940488
GPR[EPVAP]-1659885944164
GPR[SPVATF]-1659885944164
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659885947495
GPR[EPVS]-1659885947495
========
if(info.numOccurrences>0){
b.append(sourceExcerpt);
sb.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885947496
GPR[SPVAP]-1659885947496
GPR[EPVAP]-1659885949239
GPR[EPVS]-1659885949239
========
if(info.numOccurrences>0){
b.append('\n');
sb.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885949240
GPR[SPVAP]-1659885949240
GPR[EPVAP]-1659885951048
GPR[EPVS]-1659885951048
========
if(info.numOccurrences>0){
b.append(sourceExcerpt);
b.append('\n');

sb.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885951049
GPR[SPVAP]-1659885951049
GPR[EPVAP]-1659885952876
GPR[EPVS]-1659885952876
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append('\n');
sb.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885952877
GPR[SPVAP]-1659885952877
GPR[EPVAP]-1659885954910
GPR[EPVS]-1659885954910
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append(sourceExcerpt);
b.append('\n');

sb.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885954912
GPR[SPVAP]-1659885954912
GPR[EPVAP]-1659885956850
GPR[EPVS]-1659885956850
========
if(error.lineNumber>0){
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

sb.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885956851
GPR[SPVAP]-1659885956851
GPR[EPVAP]-1659885958886
GPR[EPVS]-1659885958886
========
if(info.numOccurrences>0){
b.append(sourceExcerpt);
b.append('\n');
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885958887
GPR[SPVAP]-1659885958887
GPR[EPVAP]-1659885960818
GPR[EPVS]-1659885960818
========
if(info.numOccurrences>0){
b.append(sourceExcerpt);
b.append(sourceExcerpt);
b.append('\n');

sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885960819
GPR[SPVAP]-1659885960819
GPR[EPVAP]-1659885962558
GPR[EPVS]-1659885962558
========
if(info.numOccurrences>0){
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885962559
GPR[SPVAP]-1659885962559
GPR[EPVAP]-1659885964352
GPR[EPVS]-1659885964352
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885964353
GPR[SPVAP]-1659885964353
GPR[EPVAP]-1659885966172
GPR[EPVS]-1659885966172
========
if(info.numOccurrences>0){
b.append(sourceExcerpt);
b.append('\n');
b.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885966174
GPR[SPVAP]-1659885966174
GPR[EPVAP]-1659885968110
GPR[EPVS]-1659885968110
========
if(info.numOccurrences>0){
b.append(sourceExcerpt);
b.append(sourceExcerpt);
b.append('\n');

b.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885968111
GPR[SPVAP]-1659885968112
GPR[EPVAP]-1659885969878
GPR[EPVS]-1659885969878
========
if(info.numOccurrences>0){
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

b.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885969879
GPR[SPVAP]-1659885969879
GPR[EPVAP]-1659885971919
GPR[EPVS]-1659885971919
========
if(error.lineNumber>0){
b.append(sourceExcerpt);
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

b.append(':');
sb.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885971920
GPR[SPVAP]-1659885971920
GPR[EPVAP]-1659885973668
GPR[EPVS]-1659885973668
========
if(info.numOccurrences>0){
b.append(sourceExcerpt);
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885973669
GPR[SPVAP]-1659885973669
GPR[EPVAP]-1659885975629
GPR[EPVS]-1659885975629
========
if(lineNumber>0){
b.append(':');
b.append(lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885975631
GPR[SPVAP]-1659885975631
GPR[EPVAP]-1659885977453
GPR[EPVS]-1659885977453
========
if(error.lineNumber>0){
buf.append(':');
buf.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885977454
GPR[SPVAP]-1659885977454
GPR[EPVAP]-1659885979211
GPR[EPVS]-1659885979211
========
if(lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885979212
GPR[SPVAP]-1659885979212
GPR[EPVAP]-1659885980971
GPR[EPVS]-1659885980971
========
if(error.lineNumber>0){
buf.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885980972
GPR[SPVAP]-1659885980972
GPR[EPVAP]-1659885982883
GPR[EPVS]-1659885982883
========
if(error.lineNumber>0){
b.append(':');
buf.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885982885
GPR[SPVAP]-1659885982885
GPR[EPVAP]-1659885984730
GPR[EPVS]-1659885984731
========
if(error.lineNumber>0){
b.append(':');
b.append(lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885984732
GPR[SPVAP]-1659885984732
GPR[EPVAP]-1659885986610
GPR[EPVS]-1659885986610
========
if(error.lineNumber>0){
sb.append(':');
b.append(lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885986611
GPR[SPVAP]-1659885986611
GPR[EPVAP]-1659885988352
GPR[EPVS]-1659885988352
========
if(error.lineNumber>0){
b.append(':');
sb.append(lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885988353
GPR[SPVAP]-1659885988353
GPR[EPVAP]-1659885990110
GPR[EPVS]-1659885990110
========
if(error.lineNumber>0){
sb.append(':');
sb.append(lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885990111
GPR[SPVAP]-1659885990111
GPR[EPVAP]-1659885992002
GPR[EPVS]-1659885992002
========
if(a.newName>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885992004
GPR[SPVAP]-1659885992004
GPR[EPVAP]-1659885993957
GPR[EPVS]-1659885993957
========
if(error.lineNumber>0){
b.add(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885993958
GPR[SPVAP]-1659885993958
GPR[EPVAP]-1659885996050
GPR[EPVS]-1659885996050
========
b.append(" (");
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659885996052
GPR[SPVAP]-1659885996052
GPR[EPVAP]-1659885999963
GPR[SPVATF]-1659885999963
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886003684
GPR[EPVS]-1659886003684
========
b.append(" (");
if(error.lineNumber>0){
buf.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886003685
GPR[SPVAP]-1659886003685
GPR[EPVAP]-1659886005449
GPR[EPVS]-1659886005450
========
if(m.originalName>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886005451
GPR[SPVAP]-1659886005451
GPR[EPVAP]-1659886007192
GPR[EPVS]-1659886007192
========
append((char)lineNumber);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886007194
GPR[SPVAP]-1659886007194
GPR[EPVAP]-1659886008983
GPR[EPVS]-1659886008983
========
append((char)Token.EOL);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886008984
GPR[SPVAP]-1659886008984
GPR[EPVAP]-1659886011005
GPR[EPVS]-1659886011005
========
if(error.lineNumber>0){
b.checkState(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886011007
GPR[SPVAP]-1659886011007
GPR[EPVAP]-1659886012815
GPR[EPVS]-1659886012815
========
if(error.lineNumber>0){
replacement=p.newName;
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886012816
GPR[SPVAP]-1659886012816
GPR[EPVAP]-1659886014910
GPR[EPVS]-1659886014910
========
if(b.length()>0){
sb.append('.');
}
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886014911
GPR[SPVAP]-1659886014911
GPR[EPVAP]-1659886016913
GPR[EPVS]-1659886016913
========
b.append(sourceExcerpt);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886016914
GPR[SPVAP]-1659886016914
GPR[EPVAP]-1659886021622
GPR[SPVATF]-1659886021622
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886025574
GPR[EPVS]-1659886025574
========
if(error.lineNumber>0){
b.append(':');
b.append(sourceExcerpt);
}

========
MM Copying to MM
GPR[SPVS]-1659886025575
GPR[SPVAP]-1659886025575
GPR[EPVAP]-1659886029314
GPR[SPVATF]-1659886029314
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886032964
GPR[EPVS]-1659886032964
========
if(lineNumber>0){
b.append(':');
b.append(sourceExcerpt);
}

========
MM Copying to MM
GPR[SPVS]-1659886032965
GPR[SPVAP]-1659886032965
GPR[EPVAP]-1659886034889
GPR[EPVS]-1659886034889
========
if(error.lineNumber>0){
b.setLength(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886034890
GPR[SPVAP]-1659886034890
GPR[EPVAP]-1659886038742
GPR[SPVATF]-1659886038742
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886042003
GPR[EPVS]-1659886042003
========
b.append('(').append(getClass().getSimpleName());
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886042004
GPR[SPVAP]-1659886042004
GPR[EPVAP]-1659886045622
GPR[SPVATF]-1659886045622
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886048951
GPR[EPVS]-1659886048951
========
b.append(' ');
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886048952
GPR[SPVAP]-1659886048952
GPR[EPVAP]-1659886052750
GPR[SPVATF]-1659886052750
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886056197
GPR[EPVS]-1659886056197
========
appendDebugInfo(b);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886056198
GPR[SPVAP]-1659886056198
GPR[EPVAP]-1659886057930
GPR[EPVS]-1659886057930
========
if(error.lineNumber>lineNumber){
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886057931
GPR[SPVAP]-1659886057931
GPR[EPVAP]-1659886059666
GPR[EPVS]-1659886059666
========
if(error.lineNumber>lineNumber){
b.setLength(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886059667
GPR[SPVAP]-1659886059667
GPR[EPVAP]-1659886061423
GPR[EPVS]-1659886061423
========
b.append('(').append(getClass().getSimpleName());
if(error.lineNumber>lineNumber){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886061424
GPR[SPVAP]-1659886061424
GPR[EPVAP]-1659886063186
GPR[EPVS]-1659886063186
========
b.append(' ');
if(error.lineNumber>lineNumber){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886063187
GPR[SPVAP]-1659886063187
GPR[EPVAP]-1659886065016
GPR[EPVS]-1659886065016
========
if(error.lineNumber>0){
sb.setLength(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886065017
GPR[SPVAP]-1659886065017
GPR[EPVAP]-1659886066786
GPR[EPVS]-1659886066786
========
b.append('(').append(getClass().getSimpleName());
if(error.lineNumber>0){
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886066787
GPR[SPVAP]-1659886066787
GPR[EPVAP]-1659886068733
GPR[EPVS]-1659886068733
========
b.append(' ');
if(error.lineNumber>0){
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886068734
GPR[SPVAP]-1659886068734
GPR[EPVAP]-1659886070474
GPR[EPVS]-1659886070474
========
b.append('(').append(getClass().getSimpleName());
if(error.lineNumber>0){
b.setLength(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886070475
GPR[SPVAP]-1659886070475
GPR[EPVAP]-1659886074275
GPR[SPVATF]-1659886074275
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886077571
GPR[EPVS]-1659886077571
========
b.append(' ');
if(error.lineNumber>0){
b.setLength(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886077572
GPR[SPVAP]-1659886077572
GPR[EPVAP]-1659886081394
GPR[SPVATF]-1659886081394
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886085186
GPR[EPVS]-1659886085186
========
b.append('(').append(getClass().getSimpleName());
b.append(' ');
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886085187
GPR[SPVAP]-1659886085187
GPR[EPVAP]-1659886088827
GPR[SPVATF]-1659886088827
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886092302
GPR[EPVS]-1659886092302
========
if(error.lineNumber>lineNumber){
sb.setLength(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886092304
GPR[SPVAP]-1659886092304
GPR[EPVAP]-1659886094110
GPR[EPVS]-1659886094110
========
b.append('(').append(getClass().getSimpleName());
if(error.lineNumber>lineNumber){
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886094112
GPR[SPVAP]-1659886094112
GPR[EPVAP]-1659886096164
GPR[EPVS]-1659886096164
========
b.append(' ');
if(error.lineNumber>lineNumber){
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886096165
GPR[SPVAP]-1659886096165
GPR[EPVAP]-1659886097942
GPR[EPVS]-1659886097942
========
b.append('(').append(getClass().getSimpleName());
if(error.lineNumber>lineNumber){
b.setLength(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886097943
GPR[SPVAP]-1659886097943
GPR[EPVAP]-1659886099727
GPR[EPVS]-1659886099727
========
b.append(' ');
if(error.lineNumber>lineNumber){
b.setLength(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886099728
GPR[SPVAP]-1659886099728
GPR[EPVAP]-1659886101697
GPR[EPVS]-1659886101698
========
b.append('(').append(getClass().getSimpleName());
b.append(' ');
if(error.lineNumber>lineNumber){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886101699
GPR[SPVAP]-1659886101699
GPR[EPVAP]-1659886103467
GPR[EPVS]-1659886103467
========
b.append('(').append(getClass().getSimpleName());
if(error.lineNumber>0){
sb.setLength(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886103468
GPR[SPVAP]-1659886103468
GPR[EPVAP]-1659886105239
GPR[EPVS]-1659886105239
========
b.append(' ');
if(error.lineNumber>0){
sb.setLength(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886105240
GPR[SPVAP]-1659886105240
GPR[EPVAP]-1659886107289
GPR[EPVS]-1659886107290
========
b.append('(').append(getClass().getSimpleName());
b.append(' ');
if(error.lineNumber>0){
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886107291
GPR[SPVAP]-1659886107291
GPR[EPVAP]-1659886109054
GPR[EPVS]-1659886109054
========
b.append('(').append(getClass().getSimpleName());
b.append(' ');
if(error.lineNumber>0){
b.setLength(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886109055
GPR[SPVAP]-1659886109055
GPR[EPVAP]-1659886112678
GPR[SPVATF]-1659886112678
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886116650
GPR[EPVS]-1659886116650
========
b.append('(').append(getClass().getSimpleName());
if(error.lineNumber>lineNumber){
sb.setLength(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886116652
GPR[SPVAP]-1659886116652
GPR[EPVAP]-1659886118470
GPR[EPVS]-1659886118470
========
b.append(' ');
if(error.lineNumber>lineNumber){
sb.setLength(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886118471
GPR[SPVAP]-1659886118471
GPR[EPVAP]-1659886120437
GPR[EPVS]-1659886120437
========
b.append('(').append(getClass().getSimpleName());
b.append(' ');
if(error.lineNumber>lineNumber){
sb.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886120439
GPR[SPVAP]-1659886120439
GPR[EPVAP]-1659886122191
GPR[EPVS]-1659886122191
========
b.append('(').append(getClass().getSimpleName());
b.append(' ');
if(error.lineNumber>lineNumber){
b.setLength(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886122191
GPR[SPVAP]-1659886122191
GPR[EPVAP]-1659886124088
GPR[EPVS]-1659886124088
========
b.append('(').append(getClass().getSimpleName());
b.append(' ');
if(error.lineNumber>0){
sb.setLength(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886124089
GPR[SPVAP]-1659886124089
GPR[EPVAP]-1659886126107
GPR[EPVS]-1659886126107
========
append((char)lineNumber);
if(error.lineNumber>lineNumber){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886126108
GPR[SPVAP]-1659886126108
GPR[EPVAP]-1659886127974
GPR[EPVS]-1659886127974
========
if(options.externExportsPath>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886127975
GPR[SPVAP]-1659886127975
GPR[EPVAP]-1659886130018
GPR[EPVS]-1659886130018
========
b.append('\n');
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886130020
GPR[SPVAP]-1659886130020
GPR[EPVAP]-1659886133793
GPR[SPVATF]-1659886133793
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886137773
GPR[EPVS]-1659886137773
========
if(error.lineNumber>0){
b.substring(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886137775
GPR[SPVAP]-1659886137775
GPR[EPVAP]-1659886141505
GPR[SPVATF]-1659886141505
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886145124
GPR[EPVS]-1659886145124
========
if(error.lineNumber>0){
if(sourceExcerpt.length()==0){
return b.substring(0,builder.length()-1);
}
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886145125
GPR[SPVAP]-1659886145125
GPR[EPVAP]-1659886147061
GPR[EPVS]-1659886147061
========
b.append("  ");
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886147062
GPR[SPVAP]-1659886147062
GPR[EPVAP]-1659886150792
GPR[SPVATF]-1659886150792
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886154552
GPR[EPVS]-1659886154552
========
b.append("  ");
if(error.lineNumber>0){
b.substring(':');
b.append(error.lineNumber);
}

========
MM Copying to MM
GPR[SPVS]-1659886154553
GPR[SPVAP]-1659886154553
GPR[EPVAP]-1659886158659
GPR[SPVATF]-1659886158659
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886162588
GPR[EPVS]-1659886162588
========
if(error.sourceName!=null){
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886164358
GPR[SPVAP]-1659886164358
GPR[EPVAP]-1659886166180
GPR[EPVS]-1659886166180
========
if(error.sourceName!=null){
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886166182
GPR[SPVAP]-1659886166182
GPR[EPVAP]-1659886167996
GPR[EPVS]-1659886167996
========
if(stat.count!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886167997
GPR[SPVAP]-1659886167997
GPR[EPVAP]-1659886169766
GPR[EPVS]-1659886169767
========
if(error.sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886169767
GPR[SPVAP]-1659886169767
GPR[EPVAP]-1659886171856
GPR[EPVS]-1659886171856
========
if(error.sourceName!=null){
b.append(")\n");
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886171857
GPR[SPVAP]-1659886171857
GPR[EPVAP]-1659886175716
GPR[SPVATF]-1659886175716
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886179344
GPR[EPVS]-1659886179344
========
if(error.sourceName!=null){
b.append(")\n");
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886179345
GPR[SPVAP]-1659886179345
GPR[EPVAP]-1659886181089
GPR[EPVS]-1659886181089
========
if(info.numOccurrences!=null){
b.append(info.numOccurrences);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886181091
GPR[SPVAP]-1659886181091
GPR[EPVAP]-1659886182828
GPR[EPVS]-1659886182828
========
if(info.numOccurrences!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886182829
GPR[SPVAP]-1659886182829
GPR[EPVAP]-1659886184854
GPR[EPVS]-1659886184854
========
if(error.sourceName!=null){
b.append(info.numOccurrences);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886184855
GPR[SPVAP]-1659886184855
GPR[EPVAP]-1659886186922
GPR[EPVS]-1659886186922
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886186923
GPR[SPVAP]-1659886186923
GPR[EPVAP]-1659886190797
GPR[SPVATF]-1659886190797
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886194111
GPR[EPVS]-1659886194111
========
if(error.sourceName!=null){
b.append('\n');
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886194112
GPR[SPVAP]-1659886194112
GPR[EPVAP]-1659886197754
GPR[SPVATF]-1659886197755
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886201664
GPR[EPVS]-1659886201664
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append('\n');

b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886201665
GPR[SPVAP]-1659886201665
GPR[EPVAP]-1659886205278
GPR[SPVATF]-1659886205278
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886209032
GPR[EPVS]-1659886209032
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886209034
GPR[SPVAP]-1659886209034
GPR[EPVAP]-1659886211118
GPR[EPVS]-1659886211118
========
if(error.sourceName!=null){
b.append('\n');
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886211119
GPR[SPVAP]-1659886211119
GPR[EPVAP]-1659886213106
GPR[EPVS]-1659886213106
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append('\n');

sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886213107
GPR[SPVAP]-1659886213107
GPR[EPVAP]-1659886214851
GPR[EPVS]-1659886214851
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886214852
GPR[SPVAP]-1659886214852
GPR[EPVAP]-1659886216666
GPR[EPVS]-1659886216666
========
if(error.sourceName!=null){
b.append('\n');
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886216667
GPR[SPVAP]-1659886216667
GPR[EPVAP]-1659886218418
GPR[EPVS]-1659886218418
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append('\n');

b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886218420
GPR[SPVAP]-1659886218420
GPR[EPVAP]-1659886220457
GPR[EPVS]-1659886220458
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append('\n');
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886220459
GPR[SPVAP]-1659886220459
GPR[EPVAP]-1659886224434
GPR[SPVATF]-1659886224434
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886228180
GPR[EPVS]-1659886228180
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append(sourceExcerpt);
b.append('\n');

b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886228181
GPR[SPVAP]-1659886228181
GPR[EPVAP]-1659886232239
GPR[SPVATF]-1659886232239
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886235559
GPR[EPVS]-1659886235559
========
if(error.sourceName!=null){
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886235560
GPR[SPVAP]-1659886235560
GPR[EPVAP]-1659886239241
GPR[SPVATF]-1659886239241
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886242540
GPR[EPVS]-1659886242540
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886242542
GPR[SPVAP]-1659886242542
GPR[EPVAP]-1659886244488
GPR[EPVS]-1659886244488
========
if(error.sourceName!=null){
b.append('\n');
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886244489
GPR[SPVAP]-1659886244489
GPR[EPVAP]-1659886246437
GPR[EPVS]-1659886246437
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append('\n');

sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886246438
GPR[SPVAP]-1659886246438
GPR[EPVAP]-1659886248231
GPR[EPVS]-1659886248231
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append('\n');
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886248232
GPR[SPVAP]-1659886248232
GPR[EPVAP]-1659886250184
GPR[EPVS]-1659886250184
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append(sourceExcerpt);
b.append('\n');

sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886250185
GPR[SPVAP]-1659886250185
GPR[EPVAP]-1659886251967
GPR[EPVS]-1659886251967
========
if(error.sourceName!=null){
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886251968
GPR[SPVAP]-1659886251968
GPR[EPVAP]-1659886253723
GPR[EPVS]-1659886253723
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append('\n');
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886253724
GPR[SPVAP]-1659886253724
GPR[EPVAP]-1659886255684
GPR[EPVS]-1659886255685
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append(sourceExcerpt);
b.append('\n');

b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886255686
GPR[SPVAP]-1659886255686
GPR[EPVAP]-1659886257414
GPR[EPVS]-1659886257414
========
if(error.sourceName!=null){
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886257415
GPR[SPVAP]-1659886257415
GPR[EPVAP]-1659886259174
GPR[EPVS]-1659886259174
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886259175
GPR[SPVAP]-1659886259175
GPR[EPVAP]-1659886262816
GPR[SPVATF]-1659886262816
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886266900
GPR[EPVS]-1659886266900
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append('\n');
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886266902
GPR[SPVAP]-1659886266902
GPR[EPVAP]-1659886268770
GPR[EPVS]-1659886268770
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append(sourceExcerpt);
b.append('\n');

sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886268771
GPR[SPVAP]-1659886268771
GPR[EPVAP]-1659886270543
GPR[EPVS]-1659886270543
========
if(error.sourceName!=null){
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886270544
GPR[SPVAP]-1659886270544
GPR[EPVAP]-1659886272539
GPR[EPVS]-1659886272539
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886272540
GPR[SPVAP]-1659886272540
GPR[EPVAP]-1659886274621
GPR[EPVS]-1659886274621
========
if(error.sourceName!=null){
b.append(sourceExcerpt);
b.append('\n');
b.append(sourceExcerpt);
b.append('\n');

b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886274623
GPR[SPVAP]-1659886274623
GPR[EPVAP]-1659886276381
GPR[EPVS]-1659886276381
========
b.append(" (");
if(error.sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886276382
GPR[SPVAP]-1659886276382
GPR[EPVAP]-1659886280240
GPR[SPVATF]-1659886280240
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886283822
GPR[EPVS]-1659886283822
========
if(sourceName!=null){
b.append(sourceName);
}
if(error.sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886283823
GPR[SPVAP]-1659886283823
GPR[EPVAP]-1659886285622
GPR[EPVS]-1659886285622
========
if(lineNumber>0){
b.append('#');
buf.append(lineNumber);
}
if(error.sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886285623
GPR[SPVAP]-1659886285623
GPR[EPVAP]-1659886287361
GPR[EPVS]-1659886287361
========
if(error.sourceName==null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886287363
GPR[SPVAP]-1659886287363
GPR[EPVAP]-1659886291034
GPR[SPVATF]-1659886291034
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886294375
GPR[EPVS]-1659886294375
========
if(sourceName=='9'){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886294376
GPR[SPVAP]-1659886294376
GPR[EPVAP]-1659886296151
GPR[EPVS]-1659886296151
========
if(sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886296153
GPR[SPVAP]-1659886296153
GPR[EPVAP]-1659886297886
GPR[EPVS]-1659886297886
========
if(error.sourceName!='9'){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886297887
GPR[SPVAP]-1659886297887
GPR[EPVAP]-1659886299668
GPR[EPVS]-1659886299668
========
if(a.newName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886299669
GPR[SPVAP]-1659886299669
GPR[EPVAP]-1659886301661
GPR[EPVS]-1659886301661
========
if(a.newName==null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886301662
GPR[SPVAP]-1659886301662
GPR[EPVAP]-1659886303404
GPR[EPVS]-1659886303404
========
if(error.sourceName!=null){
b.add(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886303405
GPR[SPVAP]-1659886303405
GPR[EPVAP]-1659886305184
GPR[EPVS]-1659886305184
========
if(sourceName==null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886305185
GPR[SPVAP]-1659886305185
GPR[EPVAP]-1659886307222
GPR[EPVS]-1659886307222
========
if(error.sourceName=='9'){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886307224
GPR[SPVAP]-1659886307224
GPR[EPVAP]-1659886309217
GPR[EPVS]-1659886309217
========
if(sourceName!='9'){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886309218
GPR[SPVAP]-1659886309218
GPR[EPVAP]-1659886310972
GPR[EPVS]-1659886310972
========
if(sourceName!=null){
b.append(sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886310974
GPR[SPVAP]-1659886310974
GPR[EPVAP]-1659886312719
GPR[EPVS]-1659886312719
========
if(sourceExcerpt!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886312720
GPR[SPVAP]-1659886312720
GPR[EPVAP]-1659886316525
GPR[SPVATF]-1659886316525
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886319813
GPR[EPVS]-1659886319813
========
if(error.sourceName!=null){
b.append(sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886319814
GPR[SPVAP]-1659886319814
GPR[EPVAP]-1659886321566
GPR[EPVS]-1659886321566
========
if(error.sourceName!=null){
if(excerpt.equals(LINE)&&0<=error.getCharno()&&error.getCharno()<sourceName.length()){
b.append("^\n");
}
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886321567
GPR[SPVAP]-1659886321567
GPR[EPVAP]-1659886323338
GPR[EPVS]-1659886323338
========
if(sourceName!=null){
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886323339
GPR[SPVAP]-1659886323339
GPR[EPVAP]-1659886325090
GPR[EPVS]-1659886325090
========
if(sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886325091
GPR[SPVAP]-1659886325091
GPR[EPVAP]-1659886327118
GPR[EPVS]-1659886327118
========
if(sourceName!=null){
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
sb.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886327119
GPR[SPVAP]-1659886327119
GPR[EPVAP]-1659886328933
GPR[EPVS]-1659886328933
========
if(sourceName!=-1){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886328935
GPR[SPVAP]-1659886328935
GPR[EPVAP]-1659886330937
GPR[EPVS]-1659886330937
========
if(error.sourceName!=-1){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886330938
GPR[SPVAP]-1659886330938
GPR[EPVAP]-1659886332739
GPR[EPVS]-1659886332739
========
if(m.originalName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886332741
GPR[SPVAP]-1659886332741
GPR[EPVAP]-1659886334496
GPR[EPVS]-1659886334496
========
b.append('(').append(getClass().getSimpleName());
if(error.sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886334497
GPR[SPVAP]-1659886334497
GPR[EPVAP]-1659886338438
GPR[SPVATF]-1659886338438
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886341998
GPR[EPVS]-1659886341998
========
b.append(' ');
if(error.sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886341999
GPR[SPVAP]-1659886341999
GPR[EPVAP]-1659886345642
GPR[SPVATF]-1659886345642
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886349001
GPR[EPVS]-1659886349001
========
appendDebugInfo(b);
if(error.sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886349002
GPR[SPVAP]-1659886349002
GPR[EPVAP]-1659886350764
GPR[EPVS]-1659886350764
========
b.append(')');
if(error.sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886350765
GPR[SPVAP]-1659886350765
GPR[EPVAP]-1659886354531
GPR[SPVATF]-1659886354531
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886357979
GPR[EPVS]-1659886357979
========
b.append('(').append(getClass().getSimpleName());
if(error.sourceName!=null){
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886357980
GPR[SPVAP]-1659886357980
GPR[EPVAP]-1659886359769
GPR[EPVS]-1659886359769
========
b.append(' ');
if(error.sourceName!=null){
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886359770
GPR[SPVAP]-1659886359770
GPR[EPVAP]-1659886361599
GPR[EPVS]-1659886361599
========
b.append(')');
if(error.sourceName!=null){
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886361600
GPR[SPVAP]-1659886361600
GPR[EPVAP]-1659886363381
GPR[EPVS]-1659886363381
========
b.append('(').append(getClass().getSimpleName());
b.append(' ');
if(error.sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886363382
GPR[SPVAP]-1659886363382
GPR[EPVAP]-1659886367046
GPR[SPVATF]-1659886367046
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886370755
GPR[EPVS]-1659886370755
========
b.append('(').append(getClass().getSimpleName());
b.append(')');
if(error.sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886370756
GPR[SPVAP]-1659886370756
GPR[EPVAP]-1659886374370
GPR[SPVATF]-1659886374370
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886377660
GPR[EPVS]-1659886377660
========
b.append(' ');
b.append(')');
if(error.sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886377661
GPR[SPVAP]-1659886377661
GPR[EPVAP]-1659886381544
GPR[SPVATF]-1659886381544
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886385264
GPR[EPVS]-1659886385264
========
b.append('(').append(getClass().getSimpleName());
b.append(' ');
if(error.sourceName!=null){
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886385266
GPR[SPVAP]-1659886385266
GPR[EPVAP]-1659886387066
GPR[EPVS]-1659886387066
========
b.append('(').append(getClass().getSimpleName());
b.append(')');
if(error.sourceName!=null){
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886387067
GPR[SPVAP]-1659886387067
GPR[EPVAP]-1659886388850
GPR[EPVS]-1659886388850
========
b.append(' ');
b.append(')');
if(error.sourceName!=null){
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886388851
GPR[SPVAP]-1659886388851
GPR[EPVAP]-1659886390582
GPR[EPVS]-1659886390582
========
b.append('(').append(getClass().getSimpleName());
b.append(' ');
b.append(')');
if(error.sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886390583
GPR[SPVAP]-1659886390583
GPR[EPVAP]-1659886394631
GPR[SPVATF]-1659886394631
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886398330
GPR[EPVS]-1659886398330
========
b.append('(').append(getClass().getSimpleName());
b.append(' ');
b.append(')');
if(error.sourceName!=null){
sb.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886398331
GPR[SPVAP]-1659886398331
GPR[EPVAP]-1659886400080
GPR[EPVS]-1659886400080
========
if(Token.EOL!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886400081
GPR[SPVAP]-1659886400081
GPR[EPVAP]-1659886401840
GPR[EPVS]-1659886401840
========
if(Token.EOL==null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886401841
GPR[SPVAP]-1659886401841
GPR[EPVAP]-1659886403845
GPR[EPVS]-1659886403845
========
append((char)sourceName);
if(error.sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886403847
GPR[SPVAP]-1659886403847
GPR[EPVAP]-1659886405834
GPR[EPVS]-1659886405834
========
append((char)Token.EOL);
if(error.sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886405835
GPR[SPVAP]-1659886405835
GPR[EPVAP]-1659886407717
GPR[EPVS]-1659886407717
========
b.append('\n');
if(error.sourceName!=null){
b.append(error.sourceName);
if(error.lineNumber>0){
b.append(':');
b.append(error.lineNumber);
}
b.append(": ");
}

========
MM Copying to MM
GPR[SPVS]-1659886407719
GPR[SPVAP]-1659886407719
GPR[EPVAP]-1659886411506
GPR[SPVATF]-1659886411506
TESTING : com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM:   - com.google.javascript.jscomp.LightweightMessageFormatterTest::testFormatErrorSpaceEndOfLine1
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659886415312
GPR[EPVS]-1659886415312
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fe42a2b0113, pid=2397045, tid=140618291508992
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 5386 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007fe42a2b0113 [0x00007fe42a2ad9a0+0x2773]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/closure/closure_62_buggy/hs_err_pid2397045.log
Compiled method (c1) 4542735 5097       3       cofix.core.parser.node.expr.InfixExpr::simplify (207 bytes)
 total in heap  [0x00007fe42a221650,0x00007fe42a2241e0] = 11152
 relocation     [0x00007fe42a221778,0x00007fe42a221980] = 520
 main code      [0x00007fe42a221980,0x00007fe42a223420] = 6816
 stub code      [0x00007fe42a223420,0x00007fe42a223598] = 376
 oops           [0x00007fe42a223598,0x00007fe42a2235a0] = 8
 metadata       [0x00007fe42a2235a0,0x00007fe42a2235f0] = 80
 scopes data    [0x00007fe42a2235f0,0x00007fe42a223de8] = 2040
 scopes pcs     [0x00007fe42a223de8,0x00007fe42a224168] = 896
 dependencies   [0x00007fe42a224168,0x00007fe42a224170] = 8
 nul chk table  [0x00007fe42a224170,0x00007fe42a2241e0] = 112
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Closure/62 results at /experiment_home///results/SimFix/Closure/62/seed_262/
\n\nNode: host-54\n
\n\nDate: Sun 07 Aug 2022 08:33:35 AM PDT\n
Removing checked out dir script/workingdir/SimFix/closure/closure_62_buggy
GPR[SSLE]-1659886415346
GPR[ESLE]-1659886475351
