Sleep 1m start
GPR[SSLI]-1659895501364
GPR[ESLI]-1659895561370
Running Nopol Closure 125b with approach: smt
Timezone: America/Los_Angeles
Seed 264
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/125/seed_264/
The file script/workingdir/Nopol/Closure_125 does not exist!
script/workingdir/Nopol/Closure_125
script/workingdir/Nopol/Closure_125
classpath:  script/workingdir/Nopol/Closure_125/build/classes:script/workingdir/Nopol/Closure_125/lib/args4j.jar:script/workingdir/Nopol/Closure_125/lib/guava.jar:script/workingdir/Nopol/Closure_125/lib/json.jar:script/workingdir/Nopol/Closure_125/lib/jsr305.jar:script/workingdir/Nopol/Closure_125/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_125/build/lib/rhino.jar:script/workingdir/Nopol/Closure_125/lib/ant.jar:script/workingdir/Nopol/Closure_125/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_125/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_125/lib/jarjar.jar:script/workingdir/Nopol/Closure_125/lib/junit.jar:script/workingdir/Nopol/Closure_125/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659895579843
GPR[ESLB]-1659895639849
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_125//build/classes:script/workingdir/Nopol/Closure_125//build/test:script/workingdir/Nopol/Closure_125/build/classes:script/workingdir/Nopol/Closure_125/lib/args4j.jar:script/workingdir/Nopol/Closure_125/lib/guava.jar:script/workingdir/Nopol/Closure_125/lib/json.jar:script/workingdir/Nopol/Closure_125/lib/jsr305.jar:script/workingdir/Nopol/Closure_125/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_125/build/lib/rhino.jar:script/workingdir/Nopol/Closure_125/lib/ant.jar:script/workingdir/Nopol/Closure_125/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_125/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_125/lib/jarjar.jar:script/workingdir/Nopol/Closure_125/lib/junit.jar:script/workingdir/Nopol/Closure_125/build/test
Node: host-47
Date init: Sun 07 Aug 2022 11:07:19 AM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_125/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_125/build/classes/, file:script/workingdir/Nopol/Closure_125/build/test/, file:script/workingdir/Nopol/Closure_125/build/classes/, file:script/workingdir/Nopol/Closure_125/lib/args4j.jar, file:script/workingdir/Nopol/Closure_125/lib/guava.jar, file:script/workingdir/Nopol/Closure_125/lib/json.jar, file:script/workingdir/Nopol/Closure_125/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_125/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_125/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_125/lib/ant.jar, file:script/workingdir/Nopol/Closure_125/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_125/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_125/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_125/lib/junit.jar, file:script/workingdir/Nopol/Closure_125/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_125/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AngularPassTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckSuspiciousCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.ClosureRewriteClassTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePrivatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherCharacterEncodingBiasTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.InstrumentMemoryAllocPassTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MultiPassTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeMinimizeConditionsTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVars2Test, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesForChromeTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariables2Test, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TemplatizedTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/125/seed_264/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659895645392
GPR[ESUP]-1659895645392
GPR[SFL]-1659895645393
GPR[EFL]-1659895692262
GPR[SFP]-1659895692262
GPR[SSUN]-1659895696216
-283827935
GPR[SPVATF]-1659895696741
GPR[EPVATF]-1659895696798
[56109] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895696799
GPR[SSUN]-1659895696799
-283827935
GPR[ESUN]-1659895697010
GPR[SSUN]-1659895697010
-283827935
GPR[ESUN]-1659895697214
GPR[SSUN]-1659895697214
-283827935
GPR[ESUN]-1659895697408
GPR[SSUN]-1659895697408
-283827935
GPR[SPVATF]-1659895697603
GPR[EPVATF]-1659895697629
[56939] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895697629
GPR[SSUN]-1659895697629
-283827935
GPR[ESUN]-1659895697844
GPR[SSUN]-1659895697844
-283827935
GPR[SPVATF]-1659895698038
GPR[EPVATF]-1659895698064
[57374] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895698065
GPR[SSUN]-1659895698065
-283827935
GPR[SPVATF]-1659895698260
GPR[EPVATF]-1659895698284
[57595] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895698285
GPR[SSUN]-1659895698285
-283827935
GPR[SPVATF]-1659895698479
GPR[EPVATF]-1659895698503
[57813] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895698504
GPR[SSUN]-1659895698504
-283827935
GPR[SPVATF]-1659895698700
GPR[EPVATF]-1659895698724
[58034] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895698724
GPR[SSUN]-1659895698724
-283827935
GPR[SPVATF]-1659895698922
GPR[EPVATF]-1659895698946
[58256] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895698946
GPR[SSUN]-1659895698946
-283827935
GPR[ESUN]-1659895699142
GPR[SSUN]-1659895699142
-283827935
GPR[ESUN]-1659895699336
GPR[SSUN]-1659895699336
-1966087783
GPR[ESUN]-1659895699537
GPR[SSUN]-1659895699537
-1966087783
GPR[SPVATF]-1659895699730
GPR[EPVATF]-1659895699757
[59067] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895699757
GPR[SSUN]-1659895699757
-1659631726
GPR[ESUN]-1659895699949
GPR[SSUN]-1659895699949
130004992
GPR[ESUN]-1659895700132
GPR[SSUN]-1659895700132
130004992
GPR[SPVATF]-1659895700315
GPR[EPVATF]-1659895700341
[59651] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895700341
GPR[SSUN]-1659895700341
130004992
GPR[ESUN]-1659895700528
GPR[SSUN]-1659895700528
-1966087783
GPR[SPVATF]-1659895700792
GPR[EPVATF]-1659895700815
[60125] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895700815
GPR[SSUN]-1659895700815
-1966087783
GPR[SPVATF]-1659895701012
GPR[EPVATF]-1659895701034
[60344] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895701034
GPR[SSUN]-1659895701034
890942016
GPR[ESUN]-1659895701238
GPR[SSUN]-1659895701238
890942016
GPR[SPVATF]-1659895701438
GPR[EPVATF]-1659895701458
[60769] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895701459
GPR[SSUN]-1659895701459
890942016
GPR[SPVATF]-1659895701664
GPR[EPVATF]-1659895701684
[60994] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895701684
GPR[EPVATF]-1659895701703
[61013] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895701703
GPR[SSUN]-1659895701703
890942016
GPR[ESUN]-1659895701904
GPR[SSUN]-1659895701904
890942016
GPR[ESUN]-1659895702101
GPR[SSUN]-1659895702101
-1966087783
GPR[ESUN]-1659895702294
GPR[SSUN]-1659895702294
-1966087783
GPR[SPVATF]-1659895702490
GPR[EPVATF]-1659895702510
[61820] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895702510
GPR[EPVATF]-1659895702529
[61839] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895702529
GPR[SSUN]-1659895702529
-1966087783
GPR[ESUN]-1659895702726
GPR[SSUN]-1659895702727
-1966087783
GPR[SPVATF]-1659895702921
GPR[EPVATF]-1659895702942
[62252] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895702942
GPR[EPVATF]-1659895702965
[62275] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895702965
GPR[SSUN]-1659895702965
-1966087783
GPR[ESUN]-1659895703182
GPR[SSUN]-1659895703182
-1966087783
GPR[ESUN]-1659895703376
GPR[SSUN]-1659895703376
-1966087783
GPR[ESUN]-1659895703578
GPR[SSUN]-1659895703578
1613130706
GPR[ESUN]-1659895703793
GPR[SSUN]-1659895703793
1613130706
GPR[ESUN]-1659895704004
GPR[SSUN]-1659895704004
1613130706
GPR[SPVATF]-1659895704215
GPR[EPVATF]-1659895704416
[63727] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895704417
GPR[SSUN]-1659895704417
234947553
GPR[ESUN]-1659895704618
GPR[SSUN]-1659895704618
234947553
GPR[SPVATF]-1659895704828
GPR[EPVATF]-1659895704845
[64155] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895704845
GPR[EPVATF]-1659895704859
[64169] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895704859
GPR[SSUN]-1659895704859
234947553
GPR[ESUN]-1659895705055
GPR[SSUN]-1659895705055
234947553
GPR[SPVATF]-1659895705250
GPR[EPVATF]-1659895705266
[64576] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895705266
GPR[EPVATF]-1659895705280
[64590] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895705280
GPR[SSUN]-1659895705280
234947553
GPR[SPVATF]-1659895705475
GPR[EPVATF]-1659895705490
[64800] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895705490
GPR[SSUN]-1659895705491
234947553
GPR[ESUN]-1659895705686
GPR[SSUN]-1659895705686
234947553
GPR[ESUN]-1659895705880
GPR[SSUN]-1659895705880
234947553
GPR[SPVATF]-1659895706072
GPR[EPVATF]-1659895706086
[65396] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895706086
GPR[SSUN]-1659895706086
234947553
GPR[SPVATF]-1659895706288
GPR[EPVATF]-1659895706304
[65614] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895706304
GPR[SSUN]-1659895706304
234947553
GPR[SPVATF]-1659895706501
GPR[EPVATF]-1659895706517
[65827] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895706517
GPR[SSUN]-1659895706517
234947553
GPR[ESUN]-1659895706713
GPR[SSUN]-1659895706713
234947553
GPR[ESUN]-1659895706902
GPR[SSUN]-1659895706902
234947553
GPR[SPVATF]-1659895707099
GPR[EPVATF]-1659895707114
[66424] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895707114
GPR[SSUN]-1659895707114
234947553
GPR[SPVATF]-1659895707312
GPR[EPVATF]-1659895707326
[66636] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895707326
GPR[SSUN]-1659895707326
234947553
GPR[ESUN]-1659895707522
GPR[SSUN]-1659895707522
234947553
GPR[SPVATF]-1659895707714
GPR[EPVATF]-1659895707728
[67038] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895707729
GPR[SSUN]-1659895707729
234947553
GPR[SPVATF]-1659895707924
GPR[EPVATF]-1659895707939
[67249] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895707939
GPR[SSUN]-1659895707939
234947553
GPR[ESUN]-1659895708132
GPR[SSUN]-1659895708132
890942016
GPR[SPVATF]-1659895708328
GPR[EPVATF]-1659895708347
[67657] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895708347
GPR[EPVATF]-1659895708366
[67676] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895708366
GPR[SSUN]-1659895708366
890942016
GPR[SPVATF]-1659895708569
GPR[EPVATF]-1659895708589
[67899] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895708589
GPR[SSUN]-1659895708589
890942016
GPR[ESUN]-1659895708784
GPR[SSUN]-1659895708784
890942016
GPR[SPVATF]-1659895708990
GPR[EPVATF]-1659895709009
[68319] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895709009
GPR[SSUN]-1659895709009
890942016
GPR[SPVATF]-1659895709213
GPR[EPVATF]-1659895709231
[68541] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895709231
GPR[EPVATF]-1659895709249
[68559] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895709249
GPR[SSUN]-1659895709249
890942016
GPR[SPVATF]-1659895709447
GPR[EPVATF]-1659895710449
[69759] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895710450
GPR[SSUN]-1659895710450
890942016
GPR[SPVATF]-1659895710657
GPR[EPVATF]-1659895710675
[69985] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895710675
GPR[EPVATF]-1659895710693
[70003] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895710693
GPR[SSUN]-1659895710693
890942016
GPR[ESUN]-1659895710888
GPR[SSUN]-1659895710888
890942016
GPR[SPVATF]-1659895711083
GPR[EPVATF]-1659895711101
[70412] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895711102
GPR[SSUN]-1659895711102
890942016
GPR[SPVATF]-1659895711296
GPR[EPVATF]-1659895711314
[70624] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895711314
GPR[SSUN]-1659895711314
890942016
GPR[SPVATF]-1659895711509
GPR[EPVATF]-1659895711527
[70837] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895711527
GPR[SSUN]-1659895711527
890942016
GPR[ESUN]-1659895711724
GPR[SSUN]-1659895711724
1613130706
GPR[SPVATF]-1659895711956
GPR[EPVATF]-1659895712136
[71447] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895712137
GPR[EPVATF]-1659895712354
[71665] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895712355
GPR[SSUN]-1659895712355
1613130706
GPR[SPVATF]-1659895712568
GPR[EPVATF]-1659895712748
[72058] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895712748
GPR[EPVATF]-1659895712932
[72242] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895712932
GPR[SSUN]-1659895712932
1613130706
GPR[SPVATF]-1659895713146
GPR[EPVATF]-1659895713327
[72637] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895713327
GPR[SSUN]-1659895713327
1613130706
GPR[SPVATF]-1659895713554
GPR[EPVATF]-1659895713746
[73056] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895713746
GPR[EPVATF]-1659895713927
[73237] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895713927
GPR[SSUN]-1659895713927
1613130706
GPR[SPVATF]-1659895714145
GPR[EPVATF]-1659895714326
[73636] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895714326
GPR[EPVATF]-1659895714509
[73819] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895714509
GPR[SSUN]-1659895714509
1613130706
GPR[ESUN]-1659895714724
GPR[SSUN]-1659895714724
1613130706
GPR[ESUN]-1659895714936
GPR[SSUN]-1659895714936
1613130706
GPR[ESUN]-1659895715145
GPR[SSUN]-1659895715145
1613130706
GPR[ESUN]-1659895715358
GPR[SSUN]-1659895715358
1613130706
GPR[SPVATF]-1659895715570
GPR[EPVATF]-1659895715751
[75061] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895715752
GPR[EPVATF]-1659895715934
[75245] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895715935
GPR[SSUN]-1659895715935
-1696950979
GPR[SPVATF]-1659895716181
GPR[EPVATF]-1659895718826
GPR[SPS]-1659895718826
[79146] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:205.
GPR[EPS]-1659895719836
GPR[ESUN]-1659895719836
GPR[SSUN]-1659895719836
-1696950979
GPR[SPVATF]-1659895720077
GPR[EPVATF]-1659895721911
GPR[SPS]-1659895721911
GPR[EPS]-1659895736222
GPR[ESUN]-1659895736222
GPR[SSUN]-1659895736222
-1696950979
GPR[SPVATF]-1659895736560
GPR[EPVATF]-1659895738397
GPR[SPS]-1659895738397
GPR[EPS]-1659895750927
GPR[SPVATF]-1659895750927
GPR[EPVATF]-1659895752803
GPR[SPS]-1659895752803
GPR[EPS]-1659895761679
GPR[ESUN]-1659895761679
GPR[SSUN]-1659895761679
1613130706
GPR[SPVATF]-1659895761903
GPR[EPVATF]-1659895762092
[121402] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895762092
GPR[SSUN]-1659895762092
1613130706
GPR[ESUN]-1659895762304
GPR[SSUN]-1659895762304
1613130706
GPR[SPVATF]-1659895762527
GPR[EPVATF]-1659895762712
[122022] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895762712
GPR[EPVATF]-1659895762901
[122211] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895762901
GPR[SSUN]-1659895762901
1613130706
GPR[ESUN]-1659895763120
GPR[SSUN]-1659895763120
1613130706
GPR[SPVATF]-1659895763340
GPR[EPVATF]-1659895763531
[122841] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895763531
GPR[EPVATF]-1659895764509
[123819] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895764509
GPR[SSUN]-1659895764509
-1966087783
GPR[ESUN]-1659895764717
GPR[SSUN]-1659895764717
-1966087783
GPR[SPVATF]-1659895764913
GPR[EPVATF]-1659895764934
[124244] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895764934
GPR[EPVATF]-1659895764959
[124269] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895764959
GPR[SSUN]-1659895764959
-1966087783
GPR[SPVATF]-1659895765156
GPR[EPVATF]-1659895765175
[124485] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895765175
GPR[SSUN]-1659895765175
-1966087783
GPR[SPVATF]-1659895765368
GPR[EPVATF]-1659895765390
[124700] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895765391
GPR[EPVATF]-1659895765412
[124722] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895765412
GPR[SSUN]-1659895765412
-1966087783
GPR[SPVATF]-1659895765608
GPR[EPVATF]-1659895765630
[124940] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895765630
GPR[EPVATF]-1659895765651
[124961] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895765651
GPR[SSUN]-1659895765651
-1966087783
GPR[SPVATF]-1659895765848
GPR[EPVATF]-1659895765872
[125182] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895765872
GPR[EPVATF]-1659895765895
[125205] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895765895
GPR[SSUN]-1659895765895
-1966087783
GPR[ESUN]-1659895766098
GPR[SSUN]-1659895766098
-1966087783
GPR[ESUN]-1659895766295
GPR[SSUN]-1659895766295
-1966087783
GPR[SPVATF]-1659895766492
GPR[EPVATF]-1659895766515
[125825] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895766515
GPR[EPVATF]-1659895766536
[125846] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895766536
GPR[SSUN]-1659895766536
-1966087783
GPR[SPVATF]-1659895766730
GPR[EPVATF]-1659895766752
[126062] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895766753
GPR[EPVATF]-1659895766773
[126083] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895766773
GPR[SSUN]-1659895766773
-1966087783
GPR[ESUN]-1659895766970
GPR[SSUN]-1659895766970
-1966087783
GPR[SPVATF]-1659895767171
GPR[EPVATF]-1659895767194
[126504] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895767194
GPR[SSUN]-1659895767194
-1966087783
GPR[SPVATF]-1659895767392
GPR[EPVATF]-1659895767423
[126733] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895767423
GPR[SSUN]-1659895767423
-1966087783
GPR[ESUN]-1659895767621
GPR[SSUN]-1659895767621
-1966087783
GPR[SPVATF]-1659895767821
GPR[EPVATF]-1659895767843
[127153] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895767843
GPR[SSUN]-1659895767843
-1966087783
GPR[ESUN]-1659895768039
GPR[SSUN]-1659895768039
-1966087783
GPR[ESUN]-1659895768232
GPR[SSUN]-1659895768232
-1966087783
GPR[SPVATF]-1659895768429
GPR[EPVATF]-1659895768451
[127761] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895768451
GPR[SSUN]-1659895768451
-1966087783
GPR[SPVATF]-1659895768642
GPR[EPVATF]-1659895768663
[127973] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895768663
GPR[SSUN]-1659895768663
-1797850673
GPR[SPVATF]-1659895768935
GPR[EPVATF]-1659895770798
GPR[SPS]-1659895770798
[131072] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:678.
GPR[EPS]-1659895771762
GPR[SPVATF]-1659895771763
GPR[EPVATF]-1659895773666
GPR[SPS]-1659895773666
[133742] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:678.
GPR[EPS]-1659895774432
GPR[ESUN]-1659895774432
GPR[SSUN]-1659895774432
-1966087783
GPR[SPVATF]-1659895774626
GPR[EPVATF]-1659895774644
[133955] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895774645
GPR[SSUN]-1659895774645
-1966087783
GPR[SPVATF]-1659895774836
GPR[EPVATF]-1659895774853
[134164] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895774854
GPR[SSUN]-1659895774854
-1966087783
GPR[SPVATF]-1659895775046
GPR[EPVATF]-1659895775064
[134374] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895775064
GPR[SSUN]-1659895775064
-1966087783
GPR[SPVATF]-1659895775259
GPR[EPVATF]-1659895775276
[134586] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895775276
GPR[SSUN]-1659895775276
-1966087783
GPR[SPVATF]-1659895775468
GPR[EPVATF]-1659895775486
[134796] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895775486
GPR[SSUN]-1659895775486
-1966087783
GPR[SPVATF]-1659895775679
GPR[EPVATF]-1659895775698
[135008] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895775698
GPR[SSUN]-1659895775698
-1966087783
GPR[SPVATF]-1659895775891
GPR[EPVATF]-1659895775908
[135219] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895775909
GPR[EPVATF]-1659895775925
[135236] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895775926
GPR[SSUN]-1659895775926
-1966087783
GPR[ESUN]-1659895776117
GPR[SSUN]-1659895776117
-1696950979
GPR[SPVATF]-1659895776371
GPR[EPVATF]-1659895778259
GPR[SPS]-1659895778259
GPR[EPS]-1659895784135
GPR[ESUN]-1659895784135
GPR[SSUN]-1659895784135
-2097135580
GPR[SPVATF]-1659895784356
GPR[EPVATF]-1659895786220
GPR[SPS]-1659895786220
[146173] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:958.
GPR[EPS]-1659895786863
GPR[ESUN]-1659895786863
GPR[SSUN]-1659895786863
-132053243
GPR[SPVATF]-1659895787063
GPR[EPVATF]-1659895787080
[146391] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895787081
GPR[SSUN]-1659895787081
-132053243
GPR[SPVATF]-1659895787307
GPR[EPVATF]-1659895787325
[146635] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895787325
GPR[SSUN]-1659895787325
-132053243
GPR[SPVATF]-1659895787520
GPR[EPVATF]-1659895787539
[146849] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895787539
GPR[SSUN]-1659895787539
-132053243
GPR[SPVATF]-1659895787730
GPR[EPVATF]-1659895787748
[147058] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895787748
GPR[EPVATF]-1659895787765
[147075] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895787765
GPR[SSUN]-1659895787765
-132053243
GPR[ESUN]-1659895787959
GPR[SSUN]-1659895787959
-2097135580
GPR[ESUN]-1659895788174
GPR[SSUN]-1659895788174
-2097135580
GPR[ESUN]-1659895788389
GPR[SSUN]-1659895788389
-132053243
GPR[ESUN]-1659895788585
GPR[SSUN]-1659895788585
-132053243
GPR[SPVATF]-1659895788779
GPR[EPVATF]-1659895788797
[148107] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895788798
GPR[EPVATF]-1659895788816
[148126] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895788816
GPR[SSUN]-1659895788816
-132053243
GPR[ESUN]-1659895789009
GPR[SSUN]-1659895789009
-132053243
GPR[ESUN]-1659895789199
GPR[SSUN]-1659895789199
-132053243
GPR[ESUN]-1659895789388
GPR[SSUN]-1659895789388
-132053243
GPR[SPVATF]-1659895789582
GPR[EPVATF]-1659895789599
[148910] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895789600
GPR[EPVATF]-1659895789618
[148928] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895789618
GPR[SSUN]-1659895789618
-132053243
GPR[SPVATF]-1659895789824
GPR[EPVATF]-1659895789842
[149152] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895789842
GPR[SSUN]-1659895789842
-2097135580
GPR[SPVATF]-1659895790089
GPR[EPVATF]-1659895792014
GPR[SPS]-1659895792014
[151817] ERROR ConstraintModelBuilder - Unable to compile the change: 
public abstract class JSType implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    private boolean resolved = false;

    private com.google.javascript.rhino.jstype.JSType resolveResult = null;

    protected com.google.javascript.rhino.jstype.TemplateTypeMap templateTypeMap;

    private boolean inTemplatedCheckVisit = false;

    private static final com.google.javascript.rhino.jstype.CanCastToVisitor CAN_CAST_TO_VISITOR = new com.google.javascript.rhino.jstype.CanCastToVisitor();

    public static final java.lang.String UNKNOWN_NAME = "Unknown class name";

    public static final java.lang.String NOT_A_CLASS = "Not declared as a constructor";

    public static final java.lang.String NOT_A_TYPE = "Not declared as a type name";

    public static final java.lang.String EMPTY_TYPE_COMPONENT = "Named type with empty name component";

    static final java.util.Comparator<com.google.javascript.rhino.jstype.JSType> ALPHA = new java.util.Comparator<com.google.javascript.rhino.jstype.JSType>() {
        @java.lang.Override
        public int compare(com.google.javascript.rhino.jstype.JSType t1, com.google.javascript.rhino.jstype.JSType t2) {
            return t1.toString().compareTo(t2.toString());
        }
    };

    public static final int ENUMDECL = 1;

    public static final int NOT_ENUMDECL = 0;

    final com.google.javascript.rhino.jstype.JSTypeRegistry registry;

    JSType(com.google.javascript.rhino.jstype.JSTypeRegistry registry) {
        this(registry, null);
    }

    JSType(com.google.javascript.rhino.jstype.JSTypeRegistry registry, com.google.javascript.rhino.jstype.TemplateTypeMap templateTypeMap) {
        this.registry = registry;
        this.templateTypeMap = (templateTypeMap == null) ? registry.createTemplateTypeMap(null, null) : templateTypeMap;
    }

    com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return registry.getNativeType(typeId);
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return null;
    }

    public java.lang.String getDisplayName() {
        return null;
    }

    public boolean hasDisplayName() {
        java.lang.String displayName = getDisplayName();
        return (displayName != null) && (!displayName.isEmpty());
    }

    public boolean hasProperty(java.lang.String pname) {
        return false;
    }

    public boolean isNoType() {
        return false;
    }

    public boolean isNoResolvedType() {
        return false;
    }

    public boolean isNoObjectType() {
        return false;
    }

    public final boolean isEmptyType() {
        return ((isNoType() || isNoObjectType()) || isNoResolvedType()) || (registry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative.LEAST_FUNCTION_TYPE) == this);
    }

    public boolean isNumberObjectType() {
        return false;
    }

    public boolean isNumberValueType() {
        return false;
    }

    public boolean isFunctionPrototypeType() {
        return false;
    }

    public boolean isStringObjectType() {
        return false;
    }

    boolean isTheObjectType() {
        return false;
    }

    public boolean isStringValueType() {
        return false;
    }

    public final boolean isString() {
        return isSubtype(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE));
    }

    public final boolean isNumber() {
        return isSubtype(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE));
    }

    public boolean isArrayType() {
        return false;
    }

    public boolean isBooleanObjectType() {
        return false;
    }

    public boolean isBooleanValueType() {
        return false;
    }

    public boolean isRegexpType() {
        return false;
    }

    public boolean isDateType() {
        return false;
    }

    public boolean isNullType() {
        return false;
    }

    public boolean isVoidType() {
        return false;
    }

    public boolean isAllType() {
        return false;
    }

    public boolean isUnknownType() {
        return false;
    }

    public boolean isCheckedUnknownType() {
        return false;
    }

    public final boolean isUnionType() {
        return toMaybeUnionType() != null;
    }

    public boolean isStruct() {
        if (isObject()) {
            com.google.javascript.rhino.jstype.ObjectType objType = toObjectType();
            com.google.javascript.rhino.jstype.ObjectType iproto = objType.getImplicitPrototype();
            if ((iproto != null) && iproto.isStruct()) {
                return true;
            }
            com.google.javascript.rhino.jstype.FunctionType ctor = objType.getConstructor();
            if (ctor == null) {
                com.google.javascript.rhino.JSDocInfo info = objType.getJSDocInfo();
                return (info != null) && info.makesStructs();
            } else {
                return ctor.makesStructs();
            }
        }
        return false;
    }

    public boolean isDict() {
        if (isObject()) {
            com.google.javascript.rhino.jstype.ObjectType objType = toObjectType();
            com.google.javascript.rhino.jstype.ObjectType iproto = objType.getImplicitPrototype();
            if ((iproto != null) && iproto.isDict()) {
                return true;
            }
            com.google.javascript.rhino.jstype.FunctionType ctor = objType.getConstructor();
            if (ctor == null) {
                com.google.javascript.rhino.JSDocInfo info = objType.getJSDocInfo();
                return (info != null) && info.makesDicts();
            } else {
                return ctor.makesDicts();
            }
        }
        return false;
    }

    public com.google.javascript.rhino.jstype.UnionType toMaybeUnionType() {
        return null;
    }

    public final boolean isGlobalThisType() {
        return this == registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.GLOBAL_THIS);
    }

    public final boolean isFunctionType() {
        return toMaybeFunctionType() != null;
    }

    public com.google.javascript.rhino.jstype.FunctionType toMaybeFunctionType() {
        return null;
    }

    public static com.google.javascript.rhino.jstype.FunctionType toMaybeFunctionType(com.google.javascript.rhino.jstype.JSType type) {
        return type == null ? null : type.toMaybeFunctionType();
    }

    public final boolean isEnumElementType() {
        return toMaybeEnumElementType() != null;
    }

    public com.google.javascript.rhino.jstype.EnumElementType toMaybeEnumElementType() {
        return null;
    }

    public boolean isEnumType() {
        return toMaybeEnumType() != null;
    }

    public com.google.javascript.rhino.jstype.EnumType toMaybeEnumType() {
        return null;
    }

    boolean isNamedType() {
        return false;
    }

    public boolean isRecordType() {
        return toMaybeRecordType() != null;
    }

    com.google.javascript.rhino.jstype.RecordType toMaybeRecordType() {
        return null;
    }

    public final boolean isTemplatizedType() {
        return toMaybeTemplatizedType() != null;
    }

    public com.google.javascript.rhino.jstype.TemplatizedType toMaybeTemplatizedType() {
        return null;
    }

    public static com.google.javascript.rhino.jstype.TemplatizedType toMaybeTemplatizedType(com.google.javascript.rhino.jstype.JSType type) {
        return type == null ? null : type.toMaybeTemplatizedType();
    }

    public final boolean isTemplateType() {
        return toMaybeTemplateType() != null;
    }

    public com.google.javascript.rhino.jstype.TemplateType toMaybeTemplateType() {
        return null;
    }

    public static com.google.javascript.rhino.jstype.TemplateType toMaybeTemplateType(com.google.javascript.rhino.jstype.JSType type) {
        return type == null ? null : type.toMaybeTemplateType();
    }

    public boolean hasAnyTemplateTypes() {
        if (!this.inTemplatedCheckVisit) {
            this.inTemplatedCheckVisit = true;
            boolean result = hasAnyTemplateTypesInternal();
            this.inTemplatedCheckVisit = false;
            return result;
        } else {
            return false;
        }
    }

    boolean hasAnyTemplateTypesInternal() {
        return templateTypeMap.hasAnyTemplateTypesInternal();
    }

    public com.google.javascript.rhino.jstype.TemplateTypeMap getTemplateTypeMap() {
        return templateTypeMap;
    }

    public void extendTemplateTypeMap(com.google.javascript.rhino.jstype.TemplateTypeMap otherMap) {
        templateTypeMap = templateTypeMap.extend(otherMap);
    }

    public boolean isObject() {
        return false;
    }

    public boolean isConstructor() {
        return false;
    }

    public boolean isNominalType() {
        return false;
    }

    public final boolean isNominalConstructor() {
        if (isConstructor() || isInterface()) {
            com.google.javascript.rhino.jstype.FunctionType fn = toMaybeFunctionType();
            if (fn == null) {
                return false;
            }
            if (fn.getSource() != null) {
                return true;
            }
            return fn.isNativeObjectType();
        }
        return false;
    }

    public boolean isInstanceType() {
        return false;
    }

    public boolean isInterface() {
        return false;
    }

    public boolean isOrdinaryFunction() {
        return false;
    }

    public final boolean isEquivalentTo(com.google.javascript.rhino.jstype.JSType that) {
        return checkEquivalenceHelper(that, com.google.javascript.rhino.jstype.EquivalenceMethod.IDENTITY);
    }

    public final boolean isInvariant(com.google.javascript.rhino.jstype.JSType that) {
        return checkEquivalenceHelper(that, com.google.javascript.rhino.jstype.EquivalenceMethod.INVARIANT);
    }

    public final boolean differsFrom(com.google.javascript.rhino.jstype.JSType that) {
        return !checkEquivalenceHelper(that, com.google.javascript.rhino.jstype.EquivalenceMethod.DATA_FLOW);
    }

    boolean checkEquivalenceHelper(com.google.javascript.rhino.jstype.JSType that, com.google.javascript.rhino.jstype.EquivalenceMethod eqMethod) {
        if (this == that) {
            return true;
        }
        boolean thisUnknown = isUnknownType();
        boolean thatUnknown = that.isUnknownType();
        if (thisUnknown || thatUnknown) {
            if (eqMethod == com.google.javascript.rhino.jstype.EquivalenceMethod.INVARIANT) {
                return true;
            } else if (eqMethod == com.google.javascript.rhino.jstype.EquivalenceMethod.DATA_FLOW) {
                return thisUnknown && thatUnknown;
            } else if ((thisUnknown && thatUnknown) && (isNominalType() ^ that.isNominalType())) {
                return false;
            }
        }
        if (isUnionType() && that.isUnionType()) {
            return toMaybeUnionType().checkUnionEquivalenceHelper(that.toMaybeUnionType(), eqMethod);
        }
        if (isFunctionType() && that.isFunctionType()) {
            return toMaybeFunctionType().checkFunctionEquivalenceHelper(that.toMaybeFunctionType(), eqMethod);
        }
        if (isRecordType() && that.isRecordType()) {
            return toMaybeRecordType().checkRecordEquivalenceHelper(that.toMaybeRecordType(), eqMethod);
        }
        if (!getTemplateTypeMap().checkEquivalenceHelper(that.getTemplateTypeMap(), eqMethod)) {
            return false;
        }
        if (isNominalType() && that.isNominalType()) {
            return toObjectType().getReferenceName().equals(that.toObjectType().getReferenceName());
        }
        if (this instanceof com.google.javascript.rhino.jstype.ProxyObjectType) {
            return ((com.google.javascript.rhino.jstype.ProxyObjectType) (this)).getReferencedTypeInternal().checkEquivalenceHelper(that, eqMethod);
        }
        if (that instanceof com.google.javascript.rhino.jstype.ProxyObjectType) {
            return checkEquivalenceHelper(((com.google.javascript.rhino.jstype.ProxyObjectType) (that)).getReferencedTypeInternal(), eqMethod);
        }
        return this == that;
    }

    public static boolean isEquivalent(com.google.javascript.rhino.jstype.JSType typeA, com.google.javascript.rhino.jstype.JSType typeB) {
        return (typeA == null) || (typeB == null) ? typeA == typeB : typeA.isEquivalentTo(typeB);
    }

    @java.lang.Override
    public boolean equals(java.lang.Object jsType) {
        return jsType instanceof com.google.javascript.rhino.jstype.JSType ? isEquivalentTo(((com.google.javascript.rhino.jstype.JSType) (jsType))) : false;
    }

    @java.lang.Override
    public int hashCode() {
        return java.lang.System.identityHashCode(this);
    }

    public final boolean matchesInt32Context() {
        return matchesNumberContext();
    }

    public final boolean matchesUint32Context() {
        return matchesNumberContext();
    }

    public boolean matchesNumberContext() {
        return false;
    }

    public boolean matchesStringContext() {
        return false;
    }

    public boolean matchesObjectContext() {
        return false;
    }

    public com.google.javascript.rhino.jstype.JSType findPropertyType(java.lang.String propertyName) {
        com.google.javascript.rhino.jstype.ObjectType autoboxObjType = com.google.javascript.rhino.jstype.ObjectType.cast(autoboxesTo());
        if (autoboxObjType != null) {
            return autoboxObjType.findPropertyType(propertyName);
        }
        return null;
    }

    public boolean canBeCalled() {
        return false;
    }

    public boolean canCastTo(com.google.javascript.rhino.jstype.JSType that) {
        return this.visit(com.google.javascript.rhino.jstype.JSType.CAN_CAST_TO_VISITOR, that);
    }

    public com.google.javascript.rhino.jstype.JSType autoboxesTo() {
        return null;
    }

    public com.google.javascript.rhino.jstype.JSType unboxesTo() {
        return null;
    }

    public com.google.javascript.rhino.jstype.ObjectType toObjectType() {
        return this instanceof com.google.javascript.rhino.jstype.ObjectType ? ((com.google.javascript.rhino.jstype.ObjectType) (this)) : null;
    }

    public com.google.javascript.rhino.jstype.JSType autobox() {
        com.google.javascript.rhino.jstype.JSType restricted = restrictByNotNullOrUndefined();
        com.google.javascript.rhino.jstype.JSType autobox = restricted.autoboxesTo();
        return autobox == null ? restricted : autobox;
    }

    public final com.google.javascript.rhino.jstype.ObjectType dereference() {
        return autobox().toObjectType();
    }

    public final boolean canTestForEqualityWith(com.google.javascript.rhino.jstype.JSType that) {
        return testForEquality(that).equals(com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN);
    }

    public com.google.javascript.rhino.jstype.TernaryValue testForEquality(com.google.javascript.rhino.jstype.JSType that) {
        return testForEqualityHelper(this, that);
    }

    com.google.javascript.rhino.jstype.TernaryValue testForEqualityHelper(com.google.javascript.rhino.jstype.JSType aType, com.google.javascript.rhino.jstype.JSType bType) {
        if (((((bType.isAllType() || bType.isUnknownType()) || bType.isNoResolvedType()) || aType.isAllType()) || aType.isUnknownType()) || aType.isNoResolvedType()) {
            return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        }
        boolean aIsEmpty = aType.isEmptyType();
        boolean bIsEmpty = bType.isEmptyType();
        if (aIsEmpty || bIsEmpty) {
            if (aIsEmpty && bIsEmpty) {
                return com.google.javascript.rhino.jstype.TernaryValue.TRUE;
            } else {
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            }
        }
        if (aType.isFunctionType() || bType.isFunctionType()) {
            com.google.javascript.rhino.jstype.JSType otherType = (aType.isFunctionType()) ? bType : aType;
            com.google.javascript.rhino.jstype.JSType meet = otherType.getGreatestSubtype(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE));
            if (meet.isNoType() || meet.isNoObjectType()) {
                return com.google.javascript.rhino.jstype.TernaryValue.FALSE;
            } else {
                return com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
            }
        }
        if (bType.isEnumElementType() || bType.isUnionType()) {
            return bType.testForEquality(aType);
        }
        return null;
    }

    public final boolean canTestForShallowEqualityWith(com.google.javascript.rhino.jstype.JSType that) {
        if (isEmptyType() || that.isEmptyType()) {
            return isSubtype(that) || that.isSubtype(this);
        }
        com.google.javascript.rhino.jstype.JSType inf = getGreatestSubtype(that);
        return (!inf.isEmptyType()) || (inf == registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.LEAST_FUNCTION_TYPE));
    }

    public boolean isNullable() {
        return isSubtype(getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE));
    }

    public com.google.javascript.rhino.jstype.JSType collapseUnion() {
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getLeastSupertype(com.google.javascript.rhino.jstype.JSType that) {
        if (that.isUnionType()) {
            return that.toMaybeUnionType().getLeastSupertype(this);
        }
        return com.google.javascript.rhino.jstype.JSType.getLeastSupertype(this, that);
    }

    static com.google.javascript.rhino.jstype.JSType getLeastSupertype(com.google.javascript.rhino.jstype.JSType thisType, com.google.javascript.rhino.jstype.JSType thatType) {
        boolean areEquivalent = thisType.isEquivalentTo(thatType);
        return areEquivalent ? thisType : com.google.javascript.rhino.jstype.JSType.filterNoResolvedType(thisType.registry.createUnionType(thisType, thatType));
    }

    public com.google.javascript.rhino.jstype.JSType getGreatestSubtype(com.google.javascript.rhino.jstype.JSType that) {
        return com.google.javascript.rhino.jstype.JSType.getGreatestSubtype(this, that);
    }

    static com.google.javascript.rhino.jstype.JSType getGreatestSubtype(com.google.javascript.rhino.jstype.JSType thisType, com.google.javascript.rhino.jstype.JSType thatType) {
        if (thisType.isFunctionType() && thatType.isFunctionType()) {
            return thisType.toMaybeFunctionType().supAndInfHelper(thatType.toMaybeFunctionType(), false);
        } else if (thisType.isEquivalentTo(thatType)) {
            return thisType;
        } else if (thisType.isUnknownType() || thatType.isUnknownType()) {
            return thisType.isEquivalentTo(thatType) ? thisType : thisType.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else if (thisType.isUnionType()) {
            return thisType.toMaybeUnionType().meet(thatType);
        } else if (thatType.isUnionType()) {
            return thatType.toMaybeUnionType().meet(thisType);
        } else if (thisType.isTemplatizedType()) {
            return thisType.toMaybeTemplatizedType().getGreatestSubtypeHelper(thatType);
        } else if (thatType.isTemplatizedType()) {
            return thatType.toMaybeTemplatizedType().getGreatestSubtypeHelper(thisType);
        } else if (thisType.isSubtype(thatType)) {
            return com.google.javascript.rhino.jstype.JSType.filterNoResolvedType(thisType);
        } else if (thatType.isSubtype(thisType)) {
            return com.google.javascript.rhino.jstype.JSType.filterNoResolvedType(thatType);
        } else if (thisType.isRecordType()) {
            return thisType.toMaybeRecordType().getGreatestSubtypeHelper(thatType);
        } else if (thatType.isRecordType()) {
            return thatType.toMaybeRecordType().getGreatestSubtypeHelper(thisType);
        }
        if (thisType.isEnumElementType()) {
            com.google.javascript.rhino.jstype.JSType inf = thisType.toMaybeEnumElementType().meet(thatType);
            if (inf != null) {
                return inf;
            }
        } else if (thatType.isEnumElementType()) {
            com.google.javascript.rhino.jstype.JSType inf = thatType.toMaybeEnumElementType().meet(thisType);
            if (inf != null) {
                return inf;
            }
        }
        if (thisType.isObject() && thatType.isObject()) {
            return thisType.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE);
        }
        return thisType.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
    }

    static com.google.javascript.rhino.jstype.JSType filterNoResolvedType(com.google.javascript.rhino.jstype.JSType type) {
        if (type.isNoResolvedType()) {
            return type.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_RESOLVED_TYPE);
        } else if (type.isUnionType()) {
            com.google.javascript.rhino.jstype.UnionType unionType = type.toMaybeUnionType();
            boolean needsFiltering = false;
            for (com.google.javascript.rhino.jstype.JSType alt : unionType.getAlternates()) {
                if (alt.isNoResolvedType()) {
                    needsFiltering = true;
                    break;
                }
            }
            if (needsFiltering) {
                com.google.javascript.rhino.jstype.UnionTypeBuilder builder = new com.google.javascript.rhino.jstype.UnionTypeBuilder(type.registry);
                builder.addAlternate(type.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_RESOLVED_TYPE));
                for (com.google.javascript.rhino.jstype.JSType alt : unionType.getAlternates()) {
                    if (!alt.isNoResolvedType()) {
                        builder.addAlternate(alt);
                    }
                }
                return builder.build();
            }
        }
        return type;
    }

    public com.google.javascript.rhino.jstype.JSType getRestrictedTypeGivenToBooleanOutcome(boolean outcome) {
        if (outcome && (this == getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.jstype.BooleanLiteralSet literals = getPossibleToBooleanOutcomes();
        if (literals.contains(outcome)) {
            return this;
        } else {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
        }
    }

    public abstract com.google.javascript.rhino.jstype.BooleanLiteralSet getPossibleToBooleanOutcomes();

    public com.google.javascript.rhino.jstype.JSType.TypePair getTypesUnderEquality(com.google.javascript.rhino.jstype.JSType that) {
        if (that.isUnionType()) {
            com.google.javascript.rhino.jstype.JSType.TypePair p = that.toMaybeUnionType().getTypesUnderEquality(this);
            return new com.google.javascript.rhino.jstype.JSType.TypePair(p.typeB, p.typeA);
        }
        switch (testForEquality(that)) {
            case FALSE :
                return new com.google.javascript.rhino.jstype.JSType.TypePair(null, null);
            case TRUE :
            case UNKNOWN :
                return new com.google.javascript.rhino.jstype.JSType.TypePair(this, that);
        }
        throw new java.lang.IllegalStateException();
    }

    public com.google.javascript.rhino.jstype.JSType.TypePair getTypesUnderInequality(com.google.javascript.rhino.jstype.JSType that) {
        if (that.isUnionType()) {
            com.google.javascript.rhino.jstype.JSType.TypePair p = that.toMaybeUnionType().getTypesUnderInequality(this);
            return new com.google.javascript.rhino.jstype.JSType.TypePair(p.typeB, p.typeA);
        }
        switch (testForEquality(that)) {
            case TRUE :
                com.google.javascript.rhino.jstype.JSType noType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.NO_TYPE);
                return new com.google.javascript.rhino.jstype.JSType.TypePair(noType, noType);
            case FALSE :
            case UNKNOWN :
                return new com.google.javascript.rhino.jstype.JSType.TypePair(this, that);
        }
        throw new java.lang.IllegalStateException();
    }

    public com.google.javascript.rhino.jstype.JSType.TypePair getTypesUnderShallowEquality(com.google.javascript.rhino.jstype.JSType that) {
        com.google.javascript.rhino.jstype.JSType commonType = getGreatestSubtype(that);
        return new com.google.javascript.rhino.jstype.JSType.TypePair(commonType, commonType);
    }

    public com.google.javascript.rhino.jstype.JSType.TypePair getTypesUnderShallowInequality(com.google.javascript.rhino.jstype.JSType that) {
        if (that.isUnionType()) {
            com.google.javascript.rhino.jstype.JSType.TypePair p = that.toMaybeUnionType().getTypesUnderShallowInequality(this);
            return new com.google.javascript.rhino.jstype.JSType.TypePair(p.typeB, p.typeA);
        }
        if ((isNullType() && that.isNullType()) || (isVoidType() && that.isVoidType())) {
            return new com.google.javascript.rhino.jstype.JSType.TypePair(null, null);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(8).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("that.inTemplatedCheckVisit",that.inTemplatedCheckVisit);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.ALPHA",com.google.javascript.rhino.jstype.JSType.ALPHA);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.ENUMDECL",com.google.javascript.rhino.jstype.JSType.ENUMDECL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("that.registry",that.registry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.EMPTY_TYPE_COMPONENT",com.google.javascript.rhino.jstype.JSType.EMPTY_TYPE_COMPONENT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.this.resolveResult",com.google.javascript.rhino.jstype.JSType.this.resolveResult);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS",com.google.javascript.rhino.jstype.JSType.NOT_A_CLASS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.this.templateTypeMap",com.google.javascript.rhino.jstype.JSType.this.templateTypeMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL",com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("that",that);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.NOT_A_TYPE",com.google.javascript.rhino.jstype.JSType.NOT_A_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("that.resolved",that.resolved);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.serialVersionUID",com.google.javascript.rhino.jstype.JSType.serialVersionUID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.UNKNOWN_NAME",com.google.javascript.rhino.jstype.JSType.UNKNOWN_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.this.registry",com.google.javascript.rhino.jstype.JSType.this.registry);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.CAN_CAST_TO_VISITOR",com.google.javascript.rhino.jstype.JSType.CAN_CAST_TO_VISITOR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.this.resolved",com.google.javascript.rhino.jstype.JSType.this.resolved);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("that.templateTypeMap",that.templateTypeMap);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.this.inTemplatedCheckVisit",com.google.javascript.rhino.jstype.JSType.this.inTemplatedCheckVisit);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("that.resolveResult",that.resolveResult);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.rhino.jstype.JSType.this.resolveResult!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.this.resolveResult.isResolved()",com.google.javascript.rhino.jstype.JSType.this.resolveResult.isResolved());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectInput("com.google.javascript.rhino.jstype.JSType.this.resolveResult.getTemplateTypeMap()",com.google.javascript.rhino.jstype.JSType.this.resolveResult.getTemplateTypeMap());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(8).collectionEnds();
            }
            if (runtimeAngelicValue)
                return new com.google.javascript.rhino.jstype.JSType.TypePair(this, that);

        }
    }

    public com.google.javascript.rhino.jstype.JSType restrictByNotNullOrUndefined() {
        return this;
    }

    public boolean isSubtype(com.google.javascript.rhino.jstype.JSType that) {
        return com.google.javascript.rhino.jstype.JSType.isSubtypeHelper(this, that);
    }

    static boolean isSubtypeHelper(com.google.javascript.rhino.jstype.JSType thisType, com.google.javascript.rhino.jstype.JSType thatType) {
        if (thatType.isUnknownType()) {
            return true;
        }
        if (thatType.isAllType()) {
            return true;
        }
        if (thisType.isEquivalentTo(thatType)) {
            return true;
        }
        if (thatType.isUnionType()) {
            com.google.javascript.rhino.jstype.UnionType union = thatType.toMaybeUnionType();
            for (com.google.javascript.rhino.jstype.JSType element : union.alternates) {
                if (thisType.isSubtype(element)) {
                    return true;
                }
            }
            return false;
        }
        com.google.javascript.rhino.jstype.TemplateTypeMap thisTypeParams = thisType.getTemplateTypeMap();
        com.google.javascript.rhino.jstype.TemplateTypeMap thatTypeParams = thatType.getTemplateTypeMap();
        boolean templateMatch = true;
        if (com.google.javascript.rhino.jstype.JSType.isExemptFromTemplateTypeInvariance(thatType)) {
            com.google.javascript.rhino.jstype.TemplateType key = thisType.registry.getObjectElementKey();
            com.google.javascript.rhino.jstype.JSType thisElement = thisTypeParams.getTemplateType(key);
            com.google.javascript.rhino.jstype.JSType thatElement = thatTypeParams.getTemplateType(key);
            templateMatch = thisElement.isSubtype(thatElement) || thatElement.isSubtype(thisElement);
        } else {
            templateMatch = thisTypeParams.checkEquivalenceHelper(thatTypeParams, com.google.javascript.rhino.jstype.EquivalenceMethod.INVARIANT);
        }
        if (!templateMatch) {
            return false;
        }
        if (thisType.isTemplatizedType()) {
            return thisType.toMaybeTemplatizedType().getReferencedType().isSubtype(thatType);
        }
        if (thatType instanceof com.google.javascript.rhino.jstype.ProxyObjectType) {
            return thisType.isSubtype(((com.google.javascript.rhino.jstype.ProxyObjectType) (thatType)).getReferencedTypeInternal());
        }
        return false;
    }

    static boolean isExemptFromTemplateTypeInvariance(com.google.javascript.rhino.jstype.JSType type) {
        com.google.javascript.rhino.jstype.ObjectType objType = type.toObjectType();
        return ((objType == null) || "Array".equals(objType.getReferenceName())) || "Object".equals(objType.getReferenceName());
    }

    public abstract <T> T visit(com.google.javascript.rhino.jstype.Visitor<T> visitor);

    abstract <T> T visit(com.google.javascript.rhino.jstype.RelationshipVisitor<T> visitor, com.google.javascript.rhino.jstype.JSType that);

    public final com.google.javascript.rhino.jstype.JSType forceResolve(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode oldResolveMode = registry.getResolveMode();
        registry.setResolveMode(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE);
        com.google.javascript.rhino.jstype.JSType result = resolve(t, scope);
        registry.setResolveMode(oldResolveMode);
        return result;
    }

    public final com.google.javascript.rhino.jstype.JSType resolve(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        if (resolved) {
            if (resolveResult == null) {
                return registry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            }
            return resolveResult;
        }
        resolved = true;
        resolveResult = resolveInternal(t, scope);
        resolveResult.setResolvedTypeInternal(resolveResult);
        return resolveResult;
    }

    abstract com.google.javascript.rhino.jstype.JSType resolveInternal(com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope);

    void setResolvedTypeInternal(com.google.javascript.rhino.jstype.JSType type) {
        resolveResult = type;
        resolved = true;
    }

    public final boolean isResolved() {
        return resolved;
    }

    public final void clearResolved() {
        resolved = false;
        resolveResult = null;
    }

    static final com.google.javascript.rhino.jstype.JSType safeResolve(com.google.javascript.rhino.jstype.JSType type, com.google.javascript.rhino.ErrorReporter t, com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> scope) {
        return type == null ? null : type.resolve(t, scope);
    }

    public boolean setValidator(com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> validator) {
        return validator.apply(this);
    }

    public static class TypePair {
        public final com.google.javascript.rhino.jstype.JSType typeA;

        public final com.google.javascript.rhino.jstype.JSType typeB;

        public TypePair(com.google.javascript.rhino.jstype.JSType typeA, com.google.javascript.rhino.jstype.JSType typeB) {
            this.typeA = typeA;
            this.typeB = typeB;
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toStringHelper(false);
    }

    public java.lang.String toDebugHashCodeString() {
        return ("{" + hashCode()) + "}";
    }

    public final java.lang.String toAnnotationString() {
        return toStringHelper(true);
    }

    abstract java.lang.String toStringHelper(boolean forAnnotations);

    public void matchConstraint(com.google.javascript.rhino.jstype.JSType constraint) {
    }
}
[151817] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659895792507
GPR[SSUN]-1659895792507
-2097135580
GPR[SPVATF]-1659895792737
GPR[EPVATF]-1659895794724
GPR[SPS]-1659895794724
[154619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:1187.
GPR[EPS]-1659895795309
GPR[ESUN]-1659895795309
GPR[SSUN]-1659895795309
-2097135580
GPR[SPVATF]-1659895795535
GPR[EPVATF]-1659895797556
GPR[SPS]-1659895797556
[157430] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:1179.
GPR[EPS]-1659895798120
GPR[SPVATF]-1659895798121
GPR[EPVATF]-1659895800295
GPR[SPS]-1659895800295
[160219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:1179.
GPR[EPS]-1659895800909
GPR[ESUN]-1659895800910
GPR[SSUN]-1659895800910
-132053243
GPR[SPVATF]-1659895801103
GPR[EPVATF]-1659895801121
[160432] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895801122
GPR[SSUN]-1659895801122
-132053243
GPR[SPVATF]-1659895801312
GPR[EPVATF]-1659895801334
[160644] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895801334
GPR[SSUN]-1659895801334
-132053243
GPR[SPVATF]-1659895801526
GPR[EPVATF]-1659895801544
[160855] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895801545
GPR[EPVATF]-1659895801562
[160872] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895801562
GPR[SSUN]-1659895801562
-1696950979
GPR[SPVATF]-1659895801797
GPR[EPVATF]-1659895803947
GPR[SPS]-1659895803947
[163684] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class SemanticReverseAbstractInterpreter extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter {
    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> EQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> NE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderInequality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHEQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHNE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowInequality(p.typeB);
        }
    };

    private final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> ineq = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            return new com.google.javascript.rhino.jstype.JSType.TypePair(getRestrictedWithoutUndefined(p.typeA), getRestrictedWithoutUndefined(p.typeB));
        }
    };

    public SemanticReverseAbstractInterpreter(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        super(convention, typeRegistry);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.FlowScope getPreciserScopeKnowingConditionOutcome(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        int operatorToken = condition.getType();
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left;
                com.google.javascript.rhino.Node right;
                if (operatorToken == com.google.javascript.rhino.Token.CASE) {
                    left = condition.getParent().getFirstChild();
                    right = condition.getFirstChild();
                } else {
                    left = condition.getFirstChild();
                    right = condition.getLastChild();
                }
                com.google.javascript.rhino.Node typeOfNode = null;
                com.google.javascript.rhino.Node stringNode = null;
                if (left.isTypeOf() && right.isString()) {
                    typeOfNode = left;
                    stringNode = right;
                } else if (right.isTypeOf() && left.isString()) {
                    typeOfNode = right;
                    stringNode = left;
                }
                if ((typeOfNode != null) && (stringNode != null)) {
                    com.google.javascript.rhino.Node operandNode = typeOfNode.getFirstChild();
                    com.google.javascript.rhino.jstype.JSType operandType = getTypeIfRefinable(operandNode, blindScope);
                    if (operandType != null) {
                        boolean resultEqualsValue = ((operatorToken == com.google.javascript.rhino.Token.EQ) || (operatorToken == com.google.javascript.rhino.Token.SHEQ)) || (operatorToken == com.google.javascript.rhino.Token.CASE);
                        if (!outcome) {
                            resultEqualsValue = !resultEqualsValue;
                        }
                        return caseTypeOf(operandNode, operandType, stringNode.getString(), resultEqualsValue, blindScope);
                    }
                }
        }
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.AND :
                if (outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                }
            case com.google.javascript.rhino.Token.OR :
                if (!outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                }
            case com.google.javascript.rhino.Token.EQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                }
            case com.google.javascript.rhino.Token.NE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                }
            case com.google.javascript.rhino.Token.SHEQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
            case com.google.javascript.rhino.Token.SHNE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                }
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                return caseNameOrGetProp(condition, blindScope, outcome);
            case com.google.javascript.rhino.Token.ASSIGN :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild().getNext(), blindScope, outcome), outcome);
            case com.google.javascript.rhino.Token.NOT :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), blindScope, !outcome);
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
                if (outcome) {
                    return caseEquality(condition, blindScope, ineq);
                }
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return caseInstanceOf(condition.getFirstChild(), condition.getLastChild(), blindScope, outcome);
            case com.google.javascript.rhino.Token.IN :
                if (outcome && condition.getFirstChild().isString()) {
                    return caseIn(condition.getLastChild(), condition.getFirstChild().getString(), blindScope);
                }
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left = condition.getParent().getFirstChild();
                com.google.javascript.rhino.Node right = condition.getFirstChild();
                if (outcome) {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
        }
        return nextPreciserScopeKnowingConditionOutcome(condition, blindScope, outcome);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        return caseEquality(condition.getFirstChild(), condition.getLastChild(), blindScope, merging);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(12).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("merging",merging);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.ineq",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.ineq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("left",left);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("blindScope",blindScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("right",right);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("leftType",leftType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectInput("rightType",rightType);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(12).collectionEnds();
            }
            if (runtimeAngelicValue)
                rightIsRefineable = true;

        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType.TypePair merged = merging.apply(new com.google.javascript.rhino.jstype.JSType.TypePair(leftType, rightType));
        if (merged != null) {
            return maybeRestrictTwoNames(blindScope, left, leftType, leftIsRefineable ? merged.typeA : null, right, rightType, rightIsRefineable ? merged.typeB : null);
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrNotShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType restrictedLeftType = (leftType == null) ? null : leftType.getRestrictedTypeGivenToBooleanOutcome(condition);
        if (restrictedLeftType == null) {
            return firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        if (condition) {
            com.google.javascript.rhino.jstype.JSType restrictedRightType = (rightType == null) ? null : rightType.getRestrictedTypeGivenToBooleanOutcome(condition);
            return maybeRestrictTwoNames(blindScope, left, leftType, leftIsRefineable ? restrictedLeftType : null, right, rightType, rightIsRefineable ? restrictedRightType : null);
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrMaybeShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.jscomp.type.FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> leftVar = leftScope.findUniqueRefinedSlot(blindScope);
        if (leftVar == null) {
            return blindScope == leftScope ? blindScope : blindScope.createChildFlowScope();
        }
        com.google.javascript.jscomp.type.FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        rightScope = firstPreciserScopeKnowingConditionOutcome(right, rightScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> rightVar = rightScope.findUniqueRefinedSlot(blindScope);
        if ((rightVar == null) || (!leftVar.getName().equals(rightVar.getName()))) {
            return blindScope == rightScope ? blindScope : blindScope.createChildFlowScope();
        }
        com.google.javascript.rhino.jstype.JSType type = leftVar.getType().getLeastSupertype(rightVar.getType());
        com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
        informed.inferSlotType(leftVar.getName(), type);
        return informed;
    }

    private com.google.javascript.jscomp.type.FlowScope maybeRestrictName(com.google.javascript.jscomp.type.FlowScope blindScope, com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType originalType, com.google.javascript.rhino.jstype.JSType restrictedType) {
        if ((restrictedType != null) && (restrictedType != originalType)) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            declareNameInScope(informed, node, restrictedType);
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope maybeRestrictTwoNames(com.google.javascript.jscomp.type.FlowScope blindScope, com.google.javascript.rhino.Node left, com.google.javascript.rhino.jstype.JSType originalLeftType, com.google.javascript.rhino.jstype.JSType restrictedLeftType, com.google.javascript.rhino.Node right, com.google.javascript.rhino.jstype.JSType originalRightType, com.google.javascript.rhino.jstype.JSType restrictedRightType) {
        boolean shouldRefineLeft = (restrictedLeftType != null) && (restrictedLeftType != originalLeftType);
        boolean shouldRefineRight = (restrictedRightType != null) && (restrictedRightType != originalRightType);
        if (shouldRefineLeft || shouldRefineRight) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            if (shouldRefineLeft) {
                declareNameInScope(informed, left, restrictedLeftType);
            }
            if (shouldRefineRight) {
                declareNameInScope(informed, right, restrictedRightType);
            }
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseNameOrGetProp(com.google.javascript.rhino.Node name, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType type = getTypeIfRefinable(name, blindScope);
        if (type != null) {
            return maybeRestrictName(blindScope, name, type, type.getRestrictedTypeGivenToBooleanOutcome(outcome));
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseTypeOf(com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType type, java.lang.String value, boolean resultEqualsValue, com.google.javascript.jscomp.type.FlowScope blindScope) {
        return maybeRestrictName(blindScope, node, type, getRestrictedByTypeOfResult(type, value, resultEqualsValue));
    }

    private com.google.javascript.jscomp.type.FlowScope caseInstanceOf(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        if (leftType == null) {
            return blindScope;
        }
        com.google.javascript.rhino.jstype.JSType rightType = right.getJSType();
        com.google.javascript.rhino.jstype.ObjectType targetType = typeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        if ((rightType != null) && rightType.isFunctionType()) {
            targetType = rightType.toMaybeFunctionType();
        }
        com.google.javascript.rhino.jstype.Visitor<com.google.javascript.rhino.jstype.JSType> visitor;
        if (outcome) {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByTrueInstanceOfResultVisitor(targetType);
        } else {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByFalseInstanceOfResultVisitor(targetType);
        }
        return maybeRestrictName(blindScope, left, leftType, leftType.visit(visitor));
    }

    private com.google.javascript.jscomp.type.FlowScope caseIn(com.google.javascript.rhino.Node object, java.lang.String propertyName, com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.JSType jsType = object.getJSType();
        jsType = this.getRestrictedWithoutNull(jsType);
        jsType = this.getRestrictedWithoutUndefined(jsType);
        boolean hasProperty = false;
        com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(jsType);
        if (objectType != null) {
            hasProperty = objectType.hasProperty(propertyName);
        }
        if (!hasProperty) {
            java.lang.String qualifiedName = object.getQualifiedName();
            if (qualifiedName != null) {
                java.lang.String propertyQualifiedName = (qualifiedName + ".") + propertyName;
                if (blindScope.getSlot(propertyQualifiedName) == null) {
                    com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
                    com.google.javascript.rhino.jstype.JSType unknownType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                    informed.inferQualifiedSlot(object, propertyQualifiedName, unknownType, unknownType);
                    return informed;
                }
            }
        }
        return blindScope;
    }

    private class RestrictByTrueInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByTrueTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByTrueInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        protected com.google.javascript.rhino.jstype.JSType caseTopType(com.google.javascript.rhino.jstype.JSType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnknownType() {
            com.google.javascript.rhino.jstype.FunctionType funcTarget = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(target);
            if ((funcTarget != null) && funcTarget.hasInstanceType()) {
                return funcTarget.getInstanceType();
            }
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }

        private com.google.javascript.rhino.jstype.JSType applyCommonRestriction(com.google.javascript.rhino.jstype.JSType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getGreatestSubtype(funcTarget.getInstanceType());
            }
            return null;
        }
    }

    private class RestrictByFalseInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByFalseTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByFalseInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                if (type.isSubtype(funcTarget.getInstanceType())) {
                    return null;
                }
                return type;
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getRestrictedUnion(funcTarget.getInstanceType());
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }
    }
}
[163684] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659895804374
GPR[SSUN]-1659895804374
-46850221
GPR[SPVATF]-1659895804730
GPR[EPVATF]-1659895807797
GPR[SPS]-1659895807797
[167769] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:901.
GPR[EPS]-1659895808460
GPR[ESUN]-1659895808460
GPR[SSUN]-1659895808460
-132053243
GPR[ESUN]-1659895808666
GPR[SSUN]-1659895808666
-132053243
GPR[SPVATF]-1659895808860
GPR[EPVATF]-1659895808878
[168188] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895808878
GPR[EPVATF]-1659895808896
[168206] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895808896
GPR[SSUN]-1659895808896
-132053243
GPR[ESUN]-1659895809094
GPR[SSUN]-1659895809094
-2097135580
GPR[ESUN]-1659895809311
GPR[SSUN]-1659895809311
-2097135580
GPR[ESUN]-1659895809526
GPR[SSUN]-1659895809526
-132053243
GPR[SPVATF]-1659895809748
GPR[EPVATF]-1659895809766
[169076] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895809766
GPR[SSUN]-1659895809766
-132053243
GPR[SPVATF]-1659895809960
GPR[EPVATF]-1659895809978
[169288] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895809978
GPR[SSUN]-1659895809978
-132053243
GPR[SPVATF]-1659895810192
GPR[EPVATF]-1659895810212
[169522] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895810212
GPR[SSUN]-1659895810212
-132053243
GPR[SPVATF]-1659895810403
GPR[EPVATF]-1659895810421
[169731] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895810421
GPR[SSUN]-1659895810421
-132053243
GPR[SPVATF]-1659895810615
GPR[EPVATF]-1659895810633
[169943] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895810633
GPR[SSUN]-1659895810633
-132053243
GPR[ESUN]-1659895810827
GPR[SSUN]-1659895810827
-1966087783
GPR[ESUN]-1659895811017
GPR[SSUN]-1659895811017
-1966087783
GPR[SPVATF]-1659895811209
GPR[EPVATF]-1659895811229
[170539] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895811229
GPR[EPVATF]-1659895811249
[170559] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895811249
GPR[SSUN]-1659895811249
-2097135580
GPR[SPVATF]-1659895811468
GPR[EPVATF]-1659895813457
GPR[SPS]-1659895813457
[173397] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:873.
GPR[EPS]-1659895814087
GPR[SPVATF]-1659895814087
GPR[EPVATF]-1659895816124
GPR[SPS]-1659895816124
[176024] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:873.
GPR[EPS]-1659895816714
GPR[ESUN]-1659895816714
GPR[SSUN]-1659895816714
GPR[ESUN]-1659895816714
GPR[SSUN]-1659895816714
-1345859678
GPR[ESUN]-1659895816972
GPR[SSUN]-1659895816972
-1696950979
GPR[SPVATF]-1659895817246
GPR[EPVATF]-1659895819289
GPR[SPS]-1659895819289
[179204] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:420.
GPR[EPS]-1659895819894
GPR[ESUN]-1659895819894
GPR[SSUN]-1659895819894
-1696950979
GPR[SPVATF]-1659895820136
GPR[EPVATF]-1659895822406
GPR[SPS]-1659895822406
GPR[EPS]-1659895828772
GPR[ESUN]-1659895828772
GPR[SSUN]-1659895828772
-1696950979
GPR[SPVATF]-1659895829013
GPR[EPVATF]-1659895831267
GPR[SPS]-1659895831267
GPR[EPS]-1659895838268
GPR[SPVATF]-1659895838269
GPR[EPVATF]-1659895840662
GPR[SPS]-1659895840662
GPR[EPS]-1659895861782
GPR[ESUN]-1659895861782
GPR[SSUN]-1659895861782
-1696950979
GPR[SPVATF]-1659895862029
GPR[EPVATF]-1659895864738
GPR[SPS]-1659895864738
[224620] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:419.
GPR[EPS]-1659895865310
GPR[SPVATF]-1659895865310
GPR[EPVATF]-1659895868040
GPR[SPS]-1659895868040
[227923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:419.
GPR[EPS]-1659895868613
GPR[ESUN]-1659895868613
GPR[SSUN]-1659895868613
-1696950979
GPR[ESUN]-1659895868852
GPR[SSUN]-1659895868852
-1966087783
GPR[SPVATF]-1659895869109
GPR[EPVATF]-1659895869128
[228438] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659895869128
GPR[EPVATF]-1659895869144
[228454] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659895869144
GPR[SSUN]-1659895869145
-1966087783
GPR[ESUN]-1659895869341
GPR[SSUN]-1659895869341
-1696950979
GPR[ESUN]-1659895869573
GPR[SSUN]-1659895869573
-46850221
GPR[ESUN]-1659895869800
GPR[SSUN]-1659895869800
-46850221
GPR[ESUN]-1659895870031
GPR[SSUN]-1659895870031
-46850221
GPR[ESUN]-1659895870279
GPR[SSUN]-1659895870279
-46850221
GPR[ESUN]-1659895870520
GPR[SSUN]-1659895870520
-1696950979
GPR[SPVATF]-1659895870752
GPR[EPVATF]-1659895873591
GPR[SPS]-1659895873591
[233531] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:149.
GPR[EPS]-1659895874221
GPR[SPVATF]-1659895874221
GPR[EPVATF]-1659895877055
GPR[SPS]-1659895877055
[236924] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:149.
GPR[EPS]-1659895877614
GPR[ESUN]-1659895877615
GPR[SSUN]-1659895877615
-46850221
GPR[SPVATF]-1659895877846
GPR[EPVATF]-1659895880860
GPR[SPS]-1659895880860
[240729] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:780.
GPR[EPS]-1659895881419
GPR[SPVATF]-1659895881419
GPR[EPVATF]-1659895884260
GPR[SPS]-1659895884260
GPR[EPS]-1659895887963
GPR[SPVATR]-1659895887963
[247273] INFO TestPatch - Applying patch: com.google.javascript.rhino.jstype.FunctionType:780: CONDITIONAL (that.source!=null) || ((com.google.javascript.rhino.jstype.FunctionType.this.propAccess!=null) && (!(com.google.javascript.rhino.jstype.FunctionType.this.prototypeSlot!=null)))
[247560] INFO TestPatch - Running test suite to check the patch "(that.source!=null) || ((com.google.javascript.rhino.jstype.FunctionType.this.propAccess!=null) && (!(com.google.javascript.rhino.jstype.FunctionType.this.prototypeSlot!=null)))" is working
GPR[EPVATR]-1659895889998
[249308] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659895889998
[249340] INFO NoPol - --- a/src/com/google/javascript/rhino/jstype/FunctionType.java
+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java
@@ -779,3 +779,3 @@
       return leastSuper ? that : this;
-    } else if (functionInstance.isEquivalentTo(this)) {
+    } else if ((that.source!=null) || ((com.google.javascript.rhino.jstype.FunctionType.this.propAccess!=null) && (!(com.google.javascript.rhino.jstype.FunctionType.this.prototypeSlot!=null)))) {
       return leastSuper ? this : that;

Saving patch at /experiment_home///results/Nopol/Closure/125/seed_264/patch_244637_1ts_1659895890030.diff
GPR[ESUN]-1659895890031
GPR[SSUN]-1659895890031
-1696950979
GPR[SPVATF]-1659895890284
GPR[EPVATF]-1659895893233
GPR[SPS]-1659895893233
[253024] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class SemanticReverseAbstractInterpreter extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter {
    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> EQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> NE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderInequality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHEQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHNE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowInequality(p.typeB);
        }
    };

    private final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> ineq = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            return new com.google.javascript.rhino.jstype.JSType.TypePair(getRestrictedWithoutUndefined(p.typeA), getRestrictedWithoutUndefined(p.typeB));
        }
    };

    public SemanticReverseAbstractInterpreter(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        super(convention, typeRegistry);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.FlowScope getPreciserScopeKnowingConditionOutcome(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        int operatorToken = condition.getType();
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left;
                com.google.javascript.rhino.Node right;
                if (operatorToken == com.google.javascript.rhino.Token.CASE) {
                    left = condition.getParent().getFirstChild();
                    right = condition.getFirstChild();
                } else {
                    left = condition.getFirstChild();
                    right = condition.getLastChild();
                }
                com.google.javascript.rhino.Node typeOfNode = null;
                com.google.javascript.rhino.Node stringNode = null;
                if (left.isTypeOf() && right.isString()) {
                    typeOfNode = left;
                    stringNode = right;
                } else if (right.isTypeOf() && left.isString()) {
                    typeOfNode = right;
                    stringNode = left;
                }
                if ((typeOfNode != null) && (stringNode != null)) {
                    com.google.javascript.rhino.Node operandNode = typeOfNode.getFirstChild();
                    com.google.javascript.rhino.jstype.JSType operandType = getTypeIfRefinable(operandNode, blindScope);
                    if (operandType != null) {
                        boolean resultEqualsValue = ((operatorToken == com.google.javascript.rhino.Token.EQ) || (operatorToken == com.google.javascript.rhino.Token.SHEQ)) || (operatorToken == com.google.javascript.rhino.Token.CASE);
                        if (!outcome) {
                            resultEqualsValue = !resultEqualsValue;
                        }
                        return caseTypeOf(operandNode, operandType, stringNode.getString(), resultEqualsValue, blindScope);
                    }
                }
        }
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.AND :
                if (outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                }
            case com.google.javascript.rhino.Token.OR :
                if (!outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                }
            case com.google.javascript.rhino.Token.EQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                }
            case com.google.javascript.rhino.Token.NE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                }
            case com.google.javascript.rhino.Token.SHEQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
            case com.google.javascript.rhino.Token.SHNE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                }
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                return caseNameOrGetProp(condition, blindScope, outcome);
            case com.google.javascript.rhino.Token.ASSIGN :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild().getNext(), blindScope, outcome), outcome);
            case com.google.javascript.rhino.Token.NOT :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), blindScope, !outcome);
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
                if (outcome) {
                    return caseEquality(condition, blindScope, ineq);
                }
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return caseInstanceOf(condition.getFirstChild(), condition.getLastChild(), blindScope, outcome);
            case com.google.javascript.rhino.Token.IN :
                if (outcome && condition.getFirstChild().isString()) {
                    return caseIn(condition.getLastChild(), condition.getFirstChild().getString(), blindScope);
                }
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left = condition.getParent().getFirstChild();
                com.google.javascript.rhino.Node right = condition.getFirstChild();
                if (outcome) {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
        }
        return nextPreciserScopeKnowingConditionOutcome(condition, blindScope, outcome);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        return caseEquality(condition.getFirstChild(), condition.getLastChild(), blindScope, merging);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(26).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("merging",merging);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.ineq",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.ineq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("left",left);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("blindScope",blindScope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("right",right);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("leftType",leftType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectionEnds();
            }
            if (runtimeAngelicValue)
                leftIsRefineable = true;

        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType.TypePair merged = merging.apply(new com.google.javascript.rhino.jstype.JSType.TypePair(leftType, rightType));
        if (merged != null) {
            return maybeRestrictTwoNames(blindScope, left, leftType, leftIsRefineable ? merged.typeA : null, right, rightType, rightIsRefineable ? merged.typeB : null);
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrNotShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType restrictedLeftType = (leftType == null) ? null : leftType.getRestrictedTypeGivenToBooleanOutcome(condition);
        if (restrictedLeftType == null) {
            return firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        if (condition) {
            com.google.javascript.rhino.jstype.JSType restrictedRightType = (rightType == null) ? null : rightType.getRestrictedTypeGivenToBooleanOutcome(condition);
            return maybeRestrictTwoNames(blindScope, left, leftType, leftIsRefineable ? restrictedLeftType : null, right, rightType, rightIsRefineable ? restrictedRightType : null);
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrMaybeShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.jscomp.type.FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> leftVar = leftScope.findUniqueRefinedSlot(blindScope);
        if (leftVar == null) {
            return blindScope == leftScope ? blindScope : blindScope.createChildFlowScope();
        }
        com.google.javascript.jscomp.type.FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        rightScope = firstPreciserScopeKnowingConditionOutcome(right, rightScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> rightVar = rightScope.findUniqueRefinedSlot(blindScope);
        if ((rightVar == null) || (!leftVar.getName().equals(rightVar.getName()))) {
            return blindScope == rightScope ? blindScope : blindScope.createChildFlowScope();
        }
        com.google.javascript.rhino.jstype.JSType type = leftVar.getType().getLeastSupertype(rightVar.getType());
        com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
        informed.inferSlotType(leftVar.getName(), type);
        return informed;
    }

    private com.google.javascript.jscomp.type.FlowScope maybeRestrictName(com.google.javascript.jscomp.type.FlowScope blindScope, com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType originalType, com.google.javascript.rhino.jstype.JSType restrictedType) {
        if ((restrictedType != null) && (restrictedType != originalType)) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            declareNameInScope(informed, node, restrictedType);
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope maybeRestrictTwoNames(com.google.javascript.jscomp.type.FlowScope blindScope, com.google.javascript.rhino.Node left, com.google.javascript.rhino.jstype.JSType originalLeftType, com.google.javascript.rhino.jstype.JSType restrictedLeftType, com.google.javascript.rhino.Node right, com.google.javascript.rhino.jstype.JSType originalRightType, com.google.javascript.rhino.jstype.JSType restrictedRightType) {
        boolean shouldRefineLeft = (restrictedLeftType != null) && (restrictedLeftType != originalLeftType);
        boolean shouldRefineRight = (restrictedRightType != null) && (restrictedRightType != originalRightType);
        if (shouldRefineLeft || shouldRefineRight) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            if (shouldRefineLeft) {
                declareNameInScope(informed, left, restrictedLeftType);
            }
            if (shouldRefineRight) {
                declareNameInScope(informed, right, restrictedRightType);
            }
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseNameOrGetProp(com.google.javascript.rhino.Node name, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType type = getTypeIfRefinable(name, blindScope);
        if (type != null) {
            return maybeRestrictName(blindScope, name, type, type.getRestrictedTypeGivenToBooleanOutcome(outcome));
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseTypeOf(com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType type, java.lang.String value, boolean resultEqualsValue, com.google.javascript.jscomp.type.FlowScope blindScope) {
        return maybeRestrictName(blindScope, node, type, getRestrictedByTypeOfResult(type, value, resultEqualsValue));
    }

    private com.google.javascript.jscomp.type.FlowScope caseInstanceOf(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        if (leftType == null) {
            return blindScope;
        }
        com.google.javascript.rhino.jstype.JSType rightType = right.getJSType();
        com.google.javascript.rhino.jstype.ObjectType targetType = typeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        if ((rightType != null) && rightType.isFunctionType()) {
            targetType = rightType.toMaybeFunctionType();
        }
        com.google.javascript.rhino.jstype.Visitor<com.google.javascript.rhino.jstype.JSType> visitor;
        if (outcome) {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByTrueInstanceOfResultVisitor(targetType);
        } else {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByFalseInstanceOfResultVisitor(targetType);
        }
        return maybeRestrictName(blindScope, left, leftType, leftType.visit(visitor));
    }

    private com.google.javascript.jscomp.type.FlowScope caseIn(com.google.javascript.rhino.Node object, java.lang.String propertyName, com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.JSType jsType = object.getJSType();
        jsType = this.getRestrictedWithoutNull(jsType);
        jsType = this.getRestrictedWithoutUndefined(jsType);
        boolean hasProperty = false;
        com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(jsType);
        if (objectType != null) {
            hasProperty = objectType.hasProperty(propertyName);
        }
        if (!hasProperty) {
            java.lang.String qualifiedName = object.getQualifiedName();
            if (qualifiedName != null) {
                java.lang.String propertyQualifiedName = (qualifiedName + ".") + propertyName;
                if (blindScope.getSlot(propertyQualifiedName) == null) {
                    com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
                    com.google.javascript.rhino.jstype.JSType unknownType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                    informed.inferQualifiedSlot(object, propertyQualifiedName, unknownType, unknownType);
                    return informed;
                }
            }
        }
        return blindScope;
    }

    private class RestrictByTrueInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByTrueTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByTrueInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        protected com.google.javascript.rhino.jstype.JSType caseTopType(com.google.javascript.rhino.jstype.JSType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnknownType() {
            com.google.javascript.rhino.jstype.FunctionType funcTarget = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(target);
            if ((funcTarget != null) && funcTarget.hasInstanceType()) {
                return funcTarget.getInstanceType();
            }
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }

        private com.google.javascript.rhino.jstype.JSType applyCommonRestriction(com.google.javascript.rhino.jstype.JSType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getGreatestSubtype(funcTarget.getInstanceType());
            }
            return null;
        }
    }

    private class RestrictByFalseInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByFalseTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByFalseInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                if (type.isSubtype(funcTarget.getInstanceType())) {
                    return null;
                }
                return type;
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getRestrictedUnion(funcTarget.getInstanceType());
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }
    }
}
[253024] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659895893714
GPR[SSUN]-1659895893714
-46850221
GPR[SPVATF]-1659895893949
GPR[EPVATF]-1659895896854
GPR[SPS]-1659895896854
[256702] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:778.
GPR[EPS]-1659895897392
GPR[SPVATF]-1659895897393
GPR[EPVATF]-1659895901089
GPR[SPS]-1659895901089
GPR[EPS]-1659895904658
GPR[SPVATR]-1659895904658
[263968] INFO TestPatch - Applying patch: com.google.javascript.rhino.jstype.FunctionType:778: CONDITIONAL (that.source!=null) || ((!(that.prototypeSlot!=null)) && (that.propAccess!=null))
[264283] INFO TestPatch - Running test suite to check the patch "(that.source!=null) || ((!(that.prototypeSlot!=null)) && (that.propAccess!=null))" is working
GPR[EPVATR]-1659895906513
[265823] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659895906513
[265832] INFO NoPol - --- a/src/com/google/javascript/rhino/jstype/FunctionType.java
+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java
@@ -777,3 +777,3 @@
         JSTypeNative.FUNCTION_INSTANCE_TYPE);
-    if (functionInstance.isEquivalentTo(that)) {
+    if ((that.source!=null) || ((!(that.prototypeSlot!=null)) && (that.propAccess!=null))) {
       return leastSuper ? that : this;

Saving patch at /experiment_home///results/Nopol/Closure/125/seed_264/patch_261129_2ts_1659895906522.diff
GPR[ESUN]-1659895906522
GPR[SSUN]-1659895906522
-46850221
GPR[ESUN]-1659895906767
GPR[SSUN]-1659895906767
-1797850673
GPR[SPVATF]-1659895907032
GPR[EPVATF]-1659895909225
GPR[SPS]-1659895909225
[269204] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:651.
GPR[EPS]-1659895909894
GPR[SPVATF]-1659895909894
GPR[EPVATF]-1659895912131
GPR[SPS]-1659895912132
[272108] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:651.
GPR[EPS]-1659895912798
GPR[ESUN]-1659895912798
GPR[SSUN]-1659895912798
-1696950979
GPR[ESUN]-1659895913037
GPR[SSUN]-1659895913037
-46850221
GPR[SPVATF]-1659895913282
GPR[EPVATF]-1659895915695
GPR[SPS]-1659895915695
[275544] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:753.
GPR[EPS]-1659895916234
GPR[SPVATF]-1659895916234
GPR[EPVATF]-1659895918731
GPR[SPS]-1659895918731
[278581] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:753.
GPR[EPS]-1659895919271
GPR[ESUN]-1659895919271
GPR[SSUN]-1659895919271
-1696950979
GPR[SPVATF]-1659895919510
GPR[EPVATF]-1659895922350
GPR[SPS]-1659895922350
[282027] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class SemanticReverseAbstractInterpreter extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter {
    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> EQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> NE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderInequality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHEQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHNE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowInequality(p.typeB);
        }
    };

    private final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> ineq = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            return new com.google.javascript.rhino.jstype.JSType.TypePair(getRestrictedWithoutUndefined(p.typeA), getRestrictedWithoutUndefined(p.typeB));
        }
    };

    public SemanticReverseAbstractInterpreter(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        super(convention, typeRegistry);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.FlowScope getPreciserScopeKnowingConditionOutcome(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        int operatorToken = condition.getType();
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left;
                com.google.javascript.rhino.Node right;
                if (operatorToken == com.google.javascript.rhino.Token.CASE) {
                    left = condition.getParent().getFirstChild();
                    right = condition.getFirstChild();
                } else {
                    left = condition.getFirstChild();
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(33).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("condition",condition);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.ineq",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.ineq);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("blindScope",blindScope);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("operatorToken",operatorToken);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("outcome",outcome);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(33).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        right = condition.getLastChild();

                }
                com.google.javascript.rhino.Node typeOfNode = null;
                com.google.javascript.rhino.Node stringNode = null;
                if (left.isTypeOf() && right.isString()) {
                    typeOfNode = left;
                    stringNode = right;
                } else if (right.isTypeOf() && left.isString()) {
                    typeOfNode = right;
                    stringNode = left;
                }
                if ((typeOfNode != null) && (stringNode != null)) {
                    com.google.javascript.rhino.Node operandNode = typeOfNode.getFirstChild();
                    com.google.javascript.rhino.jstype.JSType operandType = getTypeIfRefinable(operandNode, blindScope);
                    if (operandType != null) {
                        boolean resultEqualsValue = ((operatorToken == com.google.javascript.rhino.Token.EQ) || (operatorToken == com.google.javascript.rhino.Token.SHEQ)) || (operatorToken == com.google.javascript.rhino.Token.CASE);
                        if (!outcome) {
                            resultEqualsValue = !resultEqualsValue;
                        }
                        return caseTypeOf(operandNode, operandType, stringNode.getString(), resultEqualsValue, blindScope);
                    }
                }
        }
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.AND :
                if (outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                }
            case com.google.javascript.rhino.Token.OR :
                if (!outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                }
            case com.google.javascript.rhino.Token.EQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                }
            case com.google.javascript.rhino.Token.NE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                }
            case com.google.javascript.rhino.Token.SHEQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
            case com.google.javascript.rhino.Token.SHNE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                }
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                return caseNameOrGetProp(condition, blindScope, outcome);
            case com.google.javascript.rhino.Token.ASSIGN :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild().getNext(), blindScope, outcome), outcome);
            case com.google.javascript.rhino.Token.NOT :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), blindScope, !outcome);
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
                if (outcome) {
                    return caseEquality(condition, blindScope, ineq);
                }
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return caseInstanceOf(condition.getFirstChild(), condition.getLastChild(), blindScope, outcome);
            case com.google.javascript.rhino.Token.IN :
                if (outcome && condition.getFirstChild().isString()) {
                    return caseIn(condition.getLastChild(), condition.getFirstChild().getString(), blindScope);
                }
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left = condition.getParent().getFirstChild();
                com.google.javascript.rhino.Node right = condition.getFirstChild();
                if (outcome) {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
        }
        return nextPreciserScopeKnowingConditionOutcome(condition, blindScope, outcome);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        return caseEquality(condition.getFirstChild(), condition.getLastChild(), blindScope, merging);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType.TypePair merged = merging.apply(new com.google.javascript.rhino.jstype.JSType.TypePair(leftType, rightType));
        if (merged != null) {
            return maybeRestrictTwoNames(blindScope, left, leftType, leftIsRefineable ? merged.typeA : null, right, rightType, rightIsRefineable ? merged.typeB : null);
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrNotShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType restrictedLeftType = (leftType == null) ? null : leftType.getRestrictedTypeGivenToBooleanOutcome(condition);
        if (restrictedLeftType == null) {
            return firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        if (condition) {
            com.google.javascript.rhino.jstype.JSType restrictedRightType = (rightType == null) ? null : rightType.getRestrictedTypeGivenToBooleanOutcome(condition);
            return maybeRestrictTwoNames(blindScope, left, leftType, leftIsRefineable ? restrictedLeftType : null, right, rightType, rightIsRefineable ? restrictedRightType : null);
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrMaybeShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.jscomp.type.FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> leftVar = leftScope.findUniqueRefinedSlot(blindScope);
        if (leftVar == null) {
            return blindScope == leftScope ? blindScope : blindScope.createChildFlowScope();
        }
        com.google.javascript.jscomp.type.FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        rightScope = firstPreciserScopeKnowingConditionOutcome(right, rightScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> rightVar = rightScope.findUniqueRefinedSlot(blindScope);
        if ((rightVar == null) || (!leftVar.getName().equals(rightVar.getName()))) {
            return blindScope == rightScope ? blindScope : blindScope.createChildFlowScope();
        }
        com.google.javascript.rhino.jstype.JSType type = leftVar.getType().getLeastSupertype(rightVar.getType());
        com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
        informed.inferSlotType(leftVar.getName(), type);
        return informed;
    }

    private com.google.javascript.jscomp.type.FlowScope maybeRestrictName(com.google.javascript.jscomp.type.FlowScope blindScope, com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType originalType, com.google.javascript.rhino.jstype.JSType restrictedType) {
        if ((restrictedType != null) && (restrictedType != originalType)) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            declareNameInScope(informed, node, restrictedType);
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope maybeRestrictTwoNames(com.google.javascript.jscomp.type.FlowScope blindScope, com.google.javascript.rhino.Node left, com.google.javascript.rhino.jstype.JSType originalLeftType, com.google.javascript.rhino.jstype.JSType restrictedLeftType, com.google.javascript.rhino.Node right, com.google.javascript.rhino.jstype.JSType originalRightType, com.google.javascript.rhino.jstype.JSType restrictedRightType) {
        boolean shouldRefineLeft = (restrictedLeftType != null) && (restrictedLeftType != originalLeftType);
        boolean shouldRefineRight = (restrictedRightType != null) && (restrictedRightType != originalRightType);
        if (shouldRefineLeft || shouldRefineRight) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            if (shouldRefineLeft) {
                declareNameInScope(informed, left, restrictedLeftType);
            }
            if (shouldRefineRight) {
                declareNameInScope(informed, right, restrictedRightType);
            }
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseNameOrGetProp(com.google.javascript.rhino.Node name, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType type = getTypeIfRefinable(name, blindScope);
        if (type != null) {
            return maybeRestrictName(blindScope, name, type, type.getRestrictedTypeGivenToBooleanOutcome(outcome));
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseTypeOf(com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType type, java.lang.String value, boolean resultEqualsValue, com.google.javascript.jscomp.type.FlowScope blindScope) {
        return maybeRestrictName(blindScope, node, type, getRestrictedByTypeOfResult(type, value, resultEqualsValue));
    }

    private com.google.javascript.jscomp.type.FlowScope caseInstanceOf(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        if (leftType == null) {
            return blindScope;
        }
        com.google.javascript.rhino.jstype.JSType rightType = right.getJSType();
        com.google.javascript.rhino.jstype.ObjectType targetType = typeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        if ((rightType != null) && rightType.isFunctionType()) {
            targetType = rightType.toMaybeFunctionType();
        }
        com.google.javascript.rhino.jstype.Visitor<com.google.javascript.rhino.jstype.JSType> visitor;
        if (outcome) {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByTrueInstanceOfResultVisitor(targetType);
        } else {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByFalseInstanceOfResultVisitor(targetType);
        }
        return maybeRestrictName(blindScope, left, leftType, leftType.visit(visitor));
    }

    private com.google.javascript.jscomp.type.FlowScope caseIn(com.google.javascript.rhino.Node object, java.lang.String propertyName, com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.JSType jsType = object.getJSType();
        jsType = this.getRestrictedWithoutNull(jsType);
        jsType = this.getRestrictedWithoutUndefined(jsType);
        boolean hasProperty = false;
        com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(jsType);
        if (objectType != null) {
            hasProperty = objectType.hasProperty(propertyName);
        }
        if (!hasProperty) {
            java.lang.String qualifiedName = object.getQualifiedName();
            if (qualifiedName != null) {
                java.lang.String propertyQualifiedName = (qualifiedName + ".") + propertyName;
                if (blindScope.getSlot(propertyQualifiedName) == null) {
                    com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
                    com.google.javascript.rhino.jstype.JSType unknownType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                    informed.inferQualifiedSlot(object, propertyQualifiedName, unknownType, unknownType);
                    return informed;
                }
            }
        }
        return blindScope;
    }

    private class RestrictByTrueInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByTrueTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByTrueInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        protected com.google.javascript.rhino.jstype.JSType caseTopType(com.google.javascript.rhino.jstype.JSType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnknownType() {
            com.google.javascript.rhino.jstype.FunctionType funcTarget = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(target);
            if ((funcTarget != null) && funcTarget.hasInstanceType()) {
                return funcTarget.getInstanceType();
            }
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }

        private com.google.javascript.rhino.jstype.JSType applyCommonRestriction(com.google.javascript.rhino.jstype.JSType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getGreatestSubtype(funcTarget.getInstanceType());
            }
            return null;
        }
    }

    private class RestrictByFalseInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByFalseTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByFalseInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                if (type.isSubtype(funcTarget.getInstanceType())) {
                    return null;
                }
                return type;
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getRestrictedUnion(funcTarget.getInstanceType());
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }
    }
}
[282027] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659895922717
GPR[SSUN]-1659895922717
-1696950979
GPR[SPVATF]-1659895922956
GPR[EPVATF]-1659895925781
GPR[SPS]-1659895925781
[285451] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class SemanticReverseAbstractInterpreter extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter {
    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> EQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> NE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderInequality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHEQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHNE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowInequality(p.typeB);
        }
    };

    private final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> ineq = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            return new com.google.javascript.rhino.jstype.JSType.TypePair(getRestrictedWithoutUndefined(p.typeA), getRestrictedWithoutUndefined(p.typeB));
        }
    };

    public SemanticReverseAbstractInterpreter(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        super(convention, typeRegistry);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.FlowScope getPreciserScopeKnowingConditionOutcome(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        int operatorToken = condition.getType();
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left;
                com.google.javascript.rhino.Node right;
                if (operatorToken == com.google.javascript.rhino.Token.CASE) {
                    left = condition.getParent().getFirstChild();
                    right = condition.getFirstChild();
                } else {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(34).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("condition",condition);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.ineq",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.ineq);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("blindScope",blindScope);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("operatorToken",operatorToken);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("outcome",outcome);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(34).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        left = condition.getFirstChild();

                    right = condition.getLastChild();
                }
                com.google.javascript.rhino.Node typeOfNode = null;
                com.google.javascript.rhino.Node stringNode = null;
                if (left.isTypeOf() && right.isString()) {
                    typeOfNode = left;
                    stringNode = right;
                } else if (right.isTypeOf() && left.isString()) {
                    typeOfNode = right;
                    stringNode = left;
                }
                if ((typeOfNode != null) && (stringNode != null)) {
                    com.google.javascript.rhino.Node operandNode = typeOfNode.getFirstChild();
                    com.google.javascript.rhino.jstype.JSType operandType = getTypeIfRefinable(operandNode, blindScope);
                    if (operandType != null) {
                        boolean resultEqualsValue = ((operatorToken == com.google.javascript.rhino.Token.EQ) || (operatorToken == com.google.javascript.rhino.Token.SHEQ)) || (operatorToken == com.google.javascript.rhino.Token.CASE);
                        if (!outcome) {
                            resultEqualsValue = !resultEqualsValue;
                        }
                        return caseTypeOf(operandNode, operandType, stringNode.getString(), resultEqualsValue, blindScope);
                    }
                }
        }
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.AND :
                if (outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                }
            case com.google.javascript.rhino.Token.OR :
                if (!outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                }
            case com.google.javascript.rhino.Token.EQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                }
            case com.google.javascript.rhino.Token.NE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                }
            case com.google.javascript.rhino.Token.SHEQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
            case com.google.javascript.rhino.Token.SHNE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                }
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                return caseNameOrGetProp(condition, blindScope, outcome);
            case com.google.javascript.rhino.Token.ASSIGN :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild().getNext(), blindScope, outcome), outcome);
            case com.google.javascript.rhino.Token.NOT :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), blindScope, !outcome);
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
                if (outcome) {
                    return caseEquality(condition, blindScope, ineq);
                }
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return caseInstanceOf(condition.getFirstChild(), condition.getLastChild(), blindScope, outcome);
            case com.google.javascript.rhino.Token.IN :
                if (outcome && condition.getFirstChild().isString()) {
                    return caseIn(condition.getLastChild(), condition.getFirstChild().getString(), blindScope);
                }
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left = condition.getParent().getFirstChild();
                com.google.javascript.rhino.Node right = condition.getFirstChild();
                if (outcome) {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
        }
        return nextPreciserScopeKnowingConditionOutcome(condition, blindScope, outcome);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        return caseEquality(condition.getFirstChild(), condition.getLastChild(), blindScope, merging);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType.TypePair merged = merging.apply(new com.google.javascript.rhino.jstype.JSType.TypePair(leftType, rightType));
        if (merged != null) {
            return maybeRestrictTwoNames(blindScope, left, leftType, leftIsRefineable ? merged.typeA : null, right, rightType, rightIsRefineable ? merged.typeB : null);
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrNotShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType restrictedLeftType = (leftType == null) ? null : leftType.getRestrictedTypeGivenToBooleanOutcome(condition);
        if (restrictedLeftType == null) {
            return firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        if (condition) {
            com.google.javascript.rhino.jstype.JSType restrictedRightType = (rightType == null) ? null : rightType.getRestrictedTypeGivenToBooleanOutcome(condition);
            return maybeRestrictTwoNames(blindScope, left, leftType, leftIsRefineable ? restrictedLeftType : null, right, rightType, rightIsRefineable ? restrictedRightType : null);
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrMaybeShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.jscomp.type.FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> leftVar = leftScope.findUniqueRefinedSlot(blindScope);
        if (leftVar == null) {
            return blindScope == leftScope ? blindScope : blindScope.createChildFlowScope();
        }
        com.google.javascript.jscomp.type.FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        rightScope = firstPreciserScopeKnowingConditionOutcome(right, rightScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> rightVar = rightScope.findUniqueRefinedSlot(blindScope);
        if ((rightVar == null) || (!leftVar.getName().equals(rightVar.getName()))) {
            return blindScope == rightScope ? blindScope : blindScope.createChildFlowScope();
        }
        com.google.javascript.rhino.jstype.JSType type = leftVar.getType().getLeastSupertype(rightVar.getType());
        com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
        informed.inferSlotType(leftVar.getName(), type);
        return informed;
    }

    private com.google.javascript.jscomp.type.FlowScope maybeRestrictName(com.google.javascript.jscomp.type.FlowScope blindScope, com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType originalType, com.google.javascript.rhino.jstype.JSType restrictedType) {
        if ((restrictedType != null) && (restrictedType != originalType)) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            declareNameInScope(informed, node, restrictedType);
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope maybeRestrictTwoNames(com.google.javascript.jscomp.type.FlowScope blindScope, com.google.javascript.rhino.Node left, com.google.javascript.rhino.jstype.JSType originalLeftType, com.google.javascript.rhino.jstype.JSType restrictedLeftType, com.google.javascript.rhino.Node right, com.google.javascript.rhino.jstype.JSType originalRightType, com.google.javascript.rhino.jstype.JSType restrictedRightType) {
        boolean shouldRefineLeft = (restrictedLeftType != null) && (restrictedLeftType != originalLeftType);
        boolean shouldRefineRight = (restrictedRightType != null) && (restrictedRightType != originalRightType);
        if (shouldRefineLeft || shouldRefineRight) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            if (shouldRefineLeft) {
                declareNameInScope(informed, left, restrictedLeftType);
            }
            if (shouldRefineRight) {
                declareNameInScope(informed, right, restrictedRightType);
            }
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseNameOrGetProp(com.google.javascript.rhino.Node name, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType type = getTypeIfRefinable(name, blindScope);
        if (type != null) {
            return maybeRestrictName(blindScope, name, type, type.getRestrictedTypeGivenToBooleanOutcome(outcome));
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseTypeOf(com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType type, java.lang.String value, boolean resultEqualsValue, com.google.javascript.jscomp.type.FlowScope blindScope) {
        return maybeRestrictName(blindScope, node, type, getRestrictedByTypeOfResult(type, value, resultEqualsValue));
    }

    private com.google.javascript.jscomp.type.FlowScope caseInstanceOf(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        if (leftType == null) {
            return blindScope;
        }
        com.google.javascript.rhino.jstype.JSType rightType = right.getJSType();
        com.google.javascript.rhino.jstype.ObjectType targetType = typeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        if ((rightType != null) && rightType.isFunctionType()) {
            targetType = rightType.toMaybeFunctionType();
        }
        com.google.javascript.rhino.jstype.Visitor<com.google.javascript.rhino.jstype.JSType> visitor;
        if (outcome) {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByTrueInstanceOfResultVisitor(targetType);
        } else {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByFalseInstanceOfResultVisitor(targetType);
        }
        return maybeRestrictName(blindScope, left, leftType, leftType.visit(visitor));
    }

    private com.google.javascript.jscomp.type.FlowScope caseIn(com.google.javascript.rhino.Node object, java.lang.String propertyName, com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.JSType jsType = object.getJSType();
        jsType = this.getRestrictedWithoutNull(jsType);
        jsType = this.getRestrictedWithoutUndefined(jsType);
        boolean hasProperty = false;
        com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(jsType);
        if (objectType != null) {
            hasProperty = objectType.hasProperty(propertyName);
        }
        if (!hasProperty) {
            java.lang.String qualifiedName = object.getQualifiedName();
            if (qualifiedName != null) {
                java.lang.String propertyQualifiedName = (qualifiedName + ".") + propertyName;
                if (blindScope.getSlot(propertyQualifiedName) == null) {
                    com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
                    com.google.javascript.rhino.jstype.JSType unknownType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                    informed.inferQualifiedSlot(object, propertyQualifiedName, unknownType, unknownType);
                    return informed;
                }
            }
        }
        return blindScope;
    }

    private class RestrictByTrueInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByTrueTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByTrueInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        protected com.google.javascript.rhino.jstype.JSType caseTopType(com.google.javascript.rhino.jstype.JSType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnknownType() {
            com.google.javascript.rhino.jstype.FunctionType funcTarget = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(target);
            if ((funcTarget != null) && funcTarget.hasInstanceType()) {
                return funcTarget.getInstanceType();
            }
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }

        private com.google.javascript.rhino.jstype.JSType applyCommonRestriction(com.google.javascript.rhino.jstype.JSType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getGreatestSubtype(funcTarget.getInstanceType());
            }
            return null;
        }
    }

    private class RestrictByFalseInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByFalseTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByFalseInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                if (type.isSubtype(funcTarget.getInstanceType())) {
                    return null;
                }
                return type;
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getRestrictedUnion(funcTarget.getInstanceType());
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }
    }
}
[285451] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659895926141
GPR[SSUN]-1659895926141
2069352659
GPR[SPVATF]-1659895926346
GPR[EPVATF]-1659895929225
GPR[SPS]-1659895929225
[289018] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionTypeBuilder:157.
GPR[EPS]-1659895929708
GPR[ESUN]-1659895929709
GPR[SSUN]-1659895929709
2069352659
GPR[SPVATF]-1659895929910
GPR[EPVATF]-1659895932748
GPR[SPS]-1659895932748
[292531] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionTypeBuilder:156.
GPR[EPS]-1659895933221
GPR[ESUN]-1659895933221
GPR[SSUN]-1659895933221
2069352659
GPR[SPVATF]-1659895933422
GPR[EPVATF]-1659895936252
GPR[SPS]-1659895936252
[296107] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.UnionTypeBuilder:155.
GPR[EPS]-1659895936797
GPR[ESUN]-1659895936797
GPR[SSUN]-1659895936797
2069352659
GPR[ESUN]-1659895937000
GPR[SSUN]-1659895937000
2069352659
GPR[ESUN]-1659895937197
GPR[SSUN]-1659895937197
-1696950979
GPR[SPVATF]-1659895937430
GPR[EPVATF]-1659895940253
GPR[SPS]-1659895940253
GPR[EPS]-1659895954174
GPR[ESUN]-1659895954174
GPR[SSUN]-1659895954174
-1696950979
GPR[SPVATF]-1659895954517
GPR[EPVATF]-1659895957358
GPR[SPS]-1659895957358
GPR[EPS]-1659895967111
GPR[SPVATF]-1659895967111
GPR[EPVATF]-1659895969932
GPR[SPS]-1659895969932
GPR[EPS]-1659895979784
GPR[ESUN]-1659895979784
GPR[SSUN]-1659895979784
-1696950979
GPR[ESUN]-1659895980025
GPR[SSUN]-1659895980025
-1696950979
GPR[SPVATF]-1659895980256
GPR[EPVATF]-1659895983084
GPR[SPS]-1659895983084
[342806] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class SemanticReverseAbstractInterpreter extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter {
    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> EQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> NE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderInequality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHEQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHNE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowInequality(p.typeB);
        }
    };

    private final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> ineq = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            return new com.google.javascript.rhino.jstype.JSType.TypePair(getRestrictedWithoutUndefined(p.typeA), getRestrictedWithoutUndefined(p.typeB));
        }
    };

    public SemanticReverseAbstractInterpreter(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        super(convention, typeRegistry);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.FlowScope getPreciserScopeKnowingConditionOutcome(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        int operatorToken = condition.getType();
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left;
                com.google.javascript.rhino.Node right;
                if (operatorToken == com.google.javascript.rhino.Token.CASE) {
                    left = condition.getParent().getFirstChild();
                    right = condition.getFirstChild();
                } else {
                    left = condition.getFirstChild();
                    right = condition.getLastChild();
                }
                com.google.javascript.rhino.Node typeOfNode = null;
                com.google.javascript.rhino.Node stringNode = null;
                if (left.isTypeOf() && right.isString()) {
                    typeOfNode = left;
                    stringNode = right;
                } else if (right.isTypeOf() && left.isString()) {
                    typeOfNode = right;
                    stringNode = left;
                }
                if ((typeOfNode != null) && (stringNode != null)) {
                    com.google.javascript.rhino.Node operandNode = typeOfNode.getFirstChild();
                    com.google.javascript.rhino.jstype.JSType operandType = getTypeIfRefinable(operandNode, blindScope);
                    if (operandType != null) {
                        boolean resultEqualsValue = ((operatorToken == com.google.javascript.rhino.Token.EQ) || (operatorToken == com.google.javascript.rhino.Token.SHEQ)) || (operatorToken == com.google.javascript.rhino.Token.CASE);
                        if (!outcome) {
                            resultEqualsValue = !resultEqualsValue;
                        }
                        return caseTypeOf(operandNode, operandType, stringNode.getString(), resultEqualsValue, blindScope);
                    }
                }
        }
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.AND :
                if (outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                }
            case com.google.javascript.rhino.Token.OR :
                if (!outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                }
            case com.google.javascript.rhino.Token.EQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                }
            case com.google.javascript.rhino.Token.NE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                }
            case com.google.javascript.rhino.Token.SHEQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
            case com.google.javascript.rhino.Token.SHNE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                }
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                return caseNameOrGetProp(condition, blindScope, outcome);
            case com.google.javascript.rhino.Token.ASSIGN :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild().getNext(), blindScope, outcome), outcome);
            case com.google.javascript.rhino.Token.NOT :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), blindScope, !outcome);
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
                if (outcome) {
                    return caseEquality(condition, blindScope, ineq);
                }
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return caseInstanceOf(condition.getFirstChild(), condition.getLastChild(), blindScope, outcome);
            case com.google.javascript.rhino.Token.IN :
                if (outcome && condition.getFirstChild().isString()) {
                    return caseIn(condition.getLastChild(), condition.getFirstChild().getString(), blindScope);
                }
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left = condition.getParent().getFirstChild();
                com.google.javascript.rhino.Node right = condition.getFirstChild();
                if (outcome) {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
        }
        return nextPreciserScopeKnowingConditionOutcome(condition, blindScope, outcome);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        return caseEquality(condition.getFirstChild(), condition.getLastChild(), blindScope, merging);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(41).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("merging",merging);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.ineq",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.ineq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("right",right);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("leftType",leftType);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("rightType",rightType);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("left",left);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("blindScope",blindScope);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectInput("rightType != null",rightType != null);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(41).collectionEnds();
        }
        if (runtimeAngelicValue) if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType.TypePair merged = merging.apply(new com.google.javascript.rhino.jstype.JSType.TypePair(leftType, rightType));
        if (merged != null) {
            return maybeRestrictTwoNames(blindScope, left, leftType, leftIsRefineable ? merged.typeA : null, right, rightType, rightIsRefineable ? merged.typeB : null);
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrNotShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType restrictedLeftType = (leftType == null) ? null : leftType.getRestrictedTypeGivenToBooleanOutcome(condition);
        if (restrictedLeftType == null) {
            return firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        if (condition) {
            com.google.javascript.rhino.jstype.JSType restrictedRightType = (rightType == null) ? null : rightType.getRestrictedTypeGivenToBooleanOutcome(condition);
            return maybeRestrictTwoNames(blindScope, left, leftType, leftIsRefineable ? restrictedLeftType : null, right, rightType, rightIsRefineable ? restrictedRightType : null);
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrMaybeShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.jscomp.type.FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> leftVar = leftScope.findUniqueRefinedSlot(blindScope);
        if (leftVar == null) {
            return blindScope == leftScope ? blindScope : blindScope.createChildFlowScope();
        }
        com.google.javascript.jscomp.type.FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        rightScope = firstPreciserScopeKnowingConditionOutcome(right, rightScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> rightVar = rightScope.findUniqueRefinedSlot(blindScope);
        if ((rightVar == null) || (!leftVar.getName().equals(rightVar.getName()))) {
            return blindScope == rightScope ? blindScope : blindScope.createChildFlowScope();
        }
        com.google.javascript.rhino.jstype.JSType type = leftVar.getType().getLeastSupertype(rightVar.getType());
        com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
        informed.inferSlotType(leftVar.getName(), type);
        return informed;
    }

    private com.google.javascript.jscomp.type.FlowScope maybeRestrictName(com.google.javascript.jscomp.type.FlowScope blindScope, com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType originalType, com.google.javascript.rhino.jstype.JSType restrictedType) {
        if ((restrictedType != null) && (restrictedType != originalType)) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            declareNameInScope(informed, node, restrictedType);
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope maybeRestrictTwoNames(com.google.javascript.jscomp.type.FlowScope blindScope, com.google.javascript.rhino.Node left, com.google.javascript.rhino.jstype.JSType originalLeftType, com.google.javascript.rhino.jstype.JSType restrictedLeftType, com.google.javascript.rhino.Node right, com.google.javascript.rhino.jstype.JSType originalRightType, com.google.javascript.rhino.jstype.JSType restrictedRightType) {
        boolean shouldRefineLeft = (restrictedLeftType != null) && (restrictedLeftType != originalLeftType);
        boolean shouldRefineRight = (restrictedRightType != null) && (restrictedRightType != originalRightType);
        if (shouldRefineLeft || shouldRefineRight) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            if (shouldRefineLeft) {
                declareNameInScope(informed, left, restrictedLeftType);
            }
            if (shouldRefineRight) {
                declareNameInScope(informed, right, restrictedRightType);
            }
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseNameOrGetProp(com.google.javascript.rhino.Node name, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType type = getTypeIfRefinable(name, blindScope);
        if (type != null) {
            return maybeRestrictName(blindScope, name, type, type.getRestrictedTypeGivenToBooleanOutcome(outcome));
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseTypeOf(com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType type, java.lang.String value, boolean resultEqualsValue, com.google.javascript.jscomp.type.FlowScope blindScope) {
        return maybeRestrictName(blindScope, node, type, getRestrictedByTypeOfResult(type, value, resultEqualsValue));
    }

    private com.google.javascript.jscomp.type.FlowScope caseInstanceOf(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        if (leftType == null) {
            return blindScope;
        }
        com.google.javascript.rhino.jstype.JSType rightType = right.getJSType();
        com.google.javascript.rhino.jstype.ObjectType targetType = typeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        if ((rightType != null) && rightType.isFunctionType()) {
            targetType = rightType.toMaybeFunctionType();
        }
        com.google.javascript.rhino.jstype.Visitor<com.google.javascript.rhino.jstype.JSType> visitor;
        if (outcome) {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByTrueInstanceOfResultVisitor(targetType);
        } else {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByFalseInstanceOfResultVisitor(targetType);
        }
        return maybeRestrictName(blindScope, left, leftType, leftType.visit(visitor));
    }

    private com.google.javascript.jscomp.type.FlowScope caseIn(com.google.javascript.rhino.Node object, java.lang.String propertyName, com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.JSType jsType = object.getJSType();
        jsType = this.getRestrictedWithoutNull(jsType);
        jsType = this.getRestrictedWithoutUndefined(jsType);
        boolean hasProperty = false;
        com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(jsType);
        if (objectType != null) {
            hasProperty = objectType.hasProperty(propertyName);
        }
        if (!hasProperty) {
            java.lang.String qualifiedName = object.getQualifiedName();
            if (qualifiedName != null) {
                java.lang.String propertyQualifiedName = (qualifiedName + ".") + propertyName;
                if (blindScope.getSlot(propertyQualifiedName) == null) {
                    com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
                    com.google.javascript.rhino.jstype.JSType unknownType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                    informed.inferQualifiedSlot(object, propertyQualifiedName, unknownType, unknownType);
                    return informed;
                }
            }
        }
        return blindScope;
    }

    private class RestrictByTrueInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByTrueTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByTrueInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        protected com.google.javascript.rhino.jstype.JSType caseTopType(com.google.javascript.rhino.jstype.JSType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnknownType() {
            com.google.javascript.rhino.jstype.FunctionType funcTarget = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(target);
            if ((funcTarget != null) && funcTarget.hasInstanceType()) {
                return funcTarget.getInstanceType();
            }
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }

        private com.google.javascript.rhino.jstype.JSType applyCommonRestriction(com.google.javascript.rhino.jstype.JSType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getGreatestSubtype(funcTarget.getInstanceType());
            }
            return null;
        }
    }

    private class RestrictByFalseInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByFalseTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByFalseInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                if (type.isSubtype(funcTarget.getInstanceType())) {
                    return null;
                }
                return type;
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getRestrictedUnion(funcTarget.getInstanceType());
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }
    }
}
[342806] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659895983496
CodeCache: size=245760Kb used=243592Kb max_used=243627Kb free=2167Kb
 bounds [0x00007f138d000000, 0x00007f139c000000, 0x00007f139c000000]
 total_blobs=56087 nmethods=55584 adapters=404
 compilation: disabled (not enough contiguous free space left)
GPR[EPVATF]-1659895986582
GPR[SPS]-1659895986582
GPR[EPS]-1659896010885
GPR[ESUN]-1659896010886
GPR[SSUN]-1659896010886
-1696950979
GPR[ESUN]-1659896011277
GPR[SSUN]-1659896011277
-1696950979
GPR[SPVATF]-1659896011611
GPR[EPVATF]-1659896013675
GPR[SPS]-1659896013676
[373670] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class SemanticReverseAbstractInterpreter extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter {
    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> EQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> NE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderInequality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHEQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHNE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowInequality(p.typeB);
        }
    };

    private final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> ineq = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            return new com.google.javascript.rhino.jstype.JSType.TypePair(getRestrictedWithoutUndefined(p.typeA), getRestrictedWithoutUndefined(p.typeB));
        }
    };

    public SemanticReverseAbstractInterpreter(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        super(convention, typeRegistry);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.FlowScope getPreciserScopeKnowingConditionOutcome(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        int operatorToken = condition.getType();
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left;
                com.google.javascript.rhino.Node right;
                if (operatorToken == com.google.javascript.rhino.Token.CASE) {
                    left = condition.getParent().getFirstChild();
                    right = condition.getFirstChild();
                } else {
                    left = condition.getFirstChild();
                    right = condition.getLastChild();
                }
                com.google.javascript.rhino.Node typeOfNode = null;
                com.google.javascript.rhino.Node stringNode = null;
                if (left.isTypeOf() && right.isString()) {
                    typeOfNode = left;
                    stringNode = right;
                } else if (right.isTypeOf() && left.isString()) {
                    typeOfNode = right;
                    stringNode = left;
                }
                if ((typeOfNode != null) && (stringNode != null)) {
                    com.google.javascript.rhino.Node operandNode = typeOfNode.getFirstChild();
                    com.google.javascript.rhino.jstype.JSType operandType = getTypeIfRefinable(operandNode, blindScope);
                    if (operandType != null) {
                        boolean resultEqualsValue = ((operatorToken == com.google.javascript.rhino.Token.EQ) || (operatorToken == com.google.javascript.rhino.Token.SHEQ)) || (operatorToken == com.google.javascript.rhino.Token.CASE);
                        if (!outcome) {
                            resultEqualsValue = !resultEqualsValue;
                        }
                        return caseTypeOf(operandNode, operandType, stringNode.getString(), resultEqualsValue, blindScope);
                    }
                }
        }
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.AND :
                if (outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                }
            case com.google.javascript.rhino.Token.OR :
                if (!outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                }
            case com.google.javascript.rhino.Token.EQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                }
            case com.google.javascript.rhino.Token.NE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                }
            case com.google.javascript.rhino.Token.SHEQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
            case com.google.javascript.rhino.Token.SHNE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                }
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                return caseNameOrGetProp(condition, blindScope, outcome);
            case com.google.javascript.rhino.Token.ASSIGN :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild().getNext(), blindScope, outcome), outcome);
            case com.google.javascript.rhino.Token.NOT :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), blindScope, !outcome);
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
                if (outcome) {
                    return caseEquality(condition, blindScope, ineq);
                }
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return caseInstanceOf(condition.getFirstChild(), condition.getLastChild(), blindScope, outcome);
            case com.google.javascript.rhino.Token.IN :
                if (outcome && condition.getFirstChild().isString()) {
                    return caseIn(condition.getLastChild(), condition.getFirstChild().getString(), blindScope);
                }
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left = condition.getParent().getFirstChild();
                com.google.javascript.rhino.Node right = condition.getFirstChild();
                if (outcome) {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
        }
        return nextPreciserScopeKnowingConditionOutcome(condition, blindScope, outcome);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        return caseEquality(condition.getFirstChild(), condition.getLastChild(), blindScope, merging);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(43).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("leftType != null",leftType != null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("merging",merging);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.ineq",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.ineq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("left",left);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("blindScope",blindScope);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("right",right);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("leftType",leftType);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(43).collectionEnds();
        }
        if (runtimeAngelicValue) if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType.TypePair merged = merging.apply(new com.google.javascript.rhino.jstype.JSType.TypePair(leftType, rightType));
        if (merged != null) {
            return maybeRestrictTwoNames(blindScope, left, leftType, leftIsRefineable ? merged.typeA : null, right, rightType, rightIsRefineable ? merged.typeB : null);
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrNotShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType restrictedLeftType = (leftType == null) ? null : leftType.getRestrictedTypeGivenToBooleanOutcome(condition);
        if (restrictedLeftType == null) {
            return firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        if (condition) {
            com.google.javascript.rhino.jstype.JSType restrictedRightType = (rightType == null) ? null : rightType.getRestrictedTypeGivenToBooleanOutcome(condition);
            return maybeRestrictTwoNames(blindScope, left, leftType, leftIsRefineable ? restrictedLeftType : null, right, rightType, rightIsRefineable ? restrictedRightType : null);
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrMaybeShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.jscomp.type.FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> leftVar = leftScope.findUniqueRefinedSlot(blindScope);
        if (leftVar == null) {
            return blindScope == leftScope ? blindScope : blindScope.createChildFlowScope();
        }
        com.google.javascript.jscomp.type.FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        rightScope = firstPreciserScopeKnowingConditionOutcome(right, rightScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> rightVar = rightScope.findUniqueRefinedSlot(blindScope);
        if ((rightVar == null) || (!leftVar.getName().equals(rightVar.getName()))) {
            return blindScope == rightScope ? blindScope : blindScope.createChildFlowScope();
        }
        com.google.javascript.rhino.jstype.JSType type = leftVar.getType().getLeastSupertype(rightVar.getType());
        com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
        informed.inferSlotType(leftVar.getName(), type);
        return informed;
    }

    private com.google.javascript.jscomp.type.FlowScope maybeRestrictName(com.google.javascript.jscomp.type.FlowScope blindScope, com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType originalType, com.google.javascript.rhino.jstype.JSType restrictedType) {
        if ((restrictedType != null) && (restrictedType != originalType)) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            declareNameInScope(informed, node, restrictedType);
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope maybeRestrictTwoNames(com.google.javascript.jscomp.type.FlowScope blindScope, com.google.javascript.rhino.Node left, com.google.javascript.rhino.jstype.JSType originalLeftType, com.google.javascript.rhino.jstype.JSType restrictedLeftType, com.google.javascript.rhino.Node right, com.google.javascript.rhino.jstype.JSType originalRightType, com.google.javascript.rhino.jstype.JSType restrictedRightType) {
        boolean shouldRefineLeft = (restrictedLeftType != null) && (restrictedLeftType != originalLeftType);
        boolean shouldRefineRight = (restrictedRightType != null) && (restrictedRightType != originalRightType);
        if (shouldRefineLeft || shouldRefineRight) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            if (shouldRefineLeft) {
                declareNameInScope(informed, left, restrictedLeftType);
            }
            if (shouldRefineRight) {
                declareNameInScope(informed, right, restrictedRightType);
            }
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseNameOrGetProp(com.google.javascript.rhino.Node name, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType type = getTypeIfRefinable(name, blindScope);
        if (type != null) {
            return maybeRestrictName(blindScope, name, type, type.getRestrictedTypeGivenToBooleanOutcome(outcome));
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseTypeOf(com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType type, java.lang.String value, boolean resultEqualsValue, com.google.javascript.jscomp.type.FlowScope blindScope) {
        return maybeRestrictName(blindScope, node, type, getRestrictedByTypeOfResult(type, value, resultEqualsValue));
    }

    private com.google.javascript.jscomp.type.FlowScope caseInstanceOf(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        if (leftType == null) {
            return blindScope;
        }
        com.google.javascript.rhino.jstype.JSType rightType = right.getJSType();
        com.google.javascript.rhino.jstype.ObjectType targetType = typeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        if ((rightType != null) && rightType.isFunctionType()) {
            targetType = rightType.toMaybeFunctionType();
        }
        com.google.javascript.rhino.jstype.Visitor<com.google.javascript.rhino.jstype.JSType> visitor;
        if (outcome) {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByTrueInstanceOfResultVisitor(targetType);
        } else {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByFalseInstanceOfResultVisitor(targetType);
        }
        return maybeRestrictName(blindScope, left, leftType, leftType.visit(visitor));
    }

    private com.google.javascript.jscomp.type.FlowScope caseIn(com.google.javascript.rhino.Node object, java.lang.String propertyName, com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.JSType jsType = object.getJSType();
        jsType = this.getRestrictedWithoutNull(jsType);
        jsType = this.getRestrictedWithoutUndefined(jsType);
        boolean hasProperty = false;
        com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(jsType);
        if (objectType != null) {
            hasProperty = objectType.hasProperty(propertyName);
        }
        if (!hasProperty) {
            java.lang.String qualifiedName = object.getQualifiedName();
            if (qualifiedName != null) {
                java.lang.String propertyQualifiedName = (qualifiedName + ".") + propertyName;
                if (blindScope.getSlot(propertyQualifiedName) == null) {
                    com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
                    com.google.javascript.rhino.jstype.JSType unknownType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                    informed.inferQualifiedSlot(object, propertyQualifiedName, unknownType, unknownType);
                    return informed;
                }
            }
        }
        return blindScope;
    }

    private class RestrictByTrueInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByTrueTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByTrueInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        protected com.google.javascript.rhino.jstype.JSType caseTopType(com.google.javascript.rhino.jstype.JSType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnknownType() {
            com.google.javascript.rhino.jstype.FunctionType funcTarget = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(target);
            if ((funcTarget != null) && funcTarget.hasInstanceType()) {
                return funcTarget.getInstanceType();
            }
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }

        private com.google.javascript.rhino.jstype.JSType applyCommonRestriction(com.google.javascript.rhino.jstype.JSType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getGreatestSubtype(funcTarget.getInstanceType());
            }
            return null;
        }
    }

    private class RestrictByFalseInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByFalseTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByFalseInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                if (type.isSubtype(funcTarget.getInstanceType())) {
                    return null;
                }
                return type;
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getRestrictedUnion(funcTarget.getInstanceType());
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }
    }
}
[373670] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659896014361
GPR[EPVATF]-1659896016253
GPR[SPS]-1659896016253
[376401] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:276.
GPR[EPS]-1659896017091
GPR[ESUN]-1659896017092
GPR[SSUN]-1659896017092
-1696950979
GPR[ESUN]-1659896017374
GPR[SSUN]-1659896017374
-46850221
GPR[SPVATF]-1659896017673
GPR[EPVATF]-1659896019633
GPR[SPS]-1659896019633
[379651] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:745.
GPR[EPS]-1659896020341
GPR[SPVATF]-1659896020341
GPR[EPVATF]-1659896022297
GPR[SPS]-1659896022297
GPR[EPS]-1659896127978
GPR[ESUN]-1659896127979
GPR[SSUN]-1659896127979
-46850221
GPR[SPVATF]-1659896128380
GPR[EPVATF]-1659896130256
GPR[SPS]-1659896130256
[490174] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:743.
GPR[EPS]-1659896130864
GPR[ESUN]-1659896130864
GPR[SSUN]-1659896130864
-1797850673
GPR[SPVATF]-1659896131149
GPR[EPVATF]-1659896133055
GPR[SPS]-1659896133055
[493185] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:690.
GPR[EPS]-1659896133875
GPR[ESUN]-1659896133875
GPR[SSUN]-1659896133876
-1797850673
GPR[SPVATF]-1659896134158
GPR[EPVATF]-1659896136073
GPR[SPS]-1659896136073
[496094] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:689.
GPR[EPS]-1659896136784
GPR[ESUN]-1659896136784
GPR[SSUN]-1659896136784
-1797850673
GPR[SPVATF]-1659896137065
GPR[EPVATF]-1659896139929
GPR[SPS]-1659896139929
[499945] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:685.
GPR[EPS]-1659896140635
GPR[SPVATF]-1659896140635
GPR[EPVATF]-1659896142567
GPR[SPS]-1659896142567
[502552] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:685.
GPR[EPS]-1659896143242
GPR[ESUN]-1659896143242
GPR[SSUN]-1659896143242
-1797850673
GPR[SPVATF]-1659896143531
GPR[EPVATF]-1659896145649
GPR[SPS]-1659896145649
[505637] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:671.
GPR[EPS]-1659896146327
GPR[SPVATF]-1659896146328
GPR[EPVATF]-1659896148318
GPR[SPS]-1659896148318
[508292] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:671.
GPR[EPS]-1659896148982
GPR[ESUN]-1659896148982
GPR[SSUN]-1659896148982
-1797850673
GPR[ESUN]-1659896149256
GPR[SSUN]-1659896149257
-1797850673
GPR[ESUN]-1659896149522
GPR[SSUN]-1659896149522
-1797850673
GPR[ESUN]-1659896149796
GPR[SSUN]-1659896149796
-1797850673
GPR[SPVATF]-1659896150079
GPR[EPVATF]-1659896152209
GPR[SPS]-1659896152209
[511980] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY_WITH_SUGGESTION = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}. Did you mean {2}?");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_SHAPE_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_SHAPE_TYPE", "{1} cannot extend this type; {0}s can only extend {0}s");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{1} cannot extend this type; {0}s can only extend {0}s");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticType IN_USED_WITH_STRUCT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IN_USED_WITH_STRUCT", "Cannot use the IN operator with structs");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_PROPERTY_CREATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_PROPERTY_CREATION", "Cannot add a property to a struct instance " + "after it is constructed.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_OBJLIT_KEY = com.google.javascript.jscomp.DiagnosticType.warning("ILLEGAL_OBJLIT_KEY", "Illegal key, the object literal is a {0}");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION, com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.MemoizedScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final boolean reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    private java.lang.reflect.Method editDistance;

    private static final class SuggestionPair {
        private final java.lang.String suggestion;

        final int distance;

        private SuggestionPair(java.lang.String suggestion, int distance) {
            this.suggestion = suggestion;
            this.distance = distance;
        }
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.MemoizedScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = ((com.google.javascript.jscomp.Compiler) (compiler)).getOptions().enables(com.google.javascript.jscomp.DiagnosticGroups.REPORT_UNKNOWN_TYPES);
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
        java.lang.ClassLoader classLoader = com.google.javascript.jscomp.TypeCheck.class.getClassLoader();
        try {
            java.lang.Class<?> c = classLoader.loadClass("com.google.common.string.EditDistance");
            editDistance = c.getDeclaredMethod("getEditDistance", java.lang.String.class, java.lang.String.class, boolean.class);
        } catch (java.lang.Exception ignored) {
            editDistance = null;
        }
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CAST :
                com.google.javascript.rhino.Node expr = n.getFirstChild();
                com.google.javascript.rhino.jstype.JSType exprType = getJSType(expr);
                com.google.javascript.rhino.jstype.JSType castType = getJSType(n);
                if (!expr.isObjectLit()) {
                    validator.expectCanCast(t, n, castType, exprType);
                }
                ensureTyped(t, n, castType);
                if (castType.isSubtype(exprType) || expr.isObjectLit()) {
                    expr.setJSType(castType);
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !(parent.isAssign() && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !parent.isExprResult();
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                checkPropCreation(t, left);
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    left = n.getFirstChild();
                    right = n.getLastChild();
                    if (left.isTypeOf()) {
                        if (right.isString()) {
                            checkTypeofString(t, right, right.getString());
                        }
                    } else if (right.isTypeOf() && left.isString()) {
                        checkTypeofString(t, left, left.getString());
                    }
                    leftType = getJSType(left);
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(54).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("typeable",typeable);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION",com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT",com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY_WITH_SUGGESTION",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY_WITH_SUGGESTION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY",com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.editDistance",com.google.javascript.jscomp.TypeCheck.this.editDistance);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(54).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        rightType = getJSType(right);

                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    if ((n.getType() == com.google.javascript.rhino.Token.EQ) || (n.getType() == com.google.javascript.rhino.Token.NE)) {
                        result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                        if (n.isNE()) {
                            result = result.not();
                        }
                    } else if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        result = (n.getType() == com.google.javascript.rhino.Token.SHEQ) ? com.google.javascript.rhino.jstype.TernaryValue.FALSE : com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                    }
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                rightType = getJSType(right);
                validator.expectString(t, left, getJSType(left), "left side of 'in'");
                validator.expectObject(t, n, rightType, "'in' requires an object");
                if (rightType.isStruct()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT);
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, getJSType(left), "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                checkPropCreation(t, n.getFirstChild());
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    com.google.javascript.rhino.Node obj = n.getChildAtIndex(1);
                    if (getJSType(obj).isStruct()) {
                        report(t, obj, com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT);
                    }
                }
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if (n.isObjectLit() && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.isObjectLit()) {
                    com.google.javascript.rhino.jstype.JSType typ = getJSType(n);
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n, typ);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void checkTypeofString(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String s) {
        if (!((((((s.equals("number") || s.equals("string")) || s.equals("boolean")) || s.equals("undefined")) || s.equals("function")) || s.equals("object")) || s.equals("unknown"))) {
            validator.expectValidTypeofName(t, n, s);
        }
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            com.google.javascript.rhino.Node property = lvalue.getLastChild();
            java.lang.String pname = property.getString();
            if (object.isGetProp()) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, pname, lvalue, rvalue);
                }
            }
            checkEnumAlias(t, info, rvalue);
            checkPropCreation(t, lvalue);
            if (pname.equals("prototype")) {
                if ((objectJsType != null) && objectJsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = objectJsType.toMaybeFunctionType();
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                        if (functionType.makesStructs() && (!rvalueType.isStruct())) {
                            java.lang.String funName = functionType.getTypeOfThis().toString();
                            compiler.report(t.makeError(assign, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, "struct", funName));
                        }
                        return;
                    }
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(pname) && (!type.isPropertyTypeInferred(pname))) && (!com.google.javascript.jscomp.TypeCheck.propertyIsImplicitCast(type, pname))) {
                    com.google.javascript.rhino.jstype.JSType expectedType = type.getPropertyType(pname);
                    if (!expectedType.isUnknownType()) {
                        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), expectedType, object, pname);
                        checkPropertyInheritanceOnGetpropAssign(t, assign, object, pname, info, expectedType);
                        return;
                    }
                }
            }
            checkPropertyInheritanceOnGetpropAssign(t, assign, object, pname, info, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        if (lvalue.isQualifiedName()) {
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getQualifiedName());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
                if (com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(lvalue).isThis() && (t.getScope() != var.getScope())) {
                    return;
                }
                if (var.getType() != null) {
                    leftType = var.getType();
                }
            }
        }
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void checkPropCreation(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node lvalue) {
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node obj = lvalue.getFirstChild();
            com.google.javascript.rhino.Node prop = lvalue.getLastChild();
            com.google.javascript.rhino.jstype.JSType objType = getJSType(obj);
            java.lang.String pname = prop.getString();
            if ((!objType.isStruct()) || objType.hasProperty(pname)) {
                return;
            }
            com.google.javascript.jscomp.Scope s = t.getScope();
            if (obj.isThis() && getJSType(s.getRootNode()).isConstructor()) {
                return;
            }
            com.google.javascript.rhino.Node assgnExp = lvalue.getParent();
            com.google.javascript.rhino.Node assgnStm = assgnExp.getParent();
            if (((objType instanceof com.google.javascript.rhino.jstype.ObjectType) && s.isGlobal()) && com.google.javascript.jscomp.NodeUtil.isPrototypePropertyDeclaration(assgnStm)) {
                com.google.javascript.rhino.jstype.ObjectType instance = objType.toObjectType().getOwnerFunction().getInstanceType();
                java.lang.String file = lvalue.getSourceFileName();
                com.google.javascript.rhino.Node ctor = instance.getConstructor().getSource();
                if ((ctor != null) && ctor.getSourceFileName().equals(file)) {
                    com.google.javascript.rhino.jstype.JSType rvalueType = assgnExp.getLastChild().getJSType();
                    instance.defineInferredProperty(pname, rvalueType, lvalue);
                    return;
                }
            }
            report(t, prop, com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION);
        }
    }

    private void checkPropertyInheritanceOnGetpropAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (object.isGetProp()) {
            com.google.javascript.rhino.Node object2 = object.getFirstChild();
            java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
            if ("prototype".equals(property2)) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object2);
                if (jsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
                    if (functionType.isConstructor() || functionType.isInterface()) {
                        checkDeclaredPropertyInheritance(t, assign, functionType, property, info, propertyType);
                    }
                }
            }
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit, com.google.javascript.rhino.jstype.JSType litType) {
        if (objlit.isFromExterns()) {
            ensureTyped(t, key);
            return;
        }
        if (litType.isStruct() && key.isQuotedString()) {
            report(t, key, com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY, "struct");
        } else if (litType.isDict() && (!key.isQuotedString())) {
            report(t, key, com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY, "dict");
        }
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        com.google.javascript.rhino.jstype.JSType allowedValueType = keyType;
        if (allowedValueType.isEnumElementType()) {
            allowedValueType = allowedValueType.toMaybeEnumElementType().getPrimitiveType();
        }
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!com.google.javascript.jscomp.TypeCheck.propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private static boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getInstanceType().hasProperty(propertyName);
        boolean superClassHasDeclaredProperty = (superClass != null) && superClass.getInstanceType().isPropertyTypeDeclared(propertyName);
        boolean superInterfaceHasProperty = false;
        boolean superInterfaceHasDeclaredProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfaceHasProperty = superInterfaceHasProperty || interfaceType.hasProperty(propertyName);
                superInterfaceHasDeclaredProperty = superInterfaceHasDeclaredProperty || interfaceType.isPropertyTypeDeclared(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.ObjectType topInstanceType = (superClassHasDeclaredProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        boolean declaredLocally = ctorType.isConstructor() && (ctorType.getPrototype().hasOwnProperty(propertyName) || ctorType.getInstanceType().hasOwnProperty(propertyName));
        if (((reportMissingOverride.isOn() && (!declaredOverride)) && superClassHasDeclaredProperty) && declaredLocally) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (superClassHasDeclaredProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getInstanceType().getPropertyType(propertyName);
            com.google.javascript.rhino.jstype.TemplateTypeMap ctorTypeMap = ctorType.getTypeOfThis().getTemplateTypeMap();
            if (!ctorTypeMap.isEmpty()) {
                superClassPropType = superClassPropType.visit(new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(typeRegistry, ctorTypeMap));
            }
            if (!propertyType.isSubtype(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfaceHasDeclaredProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.isSubtype(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (((!foundInterfaceProperty) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if (!rvalueType.isFunctionType()) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if (assign.getLastChild().isFunction() && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.PARAM_LIST)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (childType.isDict()) {
            report(t, property, com.google.javascript.jscomp.TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
        } else if (validator.expectNotNullOrUndefined(t, n, childType, "No properties on this expression", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            checkPropertyAccess(childType, property.getString(), t, n);
        }
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
        if (propType.isEquivalentTo(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            childType = childType.autobox();
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(childType);
            if (objectType != null) {
                if ((!objectType.hasProperty(propName)) || objectType.isEquivalentTo(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                    if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                    } else {
                        checkPropertyAccessHelper(objectType, propName, t, n);
                    }
                }
            } else {
                checkPropertyAccessHelper(childType, propName, t, n);
            }
        }
    }

    private void checkPropertyAccessHelper(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        if (((!objectType.isEmptyType()) && reportMissingProperties) && ((!isPropertyTest(n)) || objectType.isStruct())) {
            if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                com.google.javascript.jscomp.TypeCheck.SuggestionPair pair = getClosestPropertySuggestion(objectType, propName);
                if ((pair != null) && ((pair.distance * 4) < propName.length())) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY_WITH_SUGGESTION, propName, validator.getReadableJSTypeName(n.getFirstChild(), true), pair.suggestion);
                } else {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
                }
            }
        }
    }

    private com.google.javascript.jscomp.TypeCheck.SuggestionPair getClosestPropertySuggestion(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName) {
        if (editDistance == null) {
            return null;
        }
        java.lang.String bestSoFar = null;
        int shortest = java.lang.Integer.MAX_VALUE;
        if (objectType instanceof com.google.javascript.rhino.jstype.ObjectType) {
            com.google.javascript.rhino.jstype.ObjectType type = ((com.google.javascript.rhino.jstype.ObjectType) (objectType));
            for (java.lang.String alt : type.getPropertyNames()) {
                int distance;
                try {
                    distance = ((java.lang.Integer) (editDistance.invoke(null, propName, alt, false)));
                } catch (java.lang.Exception e) {
                    return null;
                }
                if (distance <= shortest) {
                    if (distance == shortest) {
                        if ((bestSoFar != null) && (alt.compareToIgnoreCase(bestSoFar) > 0)) {
                            continue;
                        }
                    }
                    shortest = distance;
                    bestSoFar = alt;
                }
            }
        } else if (objectType.isUnionType()) {
            com.google.javascript.rhino.jstype.UnionType type = ((com.google.javascript.rhino.jstype.UnionType) (objectType));
            for (com.google.javascript.rhino.jstype.JSType alt : type.getAlternates()) {
                com.google.javascript.jscomp.TypeCheck.SuggestionPair pair = getClosestPropertySuggestion(alt, propName);
                if (pair != null) {
                    if (pair.distance <= shortest) {
                        if (pair.distance == shortest) {
                            if ((bestSoFar != null) && (pair.suggestion.compareToIgnoreCase(bestSoFar) > 0)) {
                                continue;
                            }
                        }
                        shortest = pair.distance;
                        bestSoFar = pair.suggestion;
                    }
                }
            }
        }
        if (bestSoFar != null) {
            return new com.google.javascript.jscomp.TypeCheck.SuggestionPair(bestSoFar, shortest);
        }
        return null;
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return parent.getParent().isOr() && (parent.getParent().getFirstChild() == parent);
            case com.google.javascript.rhino.Token.CAST :
                return isPropertyTest(parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        validator.expectIndexMatch(t, n, getJSType(n.getFirstChild()), getJSType(n.getLastChild()));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                checkEnumAlias(t, info, value);
                if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
        if ((type.isConstructor() || type.isEmptyType()) || type.isUnknownType()) {
            com.google.javascript.rhino.jstype.FunctionType fnType = type.toMaybeFunctionType();
            if (fnType != null) {
                visitParameterList(t, n, fnType);
                ensureTyped(t, n, fnType.getInstanceType());
            } else {
                ensureTyped(t, n);
            }
        } else {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        com.google.javascript.rhino.jstype.ObjectType implicitProto = interfaceType.getImplicitPrototype();
        java.util.Set<java.lang.String> currentPropertyNames;
        if (implicitProto == null) {
            currentPropertyNames = com.google.common.collect.ImmutableSet.of();
        } else {
            currentPropertyNames = implicitProto.getOwnPropertyNames();
        }
        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(n.getJSType());
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getSuperClassConstructor();
            if (((baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE)) && (baseConstructor != null)) && baseConstructor.isInterface()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, "constructor", functionPrivateName));
            } else {
                if (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE)) {
                    com.google.javascript.rhino.jstype.ObjectType proto = functionType.getPrototype();
                    if (functionType.makesStructs() && (!proto.isStruct())) {
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, "struct", functionPrivateName));
                    } else if (functionType.makesDicts() && (!proto.isDict())) {
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, "dict", functionPrivateName));
                    }
                }
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, "interface", functionPrivateName));
                }
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = childType.toMaybeFunctionType();
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if ((functionJSDocInfo != null) && (functionJSDocInfo.getAssociatedNode() != null)) {
                isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!((functionType.getTypeOfThis().toObjectType() != null) && functionType.getTypeOfThis().toObjectType().isNativeObjectType()))) && (!(child.isGetElem() || child.isGetProp()))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(t.getEnclosingFunction());
        if (jsType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                actualReturnType = getJSType(valueNode);
            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumAlias(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.JSDocInfo declInfo, com.google.javascript.rhino.Node value) {
        if ((declInfo == null) || (!declInfo.hasEnumParameterType())) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
        if (!valueType.isEnumType()) {
            return;
        }
        com.google.javascript.rhino.jstype.EnumType valueEnumType = valueType.toMaybeEnumType();
        com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), "incompatible enum element types");
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else {
            return jsType;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((!n.isFunction()) || type.isFunctionType()) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.isGetProp()) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        return total == 0 ? 0.0 : (100.0 * typedCount) / total;
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[511980] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659896152670
GPR[SSUN]-1659896152670
-1797850673
GPR[SPVATF]-1659896152944
GPR[EPVATF]-1659896155139
GPR[SPS]-1659896155139
[514914] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY_WITH_SUGGESTION = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}. Did you mean {2}?");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_SHAPE_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_SHAPE_TYPE", "{1} cannot extend this type; {0}s can only extend {0}s");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{1} cannot extend this type; {0}s can only extend {0}s");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticType IN_USED_WITH_STRUCT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IN_USED_WITH_STRUCT", "Cannot use the IN operator with structs");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_PROPERTY_CREATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_PROPERTY_CREATION", "Cannot add a property to a struct instance " + "after it is constructed.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_OBJLIT_KEY = com.google.javascript.jscomp.DiagnosticType.warning("ILLEGAL_OBJLIT_KEY", "Illegal key, the object literal is a {0}");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION, com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.MemoizedScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final boolean reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    private java.lang.reflect.Method editDistance;

    private static final class SuggestionPair {
        private final java.lang.String suggestion;

        final int distance;

        private SuggestionPair(java.lang.String suggestion, int distance) {
            this.suggestion = suggestion;
            this.distance = distance;
        }
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.MemoizedScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = ((com.google.javascript.jscomp.Compiler) (compiler)).getOptions().enables(com.google.javascript.jscomp.DiagnosticGroups.REPORT_UNKNOWN_TYPES);
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
        java.lang.ClassLoader classLoader = com.google.javascript.jscomp.TypeCheck.class.getClassLoader();
        try {
            java.lang.Class<?> c = classLoader.loadClass("com.google.common.string.EditDistance");
            editDistance = c.getDeclaredMethod("getEditDistance", java.lang.String.class, java.lang.String.class, boolean.class);
        } catch (java.lang.Exception ignored) {
            editDistance = null;
        }
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CAST :
                com.google.javascript.rhino.Node expr = n.getFirstChild();
                com.google.javascript.rhino.jstype.JSType exprType = getJSType(expr);
                com.google.javascript.rhino.jstype.JSType castType = getJSType(n);
                if (!expr.isObjectLit()) {
                    validator.expectCanCast(t, n, castType, exprType);
                }
                ensureTyped(t, n, castType);
                if (castType.isSubtype(exprType) || expr.isObjectLit()) {
                    expr.setJSType(castType);
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !(parent.isAssign() && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !parent.isExprResult();
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                checkPropCreation(t, left);
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    left = n.getFirstChild();
                    right = n.getLastChild();
                    if (left.isTypeOf()) {
                        if (right.isString()) {
                            checkTypeofString(t, right, right.getString());
                        }
                    } else if (right.isTypeOf() && left.isString()) {
                        checkTypeofString(t, left, left.getString());
                    }
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(55).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("typeable",typeable);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION",com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT",com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY_WITH_SUGGESTION",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY_WITH_SUGGESTION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY",com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.editDistance",com.google.javascript.jscomp.TypeCheck.this.editDistance);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(55).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        leftType = getJSType(left);

                    rightType = getJSType(right);
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    if ((n.getType() == com.google.javascript.rhino.Token.EQ) || (n.getType() == com.google.javascript.rhino.Token.NE)) {
                        result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                        if (n.isNE()) {
                            result = result.not();
                        }
                    } else if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        result = (n.getType() == com.google.javascript.rhino.Token.SHEQ) ? com.google.javascript.rhino.jstype.TernaryValue.FALSE : com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                    }
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                rightType = getJSType(right);
                validator.expectString(t, left, getJSType(left), "left side of 'in'");
                validator.expectObject(t, n, rightType, "'in' requires an object");
                if (rightType.isStruct()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT);
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, getJSType(left), "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                checkPropCreation(t, n.getFirstChild());
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    com.google.javascript.rhino.Node obj = n.getChildAtIndex(1);
                    if (getJSType(obj).isStruct()) {
                        report(t, obj, com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT);
                    }
                }
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if (n.isObjectLit() && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.isObjectLit()) {
                    com.google.javascript.rhino.jstype.JSType typ = getJSType(n);
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n, typ);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void checkTypeofString(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String s) {
        if (!((((((s.equals("number") || s.equals("string")) || s.equals("boolean")) || s.equals("undefined")) || s.equals("function")) || s.equals("object")) || s.equals("unknown"))) {
            validator.expectValidTypeofName(t, n, s);
        }
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            com.google.javascript.rhino.Node property = lvalue.getLastChild();
            java.lang.String pname = property.getString();
            if (object.isGetProp()) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, pname, lvalue, rvalue);
                }
            }
            checkEnumAlias(t, info, rvalue);
            checkPropCreation(t, lvalue);
            if (pname.equals("prototype")) {
                if ((objectJsType != null) && objectJsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = objectJsType.toMaybeFunctionType();
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                        if (functionType.makesStructs() && (!rvalueType.isStruct())) {
                            java.lang.String funName = functionType.getTypeOfThis().toString();
                            compiler.report(t.makeError(assign, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, "struct", funName));
                        }
                        return;
                    }
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(pname) && (!type.isPropertyTypeInferred(pname))) && (!com.google.javascript.jscomp.TypeCheck.propertyIsImplicitCast(type, pname))) {
                    com.google.javascript.rhino.jstype.JSType expectedType = type.getPropertyType(pname);
                    if (!expectedType.isUnknownType()) {
                        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), expectedType, object, pname);
                        checkPropertyInheritanceOnGetpropAssign(t, assign, object, pname, info, expectedType);
                        return;
                    }
                }
            }
            checkPropertyInheritanceOnGetpropAssign(t, assign, object, pname, info, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        if (lvalue.isQualifiedName()) {
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getQualifiedName());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
                if (com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(lvalue).isThis() && (t.getScope() != var.getScope())) {
                    return;
                }
                if (var.getType() != null) {
                    leftType = var.getType();
                }
            }
        }
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void checkPropCreation(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node lvalue) {
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node obj = lvalue.getFirstChild();
            com.google.javascript.rhino.Node prop = lvalue.getLastChild();
            com.google.javascript.rhino.jstype.JSType objType = getJSType(obj);
            java.lang.String pname = prop.getString();
            if ((!objType.isStruct()) || objType.hasProperty(pname)) {
                return;
            }
            com.google.javascript.jscomp.Scope s = t.getScope();
            if (obj.isThis() && getJSType(s.getRootNode()).isConstructor()) {
                return;
            }
            com.google.javascript.rhino.Node assgnExp = lvalue.getParent();
            com.google.javascript.rhino.Node assgnStm = assgnExp.getParent();
            if (((objType instanceof com.google.javascript.rhino.jstype.ObjectType) && s.isGlobal()) && com.google.javascript.jscomp.NodeUtil.isPrototypePropertyDeclaration(assgnStm)) {
                com.google.javascript.rhino.jstype.ObjectType instance = objType.toObjectType().getOwnerFunction().getInstanceType();
                java.lang.String file = lvalue.getSourceFileName();
                com.google.javascript.rhino.Node ctor = instance.getConstructor().getSource();
                if ((ctor != null) && ctor.getSourceFileName().equals(file)) {
                    com.google.javascript.rhino.jstype.JSType rvalueType = assgnExp.getLastChild().getJSType();
                    instance.defineInferredProperty(pname, rvalueType, lvalue);
                    return;
                }
            }
            report(t, prop, com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION);
        }
    }

    private void checkPropertyInheritanceOnGetpropAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (object.isGetProp()) {
            com.google.javascript.rhino.Node object2 = object.getFirstChild();
            java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
            if ("prototype".equals(property2)) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object2);
                if (jsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
                    if (functionType.isConstructor() || functionType.isInterface()) {
                        checkDeclaredPropertyInheritance(t, assign, functionType, property, info, propertyType);
                    }
                }
            }
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit, com.google.javascript.rhino.jstype.JSType litType) {
        if (objlit.isFromExterns()) {
            ensureTyped(t, key);
            return;
        }
        if (litType.isStruct() && key.isQuotedString()) {
            report(t, key, com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY, "struct");
        } else if (litType.isDict() && (!key.isQuotedString())) {
            report(t, key, com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY, "dict");
        }
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        com.google.javascript.rhino.jstype.JSType allowedValueType = keyType;
        if (allowedValueType.isEnumElementType()) {
            allowedValueType = allowedValueType.toMaybeEnumElementType().getPrimitiveType();
        }
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!com.google.javascript.jscomp.TypeCheck.propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private static boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getInstanceType().hasProperty(propertyName);
        boolean superClassHasDeclaredProperty = (superClass != null) && superClass.getInstanceType().isPropertyTypeDeclared(propertyName);
        boolean superInterfaceHasProperty = false;
        boolean superInterfaceHasDeclaredProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfaceHasProperty = superInterfaceHasProperty || interfaceType.hasProperty(propertyName);
                superInterfaceHasDeclaredProperty = superInterfaceHasDeclaredProperty || interfaceType.isPropertyTypeDeclared(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.ObjectType topInstanceType = (superClassHasDeclaredProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        boolean declaredLocally = ctorType.isConstructor() && (ctorType.getPrototype().hasOwnProperty(propertyName) || ctorType.getInstanceType().hasOwnProperty(propertyName));
        if (((reportMissingOverride.isOn() && (!declaredOverride)) && superClassHasDeclaredProperty) && declaredLocally) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (superClassHasDeclaredProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getInstanceType().getPropertyType(propertyName);
            com.google.javascript.rhino.jstype.TemplateTypeMap ctorTypeMap = ctorType.getTypeOfThis().getTemplateTypeMap();
            if (!ctorTypeMap.isEmpty()) {
                superClassPropType = superClassPropType.visit(new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(typeRegistry, ctorTypeMap));
            }
            if (!propertyType.isSubtype(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfaceHasDeclaredProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.isSubtype(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (((!foundInterfaceProperty) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if (!rvalueType.isFunctionType()) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if (assign.getLastChild().isFunction() && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.PARAM_LIST)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (childType.isDict()) {
            report(t, property, com.google.javascript.jscomp.TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
        } else if (validator.expectNotNullOrUndefined(t, n, childType, "No properties on this expression", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            checkPropertyAccess(childType, property.getString(), t, n);
        }
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
        if (propType.isEquivalentTo(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            childType = childType.autobox();
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(childType);
            if (objectType != null) {
                if ((!objectType.hasProperty(propName)) || objectType.isEquivalentTo(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                    if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                    } else {
                        checkPropertyAccessHelper(objectType, propName, t, n);
                    }
                }
            } else {
                checkPropertyAccessHelper(childType, propName, t, n);
            }
        }
    }

    private void checkPropertyAccessHelper(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        if (((!objectType.isEmptyType()) && reportMissingProperties) && ((!isPropertyTest(n)) || objectType.isStruct())) {
            if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                com.google.javascript.jscomp.TypeCheck.SuggestionPair pair = getClosestPropertySuggestion(objectType, propName);
                if ((pair != null) && ((pair.distance * 4) < propName.length())) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY_WITH_SUGGESTION, propName, validator.getReadableJSTypeName(n.getFirstChild(), true), pair.suggestion);
                } else {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
                }
            }
        }
    }

    private com.google.javascript.jscomp.TypeCheck.SuggestionPair getClosestPropertySuggestion(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName) {
        if (editDistance == null) {
            return null;
        }
        java.lang.String bestSoFar = null;
        int shortest = java.lang.Integer.MAX_VALUE;
        if (objectType instanceof com.google.javascript.rhino.jstype.ObjectType) {
            com.google.javascript.rhino.jstype.ObjectType type = ((com.google.javascript.rhino.jstype.ObjectType) (objectType));
            for (java.lang.String alt : type.getPropertyNames()) {
                int distance;
                try {
                    distance = ((java.lang.Integer) (editDistance.invoke(null, propName, alt, false)));
                } catch (java.lang.Exception e) {
                    return null;
                }
                if (distance <= shortest) {
                    if (distance == shortest) {
                        if ((bestSoFar != null) && (alt.compareToIgnoreCase(bestSoFar) > 0)) {
                            continue;
                        }
                    }
                    shortest = distance;
                    bestSoFar = alt;
                }
            }
        } else if (objectType.isUnionType()) {
            com.google.javascript.rhino.jstype.UnionType type = ((com.google.javascript.rhino.jstype.UnionType) (objectType));
            for (com.google.javascript.rhino.jstype.JSType alt : type.getAlternates()) {
                com.google.javascript.jscomp.TypeCheck.SuggestionPair pair = getClosestPropertySuggestion(alt, propName);
                if (pair != null) {
                    if (pair.distance <= shortest) {
                        if (pair.distance == shortest) {
                            if ((bestSoFar != null) && (pair.suggestion.compareToIgnoreCase(bestSoFar) > 0)) {
                                continue;
                            }
                        }
                        shortest = pair.distance;
                        bestSoFar = pair.suggestion;
                    }
                }
            }
        }
        if (bestSoFar != null) {
            return new com.google.javascript.jscomp.TypeCheck.SuggestionPair(bestSoFar, shortest);
        }
        return null;
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return parent.getParent().isOr() && (parent.getParent().getFirstChild() == parent);
            case com.google.javascript.rhino.Token.CAST :
                return isPropertyTest(parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        validator.expectIndexMatch(t, n, getJSType(n.getFirstChild()), getJSType(n.getLastChild()));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                checkEnumAlias(t, info, value);
                if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
        if ((type.isConstructor() || type.isEmptyType()) || type.isUnknownType()) {
            com.google.javascript.rhino.jstype.FunctionType fnType = type.toMaybeFunctionType();
            if (fnType != null) {
                visitParameterList(t, n, fnType);
                ensureTyped(t, n, fnType.getInstanceType());
            } else {
                ensureTyped(t, n);
            }
        } else {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        com.google.javascript.rhino.jstype.ObjectType implicitProto = interfaceType.getImplicitPrototype();
        java.util.Set<java.lang.String> currentPropertyNames;
        if (implicitProto == null) {
            currentPropertyNames = com.google.common.collect.ImmutableSet.of();
        } else {
            currentPropertyNames = implicitProto.getOwnPropertyNames();
        }
        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(n.getJSType());
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getSuperClassConstructor();
            if (((baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE)) && (baseConstructor != null)) && baseConstructor.isInterface()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, "constructor", functionPrivateName));
            } else {
                if (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE)) {
                    com.google.javascript.rhino.jstype.ObjectType proto = functionType.getPrototype();
                    if (functionType.makesStructs() && (!proto.isStruct())) {
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, "struct", functionPrivateName));
                    } else if (functionType.makesDicts() && (!proto.isDict())) {
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, "dict", functionPrivateName));
                    }
                }
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, "interface", functionPrivateName));
                }
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = childType.toMaybeFunctionType();
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if ((functionJSDocInfo != null) && (functionJSDocInfo.getAssociatedNode() != null)) {
                isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!((functionType.getTypeOfThis().toObjectType() != null) && functionType.getTypeOfThis().toObjectType().isNativeObjectType()))) && (!(child.isGetElem() || child.isGetProp()))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(t.getEnclosingFunction());
        if (jsType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                actualReturnType = getJSType(valueNode);
            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumAlias(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.JSDocInfo declInfo, com.google.javascript.rhino.Node value) {
        if ((declInfo == null) || (!declInfo.hasEnumParameterType())) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
        if (!valueType.isEnumType()) {
            return;
        }
        com.google.javascript.rhino.jstype.EnumType valueEnumType = valueType.toMaybeEnumType();
        com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), "incompatible enum element types");
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else {
            return jsType;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((!n.isFunction()) || type.isFunctionType()) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.isGetProp()) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        return total == 0 ? 0.0 : (100.0 * typedCount) / total;
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[514914] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659896155604
GPR[SSUN]-1659896155604
-1797850673
GPR[SPVATF]-1659896155884
GPR[EPVATF]-1659896158331
GPR[SPS]-1659896158331
[518344] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:647.
GPR[EPS]-1659896159034
GPR[SPVATF]-1659896159034
GPR[EPVATF]-1659896161504
GPR[SPS]-1659896161504
[521468] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:647.
GPR[EPS]-1659896162158
GPR[ESUN]-1659896162158
GPR[SSUN]-1659896162158
-1797850673
GPR[SPVATF]-1659896162430
GPR[EPVATF]-1659896165095
GPR[SPS]-1659896165095
[524841] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY_WITH_SUGGESTION = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}. Did you mean {2}?");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_SHAPE_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_SHAPE_TYPE", "{1} cannot extend this type; {0}s can only extend {0}s");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{1} cannot extend this type; {0}s can only extend {0}s");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticType IN_USED_WITH_STRUCT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IN_USED_WITH_STRUCT", "Cannot use the IN operator with structs");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_PROPERTY_CREATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_PROPERTY_CREATION", "Cannot add a property to a struct instance " + "after it is constructed.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_OBJLIT_KEY = com.google.javascript.jscomp.DiagnosticType.warning("ILLEGAL_OBJLIT_KEY", "Illegal key, the object literal is a {0}");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION, com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.MemoizedScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final boolean reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    private java.lang.reflect.Method editDistance;

    private static final class SuggestionPair {
        private final java.lang.String suggestion;

        final int distance;

        private SuggestionPair(java.lang.String suggestion, int distance) {
            this.suggestion = suggestion;
            this.distance = distance;
        }
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.MemoizedScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = ((com.google.javascript.jscomp.Compiler) (compiler)).getOptions().enables(com.google.javascript.jscomp.DiagnosticGroups.REPORT_UNKNOWN_TYPES);
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
        java.lang.ClassLoader classLoader = com.google.javascript.jscomp.TypeCheck.class.getClassLoader();
        try {
            java.lang.Class<?> c = classLoader.loadClass("com.google.common.string.EditDistance");
            editDistance = c.getDeclaredMethod("getEditDistance", java.lang.String.class, java.lang.String.class, boolean.class);
        } catch (java.lang.Exception ignored) {
            editDistance = null;
        }
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CAST :
                com.google.javascript.rhino.Node expr = n.getFirstChild();
                com.google.javascript.rhino.jstype.JSType exprType = getJSType(expr);
                com.google.javascript.rhino.jstype.JSType castType = getJSType(n);
                if (!expr.isObjectLit()) {
                    validator.expectCanCast(t, n, castType, exprType);
                }
                ensureTyped(t, n, castType);
                if (castType.isSubtype(exprType) || expr.isObjectLit()) {
                    expr.setJSType(castType);
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !(parent.isAssign() && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !parent.isExprResult();
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                checkPropCreation(t, left);
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    left = n.getFirstChild();
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(58).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("typeable",typeable);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION",com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT",com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY_WITH_SUGGESTION",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY_WITH_SUGGESTION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY",com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.editDistance",com.google.javascript.jscomp.TypeCheck.this.editDistance);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(58).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        right = n.getLastChild();

                    if (left.isTypeOf()) {
                        if (right.isString()) {
                            checkTypeofString(t, right, right.getString());
                        }
                    } else if (right.isTypeOf() && left.isString()) {
                        checkTypeofString(t, left, left.getString());
                    }
                    leftType = getJSType(left);
                    rightType = getJSType(right);
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    if ((n.getType() == com.google.javascript.rhino.Token.EQ) || (n.getType() == com.google.javascript.rhino.Token.NE)) {
                        result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                        if (n.isNE()) {
                            result = result.not();
                        }
                    } else if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        result = (n.getType() == com.google.javascript.rhino.Token.SHEQ) ? com.google.javascript.rhino.jstype.TernaryValue.FALSE : com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                    }
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                rightType = getJSType(right);
                validator.expectString(t, left, getJSType(left), "left side of 'in'");
                validator.expectObject(t, n, rightType, "'in' requires an object");
                if (rightType.isStruct()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT);
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, getJSType(left), "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                checkPropCreation(t, n.getFirstChild());
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    com.google.javascript.rhino.Node obj = n.getChildAtIndex(1);
                    if (getJSType(obj).isStruct()) {
                        report(t, obj, com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT);
                    }
                }
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if (n.isObjectLit() && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.isObjectLit()) {
                    com.google.javascript.rhino.jstype.JSType typ = getJSType(n);
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n, typ);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void checkTypeofString(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String s) {
        if (!((((((s.equals("number") || s.equals("string")) || s.equals("boolean")) || s.equals("undefined")) || s.equals("function")) || s.equals("object")) || s.equals("unknown"))) {
            validator.expectValidTypeofName(t, n, s);
        }
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            com.google.javascript.rhino.Node property = lvalue.getLastChild();
            java.lang.String pname = property.getString();
            if (object.isGetProp()) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, pname, lvalue, rvalue);
                }
            }
            checkEnumAlias(t, info, rvalue);
            checkPropCreation(t, lvalue);
            if (pname.equals("prototype")) {
                if ((objectJsType != null) && objectJsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = objectJsType.toMaybeFunctionType();
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                        if (functionType.makesStructs() && (!rvalueType.isStruct())) {
                            java.lang.String funName = functionType.getTypeOfThis().toString();
                            compiler.report(t.makeError(assign, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, "struct", funName));
                        }
                        return;
                    }
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(pname) && (!type.isPropertyTypeInferred(pname))) && (!com.google.javascript.jscomp.TypeCheck.propertyIsImplicitCast(type, pname))) {
                    com.google.javascript.rhino.jstype.JSType expectedType = type.getPropertyType(pname);
                    if (!expectedType.isUnknownType()) {
                        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), expectedType, object, pname);
                        checkPropertyInheritanceOnGetpropAssign(t, assign, object, pname, info, expectedType);
                        return;
                    }
                }
            }
            checkPropertyInheritanceOnGetpropAssign(t, assign, object, pname, info, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        if (lvalue.isQualifiedName()) {
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getQualifiedName());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
                if (com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(lvalue).isThis() && (t.getScope() != var.getScope())) {
                    return;
                }
                if (var.getType() != null) {
                    leftType = var.getType();
                }
            }
        }
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void checkPropCreation(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node lvalue) {
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node obj = lvalue.getFirstChild();
            com.google.javascript.rhino.Node prop = lvalue.getLastChild();
            com.google.javascript.rhino.jstype.JSType objType = getJSType(obj);
            java.lang.String pname = prop.getString();
            if ((!objType.isStruct()) || objType.hasProperty(pname)) {
                return;
            }
            com.google.javascript.jscomp.Scope s = t.getScope();
            if (obj.isThis() && getJSType(s.getRootNode()).isConstructor()) {
                return;
            }
            com.google.javascript.rhino.Node assgnExp = lvalue.getParent();
            com.google.javascript.rhino.Node assgnStm = assgnExp.getParent();
            if (((objType instanceof com.google.javascript.rhino.jstype.ObjectType) && s.isGlobal()) && com.google.javascript.jscomp.NodeUtil.isPrototypePropertyDeclaration(assgnStm)) {
                com.google.javascript.rhino.jstype.ObjectType instance = objType.toObjectType().getOwnerFunction().getInstanceType();
                java.lang.String file = lvalue.getSourceFileName();
                com.google.javascript.rhino.Node ctor = instance.getConstructor().getSource();
                if ((ctor != null) && ctor.getSourceFileName().equals(file)) {
                    com.google.javascript.rhino.jstype.JSType rvalueType = assgnExp.getLastChild().getJSType();
                    instance.defineInferredProperty(pname, rvalueType, lvalue);
                    return;
                }
            }
            report(t, prop, com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION);
        }
    }

    private void checkPropertyInheritanceOnGetpropAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (object.isGetProp()) {
            com.google.javascript.rhino.Node object2 = object.getFirstChild();
            java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
            if ("prototype".equals(property2)) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object2);
                if (jsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
                    if (functionType.isConstructor() || functionType.isInterface()) {
                        checkDeclaredPropertyInheritance(t, assign, functionType, property, info, propertyType);
                    }
                }
            }
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit, com.google.javascript.rhino.jstype.JSType litType) {
        if (objlit.isFromExterns()) {
            ensureTyped(t, key);
            return;
        }
        if (litType.isStruct() && key.isQuotedString()) {
            report(t, key, com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY, "struct");
        } else if (litType.isDict() && (!key.isQuotedString())) {
            report(t, key, com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY, "dict");
        }
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        com.google.javascript.rhino.jstype.JSType allowedValueType = keyType;
        if (allowedValueType.isEnumElementType()) {
            allowedValueType = allowedValueType.toMaybeEnumElementType().getPrimitiveType();
        }
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!com.google.javascript.jscomp.TypeCheck.propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private static boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getInstanceType().hasProperty(propertyName);
        boolean superClassHasDeclaredProperty = (superClass != null) && superClass.getInstanceType().isPropertyTypeDeclared(propertyName);
        boolean superInterfaceHasProperty = false;
        boolean superInterfaceHasDeclaredProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfaceHasProperty = superInterfaceHasProperty || interfaceType.hasProperty(propertyName);
                superInterfaceHasDeclaredProperty = superInterfaceHasDeclaredProperty || interfaceType.isPropertyTypeDeclared(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.ObjectType topInstanceType = (superClassHasDeclaredProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        boolean declaredLocally = ctorType.isConstructor() && (ctorType.getPrototype().hasOwnProperty(propertyName) || ctorType.getInstanceType().hasOwnProperty(propertyName));
        if (((reportMissingOverride.isOn() && (!declaredOverride)) && superClassHasDeclaredProperty) && declaredLocally) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (superClassHasDeclaredProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getInstanceType().getPropertyType(propertyName);
            com.google.javascript.rhino.jstype.TemplateTypeMap ctorTypeMap = ctorType.getTypeOfThis().getTemplateTypeMap();
            if (!ctorTypeMap.isEmpty()) {
                superClassPropType = superClassPropType.visit(new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(typeRegistry, ctorTypeMap));
            }
            if (!propertyType.isSubtype(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfaceHasDeclaredProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.isSubtype(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (((!foundInterfaceProperty) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if (!rvalueType.isFunctionType()) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if (assign.getLastChild().isFunction() && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.PARAM_LIST)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (childType.isDict()) {
            report(t, property, com.google.javascript.jscomp.TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
        } else if (validator.expectNotNullOrUndefined(t, n, childType, "No properties on this expression", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            checkPropertyAccess(childType, property.getString(), t, n);
        }
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
        if (propType.isEquivalentTo(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            childType = childType.autobox();
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(childType);
            if (objectType != null) {
                if ((!objectType.hasProperty(propName)) || objectType.isEquivalentTo(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                    if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                    } else {
                        checkPropertyAccessHelper(objectType, propName, t, n);
                    }
                }
            } else {
                checkPropertyAccessHelper(childType, propName, t, n);
            }
        }
    }

    private void checkPropertyAccessHelper(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        if (((!objectType.isEmptyType()) && reportMissingProperties) && ((!isPropertyTest(n)) || objectType.isStruct())) {
            if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                com.google.javascript.jscomp.TypeCheck.SuggestionPair pair = getClosestPropertySuggestion(objectType, propName);
                if ((pair != null) && ((pair.distance * 4) < propName.length())) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY_WITH_SUGGESTION, propName, validator.getReadableJSTypeName(n.getFirstChild(), true), pair.suggestion);
                } else {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
                }
            }
        }
    }

    private com.google.javascript.jscomp.TypeCheck.SuggestionPair getClosestPropertySuggestion(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName) {
        if (editDistance == null) {
            return null;
        }
        java.lang.String bestSoFar = null;
        int shortest = java.lang.Integer.MAX_VALUE;
        if (objectType instanceof com.google.javascript.rhino.jstype.ObjectType) {
            com.google.javascript.rhino.jstype.ObjectType type = ((com.google.javascript.rhino.jstype.ObjectType) (objectType));
            for (java.lang.String alt : type.getPropertyNames()) {
                int distance;
                try {
                    distance = ((java.lang.Integer) (editDistance.invoke(null, propName, alt, false)));
                } catch (java.lang.Exception e) {
                    return null;
                }
                if (distance <= shortest) {
                    if (distance == shortest) {
                        if ((bestSoFar != null) && (alt.compareToIgnoreCase(bestSoFar) > 0)) {
                            continue;
                        }
                    }
                    shortest = distance;
                    bestSoFar = alt;
                }
            }
        } else if (objectType.isUnionType()) {
            com.google.javascript.rhino.jstype.UnionType type = ((com.google.javascript.rhino.jstype.UnionType) (objectType));
            for (com.google.javascript.rhino.jstype.JSType alt : type.getAlternates()) {
                com.google.javascript.jscomp.TypeCheck.SuggestionPair pair = getClosestPropertySuggestion(alt, propName);
                if (pair != null) {
                    if (pair.distance <= shortest) {
                        if (pair.distance == shortest) {
                            if ((bestSoFar != null) && (pair.suggestion.compareToIgnoreCase(bestSoFar) > 0)) {
                                continue;
                            }
                        }
                        shortest = pair.distance;
                        bestSoFar = pair.suggestion;
                    }
                }
            }
        }
        if (bestSoFar != null) {
            return new com.google.javascript.jscomp.TypeCheck.SuggestionPair(bestSoFar, shortest);
        }
        return null;
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return parent.getParent().isOr() && (parent.getParent().getFirstChild() == parent);
            case com.google.javascript.rhino.Token.CAST :
                return isPropertyTest(parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        validator.expectIndexMatch(t, n, getJSType(n.getFirstChild()), getJSType(n.getLastChild()));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                checkEnumAlias(t, info, value);
                if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
        if ((type.isConstructor() || type.isEmptyType()) || type.isUnknownType()) {
            com.google.javascript.rhino.jstype.FunctionType fnType = type.toMaybeFunctionType();
            if (fnType != null) {
                visitParameterList(t, n, fnType);
                ensureTyped(t, n, fnType.getInstanceType());
            } else {
                ensureTyped(t, n);
            }
        } else {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        com.google.javascript.rhino.jstype.ObjectType implicitProto = interfaceType.getImplicitPrototype();
        java.util.Set<java.lang.String> currentPropertyNames;
        if (implicitProto == null) {
            currentPropertyNames = com.google.common.collect.ImmutableSet.of();
        } else {
            currentPropertyNames = implicitProto.getOwnPropertyNames();
        }
        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(n.getJSType());
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getSuperClassConstructor();
            if (((baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE)) && (baseConstructor != null)) && baseConstructor.isInterface()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, "constructor", functionPrivateName));
            } else {
                if (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE)) {
                    com.google.javascript.rhino.jstype.ObjectType proto = functionType.getPrototype();
                    if (functionType.makesStructs() && (!proto.isStruct())) {
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, "struct", functionPrivateName));
                    } else if (functionType.makesDicts() && (!proto.isDict())) {
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, "dict", functionPrivateName));
                    }
                }
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, "interface", functionPrivateName));
                }
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = childType.toMaybeFunctionType();
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if ((functionJSDocInfo != null) && (functionJSDocInfo.getAssociatedNode() != null)) {
                isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!((functionType.getTypeOfThis().toObjectType() != null) && functionType.getTypeOfThis().toObjectType().isNativeObjectType()))) && (!(child.isGetElem() || child.isGetProp()))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(t.getEnclosingFunction());
        if (jsType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                actualReturnType = getJSType(valueNode);
            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumAlias(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.JSDocInfo declInfo, com.google.javascript.rhino.Node value) {
        if ((declInfo == null) || (!declInfo.hasEnumParameterType())) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
        if (!valueType.isEnumType()) {
            return;
        }
        com.google.javascript.rhino.jstype.EnumType valueEnumType = valueType.toMaybeEnumType();
        com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), "incompatible enum element types");
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else {
            return jsType;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((!n.isFunction()) || type.isFunctionType()) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.isGetProp()) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        return total == 0 ? 0.0 : (100.0 * typedCount) / total;
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[524842] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659896165532
GPR[SSUN]-1659896165532
-1797850673
GPR[SPVATF]-1659896165824
GPR[EPVATF]-1659896168550
GPR[SPS]-1659896168550
[528297] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TypeCheck implements com.google.javascript.jscomp.NodeTraversal.Callback , com.google.javascript.jscomp.CompilerPass {
    static final com.google.javascript.jscomp.DiagnosticType UNEXPECTED_TOKEN = com.google.javascript.jscomp.DiagnosticType.error("JSC_INTERNAL_ERROR_UNEXPECTED_TOKEN", "Internal Error: Don't know how to handle {0}");

    protected static final java.lang.String OVERRIDING_PROTOTYPE_WITH_NON_OBJECT = "overriding prototype with non-object";

    static final com.google.javascript.jscomp.DiagnosticType DETERMINISTIC_TEST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_DETERMINISTIC_TEST", "condition always evaluates to {2}\n" + ("left : {0}\n" + "right: {1}"));

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_ENUM_ELEMENT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTENT_ENUM_ELEMENT", "element {0} does not exist on this enum");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTENT_PROPERTY_WITH_SUGGESTION = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_INEXISTENT_PROPERTY", "Property {0} never defined on {1}. Did you mean {2}?");

    protected static final com.google.javascript.jscomp.DiagnosticType NOT_A_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_A_CONSTRUCTOR", "cannot instantiate non-constructor");

    static final com.google.javascript.jscomp.DiagnosticType BIT_OPERATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_BAD_TYPE_FOR_BIT_OPERATION", "operator {0} cannot be applied to {1}");

    static final com.google.javascript.jscomp.DiagnosticType NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_NOT_FUNCTION_TYPE", "{0} expressions are not callable");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_NOT_CALLABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_NOT_CALLABLE", "Constructor {0} should be called with the \"new\" keyword");

    static final com.google.javascript.jscomp.DiagnosticType FUNCTION_MASKS_VARIABLE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_FUNCTION_MASKS_VARIABLE", "function {0} masks variable (IE bug)");

    static final com.google.javascript.jscomp.DiagnosticType MULTIPLE_VAR_DEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_MULTIPLE_VAR_DEF", "declaration of multiple variables with shared type information");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_DUP = com.google.javascript.jscomp.DiagnosticType.error("JSC_ENUM_DUP", "enum element {0} already defined");

    static final com.google.javascript.jscomp.DiagnosticType ENUM_NOT_CONSTANT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ENUM_NOT_CONSTANT", "enum key {0} must be a syntactic constant");

    static final com.google.javascript.jscomp.DiagnosticType INVALID_INTERFACE_MEMBER_DECLARATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INVALID_INTERFACE_MEMBER_DECLARATION", "interface members can only be empty property declarations," + " empty functions{0}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_FUNCTION_NOT_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_FUNCTION_NOT_EMPTY", "interface member functions must have an empty body");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_SHAPE_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_SHAPE_TYPE", "{1} cannot extend this type; {0}s can only extend {0}s");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_EXTENDED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_EXTENDED_TYPE", "{1} cannot extend this type; {0}s can only extend {0}s");

    static final com.google.javascript.jscomp.DiagnosticType CONFLICTING_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONFLICTING_IMPLEMENTED_TYPE", "{0} cannot implement this type; " + "an interface can only extend, but not implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType BAD_IMPLEMENTED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_NON_INTERFACE", "can only implement interfaces");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY", "property {0} already defined on superclass {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_INTERFACE_PROPERTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_INTERFACE_PROPERTY", "property {0} already defined on interface {1}; " + "use @override to override it");

    static final com.google.javascript.jscomp.DiagnosticType HIDDEN_SUPERCLASS_PROPERTY_MISMATCH = com.google.javascript.jscomp.DiagnosticType.warning("JSC_HIDDEN_SUPERCLASS_PROPERTY_MISMATCH", "mismatch of the {0} property type and the type " + (("of the property it overrides from superclass {1}\n" + "original: {2}\n") + "override: {3}"));

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNKNOWN_OVERRIDE", "property {0} not defined on any superclass of {1}");

    static final com.google.javascript.jscomp.DiagnosticType INTERFACE_METHOD_OVERRIDE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INTERFACE_METHOD_OVERRIDE", "property {0} is already defined by the {1} extended interface");

    static final com.google.javascript.jscomp.DiagnosticType UNKNOWN_EXPR_TYPE = com.google.javascript.jscomp.DiagnosticType.disabled("JSC_UNKNOWN_EXPR_TYPE", "could not determine the type of this expression");

    static final com.google.javascript.jscomp.DiagnosticType UNRESOLVED_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_UNRESOLVED_TYPE", "could not resolve the name {0} to a type");

    static final com.google.javascript.jscomp.DiagnosticType WRONG_ARGUMENT_COUNT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_WRONG_ARGUMENT_COUNT", "Function {0}: called with {1} argument(s). " + "Function requires at least {2} argument(s){3}.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_IMPLICIT_CAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_IMPLICIT_CAST", "Illegal annotation on {0}. @implicitCast may only be used in " + "externs.");

    static final com.google.javascript.jscomp.DiagnosticType INCOMPATIBLE_EXTENDED_PROPERTY_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INCOMPATIBLE_EXTENDED_PROPERTY_TYPE", "Interface {0} has a property {1} with incompatible types in " + "its super interfaces {2} and {3}");

    static final com.google.javascript.jscomp.DiagnosticType EXPECTED_THIS_TYPE = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXPECTED_THIS_TYPE", "\"{0}\" must be called with a \"this\" type");

    static final com.google.javascript.jscomp.DiagnosticType IN_USED_WITH_STRUCT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IN_USED_WITH_STRUCT", "Cannot use the IN operator with structs");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_PROPERTY_CREATION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_ILLEGAL_PROPERTY_CREATION", "Cannot add a property to a struct instance " + "after it is constructed.");

    static final com.google.javascript.jscomp.DiagnosticType ILLEGAL_OBJLIT_KEY = com.google.javascript.jscomp.DiagnosticType.warning("ILLEGAL_OBJLIT_KEY", "Illegal key, the object literal is a {0}");

    static final com.google.javascript.jscomp.DiagnosticGroup ALL_DIAGNOSTICS = new com.google.javascript.jscomp.DiagnosticGroup(com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF, com.google.javascript.jscomp.TypeCheck.ENUM_DUP, com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE, com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT, com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION, com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY, com.google.javascript.jscomp.RhinoErrorReporter.TYPE_PARSE_ERROR, com.google.javascript.jscomp.TypedScopeCreator.UNKNOWN_LENDS, com.google.javascript.jscomp.TypedScopeCreator.LENDS_ON_NON_OBJECT, com.google.javascript.jscomp.TypedScopeCreator.CTOR_INITIALIZER, com.google.javascript.jscomp.TypedScopeCreator.IFACE_INITIALIZER, com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.TypeValidator validator;

    private final com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private com.google.javascript.jscomp.Scope topScope;

    private com.google.javascript.jscomp.MemoizedScopeCreator scopeCreator;

    private final com.google.javascript.jscomp.CheckLevel reportMissingOverride;

    private final boolean reportUnknownTypes;

    private boolean reportMissingProperties = true;

    private com.google.javascript.jscomp.InferJSDocInfo inferJSDocInfo = null;

    private int typedCount = 0;

    private int nullCount = 0;

    private int unknownCount = 0;

    private boolean inExterns;

    private int noTypeCheckSection = 0;

    private java.lang.reflect.Method editDistance;

    private static final class SuggestionPair {
        private final java.lang.String suggestion;

        final int distance;

        private SuggestionPair(java.lang.String suggestion, int distance) {
            this.suggestion = suggestion;
            this.distance = distance;
        }
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.Scope topScope, com.google.javascript.jscomp.MemoizedScopeCreator scopeCreator, com.google.javascript.jscomp.CheckLevel reportMissingOverride) {
        this.compiler = compiler;
        this.validator = compiler.getTypeValidator();
        this.reverseInterpreter = reverseInterpreter;
        this.typeRegistry = typeRegistry;
        this.topScope = topScope;
        this.scopeCreator = scopeCreator;
        this.reportMissingOverride = reportMissingOverride;
        this.reportUnknownTypes = ((com.google.javascript.jscomp.Compiler) (compiler)).getOptions().enables(com.google.javascript.jscomp.DiagnosticGroups.REPORT_UNKNOWN_TYPES);
        this.inferJSDocInfo = new com.google.javascript.jscomp.InferJSDocInfo(compiler);
        java.lang.ClassLoader classLoader = com.google.javascript.jscomp.TypeCheck.class.getClassLoader();
        try {
            java.lang.Class<?> c = classLoader.loadClass("com.google.common.string.EditDistance");
            editDistance = c.getDeclaredMethod("getEditDistance", java.lang.String.class, java.lang.String.class, boolean.class);
        } catch (java.lang.Exception ignored) {
            editDistance = null;
        }
    }

    public TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry, com.google.javascript.jscomp.CheckLevel reportMissingOverride) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, reportMissingOverride);
    }

    TypeCheck(com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseInterpreter, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        this(compiler, reverseInterpreter, typeRegistry, null, null, com.google.javascript.jscomp.CheckLevel.WARNING);
    }

    com.google.javascript.jscomp.TypeCheck reportMissingProperties(boolean report) {
        reportMissingProperties = report;
        return this;
    }

    @java.lang.Override
    public void process(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkNotNull(scopeCreator);
        com.google.common.base.Preconditions.checkNotNull(topScope);
        com.google.javascript.rhino.Node externsAndJs = jsRoot.getParent();
        com.google.common.base.Preconditions.checkState(externsAndJs != null);
        com.google.common.base.Preconditions.checkState((externsRoot == null) || externsAndJs.hasChild(externsRoot));
        if (externsRoot != null) {
            check(externsRoot, true);
        }
        check(jsRoot, false);
    }

    public com.google.javascript.jscomp.Scope processForTesting(com.google.javascript.rhino.Node externsRoot, com.google.javascript.rhino.Node jsRoot) {
        com.google.common.base.Preconditions.checkState(scopeCreator == null);
        com.google.common.base.Preconditions.checkState(topScope == null);
        com.google.common.base.Preconditions.checkState(jsRoot.getParent() != null);
        com.google.javascript.rhino.Node externsAndJsRoot = jsRoot.getParent();
        scopeCreator = new com.google.javascript.jscomp.MemoizedScopeCreator(new com.google.javascript.jscomp.TypedScopeCreator(compiler));
        topScope = scopeCreator.createScope(externsAndJsRoot, null);
        com.google.javascript.jscomp.TypeInferencePass inference = new com.google.javascript.jscomp.TypeInferencePass(compiler, reverseInterpreter, topScope, scopeCreator);
        inference.process(externsRoot, jsRoot);
        process(externsRoot, jsRoot);
        return topScope;
    }

    public void check(com.google.javascript.rhino.Node node, boolean externs) {
        com.google.common.base.Preconditions.checkNotNull(node);
        com.google.javascript.jscomp.NodeTraversal t = new com.google.javascript.jscomp.NodeTraversal(compiler, this, scopeCreator);
        inExterns = externs;
        t.traverseWithScope(node, topScope);
        if (externs) {
            inferJSDocInfo.process(node, null);
        } else {
            inferJSDocInfo.process(null, node);
        }
    }

    private void checkNoTypeCheckSection(com.google.javascript.rhino.Node n, boolean enterSection) {
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.VAR :
            case com.google.javascript.rhino.Token.FUNCTION :
            case com.google.javascript.rhino.Token.ASSIGN :
                com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
                if ((info != null) && info.isNoTypeCheck()) {
                    if (enterSection) {
                        noTypeCheckSection++;
                    } else {
                        noTypeCheckSection--;
                    }
                }
                validator.setShouldReport(noTypeCheckSection == 0);
                break;
        }
    }

    private void report(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.jscomp.DiagnosticType diagnosticType, java.lang.String... arguments) {
        if (noTypeCheckSection == 0) {
            t.report(n, diagnosticType, arguments);
        }
    }

    @java.lang.Override
    public boolean shouldTraverse(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        checkNoTypeCheckSection(n, true);
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.FUNCTION :
                final com.google.javascript.jscomp.Scope outerScope = t.getScope();
                final java.lang.String functionPrivateName = n.getFirstChild().getString();
                if ((((functionPrivateName != null) && (functionPrivateName.length() > 0)) && outerScope.isDeclared(functionPrivateName, false)) && (!(outerScope.getVar(functionPrivateName).getType() instanceof com.google.javascript.rhino.jstype.FunctionType))) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE, functionPrivateName);
                }
                break;
        }
        return true;
    }

    @java.lang.Override
    public void visit(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.jstype.JSType childType;
        com.google.javascript.rhino.jstype.JSType leftType;
        com.google.javascript.rhino.jstype.JSType rightType;
        com.google.javascript.rhino.Node left;
        com.google.javascript.rhino.Node right;
        boolean typeable = true;
        switch (n.getType()) {
            case com.google.javascript.rhino.Token.CAST :
                com.google.javascript.rhino.Node expr = n.getFirstChild();
                com.google.javascript.rhino.jstype.JSType exprType = getJSType(expr);
                com.google.javascript.rhino.jstype.JSType castType = getJSType(n);
                if (!expr.isObjectLit()) {
                    validator.expectCanCast(t, n, castType, exprType);
                }
                ensureTyped(t, n, castType);
                if (castType.isSubtype(exprType) || expr.isObjectLit()) {
                    expr.setJSType(castType);
                }
                break;
            case com.google.javascript.rhino.Token.NAME :
                typeable = visitName(t, n, parent);
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.COMMA :
                ensureTyped(t, n, getJSType(n.getLastChild()));
                break;
            case com.google.javascript.rhino.Token.TRUE :
            case com.google.javascript.rhino.Token.FALSE :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.THIS :
                ensureTyped(t, n, t.getScope().getTypeOfThis());
                break;
            case com.google.javascript.rhino.Token.NULL :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE);
                break;
            case com.google.javascript.rhino.Token.REGEXP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                visitGetProp(t, n, parent);
                typeable = !(parent.isAssign() && (parent.getFirstChild() == n));
                break;
            case com.google.javascript.rhino.Token.GETELEM :
                visitGetElem(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.VAR :
                visitVar(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.NEW :
                visitNew(t, n);
                break;
            case com.google.javascript.rhino.Token.CALL :
                visitCall(t, n);
                typeable = !parent.isExprResult();
                break;
            case com.google.javascript.rhino.Token.RETURN :
                visitReturn(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DEC :
            case com.google.javascript.rhino.Token.INC :
                left = n.getFirstChild();
                checkPropCreation(t, left);
                validator.expectNumber(t, left, getJSType(left), "increment/decrement");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.NOT :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.VOID :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE);
                break;
            case com.google.javascript.rhino.Token.BITNOT :
                childType = getJSType(n.getFirstChild());
                if (!childType.matchesInt32Context()) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), childType.toString());
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.POS :
            case com.google.javascript.rhino.Token.NEG :
                left = n.getFirstChild();
                validator.expectNumber(t, left, getJSType(left), "sign operator");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE);
                break;
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
                {
                    boolean spoonDefaultValue = false;
                    try {
                        spoonDefaultValue = true;
                    } catch (java.lang.Exception __NopolProcessorException) {
                    }
                    boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                    if (fr.inria.lille.commons.trace.RuntimeValues.instance(59).isEnabled()) {
                        fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectionStarts();
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("parent",parent);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST",com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride",com.google.javascript.jscomp.TypeCheck.this.reportMissingOverride);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT",com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.typeRegistry",com.google.javascript.jscomp.TypeCheck.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.typedCount",com.google.javascript.jscomp.TypeCheck.this.typedCount);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE",com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.nullCount",com.google.javascript.jscomp.TypeCheck.this.nullCount);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.inExterns",com.google.javascript.jscomp.TypeCheck.this.inExterns);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS",com.google.javascript.jscomp.TypeCheck.ALL_DIAGNOSTICS);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("typeable",typeable);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT",com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE",com.google.javascript.jscomp.TypeCheck.FUNCTION_MASKS_VARIABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION",com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY",com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR",com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF",com.google.javascript.jscomp.TypeCheck.MULTIPLE_VAR_DEF);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE",com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter",com.google.javascript.jscomp.TypeCheck.this.reverseInterpreter);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST",com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.BIT_OPERATION",com.google.javascript.jscomp.TypeCheck.BIT_OPERATION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT",com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY_WITH_SUGGESTION",com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY_WITH_SUGGESTION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE",com.google.javascript.jscomp.TypeCheck.INTERFACE_METHOD_OVERRIDE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT",com.google.javascript.jscomp.TypeCheck.ENUM_NOT_CONSTANT);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY",com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.compiler",com.google.javascript.jscomp.TypeCheck.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE",com.google.javascript.jscomp.TypeCheck.UNRESOLVED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.ENUM_DUP",com.google.javascript.jscomp.TypeCheck.ENUM_DUP);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.scopeCreator",com.google.javascript.jscomp.TypeCheck.this.scopeCreator);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY",com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION",com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.validator",com.google.javascript.jscomp.TypeCheck.this.validator);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection",com.google.javascript.jscomp.TypeCheck.this.noTypeCheckSection);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties",com.google.javascript.jscomp.TypeCheck.this.reportMissingProperties);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo",com.google.javascript.jscomp.TypeCheck.this.inferJSDocInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.topScope",com.google.javascript.jscomp.TypeCheck.this.topScope);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE",com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN",com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE",com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("t",t);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE",com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes",com.google.javascript.jscomp.TypeCheck.this.reportUnknownTypes);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.editDistance",com.google.javascript.jscomp.TypeCheck.this.editDistance);} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectInput("com.google.javascript.jscomp.TypeCheck.this.unknownCount",com.google.javascript.jscomp.TypeCheck.this.unknownCount);} catch (Exception ex1) {ex1.printStackTrace();};
                        fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectOutput(runtimeAngelicValue);
                        fr.inria.lille.commons.trace.RuntimeValues.instance(59).collectionEnds();
                    }
                    if (runtimeAngelicValue)
                        left = n.getFirstChild();

                    right = n.getLastChild();
                    if (left.isTypeOf()) {
                        if (right.isString()) {
                            checkTypeofString(t, right, right.getString());
                        }
                    } else if (right.isTypeOf() && left.isString()) {
                        checkTypeofString(t, left, left.getString());
                    }
                    leftType = getJSType(left);
                    rightType = getJSType(right);
                    com.google.javascript.rhino.jstype.JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
                    com.google.javascript.rhino.jstype.TernaryValue result = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
                    if ((n.getType() == com.google.javascript.rhino.Token.EQ) || (n.getType() == com.google.javascript.rhino.Token.NE)) {
                        result = leftTypeRestricted.testForEquality(rightTypeRestricted);
                        if (n.isNE()) {
                            result = result.not();
                        }
                    } else if (!leftTypeRestricted.canTestForShallowEqualityWith(rightTypeRestricted)) {
                        result = (n.getType() == com.google.javascript.rhino.Token.SHEQ) ? com.google.javascript.rhino.jstype.TernaryValue.FALSE : com.google.javascript.rhino.jstype.TernaryValue.TRUE;
                    }
                    if (result != com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.DETERMINISTIC_TEST, leftType.toString(), rightType.toString(), result.toString());
                    }
                    ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                    break;
                }
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.GT :
            case com.google.javascript.rhino.Token.GE :
                leftType = getJSType(n.getFirstChild());
                rightType = getJSType(n.getLastChild());
                if (rightType.isNumber()) {
                    validator.expectNumber(t, n, leftType, "left side of numeric comparison");
                } else if (leftType.isNumber()) {
                    validator.expectNumber(t, n, rightType, "right side of numeric comparison");
                } else if (leftType.matchesNumberContext() && rightType.matchesNumberContext()) {
                } else {
                    java.lang.String message = "left side of comparison";
                    validator.expectString(t, n, leftType, message);
                    validator.expectNotNullOrUndefined(t, n, leftType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                    message = "right side of comparison";
                    validator.expectString(t, n, rightType, message);
                    validator.expectNotNullOrUndefined(t, n, rightType, message, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE));
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.IN :
                left = n.getFirstChild();
                right = n.getLastChild();
                rightType = getJSType(right);
                validator.expectString(t, left, getJSType(left), "left side of 'in'");
                validator.expectObject(t, n, rightType, "'in' requires an object");
                if (rightType.isStruct()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT);
                }
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                left = n.getFirstChild();
                right = n.getLastChild();
                rightType = getJSType(right).restrictByNotNullOrUndefined();
                validator.expectAnyObject(t, left, getJSType(left), "deterministic instanceof yields false");
                validator.expectActualObject(t, right, rightType, "instanceof requires an object");
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.ASSIGN :
                visitAssign(t, n);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
                checkPropCreation(t, n.getFirstChild());
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.URSH :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.BITOR :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.SUB :
            case com.google.javascript.rhino.Token.ADD :
            case com.google.javascript.rhino.Token.MUL :
                visitBinaryOperator(n.getType(), t, n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                ensureTyped(t, n, com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.jstype.JSType switchType = getJSType(parent.getFirstChild());
                com.google.javascript.rhino.jstype.JSType caseType = getJSType(n.getFirstChild());
                validator.expectSwitchMatchesCase(t, n, switchType, caseType);
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.WITH :
                {
                    com.google.javascript.rhino.Node child = n.getFirstChild();
                    childType = getJSType(child);
                    validator.expectObject(t, child, childType, "with requires an object");
                    typeable = false;
                    break;
                }
            case com.google.javascript.rhino.Token.FUNCTION :
                visitFunction(t, n);
                break;
            case com.google.javascript.rhino.Token.LABEL :
            case com.google.javascript.rhino.Token.LABEL_NAME :
            case com.google.javascript.rhino.Token.SWITCH :
            case com.google.javascript.rhino.Token.BREAK :
            case com.google.javascript.rhino.Token.CATCH :
            case com.google.javascript.rhino.Token.TRY :
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.EXPR_RESULT :
            case com.google.javascript.rhino.Token.BLOCK :
            case com.google.javascript.rhino.Token.EMPTY :
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
            case com.google.javascript.rhino.Token.CONTINUE :
            case com.google.javascript.rhino.Token.DEBUGGER :
            case com.google.javascript.rhino.Token.THROW :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.FOR :
                if (com.google.javascript.jscomp.NodeUtil.isForIn(n)) {
                    com.google.javascript.rhino.Node obj = n.getChildAtIndex(1);
                    if (getJSType(obj).isStruct()) {
                        report(t, obj, com.google.javascript.jscomp.TypeCheck.IN_USED_WITH_STRUCT);
                    }
                }
                typeable = false;
                break;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
            case com.google.javascript.rhino.Token.OBJECTLIT :
            case com.google.javascript.rhino.Token.OR :
                if (n.getJSType() != null) {
                    ensureTyped(t, n);
                } else if (n.isObjectLit() && (parent.getJSType() instanceof com.google.javascript.rhino.jstype.EnumType)) {
                    ensureTyped(t, n, parent.getJSType());
                } else {
                    ensureTyped(t, n);
                }
                if (n.isObjectLit()) {
                    com.google.javascript.rhino.jstype.JSType typ = getJSType(n);
                    for (com.google.javascript.rhino.Node key : n.children()) {
                        visitObjLitKey(t, key, n, typ);
                    }
                }
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(n.getType()));
                ensureTyped(t, n);
                break;
        }
        typeable = typeable && (!inExterns);
        if (typeable) {
            doPercentTypedAccounting(t, n);
        }
        checkNoTypeCheckSection(n, false);
    }

    private void checkTypeofString(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String s) {
        if (!((((((s.equals("number") || s.equals("string")) || s.equals("boolean")) || s.equals("undefined")) || s.equals("function")) || s.equals("object")) || s.equals("unknown"))) {
            validator.expectValidTypeofName(t, n, s);
        }
    }

    private void doPercentTypedAccounting(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            nullCount++;
        } else if (type.isUnknownType()) {
            if (reportUnknownTypes) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_EXPR_TYPE));
            }
            unknownCount++;
        } else {
            typedCount++;
        }
    }

    private void visitAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign) {
        com.google.javascript.rhino.JSDocInfo info = assign.getJSDocInfo();
        com.google.javascript.rhino.Node lvalue = assign.getFirstChild();
        com.google.javascript.rhino.Node rvalue = assign.getLastChild();
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node object = lvalue.getFirstChild();
            com.google.javascript.rhino.jstype.JSType objectJsType = getJSType(object);
            com.google.javascript.rhino.Node property = lvalue.getLastChild();
            java.lang.String pname = property.getString();
            if (object.isGetProp()) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object.getFirstChild());
                if (jsType.isInterface() && object.getLastChild().getString().equals("prototype")) {
                    visitInterfaceGetprop(t, assign, object, pname, lvalue, rvalue);
                }
            }
            checkEnumAlias(t, info, rvalue);
            checkPropCreation(t, lvalue);
            if (pname.equals("prototype")) {
                if ((objectJsType != null) && objectJsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = objectJsType.toMaybeFunctionType();
                    if (functionType.isConstructor()) {
                        com.google.javascript.rhino.jstype.JSType rvalueType = rvalue.getJSType();
                        validator.expectObject(t, rvalue, rvalueType, com.google.javascript.jscomp.TypeCheck.OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
                        if (functionType.makesStructs() && (!rvalueType.isStruct())) {
                            java.lang.String funName = functionType.getTypeOfThis().toString();
                            compiler.report(t.makeError(assign, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, "struct", funName));
                        }
                        return;
                    }
                }
            }
            com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objectJsType.restrictByNotNullOrUndefined());
            if (type != null) {
                if ((type.hasProperty(pname) && (!type.isPropertyTypeInferred(pname))) && (!com.google.javascript.jscomp.TypeCheck.propertyIsImplicitCast(type, pname))) {
                    com.google.javascript.rhino.jstype.JSType expectedType = type.getPropertyType(pname);
                    if (!expectedType.isUnknownType()) {
                        validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), expectedType, object, pname);
                        checkPropertyInheritanceOnGetpropAssign(t, assign, object, pname, info, expectedType);
                        return;
                    }
                }
            }
            checkPropertyInheritanceOnGetpropAssign(t, assign, object, pname, info, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
        }
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(lvalue);
        if (lvalue.isQualifiedName()) {
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(lvalue.getQualifiedName());
            if (var != null) {
                if (var.isTypeInferred()) {
                    return;
                }
                if (com.google.javascript.jscomp.NodeUtil.getRootOfQualifiedName(lvalue).isThis() && (t.getScope() != var.getScope())) {
                    return;
                }
                if (var.getType() != null) {
                    leftType = var.getType();
                }
            }
        }
        com.google.javascript.rhino.Node rightChild = assign.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(rightChild);
        if (validator.expectCanAssignTo(t, assign, rightType, leftType, "assignment")) {
            ensureTyped(t, assign, rightType);
        } else {
            ensureTyped(t, assign);
        }
    }

    private void checkPropCreation(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node lvalue) {
        if (lvalue.isGetProp()) {
            com.google.javascript.rhino.Node obj = lvalue.getFirstChild();
            com.google.javascript.rhino.Node prop = lvalue.getLastChild();
            com.google.javascript.rhino.jstype.JSType objType = getJSType(obj);
            java.lang.String pname = prop.getString();
            if ((!objType.isStruct()) || objType.hasProperty(pname)) {
                return;
            }
            com.google.javascript.jscomp.Scope s = t.getScope();
            if (obj.isThis() && getJSType(s.getRootNode()).isConstructor()) {
                return;
            }
            com.google.javascript.rhino.Node assgnExp = lvalue.getParent();
            com.google.javascript.rhino.Node assgnStm = assgnExp.getParent();
            if (((objType instanceof com.google.javascript.rhino.jstype.ObjectType) && s.isGlobal()) && com.google.javascript.jscomp.NodeUtil.isPrototypePropertyDeclaration(assgnStm)) {
                com.google.javascript.rhino.jstype.ObjectType instance = objType.toObjectType().getOwnerFunction().getInstanceType();
                java.lang.String file = lvalue.getSourceFileName();
                com.google.javascript.rhino.Node ctor = instance.getConstructor().getSource();
                if ((ctor != null) && ctor.getSourceFileName().equals(file)) {
                    com.google.javascript.rhino.jstype.JSType rvalueType = assgnExp.getLastChild().getJSType();
                    instance.defineInferredProperty(pname, rvalueType, lvalue);
                    return;
                }
            }
            report(t, prop, com.google.javascript.jscomp.TypeCheck.ILLEGAL_PROPERTY_CREATION);
        }
    }

    private void checkPropertyInheritanceOnGetpropAssign(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (object.isGetProp()) {
            com.google.javascript.rhino.Node object2 = object.getFirstChild();
            java.lang.String property2 = com.google.javascript.jscomp.NodeUtil.getStringValue(object.getLastChild());
            if ("prototype".equals(property2)) {
                com.google.javascript.rhino.jstype.JSType jsType = getJSType(object2);
                if (jsType.isFunctionType()) {
                    com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
                    if (functionType.isConstructor() || functionType.isInterface()) {
                        checkDeclaredPropertyInheritance(t, assign, functionType, property, info, propertyType);
                    }
                }
            }
        }
    }

    private void visitObjLitKey(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node key, com.google.javascript.rhino.Node objlit, com.google.javascript.rhino.jstype.JSType litType) {
        if (objlit.isFromExterns()) {
            ensureTyped(t, key);
            return;
        }
        if (litType.isStruct() && key.isQuotedString()) {
            report(t, key, com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY, "struct");
        } else if (litType.isDict() && (!key.isQuotedString())) {
            report(t, key, com.google.javascript.jscomp.TypeCheck.ILLEGAL_OBJLIT_KEY, "dict");
        }
        com.google.javascript.rhino.Node rvalue = key.getFirstChild();
        com.google.javascript.rhino.jstype.JSType rightType = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyTypeFromValueType(key, getJSType(rvalue));
        if (rightType == null) {
            rightType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        com.google.javascript.rhino.Node owner = objlit;
        com.google.javascript.rhino.jstype.JSType keyType = getJSType(key);
        com.google.javascript.rhino.jstype.JSType allowedValueType = keyType;
        if (allowedValueType.isEnumElementType()) {
            allowedValueType = allowedValueType.toMaybeEnumElementType().getPrimitiveType();
        }
        boolean valid = validator.expectCanAssignToPropertyOf(t, key, rightType, allowedValueType, owner, com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key));
        if (valid) {
            ensureTyped(t, key, rightType);
        } else {
            ensureTyped(t, key);
        }
        com.google.javascript.rhino.jstype.JSType objlitType = getJSType(objlit);
        com.google.javascript.rhino.jstype.ObjectType type = com.google.javascript.rhino.jstype.ObjectType.cast(objlitType.restrictByNotNullOrUndefined());
        if (type != null) {
            java.lang.String property = com.google.javascript.jscomp.NodeUtil.getObjectLitKeyName(key);
            if ((type.hasProperty(property) && (!type.isPropertyTypeInferred(property))) && (!com.google.javascript.jscomp.TypeCheck.propertyIsImplicitCast(type, property))) {
                validator.expectCanAssignToPropertyOf(t, key, keyType, type.getPropertyType(property), owner, property);
            }
            return;
        }
    }

    private static boolean propertyIsImplicitCast(com.google.javascript.rhino.jstype.ObjectType type, java.lang.String prop) {
        for (; type != null; type = type.getImplicitPrototype()) {
            com.google.javascript.rhino.JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
            if ((docInfo != null) && docInfo.isImplicitCast()) {
                return true;
            }
        }
        return false;
    }

    private void checkDeclaredPropertyInheritance(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.FunctionType ctorType, java.lang.String propertyName, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType propertyType) {
        if (com.google.javascript.jscomp.TypeCheck.hasUnknownOrEmptySupertype(ctorType)) {
            return;
        }
        com.google.javascript.rhino.jstype.FunctionType superClass = ctorType.getSuperClassConstructor();
        boolean superClassHasProperty = (superClass != null) && superClass.getInstanceType().hasProperty(propertyName);
        boolean superClassHasDeclaredProperty = (superClass != null) && superClass.getInstanceType().isPropertyTypeDeclared(propertyName);
        boolean superInterfaceHasProperty = false;
        boolean superInterfaceHasDeclaredProperty = false;
        if (ctorType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                superInterfaceHasProperty = superInterfaceHasProperty || interfaceType.hasProperty(propertyName);
                superInterfaceHasDeclaredProperty = superInterfaceHasDeclaredProperty || interfaceType.isPropertyTypeDeclared(propertyName);
            }
        }
        boolean declaredOverride = (info != null) && info.isOverride();
        boolean foundInterfaceProperty = false;
        if (ctorType.isConstructor()) {
            for (com.google.javascript.rhino.jstype.JSType implementedInterface : ctorType.getAllImplementedInterfaces()) {
                if (implementedInterface.isUnknownType() || implementedInterface.isEmptyType()) {
                    continue;
                }
                com.google.javascript.rhino.jstype.FunctionType interfaceType = implementedInterface.toObjectType().getConstructor();
                com.google.common.base.Preconditions.checkNotNull(interfaceType);
                boolean interfaceHasProperty = interfaceType.getPrototype().hasProperty(propertyName);
                foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
                if ((reportMissingOverride.isOn() && (!declaredOverride)) && interfaceHasProperty) {
                    compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_INTERFACE_PROPERTY, propertyName, interfaceType.getTopMostDefiningType(propertyName).toString()));
                }
            }
        }
        if (((!declaredOverride) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            return;
        }
        com.google.javascript.rhino.jstype.ObjectType topInstanceType = (superClassHasDeclaredProperty) ? superClass.getTopMostDefiningType(propertyName) : null;
        boolean declaredLocally = ctorType.isConstructor() && (ctorType.getPrototype().hasOwnProperty(propertyName) || ctorType.getInstanceType().hasOwnProperty(propertyName));
        if (((reportMissingOverride.isOn() && (!declaredOverride)) && superClassHasDeclaredProperty) && declaredLocally) {
            compiler.report(t.makeError(n, reportMissingOverride, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY, propertyName, topInstanceType.toString()));
        }
        if (superClassHasDeclaredProperty) {
            com.google.javascript.rhino.jstype.JSType superClassPropType = superClass.getInstanceType().getPropertyType(propertyName);
            com.google.javascript.rhino.jstype.TemplateTypeMap ctorTypeMap = ctorType.getTypeOfThis().getTemplateTypeMap();
            if (!ctorTypeMap.isEmpty()) {
                superClassPropType = superClassPropType.visit(new com.google.javascript.rhino.jstype.TemplateTypeMapReplacer(typeRegistry, ctorTypeMap));
            }
            if (!propertyType.isSubtype(superClassPropType)) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superClassPropType.toString(), propertyType.toString()));
            }
        } else if (superInterfaceHasDeclaredProperty) {
            for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
                if (interfaceType.hasProperty(propertyName)) {
                    com.google.javascript.rhino.jstype.JSType superPropertyType = interfaceType.getPropertyType(propertyName);
                    if (!propertyType.isSubtype(superPropertyType)) {
                        topInstanceType = interfaceType.getConstructor().getTopMostDefiningType(propertyName);
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName, topInstanceType.toString(), superPropertyType.toString(), propertyType.toString()));
                    }
                }
            }
        } else if (((!foundInterfaceProperty) && (!superClassHasProperty)) && (!superInterfaceHasProperty)) {
            compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.UNKNOWN_OVERRIDE, propertyName, ctorType.getInstanceType().toString()));
        }
    }

    private static boolean hasUnknownOrEmptySupertype(com.google.javascript.rhino.jstype.FunctionType ctor) {
        com.google.common.base.Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());
        com.google.common.base.Preconditions.checkArgument(!ctor.isUnknownType());
        while (true) {
            com.google.javascript.rhino.jstype.ObjectType maybeSuperInstanceType = ctor.getPrototype().getImplicitPrototype();
            if (maybeSuperInstanceType == null) {
                return false;
            }
            if (maybeSuperInstanceType.isUnknownType() || maybeSuperInstanceType.isEmptyType()) {
                return true;
            }
            ctor = maybeSuperInstanceType.getConstructor();
            if (ctor == null) {
                return false;
            }
            com.google.common.base.Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());
        } 
    }

    private void visitInterfaceGetprop(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node assign, com.google.javascript.rhino.Node object, java.lang.String property, com.google.javascript.rhino.Node lvalue, com.google.javascript.rhino.Node rvalue) {
        com.google.javascript.rhino.jstype.JSType rvalueType = getJSType(rvalue);
        java.lang.String abstractMethodName = compiler.getCodingConvention().getAbstractMethodName();
        if (!rvalueType.isFunctionType()) {
            java.lang.String abstractMethodMessage = (abstractMethodName != null) ? ", or " + abstractMethodName : "";
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INVALID_INTERFACE_MEMBER_DECLARATION, abstractMethodMessage));
        }
        if (assign.getLastChild().isFunction() && (!com.google.javascript.jscomp.NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))) {
            compiler.report(t.makeError(object, com.google.javascript.jscomp.TypeCheck.INTERFACE_FUNCTION_NOT_EMPTY, abstractMethodName));
        }
    }

    boolean visitName(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        int parentNodeType = parent.getType();
        if ((((parentNodeType == com.google.javascript.rhino.Token.FUNCTION) || (parentNodeType == com.google.javascript.rhino.Token.CATCH)) || (parentNodeType == com.google.javascript.rhino.Token.PARAM_LIST)) || (parentNodeType == com.google.javascript.rhino.Token.VAR)) {
            return false;
        }
        com.google.javascript.rhino.jstype.JSType type = n.getJSType();
        if (type == null) {
            type = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(n.getString());
            if (var != null) {
                com.google.javascript.rhino.jstype.JSType varType = var.getType();
                if (varType != null) {
                    type = varType;
                }
            }
        }
        ensureTyped(t, n, type);
        return true;
    }

    private void visitGetProp(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.Node parent) {
        com.google.javascript.rhino.Node property = n.getLastChild();
        com.google.javascript.rhino.Node objNode = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(objNode);
        if (childType.isDict()) {
            report(t, property, com.google.javascript.jscomp.TypeValidator.ILLEGAL_PROPERTY_ACCESS, "'.'", "dict");
        } else if (validator.expectNotNullOrUndefined(t, n, childType, "No properties on this expression", getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE))) {
            checkPropertyAccess(childType, property.getString(), t, n);
        }
        ensureTyped(t, n);
    }

    private void checkPropertyAccess(com.google.javascript.rhino.jstype.JSType childType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType propType = getJSType(n);
        if (propType.isEquivalentTo(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
            childType = childType.autobox();
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(childType);
            if (objectType != null) {
                if ((!objectType.hasProperty(propName)) || objectType.isEquivalentTo(typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE))) {
                    if (objectType instanceof com.google.javascript.rhino.jstype.EnumType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_ENUM_ELEMENT, propName);
                    } else {
                        checkPropertyAccessHelper(objectType, propName, t, n);
                    }
                }
            } else {
                checkPropertyAccessHelper(childType, propName, t, n);
            }
        }
    }

    private void checkPropertyAccessHelper(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        if (((!objectType.isEmptyType()) && reportMissingProperties) && ((!isPropertyTest(n)) || objectType.isStruct())) {
            if (!typeRegistry.canPropertyBeDefined(objectType, propName)) {
                com.google.javascript.jscomp.TypeCheck.SuggestionPair pair = getClosestPropertySuggestion(objectType, propName);
                if ((pair != null) && ((pair.distance * 4) < propName.length())) {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY_WITH_SUGGESTION, propName, validator.getReadableJSTypeName(n.getFirstChild(), true), pair.suggestion);
                } else {
                    report(t, n, com.google.javascript.jscomp.TypeCheck.INEXISTENT_PROPERTY, propName, validator.getReadableJSTypeName(n.getFirstChild(), true));
                }
            }
        }
    }

    private com.google.javascript.jscomp.TypeCheck.SuggestionPair getClosestPropertySuggestion(com.google.javascript.rhino.jstype.JSType objectType, java.lang.String propName) {
        if (editDistance == null) {
            return null;
        }
        java.lang.String bestSoFar = null;
        int shortest = java.lang.Integer.MAX_VALUE;
        if (objectType instanceof com.google.javascript.rhino.jstype.ObjectType) {
            com.google.javascript.rhino.jstype.ObjectType type = ((com.google.javascript.rhino.jstype.ObjectType) (objectType));
            for (java.lang.String alt : type.getPropertyNames()) {
                int distance;
                try {
                    distance = ((java.lang.Integer) (editDistance.invoke(null, propName, alt, false)));
                } catch (java.lang.Exception e) {
                    return null;
                }
                if (distance <= shortest) {
                    if (distance == shortest) {
                        if ((bestSoFar != null) && (alt.compareToIgnoreCase(bestSoFar) > 0)) {
                            continue;
                        }
                    }
                    shortest = distance;
                    bestSoFar = alt;
                }
            }
        } else if (objectType.isUnionType()) {
            com.google.javascript.rhino.jstype.UnionType type = ((com.google.javascript.rhino.jstype.UnionType) (objectType));
            for (com.google.javascript.rhino.jstype.JSType alt : type.getAlternates()) {
                com.google.javascript.jscomp.TypeCheck.SuggestionPair pair = getClosestPropertySuggestion(alt, propName);
                if (pair != null) {
                    if (pair.distance <= shortest) {
                        if (pair.distance == shortest) {
                            if ((bestSoFar != null) && (pair.suggestion.compareToIgnoreCase(bestSoFar) > 0)) {
                                continue;
                            }
                        }
                        shortest = pair.distance;
                        bestSoFar = pair.suggestion;
                    }
                }
            }
        }
        if (bestSoFar != null) {
            return new com.google.javascript.jscomp.TypeCheck.SuggestionPair(bestSoFar, shortest);
        }
        return null;
    }

    private boolean isPropertyTest(com.google.javascript.rhino.Node getProp) {
        com.google.javascript.rhino.Node parent = getProp.getParent();
        switch (parent.getType()) {
            case com.google.javascript.rhino.Token.CALL :
                return (parent.getFirstChild() != getProp) && compiler.getCodingConvention().isPropertyTestFunction(parent);
            case com.google.javascript.rhino.Token.IF :
            case com.google.javascript.rhino.Token.WHILE :
            case com.google.javascript.rhino.Token.DO :
            case com.google.javascript.rhino.Token.FOR :
                return com.google.javascript.jscomp.NodeUtil.getConditionExpression(parent) == getProp;
            case com.google.javascript.rhino.Token.INSTANCEOF :
            case com.google.javascript.rhino.Token.TYPEOF :
                return true;
            case com.google.javascript.rhino.Token.AND :
            case com.google.javascript.rhino.Token.HOOK :
                return parent.getFirstChild() == getProp;
            case com.google.javascript.rhino.Token.NOT :
                return parent.getParent().isOr() && (parent.getParent().getFirstChild() == parent);
            case com.google.javascript.rhino.Token.CAST :
                return isPropertyTest(parent);
        }
        return false;
    }

    private void visitGetElem(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        validator.expectIndexMatch(t, n, getJSType(n.getFirstChild()), getJSType(n.getLastChild()));
        ensureTyped(t, n);
    }

    private void visitVar(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.JSDocInfo varInfo = (n.hasOneChild()) ? n.getJSDocInfo() : null;
        for (com.google.javascript.rhino.Node name : n.children()) {
            com.google.javascript.rhino.Node value = name.getFirstChild();
            com.google.javascript.jscomp.Scope.Var var = t.getScope().getVar(name.getString());
            if (value != null) {
                com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
                com.google.javascript.rhino.jstype.JSType nameType = var.getType();
                nameType = (nameType == null) ? getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE) : nameType;
                com.google.javascript.rhino.JSDocInfo info = name.getJSDocInfo();
                if (info == null) {
                    info = varInfo;
                }
                checkEnumAlias(t, info, value);
                if (var.isTypeInferred()) {
                    ensureTyped(t, name, valueType);
                } else {
                    validator.expectCanAssignTo(t, value, valueType, nameType, "initializing variable");
                }
            }
        }
    }

    private void visitNew(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node constructor = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
        if ((type.isConstructor() || type.isEmptyType()) || type.isUnknownType()) {
            com.google.javascript.rhino.jstype.FunctionType fnType = type.toMaybeFunctionType();
            if (fnType != null) {
                visitParameterList(t, n, fnType);
                ensureTyped(t, n, fnType.getInstanceType());
            } else {
                ensureTyped(t, n);
            }
        } else {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_A_CONSTRUCTOR);
            ensureTyped(t, n);
        }
    }

    private void checkInterfaceConflictProperties(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, java.lang.String functionName, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties, java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties, com.google.javascript.rhino.jstype.ObjectType interfaceType) {
        com.google.javascript.rhino.jstype.ObjectType implicitProto = interfaceType.getImplicitPrototype();
        java.util.Set<java.lang.String> currentPropertyNames;
        if (implicitProto == null) {
            currentPropertyNames = com.google.common.collect.ImmutableSet.of();
        } else {
            currentPropertyNames = implicitProto.getOwnPropertyNames();
        }
        for (java.lang.String name : currentPropertyNames) {
            com.google.javascript.rhino.jstype.ObjectType oType = properties.get(name);
            if (oType != null) {
                if (!interfaceType.getPropertyType(name).isEquivalentTo(oType.getPropertyType(name))) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, functionName, name, oType.toString(), interfaceType.toString()));
                }
            }
            currentProperties.put(name, interfaceType);
        }
        for (com.google.javascript.rhino.jstype.ObjectType iType : interfaceType.getCtorExtendedInterfaces()) {
            checkInterfaceConflictProperties(t, n, functionName, properties, currentProperties, iType);
        }
    }

    private void visitFunction(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.FunctionType functionType = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(n.getJSType());
        java.lang.String functionPrivateName = n.getFirstChild().getString();
        if (functionType.isConstructor()) {
            com.google.javascript.rhino.jstype.FunctionType baseConstructor = functionType.getSuperClassConstructor();
            if (((baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE)) && (baseConstructor != null)) && baseConstructor.isInterface()) {
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, "constructor", functionPrivateName));
            } else {
                if (baseConstructor != getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE)) {
                    com.google.javascript.rhino.jstype.ObjectType proto = functionType.getPrototype();
                    if (functionType.makesStructs() && (!proto.isStruct())) {
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, "struct", functionPrivateName));
                    } else if (functionType.makesDicts() && (!proto.isDict())) {
                        compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_SHAPE_TYPE, "dict", functionPrivateName));
                    }
                }
                for (com.google.javascript.rhino.jstype.JSType baseInterface : functionType.getImplementedInterfaces()) {
                    boolean badImplementedType = false;
                    com.google.javascript.rhino.jstype.ObjectType baseInterfaceObj = com.google.javascript.rhino.jstype.ObjectType.cast(baseInterface);
                    if (baseInterfaceObj != null) {
                        com.google.javascript.rhino.jstype.FunctionType interfaceConstructor = baseInterfaceObj.getConstructor();
                        if ((interfaceConstructor != null) && (!interfaceConstructor.isInterface())) {
                            badImplementedType = true;
                        }
                    } else {
                        badImplementedType = true;
                    }
                    if (badImplementedType) {
                        report(t, n, com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, functionPrivateName);
                    }
                }
                validator.expectAllInterfaceProperties(t, n, functionType);
            }
        } else if (functionType.isInterface()) {
            for (com.google.javascript.rhino.jstype.ObjectType extInterface : functionType.getExtendedInterfaces()) {
                if ((extInterface.getConstructor() != null) && (!extInterface.getConstructor().isInterface())) {
                    compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.CONFLICTING_EXTENDED_TYPE, "interface", functionPrivateName));
                }
            }
            if (functionType.getExtendedInterfacesCount() > 1) {
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> properties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType> currentProperties = new java.util.HashMap<java.lang.String, com.google.javascript.rhino.jstype.ObjectType>();
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : functionType.getExtendedInterfaces()) {
                    currentProperties.clear();
                    checkInterfaceConflictProperties(t, n, functionPrivateName, properties, currentProperties, interfaceType);
                    properties.putAll(currentProperties);
                }
            }
        }
    }

    private void visitCall(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node child = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType childType = getJSType(child).restrictByNotNullOrUndefined();
        if (!childType.canBeCalled()) {
            report(t, n, com.google.javascript.jscomp.TypeCheck.NOT_CALLABLE, childType.toString());
            ensureTyped(t, n);
            return;
        }
        if (childType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = childType.toMaybeFunctionType();
            boolean isExtern = false;
            com.google.javascript.rhino.JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();
            if ((functionJSDocInfo != null) && (functionJSDocInfo.getAssociatedNode() != null)) {
                isExtern = functionJSDocInfo.getAssociatedNode().isFromExterns();
            }
            if ((functionType.isConstructor() && (!functionType.isNativeObjectType())) && ((functionType.getReturnType().isUnknownType() || functionType.getReturnType().isVoidType()) || (!isExtern))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.CONSTRUCTOR_NOT_CALLABLE, childType.toString());
            }
            if (((functionType.isOrdinaryFunction() && (!functionType.getTypeOfThis().isUnknownType())) && (!((functionType.getTypeOfThis().toObjectType() != null) && functionType.getTypeOfThis().toObjectType().isNativeObjectType()))) && (!(child.isGetElem() || child.isGetProp()))) {
                report(t, n, com.google.javascript.jscomp.TypeCheck.EXPECTED_THIS_TYPE, functionType.toString());
            }
            visitParameterList(t, n, functionType);
            ensureTyped(t, n, functionType.getReturnType());
        } else {
            ensureTyped(t, n);
        }
    }

    private void visitParameterList(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node call, com.google.javascript.rhino.jstype.FunctionType functionType) {
        java.util.Iterator<com.google.javascript.rhino.Node> arguments = call.children().iterator();
        arguments.next();
        java.util.Iterator<com.google.javascript.rhino.Node> parameters = functionType.getParameters().iterator();
        int ordinal = 0;
        com.google.javascript.rhino.Node parameter = null;
        com.google.javascript.rhino.Node argument = null;
        while (arguments.hasNext() && (parameters.hasNext() || ((parameter != null) && parameter.isVarArgs()))) {
            if (parameters.hasNext()) {
                parameter = parameters.next();
            }
            argument = arguments.next();
            ordinal++;
            validator.expectArgumentMatchesParameter(t, argument, getJSType(argument), getJSType(parameter), call, ordinal);
        } 
        int numArgs = call.getChildCount() - 1;
        int minArgs = functionType.getMinArguments();
        int maxArgs = functionType.getMaxArguments();
        if ((minArgs > numArgs) || (maxArgs < numArgs)) {
            report(t, call, com.google.javascript.jscomp.TypeCheck.WRONG_ARGUMENT_COUNT, validator.getReadableJSTypeName(call.getFirstChild(), false), java.lang.String.valueOf(numArgs), java.lang.String.valueOf(minArgs), maxArgs != java.lang.Integer.MAX_VALUE ? (" and no more than " + maxArgs) + " argument(s)" : "");
        }
    }

    private void visitReturn(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = getJSType(t.getEnclosingFunction());
        if (jsType.isFunctionType()) {
            com.google.javascript.rhino.jstype.FunctionType functionType = jsType.toMaybeFunctionType();
            com.google.javascript.rhino.jstype.JSType returnType = functionType.getReturnType();
            if (returnType == null) {
                returnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
            }
            com.google.javascript.rhino.Node valueNode = n.getFirstChild();
            com.google.javascript.rhino.jstype.JSType actualReturnType;
            if (valueNode == null) {
                actualReturnType = getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                valueNode = n;
            } else {
                actualReturnType = getJSType(valueNode);
            }
            validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType, "inconsistent return type");
        }
    }

    private void visitBinaryOperator(int op, com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.Node left = n.getFirstChild();
        com.google.javascript.rhino.jstype.JSType leftType = getJSType(left);
        com.google.javascript.rhino.Node right = n.getLastChild();
        com.google.javascript.rhino.jstype.JSType rightType = getJSType(right);
        switch (op) {
            case com.google.javascript.rhino.Token.ASSIGN_LSH :
            case com.google.javascript.rhino.Token.ASSIGN_RSH :
            case com.google.javascript.rhino.Token.LSH :
            case com.google.javascript.rhino.Token.RSH :
            case com.google.javascript.rhino.Token.ASSIGN_URSH :
            case com.google.javascript.rhino.Token.URSH :
                if (!leftType.matchesInt32Context()) {
                    report(t, left, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), leftType.toString());
                }
                if (!rightType.matchesUint32Context()) {
                    report(t, right, com.google.javascript.jscomp.TypeCheck.BIT_OPERATION, com.google.javascript.jscomp.NodeUtil.opToStr(n.getType()), rightType.toString());
                }
                break;
            case com.google.javascript.rhino.Token.ASSIGN_DIV :
            case com.google.javascript.rhino.Token.ASSIGN_MOD :
            case com.google.javascript.rhino.Token.ASSIGN_MUL :
            case com.google.javascript.rhino.Token.ASSIGN_SUB :
            case com.google.javascript.rhino.Token.DIV :
            case com.google.javascript.rhino.Token.MOD :
            case com.google.javascript.rhino.Token.MUL :
            case com.google.javascript.rhino.Token.SUB :
                validator.expectNumber(t, left, leftType, "left operand");
                validator.expectNumber(t, right, rightType, "right operand");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_BITAND :
            case com.google.javascript.rhino.Token.ASSIGN_BITXOR :
            case com.google.javascript.rhino.Token.ASSIGN_BITOR :
            case com.google.javascript.rhino.Token.BITAND :
            case com.google.javascript.rhino.Token.BITXOR :
            case com.google.javascript.rhino.Token.BITOR :
                validator.expectBitwiseable(t, left, leftType, "bad left operand to bitwise operator");
                validator.expectBitwiseable(t, right, rightType, "bad right operand to bitwise operator");
                break;
            case com.google.javascript.rhino.Token.ASSIGN_ADD :
            case com.google.javascript.rhino.Token.ADD :
                break;
            default :
                report(t, n, com.google.javascript.jscomp.TypeCheck.UNEXPECTED_TOKEN, com.google.javascript.rhino.Token.name(op));
        }
        ensureTyped(t, n);
    }

    private void checkEnumAlias(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.JSDocInfo declInfo, com.google.javascript.rhino.Node value) {
        if ((declInfo == null) || (!declInfo.hasEnumParameterType())) {
            return;
        }
        com.google.javascript.rhino.jstype.JSType valueType = getJSType(value);
        if (!valueType.isEnumType()) {
            return;
        }
        com.google.javascript.rhino.jstype.EnumType valueEnumType = valueType.toMaybeEnumType();
        com.google.javascript.rhino.jstype.JSType valueEnumPrimitiveType = valueEnumType.getElementsType().getPrimitiveType();
        validator.expectCanAssignTo(t, value, valueEnumPrimitiveType, declInfo.getEnumParameterType().evaluate(t.getScope(), typeRegistry), "incompatible enum element types");
    }

    private com.google.javascript.rhino.jstype.JSType getJSType(com.google.javascript.rhino.Node n) {
        com.google.javascript.rhino.jstype.JSType jsType = n.getJSType();
        if (jsType == null) {
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        } else {
            return jsType;
        }
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n) {
        ensureTyped(t, n, getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSTypeNative type) {
        ensureTyped(t, n, getNativeType(type));
    }

    private void ensureTyped(com.google.javascript.jscomp.NodeTraversal t, com.google.javascript.rhino.Node n, com.google.javascript.rhino.jstype.JSType type) {
        com.google.common.base.Preconditions.checkState(((!n.isFunction()) || type.isFunctionType()) || type.isUnknownType());
        com.google.javascript.rhino.JSDocInfo info = n.getJSDocInfo();
        if (info != null) {
            if (info.isImplicitCast() && (!inExterns)) {
                java.lang.String propName = (n.isGetProp()) ? n.getLastChild().getString() : "(missing)";
                compiler.report(t.makeError(n, com.google.javascript.jscomp.TypeCheck.ILLEGAL_IMPLICIT_CAST, propName));
            }
        }
        if (n.getJSType() == null) {
            n.setJSType(type);
        }
    }

    double getTypedPercent() {
        int total = (nullCount + unknownCount) + typedCount;
        return total == 0 ? 0.0 : (100.0 * typedCount) / total;
    }

    private com.google.javascript.rhino.jstype.JSType getNativeType(com.google.javascript.rhino.jstype.JSTypeNative typeId) {
        return typeRegistry.getNativeType(typeId);
    }
}
[528297] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659896168987
GPR[SSUN]-1659896168987
-1696950979
GPR[SPVATF]-1659896169232
GPR[EPVATF]-1659896171997
GPR[SPS]-1659896171997
[531876] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:154.
GPR[EPS]-1659896172566
GPR[SPVATF]-1659896172567
GPR[EPVATF]-1659896175450
GPR[SPS]-1659896175450
[535328] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:154.
GPR[EPS]-1659896176018
GPR[ESUN]-1659896176018
GPR[SSUN]-1659896176018
-1696950979
GPR[SPVATF]-1659896176261
GPR[EPVATF]-1659896179080
GPR[SPS]-1659896179080
[538963] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:146.
GPR[EPS]-1659896179653
GPR[SPVATF]-1659896179653
GPR[EPVATF]-1659896182481
GPR[SPS]-1659896182481
[542369] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:146.
GPR[EPS]-1659896183059
GPR[ESUN]-1659896183059
GPR[SSUN]-1659896183059
-1696950979
GPR[ESUN]-1659896183298
GPR[SSUN]-1659896183298
-1696950979
GPR[ESUN]-1659896183590
GPR[SSUN]-1659896183590
-1696950979
GPR[SPVATF]-1659896183834
GPR[EPVATF]-1659896186686
GPR[SPS]-1659896186686
[546357] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class SemanticReverseAbstractInterpreter extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter {
    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> EQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> NE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderInequality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHEQ = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowEquality(p.typeB);
        }
    };

    private static final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> SHNE = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            if ((p.typeA == null) || (p.typeB == null)) {
                return null;
            }
            return p.typeA.getTypesUnderShallowInequality(p.typeB);
        }
    };

    private final com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> ineq = new com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair>() {
        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType.TypePair apply(com.google.javascript.rhino.jstype.JSType.TypePair p) {
            return new com.google.javascript.rhino.jstype.JSType.TypePair(getRestrictedWithoutUndefined(p.typeA), getRestrictedWithoutUndefined(p.typeB));
        }
    };

    public SemanticReverseAbstractInterpreter(com.google.javascript.jscomp.CodingConvention convention, com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry) {
        super(convention, typeRegistry);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.type.FlowScope getPreciserScopeKnowingConditionOutcome(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        int operatorToken = condition.getType();
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.EQ :
            case com.google.javascript.rhino.Token.NE :
            case com.google.javascript.rhino.Token.SHEQ :
            case com.google.javascript.rhino.Token.SHNE :
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left;
                com.google.javascript.rhino.Node right;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(64).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("condition",condition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.ineq",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.this.ineq);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("blindScope",blindScope);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("operatorToken",operatorToken);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("operatorToken == com.google.javascript.rhino.Token.CASE",operatorToken == com.google.javascript.rhino.Token.CASE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("outcome",outcome);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectInput("com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ",com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(64).collectionEnds();
                }
                if (runtimeAngelicValue) if (operatorToken == com.google.javascript.rhino.Token.CASE) {
                    left = condition.getParent().getFirstChild();
                    right = condition.getFirstChild();
                } else {
                    left = condition.getFirstChild();
                    right = condition.getLastChild();
                }
                com.google.javascript.rhino.Node typeOfNode = null;
                com.google.javascript.rhino.Node stringNode = null;
                if (left.isTypeOf() && right.isString()) {
                    typeOfNode = left;
                    stringNode = right;
                } else if (right.isTypeOf() && left.isString()) {
                    typeOfNode = right;
                    stringNode = left;
                }
                if ((typeOfNode != null) && (stringNode != null)) {
                    com.google.javascript.rhino.Node operandNode = typeOfNode.getFirstChild();
                    com.google.javascript.rhino.jstype.JSType operandType = getTypeIfRefinable(operandNode, blindScope);
                    if (operandType != null) {
                        boolean resultEqualsValue = ((operatorToken == com.google.javascript.rhino.Token.EQ) || (operatorToken == com.google.javascript.rhino.Token.SHEQ)) || (operatorToken == com.google.javascript.rhino.Token.CASE);
                        if (!outcome) {
                            resultEqualsValue = !resultEqualsValue;
                        }
                        return caseTypeOf(operandNode, operandType, stringNode.getString(), resultEqualsValue, blindScope);
                    }
                }
        }
        switch (operatorToken) {
            case com.google.javascript.rhino.Token.AND :
                if (outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, true);
                }
            case com.google.javascript.rhino.Token.OR :
                if (!outcome) {
                    return caseAndOrNotShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                } else {
                    return caseAndOrMaybeShortCircuiting(condition.getFirstChild(), condition.getLastChild(), blindScope, false);
                }
            case com.google.javascript.rhino.Token.EQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                }
            case com.google.javascript.rhino.Token.NE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.NE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.EQ);
                }
            case com.google.javascript.rhino.Token.SHEQ :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
            case com.google.javascript.rhino.Token.SHNE :
                if (outcome) {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                } else {
                    return caseEquality(condition, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                }
            case com.google.javascript.rhino.Token.NAME :
            case com.google.javascript.rhino.Token.GETPROP :
                return caseNameOrGetProp(condition, blindScope, outcome);
            case com.google.javascript.rhino.Token.ASSIGN :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild().getNext(), blindScope, outcome), outcome);
            case com.google.javascript.rhino.Token.NOT :
                return firstPreciserScopeKnowingConditionOutcome(condition.getFirstChild(), blindScope, !outcome);
            case com.google.javascript.rhino.Token.LE :
            case com.google.javascript.rhino.Token.LT :
            case com.google.javascript.rhino.Token.GE :
            case com.google.javascript.rhino.Token.GT :
                if (outcome) {
                    return caseEquality(condition, blindScope, ineq);
                }
                break;
            case com.google.javascript.rhino.Token.INSTANCEOF :
                return caseInstanceOf(condition.getFirstChild(), condition.getLastChild(), blindScope, outcome);
            case com.google.javascript.rhino.Token.IN :
                if (outcome && condition.getFirstChild().isString()) {
                    return caseIn(condition.getLastChild(), condition.getFirstChild().getString(), blindScope);
                }
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.javascript.rhino.Node left = condition.getParent().getFirstChild();
                com.google.javascript.rhino.Node right = condition.getFirstChild();
                if (outcome) {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHEQ);
                } else {
                    return caseEquality(left, right, blindScope, com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.SHNE);
                }
        }
        return nextPreciserScopeKnowingConditionOutcome(condition, blindScope, outcome);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node condition, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        return caseEquality(condition.getFirstChild(), condition.getLastChild(), blindScope, merging);
    }

    private com.google.javascript.jscomp.type.FlowScope caseEquality(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, com.google.common.base.Function<com.google.javascript.rhino.jstype.JSType.TypePair, com.google.javascript.rhino.jstype.JSType.TypePair> merging) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
        }
        com.google.javascript.rhino.jstype.JSType.TypePair merged = merging.apply(new com.google.javascript.rhino.jstype.JSType.TypePair(leftType, rightType));
        if (merged != null) {
            return maybeRestrictTwoNames(blindScope, left, leftType, leftIsRefineable ? merged.typeA : null, right, rightType, rightIsRefineable ? merged.typeB : null);
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrNotShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        boolean leftIsRefineable;
        if (leftType != null) {
            leftIsRefineable = true;
        } else {
            leftIsRefineable = false;
            leftType = left.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType restrictedLeftType = (leftType == null) ? null : leftType.getRestrictedTypeGivenToBooleanOutcome(condition);
        if (restrictedLeftType == null) {
            return firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        com.google.javascript.rhino.jstype.JSType rightType = getTypeIfRefinable(right, blindScope);
        boolean rightIsRefineable;
        if (rightType != null) {
            rightIsRefineable = true;
        } else {
            rightIsRefineable = false;
            rightType = right.getJSType();
            blindScope = firstPreciserScopeKnowingConditionOutcome(right, blindScope, condition);
        }
        if (condition) {
            com.google.javascript.rhino.jstype.JSType restrictedRightType = (rightType == null) ? null : rightType.getRestrictedTypeGivenToBooleanOutcome(condition);
            return maybeRestrictTwoNames(blindScope, left, leftType, leftIsRefineable ? restrictedLeftType : null, right, rightType, rightIsRefineable ? restrictedRightType : null);
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseAndOrMaybeShortCircuiting(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean condition) {
        com.google.javascript.jscomp.type.FlowScope leftScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> leftVar = leftScope.findUniqueRefinedSlot(blindScope);
        if (leftVar == null) {
            return blindScope == leftScope ? blindScope : blindScope.createChildFlowScope();
        }
        com.google.javascript.jscomp.type.FlowScope rightScope = firstPreciserScopeKnowingConditionOutcome(left, blindScope, condition);
        rightScope = firstPreciserScopeKnowingConditionOutcome(right, rightScope, !condition);
        com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> rightVar = rightScope.findUniqueRefinedSlot(blindScope);
        if ((rightVar == null) || (!leftVar.getName().equals(rightVar.getName()))) {
            return blindScope == rightScope ? blindScope : blindScope.createChildFlowScope();
        }
        com.google.javascript.rhino.jstype.JSType type = leftVar.getType().getLeastSupertype(rightVar.getType());
        com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
        informed.inferSlotType(leftVar.getName(), type);
        return informed;
    }

    private com.google.javascript.jscomp.type.FlowScope maybeRestrictName(com.google.javascript.jscomp.type.FlowScope blindScope, com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType originalType, com.google.javascript.rhino.jstype.JSType restrictedType) {
        if ((restrictedType != null) && (restrictedType != originalType)) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            declareNameInScope(informed, node, restrictedType);
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope maybeRestrictTwoNames(com.google.javascript.jscomp.type.FlowScope blindScope, com.google.javascript.rhino.Node left, com.google.javascript.rhino.jstype.JSType originalLeftType, com.google.javascript.rhino.jstype.JSType restrictedLeftType, com.google.javascript.rhino.Node right, com.google.javascript.rhino.jstype.JSType originalRightType, com.google.javascript.rhino.jstype.JSType restrictedRightType) {
        boolean shouldRefineLeft = (restrictedLeftType != null) && (restrictedLeftType != originalLeftType);
        boolean shouldRefineRight = (restrictedRightType != null) && (restrictedRightType != originalRightType);
        if (shouldRefineLeft || shouldRefineRight) {
            com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
            if (shouldRefineLeft) {
                declareNameInScope(informed, left, restrictedLeftType);
            }
            if (shouldRefineRight) {
                declareNameInScope(informed, right, restrictedRightType);
            }
            return informed;
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseNameOrGetProp(com.google.javascript.rhino.Node name, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType type = getTypeIfRefinable(name, blindScope);
        if (type != null) {
            return maybeRestrictName(blindScope, name, type, type.getRestrictedTypeGivenToBooleanOutcome(outcome));
        }
        return blindScope;
    }

    private com.google.javascript.jscomp.type.FlowScope caseTypeOf(com.google.javascript.rhino.Node node, com.google.javascript.rhino.jstype.JSType type, java.lang.String value, boolean resultEqualsValue, com.google.javascript.jscomp.type.FlowScope blindScope) {
        return maybeRestrictName(blindScope, node, type, getRestrictedByTypeOfResult(type, value, resultEqualsValue));
    }

    private com.google.javascript.jscomp.type.FlowScope caseInstanceOf(com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, com.google.javascript.jscomp.type.FlowScope blindScope, boolean outcome) {
        com.google.javascript.rhino.jstype.JSType leftType = getTypeIfRefinable(left, blindScope);
        if (leftType == null) {
            return blindScope;
        }
        com.google.javascript.rhino.jstype.JSType rightType = right.getJSType();
        com.google.javascript.rhino.jstype.ObjectType targetType = typeRegistry.getNativeObjectType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        if ((rightType != null) && rightType.isFunctionType()) {
            targetType = rightType.toMaybeFunctionType();
        }
        com.google.javascript.rhino.jstype.Visitor<com.google.javascript.rhino.jstype.JSType> visitor;
        if (outcome) {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByTrueInstanceOfResultVisitor(targetType);
        } else {
            visitor = new com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter.RestrictByFalseInstanceOfResultVisitor(targetType);
        }
        return maybeRestrictName(blindScope, left, leftType, leftType.visit(visitor));
    }

    private com.google.javascript.jscomp.type.FlowScope caseIn(com.google.javascript.rhino.Node object, java.lang.String propertyName, com.google.javascript.jscomp.type.FlowScope blindScope) {
        com.google.javascript.rhino.jstype.JSType jsType = object.getJSType();
        jsType = this.getRestrictedWithoutNull(jsType);
        jsType = this.getRestrictedWithoutUndefined(jsType);
        boolean hasProperty = false;
        com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(jsType);
        if (objectType != null) {
            hasProperty = objectType.hasProperty(propertyName);
        }
        if (!hasProperty) {
            java.lang.String qualifiedName = object.getQualifiedName();
            if (qualifiedName != null) {
                java.lang.String propertyQualifiedName = (qualifiedName + ".") + propertyName;
                if (blindScope.getSlot(propertyQualifiedName) == null) {
                    com.google.javascript.jscomp.type.FlowScope informed = blindScope.createChildFlowScope();
                    com.google.javascript.rhino.jstype.JSType unknownType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
                    informed.inferQualifiedSlot(object, propertyQualifiedName, unknownType, unknownType);
                    return informed;
                }
            }
        }
        return blindScope;
    }

    private class RestrictByTrueInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByTrueTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByTrueInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        protected com.google.javascript.rhino.jstype.JSType caseTopType(com.google.javascript.rhino.jstype.JSType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnknownType() {
            com.google.javascript.rhino.jstype.FunctionType funcTarget = com.google.javascript.rhino.jstype.JSType.toMaybeFunctionType(target);
            if ((funcTarget != null) && funcTarget.hasInstanceType()) {
                return funcTarget.getInstanceType();
            }
            return getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            return applyCommonRestriction(type);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }

        private com.google.javascript.rhino.jstype.JSType applyCommonRestriction(com.google.javascript.rhino.jstype.JSType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getGreatestSubtype(funcTarget.getInstanceType());
            }
            return null;
        }
    }

    private class RestrictByFalseInstanceOfResultVisitor extends com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter.RestrictByFalseTypeOfResultVisitor {
        private final com.google.javascript.rhino.jstype.ObjectType target;

        RestrictByFalseInstanceOfResultVisitor(com.google.javascript.rhino.jstype.ObjectType target) {
            this.target = target;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseObjectType(com.google.javascript.rhino.jstype.ObjectType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                if (type.isSubtype(funcTarget.getInstanceType())) {
                    return null;
                }
                return type;
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseUnionType(com.google.javascript.rhino.jstype.UnionType type) {
            if (target.isUnknownType()) {
                return type;
            }
            com.google.javascript.rhino.jstype.FunctionType funcTarget = target.toMaybeFunctionType();
            if (funcTarget.hasInstanceType()) {
                return type.getRestrictedUnion(funcTarget.getInstanceType());
            }
            return null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType caseFunctionType(com.google.javascript.rhino.jstype.FunctionType type) {
            return caseObjectType(type);
        }
    }
}
[546358] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659896187048
GPR[EPVATF]-1659896189916
GPR[SPS]-1659896189916
[549937] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:136.
GPR[EPS]-1659896190628
GPR[ESUN]-1659896190628
GPR[SSUN]-1659896190628
-1696950979
GPR[SPVATF]-1659896190868
GPR[EPVATF]-1659896193793
GPR[SPS]-1659896193793
GPR[EPS]-1659896245960
GPR[SPVATF]-1659896245961
GPR[EPVATF]-1659896248823
GPR[SPS]-1659896248823
GPR[EPS]-1659896268420
GPR[ESUN]-1659896268420
GPR[SSUN]-1659896268420
-1696950979
GPR[ESUN]-1659896268655
GPR[SSUN]-1659896268655
-1696950979
GPR[ESUN]-1659896268884
GPR[SSUN]-1659896268884
-46850221
GPR[SPVATF]-1659896269120
GPR[EPVATF]-1659896273056
GPR[SPS]-1659896273056
[634789] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:899.
GPR[EPS]-1659896275479
GPR[ESUN]-1659896275479
GPR[SSUN]-1659896275479
-46850221
GPR[ESUN]-1659896277768
GPR[SSUN]-1659896277778
-1797850673
GPR[SPVATF]-1659896278854
GPR[EPVATF]-1659896280846
GPR[SPS]-1659896280846
[641381] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1779.
GPR[EPS]-1659896282071
GPR[SPVATF]-1659896282072
GPR[EPVATF]-1659896283997
GPR[SPS]-1659896283998
[644175] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1779.
GPR[EPS]-1659896284866
GPR[ESUN]-1659896284866
GPR[SSUN]-1659896284866
-1797850673
GPR[SPVATF]-1659896285191
GPR[EPVATF]-1659896287166
GPR[SPS]-1659896287166
[647285] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1769.
GPR[EPS]-1659896287975
GPR[ESUN]-1659896287976
GPR[SSUN]-1659896287976
1508981886
GPR[SPVATF]-1659896288223
GPR[EPVATF]-1659896290129
GPR[SPS]-1659896290129
[650081] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1368.
GPR[EPS]-1659896290771
GPR[ESUN]-1659896290771
GPR[SSUN]-1659896290771
-1464408086
GPR[SPVATF]-1659896291061
GPR[EPVATF]-1659896293008
GPR[SPS]-1659896293008
[653140] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:688.
GPR[EPS]-1659896293830
GPR[ESUN]-1659896293830
GPR[SSUN]-1659896293830
-1464408086
GPR[SPVATF]-1659896294120
GPR[EPVATF]-1659896296069
GPR[SPS]-1659896296069
[656086] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:708.
GPR[EPS]-1659896296776
GPR[ESUN]-1659896296776
GPR[SSUN]-1659896296776
-1464408086
GPR[SPVATF]-1659896297075
GPR[EPVATF]-1659896299008
GPR[SPS]-1659896299008
[659024] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:690.
GPR[EPS]-1659896299714
GPR[ESUN]-1659896299714
GPR[SSUN]-1659896299714
-1464408086
GPR[SPVATF]-1659896300055
GPR[EPVATF]-1659896302106
GPR[SPS]-1659896302106
[662130] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:687.
GPR[EPS]-1659896302820
GPR[SPVATF]-1659896302820
GPR[EPVATF]-1659896304756
GPR[SPS]-1659896304756
[664773] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:687.
GPR[EPS]-1659896305463
GPR[ESUN]-1659896305463
GPR[SSUN]-1659896305463
-1464408086
GPR[SPVATF]-1659896305746
GPR[EPVATF]-1659896307790
GPR[SPS]-1659896307790
[667609] ERROR ConstraintModelBuilder - Unable to compile the change: 
final class FunctionTypeBuilder {
    private final java.lang.String fnName;

    private final com.google.javascript.jscomp.AbstractCompiler compiler;

    private final com.google.javascript.jscomp.CodingConvention codingConvention;

    private final com.google.javascript.rhino.jstype.JSTypeRegistry typeRegistry;

    private final com.google.javascript.rhino.Node errorRoot;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.Scope scope;

    private com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents contents = com.google.javascript.jscomp.FunctionTypeBuilder.UnknownFunctionContents.get();

    private com.google.javascript.rhino.jstype.JSType returnType = null;

    private boolean returnTypeInferred = false;

    private java.util.List<com.google.javascript.rhino.jstype.ObjectType> implementedInterfaces = null;

    private java.util.List<com.google.javascript.rhino.jstype.ObjectType> extendedInterfaces = null;

    private com.google.javascript.rhino.jstype.ObjectType baseType = null;

    private com.google.javascript.rhino.jstype.JSType thisType = null;

    private boolean isConstructor = false;

    private boolean makesStructs = false;

    private boolean makesDicts = false;

    private boolean isInterface = false;

    private com.google.javascript.rhino.Node parametersNode = null;

    private com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TemplateType> templateTypeNames = com.google.common.collect.ImmutableList.of();

    private com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TemplateType> classTemplateTypeNames = com.google.common.collect.ImmutableList.of();

    static final com.google.javascript.jscomp.DiagnosticType EXTENDS_WITHOUT_TYPEDEF = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXTENDS_WITHOUT_TYPEDEF", "@extends used without @constructor or @interface for {0}");

    static final com.google.javascript.jscomp.DiagnosticType EXTENDS_NON_OBJECT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_EXTENDS_NON_OBJECT", "{0} @extends non-object type {1}");

    static final com.google.javascript.jscomp.DiagnosticType RESOLVED_TAG_EMPTY = com.google.javascript.jscomp.DiagnosticType.warning("JSC_RESOLVED_TAG_EMPTY", "Could not resolve type in {0} tag of {1}");

    static final com.google.javascript.jscomp.DiagnosticType IMPLEMENTS_WITHOUT_CONSTRUCTOR = com.google.javascript.jscomp.DiagnosticType.warning("JSC_IMPLEMENTS_WITHOUT_CONSTRUCTOR", "@implements used without @constructor or @interface for {0}");

    static final com.google.javascript.jscomp.DiagnosticType CONSTRUCTOR_REQUIRED = com.google.javascript.jscomp.DiagnosticType.warning("JSC_CONSTRUCTOR_REQUIRED", "{0} used without @constructor for {1}");

    static final com.google.javascript.jscomp.DiagnosticType VAR_ARGS_MUST_BE_LAST = com.google.javascript.jscomp.DiagnosticType.warning("JSC_VAR_ARGS_MUST_BE_LAST", "variable length argument must be last");

    static final com.google.javascript.jscomp.DiagnosticType OPTIONAL_ARG_AT_END = com.google.javascript.jscomp.DiagnosticType.warning("JSC_OPTIONAL_ARG_AT_END", "optional arguments must be at the end");

    static final com.google.javascript.jscomp.DiagnosticType INEXISTANT_PARAM = com.google.javascript.jscomp.DiagnosticType.warning("JSC_INEXISTANT_PARAM", "parameter {0} does not appear in {1}''s parameter list");

    static final com.google.javascript.jscomp.DiagnosticType TYPE_REDEFINITION = com.google.javascript.jscomp.DiagnosticType.warning("JSC_TYPE_REDEFINITION", "attempted re-definition of type {0}\n" + ("found   : {1}\n" + "expected: {2}"));

    static final com.google.javascript.jscomp.DiagnosticType TEMPLATE_TYPE_DUPLICATED = com.google.javascript.jscomp.DiagnosticType.warning("JSC_TEMPLATE_TYPE_DUPLICATED", "Only one parameter type must be the template type");

    static final com.google.javascript.jscomp.DiagnosticType TEMPLATE_TYPE_EXPECTED = com.google.javascript.jscomp.DiagnosticType.warning("JSC_TEMPLATE_TYPE_EXPECTED", "The template type must be a parameter type");

    static final com.google.javascript.jscomp.DiagnosticType THIS_TYPE_NON_OBJECT = com.google.javascript.jscomp.DiagnosticType.warning("JSC_THIS_TYPE_NON_OBJECT", "@this type of a function must be an object\n" + "Actual type: {0}");

    static final com.google.javascript.jscomp.DiagnosticType SAME_INTERFACE_MULTIPLE_IMPLEMENTS = com.google.javascript.jscomp.DiagnosticType.warning("JSC_SAME_INTERFACE_MULTIPLE_IMPLEMENTS", "Cannot @implement the same interface more than once\n" + "Repeated interface: {0}");

    private class ExtendedTypeValidator implements com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.jstype.JSType type) {
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(type);
            if (objectType == null) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_NON_OBJECT, formatFnName(), type.toString());
                return false;
            } else if (objectType.isEmptyType()) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY, "@extends", formatFnName());
                return false;
            } else if (objectType.isUnknownType()) {
                if (com.google.javascript.jscomp.FunctionTypeBuilder.hasMoreTagsToResolve(objectType)) {
                    return true;
                } else {
                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY, "@extends", fnName);
                    return false;
                }
            } else {
                return true;
            }
        }
    }

    private class ImplementedTypeValidator implements com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> {
        @java.lang.Override
        public boolean apply(com.google.javascript.rhino.jstype.JSType type) {
            com.google.javascript.rhino.jstype.ObjectType objectType = com.google.javascript.rhino.jstype.ObjectType.cast(type);
            if (objectType == null) {
                reportError(com.google.javascript.jscomp.TypeCheck.BAD_IMPLEMENTED_TYPE, fnName);
                return false;
            } else if (objectType.isEmptyType()) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY, "@implements", fnName);
                return false;
            } else if (objectType.isUnknownType()) {
                if (com.google.javascript.jscomp.FunctionTypeBuilder.hasMoreTagsToResolve(objectType)) {
                    return true;
                } else {
                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY, "@implements", fnName);
                    return false;
                }
            } else {
                return true;
            }
        }
    }

    FunctionTypeBuilder(java.lang.String fnName, com.google.javascript.jscomp.AbstractCompiler compiler, com.google.javascript.rhino.Node errorRoot, java.lang.String sourceName, com.google.javascript.jscomp.Scope scope) {
        com.google.common.base.Preconditions.checkNotNull(errorRoot);
        this.fnName = (fnName == null) ? "" : fnName;
        this.codingConvention = compiler.getCodingConvention();
        this.typeRegistry = compiler.getTypeRegistry();
        this.errorRoot = errorRoot;
        this.sourceName = sourceName;
        this.compiler = compiler;
        this.scope = scope;
    }

    java.lang.String formatFnName() {
        return fnName.isEmpty() ? "<anonymous>" : fnName;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder setContents(@javax.annotation.Nullable
    com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents contents) {
        if (contents != null) {
            this.contents = contents;
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferFromOverriddenFunction(@javax.annotation.Nullable
    com.google.javascript.rhino.jstype.FunctionType oldType, @javax.annotation.Nullable
    com.google.javascript.rhino.Node paramsParent) {
        if (oldType == null) {
            return this;
        }
        returnType = oldType.getReturnType();
        returnTypeInferred = oldType.isReturnTypeInferred();
        if (paramsParent == null) {
            parametersNode = oldType.getParametersNode();
            if (parametersNode == null) {
                parametersNode = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry).build();
            }
        } else {
            com.google.javascript.rhino.jstype.FunctionParamBuilder paramBuilder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry);
            java.util.Iterator<com.google.javascript.rhino.Node> oldParams = oldType.getParameters().iterator();
            boolean warnedAboutArgList = false;
            boolean oldParamsListHitOptArgs = false;
            for (com.google.javascript.rhino.Node currentParam = paramsParent.getFirstChild(); currentParam != null; currentParam = currentParam.getNext()) {
                if (oldParams.hasNext()) {
                    com.google.javascript.rhino.Node oldParam = oldParams.next();
                    com.google.javascript.rhino.Node newParam = paramBuilder.newParameterFromNode(oldParam);
                    oldParamsListHitOptArgs = (oldParamsListHitOptArgs || oldParam.isVarArgs()) || oldParam.isOptionalArg();
                    if ((currentParam.getNext() != null) && newParam.isVarArgs()) {
                        newParam.setVarArgs(false);
                        newParam.setOptionalArg(true);
                    }
                } else {
                    warnedAboutArgList |= addParameter(paramBuilder, typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE), warnedAboutArgList, codingConvention.isOptionalParameter(currentParam) || oldParamsListHitOptArgs, codingConvention.isVarArgsParameter(currentParam));
                }
            }
            while (oldParams.hasNext()) {
                paramBuilder.newOptionalParameterFromNode(oldParams.next());
            } 
            parametersNode = paramBuilder.build();
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferReturnType(@javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if ((info != null) && info.hasReturnType()) {
            returnType = info.getReturnType().evaluate(scope, typeRegistry);
            returnTypeInferred = false;
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferInheritance(@javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if (info != null) {
            isConstructor = info.isConstructor();
            makesStructs = info.makesStructs();
            makesDicts = info.makesDicts();
            isInterface = info.isInterface();
            if (makesStructs && (!isConstructor)) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.CONSTRUCTOR_REQUIRED, "@struct", formatFnName());
            } else if (makesDicts && (!isConstructor)) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.CONSTRUCTOR_REQUIRED, "@dict", formatFnName());
            }
            com.google.common.collect.ImmutableList<java.lang.String> typeParameters = info.getTemplateTypeNames();
            if (!typeParameters.isEmpty()) {
                if (isConstructor || isInterface) {
                    com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.jstype.TemplateType> builder = com.google.common.collect.ImmutableList.builder();
                    for (java.lang.String typeParameter : typeParameters) {
                        builder.add(typeRegistry.createTemplateType(typeParameter));
                    }
                    classTemplateTypeNames = builder.build();
                    typeRegistry.setTemplateTypeNames(classTemplateTypeNames);
                }
            }
            if (info.hasBaseType()) {
                if (isConstructor) {
                    com.google.javascript.rhino.jstype.JSType maybeBaseType = info.getBaseType().evaluate(scope, typeRegistry);
                    if ((maybeBaseType != null) && maybeBaseType.setValidator(new com.google.javascript.jscomp.FunctionTypeBuilder.ExtendedTypeValidator())) {
                        baseType = ((com.google.javascript.rhino.jstype.ObjectType) (maybeBaseType));
                    }
                } else {
                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_WITHOUT_TYPEDEF, formatFnName());
                }
            }
            if (info.getImplementedInterfaceCount() > 0) {
                if (isConstructor) {
                    implementedInterfaces = com.google.common.collect.Lists.newArrayList();
                    java.util.Set<com.google.javascript.rhino.jstype.JSType> baseInterfaces = new java.util.HashSet<com.google.javascript.rhino.jstype.JSType>();
                    for (com.google.javascript.rhino.JSTypeExpression t : info.getImplementedInterfaces()) {
                        com.google.javascript.rhino.jstype.JSType maybeInterType = t.evaluate(scope, typeRegistry);
                        if ((maybeInterType != null) && maybeInterType.setValidator(new com.google.javascript.jscomp.FunctionTypeBuilder.ImplementedTypeValidator())) {
                            com.google.javascript.rhino.jstype.JSType baseInterface = maybeInterType;
                            if (baseInterface.toMaybeTemplatizedType() != null) {
                                baseInterface = baseInterface.toMaybeTemplatizedType().getReferencedType();
                            }
                            if (baseInterfaces.contains(baseInterface)) {
                                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.SAME_INTERFACE_MULTIPLE_IMPLEMENTS, baseInterface.toString());
                            } else {
                                baseInterfaces.add(baseInterface);
                            }
                            implementedInterfaces.add(((com.google.javascript.rhino.jstype.ObjectType) (maybeInterType)));
                        }
                    }
                } else if (isInterface) {
                    reportWarning(com.google.javascript.jscomp.TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, formatFnName());
                } else {
                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.CONSTRUCTOR_REQUIRED, "@implements", formatFnName());
                }
            }
            if (isInterface) {
                extendedInterfaces = com.google.common.collect.Lists.newArrayList();
                for (com.google.javascript.rhino.JSTypeExpression t : info.getExtendedInterfaces()) {
                    com.google.javascript.rhino.jstype.JSType maybeInterfaceType = t.evaluate(scope, typeRegistry);
                    if ((maybeInterfaceType != null) && maybeInterfaceType.setValidator(new com.google.javascript.jscomp.FunctionTypeBuilder.ExtendedTypeValidator())) {
                        extendedInterfaces.add(((com.google.javascript.rhino.jstype.ObjectType) (maybeInterfaceType)));
                    }
                }
            }
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferThisType(com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType type) {
        inferThisType(info);
        if (thisType == null) {
            com.google.javascript.rhino.jstype.ObjectType objType = com.google.javascript.rhino.jstype.ObjectType.cast(type);
            if ((objType != null) && ((info == null) || (!info.hasType()))) {
                thisType = objType;
            }
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferThisType(com.google.javascript.rhino.JSDocInfo info) {
        com.google.javascript.rhino.jstype.JSType maybeThisType = null;
        if ((info != null) && info.hasThisType()) {
            maybeThisType = info.getThisType().evaluate(scope, typeRegistry).restrictByNotNullOrUndefined();
        }
        if (maybeThisType != null) {
            thisType = maybeThisType;
        }
        return this;
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferParameterTypes(com.google.javascript.rhino.JSDocInfo info) {
        com.google.javascript.rhino.Node lp = com.google.javascript.rhino.IR.paramList();
        for (java.lang.String name : info.getParameterNames()) {
            lp.addChildToBack(com.google.javascript.rhino.IR.name(name));
        }
        return inferParameterTypes(lp, info);
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferParameterTypes(@javax.annotation.Nullable
    com.google.javascript.rhino.Node argsParent, @javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if (argsParent == null) {
            if (info == null) {
                return this;
            } else {
                return inferParameterTypes(info);
            }
        }
        com.google.javascript.rhino.Node oldParameterType = null;
        if (parametersNode != null) {
            oldParameterType = parametersNode.getFirstChild();
        }
        com.google.javascript.rhino.jstype.FunctionParamBuilder builder = new com.google.javascript.rhino.jstype.FunctionParamBuilder(typeRegistry);
        boolean warnedAboutArgList = false;
        java.util.Set<java.lang.String> allJsDocParams = (info == null) ? com.google.common.collect.Sets.<java.lang.String>newHashSet() : com.google.common.collect.Sets.newHashSet(info.getParameterNames());
        boolean isVarArgs = false;
        for (com.google.javascript.rhino.Node arg : argsParent.children()) {
            java.lang.String argumentName = arg.getString();
            allJsDocParams.remove(argumentName);
            com.google.javascript.rhino.jstype.JSType parameterType = null;
            boolean isOptionalParam = isOptionalParameter(arg, info);
            isVarArgs = isVarArgsParameter(arg, info);
            if ((info != null) && info.hasParameterType(argumentName)) {
                parameterType = info.getParameterType(argumentName).evaluate(scope, typeRegistry);
            } else if ((arg.getJSDocInfo() != null) && arg.getJSDocInfo().hasType()) {
                parameterType = arg.getJSDocInfo().getType().evaluate(scope, typeRegistry);
            } else if ((oldParameterType != null) && (oldParameterType.getJSType() != null)) {
                parameterType = oldParameterType.getJSType();
                isOptionalParam = oldParameterType.isOptionalArg();
                isVarArgs = oldParameterType.isVarArgs();
            } else {
                parameterType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
            }
            warnedAboutArgList |= addParameter(builder, parameterType, warnedAboutArgList, isOptionalParam, isVarArgs);
            if (oldParameterType != null) {
                oldParameterType = oldParameterType.getNext();
            }
        }
        if (!isVarArgs) {
            while ((oldParameterType != null) && (!isVarArgs)) {
                builder.newParameterFromNode(oldParameterType);
                oldParameterType = oldParameterType.getNext();
            } 
        }
        for (java.lang.String inexistentName : allJsDocParams) {
            reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.INEXISTANT_PARAM, inexistentName, formatFnName());
        }
        parametersNode = builder.build();
        return this;
    }

    private boolean isOptionalParameter(com.google.javascript.rhino.Node param, @javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if (codingConvention.isOptionalParameter(param)) {
            return true;
        }
        java.lang.String paramName = param.getString();
        return ((info != null) && info.hasParameterType(paramName)) && info.getParameterType(paramName).isOptionalArg();
    }

    private boolean isVarArgsParameter(com.google.javascript.rhino.Node param, @javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info) {
        if (codingConvention.isVarArgsParameter(param)) {
            return true;
        }
        java.lang.String paramName = param.getString();
        return ((info != null) && info.hasParameterType(paramName)) && info.getParameterType(paramName).isVarArgs();
    }

    com.google.javascript.jscomp.FunctionTypeBuilder inferTemplateTypeName(@javax.annotation.Nullable
    com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.jstype.JSType ownerType) {
        if ((info != null) && (!info.getTemplateTypeNames().isEmpty())) {
            com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.jstype.TemplateType> builder = com.google.common.collect.ImmutableList.builder();
            for (java.lang.String key : info.getTemplateTypeNames()) {
                builder.add(typeRegistry.createTemplateType(key));
            }
            templateTypeNames = builder.build();
        } else {
            templateTypeNames = com.google.common.collect.ImmutableList.of();
        }
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TemplateType> keys = templateTypeNames;
        if (ownerType != null) {
            com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TemplateType> ownerTypeKeys = ownerType.getTemplateTypeMap().getTemplateKeys();
            if (!ownerTypeKeys.isEmpty()) {
                com.google.common.collect.ImmutableList.Builder<com.google.javascript.rhino.jstype.TemplateType> builder = com.google.common.collect.ImmutableList.builder();
                builder.addAll(templateTypeNames);
                builder.addAll(ownerTypeKeys);
                keys = builder.build();
            }
        }
        if (!keys.isEmpty()) {
            typeRegistry.setTemplateTypeNames(keys);
        }
        return this;
    }

    private boolean addParameter(com.google.javascript.rhino.jstype.FunctionParamBuilder builder, com.google.javascript.rhino.jstype.JSType paramType, boolean warnedAboutArgList, boolean isOptional, boolean isVarArgs) {
        boolean emittedWarning = false;
        if (isOptional) {
            if ((!builder.addOptionalParams(paramType)) && (!warnedAboutArgList)) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);
                emittedWarning = true;
            }
        } else if (isVarArgs) {
            if ((!builder.addVarArgs(paramType)) && (!warnedAboutArgList)) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);
                emittedWarning = true;
            }
        } else if ((!builder.addRequiredParams(paramType)) && (!warnedAboutArgList)) {
            if (builder.hasVarArgs()) {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);
            } else {
                reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.OPTIONAL_ARG_AT_END);
            }
            emittedWarning = true;
        }
        return emittedWarning;
    }

    com.google.javascript.rhino.jstype.FunctionType buildAndRegister() {
        if (returnType == null) {
            if (((!contents.mayHaveNonEmptyReturns()) && (!contents.mayHaveSingleThrow())) && (!contents.mayBeFromExterns())) {
                returnType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE);
                returnTypeInferred = true;
            }
        }
        if (returnType == null) {
            returnType = typeRegistry.getNativeType(com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE);
        }
        if (parametersNode == null) {
            throw new java.lang.IllegalStateException("All Function types must have params and a return type");
        }
        com.google.javascript.rhino.jstype.FunctionType fnType;
        if (isConstructor) {
            fnType = getOrCreateConstructor();
        } else if (isInterface) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(78).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.baseType",com.google.javascript.jscomp.FunctionTypeBuilder.this.baseType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.parametersNode",com.google.javascript.jscomp.FunctionTypeBuilder.this.parametersNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_NON_OBJECT",com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.TYPE_REDEFINITION",com.google.javascript.jscomp.FunctionTypeBuilder.TYPE_REDEFINITION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT",com.google.javascript.jscomp.FunctionTypeBuilder.THIS_TYPE_NON_OBJECT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.errorRoot",com.google.javascript.jscomp.FunctionTypeBuilder.this.errorRoot);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.returnType",com.google.javascript.jscomp.FunctionTypeBuilder.this.returnType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.thisType",com.google.javascript.jscomp.FunctionTypeBuilder.this.thisType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.returnTypeInferred",com.google.javascript.jscomp.FunctionTypeBuilder.this.returnTypeInferred);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.templateTypeNames",com.google.javascript.jscomp.FunctionTypeBuilder.this.templateTypeNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.sourceName",com.google.javascript.jscomp.FunctionTypeBuilder.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.IMPLEMENTS_WITHOUT_CONSTRUCTOR",com.google.javascript.jscomp.FunctionTypeBuilder.IMPLEMENTS_WITHOUT_CONSTRUCTOR);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.fnName",com.google.javascript.jscomp.FunctionTypeBuilder.this.fnName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED",com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST",com.google.javascript.jscomp.FunctionTypeBuilder.VAR_ARGS_MUST_BE_LAST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.extendedInterfaces",com.google.javascript.jscomp.FunctionTypeBuilder.this.extendedInterfaces);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.OPTIONAL_ARG_AT_END",com.google.javascript.jscomp.FunctionTypeBuilder.OPTIONAL_ARG_AT_END);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED",com.google.javascript.jscomp.FunctionTypeBuilder.TEMPLATE_TYPE_DUPLICATED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.scope",com.google.javascript.jscomp.FunctionTypeBuilder.this.scope);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY",com.google.javascript.jscomp.FunctionTypeBuilder.RESOLVED_TAG_EMPTY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.makesStructs",com.google.javascript.jscomp.FunctionTypeBuilder.this.makesStructs);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.INEXISTANT_PARAM",com.google.javascript.jscomp.FunctionTypeBuilder.INEXISTANT_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.SAME_INTERFACE_MULTIPLE_IMPLEMENTS",com.google.javascript.jscomp.FunctionTypeBuilder.SAME_INTERFACE_MULTIPLE_IMPLEMENTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.classTemplateTypeNames",com.google.javascript.jscomp.FunctionTypeBuilder.this.classTemplateTypeNames);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.codingConvention",com.google.javascript.jscomp.FunctionTypeBuilder.this.codingConvention);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.makesDicts",com.google.javascript.jscomp.FunctionTypeBuilder.this.makesDicts);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_WITHOUT_TYPEDEF",com.google.javascript.jscomp.FunctionTypeBuilder.EXTENDS_WITHOUT_TYPEDEF);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.contents",com.google.javascript.jscomp.FunctionTypeBuilder.this.contents);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.isConstructor",com.google.javascript.jscomp.FunctionTypeBuilder.this.isConstructor);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.compiler",com.google.javascript.jscomp.FunctionTypeBuilder.this.compiler);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.implementedInterfaces",com.google.javascript.jscomp.FunctionTypeBuilder.this.implementedInterfaces);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.isInterface",com.google.javascript.jscomp.FunctionTypeBuilder.this.isInterface);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.CONSTRUCTOR_REQUIRED",com.google.javascript.jscomp.FunctionTypeBuilder.CONSTRUCTOR_REQUIRED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectInput("com.google.javascript.jscomp.FunctionTypeBuilder.this.typeRegistry",com.google.javascript.jscomp.FunctionTypeBuilder.this.typeRegistry);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(78).collectionEnds();
            }
            if (runtimeAngelicValue)
                fnType = typeRegistry.createInterfaceType(fnName, contents.getSourceNode(), classTemplateTypeNames);

            if (getScopeDeclaredIn().isGlobal() && (!fnName.isEmpty())) {
                typeRegistry.declareType(fnName, fnType.getInstanceType());
            }
            maybeSetBaseType(fnType);
        } else {
            fnType = new com.google.javascript.rhino.jstype.FunctionBuilder(typeRegistry).withName(fnName).withSourceNode(contents.getSourceNode()).withParamsNode(parametersNode).withReturnType(returnType, returnTypeInferred).withTypeOfThis(thisType).withTemplateKeys(templateTypeNames).build();
            maybeSetBaseType(fnType);
        }
        if (implementedInterfaces != null) {
            fnType.setImplementedInterfaces(implementedInterfaces);
        }
        if (extendedInterfaces != null) {
            fnType.setExtendedInterfaces(extendedInterfaces);
        }
        typeRegistry.clearTemplateTypeNames();
        return fnType;
    }

    private void maybeSetBaseType(com.google.javascript.rhino.jstype.FunctionType fnType) {
        if ((!fnType.isInterface()) && (baseType != null)) {
            fnType.setPrototypeBasedOn(baseType);
        }
    }

    private com.google.javascript.rhino.jstype.FunctionType getOrCreateConstructor() {
        com.google.javascript.rhino.jstype.FunctionType fnType = typeRegistry.createConstructorType(fnName, contents.getSourceNode(), parametersNode, returnType, classTemplateTypeNames);
        com.google.javascript.rhino.jstype.JSType existingType = typeRegistry.getType(fnName);
        if (makesStructs) {
            fnType.setStruct();
        } else if (makesDicts) {
            fnType.setDict();
        }
        if (existingType != null) {
            boolean isInstanceObject = existingType.isInstanceType();
            if (isInstanceObject || fnName.equals("Function")) {
                com.google.javascript.rhino.jstype.FunctionType existingFn = (isInstanceObject) ? existingType.toObjectType().getConstructor() : typeRegistry.getNativeFunctionType(com.google.javascript.rhino.jstype.JSTypeNative.FUNCTION_FUNCTION_TYPE);
                if (existingFn.getSource() == null) {
                    existingFn.setSource(contents.getSourceNode());
                }
                if (!existingFn.hasEqualCallType(fnType)) {
                    reportWarning(com.google.javascript.jscomp.FunctionTypeBuilder.TYPE_REDEFINITION, formatFnName(), fnType.toString(), existingFn.toString());
                }
                return existingFn;
            } else {
            }
        }
        maybeSetBaseType(fnType);
        if (getScopeDeclaredIn().isGlobal() && (!fnName.isEmpty())) {
            typeRegistry.declareType(fnName, fnType.getInstanceType());
        }
        return fnType;
    }

    private void reportWarning(com.google.javascript.jscomp.DiagnosticType warning, java.lang.String... args) {
        compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, errorRoot, warning, args));
    }

    private void reportError(com.google.javascript.jscomp.DiagnosticType error, java.lang.String... args) {
        compiler.report(com.google.javascript.jscomp.JSError.make(sourceName, errorRoot, error, args));
    }

    static boolean isFunctionTypeDeclaration(com.google.javascript.rhino.JSDocInfo info) {
        return ((((info.getParameterCount() > 0) || info.hasReturnType()) || info.hasThisType()) || info.isConstructor()) || info.isInterface();
    }

    private com.google.javascript.jscomp.Scope getScopeDeclaredIn() {
        int dotIndex = fnName.indexOf(".");
        if (dotIndex != (-1)) {
            java.lang.String rootVarName = fnName.substring(0, dotIndex);
            com.google.javascript.jscomp.Scope.Var rootVar = scope.getVar(rootVarName);
            if (rootVar != null) {
                return rootVar.getScope();
            }
        }
        return scope;
    }

    private static boolean hasMoreTagsToResolve(com.google.javascript.rhino.jstype.ObjectType objectType) {
        com.google.common.base.Preconditions.checkArgument(objectType.isUnknownType());
        if (objectType.getImplicitPrototype() != null) {
            if (objectType.getImplicitPrototype().isResolved()) {
                return false;
            } else {
                return true;
            }
        } else {
            com.google.javascript.rhino.jstype.FunctionType ctor = objectType.getConstructor();
            if (ctor != null) {
                for (com.google.javascript.rhino.jstype.ObjectType interfaceType : ctor.getExtendedInterfaces()) {
                    if (!interfaceType.isResolved()) {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    static interface FunctionContents {
        public abstract com.google.javascript.rhino.Node getSourceNode();

        public abstract boolean mayBeFromExterns();

        public abstract boolean mayHaveNonEmptyReturns();

        public abstract boolean mayHaveSingleThrow();

        public abstract java.lang.Iterable<java.lang.String> getEscapedVarNames();

        public abstract java.util.Set<java.lang.String> getEscapedQualifiedNames();

        public abstract com.google.common.collect.Multiset<java.lang.String> getAssignedNameCounts();
    }

    static class UnknownFunctionContents implements com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents {
        private static com.google.javascript.jscomp.FunctionTypeBuilder.UnknownFunctionContents singleton = new com.google.javascript.jscomp.FunctionTypeBuilder.UnknownFunctionContents();

        static com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents get() {
            return com.google.javascript.jscomp.FunctionTypeBuilder.UnknownFunctionContents.singleton;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getSourceNode() {
            return null;
        }

        @java.lang.Override
        public boolean mayBeFromExterns() {
            return true;
        }

        @java.lang.Override
        public boolean mayHaveNonEmptyReturns() {
            return true;
        }

        @java.lang.Override
        public boolean mayHaveSingleThrow() {
            return true;
        }

        @java.lang.Override
        public java.lang.Iterable<java.lang.String> getEscapedVarNames() {
            return com.google.common.collect.ImmutableList.of();
        }

        @java.lang.Override
        public java.util.Set<java.lang.String> getEscapedQualifiedNames() {
            return com.google.common.collect.ImmutableSet.of();
        }

        @java.lang.Override
        public com.google.common.collect.Multiset<java.lang.String> getAssignedNameCounts() {
            return com.google.common.collect.ImmutableMultiset.of();
        }
    }

    static class AstFunctionContents implements com.google.javascript.jscomp.FunctionTypeBuilder.FunctionContents {
        private final com.google.javascript.rhino.Node n;

        private boolean hasNonEmptyReturns = false;

        private java.util.Set<java.lang.String> escapedVarNames;

        private java.util.Set<java.lang.String> escapedQualifiedNames;

        private final com.google.common.collect.Multiset<java.lang.String> assignedVarNames = com.google.common.collect.HashMultiset.create();

        AstFunctionContents(com.google.javascript.rhino.Node n) {
            this.n = n;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getSourceNode() {
            return n;
        }

        @java.lang.Override
        public boolean mayBeFromExterns() {
            return n.isFromExterns();
        }

        @java.lang.Override
        public boolean mayHaveNonEmptyReturns() {
            return hasNonEmptyReturns;
        }

        void recordNonEmptyReturn() {
            hasNonEmptyReturns = true;
        }

        @java.lang.Override
        public boolean mayHaveSingleThrow() {
            com.google.javascript.rhino.Node block = n.getLastChild();
            return block.hasOneChild() && block.getFirstChild().isThrow();
        }

        @java.lang.Override
        public java.lang.Iterable<java.lang.String> getEscapedVarNames() {
            return escapedVarNames == null ? com.google.common.collect.ImmutableList.<java.lang.String>of() : escapedVarNames;
        }

        void recordEscapedVarName(java.lang.String name) {
            if (escapedVarNames == null) {
                escapedVarNames = com.google.common.collect.Sets.newHashSet();
            }
            escapedVarNames.add(name);
        }

        @java.lang.Override
        public java.util.Set<java.lang.String> getEscapedQualifiedNames() {
            return escapedQualifiedNames == null ? com.google.common.collect.ImmutableSet.<java.lang.String>of() : escapedQualifiedNames;
        }

        void recordEscapedQualifiedName(java.lang.String name) {
            if (escapedQualifiedNames == null) {
                escapedQualifiedNames = com.google.common.collect.Sets.newHashSet();
            }
            escapedQualifiedNames.add(name);
        }

        @java.lang.Override
        public com.google.common.collect.Multiset<java.lang.String> getAssignedNameCounts() {
            return assignedVarNames;
        }

        void recordAssignedName(java.lang.String name) {
            assignedVarNames.add(name);
        }
    }
}
[667609] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659896308299
GPR[SSUN]-1659896308299
-1464408086
GPR[SPVATF]-1659896308605
GPR[EPVATF]-1659896310616
GPR[SPS]-1659896310616
[670628] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:405.
GPR[EPS]-1659896311318
GPR[ESUN]-1659896311318
GPR[SSUN]-1659896311318
-1464408086
GPR[SPVATF]-1659896311623
GPR[EPVATF]-1659896313724
GPR[SPS]-1659896313724
[673856] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FunctionTypeBuilder:404.
GPR[EPS]-1659896314546
GPR[ESUN]-1659896314546
GPR[SSUN]-1659896314546
-46850221
GPR[SPVATF]-1659896314788
GPR[EPVATF]-1659896316848
GPR[SPS]-1659896316848
[676746] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:898.
GPR[EPS]-1659896317436
GPR[SPVATF]-1659896317436
GPR[EPVATF]-1659896319586
GPR[SPS]-1659896319586
[679479] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:898.
GPR[EPS]-1659896320169
GPR[ESUN]-1659896320169
GPR[SSUN]-1659896320169
-132053243
GPR[ESUN]-1659896320387
GPR[SSUN]-1659896320387
-132053243
GPR[SPVATF]-1659896320674
GPR[EPVATF]-1659896320695
[680005] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659896320695
GPR[SSUN]-1659896320695
1508981886
GPR[SPVATF]-1659896320920
GPR[EPVATF]-1659896323230
GPR[SPS]-1659896323230
[683083] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1367.
GPR[EPS]-1659896323773
GPR[SPVATF]-1659896323773
GPR[EPVATF]-1659896326257
GPR[SPS]-1659896326257
[687231] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:1367.
GPR[EPS]-1659896327921
GPR[ESUN]-1659896327921
GPR[SSUN]-1659896327921
711965926
GPR[ESUN]-1659896328110
GPR[SSUN]-1659896328110
711965926
GPR[SPVATF]-1659896328294
GPR[EPVATF]-1659896330784
GPR[SPS]-1659896330784
[690616] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:36.
GPR[EPS]-1659896331306
GPR[ESUN]-1659896331306
GPR[SSUN]-1659896331306
-1093533311
GPR[ESUN]-1659896331572
GPR[SSUN]-1659896331573
GPR[ESUN]-1659896331573
GPR[SSUN]-1659896331573
2433571
GPR[ESUN]-1659896331826
GPR[SSUN]-1659896331826
160819208
GPR[SPVATF]-1659896332081
GPR[EPVATF]-1659896334754
GPR[SPS]-1659896334754
[694673] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:363.
GPR[EPS]-1659896335363
GPR[ESUN]-1659896335363
GPR[SSUN]-1659896335363
160819208
GPR[ESUN]-1659896335606
GPR[SSUN]-1659896335606
-1251822497
GPR[ESUN]-1659896335817
GPR[SSUN]-1659896335817
-1251822497
GPR[SPVATF]-1659896336014
GPR[EPVATF]-1659896338752
GPR[SPS]-1659896338752
[698525] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:893.
GPR[EPS]-1659896339215
GPR[ESUN]-1659896339215
GPR[SSUN]-1659896339215
-1251822497
GPR[SPVATF]-1659896339413
GPR[EPVATF]-1659896342221
GPR[SPS]-1659896342221
[701994] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:892.
GPR[EPS]-1659896342684
GPR[ESUN]-1659896342685
GPR[SSUN]-1659896342685
1508981886
GPR[ESUN]-1659896342904
GPR[SSUN]-1659896342904
1508981886
GPR[SPVATF]-1659896343114
GPR[EPVATF]-1659896345946
GPR[SPS]-1659896345946
[705805] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:407.
GPR[EPS]-1659896346495
GPR[ESUN]-1659896346495
GPR[SSUN]-1659896346495
-1251822497
GPR[SPVATF]-1659896346695
GPR[EPVATF]-1659896349539
GPR[SPS]-1659896349539
[709314] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:887.
GPR[EPS]-1659896350004
GPR[SPVATF]-1659896350004
GPR[EPVATF]-1659896352810
GPR[SPS]-1659896352810
[712585] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:887.
GPR[EPS]-1659896353275
GPR[ESUN]-1659896353275
GPR[SSUN]-1659896353275
-179796259
GPR[ESUN]-1659896353529
GPR[SSUN]-1659896353529
-179796259
GPR[SPVATF]-1659896353783
GPR[EPVATF]-1659896356639
GPR[SPS]-1659896356639
[716698] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:371.
GPR[EPS]-1659896357388
GPR[SPVATF]-1659896357388
GPR[EPVATF]-1659896360240
GPR[SPS]-1659896360240
[720304] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.JsDocInfoParser:371.
GPR[EPS]-1659896360994
GPR[ESUN]-1659896360994
GPR[SSUN]-1659896360994
GPR[ESUN]-1659896360994
GPR[SSUN]-1659896360994
GPR[ESUN]-1659896360994
GPR[SSUN]-1659896360994
GPR[ESUN]-1659896360994
GPR[SSUN]-1659896360994
GPR[ESUN]-1659896360994
GPR[SSUN]-1659896360994
GPR[ESUN]-1659896360994
GPR[SSUN]-1659896360994
466431456
GPR[SPVATF]-1659896361288
GPR[EPVATF]-1659896364201
GPR[SPS]-1659896364201
[724238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:289.
GPR[EPS]-1659896364928
GPR[ESUN]-1659896364928
GPR[SSUN]-1659896364928
466431456
GPR[SPVATF]-1659896365233
GPR[EPVATF]-1659896368092
GPR[SPS]-1659896368092
GPR[EPS]-1659896380756
GPR[ESUN]-1659896380757
GPR[SSUN]-1659896380757
466431456
GPR[SPVATF]-1659896381076
GPR[EPVATF]-1659896385972
GPR[SPS]-1659896385972
[748173] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:288.
GPR[EPS]-1659896388863
GPR[SPVATF]-1659896388864
GPR[EPVATF]-1659896390780
GPR[SPS]-1659896390780
[751283] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:288.
GPR[EPS]-1659896391973
GPR[ESUN]-1659896391973
GPR[SSUN]-1659896391973
GPR[ESUN]-1659896391973
GPR[SSUN]-1659896391973
160819208
GPR[ESUN]-1659896392318
GPR[SSUN]-1659896392318
160819208
GPR[SPVATF]-1659896392627
GPR[EPVATF]-1659896394583
GPR[SPS]-1659896394583
[754668] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:368.
GPR[EPS]-1659896395358
GPR[ESUN]-1659896395359
GPR[SSUN]-1659896395359
160819208
GPR[SPVATF]-1659896395658
GPR[EPVATF]-1659896397645
GPR[SPS]-1659896397645
[757730] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:362.
GPR[EPS]-1659896398421
GPR[SPVATF]-1659896398421
GPR[EPVATF]-1659896400321
GPR[SPS]-1659896400321
[760379] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:362.
GPR[EPS]-1659896401069
GPR[ESUN]-1659896401069
GPR[SSUN]-1659896401069
160819208
GPR[SPVATF]-1659896401334
GPR[EPVATF]-1659896403264
GPR[SPS]-1659896403264
GPR[EPS]-1659896427465
GPR[ESUN]-1659896427465
GPR[SSUN]-1659896427465
160819208
GPR[ESUN]-1659896427716
GPR[SSUN]-1659896427716
160819208
GPR[ESUN]-1659896427966
GPR[SSUN]-1659896427966
160819208
GPR[ESUN]-1659896428238
GPR[SSUN]-1659896428238
160819208
GPR[SPVATF]-1659896428488
GPR[EPVATF]-1659896430451
GPR[SPS]-1659896430451
GPR[EPS]-1659896460793
GPR[ESUN]-1659896460793
GPR[SSUN]-1659896460793
466431456
GPR[SPVATF]-1659896461156
GPR[EPVATF]-1659896463107
GPR[SPS]-1659896463107
GPR[EPS]-1659896479402
GPR[SPVATF]-1659896479403
GPR[EPVATF]-1659896481395
GPR[SPS]-1659896481395
[841536] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:258.
GPR[EPS]-1659896482226
GPR[ESUN]-1659896482226
GPR[SSUN]-1659896482226
466431456
GPR[SPVATF]-1659896482532
GPR[EPVATF]-1659896484643
GPR[SPS]-1659896484644
[844725] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:420.
GPR[EPS]-1659896485415
GPR[ESUN]-1659896485415
GPR[SSUN]-1659896485415
466431456
GPR[SPVATF]-1659896485727
GPR[EPVATF]-1659896487868
GPR[SPS]-1659896487868
[847936] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:419.
GPR[EPS]-1659896488626
GPR[ESUN]-1659896488626
GPR[SSUN]-1659896488626
466431456
GPR[SPVATF]-1659896488927
GPR[EPVATF]-1659896491124
GPR[SPS]-1659896491124
[851281] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:418.
GPR[EPS]-1659896491971
GPR[ESUN]-1659896491971
GPR[SSUN]-1659896491971
466431456
GPR[SPVATF]-1659896492269
GPR[EPVATF]-1659896494601
GPR[SPS]-1659896494601
GPR[EPS]-1659896515734
GPR[SPVATF]-1659896515734
GPR[EPVATF]-1659896518315
GPR[SPS]-1659896518315
GPR[EPS]-1659896543110
GPR[ESUN]-1659896543111
GPR[SSUN]-1659896543111
466431456
GPR[SPVATF]-1659896543412
GPR[EPVATF]-1659896546182
GPR[SPS]-1659896546182
[906279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:245.
GPR[EPS]-1659896546969
GPR[SPVATF]-1659896546970
GPR[EPVATF]-1659896549804
GPR[SPS]-1659896549804
GPR[EPS]-1659896565143
GPR[ESUN]-1659896565144
GPR[SSUN]-1659896565144
466431456
GPR[SPVATF]-1659896565585
GPR[EPVATF]-1659896568428
GPR[SPS]-1659896568428
GPR[EPS]-1659896585299
GPR[ESUN]-1659896585299
GPR[SSUN]-1659896585299
466431456
GPR[SPVATF]-1659896585596
GPR[EPVATF]-1659896588442
GPR[SPS]-1659896588442
GPR[EPS]-1659896607965
GPR[SPVATF]-1659896607966
GPR[EPVATF]-1659896610820
GPR[SPS]-1659896610820
GPR[EPS]-1659896625316
GPR[ESUN]-1659896625317
GPR[SSUN]-1659896625317
466431456
GPR[SPVATF]-1659896625725
GPR[EPVATF]-1659896628626
GPR[SPS]-1659896628626
[988674] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:211.
GPR[EPS]-1659896629364
GPR[SPVATF]-1659896629364
GPR[EPVATF]-1659896633513
GPR[SPS]-1659896633513
GPR[EPS]-1659896651724
GPR[ESUN]-1659896651724
GPR[SSUN]-1659896651724
-2097135580
GPR[ESUN]-1659896652031
GPR[SSUN]-1659896652031
160819208
GPR[ESUN]-1659896652357
GPR[SSUN]-1659896652357
-711686510
GPR[SPVATF]-1659896652681
GPR[EPVATF]-1659896654808
GPR[SPS]-1659896654808
[1015055] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:162.
GPR[EPS]-1659896655746
GPR[ESUN]-1659896655746
GPR[SSUN]-1659896655746
-711686510
GPR[SPVATF]-1659896656018
GPR[EPVATF]-1659896658053
GPR[SPS]-1659896658053
GPR[EPS]-1659896689010
GPR[ESUN]-1659896689010
GPR[SSUN]-1659896689010
-2097135580
GPR[ESUN]-1659896689381
GPR[SSUN]-1659896689381
1187751237
GPR[ESUN]-1659896689747
GPR[SSUN]-1659896689747
-46850221
GPR[ESUN]-1659896690012
GPR[SSUN]-1659896690012
-46850221
GPR[SPVATF]-1659896690271
GPR[EPVATF]-1659896692256
GPR[SPS]-1659896692256
[1052254] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:584.
GPR[EPS]-1659896692944
GPR[ESUN]-1659896692944
GPR[SSUN]-1659896692944
-46850221
GPR[SPVATF]-1659896693193
GPR[EPVATF]-1659896695130
GPR[SPS]-1659896695130
[1055070] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:583.
GPR[EPS]-1659896695760
GPR[ESUN]-1659896695760
GPR[SSUN]-1659896695760
-46850221
GPR[SPVATF]-1659896696013
GPR[EPVATF]-1659896698010
GPR[SPS]-1659896698010
[1057952] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:582.
GPR[EPS]-1659896698642
GPR[SPVATF]-1659896698643
GPR[EPVATF]-1659896700639
GPR[SPS]-1659896700639
[1060640] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:582.
GPR[EPS]-1659896701330
GPR[ESUN]-1659896701330
GPR[SSUN]-1659896701330
-46850221
GPR[SPVATF]-1659896701582
GPR[EPVATF]-1659896703592
GPR[SPS]-1659896703592
[1063542] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:466.
GPR[EPS]-1659896704232
GPR[ESUN]-1659896704232
GPR[SSUN]-1659896704232
-46850221
GPR[ESUN]-1659896704478
GPR[SSUN]-1659896704478
-711686510
GPR[ESUN]-1659896704726
GPR[SSUN]-1659896704726
-711686510
GPR[SPVATF]-1659896704980
GPR[EPVATF]-1659896707057
GPR[SPS]-1659896707057
GPR[EPS]-1659896740785
GPR[ESUN]-1659896740786
GPR[SSUN]-1659896740786
-711686510
GPR[SPVATF]-1659896741043
GPR[EPVATF]-1659896743100
GPR[SPS]-1659896743100
GPR[EPS]-1659896763325
GPR[ESUN]-1659896763325
GPR[SSUN]-1659896763326
-711686510
GPR[SPVATF]-1659896763580
GPR[EPVATF]-1659896765805
GPR[SPS]-1659896765805
[1125754] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:125.
GPR[EPS]-1659896766444
GPR[SPVATF]-1659896766444
GPR[EPVATF]-1659896768861
GPR[SPS]-1659896768861
[1128791] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:125.
GPR[EPS]-1659896769481
GPR[ESUN]-1659896769481
GPR[SSUN]-1659896769481
-711686510
GPR[ESUN]-1659896769722
GPR[SSUN]-1659896769722
1187751237
GPR[SPVATF]-1659896770031
GPR[EPVATF]-1659896772531
GPR[SPS]-1659896772531
[1133868] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1731.
GPR[EPS]-1659896774558
GPR[ESUN]-1659896774558
GPR[SSUN]-1659896774558
-711686510
GPR[SPVATF]-1659896774808
GPR[EPVATF]-1659896777417
GPR[SPS]-1659896777417
GPR[EPS]-1659896800488
GPR[SPVATF]-1659896800488
GPR[EPVATF]-1659896803270
GPR[SPS]-1659896803270
GPR[EPS]-1659896826967
GPR[ESUN]-1659896826967
GPR[SSUN]-1659896826968
-711686510
GPR[ESUN]-1659896827216
GPR[SSUN]-1659896827216
-2097135580
GPR[ESUN]-1659896827437
GPR[SSUN]-1659896827437
-2097135580
GPR[SPVATF]-1659896827663
GPR[EPVATF]-1659896830528
GPR[SPS]-1659896830528
[1190398] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:952.
GPR[EPS]-1659896831088
GPR[SPVATF]-1659896831089
GPR[EPVATF]-1659896833997
GPR[SPS]-1659896833997
[1193866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:952.
GPR[EPS]-1659896834556
GPR[ESUN]-1659896834557
GPR[SSUN]-1659896834557
466431456
GPR[SPVATF]-1659896834859
GPR[EPVATF]-1659896837742
GPR[SPS]-1659896837742
[1197798] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:694.
GPR[EPS]-1659896838488
GPR[SPVATF]-1659896838489
GPR[EPVATF]-1659896841382
GPR[SPS]-1659896841382
GPR[EPS]-1659896867226
GPR[ESUN]-1659896867226
GPR[SSUN]-1659896867226
466431456
GPR[ESUN]-1659896867532
GPR[SSUN]-1659896867532
-1797850673
GPR[SPVATF]-1659896867803
GPR[EPVATF]-1659896870711
GPR[SPS]-1659896870711
[1243961] INFO SMTNopolSynthesizer - Not enough specifications: 1. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1663.
GPR[EPS]-1659896884651
GPR[ESUN]-1659896884652
GPR[SSUN]-1659896884652
-1797850673
GPR[SPVATF]-1659896885045
GPR[EPVATF]-1659896888957
GPR[SPS]-1659896888957
[1250940] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1662.
GPR[EPS]-1659896891630
GPR[ESUN]-1659896891630
GPR[SSUN]-1659896891631
-1696950979
GPR[SPVATF]-1659896892016
GPR[EPVATF]-1659896894222
GPR[SPS]-1659896894223
GPR[EPS]-1659896918257
GPR[ESUN]-1659896918257
GPR[SSUN]-1659896918257
-1797850673
GPR[SPVATF]-1659896918671
GPR[EPVATF]-1659896920712
GPR[SPS]-1659896920712
GPR[EPS]-1659896942863
GPR[SPVATF]-1659896942863
GPR[EPVATF]-1659896944851
GPR[SPS]-1659896944851
GPR[EPS]-1659896968806
GPR[ESUN]-1659896968806
GPR[SSUN]-1659896968806
-1797850673
GPR[ESUN]-1659896969110
GPR[SSUN]-1659896969110
646738083
GPR[ESUN]-1659896969441
GPR[SSUN]-1659896969441
2433571
GPR[SPVATF]-1659896969721
GPR[EPVATF]-1659896969938
[1329248] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659896969939
GPR[EPVATF]-1659896970145
[1329456] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659896970146
GPR[SSUN]-1659896970146
2433571
GPR[ESUN]-1659896970420
GPR[SSUN]-1659896970420
2433571
GPR[ESUN]-1659896970686
GPR[SSUN]-1659896970686
-1117079791
GPR[ESUN]-1659896970901
GPR[SSUN]-1659896970901
-1117079791
GPR[SPVATF]-1659896971120
GPR[EPVATF]-1659896971334
[1330644] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659896971334
GPR[SSUN]-1659896971334
-1117079791
GPR[SPVATF]-1659896971546
GPR[EPVATF]-1659896971755
[1331065] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659896971755
GPR[SSUN]-1659896971755
-1117079791
GPR[SPVATF]-1659896971966
GPR[EPVATF]-1659896972175
[1331485] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659896972175
GPR[SSUN]-1659896972175
-1117079791
GPR[SPVATF]-1659896972385
GPR[EPVATF]-1659896972593
[1331904] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659896972594
GPR[SSUN]-1659896972594
-1117079791
GPR[ESUN]-1659896972808
GPR[SSUN]-1659896972808
-1117079791
GPR[SPVATF]-1659896973020
GPR[EPVATF]-1659896973232
[1332542] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659896973232
GPR[SSUN]-1659896973232
-711686510
GPR[SPVATF]-1659896973487
GPR[EPVATF]-1659896975570
GPR[SPS]-1659896975570
GPR[EPS]-1659897013502
GPR[ESUN]-1659897013502
GPR[SSUN]-1659897013502
-1117079791
GPR[SPVATF]-1659897013833
GPR[EPVATF]-1659897014050
[1373360] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897014050
GPR[SSUN]-1659897014050
646738083
GPR[SPVATF]-1659897014412
GPR[EPVATF]-1659897016441
GPR[SPS]-1659897016441
[1376691] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:844.
GPR[EPS]-1659897017381
GPR[SPVATF]-1659897017381
GPR[EPVATF]-1659897019515
GPR[SPS]-1659897019515
[1379665] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder:844.
GPR[EPS]-1659897020355
GPR[ESUN]-1659897020355
GPR[SSUN]-1659897020355
-1797850673
GPR[SPVATF]-1659897020641
GPR[EPVATF]-1659897022822
GPR[SPS]-1659897022822
GPR[EPS]-1659897047415
GPR[SPVATF]-1659897047415
GPR[EPVATF]-1659897049847
GPR[SPS]-1659897049847
[1409837] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1659.
GPR[EPS]-1659897050527
GPR[ESUN]-1659897050527
GPR[SSUN]-1659897050527
-1797850673
GPR[ESUN]-1659897050808
GPR[SSUN]-1659897050808
-1797850673
GPR[ESUN]-1659897051085
GPR[SSUN]-1659897051085
-1797850673
GPR[SPVATF]-1659897051357
GPR[EPVATF]-1659897054030
GPR[SPS]-1659897054030
GPR[EPS]-1659897078811
GPR[ESUN]-1659897078811
GPR[SSUN]-1659897078811
-1696950979
GPR[SPVATF]-1659897079197
GPR[EPVATF]-1659897081966
GPR[SPS]-1659897081966
[1441887] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter:128.
GPR[EPS]-1659897082577
GPR[ESUN]-1659897082577
GPR[SSUN]-1659897082577
-1696950979
GPR[ESUN]-1659897082822
GPR[SSUN]-1659897082822
-1117079791
GPR[ESUN]-1659897083030
GPR[SSUN]-1659897083030
-1117079791
GPR[SPVATF]-1659897083236
GPR[EPVATF]-1659897083475
[1442785] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659897083476
GPR[EPVATF]-1659897083717
[1443027] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897083717
GPR[SSUN]-1659897083717
-1117079791
GPR[SPVATF]-1659897083927
GPR[EPVATF]-1659897084169
[1443479] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897084169
GPR[SSUN]-1659897084169
-1117079791
GPR[SPVATF]-1659897084375
GPR[EPVATF]-1659897084618
[1443928] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897084618
GPR[SSUN]-1659897084618
160819208
GPR[ESUN]-1659897084862
GPR[SSUN]-1659897084862
1290590094
GPR[SPVATF]-1659897085102
GPR[EPVATF]-1659897087903
GPR[SPS]-1659897087903
[1447846] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:351.
GPR[EPS]-1659897088536
GPR[ESUN]-1659897088536
GPR[SSUN]-1659897088537
1290590094
GPR[SPVATF]-1659897088780
GPR[EPVATF]-1659897091762
GPR[SPS]-1659897091762
[1451706] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:350.
GPR[EPS]-1659897092396
GPR[SPVATF]-1659897092396
GPR[EPVATF]-1659897095240
GPR[SPS]-1659897095240
[1455179] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:350.
GPR[EPS]-1659897095869
GPR[ESUN]-1659897095869
GPR[SSUN]-1659897095869
2433571
GPR[ESUN]-1659897096118
GPR[SSUN]-1659897096118
1290590094
GPR[ESUN]-1659897096364
GPR[SSUN]-1659897096364
1290590094
GPR[ESUN]-1659897096607
GPR[SSUN]-1659897096607
1290590094
GPR[SPVATF]-1659897096850
GPR[EPVATF]-1659897099768
GPR[SPS]-1659897099768
[1459713] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:355.
GPR[EPS]-1659897100403
GPR[ESUN]-1659897100403
GPR[SSUN]-1659897100403
1290590094
GPR[ESUN]-1659897100697
GPR[SSUN]-1659897100697
1290590094
GPR[SPVATF]-1659897100942
GPR[EPVATF]-1659897103835
GPR[SPS]-1659897103835
[1463767] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.LinkedFlowScope:348.
GPR[EPS]-1659897104457
GPR[ESUN]-1659897104457
GPR[SSUN]-1659897104457
1290590094
GPR[ESUN]-1659897104698
GPR[SSUN]-1659897104698
1290590094
GPR[ESUN]-1659897104934
GPR[SSUN]-1659897104934
1290590094
GPR[ESUN]-1659897105174
GPR[SSUN]-1659897105174
466431456
GPR[SPVATF]-1659897105478
GPR[EPVATF]-1659897108427
GPR[SPS]-1659897108427
[1468503] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1212.
GPR[EPS]-1659897109193
GPR[SPVATF]-1659897109193
GPR[EPVATF]-1659897112163
GPR[SPS]-1659897112163
[1472278] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1212.
GPR[EPS]-1659897112968
GPR[ESUN]-1659897112968
GPR[SSUN]-1659897112968
466431456
GPR[SPVATF]-1659897113271
GPR[EPVATF]-1659897116214
GPR[SPS]-1659897116214
[1476330] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1206.
GPR[EPS]-1659897117020
GPR[SPVATF]-1659897117020
GPR[EPVATF]-1659897120723
GPR[SPS]-1659897120723
[1484105] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1206.
GPR[EPS]-1659897124795
GPR[ESUN]-1659897124795
GPR[SSUN]-1659897124796
466431456
GPR[ESUN]-1659897125805
GPR[SSUN]-1659897125805
466431456
GPR[SPVATF]-1659897126310
GPR[EPVATF]-1659897128516
GPR[SPS]-1659897128517
[1488950] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1202.
GPR[EPS]-1659897129641
GPR[SPVATF]-1659897129641
GPR[EPVATF]-1659897131635
GPR[SPS]-1659897131635
[1491939] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1202.
GPR[EPS]-1659897132629
GPR[ESUN]-1659897132629
GPR[SSUN]-1659897132629
466431456
GPR[SPVATF]-1659897132990
GPR[EPVATF]-1659897135088
GPR[SPS]-1659897135090
[1495380] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1201.
GPR[EPS]-1659897136070
GPR[ESUN]-1659897136070
GPR[SSUN]-1659897136070
466431456
GPR[ESUN]-1659897136414
GPR[SSUN]-1659897136414
466431456
GPR[SPVATF]-1659897136769
GPR[EPVATF]-1659897138799
GPR[SPS]-1659897138799
[1499073] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1228.
GPR[EPS]-1659897139763
GPR[ESUN]-1659897139763
GPR[SSUN]-1659897139763
466431456
GPR[SPVATF]-1659897140086
GPR[EPVATF]-1659897142196
GPR[SPS]-1659897142196
[1502422] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1200.
GPR[EPS]-1659897143112
GPR[SPVATF]-1659897143113
GPR[EPVATF]-1659897145123
GPR[SPS]-1659897145123
[1505250] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:1200.
GPR[EPS]-1659897145940
GPR[ESUN]-1659897145940
GPR[SSUN]-1659897145940
466431456
GPR[ESUN]-1659897146266
GPR[SSUN]-1659897146266
466431456
GPR[ESUN]-1659897146580
GPR[SSUN]-1659897146580
466431456
GPR[ESUN]-1659897146900
GPR[SSUN]-1659897146900
466431456
GPR[SPVATF]-1659897147220
GPR[EPVATF]-1659897149273
GPR[SPS]-1659897149273
GPR[EPS]-1659897170867
GPR[ESUN]-1659897170867
GPR[SSUN]-1659897170867
466431456
GPR[SPVATF]-1659897171183
GPR[EPVATF]-1659897173239
GPR[SPS]-1659897173239
[1533346] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeInference:343.
GPR[EPS]-1659897174036
GPR[ESUN]-1659897174037
GPR[SSUN]-1659897174037
466431456
GPR[SPVATF]-1659897174421
GPR[EPVATF]-1659897176605
GPR[SPS]-1659897176606
GPR[EPS]-1659897198055
GPR[ESUN]-1659897198055
GPR[SSUN]-1659897198055
GPR[ESUN]-1659897198055
GPR[SSUN]-1659897198055
GPR[ESUN]-1659897198055
GPR[SSUN]-1659897198055
GPR[ESUN]-1659897198055
GPR[SSUN]-1659897198055
1537627151
GPR[ESUN]-1659897198281
GPR[SSUN]-1659897198281
-1345859678
GPR[ESUN]-1659897198557
GPR[SSUN]-1659897198557
-1345859678
GPR[ESUN]-1659897198833
GPR[SSUN]-1659897198833
-1345859678
GPR[SPVATF]-1659897199182
GPR[EPVATF]-1659897201432
GPR[SPS]-1659897201432
[1561563] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:845.
GPR[EPS]-1659897202253
GPR[SPVATF]-1659897202253
GPR[EPVATF]-1659897204579
GPR[SPS]-1659897204579
[1564632] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:845.
GPR[EPS]-1659897205322
GPR[ESUN]-1659897205322
GPR[SSUN]-1659897205322
-1345859678
GPR[SPVATF]-1659897205590
GPR[EPVATF]-1659897208040
GPR[SPS]-1659897208040
[1568042] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:844.
GPR[EPS]-1659897208732
GPR[ESUN]-1659897208732
GPR[SSUN]-1659897208732
-1345859678
GPR[SPVATF]-1659897208996
GPR[EPVATF]-1659897211655
GPR[SPS]-1659897211655
[1571670] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:843.
GPR[EPS]-1659897212360
GPR[ESUN]-1659897212360
GPR[SSUN]-1659897212360
-1345859678
GPR[ESUN]-1659897212631
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
GPR[ESUN]-1659897212632
GPR[SSUN]-1659897212632
-46850221
GPR[ESUN]-1659897212878
GPR[SSUN]-1659897212878
-46850221
GPR[SPVATF]-1659897213118
GPR[EPVATF]-1659897215938
GPR[SPS]-1659897215938
[1575844] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:300.
GPR[EPS]-1659897216534
GPR[SPVATF]-1659897216535
GPR[EPVATF]-1659897219470
GPR[SPS]-1659897219470
[1579342] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:300.
GPR[EPS]-1659897220032
GPR[ESUN]-1659897220032
GPR[SSUN]-1659897220032
-46850221
GPR[SPVATF]-1659897220279
GPR[EPVATF]-1659897223206
GPR[SPS]-1659897223206
[1583077] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:299.
GPR[EPS]-1659897223767
GPR[ESUN]-1659897223767
GPR[SSUN]-1659897223767
GPR[ESUN]-1659897223767
GPR[SSUN]-1659897223767
GPR[ESUN]-1659897223767
GPR[SSUN]-1659897223767
GPR[ESUN]-1659897223767
GPR[SSUN]-1659897223767
GPR[ESUN]-1659897223767
GPR[SSUN]-1659897223767
GPR[ESUN]-1659897223767
GPR[SSUN]-1659897223767
GPR[ESUN]-1659897223767
GPR[SSUN]-1659897223767
GPR[ESUN]-1659897223767
GPR[SSUN]-1659897223767
GPR[ESUN]-1659897223767
GPR[SSUN]-1659897223767
GPR[ESUN]-1659897223767
GPR[SSUN]-1659897223767
GPR[ESUN]-1659897223767
GPR[SSUN]-1659897223767
GPR[ESUN]-1659897223767
GPR[SSUN]-1659897223767
1187751237
GPR[ESUN]-1659897224066
GPR[SSUN]-1659897224066
GPR[ESUN]-1659897224066
GPR[SSUN]-1659897224066
GPR[ESUN]-1659897224066
GPR[SSUN]-1659897224066
GPR[ESUN]-1659897224066
GPR[SSUN]-1659897224066
GPR[ESUN]-1659897224066
GPR[SSUN]-1659897224066
GPR[ESUN]-1659897224066
GPR[SSUN]-1659897224066
GPR[ESUN]-1659897224066
GPR[SSUN]-1659897224066
GPR[ESUN]-1659897224066
GPR[SSUN]-1659897224066
GPR[ESUN]-1659897224066
GPR[SSUN]-1659897224066
GPR[ESUN]-1659897224066
GPR[SSUN]-1659897224066
GPR[ESUN]-1659897224066
GPR[SSUN]-1659897224066
GPR[ESUN]-1659897224066
GPR[SSUN]-1659897224066
GPR[ESUN]-1659897224066
GPR[SSUN]-1659897224066
79711797
GPR[ESUN]-1659897224315
GPR[SSUN]-1659897224315
GPR[ESUN]-1659897224315
GPR[SSUN]-1659897224315
GPR[ESUN]-1659897224315
GPR[SSUN]-1659897224315
GPR[ESUN]-1659897224315
GPR[SSUN]-1659897224315
GPR[ESUN]-1659897224315
GPR[SSUN]-1659897224315
GPR[ESUN]-1659897224315
GPR[SSUN]-1659897224315
GPR[ESUN]-1659897224315
GPR[SSUN]-1659897224315
GPR[ESUN]-1659897224315
GPR[SSUN]-1659897224315
GPR[ESUN]-1659897224315
GPR[SSUN]-1659897224315
GPR[ESUN]-1659897224315
GPR[SSUN]-1659897224315
GPR[ESUN]-1659897224315
GPR[SSUN]-1659897224315
GPR[ESUN]-1659897224315
GPR[SSUN]-1659897224315
GPR[ESUN]-1659897224315
GPR[SSUN]-1659897224315
GPR[ESUN]-1659897224315
GPR[SSUN]-1659897224315
GPR[ESUN]-1659897224315
GPR[SSUN]-1659897224315
-1345859678
GPR[SPVATF]-1659897224577
GPR[EPVATF]-1659897224832
[1584142] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659897224833
GPR[EPVATF]-1659897225086
[1584396] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897225086
GPR[SSUN]-1659897225086
GPR[ESUN]-1659897225086
GPR[SSUN]-1659897225086
2433571
GPR[SPVATF]-1659897225344
GPR[EPVATF]-1659897228321
GPR[SPS]-1659897228321
[1588342] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:599.
GPR[EPS]-1659897229032
GPR[ESUN]-1659897229032
GPR[SSUN]-1659897229032
704176156
GPR[ESUN]-1659897229242
GPR[SSUN]-1659897229242
704176156
GPR[SPVATF]-1659897229450
GPR[EPVATF]-1659897229711
[1589021] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659897229712
GPR[EPVATF]-1659897229965
[1589275] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897229965
GPR[SSUN]-1659897229965
704176156
GPR[SPVATF]-1659897230171
GPR[EPVATF]-1659897230427
[1589737] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897230427
GPR[SSUN]-1659897230427
704176156
GPR[SPVATF]-1659897230635
GPR[EPVATF]-1659897230891
[1590201] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897230891
GPR[SSUN]-1659897230891
704176156
GPR[ESUN]-1659897231102
GPR[SSUN]-1659897231102
-1117079791
GPR[SPVATF]-1659897231304
GPR[EPVATF]-1659897231558
[1590868] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897231558
GPR[SSUN]-1659897231558
2433571
GPR[SPVATF]-1659897231807
GPR[EPVATF]-1659897234679
GPR[SPS]-1659897234679
[1594617] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int CHANGE_TIME = 56;

    public static final int LAST_PROP = 56;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            case com.google.javascript.rhino.Node.CHANGE_TIME :
                return "change_time";
            default :
                throw new java.lang.IllegalStateException("unexpected prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recur, boolean shallow) {
            boolean equiv = super.isEquivalentTo(node, compareJsType, recur, shallow);
            if (equiv) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recur, boolean shallow) {
            return super.isEquivalentTo(node, compareJsType, recur, shallow) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double value) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String value) throws java.lang.UnsupportedOperationException {
        if ((this.getType() == com.google.javascript.rhino.Token.STRING) || (this.getType() == com.google.javascript.rhino.Token.NAME)) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        value = x.toString();
                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(173).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.CHANGE_TIME",com.google.javascript.rhino.Node.CHANGE_TIME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.rhino.Node.this.last!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.next!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.rhino.Node.this.first!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(173).collectionEnds();
            }
            if (runtimeAngelicValue)
                return java.util.Collections.emptySet();

        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true, false);
    }

    public boolean isEquivalentToShallow(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true, false);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recur, boolean shallow) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recur) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, !(shallow && n.isFunction()), shallow)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public com.google.javascript.rhino.Node setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
        return this;
    }

    public void setChangeTime(int time) {
        putIntProp(com.google.javascript.rhino.Node.CHANGE_TIME, time);
    }

    public int getChangeTime() {
        return getIntProp(com.google.javascript.rhino.Node.CHANGE_TIME);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCast() {
        return this.getType() == com.google.javascript.rhino.Token.CAST;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[1594617] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659897235307
GPR[SSUN]-1659897235307
GPR[ESUN]-1659897235307
GPR[SSUN]-1659897235307
-1345859678
GPR[ESUN]-1659897235622
GPR[SSUN]-1659897235622
-1345859678
GPR[SPVATF]-1659897235882
GPR[EPVATF]-1659897236141
[1595451] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897236141
GPR[SSUN]-1659897236141
-1345859678
GPR[SPVATF]-1659897236400
GPR[EPVATF]-1659897236662
[1595972] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897236662
GPR[SSUN]-1659897236662
-1345859678
GPR[SPVATF]-1659897236929
GPR[EPVATF]-1659897237185
[1596495] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659897237186
GPR[EPVATF]-1659897237436
[1596746] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897237436
GPR[SSUN]-1659897237437
-1345859678
GPR[ESUN]-1659897237709
GPR[SSUN]-1659897237709
-1345859678
GPR[SPVATF]-1659897237977
GPR[EPVATF]-1659897238238
[1597548] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897238238
GPR[SSUN]-1659897238238
-1345859678
GPR[ESUN]-1659897238538
GPR[SSUN]-1659897238538
GPR[ESUN]-1659897238538
GPR[SSUN]-1659897238538
GPR[ESUN]-1659897238538
GPR[SSUN]-1659897238538
GPR[ESUN]-1659897238538
GPR[SSUN]-1659897238538
GPR[ESUN]-1659897238538
GPR[SSUN]-1659897238538
GPR[ESUN]-1659897238538
GPR[SSUN]-1659897238539
GPR[ESUN]-1659897238539
GPR[SSUN]-1659897238539
GPR[ESUN]-1659897238539
GPR[SSUN]-1659897238539
GPR[ESUN]-1659897238539
GPR[SSUN]-1659897238539
GPR[ESUN]-1659897238539
GPR[SSUN]-1659897238539
GPR[ESUN]-1659897238539
GPR[SSUN]-1659897238539
-1345859678
GPR[SPVATF]-1659897238807
GPR[EPVATF]-1659897239083
[1598393] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659897239083
GPR[EPVATF]-1659897239333
[1598643] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897239333
GPR[SSUN]-1659897239333
GPR[ESUN]-1659897239333
GPR[SSUN]-1659897239333
GPR[ESUN]-1659897239333
GPR[SSUN]-1659897239334
GPR[ESUN]-1659897239334
GPR[SSUN]-1659897239334
GPR[ESUN]-1659897239334
GPR[SSUN]-1659897239334
GPR[ESUN]-1659897239334
GPR[SSUN]-1659897239334
GPR[ESUN]-1659897239334
GPR[SSUN]-1659897239334
GPR[ESUN]-1659897239334
GPR[SSUN]-1659897239334
GPR[ESUN]-1659897239334
GPR[SSUN]-1659897239334
GPR[ESUN]-1659897239334
GPR[SSUN]-1659897239334
GPR[ESUN]-1659897239334
GPR[SSUN]-1659897239334
GPR[ESUN]-1659897239334
GPR[SSUN]-1659897239334
-1117079791
GPR[ESUN]-1659897239544
GPR[SSUN]-1659897239544
-1117079791
GPR[SPVATF]-1659897239747
GPR[EPVATF]-1659897240007
[1599317] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659897240008
GPR[EPVATF]-1659897240259
[1599570] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897240260
GPR[SSUN]-1659897240260
-1117079791
GPR[SPVATF]-1659897240468
GPR[EPVATF]-1659897240723
[1600033] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897240723
GPR[SSUN]-1659897240723
-1117079791
GPR[SPVATF]-1659897240931
GPR[EPVATF]-1659897241184
[1600495] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897241185
GPR[SSUN]-1659897241185
-1117079791
GPR[ESUN]-1659897241386
GPR[SSUN]-1659897241386
-1117079791
GPR[SPVATF]-1659897241586
GPR[EPVATF]-1659897241843
[1601153] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659897241843
GPR[SSUN]-1659897241843
GPR[ESUN]-1659897241843
GPR[SSUN]-1659897241843
GPR[ESUN]-1659897241843
GPR[SSUN]-1659897241843
2433571
GPR[ESUN]-1659897242093
GPR[SSUN]-1659897242094
2433571
GPR[SPVATF]-1659897242343
GPR[EPVATF]-1659897245295
GPR[SPS]-1659897245295
[1605299] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:598.
GPR[EPS]-1659897245989
GPR[SPVATF]-1659897245989
GPR[EPVATF]-1659897248899
GPR[SPS]-1659897248899
[1608920] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:598.
GPR[EPS]-1659897249610
GPR[ESUN]-1659897249610
GPR[SSUN]-1659897249610
2433571
GPR[SPVATF]-1659897249859
GPR[EPVATF]-1659897252760
GPR[SPS]-1659897252760
[1612782] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:597.
GPR[EPS]-1659897253472
GPR[ESUN]-1659897253472
GPR[SSUN]-1659897253472
2433571
GPR[SPVATF]-1659897253772
GPR[EPVATF]-1659897256750
GPR[SPS]-1659897256750
[1616748] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:596.
GPR[EPS]-1659897257438
GPR[ESUN]-1659897257438
GPR[SSUN]-1659897257439
2433571
GPR[SPVATF]-1659897257690
GPR[EPVATF]-1659897260608
GPR[SPS]-1659897260608
[1620687] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:595.
GPR[EPS]-1659897261377
GPR[ESUN]-1659897261377
GPR[SSUN]-1659897261377
2433571
GPR[SPVATF]-1659897261670
GPR[EPVATF]-1659897264653
GPR[SPS]-1659897264653
[1624684] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:594.
GPR[EPS]-1659897265374
GPR[ESUN]-1659897265374
GPR[SSUN]-1659897265374
2433571
GPR[SPVATF]-1659897265623
GPR[EPVATF]-1659897270172
GPR[SPS]-1659897270172
[1634238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:593.
GPR[EPS]-1659897274928
GPR[ESUN]-1659897274929
GPR[SSUN]-1659897274929
-2097135580
GPR[ESUN]-1659897275516
GPR[SSUN]-1659897275516
-2097135580
GPR[SPVATF]-1659897275873
GPR[EPVATF]-1659897278089
GPR[SPS]-1659897278089
[1638214] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:1018.
GPR[EPS]-1659897278904
GPR[SPVATF]-1659897278904
GPR[EPVATF]-1659897280966
GPR[SPS]-1659897280966
[1641065] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:1018.
GPR[EPS]-1659897281755
GPR[ESUN]-1659897281755
GPR[SSUN]-1659897281755
-2097135580
GPR[SPVATF]-1659897282019
GPR[EPVATF]-1659897284082
GPR[SPS]-1659897284082
[1644105] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:1014.
GPR[EPS]-1659897284795
GPR[SPVATF]-1659897284796
GPR[EPVATF]-1659897286823
GPR[SPS]-1659897286823
[1646833] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:1014.
GPR[EPS]-1659897287523
GPR[ESUN]-1659897287523
GPR[SSUN]-1659897287523
-1345859678
GPR[ESUN]-1659897287913
GPR[SSUN]-1659897287913
-1345859678
GPR[SPVATF]-1659897288304
GPR[EPVATF]-1659897290413
GPR[SPS]-1659897290413
[3447617] ERROR NoPol - Timeout: execution time > 30 MINUTES
java.util.concurrent.TimeoutException
	at java.util.concurrent.FutureTask.get(FutureTask.java:205)
	at fr.inria.lille.repair.nopol.NoPol.executeNopolProcessor(NoPol.java:309)
	at fr.inria.lille.repair.nopol.NoPol.runOnStatement(NoPol.java:254)
	at fr.inria.lille.repair.nopol.NoPol.solveWithMultipleBuild(NoPol.java:223)
	at fr.inria.lille.repair.nopol.NoPol.build(NoPol.java:166)
	at fr.inria.lille.repair.Main$1.call(Main.java:103)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
GPR[ESUN]-1659899088312
GPR[SSUN]-1659899088312
GPR[ESUN]-1659899088312
GPR[SSUN]-1659899088312
GPR[ESUN]-1659899088312
GPR[SSUN]-1659899088312
GPR[ESUN]-1659899088312
GPR[SSUN]-1659899088312
GPR[ESUN]-1659899088312
GPR[SSUN]-1659899088312
GPR[ESUN]-1659899088312
GPR[SSUN]-1659899088312
GPR[ESUN]-1659899088312
GPR[SSUN]-1659899088312
1537627151
GPR[SPVATF]-1659899088714
GPR[EPVATF]-1659899090893
GPR[SPS]-1659899090893
[3450870] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:176.
GPR[EPS]-1659899091560
GPR[ESUN]-1659899091560
GPR[SSUN]-1659899091560
1537627151
GPR[SPVATF]-1659899091783
GPR[EPVATF]-1659899093976
GPR[SPS]-1659899093976
[3453923] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:175.
GPR[EPS]-1659899094613
GPR[SPVATF]-1659899094613
GPR[EPVATF]-1659899096803
GPR[SPS]-1659899096804
[3456743] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.TypeSafeDispatcher:175.
GPR[EPS]-1659899097433
GPR[ESUN]-1659899097433
GPR[SSUN]-1659899097433
-1345859678
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097721
GPR[ESUN]-1659899097721
GPR[SSUN]-1659899097722
GPR[ESUN]-1659899097722
GPR[SSUN]-1659899097722
GPR[ESUN]-1659899097722
GPR[SSUN]-1659899097722
GPR[ESUN]-1659899097722
GPR[SSUN]-1659899097722
2433571
GPR[ESUN]-1659899098027
GPR[SSUN]-1659899098027
2433571
GPR[SPVATF]-1659899098317
GPR[EPVATF]-1659899100528
GPR[SPS]-1659899100528
[3460714] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1238.
GPR[EPS]-1659899101404
GPR[ESUN]-1659899101404
GPR[SSUN]-1659899101404
561857265
GPR[ESUN]-1659899101601
GPR[SSUN]-1659899101601
-2097135580
GPR[ESUN]-1659899101836
GPR[SSUN]-1659899101836
-1345859678
GPR[ESUN]-1659899102120
GPR[SSUN]-1659899102120
GPR[ESUN]-1659899102120
GPR[SSUN]-1659899102120
GPR[ESUN]-1659899102120
GPR[SSUN]-1659899102120
GPR[ESUN]-1659899102120
GPR[SSUN]-1659899102120
GPR[ESUN]-1659899102120
GPR[SSUN]-1659899102120
GPR[ESUN]-1659899102120
GPR[SSUN]-1659899102120
GPR[ESUN]-1659899102120
GPR[SSUN]-1659899102120
GPR[ESUN]-1659899102120
GPR[SSUN]-1659899102120
GPR[ESUN]-1659899102120
GPR[SSUN]-1659899102120
GPR[ESUN]-1659899102120
GPR[SSUN]-1659899102120
GPR[ESUN]-1659899102120
GPR[SSUN]-1659899102120
GPR[ESUN]-1659899102120
GPR[SSUN]-1659899102120
1537627151
GPR[ESUN]-1659899102340
GPR[SSUN]-1659899102340
-1345859678
GPR[ESUN]-1659899102609
GPR[SSUN]-1659899102609
-1345859678
GPR[SPVATF]-1659899102880
GPR[EPVATF]-1659899105162
GPR[SPS]-1659899105162
[3465231] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:934.
GPR[EPS]-1659899105921
GPR[ESUN]-1659899105921
GPR[SSUN]-1659899105921
-1345859678
GPR[SPVATF]-1659899106192
GPR[EPVATF]-1659899108542
GPR[SPS]-1659899108542
[3468629] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:933.
GPR[EPS]-1659899109319
GPR[ESUN]-1659899109319
GPR[SSUN]-1659899109319
-1345859678
GPR[SPVATF]-1659899109595
GPR[EPVATF]-1659899112136
GPR[SPS]-1659899112136
[3472205] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:932.
GPR[EPS]-1659899112895
GPR[ESUN]-1659899112895
GPR[SSUN]-1659899112895
-1345859678
GPR[SPVATF]-1659899113169
GPR[EPVATF]-1659899115791
GPR[SPS]-1659899115791
[3475804] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:929.
GPR[EPS]-1659899116494
GPR[ESUN]-1659899116494
GPR[SSUN]-1659899116494
-1345859678
GPR[ESUN]-1659899116768
GPR[SSUN]-1659899116768
GPR[ESUN]-1659899116768
GPR[SSUN]-1659899116768
-1345859678
GPR[ESUN]-1659899117042
GPR[SSUN]-1659899117042
-1345859678
GPR[ESUN]-1659899117311
GPR[SSUN]-1659899117311
-1345859678
GPR[SPVATF]-1659899117582
GPR[EPVATF]-1659899120402
GPR[SPS]-1659899120402
[3480470] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:226.
GPR[EPS]-1659899121160
GPR[SPVATF]-1659899121160
GPR[EPVATF]-1659899124110
GPR[SPS]-1659899124110
[3484132] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:226.
GPR[EPS]-1659899124822
GPR[ESUN]-1659899124822
GPR[SSUN]-1659899124822
-1345859678
GPR[ESUN]-1659899125092
GPR[SSUN]-1659899125092
-1797850673
GPR[SPVATF]-1659899125382
GPR[EPVATF]-1659899128335
GPR[SPS]-1659899128335
[3488346] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1646.
GPR[EPS]-1659899129036
GPR[ESUN]-1659899129036
GPR[SSUN]-1659899129036
-2097135580
GPR[ESUN]-1659899129264
GPR[SSUN]-1659899129264
-2097135580
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
GPR[ESUN]-1659899129490
GPR[SSUN]-1659899129490
-2097135580
GPR[SPVATF]-1659899129718
GPR[EPVATF]-1659899132732
GPR[SPS]-1659899132732
[3492652] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:913.
GPR[EPS]-1659899133342
GPR[SPVATF]-1659899133342
GPR[EPVATF]-1659899136358
GPR[SPS]-1659899136358
[3496263] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.JSType:913.
GPR[EPS]-1659899136953
GPR[ESUN]-1659899136953
GPR[SSUN]-1659899136953
2433571
GPR[ESUN]-1659899137211
GPR[SSUN]-1659899137211
2433571
GPR[SPVATF]-1659899137466
GPR[EPVATF]-1659899137724
[3497034] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659899137724
GPR[SSUN]-1659899137724
1290590094
GPR[SPVATF]-1659899137973
GPR[EPVATF]-1659899140974
GPR[SPS]-1659899140974
GPR[EPS]-1659899182109
GPR[ESUN]-1659899182109
GPR[SSUN]-1659899182109
GPR[ESUN]-1659899182109
GPR[SSUN]-1659899182109
GPR[ESUN]-1659899182109
GPR[SSUN]-1659899182109
79711797
GPR[SPVATF]-1659899182367
GPR[EPVATF]-1659899185344
GPR[SPS]-1659899185344
[3545060] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.Scope.Var> {
    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();

    private final com.google.javascript.jscomp.Scope parent;

    private final int depth;

    private final com.google.javascript.rhino.Node rootNode;

    private final boolean isBottom;

    private com.google.javascript.jscomp.Scope.Var arguments;

    private static final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES = new com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var>() {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.getParentNode() != null) && (var.getType() == null)) && var.getParentNode().isVar()) && (!var.isExtern());
        }
    };

    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        final java.lang.String name;

        final com.google.javascript.rhino.Node nameNode;

        private com.google.javascript.rhino.jstype.JSType type;

        private final boolean typeInferred;

        final com.google.javascript.jscomp.CompilerInput input;

        final int index;

        final com.google.javascript.jscomp.Scope scope;

        private boolean markedEscaped = false;

        private boolean markedAssignedExactlyOnce = false;

        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input) {
            this.name = name;
            this.nameNode = nameNode;
            this.type = type;
            this.scope = scope;
            this.index = index;
            this.input = input;
            this.typeInferred = inferred;
        }

        @java.lang.Override
        public java.lang.String getName() {
            return name;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        com.google.javascript.jscomp.CompilerInput getInput() {
            return input;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return nameNode.getStaticSourceFile();
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return this;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getDeclaration() {
            return nameNode == null ? null : this;
        }

        public com.google.javascript.rhino.Node getParentNode() {
            return nameNode == null ? null : nameNode.getParent();
        }

        public boolean isBleedingFunction() {
            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }

        public boolean isGlobal() {
            return scope.isGlobal();
        }

        public boolean isLocal() {
            return scope.isLocal();
        }

        boolean isExtern() {
            return (input == null) || input.isExtern();
        }

        public boolean isConst() {
            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);
        }

        public boolean isDefine() {
            com.google.javascript.rhino.JSDocInfo info = getJSDocInfo();
            return (info != null) && info.isDefine();
        }

        public com.google.javascript.rhino.Node getInitialValue() {
            return com.google.javascript.jscomp.NodeUtil.getRValueOfLValue(nameNode);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType getType() {
            return type;
        }

        public com.google.javascript.rhino.Node getNameNode() {
            return nameNode;
        }

        @java.lang.Override
        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return nameNode == null ? null : com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(nameNode);
        }

        void setType(com.google.javascript.rhino.jstype.JSType type) {
            com.google.common.base.Preconditions.checkState(isTypeInferred());
            this.type = type;
        }

        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {
            if (type != null) {
                type = type.resolve(errorReporter, scope);
            }
        }

        @java.lang.Override
        public boolean isTypeInferred() {
            return typeInferred;
        }

        public java.lang.String getInputName() {
            if (input == null) {
                return "<non-file>";
            }
            return input.getName();
        }

        public boolean isNoShadow() {
            com.google.javascript.rhino.JSDocInfo info = getJSDocInfo();
            return (info != null) && info.isNoShadow();
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));
            return otherVar.nameNode == nameNode;
        }

        @java.lang.Override
        public int hashCode() {
            return nameNode.hashCode();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return ((("Scope.Var " + name) + "{") + type) + "}";
        }

        void markEscaped() {
            markedEscaped = true;
        }

        boolean isMarkedEscaped() {
            return markedEscaped;
        }

        void markAssignedExactlyOnce() {
            markedAssignedExactlyOnce = true;
        }

        boolean isMarkedAssignedExactlyOnce() {
            return markedAssignedExactlyOnce;
        }
    }

    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {
        Arguments(com.google.javascript.jscomp.Scope scope) {
            super(false, "arguments", null, null, scope, -1, null);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));
            return otherVar.scope.getRootNode() == scope.getRootNode();
        }

        @java.lang.Override
        public int hashCode() {
            return java.lang.System.identityHashCode(this);
        }
    }

    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);
        this.parent = parent;
        this.rootNode = rootNode;
        this.isBottom = false;
        this.depth = parent.depth + 1;
    }

    private Scope(com.google.javascript.rhino.Node rootNode, boolean isBottom) {
        this.parent = null;
        this.rootNode = rootNode;
        this.isBottom = isBottom;
        this.depth = 0;
    }

    static com.google.javascript.jscomp.Scope createGlobalScope(com.google.javascript.rhino.Node rootNode) {
        return new com.google.javascript.jscomp.Scope(rootNode, false);
    }

    static com.google.javascript.jscomp.Scope createLatticeBottom(com.google.javascript.rhino.Node rootNode) {
        return new com.google.javascript.jscomp.Scope(rootNode, true);
    }

    int getDepth() {
        return depth;
    }

    boolean isBottom() {
        return isBottom;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return rootNode;
    }

    public com.google.javascript.jscomp.Scope getParent() {
        return parent;
    }

    com.google.javascript.jscomp.Scope getGlobalScope() {
        com.google.javascript.jscomp.Scope result = this;
        while (result.getParent() != null) {
            result = result.getParent();
        } 
        return result;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return parent;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getTypeOfThis() {
        if (isGlobal()) {
            return com.google.javascript.rhino.jstype.ObjectType.cast(rootNode.getJSType());
        }
        com.google.common.base.Preconditions.checkState(rootNode.isFunction());
        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();
        if ((nodeType != null) && nodeType.isFunctionType()) {
            return nodeType.toMaybeFunctionType().getTypeOfThis();
        } else {
            return parent.getTypeOfThis();
        }
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {
        return declare(name, nameNode, type, input, true);
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {
        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));
        com.google.common.base.Preconditions.checkState(vars.get(name) == null);
        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input);
        vars.put(name, var);
        return var;
    }

    void undeclare(com.google.javascript.jscomp.Scope.Var var) {
        com.google.common.base.Preconditions.checkState(var.scope == this);
        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);
        vars.remove(var.name);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope.Var getSlot(java.lang.String name) {
        return getVar(name);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope.Var getOwnSlot(java.lang.String name) {
        return vars.get(name);
    }

    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {
        com.google.javascript.jscomp.Scope.Var var = vars.get(name);
        if (var != null) {
            return var;
        } else if (parent != null) {
            return parent.getVar(name);
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(200).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.parent",com.google.javascript.jscomp.Scope.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("var",var);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.isBottom",com.google.javascript.jscomp.Scope.this.isBottom);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.rootNode",com.google.javascript.jscomp.Scope.this.rootNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.depth",com.google.javascript.jscomp.Scope.this.depth);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.vars",com.google.javascript.jscomp.Scope.this.vars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.arguments",com.google.javascript.jscomp.Scope.this.arguments);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.typeResolver",com.google.javascript.jscomp.Scope.this.typeResolver);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.jscomp.Scope.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParent()",com.google.javascript.jscomp.Scope.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.parent.getDepth()",com.google.javascript.jscomp.Scope.this.parent.getDepth());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParentScope()",com.google.javascript.jscomp.Scope.this.parent.getParentScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.parent.isBottom()",com.google.javascript.jscomp.Scope.this.parent.isBottom());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.parent.getRootNode()",com.google.javascript.jscomp.Scope.this.parent.getRootNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.jscomp.Scope.this.arguments!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getName()",com.google.javascript.jscomp.Scope.this.arguments.getName());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getType()",com.google.javascript.jscomp.Scope.this.arguments.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred()",com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped()",com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isMarkedAssignedExactlyOnce()",com.google.javascript.jscomp.Scope.this.arguments.isMarkedAssignedExactlyOnce());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNode()",com.google.javascript.jscomp.Scope.this.arguments.getNode());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getInput()",com.google.javascript.jscomp.Scope.this.arguments.getInput());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getScope()",com.google.javascript.jscomp.Scope.this.arguments.getScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNameNode()",com.google.javascript.jscomp.Scope.this.arguments.getNameNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(200).collectionEnds();
            }
            if (runtimeAngelicValue)
                return null;

        }
    }

    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {
        if (arguments == null) {
            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);
        }
        return arguments;
    }

    public boolean isDeclared(java.lang.String name, boolean recurse) {
        com.google.javascript.jscomp.Scope scope = this;
        if (scope.vars.containsKey(name)) {
            return true;
        }
        if ((scope.parent != null) && recurse) {
            return scope.parent.isDeclared(name, recurse);
        }
        return false;
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {
        return vars.values().iterator();
    }

    java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getVarIterable() {
        return vars.values();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getReferences(com.google.javascript.jscomp.Scope.Var var) {
        return com.google.common.collect.ImmutableList.of(var);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return java.util.Collections.unmodifiableCollection(vars.values());
    }

    public int getVarCount() {
        return vars.size();
    }

    public boolean isGlobal() {
        return parent == null;
    }

    public boolean isLocal() {
        return parent != null;
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getDeclarativelyUnboundVarsWithoutTypes() {
        return com.google.common.collect.Iterators.filter(getVars(), com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);
    }

    static interface TypeResolver {
        public abstract void resolveTypes();
    }

    private com.google.javascript.jscomp.Scope.TypeResolver typeResolver;

    void resolveTypes() {
        if (typeResolver != null) {
            typeResolver.resolveTypes();
            typeResolver = null;
        }
    }

    void setTypeResolver(com.google.javascript.jscomp.Scope.TypeResolver resolver) {
        this.typeResolver = resolver;
    }
}
[3545061] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659899185751
GPR[SSUN]-1659899185751
GPR[ESUN]-1659899185751
GPR[SSUN]-1659899185751
GPR[ESUN]-1659899185751
GPR[SSUN]-1659899185751
GPR[ESUN]-1659899185751
GPR[SSUN]-1659899185751
GPR[ESUN]-1659899185751
GPR[SSUN]-1659899185751
-1345859678
GPR[SPVATF]-1659899186020
GPR[EPVATF]-1659899189009
GPR[SPS]-1659899189009
[3549033] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:802.
GPR[EPS]-1659899189724
GPR[ESUN]-1659899189724
GPR[SSUN]-1659899189724
-1345859678
GPR[SPVATF]-1659899190016
GPR[EPVATF]-1659899193014
GPR[SPS]-1659899193014
[3553033] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:787.
GPR[EPS]-1659899193723
GPR[ESUN]-1659899193723
GPR[SSUN]-1659899193723
-1345859678
GPR[SPVATF]-1659899193991
GPR[EPVATF]-1659899197106
GPR[SPS]-1659899197106
[3559142] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:786.
GPR[EPS]-1659899199832
GPR[ESUN]-1659899199832
GPR[SSUN]-1659899199833
-1345859678
GPR[ESUN]-1659899200677
GPR[SSUN]-1659899200678
-1345859678
GPR[SPVATF]-1659899201360
GPR[EPVATF]-1659899204312
GPR[SPS]-1659899204312
[3565322] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:780.
GPR[EPS]-1659899206012
GPR[ESUN]-1659899206013
GPR[SSUN]-1659899206013
-1345859678
GPR[SPVATF]-1659899206369
GPR[EPVATF]-1659899208516
GPR[SPS]-1659899208516
[3568901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:773.
GPR[EPS]-1659899209592
GPR[ESUN]-1659899209592
GPR[SSUN]-1659899209592
-1345859678
GPR[SPVATF]-1659899209901
GPR[EPVATF]-1659899211994
GPR[SPS]-1659899211994
[3572219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:772.
GPR[EPS]-1659899212909
GPR[ESUN]-1659899212909
GPR[SSUN]-1659899212909
-1345859678
GPR[SPVATF]-1659899213212
GPR[EPVATF]-1659899215452
GPR[SPS]-1659899215453
[3575709] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:771.
GPR[EPS]-1659899216399
GPR[ESUN]-1659899216399
GPR[SSUN]-1659899216399
-1345859678
GPR[SPVATF]-1659899216695
GPR[EPVATF]-1659899218866
GPR[SPS]-1659899218866
[3579016] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:762.
GPR[EPS]-1659899219706
GPR[SPVATF]-1659899219706
GPR[EPVATF]-1659899221847
GPR[SPS]-1659899221847
[3581950] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:762.
GPR[EPS]-1659899222640
GPR[ESUN]-1659899222640
GPR[SSUN]-1659899222640
-1345859678
GPR[ESUN]-1659899222923
GPR[SSUN]-1659899222923
GPR[ESUN]-1659899222923
GPR[SSUN]-1659899222923
GPR[ESUN]-1659899222923
GPR[SSUN]-1659899222923
GPR[ESUN]-1659899222923
GPR[SSUN]-1659899222923
1290590094
GPR[SPVATF]-1659899223185
GPR[EPVATF]-1659899225498
GPR[SPS]-1659899225498
GPR[EPS]-1659899259882
GPR[SPVATF]-1659899259883
GPR[EPVATF]-1659899262142
GPR[SPS]-1659899262142
GPR[EPS]-1659899312104
GPR[EPS]-1659899328719
GPR[ESUN]-1659899328719
GPR[SSUN]-1659899328719
GPR[ESUN]-1659899328719
GPR[SSUN]-1659899328719
2433571
GPR[SPVATF]-1659899329143
GPR[EPVATF]-1659899331389
GPR[SPS]-1659899331389
[3691408] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int CHANGE_TIME = 56;

    public static final int LAST_PROP = 56;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            case com.google.javascript.rhino.Node.CHANGE_TIME :
                return "change_time";
            default :
                throw new java.lang.IllegalStateException("unexpected prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recur, boolean shallow) {
            boolean equiv = super.isEquivalentTo(node, compareJsType, recur, shallow);
            if (equiv) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recur, boolean shallow) {
            return super.isEquivalentTo(node, compareJsType, recur, shallow) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private static abstract class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double value) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String value) throws java.lang.UnsupportedOperationException {
        if ((this.getType() == com.google.javascript.rhino.Token.STRING) || (this.getType() == com.google.javascript.rhino.Token.NAME)) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        value = x.toString();
                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(212).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("charno",charno);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.CHANGE_TIME",com.google.javascript.rhino.Node.CHANGE_TIME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("lineno",lineno);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(212).collectionEnds();
            }
            if (runtimeAngelicValue)
                return -1;

        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true, false);
    }

    public boolean isEquivalentToShallow(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true, false);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recur, boolean shallow) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recur) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, !(shallow && n.isFunction()), shallow)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public com.google.javascript.rhino.Node setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
        return this;
    }

    public void setChangeTime(int time) {
        putIntProp(com.google.javascript.rhino.Node.CHANGE_TIME, time);
    }

    public int getChangeTime() {
        return getIntProp(com.google.javascript.rhino.Node.CHANGE_TIME);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCast() {
        return this.getType() == com.google.javascript.rhino.Token.CAST;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[3691409] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659899332099
GPR[SSUN]-1659899332099
GPR[ESUN]-1659899332099
GPR[SSUN]-1659899332099
1331276989
GPR[SPVATF]-1659899332350
GPR[EPVATF]-1659899334738
GPR[SPS]-1659899334738
[3694653] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:563.
GPR[EPS]-1659899335344
GPR[ESUN]-1659899335344
GPR[SSUN]-1659899335344
1290590094
GPR[ESUN]-1659899335601
GPR[SSUN]-1659899335601
1290590094
GPR[SPVATF]-1659899335853
GPR[EPVATF]-1659899338302
GPR[SPS]-1659899338302
GPR[EPS]-1659899369558
GPR[ESUN]-1659899369558
GPR[SSUN]-1659899369558
1187751237
GPR[SPVATF]-1659899369870
GPR[EPVATF]-1659899372585
GPR[SPS]-1659899372585
[3732756] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3073.
GPR[EPS]-1659899373446
GPR[ESUN]-1659899373446
GPR[SSUN]-1659899373446
79711797
GPR[SPVATF]-1659899373700
GPR[EPVATF]-1659899376538
GPR[SPS]-1659899376538
[3736232] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Scope implements com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticSymbolTable<com.google.javascript.jscomp.Scope.Var, com.google.javascript.jscomp.Scope.Var> {
    private final java.util.Map<java.lang.String, com.google.javascript.jscomp.Scope.Var> vars = new java.util.LinkedHashMap<java.lang.String, com.google.javascript.jscomp.Scope.Var>();

    private final com.google.javascript.jscomp.Scope parent;

    private final int depth;

    private final com.google.javascript.rhino.Node rootNode;

    private final boolean isBottom;

    private com.google.javascript.jscomp.Scope.Var arguments;

    private static final com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var> DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES = new com.google.common.base.Predicate<com.google.javascript.jscomp.Scope.Var>() {
        @java.lang.Override
        public boolean apply(com.google.javascript.jscomp.Scope.Var var) {
            return (((var.getParentNode() != null) && (var.getType() == null)) && var.getParentNode().isVar()) && (!var.isExtern());
        }
    };

    public static class Var implements com.google.javascript.rhino.jstype.StaticSlot<com.google.javascript.rhino.jstype.JSType> , com.google.javascript.rhino.jstype.StaticReference<com.google.javascript.rhino.jstype.JSType> {
        final java.lang.String name;

        final com.google.javascript.rhino.Node nameNode;

        private com.google.javascript.rhino.jstype.JSType type;

        private final boolean typeInferred;

        final com.google.javascript.jscomp.CompilerInput input;

        final int index;

        final com.google.javascript.jscomp.Scope scope;

        private boolean markedEscaped = false;

        private boolean markedAssignedExactlyOnce = false;

        private Var(boolean inferred, java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.Scope scope, int index, com.google.javascript.jscomp.CompilerInput input) {
            this.name = name;
            this.nameNode = nameNode;
            this.type = type;
            this.scope = scope;
            this.index = index;
            this.input = input;
            this.typeInferred = inferred;
        }

        @java.lang.Override
        public java.lang.String getName() {
            return name;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node getNode() {
            return nameNode;
        }

        com.google.javascript.jscomp.CompilerInput getInput() {
            return input;
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.StaticSourceFile getSourceFile() {
            return nameNode.getStaticSourceFile();
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getSymbol() {
            return this;
        }

        @java.lang.Override
        public com.google.javascript.jscomp.Scope.Var getDeclaration() {
            return nameNode == null ? null : this;
        }

        public com.google.javascript.rhino.Node getParentNode() {
            return nameNode == null ? null : nameNode.getParent();
        }

        public boolean isBleedingFunction() {
            return com.google.javascript.jscomp.NodeUtil.isFunctionExpression(getParentNode());
        }

        com.google.javascript.jscomp.Scope getScope() {
            return scope;
        }

        public boolean isGlobal() {
            return scope.isGlobal();
        }

        public boolean isLocal() {
            return scope.isLocal();
        }

        boolean isExtern() {
            return (input == null) || input.isExtern();
        }

        public boolean isConst() {
            return (nameNode != null) && com.google.javascript.jscomp.NodeUtil.isConstantName(nameNode);
        }

        public boolean isDefine() {
            com.google.javascript.rhino.JSDocInfo info = getJSDocInfo();
            return (info != null) && info.isDefine();
        }

        public com.google.javascript.rhino.Node getInitialValue() {
            return com.google.javascript.jscomp.NodeUtil.getRValueOfLValue(nameNode);
        }

        @java.lang.Override
        public com.google.javascript.rhino.jstype.JSType getType() {
            return type;
        }

        public com.google.javascript.rhino.Node getNameNode() {
            return nameNode;
        }

        @java.lang.Override
        public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
            return nameNode == null ? null : com.google.javascript.jscomp.NodeUtil.getBestJSDocInfo(nameNode);
        }

        void setType(com.google.javascript.rhino.jstype.JSType type) {
            com.google.common.base.Preconditions.checkState(isTypeInferred());
            this.type = type;
        }

        void resolveType(com.google.javascript.rhino.ErrorReporter errorReporter) {
            if (type != null) {
                type = type.resolve(errorReporter, scope);
            }
        }

        @java.lang.Override
        public boolean isTypeInferred() {
            return typeInferred;
        }

        public java.lang.String getInputName() {
            if (input == null) {
                return "<non-file>";
            }
            return input.getName();
        }

        public boolean isNoShadow() {
            com.google.javascript.rhino.JSDocInfo info = getJSDocInfo();
            return (info != null) && info.isNoShadow();
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Var)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Var otherVar = ((com.google.javascript.jscomp.Scope.Var) (other));
            return otherVar.nameNode == nameNode;
        }

        @java.lang.Override
        public int hashCode() {
            return nameNode.hashCode();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return ((("Scope.Var " + name) + "{") + type) + "}";
        }

        void markEscaped() {
            markedEscaped = true;
        }

        boolean isMarkedEscaped() {
            return markedEscaped;
        }

        void markAssignedExactlyOnce() {
            markedAssignedExactlyOnce = true;
        }

        boolean isMarkedAssignedExactlyOnce() {
            return markedAssignedExactlyOnce;
        }
    }

    public static class Arguments extends com.google.javascript.jscomp.Scope.Var {
        Arguments(com.google.javascript.jscomp.Scope scope) {
            super(false, "arguments", null, null, scope, -1, null);
        }

        @java.lang.Override
        public boolean equals(java.lang.Object other) {
            if (!(other instanceof com.google.javascript.jscomp.Scope.Arguments)) {
                return false;
            }
            com.google.javascript.jscomp.Scope.Arguments otherVar = ((com.google.javascript.jscomp.Scope.Arguments) (other));
            return otherVar.scope.getRootNode() == scope.getRootNode();
        }

        @java.lang.Override
        public int hashCode() {
            return java.lang.System.identityHashCode(this);
        }
    }

    Scope(com.google.javascript.jscomp.Scope parent, com.google.javascript.rhino.Node rootNode) {
        com.google.common.base.Preconditions.checkNotNull(parent);
        com.google.common.base.Preconditions.checkArgument(rootNode != parent.rootNode);
        this.parent = parent;
        this.rootNode = rootNode;
        this.isBottom = false;
        this.depth = parent.depth + 1;
    }

    private Scope(com.google.javascript.rhino.Node rootNode, boolean isBottom) {
        this.parent = null;
        this.rootNode = rootNode;
        this.isBottom = isBottom;
        this.depth = 0;
    }

    static com.google.javascript.jscomp.Scope createGlobalScope(com.google.javascript.rhino.Node rootNode) {
        return new com.google.javascript.jscomp.Scope(rootNode, false);
    }

    static com.google.javascript.jscomp.Scope createLatticeBottom(com.google.javascript.rhino.Node rootNode) {
        return new com.google.javascript.jscomp.Scope(rootNode, true);
    }

    int getDepth() {
        return depth;
    }

    boolean isBottom() {
        return isBottom;
    }

    @java.lang.Override
    public com.google.javascript.rhino.Node getRootNode() {
        return rootNode;
    }

    public com.google.javascript.jscomp.Scope getParent() {
        return parent;
    }

    com.google.javascript.jscomp.Scope getGlobalScope() {
        com.google.javascript.jscomp.Scope result = this;
        while (result.getParent() != null) {
            result = result.getParent();
        } 
        return result;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getParentScope() {
        return parent;
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.JSType getTypeOfThis() {
        if (isGlobal()) {
            return com.google.javascript.rhino.jstype.ObjectType.cast(rootNode.getJSType());
        }
        com.google.common.base.Preconditions.checkState(rootNode.isFunction());
        com.google.javascript.rhino.jstype.JSType nodeType = rootNode.getJSType();
        if ((nodeType != null) && nodeType.isFunctionType()) {
            return nodeType.toMaybeFunctionType().getTypeOfThis();
        } else {
            return parent.getTypeOfThis();
        }
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input) {
        return declare(name, nameNode, type, input, true);
    }

    com.google.javascript.jscomp.Scope.Var declare(java.lang.String name, com.google.javascript.rhino.Node nameNode, com.google.javascript.rhino.jstype.JSType type, com.google.javascript.jscomp.CompilerInput input, boolean inferred) {
        com.google.common.base.Preconditions.checkState((name != null) && (name.length() > 0));
        com.google.common.base.Preconditions.checkState(vars.get(name) == null);
        com.google.javascript.jscomp.Scope.Var var = new com.google.javascript.jscomp.Scope.Var(inferred, name, nameNode, type, this, vars.size(), input);
        vars.put(name, var);
        return var;
    }

    void undeclare(com.google.javascript.jscomp.Scope.Var var) {
        com.google.common.base.Preconditions.checkState(var.scope == this);
        com.google.common.base.Preconditions.checkState(vars.get(var.name) == var);
        vars.remove(var.name);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope.Var getSlot(java.lang.String name) {
        return getVar(name);
    }

    @java.lang.Override
    public com.google.javascript.jscomp.Scope.Var getOwnSlot(java.lang.String name) {
        return vars.get(name);
    }

    public com.google.javascript.jscomp.Scope.Var getVar(java.lang.String name) {
        com.google.javascript.jscomp.Scope.Var var = vars.get(name);
        if (var != null) {
            return var;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(216).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("parent != null",parent != null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.parent",com.google.javascript.jscomp.Scope.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("null",null);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES",com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("var",var);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.isBottom",com.google.javascript.jscomp.Scope.this.isBottom);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.rootNode",com.google.javascript.jscomp.Scope.this.rootNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("name",name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.depth",com.google.javascript.jscomp.Scope.this.depth);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.vars",com.google.javascript.jscomp.Scope.this.vars);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.arguments",com.google.javascript.jscomp.Scope.this.arguments);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.typeResolver",com.google.javascript.jscomp.Scope.this.typeResolver);} catch (Exception ex1) {ex1.printStackTrace();};
                if (com.google.javascript.jscomp.Scope.this.parent!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParent()",com.google.javascript.jscomp.Scope.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.parent.getDepth()",com.google.javascript.jscomp.Scope.this.parent.getDepth());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.parent.getParentScope()",com.google.javascript.jscomp.Scope.this.parent.getParentScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.parent.isBottom()",com.google.javascript.jscomp.Scope.this.parent.isBottom());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.parent.getRootNode()",com.google.javascript.jscomp.Scope.this.parent.getRootNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                if (com.google.javascript.jscomp.Scope.this.arguments!=null) {
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getName()",com.google.javascript.jscomp.Scope.this.arguments.getName());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getType()",com.google.javascript.jscomp.Scope.this.arguments.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred()",com.google.javascript.jscomp.Scope.this.arguments.isTypeInferred());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped()",com.google.javascript.jscomp.Scope.this.arguments.isMarkedEscaped());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.arguments.isMarkedAssignedExactlyOnce()",com.google.javascript.jscomp.Scope.this.arguments.isMarkedAssignedExactlyOnce());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNode()",com.google.javascript.jscomp.Scope.this.arguments.getNode());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getInput()",com.google.javascript.jscomp.Scope.this.arguments.getInput());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getScope()",com.google.javascript.jscomp.Scope.this.arguments.getScope());} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectInput("com.google.javascript.jscomp.Scope.this.arguments.getNameNode()",com.google.javascript.jscomp.Scope.this.arguments.getNameNode());} catch (Exception ex1) {ex1.printStackTrace();};
                }
                fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(216).collectionEnds();
            }
            if (runtimeAngelicValue) if (parent != null) {
                return parent.getVar(name);
            } else {
                return null;
            }
        }
    }

    public com.google.javascript.jscomp.Scope.Var getArgumentsVar() {
        if (arguments == null) {
            arguments = new com.google.javascript.jscomp.Scope.Arguments(this);
        }
        return arguments;
    }

    public boolean isDeclared(java.lang.String name, boolean recurse) {
        com.google.javascript.jscomp.Scope scope = this;
        if (scope.vars.containsKey(name)) {
            return true;
        }
        if ((scope.parent != null) && recurse) {
            return scope.parent.isDeclared(name, recurse);
        }
        return false;
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getVars() {
        return vars.values().iterator();
    }

    java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getVarIterable() {
        return vars.values();
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getReferences(com.google.javascript.jscomp.Scope.Var var) {
        return com.google.common.collect.ImmutableList.of(var);
    }

    @java.lang.Override
    public com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> getScope(com.google.javascript.jscomp.Scope.Var var) {
        return var.scope;
    }

    @java.lang.Override
    public java.lang.Iterable<com.google.javascript.jscomp.Scope.Var> getAllSymbols() {
        return java.util.Collections.unmodifiableCollection(vars.values());
    }

    public int getVarCount() {
        return vars.size();
    }

    public boolean isGlobal() {
        return parent == null;
    }

    public boolean isLocal() {
        return parent != null;
    }

    public java.util.Iterator<com.google.javascript.jscomp.Scope.Var> getDeclarativelyUnboundVarsWithoutTypes() {
        return com.google.common.collect.Iterators.filter(getVars(), com.google.javascript.jscomp.Scope.DECLARATIVELY_UNBOUND_VARS_WITHOUT_TYPES);
    }

    static interface TypeResolver {
        public abstract void resolveTypes();
    }

    private com.google.javascript.jscomp.Scope.TypeResolver typeResolver;

    void resolveTypes() {
        if (typeResolver != null) {
            typeResolver.resolveTypes();
            typeResolver = null;
        }
    }

    void setTypeResolver(com.google.javascript.jscomp.Scope.TypeResolver resolver) {
        this.typeResolver = resolver;
    }
}
[3736233] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659899376923
GPR[EPVATF]-1659899379766
GPR[SPS]-1659899379766
GPR[EPS]-1659900096631
GPR[ESUN]-1659900096631
GPR[SSUN]-1659900096631
GPR[ESUN]-1659900096631
GPR[SSUN]-1659900096631
GPR[ESUN]-1659900096631
GPR[SSUN]-1659900096631
GPR[ESUN]-1659900096631
GPR[SSUN]-1659900096631
1187751237
GPR[SPVATF]-1659900097120
GPR[EPVATF]-1659900100182
GPR[SPS]-1659900100182
[4460294] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3101.
GPR[EPS]-1659900100985
GPR[ESUN]-1659900100985
GPR[SSUN]-1659900100985
646738083
GPR[SPVATF]-1659900101336
GPR[EPVATF]-1659900104324
GPR[SPS]-1659900104325
[4464425] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator:245.
GPR[EPS]-1659900105115
GPR[ESUN]-1659900105115
GPR[SSUN]-1659900105115
646738083
GPR[ESUN]-1659900105440
GPR[SSUN]-1659900105440
646738083
GPR[SPVATF]-1659900105768
GPR[EPVATF]-1659900108796
GPR[SPS]-1659900108796
[4468941] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder$CollectProperties:1785.
GPR[EPS]-1659900109631
GPR[SPVATF]-1659900109632
GPR[EPVATF]-1659900112599
GPR[SPS]-1659900112599
[4472680] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypedScopeCreator$AbstractScopeBuilder$CollectProperties:1785.
GPR[EPS]-1659900113370
GPR[ESUN]-1659900113370
GPR[SSUN]-1659900113370
-1345859678
GPR[ESUN]-1659900113646
GPR[SSUN]-1659900113646
1187751237
GPR[ESUN]-1659900113954
GPR[SSUN]-1659900113954
GPR[ESUN]-1659900113954
GPR[SSUN]-1659900113954
GPR[ESUN]-1659900113954
GPR[SSUN]-1659900113954
GPR[ESUN]-1659900113954
GPR[SSUN]-1659900113954
GPR[ESUN]-1659900113954
GPR[SSUN]-1659900113954
GPR[ESUN]-1659900113954
GPR[SSUN]-1659900113954
-46850221
GPR[SPVATF]-1659900114201
GPR[EPVATF]-1659900117180
GPR[SPS]-1659900117180
[4477075] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:1017.
GPR[EPS]-1659900117765
GPR[ESUN]-1659900117765
GPR[SSUN]-1659900117765
-1797850673
GPR[ESUN]-1659900118048
GPR[SSUN]-1659900118048
-1797850673
GPR[SPVATF]-1659900118354
GPR[EPVATF]-1659900121390
GPR[SPS]-1659900121390
[4482673] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1887.
GPR[EPS]-1659900123363
GPR[SPVATF]-1659900123363
GPR[EPVATF]-1659900127072
GPR[SPS]-1659900127073
[4488165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1887.
GPR[EPS]-1659900128855
GPR[ESUN]-1659900128855
GPR[SSUN]-1659900128856
-1797850673
GPR[ESUN]-1659900129299
GPR[SSUN]-1659900129299
-1797850673
GPR[ESUN]-1659900129723
GPR[SSUN]-1659900129723
-1797850673
GPR[ESUN]-1659900130092
GPR[SSUN]-1659900130092
-1797850673
GPR[SPVATF]-1659900130442
GPR[EPVATF]-1659900132707
GPR[SPS]-1659900132707
[4493072] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1869.
GPR[EPS]-1659900133762
GPR[ESUN]-1659900133762
GPR[SSUN]-1659900133762
-1797850673
GPR[ESUN]-1659900134117
GPR[SSUN]-1659900134117
-1797850673
GPR[ESUN]-1659900134427
GPR[SSUN]-1659900134427
-1797850673
GPR[ESUN]-1659900134742
GPR[SSUN]-1659900134742
-1797850673
GPR[ESUN]-1659900135042
GPR[SSUN]-1659900135042
-1797850673
GPR[SPVATF]-1659900135346
GPR[EPVATF]-1659900137412
GPR[SPS]-1659900137412
[4497634] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.TypeCheck:1863.
GPR[EPS]-1659900138324
GPR[ESUN]-1659900138324
GPR[SSUN]-1659900138324
-1797850673
GPR[ESUN]-1659900138659
GPR[SSUN]-1659900138659
-46850221
GPR[SPVATF]-1659900138927
GPR[EPVATF]-1659900141010
GPR[SPS]-1659900141010
[4501032] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:315.
GPR[EPS]-1659900141722
GPR[SPVATF]-1659900141722
GPR[EPVATF]-1659900143872
GPR[SPS]-1659900143872
[4503876] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:315.
GPR[EPS]-1659900144566
GPR[ESUN]-1659900144566
GPR[SSUN]-1659900144566
-46850221
GPR[ESUN]-1659900144822
GPR[SSUN]-1659900144823
-46850221
GPR[SPVATF]-1659900145070
GPR[EPVATF]-1659900147154
GPR[SPS]-1659900147154
[4507132] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:313.
GPR[EPS]-1659900147822
GPR[SPVATF]-1659900147822
GPR[EPVATF]-1659900149922
GPR[SPS]-1659900149922
[4509911] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:313.
GPR[EPS]-1659900150601
GPR[ESUN]-1659900150601
GPR[SSUN]-1659900150601
-46850221
GPR[ESUN]-1659900150849
GPR[SSUN]-1659900150849
-46850221
GPR[ESUN]-1659900151098
GPR[SSUN]-1659900151098
-46850221
GPR[SPVATF]-1659900151353
GPR[EPVATF]-1659900153577
GPR[SPS]-1659900153577
[4513547] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.jstype.FunctionType:298.
GPR[EPS]-1659900154237
GPR[ESUN]-1659900154237
GPR[SSUN]-1659900154237
-46850221
GPR[ESUN]-1659900154488
GPR[SSUN]-1659900154488
-46850221
GPR[ESUN]-1659900154737
GPR[SSUN]-1659900154737
160819208
GPR[SPVATF]-1659900154996
GPR[EPVATF]-1659900157208
GPR[SPS]-1659900157208
[4517395] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:835.
GPR[EPS]-1659900158085
GPR[ESUN]-1659900158085
GPR[SSUN]-1659900158085
2433571
GPR[ESUN]-1659900158376
GPR[SSUN]-1659900158377
GPR[ESUN]-1659900158377
GPR[SSUN]-1659900158377
GPR[ESUN]-1659900158377
GPR[SSUN]-1659900158377
GPR[ESUN]-1659900158377
GPR[SSUN]-1659900158377
561857265
GPR[ESUN]-1659900158570
GPR[SSUN]-1659900158570
160819208
GPR[SPVATF]-1659900158822
GPR[EPVATF]-1659900160986
GPR[SPS]-1659900160986
[4521056] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:204.
GPR[EPS]-1659900161746
GPR[ESUN]-1659900161747
GPR[SSUN]-1659900161747
160819208
GPR[SPVATF]-1659900161998
GPR[EPVATF]-1659900164179
GPR[SPS]-1659900164179
[4524182] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:834.
GPR[EPS]-1659900164872
GPR[SPVATF]-1659900164872
GPR[EPVATF]-1659900167090
GPR[SPS]-1659900167090
[4527096] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:834.
GPR[EPS]-1659900167786
GPR[ESUN]-1659900167787
GPR[SSUN]-1659900167787
160819208
GPR[SPVATF]-1659900168047
GPR[EPVATF]-1659900170415
GPR[SPS]-1659900170415
[4530417] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:833.
GPR[EPS]-1659900171107
GPR[ESUN]-1659900171107
GPR[SSUN]-1659900171107
160819208
GPR[ESUN]-1659900171430
GPR[SSUN]-1659900171430
160819208
GPR[ESUN]-1659900171684
GPR[SSUN]-1659900171684
-1345859678
GPR[ESUN]-1659900171955
GPR[SSUN]-1659900171955
-1345859678
GPR[SPVATF]-1659900172222
GPR[EPVATF]-1659900174621
GPR[SPS]-1659900174621
[4534730] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:405.
GPR[EPS]-1659900175420
GPR[ESUN]-1659900175420
GPR[SSUN]-1659900175420
-1345859678
GPR[SPVATF]-1659900175696
GPR[EPVATF]-1659900178232
GPR[SPS]-1659900178232
[4538255] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:402.
GPR[EPS]-1659900178945
GPR[SPVATF]-1659900178946
GPR[EPVATF]-1659900181752
GPR[SPS]-1659900181752
[4541761] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:402.
GPR[EPS]-1659900182451
GPR[ESUN]-1659900182451
GPR[SSUN]-1659900182451
-1345859678
GPR[ESUN]-1659900182715
GPR[SSUN]-1659900182715
-1345859678
GPR[ESUN]-1659900182980
GPR[SSUN]-1659900182980
-1345859678
GPR[SPVATF]-1659900183256
GPR[EPVATF]-1659900186118
GPR[SPS]-1659900186118
[4545903] ERROR ConstraintModelBuilder - Unable to compile the change: 
class IRFactory {
    static final java.lang.String GETTER_ERROR_MESSAGE = "getters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SETTER_ERROR_MESSAGE = "setters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SUSPICIOUS_COMMENT_WARNING = "Non-JSDoc comment has annotations. " + "Did you mean to start it with '/**'?";

    static final java.lang.String MISPLACED_TYPE_ANNOTATION = "Type annotations are not allowed here. Are you missing parentheses?";

    private final java.lang.String sourceString;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.parsing.Config config;

    private final com.google.javascript.rhino.head.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher transformDispatcher;

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ALLOWED_DIRECTIVES = com.google.common.collect.ImmutableSet.of("use strict");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_STRICT_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield");

    private final java.util.Set<java.lang.String> reservedKeywords;

    private final java.util.Set<com.google.javascript.rhino.head.ast.Comment> parsedComments = com.google.common.collect.Sets.newHashSet();

    com.google.javascript.rhino.Node rootNodeJsDocHolder = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);

    com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = rootNodeJsDocHolder.getJsDocBuilderForNode();

    com.google.javascript.rhino.JSDocInfo fileOverviewInfo = null;

    private final com.google.javascript.rhino.Node templateNode;

    private IRFactory(java.lang.String sourceString, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        this.sourceString = sourceString;
        this.sourceFile = sourceFile;
        this.sourceName = (sourceFile == null) ? null : sourceFile.getName();
        this.config = config;
        this.errorReporter = errorReporter;
        this.transformDispatcher = new com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher();
        this.templateNode = createTemplateNode();
        switch (config.languageMode) {
            case ECMASCRIPT3 :
                reservedKeywords = null;
                break;
            case ECMASCRIPT5 :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS;
                break;
            case ECMASCRIPT5_STRICT :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS;
                break;
            default :
                throw new java.lang.IllegalStateException("unknown language mode");
        }
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        templateNode.setStaticSourceFile(sourceFile);
        return templateNode;
    }

    public static com.google.javascript.rhino.Node transformTree(com.google.javascript.rhino.head.ast.AstRoot node, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, java.lang.String sourceString, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        com.google.javascript.jscomp.parsing.IRFactory irFactory = new com.google.javascript.jscomp.parsing.IRFactory(sourceString, sourceFile, config, errorReporter);
        com.google.javascript.rhino.Node irNode = irFactory.transform(node);
        if (node.getComments() != null) {
            for (com.google.javascript.rhino.head.ast.Comment comment : node.getComments()) {
                if ((comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.JSDOC) && (!irFactory.parsedComments.contains(comment))) {
                    irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
                } else if (comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.BLOCK_COMMENT) {
                    irFactory.handleBlockComment(comment);
                }
            }
        }
        irFactory.setFileOverviewJsDoc(irNode);
        return irNode;
    }

    private void setFileOverviewJsDoc(com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();
        if (rootNodeJsDoc != null) {
            irNode.setJSDocInfo(rootNodeJsDoc);
            rootNodeJsDoc.setAssociatedNode(irNode);
        }
        if (fileOverviewInfo != null) {
            if ((irNode.getJSDocInfo() != null) && (irNode.getJSDocInfo().getLicense() != null)) {
                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());
            }
            irNode.setJSDocInfo(fileOverviewInfo);
            fileOverviewInfo.setAssociatedNode(irNode);
        }
    }

    private com.google.javascript.rhino.Node transformBlock(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = transform(node);
        if (!irNode.isBlock()) {
            if (irNode.isEmpty()) {
                irNode.setType(com.google.javascript.rhino.Token.BLOCK);
                irNode.setWasEmptyNode(true);
            } else {
                com.google.javascript.rhino.Node newBlock = newNode(com.google.javascript.rhino.Token.BLOCK, irNode);
                newBlock.setLineno(irNode.getLineno());
                newBlock.setCharno(irNode.getCharno());
                maybeSetLengthFrom(newBlock, node);
                irNode = newBlock;
            }
        }
        return irNode;
    }

    private void handleBlockComment(com.google.javascript.rhino.head.ast.Comment comment) {
        java.lang.String value = comment.getValue();
        if ((value.indexOf("/* @") != (-1)) || (value.indexOf("\n * @") != (-1))) {
            errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), "", 0);
        }
    }

    private boolean handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser) {
        if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {
            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();
            return true;
        }
        return false;
    }

    private void handlePossibleFileOverviewJsDoc(com.google.javascript.rhino.head.ast.Comment comment, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
        parsedComments.add(comment);
        handlePossibleFileOverviewJsDoc(jsDocParser);
    }

    private com.google.javascript.rhino.JSDocInfo handleJsDoc(com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.head.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
            parsedComments.add(comment);
            if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {
                com.google.javascript.rhino.JSDocInfo info = jsDocParser.retrieveAndResetParsedJSDocInfo();
                if (info != null) {
                    validateTypeAnnotations(info, node);
                }
                return info;
            }
        }
        return null;
    }

    private void validateTypeAnnotations(com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.head.ast.AstNode node) {
        if (info.hasType()) {
            boolean valid = false;
            switch (node.getType()) {
                case com.google.javascript.rhino.head.Token.LP :
                    valid = node instanceof com.google.javascript.rhino.head.ast.ParenthesizedExpression;
                    break;
                case com.google.javascript.rhino.head.Token.VAR :
                    valid = true;
                    break;
                case com.google.javascript.rhino.head.Token.FUNCTION :
                    com.google.javascript.rhino.head.ast.FunctionNode fnNode = ((com.google.javascript.rhino.head.ast.FunctionNode) (node));
                    valid = fnNode.getFunctionType() == com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_STATEMENT;
                    break;
                case com.google.javascript.rhino.head.Token.NAME :
                    valid = ((node.getParent() instanceof com.google.javascript.rhino.head.ast.ObjectProperty) || (node.getParent() instanceof com.google.javascript.rhino.head.ast.CatchClause)) || (node.getParent() instanceof com.google.javascript.rhino.head.ast.FunctionNode);
                    break;
                case com.google.javascript.rhino.head.Token.GET :
                case com.google.javascript.rhino.head.Token.SET :
                case com.google.javascript.rhino.head.Token.NUMBER :
                case com.google.javascript.rhino.head.Token.STRING :
                    valid = node.getParent() instanceof com.google.javascript.rhino.head.ast.ObjectProperty;
                    break;
                case com.google.javascript.rhino.head.Token.ASSIGN :
                    if (node instanceof com.google.javascript.rhino.head.ast.Assignment) {
                        valid = isExprStmt(node.getParent()) && isPropAccess(((com.google.javascript.rhino.head.ast.Assignment) (node)).getLeft());
                    }
                    break;
                case com.google.javascript.rhino.head.Token.GETPROP :
                case com.google.javascript.rhino.head.Token.GETELEM :
                    valid = isExprStmt(node.getParent());
                    break;
                case com.google.javascript.rhino.head.Token.CALL :
                    valid = info.isDefine();
                    break;
            }
            if (!valid) {
                errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.MISPLACED_TYPE_ANNOTATION, sourceName, node.getLineno(), "", 0);
            }
        }
    }

    private boolean isPropAccess(com.google.javascript.rhino.head.ast.AstNode node) {
        return (node.getType() == com.google.javascript.rhino.head.Token.GETPROP) || (node.getType() == com.google.javascript.rhino.head.Token.GETELEM);
    }

    private boolean isExprStmt(com.google.javascript.rhino.head.ast.AstNode node) {
        return (node.getType() == com.google.javascript.rhino.head.Token.EXPR_RESULT) || (node.getType() == com.google.javascript.rhino.head.Token.EXPR_VOID);
    }

    private com.google.javascript.rhino.Node transform(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode = maybeInjectCastNode(node, jsDocInfo, irNode);
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node maybeInjectCastNode(com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.Node irNode) {
        if (((node.getType() == com.google.javascript.rhino.head.Token.LP) && (node instanceof com.google.javascript.rhino.head.ast.ParenthesizedExpression)) && info.hasType()) {
            irNode = newNode(com.google.javascript.rhino.Token.CAST, irNode);
        }
        return irNode;
    }

    private com.google.javascript.rhino.Node transformParameter(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.head.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.rhino.JSDocInfo info = parseInlineTypeDoc(comment, irNode);
            if (info != null) {
                irNode.setJSDocInfo(info);
            }
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNameAsString(com.google.javascript.rhino.head.ast.Name node) {
        com.google.javascript.rhino.Node irNode = transformDispatcher.processName(node, true);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
        com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, literalNode);
        return irNode;
    }

    private static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    private void setSourceInfo(com.google.javascript.rhino.Node irNode, com.google.javascript.rhino.head.ast.AstNode node) {
        if (irNode.getLineno() == (-1)) {
            int lineno = node.getLineno();
            irNode.setLineno(lineno);
            int charno = position2charno(node.getAbsolutePosition());
            irNode.setCharno(charno);
            maybeSetLengthFrom(irNode, node);
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser createJsDocInfoParser(com.google.javascript.rhino.head.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsdocParser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
        jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);
        jsdocParser.parse();
        return jsdocParser;
    }

    private com.google.javascript.rhino.JSDocInfo parseInlineTypeDoc(com.google.javascript.rhino.head.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser parser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        return parser.parseInlineTypeDoc();
    }

    private void maybeSetLengthFrom(com.google.javascript.rhino.Node node, com.google.javascript.rhino.head.ast.AstNode source) {
        if (config.isIdeMode) {
            node.setLength(source.getLength());
        }
    }

    private int position2charno(int position) {
        int lineIndex = sourceString.lastIndexOf('\n', position);
        if (lineIndex == (-1)) {
            return position;
        } else {
            return (position - lineIndex) - 1;
        }
    }

    private com.google.javascript.rhino.Node justTransform(com.google.javascript.rhino.head.ast.AstNode node) {
        return transformDispatcher.process(node);
    }

    private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node processGeneric(com.google.javascript.rhino.head.Node n) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));
            for (com.google.javascript.rhino.head.Node child : n) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            return node;
        }

        private com.google.javascript.rhino.Node transformAsString(com.google.javascript.rhino.head.ast.AstNode n) {
            com.google.javascript.rhino.Node ret;
            if (n instanceof com.google.javascript.rhino.head.ast.Name) {
                ret = transformNameAsString(((com.google.javascript.rhino.head.ast.Name) (n)));
            } else if (n instanceof com.google.javascript.rhino.head.ast.NumberLiteral) {
                ret = transformNumberAsString(((com.google.javascript.rhino.head.ast.NumberLiteral) (n)));
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            } else {
                ret = transform(n);
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            }
            com.google.common.base.Preconditions.checkState(ret.isString());
            return ret;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.rhino.head.ast.ArrayLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.ARRAYLIT);
            for (com.google.javascript.rhino.head.ast.AstNode child : literalNode.getElements()) {
                com.google.javascript.rhino.Node c = transform(child);
                node.addChildToBack(c);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAssignment(com.google.javascript.rhino.head.ast.Assignment assignmentNode) {
            com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);
            com.google.javascript.rhino.Node target = assign.getFirstChild();
            if (!validAssignmentTarget(target)) {
                errorReporter.error("invalid assignment target", sourceName, target.getLineno(), "", 0);
            }
            return assign;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAstRoot(com.google.javascript.rhino.head.ast.AstRoot rootNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SCRIPT);
            for (com.google.javascript.rhino.head.Node child : rootNode) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            parseDirectives(node);
            return node;
        }

        private void parseDirectives(com.google.javascript.rhino.Node node) {
            java.util.Set<java.lang.String> directives = null;
            while (isDirective(node.getFirstChild())) {
                java.lang.String directive = node.removeFirstChild().getFirstChild().getString();
                if (directives == null) {
                    directives = com.google.common.collect.Sets.newHashSet(directive);
                } else {
                    directives.add(directive);
                }
            } 
            if (directives != null) {
                node.setDirectives(directives);
            }
        }

        private boolean isDirective(com.google.javascript.rhino.Node n) {
            if (n == null) {
                return false;
            }
            int nType = n.getType();
            return ((nType == com.google.javascript.rhino.Token.EXPR_RESULT) && n.getFirstChild().isString()) && com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBlock(com.google.javascript.rhino.head.ast.Block blockNode) {
            return processGeneric(blockNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.rhino.head.ast.BreakStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.BREAK);
            if (statementNode.getBreakLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processCatchClause(com.google.javascript.rhino.head.ast.CatchClause clauseNode) {
            com.google.javascript.rhino.head.ast.AstNode catchVar = clauseNode.getVarName();
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CATCH, transform(catchVar));
            if (clauseNode.getCatchCondition() != null) {
                errorReporter.error("Catch clauses are not supported", sourceName, clauseNode.getCatchCondition().getLineno(), "", 0);
            }
            node.addChildToBack(transformBlock(clauseNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.rhino.head.ast.ConditionalExpression exprNode) {
            return newNode(com.google.javascript.rhino.Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.rhino.head.ast.ContinueStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CONTINUE);
            if (statementNode.getLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processDoLoop(com.google.javascript.rhino.head.ast.DoLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processElementGet(com.google.javascript.rhino.head.ast.ElementGet getNode) {
            return newNode(com.google.javascript.rhino.Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.rhino.head.ast.EmptyExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyStatement(com.google.javascript.rhino.head.ast.EmptyStatement exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));
            node.addChildToBack(transform(statementNode.getExpression()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForInLoop(com.google.javascript.rhino.head.ast.ForInLoop loopNode) {
            if (loopNode.isForEach()) {
                errorReporter.error("unsupported language extension: for each", sourceName, loopNode.getLineno(), "", 0);
                return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
            }
            return newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForLoop(com.google.javascript.rhino.head.ast.ForLoop loopNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));
            node.addChildToBack(transformBlock(loopNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.rhino.head.ast.FunctionCall callNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : callNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(node.getFirstChild().getLineno());
            node.setCharno(node.getFirstChild().getCharno());
            maybeSetLengthFrom(node, callNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode functionNode) {
            com.google.javascript.rhino.head.ast.Name name = functionNode.getFunctionName();
            java.lang.Boolean isUnnamedFunction = false;
            if (name == null) {
                int functionType = functionNode.getFunctionType();
                if (functionType != com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_EXPRESSION) {
                    errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
                    return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
                }
                name = new com.google.javascript.rhino.head.ast.Name();
                name.setIdentifier("");
                isUnnamedFunction = true;
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FUNCTION);
            com.google.javascript.rhino.Node newName = transform(name);
            if (isUnnamedFunction) {
                newName.setLineno(functionNode.getLineno());
                int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
                newName.setCharno(position2charno(lpColumn));
                maybeSetLengthFrom(newName, name);
            }
            node.addChildToBack(newName);
            com.google.javascript.rhino.Node lp = newNode(com.google.javascript.rhino.Token.PARAM_LIST);
            com.google.javascript.rhino.head.ast.Name fnName = functionNode.getFunctionName();
            if (fnName != null) {
                lp.setLineno(fnName.getLineno());
            } else {
                lp.setLineno(functionNode.getLineno());
            }
            int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
            lp.setCharno(position2charno(lparenCharno));
            for (com.google.javascript.rhino.head.ast.AstNode param : functionNode.getParams()) {
                com.google.javascript.rhino.Node paramNode = transformParameter(param);
                if (paramNode.isName()) {
                    lp.addChildToBack(paramNode);
                } else {
                    com.google.common.base.Preconditions.checkState((config.isIdeMode || paramNode.isObjectLit()) || paramNode.isArrayLit());
                }
            }
            node.addChildToBack(lp);
            com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());
            if (!bodyNode.isBlock()) {
                com.google.common.base.Preconditions.checkState(config.isIdeMode);
                bodyNode = com.google.javascript.rhino.IR.block();
            }
            parseDirectives(bodyNode);
            node.addChildToBack(bodyNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIfStatement(com.google.javascript.rhino.head.ast.IfStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.IF);
            node.addChildToBack(transform(statementNode.getCondition()));
            node.addChildToBack(transformBlock(statementNode.getThenPart()));
            if (statementNode.getElsePart() != null) {
                node.addChildToBack(transformBlock(statementNode.getElsePart()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression exprNode) {
            com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));
            n.setLineno(exprNode.getLineno());
            n.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(n, exprNode);
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.rhino.head.ast.KeywordLiteral literalNode) {
            return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabel(com.google.javascript.rhino.head.ast.Label labelNode) {
            return newStringNode(com.google.javascript.rhino.Token.LABEL_NAME, labelNode.getName());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.rhino.head.ast.LabeledStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.LABEL);
            com.google.javascript.rhino.Node prev = null;
            com.google.javascript.rhino.Node cur = node;
            for (com.google.javascript.rhino.head.ast.Label label : statementNode.getLabels()) {
                if (prev != null) {
                    prev.addChildToBack(cur);
                }
                cur.addChildToBack(transform(label));
                cur.setLineno(label.getLineno());
                maybeSetLengthFrom(cur, label);
                int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());
                cur.setCharno(clauseAbsolutePosition);
                prev = cur;
                cur = newNode(com.google.javascript.rhino.Token.LABEL);
            }
            prev.addChildToBack(transform(statementNode.getStatement()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode) {
            return processName(nameNode, false);
        }

        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode, boolean asString) {
            if (asString) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(240).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceString",com.google.javascript.jscomp.parsing.IRFactory.this.sourceString);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher",com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.MISPLACED_TYPE_ANNOTATION",com.google.javascript.jscomp.parsing.IRFactory.MISPLACED_TYPE_ANNOTATION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo",com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile",com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter",com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder",com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords",com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.templateNode",com.google.javascript.jscomp.parsing.IRFactory.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.config",com.google.javascript.jscomp.parsing.IRFactory.this.config);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments",com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("asString",asString);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceName",com.google.javascript.jscomp.parsing.IRFactory.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectInput("nameNode",nameNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(240).collectionEnds();
                }
                if (runtimeAngelicValue)
                    return newStringNode(com.google.javascript.rhino.Token.STRING, nameNode.getIdentifier());

            } else {
                if (isReservedKeyword(nameNode.getIdentifier())) {
                    errorReporter.error("identifier is a reserved word", sourceName, nameNode.getLineno(), "", 0);
                }
                return newStringNode(com.google.javascript.rhino.Token.NAME, nameNode.getIdentifier());
            }
        }

        private boolean isReservedKeyword(java.lang.String identifier) {
            return (reservedKeywords != null) && reservedKeywords.contains(identifier);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNewExpression(com.google.javascript.rhino.head.ast.NewExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : exprNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(exprNode.getLineno());
            node.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(node, exprNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
            return newNumberNode(literalNode.getNumber());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.rhino.head.ast.ObjectLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.OBJECTLIT);
            for (com.google.javascript.rhino.head.ast.ObjectProperty el : literalNode.getElements()) {
                if (config.languageMode == com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3) {
                    if (el.isGetter()) {
                        reportGetter(el);
                        continue;
                    } else if (el.isSetter()) {
                        reportSetter(el);
                        continue;
                    }
                }
                com.google.javascript.rhino.Node key = transformAsString(el.getLeft());
                key.setType(com.google.javascript.rhino.Token.STRING_KEY);
                com.google.javascript.rhino.Node value = transform(el.getRight());
                if (el.isGetter()) {
                    key.setType(com.google.javascript.rhino.Token.GETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (getFnParamNode(value).hasChildren()) {
                        reportGetterParam(el.getLeft());
                    }
                } else if (el.isSetter()) {
                    key.setType(com.google.javascript.rhino.Token.SETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (!getFnParamNode(value).hasOneChild()) {
                        reportSetterParam(el.getLeft());
                    }
                }
                key.addChildToFront(value);
                node.addChildToBack(key);
            }
            return node;
        }

        com.google.javascript.rhino.Node getFnParamNode(com.google.javascript.rhino.Node fnNode) {
            com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
            return fnNode.getFirstChild().getNext();
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.rhino.head.ast.ObjectProperty propertyNode) {
            return processInfixExpression(propertyNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.rhino.head.ast.ParenthesizedExpression exprNode) {
            com.google.javascript.rhino.Node node = transform(exprNode.getExpression());
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.rhino.head.ast.PropertyGet getNode) {
            com.google.javascript.rhino.Node leftChild = transform(getNode.getTarget());
            com.google.javascript.rhino.Node newNode = newNode(com.google.javascript.rhino.Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));
            newNode.setLineno(leftChild.getLineno());
            newNode.setCharno(leftChild.getCharno());
            maybeSetLengthFrom(newNode, getNode);
            return newNode;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.rhino.head.ast.RegExpLiteral literalNode) {
            com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());
            literalStringNode.setLineno(literalNode.getLineno());
            maybeSetLengthFrom(literalStringNode, literalNode);
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.REGEXP, literalStringNode);
            java.lang.String flags = literalNode.getFlags();
            if ((flags != null) && (!flags.isEmpty())) {
                com.google.javascript.rhino.Node flagsNode = newStringNode(flags);
                flagsNode.setLineno(literalNode.getLineno());
                maybeSetLengthFrom(flagsNode, literalNode);
                node.addChildToBack(flagsNode);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.rhino.head.ast.ReturnStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.RETURN);
            if (statementNode.getReturnValue() != null) {
                node.addChildToBack(transform(statementNode.getReturnValue()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processScope(com.google.javascript.rhino.head.ast.Scope scopeNode) {
            return processGeneric(scopeNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.rhino.head.ast.StringLiteral literalNode) {
            java.lang.String value = literalNode.getValue();
            com.google.javascript.rhino.Node n = newStringNode(value);
            if (value.indexOf('\u000b') != (-1)) {
                int start = literalNode.getAbsolutePosition();
                int end = start + literalNode.getLength();
                if ((start < sourceString.length()) && (sourceString.substring(start, java.lang.Math.min(sourceString.length(), end)).indexOf("\\v") != (-1))) {
                    n.putBooleanProp(com.google.javascript.rhino.Node.SLASH_V, true);
                }
            }
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.rhino.head.ast.SwitchCase caseNode) {
            com.google.javascript.rhino.Node node;
            if (caseNode.isDefault()) {
                node = newNode(com.google.javascript.rhino.Token.DEFAULT_CASE);
            } else {
                com.google.javascript.rhino.head.ast.AstNode expr = caseNode.getExpression();
                node = newNode(com.google.javascript.rhino.Token.CASE, transform(expr));
            }
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            block.putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, true);
            block.setLineno(caseNode.getLineno());
            block.setCharno(position2charno(caseNode.getAbsolutePosition()));
            maybeSetLengthFrom(block, caseNode);
            if (caseNode.getStatements() != null) {
                for (com.google.javascript.rhino.head.ast.AstNode child : caseNode.getStatements()) {
                    block.addChildToBack(transform(child));
                }
            }
            node.addChildToBack(block);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.rhino.head.ast.SwitchStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SWITCH, transform(statementNode.getExpression()));
            for (com.google.javascript.rhino.head.ast.AstNode child : statementNode.getCases()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.rhino.head.ast.ThrowStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.THROW, transform(statementNode.getExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processTryStatement(com.google.javascript.rhino.head.ast.TryStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.TRY, transformBlock(statementNode.getTryBlock()));
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            boolean lineSet = false;
            for (com.google.javascript.rhino.head.ast.CatchClause cc : statementNode.getCatchClauses()) {
                if (lineSet == false) {
                    block.setLineno(cc.getLineno());
                    maybeSetLengthFrom(block, cc);
                    lineSet = true;
                }
                block.addChildToBack(transform(cc));
            }
            node.addChildToBack(block);
            com.google.javascript.rhino.head.ast.AstNode finallyBlock = statementNode.getFinallyBlock();
            if (finallyBlock != null) {
                node.addChildToBack(transformBlock(finallyBlock));
            }
            if ((lineSet == false) && (finallyBlock != null)) {
                block.setLineno(finallyBlock.getLineno());
                maybeSetLengthFrom(block, finallyBlock);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.rhino.head.ast.UnaryExpression exprNode) {
            int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());
            com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());
            if ((type == com.google.javascript.rhino.Token.NEG) && operand.isNumber()) {
                operand.setDouble(-operand.getDouble());
                return operand;
            } else {
                if ((type == com.google.javascript.rhino.Token.DELPROP) && (!((operand.isGetProp() || operand.isGetElem()) || operand.isName()))) {
                    java.lang.String msg = "Invalid delete operand. Only properties can be deleted.";
                    errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
                    if (!validAssignmentTarget(operand)) {
                        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? "invalid increment target" : "invalid decrement target";
                        errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                    }
                }
                com.google.javascript.rhino.Node node = newNode(type, operand);
                if (exprNode.isPostfix()) {
                    node.putBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP, true);
                }
                return node;
            }
        }

        private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {
            switch (target.getType()) {
                case com.google.javascript.rhino.Token.CAST :
                case com.google.javascript.rhino.Token.NAME :
                case com.google.javascript.rhino.Token.GETPROP :
                case com.google.javascript.rhino.Token.GETELEM :
                    return true;
            }
            return false;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration declarationNode) {
            if ((!config.acceptConstKeyword) && (declarationNode.getType() == com.google.javascript.rhino.head.Token.CONST)) {
                processIllegalToken(declarationNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.VAR);
            for (com.google.javascript.rhino.head.ast.VariableInitializer child : declarationNode.getVariables()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer initializerNode) {
            com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());
            if (initializerNode.getInitializer() != null) {
                com.google.javascript.rhino.Node initalizer = transform(initializerNode.getInitializer());
                node.addChildToBack(initalizer);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.rhino.head.ast.WhileLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWithStatement(com.google.javascript.rhino.head.ast.WithStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("Unsupported syntax: " + com.google.javascript.rhino.head.Token.typeToName(node.getType()), sourceName, node.getLineno(), "", 0);
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }

        void reportDestructuringAssign(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("destructuring assignment forbidden", sourceName, node.getLineno(), "", 0);
        }

        void reportGetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportSetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportGetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("getters may not have parameters", sourceName, node.getLineno(), "", 0);
        }

        void reportSetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("setters must have exactly one parameter", sourceName, node.getLineno(), "", 0);
        }
    }

    private static int transformTokenType(int token) {
        switch (token) {
            case com.google.javascript.rhino.head.Token.RETURN :
                return com.google.javascript.rhino.Token.RETURN;
            case com.google.javascript.rhino.head.Token.BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.head.Token.BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.head.Token.BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.head.Token.EQ :
                return com.google.javascript.rhino.Token.EQ;
            case com.google.javascript.rhino.head.Token.NE :
                return com.google.javascript.rhino.Token.NE;
            case com.google.javascript.rhino.head.Token.LT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.head.Token.LE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.head.Token.GT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.head.Token.GE :
                return com.google.javascript.rhino.Token.GE;
            case com.google.javascript.rhino.head.Token.LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.head.Token.RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.head.Token.URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.head.Token.ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.head.Token.SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.head.Token.MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.head.Token.DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.head.Token.MOD :
                return com.google.javascript.rhino.Token.MOD;
            case com.google.javascript.rhino.head.Token.NOT :
                return com.google.javascript.rhino.Token.NOT;
            case com.google.javascript.rhino.head.Token.BITNOT :
                return com.google.javascript.rhino.Token.BITNOT;
            case com.google.javascript.rhino.head.Token.POS :
                return com.google.javascript.rhino.Token.POS;
            case com.google.javascript.rhino.head.Token.NEG :
                return com.google.javascript.rhino.Token.NEG;
            case com.google.javascript.rhino.head.Token.NEW :
                return com.google.javascript.rhino.Token.NEW;
            case com.google.javascript.rhino.head.Token.DELPROP :
                return com.google.javascript.rhino.Token.DELPROP;
            case com.google.javascript.rhino.head.Token.TYPEOF :
                return com.google.javascript.rhino.Token.TYPEOF;
            case com.google.javascript.rhino.head.Token.GETPROP :
                return com.google.javascript.rhino.Token.GETPROP;
            case com.google.javascript.rhino.head.Token.GETELEM :
                return com.google.javascript.rhino.Token.GETELEM;
            case com.google.javascript.rhino.head.Token.CALL :
                return com.google.javascript.rhino.Token.CALL;
            case com.google.javascript.rhino.head.Token.NAME :
                return com.google.javascript.rhino.Token.NAME;
            case com.google.javascript.rhino.head.Token.NUMBER :
                return com.google.javascript.rhino.Token.NUMBER;
            case com.google.javascript.rhino.head.Token.STRING :
                return com.google.javascript.rhino.Token.STRING;
            case com.google.javascript.rhino.head.Token.NULL :
                return com.google.javascript.rhino.Token.NULL;
            case com.google.javascript.rhino.head.Token.THIS :
                return com.google.javascript.rhino.Token.THIS;
            case com.google.javascript.rhino.head.Token.FALSE :
                return com.google.javascript.rhino.Token.FALSE;
            case com.google.javascript.rhino.head.Token.TRUE :
                return com.google.javascript.rhino.Token.TRUE;
            case com.google.javascript.rhino.head.Token.SHEQ :
                return com.google.javascript.rhino.Token.SHEQ;
            case com.google.javascript.rhino.head.Token.SHNE :
                return com.google.javascript.rhino.Token.SHNE;
            case com.google.javascript.rhino.head.Token.REGEXP :
                return com.google.javascript.rhino.Token.REGEXP;
            case com.google.javascript.rhino.head.Token.THROW :
                return com.google.javascript.rhino.Token.THROW;
            case com.google.javascript.rhino.head.Token.IN :
                return com.google.javascript.rhino.Token.IN;
            case com.google.javascript.rhino.head.Token.INSTANCEOF :
                return com.google.javascript.rhino.Token.INSTANCEOF;
            case com.google.javascript.rhino.head.Token.ARRAYLIT :
                return com.google.javascript.rhino.Token.ARRAYLIT;
            case com.google.javascript.rhino.head.Token.OBJECTLIT :
                return com.google.javascript.rhino.Token.OBJECTLIT;
            case com.google.javascript.rhino.head.Token.TRY :
                return com.google.javascript.rhino.Token.TRY;
            case com.google.javascript.rhino.head.Token.LP :
                return com.google.javascript.rhino.Token.PARAM_LIST;
            case com.google.javascript.rhino.head.Token.COMMA :
                return com.google.javascript.rhino.Token.COMMA;
            case com.google.javascript.rhino.head.Token.ASSIGN :
                return com.google.javascript.rhino.Token.ASSIGN;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITXOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.ASSIGN_BITAND;
            case com.google.javascript.rhino.head.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.ASSIGN_LSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.ASSIGN_RSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.ASSIGN_URSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ASSIGN_ADD;
            case com.google.javascript.rhino.head.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.ASSIGN_SUB;
            case com.google.javascript.rhino.head.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.ASSIGN_MUL;
            case com.google.javascript.rhino.head.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.ASSIGN_DIV;
            case com.google.javascript.rhino.head.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.ASSIGN_MOD;
            case com.google.javascript.rhino.head.Token.HOOK :
                return com.google.javascript.rhino.Token.HOOK;
            case com.google.javascript.rhino.head.Token.OR :
                return com.google.javascript.rhino.Token.OR;
            case com.google.javascript.rhino.head.Token.AND :
                return com.google.javascript.rhino.Token.AND;
            case com.google.javascript.rhino.head.Token.INC :
                return com.google.javascript.rhino.Token.INC;
            case com.google.javascript.rhino.head.Token.DEC :
                return com.google.javascript.rhino.Token.DEC;
            case com.google.javascript.rhino.head.Token.FUNCTION :
                return com.google.javascript.rhino.Token.FUNCTION;
            case com.google.javascript.rhino.head.Token.IF :
                return com.google.javascript.rhino.Token.IF;
            case com.google.javascript.rhino.head.Token.SWITCH :
                return com.google.javascript.rhino.Token.SWITCH;
            case com.google.javascript.rhino.head.Token.CASE :
                return com.google.javascript.rhino.Token.CASE;
            case com.google.javascript.rhino.head.Token.DEFAULT :
                return com.google.javascript.rhino.Token.DEFAULT_CASE;
            case com.google.javascript.rhino.head.Token.WHILE :
                return com.google.javascript.rhino.Token.WHILE;
            case com.google.javascript.rhino.head.Token.DO :
                return com.google.javascript.rhino.Token.DO;
            case com.google.javascript.rhino.head.Token.FOR :
                return com.google.javascript.rhino.Token.FOR;
            case com.google.javascript.rhino.head.Token.BREAK :
                return com.google.javascript.rhino.Token.BREAK;
            case com.google.javascript.rhino.head.Token.CONTINUE :
                return com.google.javascript.rhino.Token.CONTINUE;
            case com.google.javascript.rhino.head.Token.VAR :
                return com.google.javascript.rhino.Token.VAR;
            case com.google.javascript.rhino.head.Token.WITH :
                return com.google.javascript.rhino.Token.WITH;
            case com.google.javascript.rhino.head.Token.CATCH :
                return com.google.javascript.rhino.Token.CATCH;
            case com.google.javascript.rhino.head.Token.VOID :
                return com.google.javascript.rhino.Token.VOID;
            case com.google.javascript.rhino.head.Token.EMPTY :
                return com.google.javascript.rhino.Token.EMPTY;
            case com.google.javascript.rhino.head.Token.BLOCK :
                return com.google.javascript.rhino.Token.BLOCK;
            case com.google.javascript.rhino.head.Token.LABEL :
                return com.google.javascript.rhino.Token.LABEL;
            case com.google.javascript.rhino.head.Token.EXPR_VOID :
            case com.google.javascript.rhino.head.Token.EXPR_RESULT :
                return com.google.javascript.rhino.Token.EXPR_RESULT;
            case com.google.javascript.rhino.head.Token.SCRIPT :
                return com.google.javascript.rhino.Token.SCRIPT;
            case com.google.javascript.rhino.head.Token.GET :
                return com.google.javascript.rhino.Token.GETTER_DEF;
            case com.google.javascript.rhino.head.Token.SET :
                return com.google.javascript.rhino.Token.SETTER_DEF;
            case com.google.javascript.rhino.head.Token.CONST :
                return com.google.javascript.rhino.Token.CONST;
            case com.google.javascript.rhino.head.Token.DEBUGGER :
                return com.google.javascript.rhino.Token.DEBUGGER;
        }
        throw new java.lang.IllegalStateException(java.lang.String.valueOf(token));
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1) {
        return new com.google.javascript.rhino.Node(type, child1).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2) {
        return new com.google.javascript.rhino.Node(type, child1, child2).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2, com.google.javascript.rhino.Node child3) {
        return new com.google.javascript.rhino.Node(type, child1, child2, child3).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String value) {
        return com.google.javascript.rhino.IR.string(value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(int type, java.lang.String value) {
        return com.google.javascript.rhino.Node.newString(type, value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNumberNode(java.lang.Double value) {
        return com.google.javascript.rhino.IR.number(value).clonePropsFrom(templateNode);
    }
}
[4545904] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659900186594
GPR[SSUN]-1659900186594
-1345859678
GPR[SPVATF]-1659900186871
GPR[EPVATF]-1659900189751
GPR[SPS]-1659900189751
[4549520] ERROR ConstraintModelBuilder - Unable to compile the change: 
class IRFactory {
    static final java.lang.String GETTER_ERROR_MESSAGE = "getters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SETTER_ERROR_MESSAGE = "setters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SUSPICIOUS_COMMENT_WARNING = "Non-JSDoc comment has annotations. " + "Did you mean to start it with '/**'?";

    static final java.lang.String MISPLACED_TYPE_ANNOTATION = "Type annotations are not allowed here. Are you missing parentheses?";

    private final java.lang.String sourceString;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.parsing.Config config;

    private final com.google.javascript.rhino.head.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher transformDispatcher;

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ALLOWED_DIRECTIVES = com.google.common.collect.ImmutableSet.of("use strict");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_STRICT_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield");

    private final java.util.Set<java.lang.String> reservedKeywords;

    private final java.util.Set<com.google.javascript.rhino.head.ast.Comment> parsedComments = com.google.common.collect.Sets.newHashSet();

    com.google.javascript.rhino.Node rootNodeJsDocHolder = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);

    com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = rootNodeJsDocHolder.getJsDocBuilderForNode();

    com.google.javascript.rhino.JSDocInfo fileOverviewInfo = null;

    private final com.google.javascript.rhino.Node templateNode;

    private IRFactory(java.lang.String sourceString, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        this.sourceString = sourceString;
        this.sourceFile = sourceFile;
        this.sourceName = (sourceFile == null) ? null : sourceFile.getName();
        this.config = config;
        this.errorReporter = errorReporter;
        this.transformDispatcher = new com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher();
        this.templateNode = createTemplateNode();
        switch (config.languageMode) {
            case ECMASCRIPT3 :
                reservedKeywords = null;
                break;
            case ECMASCRIPT5 :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS;
                break;
            case ECMASCRIPT5_STRICT :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS;
                break;
            default :
                throw new java.lang.IllegalStateException("unknown language mode");
        }
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        templateNode.setStaticSourceFile(sourceFile);
        return templateNode;
    }

    public static com.google.javascript.rhino.Node transformTree(com.google.javascript.rhino.head.ast.AstRoot node, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, java.lang.String sourceString, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        com.google.javascript.jscomp.parsing.IRFactory irFactory = new com.google.javascript.jscomp.parsing.IRFactory(sourceString, sourceFile, config, errorReporter);
        com.google.javascript.rhino.Node irNode = irFactory.transform(node);
        if (node.getComments() != null) {
            for (com.google.javascript.rhino.head.ast.Comment comment : node.getComments()) {
                if ((comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.JSDOC) && (!irFactory.parsedComments.contains(comment))) {
                    irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
                } else if (comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.BLOCK_COMMENT) {
                    irFactory.handleBlockComment(comment);
                }
            }
        }
        irFactory.setFileOverviewJsDoc(irNode);
        return irNode;
    }

    private void setFileOverviewJsDoc(com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();
        if (rootNodeJsDoc != null) {
            irNode.setJSDocInfo(rootNodeJsDoc);
            rootNodeJsDoc.setAssociatedNode(irNode);
        }
        if (fileOverviewInfo != null) {
            if ((irNode.getJSDocInfo() != null) && (irNode.getJSDocInfo().getLicense() != null)) {
                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());
            }
            irNode.setJSDocInfo(fileOverviewInfo);
            fileOverviewInfo.setAssociatedNode(irNode);
        }
    }

    private com.google.javascript.rhino.Node transformBlock(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = transform(node);
        if (!irNode.isBlock()) {
            if (irNode.isEmpty()) {
                irNode.setType(com.google.javascript.rhino.Token.BLOCK);
                irNode.setWasEmptyNode(true);
            } else {
                com.google.javascript.rhino.Node newBlock = newNode(com.google.javascript.rhino.Token.BLOCK, irNode);
                newBlock.setLineno(irNode.getLineno());
                newBlock.setCharno(irNode.getCharno());
                maybeSetLengthFrom(newBlock, node);
                irNode = newBlock;
            }
        }
        return irNode;
    }

    private void handleBlockComment(com.google.javascript.rhino.head.ast.Comment comment) {
        java.lang.String value = comment.getValue();
        if ((value.indexOf("/* @") != (-1)) || (value.indexOf("\n * @") != (-1))) {
            errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), "", 0);
        }
    }

    private boolean handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser) {
        if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {
            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();
            return true;
        }
        return false;
    }

    private void handlePossibleFileOverviewJsDoc(com.google.javascript.rhino.head.ast.Comment comment, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
        parsedComments.add(comment);
        handlePossibleFileOverviewJsDoc(jsDocParser);
    }

    private com.google.javascript.rhino.JSDocInfo handleJsDoc(com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.head.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
            parsedComments.add(comment);
            if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {
                com.google.javascript.rhino.JSDocInfo info = jsDocParser.retrieveAndResetParsedJSDocInfo();
                if (info != null) {
                    validateTypeAnnotations(info, node);
                }
                return info;
            }
        }
        return null;
    }

    private void validateTypeAnnotations(com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.head.ast.AstNode node) {
        if (info.hasType()) {
            boolean valid = false;
            switch (node.getType()) {
                case com.google.javascript.rhino.head.Token.LP :
                    valid = node instanceof com.google.javascript.rhino.head.ast.ParenthesizedExpression;
                    break;
                case com.google.javascript.rhino.head.Token.VAR :
                    valid = true;
                    break;
                case com.google.javascript.rhino.head.Token.FUNCTION :
                    com.google.javascript.rhino.head.ast.FunctionNode fnNode = ((com.google.javascript.rhino.head.ast.FunctionNode) (node));
                    valid = fnNode.getFunctionType() == com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_STATEMENT;
                    break;
                case com.google.javascript.rhino.head.Token.NAME :
                    valid = ((node.getParent() instanceof com.google.javascript.rhino.head.ast.ObjectProperty) || (node.getParent() instanceof com.google.javascript.rhino.head.ast.CatchClause)) || (node.getParent() instanceof com.google.javascript.rhino.head.ast.FunctionNode);
                    break;
                case com.google.javascript.rhino.head.Token.GET :
                case com.google.javascript.rhino.head.Token.SET :
                case com.google.javascript.rhino.head.Token.NUMBER :
                case com.google.javascript.rhino.head.Token.STRING :
                    valid = node.getParent() instanceof com.google.javascript.rhino.head.ast.ObjectProperty;
                    break;
                case com.google.javascript.rhino.head.Token.ASSIGN :
                    if (node instanceof com.google.javascript.rhino.head.ast.Assignment) {
                        valid = isExprStmt(node.getParent()) && isPropAccess(((com.google.javascript.rhino.head.ast.Assignment) (node)).getLeft());
                    }
                    break;
                case com.google.javascript.rhino.head.Token.GETPROP :
                case com.google.javascript.rhino.head.Token.GETELEM :
                    valid = isExprStmt(node.getParent());
                    break;
                case com.google.javascript.rhino.head.Token.CALL :
                    valid = info.isDefine();
                    break;
            }
            if (!valid) {
                errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.MISPLACED_TYPE_ANNOTATION, sourceName, node.getLineno(), "", 0);
            }
        }
    }

    private boolean isPropAccess(com.google.javascript.rhino.head.ast.AstNode node) {
        return (node.getType() == com.google.javascript.rhino.head.Token.GETPROP) || (node.getType() == com.google.javascript.rhino.head.Token.GETELEM);
    }

    private boolean isExprStmt(com.google.javascript.rhino.head.ast.AstNode node) {
        return (node.getType() == com.google.javascript.rhino.head.Token.EXPR_RESULT) || (node.getType() == com.google.javascript.rhino.head.Token.EXPR_VOID);
    }

    private com.google.javascript.rhino.Node transform(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode = maybeInjectCastNode(node, jsDocInfo, irNode);
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node maybeInjectCastNode(com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.Node irNode) {
        if (((node.getType() == com.google.javascript.rhino.head.Token.LP) && (node instanceof com.google.javascript.rhino.head.ast.ParenthesizedExpression)) && info.hasType()) {
            irNode = newNode(com.google.javascript.rhino.Token.CAST, irNode);
        }
        return irNode;
    }

    private com.google.javascript.rhino.Node transformParameter(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.head.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.rhino.JSDocInfo info = parseInlineTypeDoc(comment, irNode);
            if (info != null) {
                irNode.setJSDocInfo(info);
            }
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNameAsString(com.google.javascript.rhino.head.ast.Name node) {
        com.google.javascript.rhino.Node irNode = transformDispatcher.processName(node, true);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
        com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, literalNode);
        return irNode;
    }

    private static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    private void setSourceInfo(com.google.javascript.rhino.Node irNode, com.google.javascript.rhino.head.ast.AstNode node) {
        if (irNode.getLineno() == (-1)) {
            int lineno = node.getLineno();
            irNode.setLineno(lineno);
            int charno = position2charno(node.getAbsolutePosition());
            irNode.setCharno(charno);
            maybeSetLengthFrom(irNode, node);
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser createJsDocInfoParser(com.google.javascript.rhino.head.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsdocParser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
        jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);
        jsdocParser.parse();
        return jsdocParser;
    }

    private com.google.javascript.rhino.JSDocInfo parseInlineTypeDoc(com.google.javascript.rhino.head.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser parser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        return parser.parseInlineTypeDoc();
    }

    private void maybeSetLengthFrom(com.google.javascript.rhino.Node node, com.google.javascript.rhino.head.ast.AstNode source) {
        if (config.isIdeMode) {
            node.setLength(source.getLength());
        }
    }

    private int position2charno(int position) {
        int lineIndex = sourceString.lastIndexOf('\n', position);
        if (lineIndex == (-1)) {
            return position;
        } else {
            return (position - lineIndex) - 1;
        }
    }

    private com.google.javascript.rhino.Node justTransform(com.google.javascript.rhino.head.ast.AstNode node) {
        return transformDispatcher.process(node);
    }

    private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node processGeneric(com.google.javascript.rhino.head.Node n) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));
            for (com.google.javascript.rhino.head.Node child : n) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            return node;
        }

        private com.google.javascript.rhino.Node transformAsString(com.google.javascript.rhino.head.ast.AstNode n) {
            com.google.javascript.rhino.Node ret;
            if (n instanceof com.google.javascript.rhino.head.ast.Name) {
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(241).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceString",com.google.javascript.jscomp.parsing.IRFactory.this.sourceString);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher",com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.MISPLACED_TYPE_ANNOTATION",com.google.javascript.jscomp.parsing.IRFactory.MISPLACED_TYPE_ANNOTATION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo",com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile",com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter",com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder",com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords",com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.templateNode",com.google.javascript.jscomp.parsing.IRFactory.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.config",com.google.javascript.jscomp.parsing.IRFactory.this.config);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments",com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceName",com.google.javascript.jscomp.parsing.IRFactory.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                    fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(241).collectionEnds();
                }
                if (runtimeAngelicValue)
                    ret = transformNameAsString(((com.google.javascript.rhino.head.ast.Name) (n)));

            } else if (n instanceof com.google.javascript.rhino.head.ast.NumberLiteral) {
                ret = transformNumberAsString(((com.google.javascript.rhino.head.ast.NumberLiteral) (n)));
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            } else {
                ret = transform(n);
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            }
            com.google.common.base.Preconditions.checkState(ret.isString());
            return ret;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.rhino.head.ast.ArrayLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.ARRAYLIT);
            for (com.google.javascript.rhino.head.ast.AstNode child : literalNode.getElements()) {
                com.google.javascript.rhino.Node c = transform(child);
                node.addChildToBack(c);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAssignment(com.google.javascript.rhino.head.ast.Assignment assignmentNode) {
            com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);
            com.google.javascript.rhino.Node target = assign.getFirstChild();
            if (!validAssignmentTarget(target)) {
                errorReporter.error("invalid assignment target", sourceName, target.getLineno(), "", 0);
            }
            return assign;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAstRoot(com.google.javascript.rhino.head.ast.AstRoot rootNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SCRIPT);
            for (com.google.javascript.rhino.head.Node child : rootNode) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            parseDirectives(node);
            return node;
        }

        private void parseDirectives(com.google.javascript.rhino.Node node) {
            java.util.Set<java.lang.String> directives = null;
            while (isDirective(node.getFirstChild())) {
                java.lang.String directive = node.removeFirstChild().getFirstChild().getString();
                if (directives == null) {
                    directives = com.google.common.collect.Sets.newHashSet(directive);
                } else {
                    directives.add(directive);
                }
            } 
            if (directives != null) {
                node.setDirectives(directives);
            }
        }

        private boolean isDirective(com.google.javascript.rhino.Node n) {
            if (n == null) {
                return false;
            }
            int nType = n.getType();
            return ((nType == com.google.javascript.rhino.Token.EXPR_RESULT) && n.getFirstChild().isString()) && com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBlock(com.google.javascript.rhino.head.ast.Block blockNode) {
            return processGeneric(blockNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.rhino.head.ast.BreakStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.BREAK);
            if (statementNode.getBreakLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processCatchClause(com.google.javascript.rhino.head.ast.CatchClause clauseNode) {
            com.google.javascript.rhino.head.ast.AstNode catchVar = clauseNode.getVarName();
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CATCH, transform(catchVar));
            if (clauseNode.getCatchCondition() != null) {
                errorReporter.error("Catch clauses are not supported", sourceName, clauseNode.getCatchCondition().getLineno(), "", 0);
            }
            node.addChildToBack(transformBlock(clauseNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.rhino.head.ast.ConditionalExpression exprNode) {
            return newNode(com.google.javascript.rhino.Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.rhino.head.ast.ContinueStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CONTINUE);
            if (statementNode.getLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processDoLoop(com.google.javascript.rhino.head.ast.DoLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processElementGet(com.google.javascript.rhino.head.ast.ElementGet getNode) {
            return newNode(com.google.javascript.rhino.Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.rhino.head.ast.EmptyExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyStatement(com.google.javascript.rhino.head.ast.EmptyStatement exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));
            node.addChildToBack(transform(statementNode.getExpression()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForInLoop(com.google.javascript.rhino.head.ast.ForInLoop loopNode) {
            if (loopNode.isForEach()) {
                errorReporter.error("unsupported language extension: for each", sourceName, loopNode.getLineno(), "", 0);
                return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
            }
            return newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForLoop(com.google.javascript.rhino.head.ast.ForLoop loopNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));
            node.addChildToBack(transformBlock(loopNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.rhino.head.ast.FunctionCall callNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : callNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(node.getFirstChild().getLineno());
            node.setCharno(node.getFirstChild().getCharno());
            maybeSetLengthFrom(node, callNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode functionNode) {
            com.google.javascript.rhino.head.ast.Name name = functionNode.getFunctionName();
            java.lang.Boolean isUnnamedFunction = false;
            if (name == null) {
                int functionType = functionNode.getFunctionType();
                if (functionType != com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_EXPRESSION) {
                    errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
                    return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
                }
                name = new com.google.javascript.rhino.head.ast.Name();
                name.setIdentifier("");
                isUnnamedFunction = true;
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FUNCTION);
            com.google.javascript.rhino.Node newName = transform(name);
            if (isUnnamedFunction) {
                newName.setLineno(functionNode.getLineno());
                int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
                newName.setCharno(position2charno(lpColumn));
                maybeSetLengthFrom(newName, name);
            }
            node.addChildToBack(newName);
            com.google.javascript.rhino.Node lp = newNode(com.google.javascript.rhino.Token.PARAM_LIST);
            com.google.javascript.rhino.head.ast.Name fnName = functionNode.getFunctionName();
            if (fnName != null) {
                lp.setLineno(fnName.getLineno());
            } else {
                lp.setLineno(functionNode.getLineno());
            }
            int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
            lp.setCharno(position2charno(lparenCharno));
            for (com.google.javascript.rhino.head.ast.AstNode param : functionNode.getParams()) {
                com.google.javascript.rhino.Node paramNode = transformParameter(param);
                if (paramNode.isName()) {
                    lp.addChildToBack(paramNode);
                } else {
                    com.google.common.base.Preconditions.checkState((config.isIdeMode || paramNode.isObjectLit()) || paramNode.isArrayLit());
                }
            }
            node.addChildToBack(lp);
            com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());
            if (!bodyNode.isBlock()) {
                com.google.common.base.Preconditions.checkState(config.isIdeMode);
                bodyNode = com.google.javascript.rhino.IR.block();
            }
            parseDirectives(bodyNode);
            node.addChildToBack(bodyNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIfStatement(com.google.javascript.rhino.head.ast.IfStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.IF);
            node.addChildToBack(transform(statementNode.getCondition()));
            node.addChildToBack(transformBlock(statementNode.getThenPart()));
            if (statementNode.getElsePart() != null) {
                node.addChildToBack(transformBlock(statementNode.getElsePart()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression exprNode) {
            com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));
            n.setLineno(exprNode.getLineno());
            n.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(n, exprNode);
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.rhino.head.ast.KeywordLiteral literalNode) {
            return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabel(com.google.javascript.rhino.head.ast.Label labelNode) {
            return newStringNode(com.google.javascript.rhino.Token.LABEL_NAME, labelNode.getName());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.rhino.head.ast.LabeledStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.LABEL);
            com.google.javascript.rhino.Node prev = null;
            com.google.javascript.rhino.Node cur = node;
            for (com.google.javascript.rhino.head.ast.Label label : statementNode.getLabels()) {
                if (prev != null) {
                    prev.addChildToBack(cur);
                }
                cur.addChildToBack(transform(label));
                cur.setLineno(label.getLineno());
                maybeSetLengthFrom(cur, label);
                int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());
                cur.setCharno(clauseAbsolutePosition);
                prev = cur;
                cur = newNode(com.google.javascript.rhino.Token.LABEL);
            }
            prev.addChildToBack(transform(statementNode.getStatement()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode) {
            return processName(nameNode, false);
        }

        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode, boolean asString) {
            if (asString) {
                return newStringNode(com.google.javascript.rhino.Token.STRING, nameNode.getIdentifier());
            } else {
                if (isReservedKeyword(nameNode.getIdentifier())) {
                    errorReporter.error("identifier is a reserved word", sourceName, nameNode.getLineno(), "", 0);
                }
                return newStringNode(com.google.javascript.rhino.Token.NAME, nameNode.getIdentifier());
            }
        }

        private boolean isReservedKeyword(java.lang.String identifier) {
            return (reservedKeywords != null) && reservedKeywords.contains(identifier);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNewExpression(com.google.javascript.rhino.head.ast.NewExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : exprNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(exprNode.getLineno());
            node.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(node, exprNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
            return newNumberNode(literalNode.getNumber());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.rhino.head.ast.ObjectLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.OBJECTLIT);
            for (com.google.javascript.rhino.head.ast.ObjectProperty el : literalNode.getElements()) {
                if (config.languageMode == com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3) {
                    if (el.isGetter()) {
                        reportGetter(el);
                        continue;
                    } else if (el.isSetter()) {
                        reportSetter(el);
                        continue;
                    }
                }
                com.google.javascript.rhino.Node key = transformAsString(el.getLeft());
                key.setType(com.google.javascript.rhino.Token.STRING_KEY);
                com.google.javascript.rhino.Node value = transform(el.getRight());
                if (el.isGetter()) {
                    key.setType(com.google.javascript.rhino.Token.GETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (getFnParamNode(value).hasChildren()) {
                        reportGetterParam(el.getLeft());
                    }
                } else if (el.isSetter()) {
                    key.setType(com.google.javascript.rhino.Token.SETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (!getFnParamNode(value).hasOneChild()) {
                        reportSetterParam(el.getLeft());
                    }
                }
                key.addChildToFront(value);
                node.addChildToBack(key);
            }
            return node;
        }

        com.google.javascript.rhino.Node getFnParamNode(com.google.javascript.rhino.Node fnNode) {
            com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
            return fnNode.getFirstChild().getNext();
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.rhino.head.ast.ObjectProperty propertyNode) {
            return processInfixExpression(propertyNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.rhino.head.ast.ParenthesizedExpression exprNode) {
            com.google.javascript.rhino.Node node = transform(exprNode.getExpression());
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.rhino.head.ast.PropertyGet getNode) {
            com.google.javascript.rhino.Node leftChild = transform(getNode.getTarget());
            com.google.javascript.rhino.Node newNode = newNode(com.google.javascript.rhino.Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));
            newNode.setLineno(leftChild.getLineno());
            newNode.setCharno(leftChild.getCharno());
            maybeSetLengthFrom(newNode, getNode);
            return newNode;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.rhino.head.ast.RegExpLiteral literalNode) {
            com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());
            literalStringNode.setLineno(literalNode.getLineno());
            maybeSetLengthFrom(literalStringNode, literalNode);
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.REGEXP, literalStringNode);
            java.lang.String flags = literalNode.getFlags();
            if ((flags != null) && (!flags.isEmpty())) {
                com.google.javascript.rhino.Node flagsNode = newStringNode(flags);
                flagsNode.setLineno(literalNode.getLineno());
                maybeSetLengthFrom(flagsNode, literalNode);
                node.addChildToBack(flagsNode);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.rhino.head.ast.ReturnStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.RETURN);
            if (statementNode.getReturnValue() != null) {
                node.addChildToBack(transform(statementNode.getReturnValue()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processScope(com.google.javascript.rhino.head.ast.Scope scopeNode) {
            return processGeneric(scopeNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.rhino.head.ast.StringLiteral literalNode) {
            java.lang.String value = literalNode.getValue();
            com.google.javascript.rhino.Node n = newStringNode(value);
            if (value.indexOf('\u000b') != (-1)) {
                int start = literalNode.getAbsolutePosition();
                int end = start + literalNode.getLength();
                if ((start < sourceString.length()) && (sourceString.substring(start, java.lang.Math.min(sourceString.length(), end)).indexOf("\\v") != (-1))) {
                    n.putBooleanProp(com.google.javascript.rhino.Node.SLASH_V, true);
                }
            }
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.rhino.head.ast.SwitchCase caseNode) {
            com.google.javascript.rhino.Node node;
            if (caseNode.isDefault()) {
                node = newNode(com.google.javascript.rhino.Token.DEFAULT_CASE);
            } else {
                com.google.javascript.rhino.head.ast.AstNode expr = caseNode.getExpression();
                node = newNode(com.google.javascript.rhino.Token.CASE, transform(expr));
            }
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            block.putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, true);
            block.setLineno(caseNode.getLineno());
            block.setCharno(position2charno(caseNode.getAbsolutePosition()));
            maybeSetLengthFrom(block, caseNode);
            if (caseNode.getStatements() != null) {
                for (com.google.javascript.rhino.head.ast.AstNode child : caseNode.getStatements()) {
                    block.addChildToBack(transform(child));
                }
            }
            node.addChildToBack(block);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.rhino.head.ast.SwitchStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SWITCH, transform(statementNode.getExpression()));
            for (com.google.javascript.rhino.head.ast.AstNode child : statementNode.getCases()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.rhino.head.ast.ThrowStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.THROW, transform(statementNode.getExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processTryStatement(com.google.javascript.rhino.head.ast.TryStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.TRY, transformBlock(statementNode.getTryBlock()));
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            boolean lineSet = false;
            for (com.google.javascript.rhino.head.ast.CatchClause cc : statementNode.getCatchClauses()) {
                if (lineSet == false) {
                    block.setLineno(cc.getLineno());
                    maybeSetLengthFrom(block, cc);
                    lineSet = true;
                }
                block.addChildToBack(transform(cc));
            }
            node.addChildToBack(block);
            com.google.javascript.rhino.head.ast.AstNode finallyBlock = statementNode.getFinallyBlock();
            if (finallyBlock != null) {
                node.addChildToBack(transformBlock(finallyBlock));
            }
            if ((lineSet == false) && (finallyBlock != null)) {
                block.setLineno(finallyBlock.getLineno());
                maybeSetLengthFrom(block, finallyBlock);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.rhino.head.ast.UnaryExpression exprNode) {
            int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());
            com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());
            if ((type == com.google.javascript.rhino.Token.NEG) && operand.isNumber()) {
                operand.setDouble(-operand.getDouble());
                return operand;
            } else {
                if ((type == com.google.javascript.rhino.Token.DELPROP) && (!((operand.isGetProp() || operand.isGetElem()) || operand.isName()))) {
                    java.lang.String msg = "Invalid delete operand. Only properties can be deleted.";
                    errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
                    if (!validAssignmentTarget(operand)) {
                        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? "invalid increment target" : "invalid decrement target";
                        errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                    }
                }
                com.google.javascript.rhino.Node node = newNode(type, operand);
                if (exprNode.isPostfix()) {
                    node.putBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP, true);
                }
                return node;
            }
        }

        private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {
            switch (target.getType()) {
                case com.google.javascript.rhino.Token.CAST :
                case com.google.javascript.rhino.Token.NAME :
                case com.google.javascript.rhino.Token.GETPROP :
                case com.google.javascript.rhino.Token.GETELEM :
                    return true;
            }
            return false;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration declarationNode) {
            if ((!config.acceptConstKeyword) && (declarationNode.getType() == com.google.javascript.rhino.head.Token.CONST)) {
                processIllegalToken(declarationNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.VAR);
            for (com.google.javascript.rhino.head.ast.VariableInitializer child : declarationNode.getVariables()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer initializerNode) {
            com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());
            if (initializerNode.getInitializer() != null) {
                com.google.javascript.rhino.Node initalizer = transform(initializerNode.getInitializer());
                node.addChildToBack(initalizer);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.rhino.head.ast.WhileLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWithStatement(com.google.javascript.rhino.head.ast.WithStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("Unsupported syntax: " + com.google.javascript.rhino.head.Token.typeToName(node.getType()), sourceName, node.getLineno(), "", 0);
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }

        void reportDestructuringAssign(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("destructuring assignment forbidden", sourceName, node.getLineno(), "", 0);
        }

        void reportGetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportSetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportGetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("getters may not have parameters", sourceName, node.getLineno(), "", 0);
        }

        void reportSetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("setters must have exactly one parameter", sourceName, node.getLineno(), "", 0);
        }
    }

    private static int transformTokenType(int token) {
        switch (token) {
            case com.google.javascript.rhino.head.Token.RETURN :
                return com.google.javascript.rhino.Token.RETURN;
            case com.google.javascript.rhino.head.Token.BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.head.Token.BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.head.Token.BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.head.Token.EQ :
                return com.google.javascript.rhino.Token.EQ;
            case com.google.javascript.rhino.head.Token.NE :
                return com.google.javascript.rhino.Token.NE;
            case com.google.javascript.rhino.head.Token.LT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.head.Token.LE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.head.Token.GT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.head.Token.GE :
                return com.google.javascript.rhino.Token.GE;
            case com.google.javascript.rhino.head.Token.LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.head.Token.RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.head.Token.URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.head.Token.ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.head.Token.SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.head.Token.MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.head.Token.DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.head.Token.MOD :
                return com.google.javascript.rhino.Token.MOD;
            case com.google.javascript.rhino.head.Token.NOT :
                return com.google.javascript.rhino.Token.NOT;
            case com.google.javascript.rhino.head.Token.BITNOT :
                return com.google.javascript.rhino.Token.BITNOT;
            case com.google.javascript.rhino.head.Token.POS :
                return com.google.javascript.rhino.Token.POS;
            case com.google.javascript.rhino.head.Token.NEG :
                return com.google.javascript.rhino.Token.NEG;
            case com.google.javascript.rhino.head.Token.NEW :
                return com.google.javascript.rhino.Token.NEW;
            case com.google.javascript.rhino.head.Token.DELPROP :
                return com.google.javascript.rhino.Token.DELPROP;
            case com.google.javascript.rhino.head.Token.TYPEOF :
                return com.google.javascript.rhino.Token.TYPEOF;
            case com.google.javascript.rhino.head.Token.GETPROP :
                return com.google.javascript.rhino.Token.GETPROP;
            case com.google.javascript.rhino.head.Token.GETELEM :
                return com.google.javascript.rhino.Token.GETELEM;
            case com.google.javascript.rhino.head.Token.CALL :
                return com.google.javascript.rhino.Token.CALL;
            case com.google.javascript.rhino.head.Token.NAME :
                return com.google.javascript.rhino.Token.NAME;
            case com.google.javascript.rhino.head.Token.NUMBER :
                return com.google.javascript.rhino.Token.NUMBER;
            case com.google.javascript.rhino.head.Token.STRING :
                return com.google.javascript.rhino.Token.STRING;
            case com.google.javascript.rhino.head.Token.NULL :
                return com.google.javascript.rhino.Token.NULL;
            case com.google.javascript.rhino.head.Token.THIS :
                return com.google.javascript.rhino.Token.THIS;
            case com.google.javascript.rhino.head.Token.FALSE :
                return com.google.javascript.rhino.Token.FALSE;
            case com.google.javascript.rhino.head.Token.TRUE :
                return com.google.javascript.rhino.Token.TRUE;
            case com.google.javascript.rhino.head.Token.SHEQ :
                return com.google.javascript.rhino.Token.SHEQ;
            case com.google.javascript.rhino.head.Token.SHNE :
                return com.google.javascript.rhino.Token.SHNE;
            case com.google.javascript.rhino.head.Token.REGEXP :
                return com.google.javascript.rhino.Token.REGEXP;
            case com.google.javascript.rhino.head.Token.THROW :
                return com.google.javascript.rhino.Token.THROW;
            case com.google.javascript.rhino.head.Token.IN :
                return com.google.javascript.rhino.Token.IN;
            case com.google.javascript.rhino.head.Token.INSTANCEOF :
                return com.google.javascript.rhino.Token.INSTANCEOF;
            case com.google.javascript.rhino.head.Token.ARRAYLIT :
                return com.google.javascript.rhino.Token.ARRAYLIT;
            case com.google.javascript.rhino.head.Token.OBJECTLIT :
                return com.google.javascript.rhino.Token.OBJECTLIT;
            case com.google.javascript.rhino.head.Token.TRY :
                return com.google.javascript.rhino.Token.TRY;
            case com.google.javascript.rhino.head.Token.LP :
                return com.google.javascript.rhino.Token.PARAM_LIST;
            case com.google.javascript.rhino.head.Token.COMMA :
                return com.google.javascript.rhino.Token.COMMA;
            case com.google.javascript.rhino.head.Token.ASSIGN :
                return com.google.javascript.rhino.Token.ASSIGN;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITXOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.ASSIGN_BITAND;
            case com.google.javascript.rhino.head.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.ASSIGN_LSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.ASSIGN_RSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.ASSIGN_URSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ASSIGN_ADD;
            case com.google.javascript.rhino.head.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.ASSIGN_SUB;
            case com.google.javascript.rhino.head.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.ASSIGN_MUL;
            case com.google.javascript.rhino.head.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.ASSIGN_DIV;
            case com.google.javascript.rhino.head.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.ASSIGN_MOD;
            case com.google.javascript.rhino.head.Token.HOOK :
                return com.google.javascript.rhino.Token.HOOK;
            case com.google.javascript.rhino.head.Token.OR :
                return com.google.javascript.rhino.Token.OR;
            case com.google.javascript.rhino.head.Token.AND :
                return com.google.javascript.rhino.Token.AND;
            case com.google.javascript.rhino.head.Token.INC :
                return com.google.javascript.rhino.Token.INC;
            case com.google.javascript.rhino.head.Token.DEC :
                return com.google.javascript.rhino.Token.DEC;
            case com.google.javascript.rhino.head.Token.FUNCTION :
                return com.google.javascript.rhino.Token.FUNCTION;
            case com.google.javascript.rhino.head.Token.IF :
                return com.google.javascript.rhino.Token.IF;
            case com.google.javascript.rhino.head.Token.SWITCH :
                return com.google.javascript.rhino.Token.SWITCH;
            case com.google.javascript.rhino.head.Token.CASE :
                return com.google.javascript.rhino.Token.CASE;
            case com.google.javascript.rhino.head.Token.DEFAULT :
                return com.google.javascript.rhino.Token.DEFAULT_CASE;
            case com.google.javascript.rhino.head.Token.WHILE :
                return com.google.javascript.rhino.Token.WHILE;
            case com.google.javascript.rhino.head.Token.DO :
                return com.google.javascript.rhino.Token.DO;
            case com.google.javascript.rhino.head.Token.FOR :
                return com.google.javascript.rhino.Token.FOR;
            case com.google.javascript.rhino.head.Token.BREAK :
                return com.google.javascript.rhino.Token.BREAK;
            case com.google.javascript.rhino.head.Token.CONTINUE :
                return com.google.javascript.rhino.Token.CONTINUE;
            case com.google.javascript.rhino.head.Token.VAR :
                return com.google.javascript.rhino.Token.VAR;
            case com.google.javascript.rhino.head.Token.WITH :
                return com.google.javascript.rhino.Token.WITH;
            case com.google.javascript.rhino.head.Token.CATCH :
                return com.google.javascript.rhino.Token.CATCH;
            case com.google.javascript.rhino.head.Token.VOID :
                return com.google.javascript.rhino.Token.VOID;
            case com.google.javascript.rhino.head.Token.EMPTY :
                return com.google.javascript.rhino.Token.EMPTY;
            case com.google.javascript.rhino.head.Token.BLOCK :
                return com.google.javascript.rhino.Token.BLOCK;
            case com.google.javascript.rhino.head.Token.LABEL :
                return com.google.javascript.rhino.Token.LABEL;
            case com.google.javascript.rhino.head.Token.EXPR_VOID :
            case com.google.javascript.rhino.head.Token.EXPR_RESULT :
                return com.google.javascript.rhino.Token.EXPR_RESULT;
            case com.google.javascript.rhino.head.Token.SCRIPT :
                return com.google.javascript.rhino.Token.SCRIPT;
            case com.google.javascript.rhino.head.Token.GET :
                return com.google.javascript.rhino.Token.GETTER_DEF;
            case com.google.javascript.rhino.head.Token.SET :
                return com.google.javascript.rhino.Token.SETTER_DEF;
            case com.google.javascript.rhino.head.Token.CONST :
                return com.google.javascript.rhino.Token.CONST;
            case com.google.javascript.rhino.head.Token.DEBUGGER :
                return com.google.javascript.rhino.Token.DEBUGGER;
        }
        throw new java.lang.IllegalStateException(java.lang.String.valueOf(token));
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1) {
        return new com.google.javascript.rhino.Node(type, child1).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2) {
        return new com.google.javascript.rhino.Node(type, child1, child2).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2, com.google.javascript.rhino.Node child3) {
        return new com.google.javascript.rhino.Node(type, child1, child2, child3).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String value) {
        return com.google.javascript.rhino.IR.string(value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(int type, java.lang.String value) {
        return com.google.javascript.rhino.Node.newString(type, value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNumberNode(java.lang.Double value) {
        return com.google.javascript.rhino.IR.number(value).clonePropsFrom(templateNode);
    }
}
[4549521] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659900190211
GPR[SSUN]-1659900190211
-1345859678
GPR[ESUN]-1659900190566
GPR[SSUN]-1659900190567
-1345859678
GPR[SPVATF]-1659900190834
GPR[EPVATF]-1659900193758
GPR[SPS]-1659900193758
[4553773] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:549.
GPR[EPS]-1659900194464
GPR[ESUN]-1659900194464
GPR[SSUN]-1659900194464
-1345859678
GPR[SPVATF]-1659900194733
GPR[EPVATF]-1659900197641
GPR[SPS]-1659900197641
[4557405] ERROR ConstraintModelBuilder - Unable to compile the change: 
class IRFactory {
    static final java.lang.String GETTER_ERROR_MESSAGE = "getters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SETTER_ERROR_MESSAGE = "setters are not supported in older versions of JS. " + ("If you are targeting newer versions of JS, " + "set the appropriate language_in option.");

    static final java.lang.String SUSPICIOUS_COMMENT_WARNING = "Non-JSDoc comment has annotations. " + "Did you mean to start it with '/**'?";

    static final java.lang.String MISPLACED_TYPE_ANNOTATION = "Type annotations are not allowed here. Are you missing parentheses?";

    private final java.lang.String sourceString;

    private final com.google.javascript.rhino.jstype.StaticSourceFile sourceFile;

    private final java.lang.String sourceName;

    private final com.google.javascript.jscomp.parsing.Config config;

    private final com.google.javascript.rhino.head.ErrorReporter errorReporter;

    private final com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher transformDispatcher;

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ALLOWED_DIRECTIVES = com.google.common.collect.ImmutableSet.of("use strict");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super");

    private static final com.google.common.collect.ImmutableSet<java.lang.String> ES5_STRICT_RESERVED_KEYWORDS = com.google.common.collect.ImmutableSet.of("class", "const", "enum", "export", "extends", "import", "super", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield");

    private final java.util.Set<java.lang.String> reservedKeywords;

    private final java.util.Set<com.google.javascript.rhino.head.ast.Comment> parsedComments = com.google.common.collect.Sets.newHashSet();

    com.google.javascript.rhino.Node rootNodeJsDocHolder = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);

    com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder = rootNodeJsDocHolder.getJsDocBuilderForNode();

    com.google.javascript.rhino.JSDocInfo fileOverviewInfo = null;

    private final com.google.javascript.rhino.Node templateNode;

    private IRFactory(java.lang.String sourceString, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        this.sourceString = sourceString;
        this.sourceFile = sourceFile;
        this.sourceName = (sourceFile == null) ? null : sourceFile.getName();
        this.config = config;
        this.errorReporter = errorReporter;
        this.transformDispatcher = new com.google.javascript.jscomp.parsing.IRFactory.TransformDispatcher();
        this.templateNode = createTemplateNode();
        switch (config.languageMode) {
            case ECMASCRIPT3 :
                reservedKeywords = null;
                break;
            case ECMASCRIPT5 :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS;
                break;
            case ECMASCRIPT5_STRICT :
                reservedKeywords = com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS;
                break;
            default :
                throw new java.lang.IllegalStateException("unknown language mode");
        }
    }

    private com.google.javascript.rhino.Node createTemplateNode() {
        com.google.javascript.rhino.Node templateNode = new com.google.javascript.rhino.Node(com.google.javascript.rhino.Token.SCRIPT);
        templateNode.setStaticSourceFile(sourceFile);
        return templateNode;
    }

    public static com.google.javascript.rhino.Node transformTree(com.google.javascript.rhino.head.ast.AstRoot node, com.google.javascript.rhino.jstype.StaticSourceFile sourceFile, java.lang.String sourceString, com.google.javascript.jscomp.parsing.Config config, com.google.javascript.rhino.head.ErrorReporter errorReporter) {
        com.google.javascript.jscomp.parsing.IRFactory irFactory = new com.google.javascript.jscomp.parsing.IRFactory(sourceString, sourceFile, config, errorReporter);
        com.google.javascript.rhino.Node irNode = irFactory.transform(node);
        if (node.getComments() != null) {
            for (com.google.javascript.rhino.head.ast.Comment comment : node.getComments()) {
                if ((comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.JSDOC) && (!irFactory.parsedComments.contains(comment))) {
                    irFactory.handlePossibleFileOverviewJsDoc(comment, irNode);
                } else if (comment.getCommentType() == com.google.javascript.rhino.head.Token.CommentType.BLOCK_COMMENT) {
                    irFactory.handleBlockComment(comment);
                }
            }
        }
        irFactory.setFileOverviewJsDoc(irNode);
        return irNode;
    }

    private void setFileOverviewJsDoc(com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();
        if (rootNodeJsDoc != null) {
            irNode.setJSDocInfo(rootNodeJsDoc);
            rootNodeJsDoc.setAssociatedNode(irNode);
        }
        if (fileOverviewInfo != null) {
            if ((irNode.getJSDocInfo() != null) && (irNode.getJSDocInfo().getLicense() != null)) {
                fileOverviewInfo.setLicense(irNode.getJSDocInfo().getLicense());
            }
            irNode.setJSDocInfo(fileOverviewInfo);
            fileOverviewInfo.setAssociatedNode(irNode);
        }
    }

    private com.google.javascript.rhino.Node transformBlock(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = transform(node);
        if (!irNode.isBlock()) {
            if (irNode.isEmpty()) {
                irNode.setType(com.google.javascript.rhino.Token.BLOCK);
                irNode.setWasEmptyNode(true);
            } else {
                com.google.javascript.rhino.Node newBlock = newNode(com.google.javascript.rhino.Token.BLOCK, irNode);
                newBlock.setLineno(irNode.getLineno());
                newBlock.setCharno(irNode.getCharno());
                maybeSetLengthFrom(newBlock, node);
                irNode = newBlock;
            }
        }
        return irNode;
    }

    private void handleBlockComment(com.google.javascript.rhino.head.ast.Comment comment) {
        java.lang.String value = comment.getValue();
        if ((value.indexOf("/* @") != (-1)) || (value.indexOf("\n * @") != (-1))) {
            errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING, sourceName, comment.getLineno(), "", 0);
        }
    }

    private boolean handlePossibleFileOverviewJsDoc(com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser) {
        if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {
            fileOverviewInfo = jsDocParser.getFileOverviewJSDocInfo();
            return true;
        }
        return false;
    }

    private void handlePossibleFileOverviewJsDoc(com.google.javascript.rhino.head.ast.Comment comment, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
        parsedComments.add(comment);
        handlePossibleFileOverviewJsDoc(jsDocParser);
    }

    private com.google.javascript.rhino.JSDocInfo handleJsDoc(com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.Node irNode) {
        com.google.javascript.rhino.head.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.jscomp.parsing.JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);
            parsedComments.add(comment);
            if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {
                com.google.javascript.rhino.JSDocInfo info = jsDocParser.retrieveAndResetParsedJSDocInfo();
                if (info != null) {
                    validateTypeAnnotations(info, node);
                }
                return info;
            }
        }
        return null;
    }

    private void validateTypeAnnotations(com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.head.ast.AstNode node) {
        if (info.hasType()) {
            boolean valid = false;
            switch (node.getType()) {
                case com.google.javascript.rhino.head.Token.LP :
                    valid = node instanceof com.google.javascript.rhino.head.ast.ParenthesizedExpression;
                    break;
                case com.google.javascript.rhino.head.Token.VAR :
                    valid = true;
                    break;
                case com.google.javascript.rhino.head.Token.FUNCTION :
                    com.google.javascript.rhino.head.ast.FunctionNode fnNode = ((com.google.javascript.rhino.head.ast.FunctionNode) (node));
                    valid = fnNode.getFunctionType() == com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_STATEMENT;
                    break;
                case com.google.javascript.rhino.head.Token.NAME :
                    valid = ((node.getParent() instanceof com.google.javascript.rhino.head.ast.ObjectProperty) || (node.getParent() instanceof com.google.javascript.rhino.head.ast.CatchClause)) || (node.getParent() instanceof com.google.javascript.rhino.head.ast.FunctionNode);
                    break;
                case com.google.javascript.rhino.head.Token.GET :
                case com.google.javascript.rhino.head.Token.SET :
                case com.google.javascript.rhino.head.Token.NUMBER :
                case com.google.javascript.rhino.head.Token.STRING :
                    valid = node.getParent() instanceof com.google.javascript.rhino.head.ast.ObjectProperty;
                    break;
                case com.google.javascript.rhino.head.Token.ASSIGN :
                    if (node instanceof com.google.javascript.rhino.head.ast.Assignment) {
                        valid = isExprStmt(node.getParent()) && isPropAccess(((com.google.javascript.rhino.head.ast.Assignment) (node)).getLeft());
                    }
                    break;
                case com.google.javascript.rhino.head.Token.GETPROP :
                case com.google.javascript.rhino.head.Token.GETELEM :
                    valid = isExprStmt(node.getParent());
                    break;
                case com.google.javascript.rhino.head.Token.CALL :
                    valid = info.isDefine();
                    break;
            }
            if (!valid) {
                errorReporter.warning(com.google.javascript.jscomp.parsing.IRFactory.MISPLACED_TYPE_ANNOTATION, sourceName, node.getLineno(), "", 0);
            }
        }
    }

    private boolean isPropAccess(com.google.javascript.rhino.head.ast.AstNode node) {
        return (node.getType() == com.google.javascript.rhino.head.Token.GETPROP) || (node.getType() == com.google.javascript.rhino.head.Token.GETELEM);
    }

    private boolean isExprStmt(com.google.javascript.rhino.head.ast.AstNode node) {
        return (node.getType() == com.google.javascript.rhino.head.Token.EXPR_RESULT) || (node.getType() == com.google.javascript.rhino.head.Token.EXPR_VOID);
    }

    private com.google.javascript.rhino.Node transform(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode = maybeInjectCastNode(node, jsDocInfo, irNode);
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node maybeInjectCastNode(com.google.javascript.rhino.head.ast.AstNode node, com.google.javascript.rhino.JSDocInfo info, com.google.javascript.rhino.Node irNode) {
        if (((node.getType() == com.google.javascript.rhino.head.Token.LP) && (node instanceof com.google.javascript.rhino.head.ast.ParenthesizedExpression)) && info.hasType()) {
            irNode = newNode(com.google.javascript.rhino.Token.CAST, irNode);
        }
        return irNode;
    }

    private com.google.javascript.rhino.Node transformParameter(com.google.javascript.rhino.head.ast.AstNode node) {
        com.google.javascript.rhino.Node irNode = justTransform(node);
        com.google.javascript.rhino.head.ast.Comment comment = node.getJsDocNode();
        if (comment != null) {
            com.google.javascript.rhino.JSDocInfo info = parseInlineTypeDoc(comment, irNode);
            if (info != null) {
                irNode.setJSDocInfo(info);
            }
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNameAsString(com.google.javascript.rhino.head.ast.Name node) {
        com.google.javascript.rhino.Node irNode = transformDispatcher.processName(node, true);
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, node);
        return irNode;
    }

    private com.google.javascript.rhino.Node transformNumberAsString(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
        com.google.javascript.rhino.Node irNode = newStringNode(com.google.javascript.jscomp.parsing.IRFactory.getStringValue(literalNode.getNumber()));
        com.google.javascript.rhino.JSDocInfo jsDocInfo = handleJsDoc(literalNode, irNode);
        if (jsDocInfo != null) {
            irNode.setJSDocInfo(jsDocInfo);
        }
        setSourceInfo(irNode, literalNode);
        return irNode;
    }

    private static java.lang.String getStringValue(double value) {
        long longValue = ((long) (value));
        if (longValue == value) {
            return java.lang.Long.toString(longValue);
        } else {
            return java.lang.Double.toString(value);
        }
    }

    private void setSourceInfo(com.google.javascript.rhino.Node irNode, com.google.javascript.rhino.head.ast.AstNode node) {
        if (irNode.getLineno() == (-1)) {
            int lineno = node.getLineno();
            irNode.setLineno(lineno);
            int charno = position2charno(node.getAbsolutePosition());
            irNode.setCharno(charno);
            maybeSetLengthFrom(irNode, node);
        }
    }

    private com.google.javascript.jscomp.parsing.JsDocInfoParser createJsDocInfoParser(com.google.javascript.rhino.head.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser jsdocParser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);
        jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);
        jsdocParser.parse();
        return jsdocParser;
    }

    private com.google.javascript.rhino.JSDocInfo parseInlineTypeDoc(com.google.javascript.rhino.head.ast.Comment node, com.google.javascript.rhino.Node irNode) {
        java.lang.String comment = node.getValue();
        int lineno = node.getLineno();
        int position = node.getAbsolutePosition();
        int numOpeningChars = 3;
        com.google.javascript.jscomp.parsing.JsDocInfoParser parser = new com.google.javascript.jscomp.parsing.JsDocInfoParser(new com.google.javascript.jscomp.parsing.JsDocTokenStream(comment.substring(numOpeningChars), lineno, position2charno(position) + numOpeningChars), node, irNode, config, errorReporter);
        return parser.parseInlineTypeDoc();
    }

    private void maybeSetLengthFrom(com.google.javascript.rhino.Node node, com.google.javascript.rhino.head.ast.AstNode source) {
        if (config.isIdeMode) {
            node.setLength(source.getLength());
        }
    }

    private int position2charno(int position) {
        int lineIndex = sourceString.lastIndexOf('\n', position);
        if (lineIndex == (-1)) {
            return position;
        } else {
            return (position - lineIndex) - 1;
        }
    }

    private com.google.javascript.rhino.Node justTransform(com.google.javascript.rhino.head.ast.AstNode node) {
        return transformDispatcher.process(node);
    }

    private class TransformDispatcher extends com.google.javascript.jscomp.parsing.TypeSafeDispatcher<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node processGeneric(com.google.javascript.rhino.head.Node n) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(n.getType()));
            for (com.google.javascript.rhino.head.Node child : n) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            return node;
        }

        private com.google.javascript.rhino.Node transformAsString(com.google.javascript.rhino.head.ast.AstNode n) {
            com.google.javascript.rhino.Node ret;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(243).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES",com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceString",com.google.javascript.jscomp.parsing.IRFactory.this.sourceString);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING",com.google.javascript.jscomp.parsing.IRFactory.SUSPICIOUS_COMMENT_WARNING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher",com.google.javascript.jscomp.parsing.IRFactory.this.transformDispatcher);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.MISPLACED_TYPE_ANNOTATION",com.google.javascript.jscomp.parsing.IRFactory.MISPLACED_TYPE_ANNOTATION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo",com.google.javascript.jscomp.parsing.IRFactory.this.fileOverviewInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("n instanceof com.google.javascript.rhino.head.ast.Name",n instanceof com.google.javascript.rhino.head.ast.Name);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile",com.google.javascript.jscomp.parsing.IRFactory.this.sourceFile);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_STRICT_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter",com.google.javascript.jscomp.parsing.IRFactory.this.errorReporter);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS",com.google.javascript.jscomp.parsing.IRFactory.ES5_RESERVED_KEYWORDS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder",com.google.javascript.jscomp.parsing.IRFactory.this.rootNodeJsDocHolder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords",com.google.javascript.jscomp.parsing.IRFactory.this.reservedKeywords);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.templateNode",com.google.javascript.jscomp.parsing.IRFactory.this.templateNode);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.config",com.google.javascript.jscomp.parsing.IRFactory.this.config);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments",com.google.javascript.jscomp.parsing.IRFactory.this.parsedComments);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE",com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.sourceName",com.google.javascript.jscomp.parsing.IRFactory.this.sourceName);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectInput("com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder",com.google.javascript.jscomp.parsing.IRFactory.this.fileLevelJsDocBuilder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(243).collectionEnds();
            }
            if (runtimeAngelicValue) if (n instanceof com.google.javascript.rhino.head.ast.Name) {
                ret = transformNameAsString(((com.google.javascript.rhino.head.ast.Name) (n)));
            } else if (n instanceof com.google.javascript.rhino.head.ast.NumberLiteral) {
                ret = transformNumberAsString(((com.google.javascript.rhino.head.ast.NumberLiteral) (n)));
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            } else {
                ret = transform(n);
                ret.putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
            }
            com.google.common.base.Preconditions.checkState(ret.isString());
            return ret;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processArrayLiteral(com.google.javascript.rhino.head.ast.ArrayLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.ARRAYLIT);
            for (com.google.javascript.rhino.head.ast.AstNode child : literalNode.getElements()) {
                com.google.javascript.rhino.Node c = transform(child);
                node.addChildToBack(c);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAssignment(com.google.javascript.rhino.head.ast.Assignment assignmentNode) {
            com.google.javascript.rhino.Node assign = processInfixExpression(assignmentNode);
            com.google.javascript.rhino.Node target = assign.getFirstChild();
            if (!validAssignmentTarget(target)) {
                errorReporter.error("invalid assignment target", sourceName, target.getLineno(), "", 0);
            }
            return assign;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processAstRoot(com.google.javascript.rhino.head.ast.AstRoot rootNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SCRIPT);
            for (com.google.javascript.rhino.head.Node child : rootNode) {
                node.addChildToBack(transform(((com.google.javascript.rhino.head.ast.AstNode) (child))));
            }
            parseDirectives(node);
            return node;
        }

        private void parseDirectives(com.google.javascript.rhino.Node node) {
            java.util.Set<java.lang.String> directives = null;
            while (isDirective(node.getFirstChild())) {
                java.lang.String directive = node.removeFirstChild().getFirstChild().getString();
                if (directives == null) {
                    directives = com.google.common.collect.Sets.newHashSet(directive);
                } else {
                    directives.add(directive);
                }
            } 
            if (directives != null) {
                node.setDirectives(directives);
            }
        }

        private boolean isDirective(com.google.javascript.rhino.Node n) {
            if (n == null) {
                return false;
            }
            int nType = n.getType();
            return ((nType == com.google.javascript.rhino.Token.EXPR_RESULT) && n.getFirstChild().isString()) && com.google.javascript.jscomp.parsing.IRFactory.ALLOWED_DIRECTIVES.contains(n.getFirstChild().getString());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBlock(com.google.javascript.rhino.head.ast.Block blockNode) {
            return processGeneric(blockNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processBreakStatement(com.google.javascript.rhino.head.ast.BreakStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.BREAK);
            if (statementNode.getBreakLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getBreakLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processCatchClause(com.google.javascript.rhino.head.ast.CatchClause clauseNode) {
            com.google.javascript.rhino.head.ast.AstNode catchVar = clauseNode.getVarName();
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CATCH, transform(catchVar));
            if (clauseNode.getCatchCondition() != null) {
                errorReporter.error("Catch clauses are not supported", sourceName, clauseNode.getCatchCondition().getLineno(), "", 0);
            }
            node.addChildToBack(transformBlock(clauseNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processConditionalExpression(com.google.javascript.rhino.head.ast.ConditionalExpression exprNode) {
            return newNode(com.google.javascript.rhino.Token.HOOK, transform(exprNode.getTestExpression()), transform(exprNode.getTrueExpression()), transform(exprNode.getFalseExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processContinueStatement(com.google.javascript.rhino.head.ast.ContinueStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.CONTINUE);
            if (statementNode.getLabel() != null) {
                com.google.javascript.rhino.Node labelName = transform(statementNode.getLabel());
                labelName.setType(com.google.javascript.rhino.Token.LABEL_NAME);
                node.addChildToBack(labelName);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processDoLoop(com.google.javascript.rhino.head.ast.DoLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.DO, transformBlock(loopNode.getBody()), transform(loopNode.getCondition()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processElementGet(com.google.javascript.rhino.head.ast.ElementGet getNode) {
            return newNode(com.google.javascript.rhino.Token.GETELEM, transform(getNode.getTarget()), transform(getNode.getElement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyExpression(com.google.javascript.rhino.head.ast.EmptyExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processEmptyStatement(com.google.javascript.rhino.head.ast.EmptyStatement exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.EMPTY);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processExpressionStatement(com.google.javascript.rhino.head.ast.ExpressionStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(statementNode.getType()));
            node.addChildToBack(transform(statementNode.getExpression()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForInLoop(com.google.javascript.rhino.head.ast.ForInLoop loopNode) {
            if (loopNode.isForEach()) {
                errorReporter.error("unsupported language extension: for each", sourceName, loopNode.getLineno(), "", 0);
                return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
            }
            return newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getIterator()), transform(loopNode.getIteratedObject()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processForLoop(com.google.javascript.rhino.head.ast.ForLoop loopNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FOR, transform(loopNode.getInitializer()), transform(loopNode.getCondition()), transform(loopNode.getIncrement()));
            node.addChildToBack(transformBlock(loopNode.getBody()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionCall(com.google.javascript.rhino.head.ast.FunctionCall callNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(callNode.getType()), transform(callNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : callNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(node.getFirstChild().getLineno());
            node.setCharno(node.getFirstChild().getCharno());
            maybeSetLengthFrom(node, callNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processFunctionNode(com.google.javascript.rhino.head.ast.FunctionNode functionNode) {
            com.google.javascript.rhino.head.ast.Name name = functionNode.getFunctionName();
            java.lang.Boolean isUnnamedFunction = false;
            if (name == null) {
                int functionType = functionNode.getFunctionType();
                if (functionType != com.google.javascript.rhino.head.ast.FunctionNode.FUNCTION_EXPRESSION) {
                    errorReporter.error("unnamed function statement", sourceName, functionNode.getLineno(), "", 0);
                    return newNode(com.google.javascript.rhino.Token.EXPR_RESULT, com.google.javascript.rhino.Node.newNumber(0));
                }
                name = new com.google.javascript.rhino.head.ast.Name();
                name.setIdentifier("");
                isUnnamedFunction = true;
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.FUNCTION);
            com.google.javascript.rhino.Node newName = transform(name);
            if (isUnnamedFunction) {
                newName.setLineno(functionNode.getLineno());
                int lpColumn = functionNode.getAbsolutePosition() + functionNode.getLp();
                newName.setCharno(position2charno(lpColumn));
                maybeSetLengthFrom(newName, name);
            }
            node.addChildToBack(newName);
            com.google.javascript.rhino.Node lp = newNode(com.google.javascript.rhino.Token.PARAM_LIST);
            com.google.javascript.rhino.head.ast.Name fnName = functionNode.getFunctionName();
            if (fnName != null) {
                lp.setLineno(fnName.getLineno());
            } else {
                lp.setLineno(functionNode.getLineno());
            }
            int lparenCharno = functionNode.getLp() + functionNode.getAbsolutePosition();
            lp.setCharno(position2charno(lparenCharno));
            for (com.google.javascript.rhino.head.ast.AstNode param : functionNode.getParams()) {
                com.google.javascript.rhino.Node paramNode = transformParameter(param);
                if (paramNode.isName()) {
                    lp.addChildToBack(paramNode);
                } else {
                    com.google.common.base.Preconditions.checkState((config.isIdeMode || paramNode.isObjectLit()) || paramNode.isArrayLit());
                }
            }
            node.addChildToBack(lp);
            com.google.javascript.rhino.Node bodyNode = transform(functionNode.getBody());
            if (!bodyNode.isBlock()) {
                com.google.common.base.Preconditions.checkState(config.isIdeMode);
                bodyNode = com.google.javascript.rhino.IR.block();
            }
            parseDirectives(bodyNode);
            node.addChildToBack(bodyNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIfStatement(com.google.javascript.rhino.head.ast.IfStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.IF);
            node.addChildToBack(transform(statementNode.getCondition()));
            node.addChildToBack(transformBlock(statementNode.getThenPart()));
            if (statementNode.getElsePart() != null) {
                node.addChildToBack(transformBlock(statementNode.getElsePart()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processInfixExpression(com.google.javascript.rhino.head.ast.InfixExpression exprNode) {
            com.google.javascript.rhino.Node n = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getLeft()), transform(exprNode.getRight()));
            n.setLineno(exprNode.getLineno());
            n.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(n, exprNode);
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processKeywordLiteral(com.google.javascript.rhino.head.ast.KeywordLiteral literalNode) {
            return newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(literalNode.getType()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabel(com.google.javascript.rhino.head.ast.Label labelNode) {
            return newStringNode(com.google.javascript.rhino.Token.LABEL_NAME, labelNode.getName());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processLabeledStatement(com.google.javascript.rhino.head.ast.LabeledStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.LABEL);
            com.google.javascript.rhino.Node prev = null;
            com.google.javascript.rhino.Node cur = node;
            for (com.google.javascript.rhino.head.ast.Label label : statementNode.getLabels()) {
                if (prev != null) {
                    prev.addChildToBack(cur);
                }
                cur.addChildToBack(transform(label));
                cur.setLineno(label.getLineno());
                maybeSetLengthFrom(cur, label);
                int clauseAbsolutePosition = position2charno(label.getAbsolutePosition());
                cur.setCharno(clauseAbsolutePosition);
                prev = cur;
                cur = newNode(com.google.javascript.rhino.Token.LABEL);
            }
            prev.addChildToBack(transform(statementNode.getStatement()));
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode) {
            return processName(nameNode, false);
        }

        com.google.javascript.rhino.Node processName(com.google.javascript.rhino.head.ast.Name nameNode, boolean asString) {
            if (asString) {
                return newStringNode(com.google.javascript.rhino.Token.STRING, nameNode.getIdentifier());
            } else {
                if (isReservedKeyword(nameNode.getIdentifier())) {
                    errorReporter.error("identifier is a reserved word", sourceName, nameNode.getLineno(), "", 0);
                }
                return newStringNode(com.google.javascript.rhino.Token.NAME, nameNode.getIdentifier());
            }
        }

        private boolean isReservedKeyword(java.lang.String identifier) {
            return (reservedKeywords != null) && reservedKeywords.contains(identifier);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNewExpression(com.google.javascript.rhino.head.ast.NewExpression exprNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType()), transform(exprNode.getTarget()));
            for (com.google.javascript.rhino.head.ast.AstNode child : exprNode.getArguments()) {
                node.addChildToBack(transform(child));
            }
            node.setLineno(exprNode.getLineno());
            node.setCharno(position2charno(exprNode.getAbsolutePosition()));
            maybeSetLengthFrom(node, exprNode);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processNumberLiteral(com.google.javascript.rhino.head.ast.NumberLiteral literalNode) {
            return newNumberNode(literalNode.getNumber());
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectLiteral(com.google.javascript.rhino.head.ast.ObjectLiteral literalNode) {
            if (literalNode.isDestructuring()) {
                reportDestructuringAssign(literalNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.OBJECTLIT);
            for (com.google.javascript.rhino.head.ast.ObjectProperty el : literalNode.getElements()) {
                if (config.languageMode == com.google.javascript.jscomp.parsing.Config.LanguageMode.ECMASCRIPT3) {
                    if (el.isGetter()) {
                        reportGetter(el);
                        continue;
                    } else if (el.isSetter()) {
                        reportSetter(el);
                        continue;
                    }
                }
                com.google.javascript.rhino.Node key = transformAsString(el.getLeft());
                key.setType(com.google.javascript.rhino.Token.STRING_KEY);
                com.google.javascript.rhino.Node value = transform(el.getRight());
                if (el.isGetter()) {
                    key.setType(com.google.javascript.rhino.Token.GETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (getFnParamNode(value).hasChildren()) {
                        reportGetterParam(el.getLeft());
                    }
                } else if (el.isSetter()) {
                    key.setType(com.google.javascript.rhino.Token.SETTER_DEF);
                    com.google.common.base.Preconditions.checkState(value.isFunction());
                    if (!getFnParamNode(value).hasOneChild()) {
                        reportSetterParam(el.getLeft());
                    }
                }
                key.addChildToFront(value);
                node.addChildToBack(key);
            }
            return node;
        }

        com.google.javascript.rhino.Node getFnParamNode(com.google.javascript.rhino.Node fnNode) {
            com.google.common.base.Preconditions.checkArgument(fnNode.isFunction());
            return fnNode.getFirstChild().getNext();
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processObjectProperty(com.google.javascript.rhino.head.ast.ObjectProperty propertyNode) {
            return processInfixExpression(propertyNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processParenthesizedExpression(com.google.javascript.rhino.head.ast.ParenthesizedExpression exprNode) {
            com.google.javascript.rhino.Node node = transform(exprNode.getExpression());
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processPropertyGet(com.google.javascript.rhino.head.ast.PropertyGet getNode) {
            com.google.javascript.rhino.Node leftChild = transform(getNode.getTarget());
            com.google.javascript.rhino.Node newNode = newNode(com.google.javascript.rhino.Token.GETPROP, leftChild, transformAsString(getNode.getProperty()));
            newNode.setLineno(leftChild.getLineno());
            newNode.setCharno(leftChild.getCharno());
            maybeSetLengthFrom(newNode, getNode);
            return newNode;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processRegExpLiteral(com.google.javascript.rhino.head.ast.RegExpLiteral literalNode) {
            com.google.javascript.rhino.Node literalStringNode = newStringNode(literalNode.getValue());
            literalStringNode.setLineno(literalNode.getLineno());
            maybeSetLengthFrom(literalStringNode, literalNode);
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.REGEXP, literalStringNode);
            java.lang.String flags = literalNode.getFlags();
            if ((flags != null) && (!flags.isEmpty())) {
                com.google.javascript.rhino.Node flagsNode = newStringNode(flags);
                flagsNode.setLineno(literalNode.getLineno());
                maybeSetLengthFrom(flagsNode, literalNode);
                node.addChildToBack(flagsNode);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processReturnStatement(com.google.javascript.rhino.head.ast.ReturnStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.RETURN);
            if (statementNode.getReturnValue() != null) {
                node.addChildToBack(transform(statementNode.getReturnValue()));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processScope(com.google.javascript.rhino.head.ast.Scope scopeNode) {
            return processGeneric(scopeNode);
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processStringLiteral(com.google.javascript.rhino.head.ast.StringLiteral literalNode) {
            java.lang.String value = literalNode.getValue();
            com.google.javascript.rhino.Node n = newStringNode(value);
            if (value.indexOf('\u000b') != (-1)) {
                int start = literalNode.getAbsolutePosition();
                int end = start + literalNode.getLength();
                if ((start < sourceString.length()) && (sourceString.substring(start, java.lang.Math.min(sourceString.length(), end)).indexOf("\\v") != (-1))) {
                    n.putBooleanProp(com.google.javascript.rhino.Node.SLASH_V, true);
                }
            }
            return n;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchCase(com.google.javascript.rhino.head.ast.SwitchCase caseNode) {
            com.google.javascript.rhino.Node node;
            if (caseNode.isDefault()) {
                node = newNode(com.google.javascript.rhino.Token.DEFAULT_CASE);
            } else {
                com.google.javascript.rhino.head.ast.AstNode expr = caseNode.getExpression();
                node = newNode(com.google.javascript.rhino.Token.CASE, transform(expr));
            }
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            block.putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, true);
            block.setLineno(caseNode.getLineno());
            block.setCharno(position2charno(caseNode.getAbsolutePosition()));
            maybeSetLengthFrom(block, caseNode);
            if (caseNode.getStatements() != null) {
                for (com.google.javascript.rhino.head.ast.AstNode child : caseNode.getStatements()) {
                    block.addChildToBack(transform(child));
                }
            }
            node.addChildToBack(block);
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processSwitchStatement(com.google.javascript.rhino.head.ast.SwitchStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.SWITCH, transform(statementNode.getExpression()));
            for (com.google.javascript.rhino.head.ast.AstNode child : statementNode.getCases()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processThrowStatement(com.google.javascript.rhino.head.ast.ThrowStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.THROW, transform(statementNode.getExpression()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processTryStatement(com.google.javascript.rhino.head.ast.TryStatement statementNode) {
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.TRY, transformBlock(statementNode.getTryBlock()));
            com.google.javascript.rhino.Node block = newNode(com.google.javascript.rhino.Token.BLOCK);
            boolean lineSet = false;
            for (com.google.javascript.rhino.head.ast.CatchClause cc : statementNode.getCatchClauses()) {
                if (lineSet == false) {
                    block.setLineno(cc.getLineno());
                    maybeSetLengthFrom(block, cc);
                    lineSet = true;
                }
                block.addChildToBack(transform(cc));
            }
            node.addChildToBack(block);
            com.google.javascript.rhino.head.ast.AstNode finallyBlock = statementNode.getFinallyBlock();
            if (finallyBlock != null) {
                node.addChildToBack(transformBlock(finallyBlock));
            }
            if ((lineSet == false) && (finallyBlock != null)) {
                block.setLineno(finallyBlock.getLineno());
                maybeSetLengthFrom(block, finallyBlock);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processUnaryExpression(com.google.javascript.rhino.head.ast.UnaryExpression exprNode) {
            int type = com.google.javascript.jscomp.parsing.IRFactory.transformTokenType(exprNode.getType());
            com.google.javascript.rhino.Node operand = transform(exprNode.getOperand());
            if ((type == com.google.javascript.rhino.Token.NEG) && operand.isNumber()) {
                operand.setDouble(-operand.getDouble());
                return operand;
            } else {
                if ((type == com.google.javascript.rhino.Token.DELPROP) && (!((operand.isGetProp() || operand.isGetElem()) || operand.isName()))) {
                    java.lang.String msg = "Invalid delete operand. Only properties can be deleted.";
                    errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                } else if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
                    if (!validAssignmentTarget(operand)) {
                        java.lang.String msg = (type == com.google.javascript.rhino.Token.INC) ? "invalid increment target" : "invalid decrement target";
                        errorReporter.error(msg, sourceName, operand.getLineno(), "", 0);
                    }
                }
                com.google.javascript.rhino.Node node = newNode(type, operand);
                if (exprNode.isPostfix()) {
                    node.putBooleanProp(com.google.javascript.rhino.Node.INCRDECR_PROP, true);
                }
                return node;
            }
        }

        private boolean validAssignmentTarget(com.google.javascript.rhino.Node target) {
            switch (target.getType()) {
                case com.google.javascript.rhino.Token.CAST :
                case com.google.javascript.rhino.Token.NAME :
                case com.google.javascript.rhino.Token.GETPROP :
                case com.google.javascript.rhino.Token.GETELEM :
                    return true;
            }
            return false;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableDeclaration(com.google.javascript.rhino.head.ast.VariableDeclaration declarationNode) {
            if ((!config.acceptConstKeyword) && (declarationNode.getType() == com.google.javascript.rhino.head.Token.CONST)) {
                processIllegalToken(declarationNode);
            }
            com.google.javascript.rhino.Node node = newNode(com.google.javascript.rhino.Token.VAR);
            for (com.google.javascript.rhino.head.ast.VariableInitializer child : declarationNode.getVariables()) {
                node.addChildToBack(transform(child));
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processVariableInitializer(com.google.javascript.rhino.head.ast.VariableInitializer initializerNode) {
            com.google.javascript.rhino.Node node = transform(initializerNode.getTarget());
            if (initializerNode.getInitializer() != null) {
                com.google.javascript.rhino.Node initalizer = transform(initializerNode.getInitializer());
                node.addChildToBack(initalizer);
            }
            return node;
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWhileLoop(com.google.javascript.rhino.head.ast.WhileLoop loopNode) {
            return newNode(com.google.javascript.rhino.Token.WHILE, transform(loopNode.getCondition()), transformBlock(loopNode.getBody()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processWithStatement(com.google.javascript.rhino.head.ast.WithStatement statementNode) {
            return newNode(com.google.javascript.rhino.Token.WITH, transform(statementNode.getExpression()), transformBlock(statementNode.getStatement()));
        }

        @java.lang.Override
        com.google.javascript.rhino.Node processIllegalToken(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("Unsupported syntax: " + com.google.javascript.rhino.head.Token.typeToName(node.getType()), sourceName, node.getLineno(), "", 0);
            return newNode(com.google.javascript.rhino.Token.EMPTY);
        }

        void reportDestructuringAssign(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("destructuring assignment forbidden", sourceName, node.getLineno(), "", 0);
        }

        void reportGetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.GETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportSetter(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error(com.google.javascript.jscomp.parsing.IRFactory.SETTER_ERROR_MESSAGE, sourceName, node.getLineno(), "", 0);
        }

        void reportGetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("getters may not have parameters", sourceName, node.getLineno(), "", 0);
        }

        void reportSetterParam(com.google.javascript.rhino.head.ast.AstNode node) {
            errorReporter.error("setters must have exactly one parameter", sourceName, node.getLineno(), "", 0);
        }
    }

    private static int transformTokenType(int token) {
        switch (token) {
            case com.google.javascript.rhino.head.Token.RETURN :
                return com.google.javascript.rhino.Token.RETURN;
            case com.google.javascript.rhino.head.Token.BITOR :
                return com.google.javascript.rhino.Token.BITOR;
            case com.google.javascript.rhino.head.Token.BITXOR :
                return com.google.javascript.rhino.Token.BITXOR;
            case com.google.javascript.rhino.head.Token.BITAND :
                return com.google.javascript.rhino.Token.BITAND;
            case com.google.javascript.rhino.head.Token.EQ :
                return com.google.javascript.rhino.Token.EQ;
            case com.google.javascript.rhino.head.Token.NE :
                return com.google.javascript.rhino.Token.NE;
            case com.google.javascript.rhino.head.Token.LT :
                return com.google.javascript.rhino.Token.LT;
            case com.google.javascript.rhino.head.Token.LE :
                return com.google.javascript.rhino.Token.LE;
            case com.google.javascript.rhino.head.Token.GT :
                return com.google.javascript.rhino.Token.GT;
            case com.google.javascript.rhino.head.Token.GE :
                return com.google.javascript.rhino.Token.GE;
            case com.google.javascript.rhino.head.Token.LSH :
                return com.google.javascript.rhino.Token.LSH;
            case com.google.javascript.rhino.head.Token.RSH :
                return com.google.javascript.rhino.Token.RSH;
            case com.google.javascript.rhino.head.Token.URSH :
                return com.google.javascript.rhino.Token.URSH;
            case com.google.javascript.rhino.head.Token.ADD :
                return com.google.javascript.rhino.Token.ADD;
            case com.google.javascript.rhino.head.Token.SUB :
                return com.google.javascript.rhino.Token.SUB;
            case com.google.javascript.rhino.head.Token.MUL :
                return com.google.javascript.rhino.Token.MUL;
            case com.google.javascript.rhino.head.Token.DIV :
                return com.google.javascript.rhino.Token.DIV;
            case com.google.javascript.rhino.head.Token.MOD :
                return com.google.javascript.rhino.Token.MOD;
            case com.google.javascript.rhino.head.Token.NOT :
                return com.google.javascript.rhino.Token.NOT;
            case com.google.javascript.rhino.head.Token.BITNOT :
                return com.google.javascript.rhino.Token.BITNOT;
            case com.google.javascript.rhino.head.Token.POS :
                return com.google.javascript.rhino.Token.POS;
            case com.google.javascript.rhino.head.Token.NEG :
                return com.google.javascript.rhino.Token.NEG;
            case com.google.javascript.rhino.head.Token.NEW :
                return com.google.javascript.rhino.Token.NEW;
            case com.google.javascript.rhino.head.Token.DELPROP :
                return com.google.javascript.rhino.Token.DELPROP;
            case com.google.javascript.rhino.head.Token.TYPEOF :
                return com.google.javascript.rhino.Token.TYPEOF;
            case com.google.javascript.rhino.head.Token.GETPROP :
                return com.google.javascript.rhino.Token.GETPROP;
            case com.google.javascript.rhino.head.Token.GETELEM :
                return com.google.javascript.rhino.Token.GETELEM;
            case com.google.javascript.rhino.head.Token.CALL :
                return com.google.javascript.rhino.Token.CALL;
            case com.google.javascript.rhino.head.Token.NAME :
                return com.google.javascript.rhino.Token.NAME;
            case com.google.javascript.rhino.head.Token.NUMBER :
                return com.google.javascript.rhino.Token.NUMBER;
            case com.google.javascript.rhino.head.Token.STRING :
                return com.google.javascript.rhino.Token.STRING;
            case com.google.javascript.rhino.head.Token.NULL :
                return com.google.javascript.rhino.Token.NULL;
            case com.google.javascript.rhino.head.Token.THIS :
                return com.google.javascript.rhino.Token.THIS;
            case com.google.javascript.rhino.head.Token.FALSE :
                return com.google.javascript.rhino.Token.FALSE;
            case com.google.javascript.rhino.head.Token.TRUE :
                return com.google.javascript.rhino.Token.TRUE;
            case com.google.javascript.rhino.head.Token.SHEQ :
                return com.google.javascript.rhino.Token.SHEQ;
            case com.google.javascript.rhino.head.Token.SHNE :
                return com.google.javascript.rhino.Token.SHNE;
            case com.google.javascript.rhino.head.Token.REGEXP :
                return com.google.javascript.rhino.Token.REGEXP;
            case com.google.javascript.rhino.head.Token.THROW :
                return com.google.javascript.rhino.Token.THROW;
            case com.google.javascript.rhino.head.Token.IN :
                return com.google.javascript.rhino.Token.IN;
            case com.google.javascript.rhino.head.Token.INSTANCEOF :
                return com.google.javascript.rhino.Token.INSTANCEOF;
            case com.google.javascript.rhino.head.Token.ARRAYLIT :
                return com.google.javascript.rhino.Token.ARRAYLIT;
            case com.google.javascript.rhino.head.Token.OBJECTLIT :
                return com.google.javascript.rhino.Token.OBJECTLIT;
            case com.google.javascript.rhino.head.Token.TRY :
                return com.google.javascript.rhino.Token.TRY;
            case com.google.javascript.rhino.head.Token.LP :
                return com.google.javascript.rhino.Token.PARAM_LIST;
            case com.google.javascript.rhino.head.Token.COMMA :
                return com.google.javascript.rhino.Token.COMMA;
            case com.google.javascript.rhino.head.Token.ASSIGN :
                return com.google.javascript.rhino.Token.ASSIGN;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITXOR :
                return com.google.javascript.rhino.Token.ASSIGN_BITXOR;
            case com.google.javascript.rhino.head.Token.ASSIGN_BITAND :
                return com.google.javascript.rhino.Token.ASSIGN_BITAND;
            case com.google.javascript.rhino.head.Token.ASSIGN_LSH :
                return com.google.javascript.rhino.Token.ASSIGN_LSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_RSH :
                return com.google.javascript.rhino.Token.ASSIGN_RSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_URSH :
                return com.google.javascript.rhino.Token.ASSIGN_URSH;
            case com.google.javascript.rhino.head.Token.ASSIGN_ADD :
                return com.google.javascript.rhino.Token.ASSIGN_ADD;
            case com.google.javascript.rhino.head.Token.ASSIGN_SUB :
                return com.google.javascript.rhino.Token.ASSIGN_SUB;
            case com.google.javascript.rhino.head.Token.ASSIGN_MUL :
                return com.google.javascript.rhino.Token.ASSIGN_MUL;
            case com.google.javascript.rhino.head.Token.ASSIGN_DIV :
                return com.google.javascript.rhino.Token.ASSIGN_DIV;
            case com.google.javascript.rhino.head.Token.ASSIGN_MOD :
                return com.google.javascript.rhino.Token.ASSIGN_MOD;
            case com.google.javascript.rhino.head.Token.HOOK :
                return com.google.javascript.rhino.Token.HOOK;
            case com.google.javascript.rhino.head.Token.OR :
                return com.google.javascript.rhino.Token.OR;
            case com.google.javascript.rhino.head.Token.AND :
                return com.google.javascript.rhino.Token.AND;
            case com.google.javascript.rhino.head.Token.INC :
                return com.google.javascript.rhino.Token.INC;
            case com.google.javascript.rhino.head.Token.DEC :
                return com.google.javascript.rhino.Token.DEC;
            case com.google.javascript.rhino.head.Token.FUNCTION :
                return com.google.javascript.rhino.Token.FUNCTION;
            case com.google.javascript.rhino.head.Token.IF :
                return com.google.javascript.rhino.Token.IF;
            case com.google.javascript.rhino.head.Token.SWITCH :
                return com.google.javascript.rhino.Token.SWITCH;
            case com.google.javascript.rhino.head.Token.CASE :
                return com.google.javascript.rhino.Token.CASE;
            case com.google.javascript.rhino.head.Token.DEFAULT :
                return com.google.javascript.rhino.Token.DEFAULT_CASE;
            case com.google.javascript.rhino.head.Token.WHILE :
                return com.google.javascript.rhino.Token.WHILE;
            case com.google.javascript.rhino.head.Token.DO :
                return com.google.javascript.rhino.Token.DO;
            case com.google.javascript.rhino.head.Token.FOR :
                return com.google.javascript.rhino.Token.FOR;
            case com.google.javascript.rhino.head.Token.BREAK :
                return com.google.javascript.rhino.Token.BREAK;
            case com.google.javascript.rhino.head.Token.CONTINUE :
                return com.google.javascript.rhino.Token.CONTINUE;
            case com.google.javascript.rhino.head.Token.VAR :
                return com.google.javascript.rhino.Token.VAR;
            case com.google.javascript.rhino.head.Token.WITH :
                return com.google.javascript.rhino.Token.WITH;
            case com.google.javascript.rhino.head.Token.CATCH :
                return com.google.javascript.rhino.Token.CATCH;
            case com.google.javascript.rhino.head.Token.VOID :
                return com.google.javascript.rhino.Token.VOID;
            case com.google.javascript.rhino.head.Token.EMPTY :
                return com.google.javascript.rhino.Token.EMPTY;
            case com.google.javascript.rhino.head.Token.BLOCK :
                return com.google.javascript.rhino.Token.BLOCK;
            case com.google.javascript.rhino.head.Token.LABEL :
                return com.google.javascript.rhino.Token.LABEL;
            case com.google.javascript.rhino.head.Token.EXPR_VOID :
            case com.google.javascript.rhino.head.Token.EXPR_RESULT :
                return com.google.javascript.rhino.Token.EXPR_RESULT;
            case com.google.javascript.rhino.head.Token.SCRIPT :
                return com.google.javascript.rhino.Token.SCRIPT;
            case com.google.javascript.rhino.head.Token.GET :
                return com.google.javascript.rhino.Token.GETTER_DEF;
            case com.google.javascript.rhino.head.Token.SET :
                return com.google.javascript.rhino.Token.SETTER_DEF;
            case com.google.javascript.rhino.head.Token.CONST :
                return com.google.javascript.rhino.Token.CONST;
            case com.google.javascript.rhino.head.Token.DEBUGGER :
                return com.google.javascript.rhino.Token.DEBUGGER;
        }
        throw new java.lang.IllegalStateException(java.lang.String.valueOf(token));
    }

    private com.google.javascript.rhino.Node newNode(int type) {
        return new com.google.javascript.rhino.Node(type).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1) {
        return new com.google.javascript.rhino.Node(type, child1).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2) {
        return new com.google.javascript.rhino.Node(type, child1, child2).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNode(int type, com.google.javascript.rhino.Node child1, com.google.javascript.rhino.Node child2, com.google.javascript.rhino.Node child3) {
        return new com.google.javascript.rhino.Node(type, child1, child2, child3).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(java.lang.String value) {
        return com.google.javascript.rhino.IR.string(value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newStringNode(int type, java.lang.String value) {
        return com.google.javascript.rhino.Node.newString(type, value).clonePropsFrom(templateNode);
    }

    private com.google.javascript.rhino.Node newNumberNode(java.lang.Double value) {
        return com.google.javascript.rhino.IR.number(value).clonePropsFrom(templateNode);
    }
}
[4557406] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659900198096
GPR[EPVATF]-1659900201095
GPR[SPS]-1659900201095
[4561179] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:540.
GPR[EPS]-1659900201870
GPR[ESUN]-1659900201871
GPR[SSUN]-1659900201871
GPR[ESUN]-1659900201871
GPR[SSUN]-1659900201871
GPR[ESUN]-1659900201871
GPR[SSUN]-1659900201871
-1117079791
GPR[ESUN]-1659900202079
GPR[SSUN]-1659900202080
-1117079791
GPR[SPVATF]-1659900202285
GPR[EPVATF]-1659900202555
[4561865] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900202555
GPR[SSUN]-1659900202555
-1117079791
GPR[SPVATF]-1659900202766
GPR[EPVATF]-1659900203039
[4562349] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900203039
GPR[SSUN]-1659900203039
-1117079791
GPR[ESUN]-1659900203247
GPR[SSUN]-1659900203248
-1117079791
GPR[SPVATF]-1659900203449
GPR[EPVATF]-1659900203723
[4563033] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659900203723
GPR[SSUN]-1659900203723
1537627151
GPR[ESUN]-1659900203944
GPR[SSUN]-1659900203945
2433571
GPR[ESUN]-1659900204199
GPR[SSUN]-1659900204199
79711797
GPR[SPVATF]-1659900204456
GPR[EPVATF]-1659900207504
GPR[SPS]-1659900207504
GPR[EPS]-1659900418473
GPR[ESUN]-1659900418473
GPR[SSUN]-1659900418473
79711797
GPR[ESUN]-1659900418907
GPR[SSUN]-1659900418907
GPR[ESUN]-1659900418907
GPR[SSUN]-1659900418907
GPR[ESUN]-1659900418907
GPR[SSUN]-1659900418907
561857265
GPR[ESUN]-1659900419099
GPR[SSUN]-1659900419099
466431456
GPR[ESUN]-1659900419413
GPR[SSUN]-1659900419413
-546582215
GPR[SPVATF]-1659900419629
GPR[EPVATF]-1659900422648
GPR[SPS]-1659900422648
[4782544] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:163.
GPR[EPS]-1659900423234
GPR[ESUN]-1659900423234
GPR[SSUN]-1659900423234
-546582215
GPR[SPVATF]-1659900423479
GPR[EPVATF]-1659900426417
GPR[SPS]-1659900426417
[4786301] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:162.
GPR[EPS]-1659900426991
GPR[ESUN]-1659900426991
GPR[SSUN]-1659900426991
-546582215
GPR[SPVATF]-1659900427206
GPR[EPVATF]-1659900430183
GPR[SPS]-1659900430183
[4790078] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:116.
GPR[EPS]-1659900430768
GPR[ESUN]-1659900430768
GPR[SSUN]-1659900430768
-546582215
GPR[SPVATF]-1659900430979
GPR[EPVATF]-1659900434920
GPR[SPS]-1659900434921
[4796477] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:115.
GPR[EPS]-1659900437167
GPR[ESUN]-1659900437168
GPR[SSUN]-1659900437168
-546582215
GPR[SPVATF]-1659900438244
GPR[EPVATF]-1659900441388
GPR[SPS]-1659900441388
[4802143] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:70.
GPR[EPS]-1659900442833
GPR[ESUN]-1659900442833
GPR[SSUN]-1659900442834
1331276989
GPR[ESUN]-1659900443284
GPR[SSUN]-1659900443284
1331276989
GPR[SPVATF]-1659900443647
GPR[EPVATF]-1659900445924
GPR[SPS]-1659900445924
[4806238] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:643.
GPR[EPS]-1659900446928
GPR[ESUN]-1659900446928
GPR[SSUN]-1659900446928
1331276989
GPR[SPVATF]-1659900447188
GPR[EPVATF]-1659900449443
GPR[SPS]-1659900449443
[4809576] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:641.
GPR[EPS]-1659900450266
GPR[ESUN]-1659900450266
GPR[SSUN]-1659900450266
1331276989
GPR[SPVATF]-1659900450529
GPR[EPVATF]-1659900452903
GPR[SPS]-1659900452903
[4813048] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:640.
GPR[EPS]-1659900453739
GPR[ESUN]-1659900453739
GPR[SSUN]-1659900453739
1331276989
GPR[SPVATF]-1659900453991
GPR[EPVATF]-1659900456123
GPR[SPS]-1659900456123
[4816218] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeTraversal:639.
GPR[EPS]-1659900456909
GPR[ESUN]-1659900456909
GPR[SSUN]-1659900456909
1331276989
GPR[ESUN]-1659900457153
GPR[SSUN]-1659900457153
-546582215
GPR[ESUN]-1659900457405
GPR[SSUN]-1659900457405
-546582215
GPR[SPVATF]-1659900457643
GPR[EPVATF]-1659900459780
GPR[SPS]-1659900459780
[5096437] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659900758203
GPR[SSUN]-1659900763865
\n\nNode: host-47\n
\n\nDate: Sun 07 Aug 2022 12:44:59 PM PDT\n
End running Nopol Closure/125 results at /experiment_home///results/Nopol/Closure/125/seed_264/
Removing checked out dir script/workingdir/Nopol/Closure_125
GPR[SSLE]-1659901500084
GPR[ESLE]-1659901560089
