Sleep 1m start
GPR[SSLI]-1659846672960
GPR[ESLI]-1659846732964
Running SimFix Time 7b
Timezone: America/Los_Angeles
Seed 261
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Time/7/seed_261/
Project lc: time
New out script/workingdir/SimFix/time/time_7_buggy
The file script/workingdir/SimFix/time/time_7_buggy does not exist!
script/workingdir/SimFix/time/time_7_buggy
Current directory: script/workingdir/SimFix/time/time_7_buggy
classpath:  /experiment_home/defects4j/framework/projects/Time/lib/org/joda/joda-convert/1.2/joda-convert-1.2.jar:/experiment_home/defects4j/framework/projects/Time/lib/junit/junit/3.8.2/junit-3.8.2.jar:script/workingdir/SimFix/time/time_7_buggy/target/classes:script/workingdir/SimFix/time/time_7_buggy/target/test-classes
Src java:  /src/main/java
Classes Java:  /target/classes
Src Test:  /src/test/java
Classes Test:  /target/test-classes
GPR[SSLB]-1659846749807
GPR[ESLB]-1659846809813
Calling SimFix: at script/workingdir/SimFix/time/time_7_buggy
build.xml
checkstyle.xml
d4j-info
defects4j.build.properties
LICENSE.txt
maven-build.properties
maven-build.xml
NOTICE.txt
pom.xml
README.txt
RELEASE-NOTES.txt
src
target
content current dir: build.xml checkstyle.xml d4j-info defects4j.build.properties LICENSE.txt maven-build.properties maven-build.xml NOTICE.txt pom.xml README.txt RELEASE-NOTES.txt src target
Node: host-74
Date init: Sat 06 Aug 2022 09:33:32 PM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659846812120
=================================================
Project : time_7	start : 22/08/06 21:33

GPR[ESUP]-1659846813676
MM Purify? false
GPR[SFL]-1659846813893
GPR[EFL]-1659846813936
GPR[SFP]-1659846813936
TIMEOUT : 18000000
GPR[SSUN]-1659846813948
org.joda.time.format.DateTimeParserBucket,373
Find no block!
GPR[SSUN]-1659846814082
org.joda.time.format.DateTimeParserBucket,374
========
if(text==null){
e.prependMessage("Cannot parse \""+text);
}

========
MM Copying to MM
GPR[SPVS]-1659846814954
GPR[SPVAP]-1659846814954
GPR[EPVAP]-1659846822682
GPR[SPVATF]-1659846822682
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846825240
GPR[EPVS]-1659846825240
========
if(iEraText!=null){
e.prependMessage("Cannot parse \""+text);
}

========
MM Copying to MM
GPR[SPVS]-1659846825244
GPR[SPVAP]-1659846825244
GPR[EPVAP]-1659846826516
GPR[EPVS]-1659846826516
========
clearPrefix();
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}

========
MM Copying to MM
GPR[SPVS]-1659846826520
GPR[SPVAP]-1659846826520
GPR[EPVAP]-1659846827795
GPR[EPVS]-1659846827795
========
append0(new Literal(text),literal);
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}

========
MM Copying to MM
GPR[SPVS]-1659846827797
GPR[SPVAP]-1659846827797
GPR[EPVAP]-1659846829071
GPR[EPVS]-1659846829071
========
iDefaultYear+=(text.charAt(iDefaultYear++)-'0')*100;
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}

========
MM Copying to MM
GPR[SPVS]-1659846829075
GPR[SPVAP]-1659846829075
GPR[EPVAP]-1659846832392
GPR[SPVATF]-1659846832392
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846834914
GPR[EPVS]-1659846834914
========
if(FormatUtils.parseTwoDigits(text,iDefaultYear)>59){
return ~iDefaultYear;
}
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}

========
MM Copying to MM
GPR[SPVS]-1659846834918
GPR[SPVAP]-1659846834918
GPR[EPVAP]-1659846839661
GPR[SPVATF]-1659846839661
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846842214
GPR[EPVS]-1659846842214
========
iMillis=iField.set(instant,text,iLocale);
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}

========
MM Copying to MM
GPR[SPVS]-1659846842217
GPR[SPVAP]-1659846842217
GPR[EPVAP]-1659846843495
GPR[EPVS]-1659846843495
GPR[ESUN]-1659846843497
GPR[SSUN]-1659846843497
org.joda.time.format.DateTimeParserBucket,375
GPR[ESUN]-1659846843723
GPR[SSUN]-1659846843723
org.joda.time.format.DateTimeParserBucket,377
========
if(text==null){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846844433
GPR[SPVAP]-1659846844433
GPR[EPVAP]-1659846852310
GPR[SPVATF]-1659846852310
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846854830
GPR[EPVS]-1659846854830
========
if(text!=':'){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846854832
GPR[SPVAP]-1659846854832
GPR[EPVAP]-1659846856135
GPR[EPVS]-1659846856135
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
set(text,null);
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846856137
GPR[SPVAP]-1659846856137
GPR[EPVAP]-1659846857410
GPR[EPVS]-1659846857410
========
if(iEraText!=null){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846857412
GPR[SPVAP]-1659846857412
GPR[EPVAP]-1659846858678
GPR[EPVS]-1659846858678
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iText.regionMatches(true,iDefaultYear,text,0,iDefaultYear)){
return pos;
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846858680
GPR[SPVAP]-1659846858680
GPR[EPVAP]-1659846859957
GPR[EPVS]-1659846859957
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iDefaultYear<=0){
return 0;
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846859959
GPR[SPVAP]-1659846859959
GPR[EPVAP]-1659846863334
GPR[SPVATF]-1659846863334
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846865873
GPR[EPVS]-1659846865873
========
iDefaultYear--;
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846865874
GPR[SPVAP]-1659846865874
GPR[EPVAP]-1659846869207
GPR[SPVATF]-1659846869207
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846871739
GPR[EPVS]-1659846871739
========
iDefaultYear--;
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iDefaultYear<=0){
return 0;
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846871740
GPR[SPVAP]-1659846871740
GPR[EPVAP]-1659846875050
GPR[SPVATF]-1659846875050
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846877597
GPR[EPVS]-1659846877597
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iText.regionMatches(true,iDefaultYear,text,0,iDefaultYear)){
return position+textLength;
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846877599
GPR[SPVAP]-1659846877599
GPR[EPVAP]-1659846878873
GPR[EPVS]-1659846878874
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(text.regionMatches(true,iDefaultYear,iValue,0,iValue.length())){
return position+iValue.length();
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846878875
GPR[SPVAP]-1659846878875
GPR[EPVAP]-1659846880149
GPR[EPVS]-1659846880149
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
clearPrefix();
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846880151
GPR[SPVAP]-1659846880151
GPR[EPVAP]-1659846881439
GPR[EPVS]-1659846881439
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
append0(new Literal(text),literal);
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846881440
GPR[SPVAP]-1659846881440
GPR[EPVAP]-1659846882728
GPR[EPVS]-1659846882728
========
iDefaultYear++;
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846882730
GPR[SPVAP]-1659846882730
GPR[EPVAP]-1659846886056
GPR[SPVATF]-1659846886056
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846888642
GPR[EPVS]-1659846888642
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(FormatUtils.parseTwoDigits(text,iDefaultYear)>23){
return ~iDefaultYear;
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846888645
GPR[SPVAP]-1659846888645
GPR[EPVAP]-1659846891937
GPR[SPVATF]-1659846891938
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846894465
GPR[EPVS]-1659846894466
========
iDefaultYear+=(text.charAt(iDefaultYear++)-'0')*100;
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846894468
GPR[SPVAP]-1659846894468
GPR[EPVAP]-1659846897771
GPR[SPVATF]-1659846897771
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846900343
GPR[EPVS]-1659846900343
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iPivotYear!=null){
return era.intValue();
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846900345
GPR[SPVAP]-1659846900345
GPR[EPVAP]-1659846901624
GPR[EPVS]-1659846901624
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iPivotYear!=null){
return month.intValue();
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846901626
GPR[SPVAP]-1659846901626
GPR[EPVAP]-1659846902907
GPR[EPVS]-1659846902907
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iPivotYear!=null){
return day.intValue();
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846902908
GPR[SPVAP]-1659846902909
GPR[EPVAP]-1659846904182
GPR[EPVS]-1659846904183
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(--iDefaultYear<0){
return 0;
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846904185
GPR[SPVAP]-1659846904185
GPR[EPVAP]-1659846907492
GPR[SPVATF]-1659846907492
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846911880
GPR[EPVS]-1659846911880
========
if(text!='-'){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846911882
GPR[SPVAP]-1659846911882
GPR[EPVAP]-1659846913168
GPR[EPVS]-1659846913168
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
checkLimits(iMillis,null);
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846913170
GPR[SPVAP]-1659846913170
GPR[EPVAP]-1659846914439
GPR[EPVS]-1659846914439
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
checkLimits(getWrappedField().set(iMillis,text,iLocale),"resulting");
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846914440
GPR[SPVAP]-1659846914440
GPR[EPVAP]-1659846915719
GPR[EPVS]-1659846915719
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(FormatUtils.parseTwoDigits(text,iDefaultYear)>59){
return ~iDefaultYear;
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846915721
GPR[SPVAP]-1659846915721
GPR[EPVAP]-1659846919045
GPR[SPVATF]-1659846919045
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846921546
GPR[EPVS]-1659846921546
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iDefaultYear<0){
return newPos;
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846921548
GPR[SPVAP]-1659846921548
GPR[EPVAP]-1659846922819
GPR[EPVS]-1659846922820
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iDefaultYear<=iDefaultYear){
return position;
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846922821
GPR[SPVAP]-1659846922821
GPR[EPVAP]-1659846924087
GPR[EPVS]-1659846924087
========
count=digitCount(text,iDefaultYear,3);
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846924089
GPR[SPVAP]-1659846924089
GPR[EPVAP]-1659846925361
GPR[EPVS]-1659846925361
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
checkParser();
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846925362
GPR[SPVAP]-1659846925362
GPR[EPVAP]-1659846926637
GPR[EPVS]-1659846926637
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(!iSavedFieldsShared){
return ~iDefaultYear;
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846926638
GPR[SPVAP]-1659846926639
GPR[EPVAP]-1659846929955
GPR[SPVATF]-1659846929955
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846932468
GPR[EPVS]-1659846932468
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iDefaultYear>=0){
iSavedFieldsShared=true;
}else {
if(!mustParse){
return ~position;
}
return position;
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846932469
GPR[SPVAP]-1659846932469
GPR[EPVAP]-1659846933742
GPR[EPVS]-1659846933742
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
if(iDefaultYear>=0){
iSavedFieldsShared=true;
}else {
if(!mustParse){
return ~suffixPos;
}
return suffixPos;
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846933744
GPR[SPVAP]-1659846933744
GPR[EPVAP]-1659846935035
GPR[EPVS]-1659846935035
========
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
iMillis=iField.set(localInstant,text,iLocale);
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846935038
GPR[SPVAP]-1659846935038
GPR[EPVAP]-1659846936311
GPR[EPVS]-1659846936311
========
iMillis=iField.set(instant,text,iLocale);
if(text!=null){
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846936312
GPR[SPVAP]-1659846936313
GPR[EPVAP]-1659846937597
GPR[EPVS]-1659846937597
========
if(text!=null){
if(iSavedFieldsShared){
DateTimeZone DateTimeZone.forOffsetMillis(iDefaultYear)=DateTimeZone.forOffsetMillis(iDefaultYear);
chrono=iChrono.withZone(DateTimeZone.forOffsetMillis(iDefaultYear));
}
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846937600
GPR[SPVAP]-1659846937600
GPR[EPVAP]-1659846938723
GPR[EPVS]-1659846938724
========
if(text!=null){
return new MutableDateTime(millis,iChrono);
e.prependMessage("Cannot parse \""+text);
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846938726
GPR[SPVAP]-1659846938726
GPR[EPVAP]-1659846939994
GPR[EPVS]-1659846939995
========
if(text!=null){
if(iSavedFieldsShared){
DateTimeZone DateTimeZone.forOffsetMillis(iDefaultYear)=DateTimeZone.forOffsetMillis(iDefaultYear);
chrono=iChrono.withZone(DateTimeZone.forOffsetMillis(iDefaultYear));
}
return new MutableDateTime(millis,iChrono);

e.prependMessage("Cannot parse \""+text);
}
throw e;

========
MM Copying to MM
GPR[SPVS]-1659846939996
GPR[SPVAP]-1659846939996
GPR[EPVAP]-1659846941121
GPR[EPVS]-1659846941121
GPR[ESUN]-1659846941121
GPR[SSUN]-1659846941121
org.joda.time.IllegalFieldValueException,314
GPR[ESUN]-1659846941850
GPR[SSUN]-1659846941851
org.joda.time.IllegalFieldValueException,323
========
if(text!=null){
iMessage=message+": ";
}

========
MM Copying to MM
GPR[SPVS]-1659846942488
GPR[SPVAP]-1659846942488
GPR[EPVAP]-1659846944912
GPR[EPVS]-1659846944912
GPR[ESUN]-1659846945409
GPR[SSUN]-1659846945409
org.joda.time.IllegalFieldValueException,325
GPR[ESUN]-1659846945518
GPR[SSUN]-1659846945518
org.joda.time.IllegalFieldValueException,326
GPR[ESUN]-1659846945816
GPR[SSUN]-1659846945816
org.joda.time.IllegalFieldValueException,328
Find no block!
GPR[SSUN]-1659846945916
org.joda.time.format.DateTimeFormatter,701
========
DateTimeParser parser=requireParser();
if(instant==null){
throw new IllegalArgumentException("No parser supplied");
}

========
MM Copying to MM
GPR[SPVS]-1659846946574
GPR[SPVAP]-1659846946574
GPR[EPVAP]-1659846954597
GPR[SPVATF]-1659846954597
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846957117
GPR[EPVS]-1659846957117
========
DateTimeParser parser=requireParser();
if(instant==null){
throw new UnsupportedOperationException("Parsing not supported");
}

========
MM Copying to MM
GPR[SPVS]-1659846957119
GPR[SPVAP]-1659846957119
GPR[EPVAP]-1659846960414
GPR[SPVATF]-1659846960414
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846962976
GPR[EPVS]-1659846962976
========
DateTimeParser parser=requireParser();
if(instant==null){
if(iDefaultYear<=position){
return position;
}
throw new IllegalArgumentException("Instant must not be null");
}

========
MM Copying to MM
GPR[SPVS]-1659846962978
GPR[SPVAP]-1659846962978
GPR[EPVAP]-1659846966292
GPR[SPVATF]-1659846966292
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846968806
GPR[EPVS]-1659846968806
========
instant.setChronology(iChrono);
DateTimeParser parser=requireParser();
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}

========
MM Copying to MM
GPR[SPVS]-1659846968808
GPR[SPVAP]-1659846968808
GPR[EPVAP]-1659846972117
GPR[SPVATF]-1659846972117
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846974626
GPR[EPVS]-1659846974626
GPR[ESUN]-1659846974626
GPR[SSUN]-1659846974626
org.joda.time.format.DateTimeFormatter,702
GPR[ESUN]-1659846975420
GPR[SSUN]-1659846975420
org.joda.time.format.DateTimeFormatter,706
========
if(instant==null){
throw new IllegalArgumentException("ReadableInstant objects must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659846976415
GPR[SPVAP]-1659846976415
GPR[EPVAP]-1659846985392
GPR[SPVATF]-1659846985393
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846987946
GPR[EPVS]-1659846987946
========
if(getMillis()==instantMillis){
return 0;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659846987947
GPR[SPVAP]-1659846987947
GPR[EPVAP]-1659846989252
GPR[EPVS]-1659846989252
========
instant=chrono.set(this,instant);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659846989254
GPR[SPVAP]-1659846989254
GPR[EPVAP]-1659846990544
GPR[EPVS]-1659846990544
========
if(this.getMillis()<instantMillis){
return -1;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659846990545
GPR[SPVAP]-1659846990545
GPR[EPVAP]-1659846991821
GPR[EPVS]-1659846991821
========
if(this.getMillis()>instantMillis){
return 1;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659846991822
GPR[SPVAP]-1659846991822
GPR[EPVAP]-1659846993109
GPR[EPVS]-1659846993109
========
if(instant!=null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659846993111
GPR[SPVAP]-1659846993111
GPR[EPVAP]-1659846994535
GPR[EPVS]-1659846994535
========
if(null==null){
chrono=ISOChronology.getInstance();
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659846994536
GPR[SPVAP]-1659846994536
GPR[EPVAP]-1659846995813
GPR[EPVS]-1659846995813
========
if(instant==null){
throw new IllegalArgumentException("The time must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659846995816
GPR[SPVAP]-1659846995816
GPR[EPVAP]-1659846999144
GPR[SPVATF]-1659846999144
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847001664
GPR[EPVS]-1659847001664
========
chrono=chrono.withZone(iZone);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847001666
GPR[SPVAP]-1659847001666
GPR[EPVAP]-1659847002967
GPR[EPVS]-1659847002967
========
if(instant==null){
throw new IllegalArgumentException("The partial must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847002969
GPR[SPVAP]-1659847002969
GPR[EPVAP]-1659847006286
GPR[SPVATF]-1659847006286
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847008860
GPR[EPVS]-1659847008860
========
super();
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847008862
GPR[SPVAP]-1659847008862
GPR[EPVAP]-1659847010176
GPR[EPVS]-1659847010176
========
if(instant==null){
throw new IllegalArgumentException("Field must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847010178
GPR[SPVAP]-1659847010178
GPR[EPVAP]-1659847013522
GPR[SPVATF]-1659847013522
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847016096
GPR[EPVS]-1659847016096
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
if(iDefaultYear==0){
return this;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847016097
GPR[SPVAP]-1659847016097
GPR[EPVAP]-1659847017379
GPR[EPVS]-1659847017380
========
if(instant==null){
throw new IllegalArgumentException("Interval must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847017382
GPR[SPVAP]-1659847017382
GPR[EPVAP]-1659847020776
GPR[SPVATF]-1659847020776
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847023364
GPR[EPVS]-1659847023364
========
if(instant==null){
throw new IllegalArgumentException("The DateTimeFieldType must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847023366
GPR[SPVAP]-1659847023366
GPR[EPVAP]-1659847026715
GPR[SPVATF]-1659847026715
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847029290
GPR[EPVS]-1659847029290
========
if(instant==null){
throw new IllegalArgumentException("The DateTimeField must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847029293
GPR[SPVAP]-1659847029293
GPR[EPVAP]-1659847032693
GPR[SPVATF]-1659847032693
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847035227
GPR[EPVS]-1659847035227
========
if(instant==null){
if(instant==null){
return ISOChronology.getInstance();
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847035230
GPR[SPVAP]-1659847035230
GPR[EPVAP]-1659847036529
GPR[EPVS]-1659847036529
========
if(chrono==null){
return ISOChronology.getInstance();
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847036530
GPR[SPVAP]-1659847036530
GPR[EPVAP]-1659847037816
GPR[EPVS]-1659847037816
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
iZone=DateTimeUtils.getZone(zone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847037820
GPR[SPVAP]-1659847037820
GPR[EPVAP]-1659847039104
GPR[EPVS]-1659847039104
========
if(instant==null){
throw new IllegalArgumentException("Field must not be null");
}
if(iDefaultYear==0){
return this;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847039107
GPR[SPVAP]-1659847039107
GPR[EPVAP]-1659847040400
GPR[EPVS]-1659847040401
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
int instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847040402
GPR[SPVAP]-1659847040402
GPR[EPVAP]-1659847041700
GPR[EPVS]-1659847041700
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847041702
GPR[SPVAP]-1659847041702
GPR[EPVAP]-1659847045021
GPR[SPVATF]-1659847045021
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847047540
GPR[EPVS]-1659847047540
========
if(instant==null){
throw new LimitException(text,true);
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847047542
GPR[SPVAP]-1659847047542
GPR[EPVAP]-1659847048850
GPR[EPVS]-1659847048850
========
if(instant==null){
throw new LimitException(text,false);
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847048852
GPR[SPVAP]-1659847048852
GPR[EPVAP]-1659847050165
GPR[EPVS]-1659847050165
========
if(instant==null){
if(instant==null){
return DateTimeUtils.currentTimeMillis();
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847050167
GPR[SPVAP]-1659847050167
GPR[EPVAP]-1659847051458
GPR[EPVS]-1659847051458
========
instant.setChronology(chrono);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847051460
GPR[SPVAP]-1659847051460
GPR[EPVAP]-1659847052765
GPR[EPVS]-1659847052765
========
if(iZone!=null){
instant.setZone(iZone);
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847052766
GPR[SPVAP]-1659847052766
GPR[EPVAP]-1659847057925
GPR[SPVATF]-1659847057925
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847060443
GPR[EPVS]-1659847060443
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
iZone=DateTimeUtils.getZone(newZone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847060446
GPR[SPVAP]-1659847060446
GPR[EPVAP]-1659847061759
GPR[EPVS]-1659847061759
========
if(iZone==DateTimeUtils.getZone(getZone())){
return ;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847061761
GPR[SPVAP]-1659847061761
GPR[EPVAP]-1659847063068
GPR[EPVS]-1659847063068
========
setChronology(getChronology().withZone(iZone));
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847063070
GPR[SPVAP]-1659847063070
GPR[EPVAP]-1659847064379
GPR[EPVS]-1659847064379
========
setMillis(instantMillis);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847064381
GPR[SPVAP]-1659847064381
GPR[EPVAP]-1659847065694
GPR[EPVS]-1659847065694
========
instant=chrono.dayOfMonth().roundFloor(instant);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847065696
GPR[SPVAP]-1659847065696
GPR[EPVAP]-1659847066969
GPR[EPVS]-1659847066969
========
if(instant==null){
if(instant==null){
return containsNow();
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847066971
GPR[SPVAP]-1659847066971
GPR[EPVAP]-1659847068284
GPR[EPVS]-1659847068284
========
if(instant==null){
if(instant==null){
return isBeforeNow();
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847068286
GPR[SPVAP]-1659847068286
GPR[EPVAP]-1659847069594
GPR[EPVS]-1659847069594
========
if(instant==null){
if(instant==null){
return isAfterNow();
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847069596
GPR[SPVAP]-1659847069596
GPR[EPVAP]-1659847070898
GPR[EPVS]-1659847070898
========
if(instant==null){
if(instant==null){
return getOffset(DateTimeUtils.currentTimeMillis());
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847070900
GPR[SPVAP]-1659847070900
GPR[EPVAP]-1659847072197
GPR[EPVS]-1659847072197
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847072200
GPR[SPVAP]-1659847072200
GPR[EPVAP]-1659847073499
GPR[EPVS]-1659847073499
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
iZone=DateTimeUtils.getZone(newZone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847073511
GPR[SPVAP]-1659847073511
GPR[EPVAP]-1659847074813
GPR[EPVS]-1659847074813
========
if(instant==iZone){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847074816
GPR[SPVAP]-1659847074816
GPR[EPVAP]-1659847078141
GPR[SPVATF]-1659847078141
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847080628
GPR[EPVS]-1659847080628
========
if(instant!=iZone){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847080629
GPR[SPVAP]-1659847080629
GPR[EPVAP]-1659847082058
GPR[EPVS]-1659847082058
========
if(instant==null){
if(instant==null){
return getField().getDifference(getMillis(),DateTimeUtils.currentTimeMillis());
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847082060
GPR[SPVAP]-1659847082061
GPR[EPVAP]-1659847083352
GPR[EPVS]-1659847083352
========
if(instant==null){
if(instant==null){
return getField().getDifferenceAsLong(getMillis(),DateTimeUtils.currentTimeMillis());
}
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847083353
GPR[SPVAP]-1659847083353
GPR[EPVAP]-1659847084662
GPR[EPVS]-1659847084663
========
iDefaultYear=31*result+((int)(instantMillis^(start>>>32)));
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847084665
GPR[SPVAP]-1659847084665
GPR[EPVAP]-1659847085943
GPR[EPVS]-1659847085943
========
iDefaultYear=31*result+((int)(getEndMillis()^(end>>>32)));
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847085944
GPR[SPVAP]-1659847085944
GPR[EPVAP]-1659847087225
GPR[EPVS]-1659847087225
========
iDefaultYear=31*result+getChronology().hashCode();
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847087226
GPR[SPVAP]-1659847087226
GPR[EPVAP]-1659847088530
GPR[EPVS]-1659847088530
========
if(instant==Long.MIN_VALUE){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847088532
GPR[SPVAP]-1659847088532
GPR[EPVAP]-1659847089812
GPR[EPVS]-1659847089812
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getStartMillis());
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847089814
GPR[SPVAP]-1659847089814
GPR[EPVAP]-1659847091122
GPR[EPVS]-1659847091122
========
new StringBuffer(48).append('/');
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847091123
GPR[SPVAP]-1659847091123
GPR[EPVAP]-1659847094418
GPR[SPVATF]-1659847094418
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847096970
GPR[EPVS]-1659847096970
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getEndMillis());
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847096971
GPR[SPVAP]-1659847096971
GPR[EPVAP]-1659847098282
GPR[EPVS]-1659847098282
========
if(chrono.getZone()!=null){
instantMillis=zone.getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847098284
GPR[SPVAP]-1659847098284
GPR[EPVAP]-1659847099592
GPR[EPVS]-1659847099592
========
setTime(instantMillis);
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847099593
GPR[SPVAP]-1659847099593
GPR[EPVAP]-1659847100875
GPR[EPVS]-1659847100875
========
if(parser.parseInto(new DateTimeParserBucket(0,chrono,iLocale,iPivotYear,iDefaultYear),text,0)>=0){
if(newPos>=text.length()){
return new DateTimeParserBucket(0,chrono,iLocale,iPivotYear,iDefaultYear).computeMillis(true,text);
}
}else {
newPos=~newPos;
}
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847100877
GPR[SPVAP]-1659847100877
GPR[EPVAP]-1659847102156
GPR[EPVS]-1659847102156
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
super();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847102158
GPR[SPVAP]-1659847102158
GPR[EPVAP]-1659847103468
GPR[EPVS]-1659847103468
========
chrono=iChrono;
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847103469
GPR[SPVAP]-1659847103469
GPR[EPVAP]-1659847104756
GPR[EPVS]-1659847104756
========
chrono=iChrono;
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
super();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847104758
GPR[SPVAP]-1659847104758
GPR[EPVAP]-1659847106064
GPR[EPVS]-1659847106064
========
if(instant==null){
throw new IllegalArgumentException("Instant must not be null");
}
instant+=iDefaultYear;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();

========
MM Copying to MM
GPR[SPVS]-1659847106066
GPR[SPVAP]-1659847106066
GPR[EPVAP]-1659847107380
GPR[EPVS]-1659847107380
GPR[ESUN]-1659847107384
GPR[SSUN]-1659847107384
org.joda.time.format.DateTimeFormatter,707
========
chrono=selectChronology(chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847108497
GPR[SPVAP]-1659847108497
GPR[EPVAP]-1659847110869
GPR[EPVS]-1659847110869
========
iZone=DateTimeUtils.getZone(zone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847110872
GPR[SPVAP]-1659847110872
GPR[EPVAP]-1659847113314
GPR[EPVS]-1659847113314
========
long instantMillis=instant.getMillis();
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847113315
GPR[SPVAP]-1659847113315
GPR[EPVAP]-1659847115729
GPR[EPVS]-1659847115729
========
iZone=DateTimeUtils.getZone(newZone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847115731
GPR[SPVAP]-1659847115731
GPR[EPVAP]-1659847118016
GPR[EPVS]-1659847118016
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847118017
GPR[SPVAP]-1659847118017
GPR[EPVAP]-1659847120171
GPR[EPVS]-1659847120171
========
iZone=DateTimeUtils.getZone(newZone);
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847120173
GPR[SPVAP]-1659847120173
GPR[EPVAP]-1659847122262
GPR[EPVS]-1659847122262
========
chrono=chrono.withZone(iZone);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847122264
GPR[SPVAP]-1659847122264
GPR[EPVAP]-1659847124335
GPR[EPVS]-1659847124335
========
if(iZone==DateTimeUtils.getZone(getZone())){
return ;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847124337
GPR[SPVAP]-1659847124337
GPR[EPVAP]-1659847126341
GPR[EPVS]-1659847126341
========
setChronology(getChronology().withZone(iZone));
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847126344
GPR[SPVAP]-1659847126344
GPR[EPVAP]-1659847129721
GPR[EPVS]-1659847129721
========
setMillis(instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847129722
GPR[SPVAP]-1659847129722
GPR[EPVAP]-1659847131708
GPR[EPVS]-1659847131708
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instant+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847131710
GPR[SPVAP]-1659847131710
GPR[EPVAP]-1659847133663
GPR[EPVS]-1659847133663
========
chrono=DateTimeUtils.getChronology(chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847133665
GPR[SPVAP]-1659847133665
GPR[EPVAP]-1659847135875
GPR[EPVS]-1659847135875
========
if(instantLocal==instantMillis){
return 0;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847135877
GPR[SPVAP]-1659847135877
GPR[EPVAP]-1659847137709
GPR[EPVS]-1659847137709
========
int instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847137710
GPR[SPVAP]-1659847137710
GPR[EPVAP]-1659847139513
GPR[EPVS]-1659847139514
========
super();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847139516
GPR[SPVAP]-1659847139516
GPR[EPVAP]-1659847141370
GPR[EPVS]-1659847141370
========
chrono=chrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847141372
GPR[SPVAP]-1659847141372
GPR[EPVAP]-1659847143061
GPR[EPVS]-1659847143061
========
instantLocal=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,chrono),chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847143063
GPR[SPVAP]-1659847143063
GPR[EPVAP]-1659847144724
GPR[EPVS]-1659847144724
========
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847144726
GPR[SPVAP]-1659847144726
GPR[EPVAP]-1659847146381
GPR[EPVS]-1659847146382
========
iChrono=DateTimeUtils.getChronology(chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847146383
GPR[SPVAP]-1659847146383
GPR[EPVAP]-1659847148013
GPR[EPVS]-1659847148013
========
instantLocal=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847148014
GPR[SPVAP]-1659847148014
GPR[EPVAP]-1659847149684
GPR[EPVS]-1659847149684
========
if(chrono.getZone()!=null){
instantMillis=zone.getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847149686
GPR[SPVAP]-1659847149686
GPR[EPVAP]-1659847151312
GPR[EPVS]-1659847151312
========
setTime(instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847151313
GPR[SPVAP]-1659847151313
GPR[EPVAP]-1659847152980
GPR[EPVS]-1659847152980
========
super();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847152982
GPR[SPVAP]-1659847152982
GPR[EPVAP]-1659847154646
GPR[EPVS]-1659847154646
========
super();
iChrono=DateTimeUtils.getChronology(chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847154648
GPR[SPVAP]-1659847154648
GPR[EPVAP]-1659847156284
GPR[EPVS]-1659847156284
========
super();
instantLocal=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847156285
GPR[SPVAP]-1659847156285
GPR[EPVAP]-1659847157992
GPR[EPVS]-1659847157992
========
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847157993
GPR[SPVAP]-1659847157993
GPR[EPVAP]-1659847159644
GPR[EPVS]-1659847159644
========
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
instantLocal=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847159645
GPR[SPVAP]-1659847159645
GPR[EPVAP]-1659847161285
GPR[EPVS]-1659847161285
========
iChrono=DateTimeUtils.getChronology(chronology);
instantLocal=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847161287
GPR[SPVAP]-1659847161287
GPR[EPVAP]-1659847162924
GPR[EPVS]-1659847162924
========
super();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847162926
GPR[SPVAP]-1659847162926
GPR[EPVAP]-1659847164575
GPR[EPVS]-1659847164575
========
super();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
instantLocal=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847164576
GPR[SPVAP]-1659847164576
GPR[EPVAP]-1659847166227
GPR[EPVS]-1659847166227
========
super();
iChrono=DateTimeUtils.getChronology(chronology);
instantLocal=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847166229
GPR[SPVAP]-1659847166229
GPR[EPVAP]-1659847167849
GPR[EPVS]-1659847167849
========
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
instantLocal=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847167851
GPR[SPVAP]-1659847167851
GPR[EPVAP]-1659847169501
GPR[EPVS]-1659847169501
========
super();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
instantLocal=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847169503
GPR[SPVAP]-1659847169503
GPR[EPVAP]-1659847171192
GPR[EPVS]-1659847171192
========
instantLocal=chrono.dayOfMonth().roundFloor(instant);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847171193
GPR[SPVAP]-1659847171193
GPR[EPVAP]-1659847172851
GPR[EPVS]-1659847172851
========
if(instantLocal<instantMillis){
return -1;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847172853
GPR[SPVAP]-1659847172853
GPR[EPVAP]-1659847174522
GPR[EPVS]-1659847174522
========
if(instantLocal>instantMillis){
return 1;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847174523
GPR[SPVAP]-1659847174523
GPR[EPVAP]-1659847176222
GPR[EPVS]-1659847176222
========
instantLocal=iChrono.getZone().getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847176224
GPR[SPVAP]-1659847176224
GPR[EPVAP]-1659847177851
GPR[EPVS]-1659847177851
========
chrono=iChrono.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847177853
GPR[SPVAP]-1659847177853
GPR[EPVAP]-1659847179504
GPR[EPVS]-1659847179505
========
if(instant==null){
return ISOChronology.getInstance();
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847179506
GPR[SPVAP]-1659847179506
GPR[EPVAP]-1659847181199
GPR[EPVS]-1659847181199
========
if(chrono==null){
return ISOChronology.getInstance();
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847181201
GPR[SPVAP]-1659847181201
GPR[EPVAP]-1659847182875
GPR[EPVS]-1659847182876
========
chrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone).withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847182877
GPR[SPVAP]-1659847182877
GPR[EPVAP]-1659847184535
GPR[EPVS]-1659847184535
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847184537
GPR[SPVAP]-1659847184537
GPR[EPVAP]-1659847186177
GPR[EPVS]-1659847186177
========
long instantMillis=instant.getMillis();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847186179
GPR[SPVAP]-1659847186179
GPR[EPVAP]-1659847187840
GPR[EPVS]-1659847187840
========
long instantMillis=instant.getMillis();
iChrono=DateTimeUtils.getChronology(chronology);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847187842
GPR[SPVAP]-1659847187842
GPR[EPVAP]-1659847189483
GPR[EPVS]-1659847189483
========
long instantMillis=instant.getMillis();
chrono=iChrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847189485
GPR[SPVAP]-1659847189485
GPR[EPVAP]-1659847191151
GPR[EPVS]-1659847191151
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847191152
GPR[SPVAP]-1659847191152
GPR[EPVAP]-1659847192794
GPR[EPVS]-1659847192794
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847192796
GPR[SPVAP]-1659847192796
GPR[EPVAP]-1659847194470
GPR[EPVS]-1659847194470
========
iChrono=DateTimeUtils.getChronology(chronology);
chrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone).withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847194472
GPR[SPVAP]-1659847194472
GPR[EPVAP]-1659847196087
GPR[EPVS]-1659847196087
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847196089
GPR[SPVAP]-1659847196089
GPR[EPVAP]-1659847197745
GPR[EPVS]-1659847197745
========
long instantMillis=instant.getMillis();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847197747
GPR[SPVAP]-1659847197747
GPR[EPVAP]-1659847199802
GPR[EPVS]-1659847199802
========
long instantMillis=instant.getMillis();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
chrono=iChrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847199812
GPR[SPVAP]-1659847199812
GPR[EPVAP]-1659847202062
GPR[EPVS]-1659847202062
========
long instantMillis=instant.getMillis();
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847202064
GPR[SPVAP]-1659847202064
GPR[EPVAP]-1659847203727
GPR[EPVS]-1659847203727
========
long instantMillis=instant.getMillis();
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847203729
GPR[SPVAP]-1659847203729
GPR[EPVAP]-1659847205395
GPR[EPVS]-1659847205395
========
instantLocal=chrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847205397
GPR[SPVAP]-1659847205397
GPR[EPVAP]-1659847207023
GPR[EPVS]-1659847207023
========
instantLocal=chrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847207025
GPR[SPVAP]-1659847207025
GPR[EPVAP]-1659847208697
GPR[EPVS]-1659847208697
========
super.setInterval(instantMillis,instantLocal,chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847208699
GPR[SPVAP]-1659847208699
GPR[EPVAP]-1659847210337
GPR[EPVS]-1659847210337
========
long instantMillis=instant.getMillis();
if(instantMillis==toDurationMillis()){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847210339
GPR[SPVAP]-1659847210339
GPR[EPVAP]-1659847212011
GPR[EPVS]-1659847212011
========
iChrono=checkChronology(ConverterManager.getInstance().getInstantConverter(instant).getChronology(instant,iChrono));
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847212013
GPR[SPVAP]-1659847212013
GPR[EPVAP]-1659847213665
GPR[EPVS]-1659847213665
========
instantLocal=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,iChrono),iChrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847213666
GPR[SPVAP]-1659847213666
GPR[EPVAP]-1659847215272
GPR[EPVS]-1659847215272
========
instantMillis=chrono.set(this,instant);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847215274
GPR[SPVAP]-1659847215274
GPR[EPVAP]-1659847216946
GPR[EPVS]-1659847216946
========
iChrono=chronology.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847216947
GPR[SPVAP]-1659847216947
GPR[EPVAP]-1659847218588
GPR[EPVS]-1659847218588
========
instantLocal=iChrono.millisOfDay().get(instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847218589
GPR[SPVAP]-1659847218589
GPR[EPVAP]-1659847220229
GPR[EPVS]-1659847220229
========
chrono=iChrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847220230
GPR[SPVAP]-1659847220230
GPR[EPVAP]-1659847221900
GPR[EPVS]-1659847221900
========
instantLocal=iChrono.dayOfMonth().roundFloor(instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847221902
GPR[SPVAP]-1659847221902
GPR[EPVAP]-1659847223504
GPR[EPVS]-1659847223504
========
iChrono=DateTimeUtils.getChronology(chronology);
iChrono=chronology.withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847223505
GPR[SPVAP]-1659847223505
GPR[EPVAP]-1659847225139
GPR[EPVS]-1659847225139
========
iChrono=DateTimeUtils.getChronology(chronology);
chrono=iChrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847225140
GPR[SPVAP]-1659847225140
GPR[EPVAP]-1659847226837
GPR[EPVS]-1659847226837
========
iChrono=chronology.withUTC();
chrono=iChrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847226838
GPR[SPVAP]-1659847226838
GPR[EPVAP]-1659847228484
GPR[EPVS]-1659847228484
========
iChrono=DateTimeUtils.getChronology(chronology);
iChrono=chronology.withUTC();
chrono=iChrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847228486
GPR[SPVAP]-1659847228486
GPR[EPVAP]-1659847230138
GPR[EPVS]-1659847230138
========
setPeriod(instantMillis,chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847230139
GPR[SPVAP]-1659847230139
GPR[EPVAP]-1659847231750
GPR[EPVS]-1659847231750
========
instantLocal=ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,ISOChronology.getInstanceUTC());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847231752
GPR[SPVAP]-1659847231752
GPR[EPVAP]-1659847233440
GPR[EPVS]-1659847233440
========
if(iDefaultYear==0){
return this;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847233442
GPR[SPVAP]-1659847233442
GPR[EPVAP]-1659847235085
GPR[EPVS]-1659847235085
========
long instantMillis=iFieldType.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847235087
GPR[SPVAP]-1659847235087
GPR[EPVAP]-1659847236682
GPR[EPVS]-1659847236682
========
setDate(instantMillis);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847236684
GPR[SPVAP]-1659847236684
GPR[EPVAP]-1659847238334
GPR[EPVS]-1659847238334
========
super();
chrono=chrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847238336
GPR[SPVAP]-1659847238336
GPR[EPVAP]-1659847239979
GPR[EPVS]-1659847239979
========
if(text!=null){
return name;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847239981
GPR[SPVAP]-1659847239981
GPR[EPVAP]-1659847241645
GPR[EPVS]-1659847241645
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=millis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847241648
GPR[SPVAP]-1659847241648
GPR[EPVAP]-1659847243279
GPR[EPVS]-1659847243279
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
boolean instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847243280
GPR[SPVAP]-1659847243280
GPR[EPVAP]-1659847244866
GPR[EPVS]-1659847244866
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
new StringBuffer().append("PT");
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847244867
GPR[SPVAP]-1659847244867
GPR[EPVAP]-1659847251882
GPR[SPVATF]-1659847251882
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847254450
GPR[EPVS]-1659847254450
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
int instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847254452
GPR[SPVAP]-1659847254452
GPR[EPVAP]-1659847255756
GPR[EPVS]-1659847255756
========
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847255759
GPR[SPVAP]-1659847255759
GPR[EPVAP]-1659847257055
GPR[EPVS]-1659847257055
========
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847257056
GPR[SPVAP]-1659847257056
GPR[EPVAP]-1659847258347
GPR[EPVS]-1659847258347
========
super();
chrono=iChrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847258348
GPR[SPVAP]-1659847258348
GPR[EPVAP]-1659847259700
GPR[EPVS]-1659847259700
========
super();
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847259702
GPR[SPVAP]-1659847259702
GPR[EPVAP]-1659847261015
GPR[EPVS]-1659847261015
========
super();
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847261016
GPR[SPVAP]-1659847261016
GPR[EPVAP]-1659847262300
GPR[EPVS]-1659847262300
========
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
chrono=iChrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847262301
GPR[SPVAP]-1659847262301
GPR[EPVAP]-1659847263599
GPR[EPVS]-1659847263599
========
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847263601
GPR[SPVAP]-1659847263601
GPR[EPVAP]-1659847264920
GPR[EPVS]-1659847264920
========
chrono=iChrono;
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847264922
GPR[SPVAP]-1659847264922
GPR[EPVAP]-1659847266201
GPR[EPVS]-1659847266201
========
super();
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
chrono=iChrono;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847266202
GPR[SPVAP]-1659847266202
GPR[EPVAP]-1659847267507
GPR[EPVS]-1659847267507
========
super();
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847267508
GPR[SPVAP]-1659847267508
GPR[EPVAP]-1659847268783
GPR[EPVS]-1659847268783
========
super();
chrono=iChrono;
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847268785
GPR[SPVAP]-1659847268785
GPR[EPVAP]-1659847270086
GPR[EPVS]-1659847270086
========
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
chrono=iChrono;
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847270088
GPR[SPVAP]-1659847270088
GPR[EPVAP]-1659847271398
GPR[EPVS]-1659847271398
========
super();
iChrono=DateTimeUtils.getChronology(chronology).withUTC();
chrono=iChrono;
instantLocal=instant;
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847271400
GPR[SPVAP]-1659847271400
GPR[EPVAP]-1659847272723
GPR[EPVS]-1659847272723
========
super.setInterval(instantMillis,getEndMillis(),getChronology());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847272725
GPR[SPVAP]-1659847272725
GPR[EPVAP]-1659847274942
GPR[EPVS]-1659847274942
========
super.setInterval(getStartMillis(),instantMillis,getChronology());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847274954
GPR[SPVAP]-1659847274954
GPR[EPVAP]-1659847276325
GPR[EPVS]-1659847276325
========
if(iLocale==null){
locale=Locale.getDefault();
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847276328
GPR[SPVAP]-1659847276328
GPR[EPVAP]-1659847277635
GPR[EPVS]-1659847277635
========
Calendar.getInstance(getZone().toTimeZone(),iLocale).setTime(toDate());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847277637
GPR[SPVAP]-1659847277637
GPR[EPVAP]-1659847278951
GPR[EPVS]-1659847278951
========
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847278953
GPR[SPVAP]-1659847278953
GPR[EPVAP]-1659847282302
GPR[SPVATF]-1659847282302
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847284781
GPR[EPVS]-1659847284781
========
if(iDefaultYear==instantLocal&&text.equals(iZone.getNameKey(instantMillis))){
System.out.println("*d* Error in "+iZone.getID());
return false;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847284784
GPR[SPVAP]-1659847284784
GPR[EPVAP]-1659847286087
GPR[EPVS]-1659847286088
========
if(instantLocal!=instantMillis){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847286090
GPR[SPVAP]-1659847286090
GPR[EPVAP]-1659847287407
GPR[EPVS]-1659847287407
========
if(text.equals("UTC")){
return DateTimeZone.UTC;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847287409
GPR[SPVAP]-1659847287409
GPR[EPVAP]-1659847288716
GPR[EPVS]-1659847288716
========
if(iZone!=null){
return zone;
}
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847288717
GPR[SPVAP]-1659847288717
GPR[EPVAP]-1659847289993
GPR[EPVS]-1659847289993
========
setMillis(getChronology().millisOfDay().set(getMillis(),iDefaultYear));
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847289995
GPR[SPVAP]-1659847289995
GPR[EPVAP]-1659847291304
GPR[EPVS]-1659847291304
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
checkYearsAndMonths("Minutes");
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847291306
GPR[SPVAP]-1659847291306
GPR[EPVAP]-1659847292603
GPR[EPVS]-1659847292603
========
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
instantMillis+=((long)getSeconds())*DateTimeConstants.MILLIS_PER_SECOND;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847292604
GPR[SPVAP]-1659847292605
GPR[EPVAP]-1659847293903
GPR[EPVS]-1659847293903
========
iDefaultYear=31*result+((int)(instantMillis^(start>>>32)));
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847293905
GPR[SPVAP]-1659847293905
GPR[EPVAP]-1659847295205
GPR[EPVS]-1659847295205
========
iDefaultYear=31*result+((int)(instantLocal^(end>>>32)));
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847295206
GPR[SPVAP]-1659847295206
GPR[EPVAP]-1659847296509
GPR[EPVS]-1659847296509
========
iDefaultYear=31*result+getChronology().hashCode();
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847296510
GPR[SPVAP]-1659847296510
GPR[EPVAP]-1659847297808
GPR[EPVS]-1659847297808
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getStartMillis());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847297810
GPR[SPVAP]-1659847297810
GPR[EPVAP]-1659847299123
GPR[EPVS]-1659847299123
========
new StringBuffer(48).append('/');
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847299125
GPR[SPVAP]-1659847299125
GPR[EPVAP]-1659847302452
GPR[SPVATF]-1659847302452
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847304950
GPR[EPVS]-1659847304950
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getEndMillis());
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847304952
GPR[SPVAP]-1659847304952
GPR[EPVAP]-1659847306231
GPR[EPVS]-1659847306231
========
chrono=selectChronology(chrono);
long instantMillis=instant.getMillis();
Chronology chrono=instant.getChronology();
long instantLocal=instant+chrono.getZone().getOffset(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847306235
GPR[SPVAP]-1659847306235
GPR[EPVAP]-1659847307537
GPR[EPVS]-1659847307537
GPR[ESUN]-1659847307541
GPR[SSUN]-1659847307541
org.joda.time.format.DateTimeFormatter,708
========
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847308578
GPR[SPVAP]-1659847308578
GPR[EPVAP]-1659847310971
GPR[EPVS]-1659847310971
========
instantLocal=instantLocal;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847310972
GPR[SPVAP]-1659847310972
GPR[EPVAP]-1659847313272
GPR[EPVS]-1659847313272
========
iZone=chrono.getZone();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847313274
GPR[SPVAP]-1659847313274
GPR[EPVAP]-1659847315621
GPR[EPVS]-1659847315621
========
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847315623
GPR[SPVAP]-1659847315623
GPR[EPVAP]-1659847318021
GPR[EPVS]-1659847318022
========
iZone=DateTimeUtils.getZone(zone);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847318023
GPR[SPVAP]-1659847318023
GPR[EPVAP]-1659847320179
GPR[EPVS]-1659847320179
========
if(instant instanceof ReadableDateTime){
ReadableDateTime (ReadableDateTime)instant=(ReadableDateTime)instant;
Chronology chrono=DateTimeUtils.getChronology(rdt.getChronology());
DateTimeZone chrono.getZone()=instantChrono.getZone();
if(zone!=null){
instantLocal=zone.getMillisKeepLocal(getZone(),instantMillis);
}
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847320180
GPR[SPVAP]-1659847320180
GPR[EPVAP]-1659847321519
GPR[EPVS]-1659847321519
========
setValues(chrono.get(this,instantMillis));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847321521
GPR[SPVAP]-1659847321521
GPR[EPVAP]-1659847323573
GPR[EPVS]-1659847323573
========
setValues(chrono.get(this,instantMillis,instantLocal));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847323575
GPR[SPVAP]-1659847323575
GPR[EPVAP]-1659847325669
GPR[EPVS]-1659847325669
========
chrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847325671
GPR[SPVAP]-1659847325671
GPR[EPVAP]-1659847327831
GPR[EPVS]-1659847327832
========
if(instant==null){
return ISOChronology.getInstance();
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847327834
GPR[SPVAP]-1659847327834
GPR[EPVAP]-1659847329839
GPR[EPVS]-1659847329839
========
if(chrono==null){
return ISOChronology.getInstance();
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847329840
GPR[SPVAP]-1659847329840
GPR[EPVAP]-1659847331911
GPR[EPVS]-1659847331911
========
instant=chrono.dayOfMonth().roundFloor(instant);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847331913
GPR[SPVAP]-1659847331913
GPR[EPVAP]-1659847333949
GPR[EPVS]-1659847333949
========
if(iChrono!=null){
chrono=iChrono;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847333951
GPR[SPVAP]-1659847333951
GPR[EPVAP]-1659847336051
GPR[EPVS]-1659847336051
========
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847336053
GPR[SPVAP]-1659847336053
GPR[EPVAP]-1659847337793
GPR[EPVS]-1659847337793
========
super();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847337795
GPR[SPVAP]-1659847337795
GPR[EPVAP]-1659847339584
GPR[EPVS]-1659847339584
========
iChrono=chrono;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847339586
GPR[SPVAP]-1659847339586
GPR[EPVAP]-1659847341453
GPR[EPVS]-1659847341453
========
instantLocal=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,chrono),chrono);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847341454
GPR[SPVAP]-1659847341454
GPR[EPVAP]-1659847343159
GPR[EPVS]-1659847343159
========
setPeriod(instantLocal,chrono);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847343161
GPR[SPVAP]-1659847343161
GPR[EPVAP]-1659847344824
GPR[EPVS]-1659847344824
========
super.setInterval(instantLocal,instantMillis,chrono);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847344826
GPR[SPVAP]-1659847344826
GPR[EPVAP]-1659847347763
GPR[EPVS]-1659847347763
========
Chronology chrono=instant.getChronology();
long instantLocal=instantLocal+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847347765
GPR[SPVAP]-1659847347765
GPR[EPVAP]-1659847349413
GPR[EPVS]-1659847349413
========
if(getOffset(instantMillis-iDefaultYear)==iDefaultYear){
return instantMillis-iDefaultYear;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847349414
GPR[SPVAP]-1659847349414
GPR[EPVAP]-1659847351069
GPR[EPVS]-1659847351069
========
iZone=DateTimeUtils.getZone(newZone);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847351072
GPR[SPVAP]-1659847351072
GPR[EPVAP]-1659847352726
GPR[EPVS]-1659847352726
========
if(iZone==DateTimeUtils.getZone(getZone())){
return ;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847352728
GPR[SPVAP]-1659847352728
GPR[EPVAP]-1659847354387
GPR[EPVS]-1659847354387
========
setChronology(getChronology().withZone(iZone));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847354388
GPR[SPVAP]-1659847354388
GPR[EPVAP]-1659847356061
GPR[EPVS]-1659847356061
========
setMillis(instantLocal);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847356062
GPR[SPVAP]-1659847356062
GPR[EPVAP]-1659847357732
GPR[EPVS]-1659847357732
========
if(instantMillis==toDurationMillis()){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847357734
GPR[SPVAP]-1659847357734
GPR[EPVAP]-1659847359397
GPR[EPVS]-1659847359397
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847359399
GPR[SPVAP]-1659847359399
GPR[EPVAP]-1659847361055
GPR[EPVS]-1659847361055
========
iZone=DateTimeUtils.getZone(newZone);
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847361057
GPR[SPVAP]-1659847361057
GPR[EPVAP]-1659847362703
GPR[EPVS]-1659847362703
========
instant=chrono.set(this,instant);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847362705
GPR[SPVAP]-1659847362705
GPR[EPVAP]-1659847364353
GPR[EPVS]-1659847364353
========
Chronology chrono=iFieldType.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847364355
GPR[SPVAP]-1659847364355
GPR[EPVAP]-1659847365953
GPR[EPVS]-1659847365953
========
super();
iChrono=chrono;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847365955
GPR[SPVAP]-1659847365955
GPR[EPVAP]-1659847367652
GPR[EPVS]-1659847367652
========
if(getChronology()==chrono){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847367655
GPR[SPVAP]-1659847367655
GPR[EPVAP]-1659847369292
GPR[EPVS]-1659847369292
========
instantLocal=chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847369294
GPR[SPVAP]-1659847369294
GPR[EPVAP]-1659847370950
GPR[EPVS]-1659847370950
========
iChrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847370952
GPR[SPVAP]-1659847370952
GPR[EPVAP]-1659847372633
GPR[EPVS]-1659847372633
========
Chronology chrono=instant.getChronology();
int instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847372635
GPR[SPVAP]-1659847372635
GPR[EPVAP]-1659847374279
GPR[EPVS]-1659847374279
========
chrono=DateTimeUtils.getChronology(chronology);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847374281
GPR[SPVAP]-1659847374281
GPR[EPVAP]-1659847375931
GPR[EPVS]-1659847375931
========
super();
iChrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847375933
GPR[SPVAP]-1659847375933
GPR[EPVAP]-1659847377615
GPR[EPVS]-1659847377615
========
super();
chrono=DateTimeUtils.getChronology(chronology);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847377617
GPR[SPVAP]-1659847377617
GPR[EPVAP]-1659847379275
GPR[EPVS]-1659847379275
========
chrono=DateTimeUtils.getChronology(chronology);
iChrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847379276
GPR[SPVAP]-1659847379276
GPR[EPVAP]-1659847380933
GPR[EPVS]-1659847380933
========
super();
chrono=DateTimeUtils.getChronology(chronology);
iChrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847380934
GPR[SPVAP]-1659847380934
GPR[EPVAP]-1659847382583
GPR[EPVS]-1659847382583
========
chrono=newChronology.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847382585
GPR[SPVAP]-1659847382585
GPR[EPVAP]-1659847384209
GPR[EPVS]-1659847384209
========
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847384211
GPR[SPVAP]-1659847384211
GPR[EPVAP]-1659847391122
GPR[SPVATF]-1659847391122
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847393683
GPR[EPVS]-1659847393683
========
if(chrono.getZone()!=null){
instantMillis=zone.getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847393685
GPR[SPVAP]-1659847393685
GPR[EPVAP]-1659847394962
GPR[EPVS]-1659847394962
========
setTime(instantMillis);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847394964
GPR[SPVAP]-1659847394964
GPR[EPVAP]-1659847396272
GPR[EPVS]-1659847396272
========
instantLocal=chrono.monthOfYear().set(millis,iDefaultYear);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847396274
GPR[SPVAP]-1659847396274
GPR[EPVAP]-1659847397580
GPR[EPVS]-1659847397581
========
instantLocal=chrono.millisOfDay().set(millis,iDefaultYear);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847397582
GPR[SPVAP]-1659847397582
GPR[EPVAP]-1659847398886
GPR[EPVS]-1659847398886
========
chrono=chronology.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847398888
GPR[SPVAP]-1659847398888
GPR[EPVAP]-1659847400195
GPR[EPVS]-1659847400195
========
instantLocal=chrono.millisOfDay().get(chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC,instantMillis));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847400196
GPR[SPVAP]-1659847400196
GPR[EPVAP]-1659847401495
GPR[EPVS]-1659847401495
========
instantLocal=chrono.dayOfMonth().roundFloor(chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC,instantMillis));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847401496
GPR[SPVAP]-1659847401496
GPR[EPVAP]-1659847402823
GPR[EPVS]-1659847402823
========
chrono=chronology.withUTC();
iChrono=chrono;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847402825
GPR[SPVAP]-1659847402825
GPR[EPVAP]-1659847404151
GPR[EPVS]-1659847404151
========
if(chrono==getChronology()){
return this;
}else {
YearMonthDay new YearMonthDay(this,chrono)=new YearMonthDay(this,newChronology);
newChronology.validate(newYearMonthDay,getValues());
return newYearMonthDay;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847404153
GPR[SPVAP]-1659847404153
GPR[EPVAP]-1659847405281
GPR[EPVS]-1659847405281
========
if(chrono==getChronology()){
return this;
}else {
TimeOfDay new TimeOfDay(this,chrono)=new TimeOfDay(this,newChronology);
newChronology.validate(newTimeOfDay,getValues());
return newTimeOfDay;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847405282
GPR[SPVAP]-1659847405282
GPR[EPVAP]-1659847406414
GPR[EPVS]-1659847406414
========
if(chrono==getChronology()){
return this;
}else {
MonthDay new MonthDay(this,chrono)=new MonthDay(this,newChronology);
newChronology.validate(newMonthDay,getValues());
return newMonthDay;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847406416
GPR[SPVAP]-1659847406416
GPR[EPVAP]-1659847407546
GPR[EPVS]-1659847407546
========
if(chrono==getChronology()){
return this;
}else {
YearMonth new YearMonth(this,chrono)=new YearMonth(this,newChronology);
newChronology.validate(newYearMonth,getValues());
return newYearMonth;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847407548
GPR[SPVAP]-1659847407548
GPR[EPVAP]-1659847408678
GPR[EPVS]-1659847408678
========
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
iChrono=DateTimeUtils.getChronology(chronology);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847408679
GPR[SPVAP]-1659847408679
GPR[EPVAP]-1659847409993
GPR[EPVS]-1659847409993
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847409995
GPR[SPVAP]-1659847409995
GPR[EPVAP]-1659847411293
GPR[EPVS]-1659847411293
========
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847411294
GPR[SPVAP]-1659847411294
GPR[EPVAP]-1659847412615
GPR[EPVS]-1659847412616
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847412617
GPR[SPVAP]-1659847412617
GPR[EPVAP]-1659847413930
GPR[EPVS]-1659847413931
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847413932
GPR[SPVAP]-1659847413932
GPR[EPVAP]-1659847415221
GPR[EPVS]-1659847415221
========
instantLocal=chrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847415223
GPR[SPVAP]-1659847415223
GPR[EPVAP]-1659847416533
GPR[EPVS]-1659847416533
========
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,chronology);
iChrono=DateTimeUtils.getChronology(chronology);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847416535
GPR[SPVAP]-1659847416535
GPR[EPVAP]-1659847418719
GPR[EPVS]-1659847418719
========
instantLocal=chrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847418731
GPR[SPVAP]-1659847418731
GPR[EPVAP]-1659847420237
GPR[EPVS]-1659847420237
========
instantLocal=chrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,iChrono,ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847420239
GPR[SPVAP]-1659847420239
GPR[EPVAP]-1659847421543
GPR[EPVS]-1659847421543
========
instantLocal=chrono.millisOfDay().set(next,0);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847421545
GPR[SPVAP]-1659847421545
GPR[EPVAP]-1659847422834
GPR[EPVS]-1659847422834
========
instantLocal=chrono.millisOfDay().add(next,iDefaultYear);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847422835
GPR[SPVAP]-1659847422835
GPR[EPVAP]-1659847424119
GPR[EPVS]-1659847424119
========
instantLocal=setDayOfMonthNext(chrono,next);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847424120
GPR[SPVAP]-1659847424120
GPR[EPVAP]-1659847425435
GPR[EPVS]-1659847425435
========
instantLocal=chrono.millisOfDay().set(prev,0);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847425437
GPR[SPVAP]-1659847425437
GPR[EPVAP]-1659847426771
GPR[EPVS]-1659847426771
========
instantLocal=chrono.millisOfDay().add(prev,iDefaultYear);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847426772
GPR[SPVAP]-1659847426772
GPR[EPVAP]-1659847428051
GPR[EPVS]-1659847428051
========
instantLocal=setDayOfMonthPrevious(chrono,prev);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847428052
GPR[SPVAP]-1659847428052
GPR[EPVAP]-1659847429352
GPR[EPVS]-1659847429352
========
Chronology chrono=instant.getChronology();
long instantLocal=instantUTC+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847429354
GPR[SPVAP]-1659847429354
GPR[EPVAP]-1659847430664
GPR[EPVS]-1659847430664
========
if((instantMillis^instantLocal)<0&&(instantUTC^getOffset(instantMillis))>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847430665
GPR[SPVAP]-1659847430665
GPR[EPVAP]-1659847431944
GPR[EPVS]-1659847431944
========
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=checkChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847431946
GPR[SPVAP]-1659847431946
GPR[EPVAP]-1659847433247
GPR[EPVS]-1659847433247
========
instantLocal=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,iChrono),chrono);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847433249
GPR[SPVAP]-1659847433249
GPR[EPVAP]-1659847434547
GPR[EPVS]-1659847434547
========
setDate(instantLocal);
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847434549
GPR[SPVAP]-1659847434549
GPR[EPVAP]-1659847435851
GPR[EPVS]-1659847435851
========
iChrono=chrono.withUTC();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847435855
GPR[SPVAP]-1659847435855
GPR[EPVAP]-1659847437167
GPR[EPVS]-1659847437167
========
if(text!=null){
return name;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847437169
GPR[SPVAP]-1659847437169
GPR[EPVAP]-1659847438485
GPR[EPVS]-1659847438485
========
instantLocal=instant;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847438487
GPR[SPVAP]-1659847438487
GPR[EPVAP]-1659847439773
GPR[EPVS]-1659847439773
========
iChrono=chrono;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847439775
GPR[SPVAP]-1659847439775
GPR[EPVAP]-1659847441067
GPR[EPVS]-1659847441067
========
instantLocal=instant;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847441069
GPR[SPVAP]-1659847441069
GPR[EPVAP]-1659847442349
GPR[EPVS]-1659847442349
========
iChrono=chrono;
instantLocal=instant;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847442350
GPR[SPVAP]-1659847442350
GPR[EPVAP]-1659847443651
GPR[EPVS]-1659847443651
========
iChrono=chrono;
instantLocal=instant;
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847443653
GPR[SPVAP]-1659847443653
GPR[EPVAP]-1659847444984
GPR[EPVS]-1659847444984
========
Chronology chrono=instant.getChronology();
long instantLocal=instant+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847444986
GPR[SPVAP]-1659847444986
GPR[EPVAP]-1659847446297
GPR[EPVS]-1659847446297
========
if((instantMillis^instantLocal)<0&&(instant^this.iZone.getOffset(instantMillis))>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847446298
GPR[SPVAP]-1659847446298
GPR[EPVAP]-1659847447575
GPR[EPVS]-1659847447575
========
super.setInterval(instantLocal,getEndMillis(),getChronology());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847447577
GPR[SPVAP]-1659847447577
GPR[EPVAP]-1659847448877
GPR[EPVS]-1659847448877
========
super.setInterval(getStartMillis(),instantLocal,getChronology());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847448879
GPR[SPVAP]-1659847448879
GPR[EPVAP]-1659847450187
GPR[EPVS]-1659847450187
========
if(iLocale==null){
locale=Locale.getDefault();
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847450190
GPR[SPVAP]-1659847450190
GPR[EPVAP]-1659847451476
GPR[EPVS]-1659847451477
========
Calendar.getInstance(getZone().toTimeZone(),iLocale).setTime(toDate());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847451478
GPR[SPVAP]-1659847451478
GPR[EPVAP]-1659847452759
GPR[EPVS]-1659847452759
========
if(iDefaultYear==iZone.getOffset(instantMillis)&&text.equals(iZone.getNameKey(instantMillis))){
System.out.println("*d* Error in "+iZone.getID());
return false;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847452761
GPR[SPVAP]-1659847452761
GPR[EPVAP]-1659847454075
GPR[EPVS]-1659847454075
========
if(text.equals("UTC")){
return DateTimeZone.UTC;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847454077
GPR[SPVAP]-1659847454077
GPR[EPVAP]-1659847455381
GPR[EPVS]-1659847455381
========
if(iZone!=null){
return zone;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847455382
GPR[SPVAP]-1659847455382
GPR[EPVAP]-1659847456679
GPR[EPVS]-1659847456679
========
if(instantLocal!=instantMillis){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847456680
GPR[SPVAP]-1659847456680
GPR[EPVAP]-1659847457982
GPR[EPVS]-1659847457982
========
instantLocal=ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,ISOChronology.getInstanceUTC());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847457984
GPR[SPVAP]-1659847457984
GPR[EPVAP]-1659847459300
GPR[EPVS]-1659847459300
========
iDefaultYear=31*result+((int)(instantLocal^(start>>>32)));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847459302
GPR[SPVAP]-1659847459302
GPR[EPVAP]-1659847460603
GPR[EPVS]-1659847460603
========
iDefaultYear=31*result+((int)(getEndMillis()^(end>>>32)));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847460605
GPR[SPVAP]-1659847460605
GPR[EPVAP]-1659847461888
GPR[EPVS]-1659847461888
========
iDefaultYear=31*result+getChronology().hashCode();
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847461890
GPR[SPVAP]-1659847461890
GPR[EPVAP]-1659847463190
GPR[EPVS]-1659847463190
========
if(iDefaultYear==0){
return this;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847463192
GPR[SPVAP]-1659847463192
GPR[EPVAP]-1659847464461
GPR[EPVS]-1659847464461
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getStartMillis());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847464462
GPR[SPVAP]-1659847464462
GPR[EPVAP]-1659847465747
GPR[EPVS]-1659847465747
========
new StringBuffer(48).append('/');
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847465749
GPR[SPVAP]-1659847465749
GPR[EPVAP]-1659847469109
GPR[SPVATF]-1659847469109
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847471633
GPR[EPVS]-1659847471633
========
ISODateTimeFormat.dateTime().printTo(new StringBuffer(48),getEndMillis());
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847471635
GPR[SPVAP]-1659847471635
GPR[EPVAP]-1659847472949
GPR[EPVS]-1659847472949
========
if(nextTransition(instantLocal-iDefaultYear)==(instantLocal-iDefaultYear)){
nextLocal=Long.MAX_VALUE;
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847472953
GPR[SPVAP]-1659847472953
GPR[EPVAP]-1659847474266
GPR[EPVS]-1659847474267
========
setMillis(getChronology().millisOfDay().set(getMillis(),ISOChronology.getInstanceUTC().millisOfDay().get(instantMillis)));
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847474269
GPR[SPVAP]-1659847474269
GPR[EPVAP]-1659847475574
GPR[EPVS]-1659847475574
========
if((instantLocal^instantLocal)<0&&(instantLocal^iDefaultYear)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
Chronology chrono=instant.getChronology();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847475576
GPR[SPVAP]-1659847475576
GPR[EPVAP]-1659847476882
GPR[EPVS]-1659847476882
========
if((instantMillis^instantLocal)<0&&(instant^this.iZone.getOffset(instantMillis))>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
Chronology chrono=instant.getChronology();
long instantLocal=instant+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);

========
MM Copying to MM
GPR[SPVS]-1659847476885
GPR[SPVAP]-1659847476885
GPR[EPVAP]-1659847478196
GPR[EPVS]-1659847478196
GPR[ESUN]-1659847478198
GPR[SSUN]-1659847478198
org.joda.time.format.DateTimeFormatter,709
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847479402
GPR[SPVAP]-1659847479402
GPR[EPVAP]-1659847481729
GPR[EPVS]-1659847481730
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847481731
GPR[SPVAP]-1659847481732
GPR[EPVAP]-1659847484195
GPR[EPVS]-1659847484195
========
defaultYear=instantLocal;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847484196
GPR[SPVAP]-1659847484196
GPR[EPVAP]-1659847486505
GPR[EPVS]-1659847486505
========
iZone=chrono.getZone();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847486506
GPR[SPVAP]-1659847486506
GPR[EPVAP]-1659847488923
GPR[EPVS]-1659847488923
========
setValues(chrono.get(this,instantLocal));
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847488926
GPR[SPVAP]-1659847488926
GPR[EPVAP]-1659847492368
GPR[EPVS]-1659847492368
========
setValues(chrono.get(this,instantLocal,instantMillis));
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847492370
GPR[SPVAP]-1659847492370
GPR[EPVAP]-1659847494481
GPR[EPVS]-1659847494481
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
iZone=DateTimeUtils.getZone(zone);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847494482
GPR[SPVAP]-1659847494482
GPR[EPVAP]-1659847496615
GPR[EPVS]-1659847496615
========
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847496617
GPR[SPVAP]-1659847496617
GPR[EPVAP]-1659847498705
GPR[EPVS]-1659847498705
========
long instantLocal=instantLocal+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847498708
GPR[SPVAP]-1659847498708
GPR[EPVAP]-1659847500799
GPR[EPVS]-1659847500799
========
if(defaultYear==iDefaultYear){
return instantLocal;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847500800
GPR[SPVAP]-1659847500800
GPR[EPVAP]-1659847502844
GPR[EPVS]-1659847502844
========
defaultYear=chrono.get(this,instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847502846
GPR[SPVAP]-1659847502846
GPR[EPVAP]-1659847504788
GPR[EPVS]-1659847504788
========
instant.setChronology(chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847504789
GPR[SPVAP]-1659847504789
GPR[EPVAP]-1659847512277
GPR[SPVATF]-1659847512277
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847514841
GPR[EPVS]-1659847514841
========
defaultYear=chrono.get(this,instantLocal,instantMillis);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847514843
GPR[SPVAP]-1659847514843
GPR[EPVAP]-1659847516143
GPR[EPVS]-1659847516143
========
setPeriod(instantLocal,chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847516145
GPR[SPVAP]-1659847516145
GPR[EPVAP]-1659847517461
GPR[EPVS]-1659847517461
========
defaultYear=chrono.get(this,instantLocal,instantMillis);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847517463
GPR[SPVAP]-1659847517463
GPR[EPVAP]-1659847518779
GPR[EPVS]-1659847518779
========
defaultYear=chrono.get(this,instantMillis,FieldUtils.safeAdd(instantMillis,instantLocal));
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847518781
GPR[SPVAP]-1659847518781
GPR[EPVAP]-1659847520059
GPR[EPVS]-1659847520059
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().getChronology(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847520061
GPR[SPVAP]-1659847520061
GPR[EPVAP]-1659847521419
GPR[EPVS]-1659847521419
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(iDefaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847521421
GPR[SPVAP]-1659847521421
GPR[EPVAP]-1659847524793
GPR[SPVATF]-1659847524793
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847527333
GPR[EPVS]-1659847527333
========
setDate(instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847527335
GPR[SPVAP]-1659847527335
GPR[EPVAP]-1659847528604
GPR[EPVS]-1659847528604
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
iZone=DateTimeUtils.getZone(newZone);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847528606
GPR[SPVAP]-1659847528606
GPR[EPVAP]-1659847529918
GPR[EPVS]-1659847529918
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847529920
GPR[SPVAP]-1659847529920
GPR[EPVAP]-1659847531208
GPR[EPVS]-1659847531209
========
if(iZone==DateTimeUtils.getZone(getZone())){
return this;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
iZone=DateTimeUtils.getZone(newZone);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847531210
GPR[SPVAP]-1659847531210
GPR[EPVAP]-1659847532519
GPR[EPVS]-1659847532519
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
super();
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847532521
GPR[SPVAP]-1659847532521
GPR[EPVAP]-1659847533815
GPR[EPVS]-1659847533815
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847533817
GPR[SPVAP]-1659847533817
GPR[EPVAP]-1659847535145
GPR[EPVS]-1659847535145
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
super();
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847535147
GPR[SPVAP]-1659847535147
GPR[EPVAP]-1659847536456
GPR[EPVS]-1659847536456
========
chrono=chrono.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847536458
GPR[SPVAP]-1659847536458
GPR[EPVAP]-1659847539839
GPR[SPVATF]-1659847539839
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847542340
GPR[EPVS]-1659847542340
========
instant=chrono.dayOfMonth().roundFloor(instant);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847542342
GPR[SPVAP]-1659847542342
GPR[EPVAP]-1659847543632
GPR[EPVS]-1659847543632
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(text);

========
MM Copying to MM
GPR[SPVS]-1659847543635
GPR[SPVAP]-1659847543635
GPR[EPVAP]-1659847544953
GPR[EPVS]-1659847544953
========
int instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847544955
GPR[SPVAP]-1659847544955
GPR[EPVAP]-1659847546285
GPR[EPVS]-1659847546285
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(iLocale);

========
MM Copying to MM
GPR[SPVS]-1659847546287
GPR[SPVAP]-1659847546287
GPR[EPVAP]-1659847547599
GPR[EPVS]-1659847547600
========
super.setInterval(instantLocal,instantMillis,chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847547601
GPR[SPVAP]-1659847547601
GPR[EPVAP]-1659847548895
GPR[EPVS]-1659847548895
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(instant==null){
return ISOChronology.getInstance();
}
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847548897
GPR[SPVAP]-1659847548897
GPR[EPVAP]-1659847550206
GPR[EPVS]-1659847550206
========
if(chrono==null){
return ISOChronology.getInstance();
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847550207
GPR[SPVAP]-1659847550207
GPR[EPVAP]-1659847551508
GPR[EPVS]-1659847551508
========
if(iZone==DateTimeUtils.getZone(getZone())){
return ;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847551510
GPR[SPVAP]-1659847551510
GPR[EPVAP]-1659847552805
GPR[EPVS]-1659847552805
========
setChronology(getChronology().withZone(iZone));
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847552807
GPR[SPVAP]-1659847552807
GPR[EPVAP]-1659847554105
GPR[EPVS]-1659847554105
========
setMillis(instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847554107
GPR[SPVAP]-1659847554107
GPR[EPVAP]-1659847555397
GPR[EPVS]-1659847555397
========
instantLocal=chrono.set(this,instant);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847555398
GPR[SPVAP]-1659847555398
GPR[EPVAP]-1659847556701
GPR[EPVS]-1659847556701
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=iBase.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847556703
GPR[SPVAP]-1659847556703
GPR[EPVAP]-1659847558003
GPR[EPVS]-1659847558003
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().convertUTCToLocal(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847558004
GPR[SPVAP]-1659847558004
GPR[EPVAP]-1659847559348
GPR[EPVS]-1659847559348
========
super.setInterval(instantLocal,instantMillis,chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847559349
GPR[SPVAP]-1659847559349
GPR[EPVAP]-1659847560671
GPR[EPVS]-1659847560672
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847560673
GPR[SPVAP]-1659847560673
GPR[EPVAP]-1659847566189
GPR[SPVATF]-1659847566189
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847568763
GPR[EPVS]-1659847568763
========
if(chrono.getZone()!=null){
instantLocal=zone.getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847568765
GPR[SPVAP]-1659847568765
GPR[EPVAP]-1659847570049
GPR[EPVS]-1659847570049
========
setTime(instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847570051
GPR[SPVAP]-1659847570051
GPR[EPVAP]-1659847571329
GPR[EPVS]-1659847571329
========
instantLocal=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,chrono),chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847571332
GPR[SPVAP]-1659847571332
GPR[EPVAP]-1659847572627
GPR[EPVS]-1659847572627
========
if(instantMillis==toDurationMillis()){
return this;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847572629
GPR[SPVAP]-1659847572629
GPR[EPVAP]-1659847573965
GPR[EPVS]-1659847573965
========
long instantLocal=instantUTC+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847573967
GPR[SPVAP]-1659847573967
GPR[EPVAP]-1659847575260
GPR[EPVS]-1659847575260
========
if((instantMillis^instantLocal)<0&&(instantUTC^defaultYear)>=0){
throw new ArithmeticException("Adding time zone offset caused overflow");
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847575262
GPR[SPVAP]-1659847575262
GPR[EPVAP]-1659847576571
GPR[EPVS]-1659847576571
========
if(instantMillis==toDurationMillis()){
return this;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847576573
GPR[SPVAP]-1659847576573
GPR[EPVAP]-1659847577881
GPR[EPVS]-1659847577881
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chronology.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847577882
GPR[SPVAP]-1659847577883
GPR[EPVAP]-1659847579156
GPR[EPVS]-1659847579156
========
chrono=chronology.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847579158
GPR[SPVAP]-1659847579158
GPR[EPVAP]-1659847580441
GPR[EPVS]-1659847580441
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847580442
GPR[SPVAP]-1659847580442
GPR[EPVAP]-1659847581768
GPR[EPVS]-1659847581768
========
setMillis(instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847581770
GPR[SPVAP]-1659847581770
GPR[EPVAP]-1659847583052
GPR[EPVS]-1659847583052
========
if(iChrono!=null){
chrono=iChrono;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847583054
GPR[SPVAP]-1659847583054
GPR[EPVAP]-1659847586422
GPR[SPVATF]-1659847586422
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847588950
GPR[EPVS]-1659847588950
========
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847588951
GPR[SPVAP]-1659847588951
GPR[EPVAP]-1659847592318
GPR[SPVATF]-1659847592318
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847594842
GPR[EPVS]-1659847594842
========
if(iChrono!=null){
chrono=iChrono;
}
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847594843
GPR[SPVAP]-1659847594843
GPR[EPVAP]-1659847598143
GPR[SPVATF]-1659847598143
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847600700
GPR[EPVS]-1659847600700
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(instant==null){
throw new IllegalArgumentException("The instant must not be null");
}
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847600702
GPR[SPVAP]-1659847600702
GPR[EPVAP]-1659847604062
GPR[SPVATF]-1659847604062
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847606581
GPR[EPVS]-1659847606581
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().getFieldType(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847606583
GPR[SPVAP]-1659847606583
GPR[EPVAP]-1659847607863
GPR[EPVS]-1659847607863
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(iZone);

========
MM Copying to MM
GPR[SPVS]-1659847607866
GPR[SPVAP]-1659847607866
GPR[EPVAP]-1659847609184
GPR[EPVS]-1659847609184
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(Calendar.ERA);

========
MM Copying to MM
GPR[SPVS]-1659847609186
GPR[SPVAP]-1659847609186
GPR[EPVAP]-1659847610481
GPR[EPVS]-1659847610481
========
if(getWrappedField().get(instantLocal)<=0){
year=1-year;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847610485
GPR[SPVAP]-1659847610485
GPR[EPVAP]-1659847611771
GPR[EPVS]-1659847611771
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(zone.iRules);

========
MM Copying to MM
GPR[SPVS]-1659847611773
GPR[SPVAP]-1659847611773
GPR[EPVAP]-1659847613106
GPR[EPVS]-1659847613106
========
if(iPivotYear!=null){
return era.intValue();
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847613107
GPR[SPVAP]-1659847613107
GPR[EPVAP]-1659847614406
GPR[EPVS]-1659847614406
========
if(iPivotYear!=null){
return month.intValue();
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847614408
GPR[SPVAP]-1659847614408
GPR[EPVAP]-1659847615700
GPR[EPVS]-1659847615700
========
if(iPivotYear!=null){
return day.intValue();
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847615701
GPR[SPVAP]-1659847615701
GPR[EPVAP]-1659847617007
GPR[EPVS]-1659847617007
========
defaultYear=chrono.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847617008
GPR[SPVAP]-1659847617008
GPR[EPVAP]-1659847618326
GPR[EPVS]-1659847618326
========
instantLocal=chrono.getZone().getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847618328
GPR[SPVAP]-1659847618328
GPR[EPVAP]-1659847619620
GPR[EPVS]-1659847619620
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chronology.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847619622
GPR[SPVAP]-1659847619622
GPR[EPVAP]-1659847620927
GPR[EPVS]-1659847620927
========
defaultYear=chrono.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chronology.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847620928
GPR[SPVAP]-1659847620928
GPR[EPVAP]-1659847622241
GPR[EPVS]-1659847622241
========
defaultYear=chrono.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847622243
GPR[SPVAP]-1659847622243
GPR[EPVAP]-1659847623550
GPR[EPVS]-1659847623550
========
defaultYear=chrono.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chronology.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847623551
GPR[SPVAP]-1659847623551
GPR[EPVAP]-1659847624857
GPR[EPVS]-1659847624857
========
if(getWrappedField().get(instantLocal)==0){
value=getMaximumValue();
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847624859
GPR[SPVAP]-1659847624859
GPR[EPVAP]-1659847626141
GPR[EPVS]-1659847626141
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(iDefaultYear==0){
return instant;
}
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847626142
GPR[SPVAP]-1659847626142
GPR[EPVAP]-1659847627421
GPR[EPVS]-1659847627421
========
if(text!=null){
return name;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847627423
GPR[SPVAP]-1659847627423
GPR[EPVAP]-1659847628706
GPR[EPVS]-1659847628706
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instant);

========
MM Copying to MM
GPR[SPVS]-1659847628708
GPR[SPVAP]-1659847628708
GPR[EPVAP]-1659847629979
GPR[EPVS]-1659847629979
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(r.iName);

========
MM Copying to MM
GPR[SPVS]-1659847629981
GPR[SPVAP]-1659847629981
GPR[EPVAP]-1659847631289
GPR[EPVS]-1659847631289
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(new PeriodType(null,type.iTypes,null));

========
MM Copying to MM
GPR[SPVS]-1659847631291
GPR[SPVAP]-1659847631291
GPR[EPVAP]-1659847632593
GPR[EPVS]-1659847632593
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(iLocale==null){
locale=Locale.getDefault();
}
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847632596
GPR[SPVAP]-1659847632596
GPR[EPVAP]-1659847633901
GPR[EPVS]-1659847633901
========
Calendar.getInstance(getZone().toTimeZone(),iLocale).setTime(toDate());
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847633903
GPR[SPVAP]-1659847633903
GPR[EPVAP]-1659847635224
GPR[EPVS]-1659847635224
========
chrono=chronology.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chronology.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847635225
GPR[SPVAP]-1659847635225
GPR[EPVAP]-1659847636855
GPR[EPVS]-1659847636855
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chronology.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847636865
GPR[SPVAP]-1659847636865
GPR[EPVAP]-1659847638771
GPR[EPVS]-1659847638771
========
chrono=chronology.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847638772
GPR[SPVAP]-1659847638772
GPR[EPVAP]-1659847640072
GPR[EPVS]-1659847640072
========
chrono=chronology.withUTC();
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847640073
GPR[SPVAP]-1659847640073
GPR[EPVAP]-1659847641373
GPR[EPVS]-1659847641373
========
chrono=chronology.withUTC();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chronology.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847641374
GPR[SPVAP]-1659847641374
GPR[EPVAP]-1659847642660
GPR[EPVS]-1659847642660
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chronology.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847642662
GPR[SPVAP]-1659847642662
GPR[EPVAP]-1659847643991
GPR[EPVS]-1659847643991
========
chrono=chronology.withUTC();
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chronology.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847643992
GPR[SPVAP]-1659847643992
GPR[EPVAP]-1659847645287
GPR[EPVS]-1659847645287
========
chrono=chronology.withUTC();
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847645289
GPR[SPVAP]-1659847645289
GPR[EPVAP]-1659847646609
GPR[EPVS]-1659847646609
========
chrono=chronology.withUTC();
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chronology.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847646610
GPR[SPVAP]-1659847646610
GPR[EPVAP]-1659847647929
GPR[EPVS]-1659847647929
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().roundCeiling(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847647930
GPR[SPVAP]-1659847647930
GPR[EPVAP]-1659847649233
GPR[EPVS]-1659847649233
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
defaultYear=PeriodType.standard();
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847649235
GPR[SPVAP]-1659847649235
GPR[EPVAP]-1659847650543
GPR[EPVS]-1659847650543
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().getNameKey(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847650545
GPR[SPVAP]-1659847650545
GPR[EPVAP]-1659847651853
GPR[EPVS]-1659847651853
========
if(iDefaultYear==defaultYear&&text.equals(iZone.getNameKey(instantMillis))){
System.out.println("*d* Error in "+iZone.getID());
return false;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847651854
GPR[SPVAP]-1659847651854
GPR[EPVAP]-1659847653163
GPR[EPVS]-1659847653163
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().nextTransition(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847653165
GPR[SPVAP]-1659847653165
GPR[EPVAP]-1659847654473
GPR[EPVS]-1659847654473
========
if(instantLocal==(instantLocal-iDefaultYear)){
nextLocal=Long.MAX_VALUE;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847654474
GPR[SPVAP]-1659847654474
GPR[EPVAP]-1659847655787
GPR[EPVS]-1659847655787
========
instant=monthOfYear().set(instant,iDefaultYear);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847655789
GPR[SPVAP]-1659847655789
GPR[EPVAP]-1659847657100
GPR[EPVS]-1659847657100
========
instant=dayOfMonth().set(instant,iDefaultYear);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847657102
GPR[SPVAP]-1659847657102
GPR[EPVAP]-1659847658421
GPR[EPVS]-1659847658421
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().nextTransition(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847658422
GPR[SPVAP]-1659847658422
GPR[EPVAP]-1659847659730
GPR[EPVS]-1659847659730
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(text.equals("UTC")){
return DateTimeZone.UTC;
}
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847659732
GPR[SPVAP]-1659847659732
GPR[EPVAP]-1659847661040
GPR[EPVS]-1659847661041
========
if(iZone!=null){
return zone;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847661042
GPR[SPVAP]-1659847661042
GPR[EPVAP]-1659847662391
GPR[EPVS]-1659847662391
========
if(getWrappedField().get(instantLocal)>=0){
return value/iDefaultYear;
}else {
return ((value+1)/iDivisor)-1;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847662393
GPR[SPVAP]-1659847662393
GPR[EPVAP]-1659847663681
GPR[EPVS]-1659847663681
========
if(getWrappedField().get(instantLocal)>=0){
return value%iDefaultYear;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847663683
GPR[SPVAP]-1659847663683
GPR[EPVAP]-1659847665015
GPR[EPVS]-1659847665015
========
instant=hourOfDay().set(instant,iDefaultYear);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847665017
GPR[SPVAP]-1659847665017
GPR[EPVAP]-1659847666304
GPR[EPVS]-1659847666304
========
instant=minuteOfHour().set(instant,iDefaultYear);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847666305
GPR[SPVAP]-1659847666305
GPR[EPVAP]-1659847667684
GPR[EPVS]-1659847667684
========
instant=secondOfMinute().set(instant,iDefaultYear);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847667685
GPR[SPVAP]-1659847667685
GPR[EPVAP]-1659847668999
GPR[EPVS]-1659847668999
========
instant=monthOfYear().set(instant,iDefaultYear);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847669000
GPR[SPVAP]-1659847669000
GPR[EPVAP]-1659847670309
GPR[EPVS]-1659847670309
========
instant=dayOfMonth().set(instant,iDefaultYear);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847670311
GPR[SPVAP]-1659847670311
GPR[EPVAP]-1659847671615
GPR[EPVS]-1659847671615
========
instant=monthOfYear().set(instant,iDefaultYear);
instant=dayOfMonth().set(instant,iDefaultYear);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847671617
GPR[SPVAP]-1659847671617
GPR[EPVAP]-1659847672939
GPR[EPVS]-1659847672939
========
instant=monthOfYear().set(instant,iDefaultYear);
instant=dayOfMonth().set(instant,iDefaultYear);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847672940
GPR[SPVAP]-1659847672940
GPR[EPVAP]-1659847674253
GPR[EPVS]-1659847674253
========
if((instantLocal^instantLocal)<0&&(instantLocal^iDefaultYear)<0){
throw new ArithmeticException("Subtracting time zone offset caused overflow");
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847674255
GPR[SPVAP]-1659847674255
GPR[EPVAP]-1659847675562
GPR[EPVS]-1659847675562
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().previousTransition(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847675563
GPR[SPVAP]-1659847675563
GPR[EPVAP]-1659847676868
GPR[EPVS]-1659847676868
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
if(text==null){
return null;
}
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847676870
GPR[SPVAP]-1659847676870
GPR[EPVAP]-1659847678177
GPR[EPVS]-1659847678177
========
setDate(instantLocal);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847678179
GPR[SPVAP]-1659847678179
GPR[EPVAP]-1659847679504
GPR[EPVS]-1659847679504
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantMillis);

========
MM Copying to MM
GPR[SPVS]-1659847679506
GPR[SPVAP]-1659847679506
GPR[EPVAP]-1659847682887
GPR[SPVATF]-1659847682887
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 0
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
MM: Failing tests: 0
GPR[EPVATF]-1659847687963
GPR[SPVATR]-1659847687964
TESTING : time_7
MM messageFailing tests: 0
GPR[EPVATR]-1659847698256
GPR[EPVS]-1659847698257
GPR[PF]-1659847698257
sourceFile  script/workingdir/SimFix/time/time_7_buggy/src/main/java/org/joda/time/format/DateTimeFormatter.java
location   script/workingdir/SimFix/time/time_7_buggy
MM Out patch at /experiment_home///results/SimFix/Time/7/seed_261/patch/time/7/0/patch_884322_1_ts_1659847698257.diff
MM Command diff diff -w -b  --label=/src/main/java/org/joda/time/format/DateTimeFormatter.java --label=/src/main/java/org/joda/time/format/DateTimeFormatter.java /tmp/tmpDirMM6506166558613980362/DateTimeFormatter.java  /experiment_home///results/SimFix/Time/7/seed_261/patch/time/7/0/1_DateTimeFormatter.java  --unified=3  > /experiment_home///results/SimFix/Time/7/seed_261/patch/time/7/0/patch_884322_1_ts_1659847698257.diff
MMOut command diff: []
========
setMillis(getChronology().millisOfDay().set(getMillis(),ISOChronology.getInstanceUTC().millisOfDay().get(instantMillis)));
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847698266
GPR[SPVAP]-1659847698266
GPR[EPVAP]-1659847699569
GPR[EPVS]-1659847699569
========
defaultYear=checkInstant(instantLocal,chrono);
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847699571
GPR[SPVAP]-1659847699571
GPR[EPVAP]-1659847700849
GPR[EPVS]-1659847700849
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847700851
GPR[SPVAP]-1659847700851
GPR[EPVAP]-1659847702167
GPR[EPVS]-1659847702167
========
checkLimits(instantLocal,"resulting");
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847702169
GPR[SPVAP]-1659847702169
GPR[EPVAP]-1659847703448
GPR[EPVS]-1659847703448
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
case SECONDS_MILLIS :

int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847703450
GPR[SPVAP]-1659847703450
GPR[EPVAP]-1659847704583
GPR[EPVS]-1659847704583
========
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847704585
GPR[SPVAP]-1659847704585
GPR[EPVAP]-1659847705872
GPR[EPVS]-1659847705872
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847705873
GPR[SPVAP]-1659847705873
GPR[EPVAP]-1659847707158
GPR[EPVS]-1659847707158
========
defaultYear=chrono;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847707159
GPR[SPVAP]-1659847707159
GPR[EPVAP]-1659847709344
GPR[EPVS]-1659847709344
========
fields.years=fields.year.getDurationField();
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847709352
GPR[SPVAP]-1659847709352
GPR[EPVAP]-1659847710764
GPR[EPVS]-1659847710764
========
checkLimits(instantLocal,"resulting");
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847710766
GPR[SPVAP]-1659847710766
GPR[EPVAP]-1659847712081
GPR[EPVS]-1659847712081
========
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847712083
GPR[SPVAP]-1659847712083
GPR[EPVAP]-1659847713403
GPR[EPVS]-1659847713403
========
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847713404
GPR[SPVAP]-1659847713404
GPR[EPVAP]-1659847714740
GPR[EPVS]-1659847714740
========
defaultYear=chrono;
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847714741
GPR[SPVAP]-1659847714741
GPR[EPVAP]-1659847716055
GPR[EPVS]-1659847716055
========
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847716057
GPR[SPVAP]-1659847716057
GPR[EPVAP]-1659847717356
GPR[EPVS]-1659847717356
========
defaultYear=chrono;
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847717357
GPR[SPVAP]-1659847717357
GPR[EPVAP]-1659847718652
GPR[EPVS]-1659847718652
========
defaultYear=chrono;
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847718654
GPR[SPVAP]-1659847718654
GPR[EPVAP]-1659847719944
GPR[EPVS]-1659847719944
========
defaultYear=chrono;
instantLocal=instant;
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
super();
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847719945
GPR[SPVAP]-1659847719945
GPR[EPVAP]-1659847721256
GPR[EPVS]-1659847721256
========
long instantLocal=cycles+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847721259
GPR[SPVAP]-1659847721260
GPR[EPVAP]-1659847722557
GPR[EPVS]-1659847722557
========
if(FORMATTERS.get(iLocale)==null){
ResourceBundle ResourceBundle.getBundle(BUNDLE_NAME,iLocale)=ResourceBundle.getBundle(BUNDLE_NAME,iLocale);
String[] {ResourceBundle.getBundle(BUNDLE_NAME,iLocale).getString("PeriodFormat.space"),b.getString("PeriodFormat.comma"),b.getString("PeriodFormat.commandand"),b.getString("PeriodFormat.commaspaceand")}={b.getString("PeriodFormat.space"),b.getString("PeriodFormat.comma"),b.getString("PeriodFormat.commandand"),b.getString("PeriodFormat.commaspaceand")};
pf=new PeriodFormatterBuilder().appendYears().appendSuffix(b.getString("PeriodFormat.year"),b.getString("PeriodFormat.years")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendMonths().appendSuffix(b.getString("PeriodFormat.month"),b.getString("PeriodFormat.months")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendWeeks().appendSuffix(b.getString("PeriodFormat.week"),b.getString("PeriodFormat.weeks")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendDays().appendSuffix(b.getString("PeriodFormat.day"),b.getString("PeriodFormat.days")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendHours().appendSuffix(b.getString("PeriodFormat.hour"),b.getString("PeriodFormat.hours")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendMinutes().appendSuffix(b.getString("PeriodFormat.minute"),b.getString("PeriodFormat.minutes")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendSeconds().appendSuffix(b.getString("PeriodFormat.second"),b.getString("PeriodFormat.seconds")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendMillis().appendSuffix(b.getString("PeriodFormat.millisecond"),b.getString("PeriodFormat.milliseconds")).toFormatter();
FORMATTERS.putIfAbsent(locale,pf);
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847722560
GPR[SPVAP]-1659847722560
GPR[EPVAP]-1659847723706
GPR[EPVS]-1659847723706
========
long instantLocal=instant+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847723710
GPR[SPVAP]-1659847723710
GPR[EPVAP]-1659847725003
GPR[EPVS]-1659847725003
========
long instantLocal=millis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847725006
GPR[SPVAP]-1659847725006
GPR[EPVAP]-1659847726315
GPR[EPVS]-1659847726316
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().charAt(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847726317
GPR[SPVAP]-1659847726317
GPR[EPVAP]-1659847727622
GPR[EPVS]-1659847727622
========
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
char defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847727624
GPR[SPVAP]-1659847727624
GPR[EPVAP]-1659847728923
GPR[EPVS]-1659847728924
========
if(defaultYear<'0'||c>'9'){
return ~position;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847728925
GPR[SPVAP]-1659847728925
GPR[EPVAP]-1659847730208
GPR[EPVS]-1659847730208
========
if(defaultYear<=0){
iDefaultYear=(relativeYear+3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(iDefaultYear)){
leapYears++;
}
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847730210
GPR[SPVAP]-1659847730210
GPR[EPVAP]-1659847731523
GPR[EPVS]-1659847731523
========
if(defaultYear<=0){
iDefaultYear=(relativeYear+3)>>2;
}else {
leapYears=relativeYear>>2;
if(!isLeapYear(iDefaultYear)){
leapYears++;
}
}
int instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847731525
GPR[SPVAP]-1659847731525
GPR[EPVAP]-1659847732828
GPR[EPVS]-1659847732828
========
if(defaultYear==354){
return 12;
}
long instantLocal=instantMillis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847732831
GPR[SPVAP]-1659847732831
GPR[EPVAP]-1659847734127
GPR[EPVS]-1659847734127
========
int instantLocal=millis+chrono.getZone().getOffset(instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);

========
MM Copying to MM
GPR[SPVS]-1659847734128
GPR[SPVAP]-1659847734128
GPR[EPVAP]-1659847735431
GPR[EPVS]-1659847735431
GPR[ESUN]-1659847735431
GPR[SSUN]-1659847735431
org.joda.time.format.DateTimeFormatter,710
========
instant.setMillis(new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear).computeMillis(false,text));
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847736636
GPR[SPVAP]-1659847736636
GPR[EPVAP]-1659847739057
GPR[EPVS]-1659847739057
========
setValues(chrono.get(this,instantLocal));
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847739059
GPR[SPVAP]-1659847739059
GPR[EPVAP]-1659847741554
GPR[EPVS]-1659847741554
========
setValues(chrono.get(this,instantLocal,instantMillis));
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847741555
GPR[SPVAP]-1659847741555
GPR[EPVAP]-1659847743948
GPR[EPVS]-1659847743949
========
super();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847743951
GPR[SPVAP]-1659847743951
GPR[EPVAP]-1659847746202
GPR[EPVS]-1659847746202
========
bucket=instantLocal;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847746203
GPR[SPVAP]-1659847746203
GPR[EPVAP]-1659847748400
GPR[EPVS]-1659847748400
========
iZone=chrono.getZone();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847748401
GPR[SPVAP]-1659847748401
GPR[EPVAP]-1659847750537
GPR[EPVS]-1659847750537
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847750539
GPR[SPVAP]-1659847750539
GPR[EPVAP]-1659847758208
GPR[SPVATF]-1659847758208
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847760762
GPR[EPVS]-1659847760762
========
bucket=chrono.get(this,instantLocal);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847760764
GPR[SPVAP]-1659847760764
GPR[EPVAP]-1659847762068
GPR[EPVS]-1659847762068
========
bucket=chrono.get(this,instantLocal,instantMillis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847762070
GPR[SPVAP]-1659847762070
GPR[EPVAP]-1659847763386
GPR[EPVS]-1659847763386
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(text);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847763388
GPR[SPVAP]-1659847763388
GPR[EPVAP]-1659847764709
GPR[EPVS]-1659847764709
========
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847764711
GPR[SPVAP]-1659847764711
GPR[EPVAP]-1659847766039
GPR[EPVS]-1659847766039
========
bucket=chrono.get(this,instantLocal,FieldUtils.safeAdd(instantLocal,instantMillis));
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847766040
GPR[SPVAP]-1659847766040
GPR[EPVAP]-1659847767341
GPR[EPVS]-1659847767341
========
bucket=chrono.get(this,FieldUtils.safeSubtract(instantLocal,instantMillis),instantLocal);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847767343
GPR[SPVAP]-1659847767343
GPR[EPVAP]-1659847768629
GPR[EPVS]-1659847768629
========
setPeriod(instantMillis,chrono);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847768630
GPR[SPVAP]-1659847768630
GPR[EPVAP]-1659847769936
GPR[EPVS]-1659847769936
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(iLocale);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847769938
GPR[SPVAP]-1659847769938
GPR[EPVAP]-1659847771266
GPR[EPVS]-1659847771266
========
instantLocal=chrono.monthOfYear().set(millis,iDefaultYear);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847771267
GPR[SPVAP]-1659847771267
GPR[EPVAP]-1659847772559
GPR[EPVS]-1659847772559
========
instantLocal=chrono.millisOfDay().set(millis,iDefaultYear);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847772560
GPR[SPVAP]-1659847772560
GPR[EPVAP]-1659847773866
GPR[EPVS]-1659847773866
========
instantLocal=setDayOfMonth(chrono,millis);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847773867
GPR[SPVAP]-1659847773867
GPR[EPVAP]-1659847775168
GPR[EPVS]-1659847775168
========
chrono=selectChronology(chrono);
super();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847775170
GPR[SPVAP]-1659847775170
GPR[EPVAP]-1659847776486
GPR[EPVS]-1659847776486
========
bucket=chrono;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847776488
GPR[SPVAP]-1659847776488
GPR[EPVAP]-1659847777789
GPR[EPVS]-1659847777789
========
bucket=chrono;
chrono=selectChronology(chrono);
super();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847777791
GPR[SPVAP]-1659847777791
GPR[EPVAP]-1659847779083
GPR[EPVS]-1659847779083
========
chrono=chrono.withUTC();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847779086
GPR[SPVAP]-1659847779086
GPR[EPVAP]-1659847783906
GPR[SPVATF]-1659847783906
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847786450
GPR[EPVS]-1659847786450
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().getChronology(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847786452
GPR[SPVAP]-1659847786452
GPR[EPVAP]-1659847787773
GPR[EPVS]-1659847787773
========
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847787775
GPR[SPVAP]-1659847787775
GPR[EPVAP]-1659847789055
GPR[EPVS]-1659847789056
========
super.setInterval(instantMillis,instantMillis,chrono);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847789058
GPR[SPVAP]-1659847789058
GPR[EPVAP]-1659847790369
GPR[EPVS]-1659847790369
========
if(get()<instant.get(getFieldType())){
return -1;
}else if(thisValue>otherValue){
return 1;
}else {
return 0;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847790370
GPR[SPVAP]-1659847790370
GPR[EPVAP]-1659847791654
GPR[EPVS]-1659847791654
========
if(get()<iDefaultYear){
return -1;
}else if(thisValue>otherValue){
return 1;
}else {
return 0;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847791656
GPR[SPVAP]-1659847791656
GPR[EPVAP]-1659847792959
GPR[EPVS]-1659847792959
========
instantLocal=chrono.set(this,instant);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847792961
GPR[SPVAP]-1659847792961
GPR[EPVAP]-1659847794263
GPR[EPVS]-1659847794263
========
chrono=selectChronology(chrono);
iZone=DateTimeUtils.getZone(zone);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847794265
GPR[SPVAP]-1659847794265
GPR[EPVAP]-1659847795575
GPR[EPVS]-1659847795575
========
chrono=selectChronology(chrono);
instant+=iDefaultYear;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847795577
GPR[SPVAP]-1659847795577
GPR[EPVAP]-1659847796883
GPR[EPVS]-1659847796883
========
instantMillis=chrono.millisOfDay().set(next,0);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847796885
GPR[SPVAP]-1659847796885
GPR[EPVAP]-1659847798202
GPR[EPVS]-1659847798202
========
instantMillis=chrono.millisOfDay().set(prev,0);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847798203
GPR[SPVAP]-1659847798203
GPR[EPVAP]-1659847799491
GPR[EPVS]-1659847799491
========
instant.setChronology(chrono);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847799492
GPR[SPVAP]-1659847799492
GPR[EPVAP]-1659847802856
GPR[SPVATF]-1659847802856
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847805378
GPR[EPVS]-1659847805378
========
chrono=selectChronology(chrono);
if(instant==null){
return ISOChronology.getInstance();
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847805381
GPR[SPVAP]-1659847805381
GPR[EPVAP]-1659847806692
GPR[EPVS]-1659847806692
========
if(chrono==null){
return ISOChronology.getInstance();
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847806694
GPR[SPVAP]-1659847806694
GPR[EPVAP]-1659847807995
GPR[EPVS]-1659847807995
========
super.setInterval(instantMillis,instantLocal,chrono);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847807997
GPR[SPVAP]-1659847807997
GPR[EPVAP]-1659847809296
GPR[EPVS]-1659847809296
========
chrono=selectChronology(chrono);
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847809298
GPR[SPVAP]-1659847809298
GPR[EPVAP]-1659847812599
GPR[SPVATF]-1659847812599
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847815127
GPR[EPVS]-1659847815127
========
instantMillis=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,chrono),chrono);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847815129
GPR[SPVAP]-1659847815129
GPR[EPVAP]-1659847816414
GPR[EPVS]-1659847816414
========
if(instantMillis==toDurationMillis()){
return this;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847816415
GPR[SPVAP]-1659847816415
GPR[EPVAP]-1659847817709
GPR[EPVS]-1659847817709
========
if(instantMillis==toDurationMillis()){
return this;
}
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847817711
GPR[SPVAP]-1659847817711
GPR[EPVAP]-1659847819021
GPR[EPVS]-1659847819021
========
if(iChrono!=null){
chrono=iChrono;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847819023
GPR[SPVAP]-1659847819023
GPR[EPVAP]-1659847822350
GPR[SPVATF]-1659847822350
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847824897
GPR[EPVS]-1659847824897
========
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847824898
GPR[SPVAP]-1659847824898
GPR[EPVAP]-1659847828251
GPR[SPVATF]-1659847828251
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847830783
GPR[EPVS]-1659847830783
========
if(iChrono!=null){
chrono=iChrono;
}
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847830784
GPR[SPVAP]-1659847830784
GPR[EPVAP]-1659847834094
GPR[SPVATF]-1659847834094
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847836666
GPR[EPVS]-1659847836666
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(defaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847836667
GPR[SPVAP]-1659847836668
GPR[EPVAP]-1659847837991
GPR[EPVS]-1659847837991
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(iZone);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847837993
GPR[SPVAP]-1659847837993
GPR[EPVAP]-1659847839283
GPR[EPVS]-1659847839284
========
instantLocal=chrono.dayOfMonth().roundFloor(instant);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847839286
GPR[SPVAP]-1659847839286
GPR[EPVAP]-1659847840588
GPR[EPVS]-1659847840588
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().getFieldType(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847840591
GPR[SPVAP]-1659847840591
GPR[EPVAP]-1659847841885
GPR[EPVS]-1659847841885
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(Calendar.ERA);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847841886
GPR[SPVAP]-1659847841886
GPR[EPVAP]-1659847843183
GPR[EPVS]-1659847843183
========
chrono=selectChronology(chrono);
if(iDefaultYear==0){
return instantLocal;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847843185
GPR[SPVAP]-1659847843185
GPR[EPVAP]-1659847844473
GPR[EPVS]-1659847844473
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(zone.iRules);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847844475
GPR[SPVAP]-1659847844475
GPR[EPVAP]-1659847845777
GPR[EPVS]-1659847845777
========
if(getWrappedField().get(instantLocal)<=0){
year=1-year;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847845779
GPR[SPVAP]-1659847845779
GPR[EPVAP]-1659847847087
GPR[EPVS]-1659847847087
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(new PeriodType(null,type.iTypes,null));
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847847089
GPR[SPVAP]-1659847847089
GPR[EPVAP]-1659847848404
GPR[EPVS]-1659847848404
========
if(iPivotYear!=null){
return era.intValue();
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847848406
GPR[SPVAP]-1659847848406
GPR[EPVAP]-1659847849705
GPR[EPVS]-1659847849705
========
if(iPivotYear!=null){
return month.intValue();
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847849706
GPR[SPVAP]-1659847849706
GPR[EPVAP]-1659847851011
GPR[EPVS]-1659847851011
========
if(iPivotYear!=null){
return day.intValue();
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847851012
GPR[SPVAP]-1659847851012
GPR[EPVAP]-1659847852314
GPR[EPVS]-1659847852314
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(r.iName);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847852316
GPR[SPVAP]-1659847852316
GPR[EPVAP]-1659847853625
GPR[EPVS]-1659847853625
========
bucket=chrono.withUTC();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847853626
GPR[SPVAP]-1659847853626
GPR[EPVAP]-1659847855231
GPR[EPVS]-1659847855231
========
if(getWrappedField().get(instantLocal)==0){
value=getMaximumValue();
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847855247
GPR[SPVAP]-1659847855247
GPR[EPVAP]-1659847857384
GPR[EPVS]-1659847857384
========
chrono=selectChronology(chrono);
instantMillis=instantMillis;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847857387
GPR[SPVAP]-1659847857387
GPR[EPVAP]-1659847860703
GPR[SPVATF]-1659847860703
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847863279
GPR[EPVS]-1659847863279
========
if(instantMillis-1!=instantMillis){
System.out.println("*r* Error in "+iZone.getID());
return false;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847863281
GPR[SPVAP]-1659847863281
GPR[EPVAP]-1659847864591
GPR[EPVS]-1659847864591
========
chrono=selectChronology(chrono);
instantMillis=instantMillis;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847864592
GPR[SPVAP]-1659847864592
GPR[EPVAP]-1659847865895
GPR[EPVS]-1659847865895
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().roundCeiling(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847865897
GPR[SPVAP]-1659847865897
GPR[EPVAP]-1659847867204
GPR[EPVS]-1659847867204
========
chrono=selectChronology(chrono);
int defaultYear=chronology.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847867205
GPR[SPVAP]-1659847867205
GPR[EPVAP]-1659847868508
GPR[EPVS]-1659847868508
========
chrono=chronology.withUTC();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847868509
GPR[SPVAP]-1659847868509
GPR[EPVAP]-1659847869794
GPR[EPVS]-1659847869794
========
instantMillis=chrono.millisOfDay().get(instantLocal);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847869796
GPR[SPVAP]-1659847869796
GPR[EPVAP]-1659847873144
GPR[SPVATF]-1659847873144
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847875675
GPR[EPVS]-1659847875675
========
instantMillis=chrono.millisOfDay().get(instantLocal);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847875676
GPR[SPVAP]-1659847875676
GPR[EPVAP]-1659847876975
GPR[EPVS]-1659847876975
========
bucket=chrono;
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847876976
GPR[SPVAP]-1659847876976
GPR[EPVAP]-1659847878281
GPR[EPVS]-1659847878281
========
instantMillis=chrono.millisOfDay().get(instantLocal);
bucket=chrono;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847878282
GPR[SPVAP]-1659847878282
GPR[EPVAP]-1659847879588
GPR[EPVS]-1659847879588
========
instantMillis=chrono.millisOfDay().get(instantLocal);
bucket=chrono;
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847879589
GPR[SPVAP]-1659847879589
GPR[EPVAP]-1659847880895
GPR[EPVS]-1659847880895
========
chrono=selectChronology(chrono);
if(!text.equals(iZone.getID())){
return true;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847880897
GPR[SPVAP]-1659847880897
GPR[EPVAP]-1659847882201
GPR[EPVS]-1659847882201
========
chrono=selectChronology(chrono);
bucket=PeriodType.standard();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847882202
GPR[SPVAP]-1659847882202
GPR[EPVAP]-1659847883481
GPR[EPVS]-1659847883481
========
if(instantMillis!=instantLocal){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847883483
GPR[SPVAP]-1659847883483
GPR[EPVAP]-1659847886816
GPR[SPVATF]-1659847886816
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847889389
GPR[EPVS]-1659847889389
========
if(instantMillis!=instantLocal){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847889390
GPR[SPVAP]-1659847889390
GPR[EPVAP]-1659847890676
GPR[EPVS]-1659847890676
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().nextTransition(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847890678
GPR[SPVAP]-1659847890678
GPR[EPVAP]-1659847891987
GPR[EPVS]-1659847891987
========
if(nextTransition(instantLocal-iDefaultYear)==(instantLocal-iDefaultYear)){
nextLocal=Long.MAX_VALUE;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847891988
GPR[SPVAP]-1659847891988
GPR[EPVAP]-1659847893289
GPR[EPVS]-1659847893289
========
if(getWrappedField().get(instantLocal)>=0){
return value/iDefaultYear;
}else {
return ((value+1)/iDivisor)-1;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847893290
GPR[SPVAP]-1659847893290
GPR[EPVAP]-1659847894566
GPR[EPVS]-1659847894566
========
if(getWrappedField().get(instantLocal)>=0){
return value%iDefaultYear;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847894568
GPR[SPVAP]-1659847894568
GPR[EPVAP]-1659847895881
GPR[EPVS]-1659847895881
========
chrono=selectChronology(chrono);
long defaultYear=chrono.year().nextTransition(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847895883
GPR[SPVAP]-1659847895883
GPR[EPVAP]-1659847897191
GPR[EPVS]-1659847897191
========
instant=monthOfYear().set(instant,iDefaultYear);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847897193
GPR[SPVAP]-1659847897193
GPR[EPVAP]-1659847898483
GPR[EPVS]-1659847898483
========
instant=dayOfMonth().set(instant,defaultYear);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847898484
GPR[SPVAP]-1659847898484
GPR[EPVAP]-1659847899783
GPR[EPVS]-1659847899784
========
chrono=selectChronology(chrono);
int defaultYear=iBase.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847899785
GPR[SPVAP]-1659847899785
GPR[EPVAP]-1659847901084
GPR[EPVS]-1659847901084
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().convertUTCToLocal(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847901086
GPR[SPVAP]-1659847901086
GPR[EPVAP]-1659847902384
GPR[EPVS]-1659847902384
========
chrono=selectChronology(chrono);
if(text==null){
return null;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847902386
GPR[SPVAP]-1659847902386
GPR[EPVAP]-1659847903669
GPR[EPVS]-1659847903669
========
instant=hourOfDay().set(instant,iDefaultYear);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847903672
GPR[SPVAP]-1659847903672
GPR[EPVAP]-1659847904952
GPR[EPVS]-1659847904952
========
instant=minuteOfHour().set(instant,iDefaultYear);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847904954
GPR[SPVAP]-1659847904954
GPR[EPVAP]-1659847906280
GPR[EPVS]-1659847906280
========
instant=secondOfMinute().set(instant,iDefaultYear);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847906282
GPR[SPVAP]-1659847906282
GPR[EPVAP]-1659847907582
GPR[EPVS]-1659847907582
========
instant=monthOfYear().set(instant,iDefaultYear);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847907584
GPR[SPVAP]-1659847907584
GPR[EPVAP]-1659847908891
GPR[EPVS]-1659847908892
========
instant=dayOfMonth().set(instant,defaultYear);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847908893
GPR[SPVAP]-1659847908893
GPR[EPVAP]-1659847910199
GPR[EPVS]-1659847910199
========
instant=monthOfYear().set(instant,iDefaultYear);
instant=dayOfMonth().set(instant,defaultYear);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847910201
GPR[SPVAP]-1659847910201
GPR[EPVAP]-1659847911480
GPR[EPVS]-1659847911480
========
instant=monthOfYear().set(instant,iDefaultYear);
instant=dayOfMonth().set(instant,defaultYear);
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847911482
GPR[SPVAP]-1659847911482
GPR[EPVAP]-1659847912800
GPR[EPVS]-1659847912800
========
chrono=selectChronology(chrono);
if(parser==null){
if(iDefaultYear<=position){
return position;
}
bucket=true;
break;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847912803
GPR[SPVAP]-1659847912803
GPR[EPVAP]-1659847914115
GPR[EPVS]-1659847914115
========
bucket=checkInstant(instant,chrono);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847914117
GPR[SPVAP]-1659847914117
GPR[EPVAP]-1659847915420
GPR[EPVS]-1659847915420
========
super();
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847915421
GPR[SPVAP]-1659847915421
GPR[EPVAP]-1659847916723
GPR[EPVS]-1659847916723
========
setMillis(instant);
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847916725
GPR[SPVAP]-1659847916725
GPR[EPVAP]-1659847918036
GPR[EPVS]-1659847918036
========
fields.years=fields.year.getDurationField();
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847918037
GPR[SPVAP]-1659847918037
GPR[EPVAP]-1659847919346
GPR[EPVS]-1659847919346
========
instantMillis=instant;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847919347
GPR[SPVAP]-1659847919347
GPR[EPVAP]-1659847920668
GPR[EPVS]-1659847920668
========
super();
bucket=chrono;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847920669
GPR[SPVAP]-1659847920669
GPR[EPVAP]-1659847921995
GPR[EPVS]-1659847921995
========
super();
bucket=chrono;
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847921997
GPR[SPVAP]-1659847921997
GPR[EPVAP]-1659847923317
GPR[EPVS]-1659847923317
========
setDate(chrono.getDateTimeMillis(iDefaultYear,iDefaultYear,iDefaultYear,0));
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847923319
GPR[SPVAP]-1659847923319
GPR[EPVAP]-1659847924620
GPR[EPVS]-1659847924620
========
instantMillis=instant;
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847924622
GPR[SPVAP]-1659847924622
GPR[EPVAP]-1659847925924
GPR[EPVS]-1659847925924
========
super();
instantMillis=instant;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847925925
GPR[SPVAP]-1659847925925
GPR[EPVAP]-1659847927601
GPR[EPVS]-1659847927601
========
bucket=chrono;
instantMillis=instant;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847927619
GPR[SPVAP]-1659847927619
GPR[EPVAP]-1659847929675
GPR[EPVS]-1659847929675
========
super();
instantMillis=instant;
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847929677
GPR[SPVAP]-1659847929677
GPR[EPVAP]-1659847930982
GPR[EPVS]-1659847930983
========
bucket=chrono;
instantMillis=instant;
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847930984
GPR[SPVAP]-1659847930984
GPR[EPVAP]-1659847932300
GPR[EPVS]-1659847932300
========
super();
bucket=chrono;
instantMillis=instant;
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847932302
GPR[SPVAP]-1659847932302
GPR[EPVAP]-1659847933627
GPR[EPVS]-1659847933627
========
super();
bucket=chrono;
instantMillis=instant;
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847933629
GPR[SPVAP]-1659847933629
GPR[EPVAP]-1659847934946
GPR[EPVS]-1659847934946
========
checkLimits(instant,"resulting");
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847934948
GPR[SPVAP]-1659847934948
GPR[EPVAP]-1659847936261
GPR[EPVS]-1659847936261
========
checkLimits(instant,"resulting");
chrono=selectChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847936263
GPR[SPVAP]-1659847936263
GPR[EPVAP]-1659847937572
GPR[EPVS]-1659847937572
========
chrono=selectChronology(chrono);
case SECONDS_MILLIS :

int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847937574
GPR[SPVAP]-1659847937574
GPR[EPVAP]-1659847938706
GPR[EPVS]-1659847938706
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847938709
GPR[SPVAP]-1659847938709
GPR[EPVAP]-1659847940043
GPR[EPVS]-1659847940043
========
chrono=selectChronology(chrono);
char defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847940045
GPR[SPVAP]-1659847940045
GPR[EPVAP]-1659847941355
GPR[EPVS]-1659847941355
========
setMillis(getChronology().millisOfDay().set(getMillis(),defaultYear));
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847941358
GPR[SPVAP]-1659847941358
GPR[EPVAP]-1659847942668
GPR[EPVS]-1659847942668
========
if(text.charAt(defaultYear)<'0'||c>'9'){
return ~defaultYear;
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847942669
GPR[SPVAP]-1659847942669
GPR[EPVAP]-1659847943949
GPR[EPVS]-1659847943949
========
chrono=selectChronology(chrono);
char defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847943950
GPR[SPVAP]-1659847943950
GPR[EPVAP]-1659847945251
GPR[EPVS]-1659847945251
========
if(FORMATTERS.get(iLocale)==null){
ResourceBundle ResourceBundle.getBundle(BUNDLE_NAME,iLocale)=ResourceBundle.getBundle(BUNDLE_NAME,iLocale);
String[] {ResourceBundle.getBundle(BUNDLE_NAME,iLocale).getString("PeriodFormat.space"),b.getString("PeriodFormat.comma"),b.getString("PeriodFormat.commandand"),b.getString("PeriodFormat.commaspaceand")}={b.getString("PeriodFormat.space"),b.getString("PeriodFormat.comma"),b.getString("PeriodFormat.commandand"),b.getString("PeriodFormat.commaspaceand")};
pf=new PeriodFormatterBuilder().appendYears().appendSuffix(b.getString("PeriodFormat.year"),b.getString("PeriodFormat.years")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendMonths().appendSuffix(b.getString("PeriodFormat.month"),b.getString("PeriodFormat.months")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendWeeks().appendSuffix(b.getString("PeriodFormat.week"),b.getString("PeriodFormat.weeks")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendDays().appendSuffix(b.getString("PeriodFormat.day"),b.getString("PeriodFormat.days")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendHours().appendSuffix(b.getString("PeriodFormat.hour"),b.getString("PeriodFormat.hours")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendMinutes().appendSuffix(b.getString("PeriodFormat.minute"),b.getString("PeriodFormat.minutes")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendSeconds().appendSuffix(b.getString("PeriodFormat.second"),b.getString("PeriodFormat.seconds")).appendSeparator(b.getString("PeriodFormat.commaspace"),b.getString("PeriodFormat.spaceandspace"),variants).appendMillis().appendSuffix(b.getString("PeriodFormat.millisecond"),b.getString("PeriodFormat.milliseconds")).toFormatter();
FORMATTERS.putIfAbsent(locale,pf);
}
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);

========
MM Copying to MM
GPR[SPVS]-1659847945253
GPR[SPVAP]-1659847945253
GPR[EPVAP]-1659847946395
GPR[EPVS]-1659847946395
GPR[ESUN]-1659847946397
GPR[SSUN]-1659847946397
org.joda.time.format.DateTimeFormatter,712
========
instant.setMillis(bucket.computeMillis(false,text));
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847947730
GPR[SPVAP]-1659847947730
GPR[EPVAP]-1659847950142
GPR[EPVS]-1659847950142
========
if(parser==null){
if(iDefaultYear<=position){
return position;
}
iOffsetParsed=true;
break;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847950145
GPR[SPVAP]-1659847950145
GPR[EPVAP]-1659847952520
GPR[EPVS]-1659847952520
========
int defaultYear=chrono.year().get(position);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847952522
GPR[SPVAP]-1659847952522
GPR[EPVAP]-1659847960316
GPR[SPVATF]-1659847960316
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847962937
GPR[EPVS]-1659847962937
========
int defaultYear=chrono.year().get(text);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847962939
GPR[SPVAP]-1659847962939
GPR[EPVAP]-1659847964218
GPR[EPVS]-1659847964218
========
int defaultYear=chrono.year().get(iLocale);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847964220
GPR[SPVAP]-1659847964220
GPR[EPVAP]-1659847965527
GPR[EPVS]-1659847965527
========
if(newPos<instant.get(getFieldType())){
return -1;
}else if(thisValue>otherValue){
return 1;
}else {
return 0;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847965531
GPR[SPVAP]-1659847965531
GPR[EPVAP]-1659847966856
GPR[EPVS]-1659847966856
========
if(newPos<iDefaultYear){
return -1;
}else if(thisValue>otherValue){
return 1;
}else {
return 0;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847966858
GPR[SPVAP]-1659847966858
GPR[EPVAP]-1659847968144
GPR[EPVS]-1659847968144
========
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847968154
GPR[SPVAP]-1659847968154
GPR[EPVAP]-1659847969452
GPR[EPVS]-1659847969452
========
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847969454
GPR[SPVAP]-1659847969454
GPR[EPVAP]-1659847970739
GPR[EPVS]-1659847970739
========
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847970741
GPR[SPVAP]-1659847970741
GPR[EPVAP]-1659847972025
GPR[EPVS]-1659847972025
========
newPos=chrono.get(this,instantLocal,instantMillis);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847972026
GPR[SPVAP]-1659847972026
GPR[EPVAP]-1659847973371
GPR[EPVS]-1659847973371
========
newPos=chrono.get(this,instantLocal,FieldUtils.safeAdd(instantLocal,instantMillis));
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847973373
GPR[SPVAP]-1659847973373
GPR[EPVAP]-1659847974691
GPR[EPVS]-1659847974692
========
newPos=chrono.get(this,FieldUtils.safeSubtract(instantLocal,instantMillis),instantLocal);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847974694
GPR[SPVAP]-1659847974694
GPR[EPVAP]-1659847975976
GPR[EPVS]-1659847975976
========
int defaultYear=chrono.year().get(defaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847975978
GPR[SPVAP]-1659847975978
GPR[EPVAP]-1659847977269
GPR[EPVS]-1659847977269
========
chrono=DateTimeUtils.getChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847977270
GPR[SPVAP]-1659847977270
GPR[EPVAP]-1659847980647
GPR[SPVATF]-1659847980647
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847983180
GPR[EPVS]-1659847983180
========
chrono=DateTimeUtils.getChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847983181
GPR[SPVAP]-1659847983181
GPR[EPVAP]-1659847984468
GPR[EPVS]-1659847984468
========
int defaultYear=chrono.year().forOffsetMillis(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847984472
GPR[SPVAP]-1659847984472
GPR[EPVAP]-1659847985744
GPR[EPVS]-1659847985744
========
if(iPivotYear!=null){
return era.intValue();
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847985747
GPR[SPVAP]-1659847985747
GPR[EPVAP]-1659847987052
GPR[EPVS]-1659847987052
========
if(iPivotYear!=null){
return month.intValue();
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847987054
GPR[SPVAP]-1659847987054
GPR[EPVAP]-1659847988359
GPR[EPVS]-1659847988359
========
if(iPivotYear!=null){
return day.intValue();
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847988361
GPR[SPVAP]-1659847988361
GPR[EPVAP]-1659847989686
GPR[EPVS]-1659847989686
========
int defaultYear=chrono.year().get(iZone);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847989689
GPR[SPVAP]-1659847989689
GPR[EPVAP]-1659847991000
GPR[EPVS]-1659847991000
========
instantLocal=chrono.monthOfYear().set(millis,iDefaultYear);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847991003
GPR[SPVAP]-1659847991003
GPR[EPVAP]-1659847992309
GPR[EPVS]-1659847992309
========
instantLocal=chrono.millisOfDay().set(millis,iDefaultYear);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847992310
GPR[SPVAP]-1659847992310
GPR[EPVAP]-1659847993622
GPR[EPVS]-1659847993622
========
instantLocal=setDayOfMonth(chrono,millis);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847993623
GPR[SPVAP]-1659847993623
GPR[EPVAP]-1659847994897
GPR[EPVS]-1659847994897
========
int defaultYear=chrono.year().get(zone.iRules);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847994900
GPR[SPVAP]-1659847994900
GPR[EPVAP]-1659847996199
GPR[EPVS]-1659847996199
========
if(position==0){
return instantLocal;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847996201
GPR[SPVAP]-1659847996201
GPR[EPVAP]-1659847997499
GPR[EPVS]-1659847997499
========
int defaultYear=chrono.year().get(new PeriodType(null,type.iTypes,null));
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847997501
GPR[SPVAP]-1659847997501
GPR[EPVAP]-1659847998809
GPR[EPVS]-1659847998809
========
int defaultYear=chrono.year().get(Calendar.ERA);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659847998811
GPR[SPVAP]-1659847998811
GPR[EPVAP]-1659848001082
GPR[EPVS]-1659848001082
========
if(getWrappedField().get(instantLocal)<=0){
year=1-year;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848001092
GPR[SPVAP]-1659848001092
GPR[EPVAP]-1659848002406
GPR[EPVS]-1659848002406
========
instant.setChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848002408
GPR[SPVAP]-1659848002408
GPR[EPVAP]-1659848005741
GPR[SPVATF]-1659848005741
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848008267
GPR[EPVS]-1659848008267
========
instant.setChronology(chrono);
int defaultYear=chrono.year().forOffsetMillis(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848008268
GPR[SPVAP]-1659848008268
GPR[EPVAP]-1659848009582
GPR[EPVS]-1659848009582
========
setPeriod(instantMillis,chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848009584
GPR[SPVAP]-1659848009584
GPR[EPVAP]-1659848010895
GPR[EPVS]-1659848010895
========
int defaultYear=chrono.year().get(r.iName);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848010897
GPR[SPVAP]-1659848010897
GPR[EPVAP]-1659848012219
GPR[EPVS]-1659848012219
========
if(getWrappedField().get(instantLocal)==0){
value=getMaximumValue();
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848012223
GPR[SPVAP]-1659848012223
GPR[EPVAP]-1659848013515
GPR[EPVS]-1659848013515
========
instantMillis=instantMillis;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848013518
GPR[SPVAP]-1659848013518
GPR[EPVAP]-1659848016858
GPR[SPVATF]-1659848016858
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848019412
GPR[EPVS]-1659848019412
========
if(instantMillis-1!=instantMillis){
System.out.println("*r* Error in "+iZone.getID());
return false;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848019413
GPR[SPVAP]-1659848019413
GPR[EPVAP]-1659848020699
GPR[EPVS]-1659848020699
========
instantMillis=instantMillis;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848020700
GPR[SPVAP]-1659848020700
GPR[EPVAP]-1659848022004
GPR[EPVS]-1659848022004
========
super.setInterval(instantMillis,instantMillis,chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848022007
GPR[SPVAP]-1659848022007
GPR[EPVAP]-1659848023312
GPR[EPVS]-1659848023312
========
super();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848023314
GPR[SPVAP]-1659848023314
GPR[EPVAP]-1659848024616
GPR[EPVS]-1659848024616
========
newPos=chrono;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848024618
GPR[SPVAP]-1659848024618
GPR[EPVAP]-1659848025913
GPR[EPVS]-1659848025913
========
super();
newPos=chrono;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848025914
GPR[SPVAP]-1659848025914
GPR[EPVAP]-1659848027207
GPR[EPVS]-1659848027207
========
int defaultYear=chrono.year().roundCeiling(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848027210
GPR[SPVAP]-1659848027210
GPR[EPVAP]-1659848028497
GPR[EPVS]-1659848028497
========
int defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848028500
GPR[SPVAP]-1659848028500
GPR[EPVAP]-1659848029773
GPR[EPVS]-1659848029773
========
char defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848029775
GPR[SPVAP]-1659848029775
GPR[EPVAP]-1659848031099
GPR[EPVS]-1659848031099
========
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848031101
GPR[SPVAP]-1659848031101
GPR[EPVAP]-1659848032381
GPR[EPVS]-1659848032381
========
if(position>=text.length()){
return ~position;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848032383
GPR[SPVAP]-1659848032383
GPR[EPVAP]-1659848035696
GPR[SPVATF]-1659848035696
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848038233
GPR[EPVS]-1659848038233
========
char defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848038234
GPR[SPVAP]-1659848038234
GPR[EPVAP]-1659848039545
GPR[EPVS]-1659848039545
========
if(position>=text.length()){
return ~position;
}
int defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848039547
GPR[SPVAP]-1659848039547
GPR[EPVAP]-1659848040864
GPR[EPVS]-1659848040864
========
if(position>=text.length()){
return ~position;
}
char defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848040865
GPR[SPVAP]-1659848040865
GPR[EPVAP]-1659848042148
GPR[EPVS]-1659848042148
========
if(position>=text.length()){
return ~position;
}
char defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848042150
GPR[SPVAP]-1659848042150
GPR[EPVAP]-1659848043471
GPR[EPVS]-1659848043471
========
if(!text.equals(iZone.getID())){
return true;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848043473
GPR[SPVAP]-1659848043473
GPR[EPVAP]-1659848044790
GPR[EPVS]-1659848044790
========
chrono=selectChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848044792
GPR[SPVAP]-1659848044792
GPR[EPVAP]-1659848048142
GPR[SPVATF]-1659848048143
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848050881
GPR[EPVS]-1659848050881
========
chrono=DateTimeUtils.getChronology(chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848050883
GPR[SPVAP]-1659848050883
GPR[EPVAP]-1659848052180
GPR[EPVS]-1659848052180
========
chrono=DateTimeUtils.getChronology(chrono);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848052181
GPR[SPVAP]-1659848052181
GPR[EPVAP]-1659848053487
GPR[EPVS]-1659848053487
========
int defaultYear=chronology.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848053489
GPR[SPVAP]-1659848053489
GPR[EPVAP]-1659848054767
GPR[EPVS]-1659848054767
========
chrono=DateTimeUtils.getChronology(chronology);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848054768
GPR[SPVAP]-1659848054769
GPR[EPVAP]-1659848056069
GPR[EPVS]-1659848056069
========
chrono=chronology.withUTC();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848056071
GPR[SPVAP]-1659848056071
GPR[EPVAP]-1659848057403
GPR[EPVS]-1659848057403
========
instantMillis=chrono.millisOfDay().get(instantLocal);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848057404
GPR[SPVAP]-1659848057404
GPR[EPVAP]-1659848060805
GPR[SPVATF]-1659848060805
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848063339
GPR[EPVS]-1659848063339
========
instantMillis=chrono.millisOfDay().get(instantLocal);
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848063340
GPR[SPVAP]-1659848063340
GPR[EPVAP]-1659848064675
GPR[EPVS]-1659848064675
========
newPos=chrono;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848064676
GPR[SPVAP]-1659848064676
GPR[EPVAP]-1659848065991
GPR[EPVS]-1659848065991
========
instantMillis=chrono.millisOfDay().get(instantLocal);
newPos=chrono;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848065993
GPR[SPVAP]-1659848065993
GPR[EPVAP]-1659848067295
GPR[EPVS]-1659848067295
========
instantMillis=chrono.millisOfDay().get(instantLocal);
newPos=chrono;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848067296
GPR[SPVAP]-1659848067296
GPR[EPVAP]-1659848068605
GPR[EPVS]-1659848068605
========
if(newPos>23){
return ~position;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848068607
GPR[SPVAP]-1659848068607
GPR[EPVAP]-1659848069896
GPR[EPVS]-1659848069896
========
iZone=DateTimeUtils.getZone(zone);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848069898
GPR[SPVAP]-1659848069898
GPR[EPVAP]-1659848071227
GPR[EPVS]-1659848071227
========
instantLocal=chrono.set(this,instant);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848071249
GPR[SPVAP]-1659848071249
GPR[EPVAP]-1659848073605
GPR[EPVS]-1659848073605
========
instant+=iDefaultYear;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848073607
GPR[SPVAP]-1659848073607
GPR[EPVAP]-1659848074898
GPR[EPVS]-1659848074898
========
instantMillis=chrono.millisOfDay().set(next,0);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848074911
GPR[SPVAP]-1659848074911
GPR[EPVAP]-1659848076219
GPR[EPVS]-1659848076219
========
instantMillis=chrono.millisOfDay().set(prev,0);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848076221
GPR[SPVAP]-1659848076221
GPR[EPVAP]-1659848077523
GPR[EPVS]-1659848077523
========
instant+=iDefaultYear;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848077524
GPR[SPVAP]-1659848077524
GPR[EPVAP]-1659848078805
GPR[EPVS]-1659848078805
========
if(getWrappedField().get(instantLocal)>=0){
return value/iDefaultYear;
}else {
return ((value+1)/iDivisor)-1;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848078808
GPR[SPVAP]-1659848078808
GPR[EPVAP]-1659848080119
GPR[EPVS]-1659848080119
========
if(getWrappedField().get(instantLocal)>=0){
return value%iDefaultYear;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848080120
GPR[SPVAP]-1659848080120
GPR[EPVAP]-1659848081425
GPR[EPVS]-1659848081425
========
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(instantMillis==toDurationMillis()){
return this;
}
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848081428
GPR[SPVAP]-1659848081428
GPR[EPVAP]-1659848082753
GPR[EPVS]-1659848082753
========
newPos=PeriodType.standard();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848082754
GPR[SPVAP]-1659848082754
GPR[EPVAP]-1659848084039
GPR[EPVS]-1659848084039
========
instantLocal=chrono.set(this,instant);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848084041
GPR[SPVAP]-1659848084041
GPR[EPVAP]-1659848085329
GPR[EPVS]-1659848085329
========
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(instantMillis==toDurationMillis()){
return this;
}
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848085341
GPR[SPVAP]-1659848085341
GPR[EPVAP]-1659848086651
GPR[EPVS]-1659848086651
========
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(instantMillis==toDurationMillis()){
return this;
}
long newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848086652
GPR[SPVAP]-1659848086652
GPR[EPVAP]-1659848087962
GPR[EPVS]-1659848087962
========
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(instantMillis==toDurationMillis()){
return this;
}
long newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848087964
GPR[SPVAP]-1659848087964
GPR[EPVAP]-1659848089296
GPR[EPVS]-1659848089296
========
super.setInterval(instantMillis,instantLocal,chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848089299
GPR[SPVAP]-1659848089299
GPR[EPVAP]-1659848090623
GPR[EPVS]-1659848090623
========
instantMillis=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,chrono),chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848090625
GPR[SPVAP]-1659848090625
GPR[EPVAP]-1659848091935
GPR[EPVS]-1659848091936
========
if(instantMillis!=instantLocal){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848091938
GPR[SPVAP]-1659848091938
GPR[EPVAP]-1659848095359
GPR[SPVATF]-1659848095359
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848097925
GPR[EPVS]-1659848097925
========
if(instantMillis!=instantLocal){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848097927
GPR[SPVAP]-1659848097927
GPR[EPVAP]-1659848099216
GPR[EPVS]-1659848099216
========
if(instantMillis!=instantLocal){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848099218
GPR[SPVAP]-1659848099218
GPR[EPVAP]-1659848100536
GPR[EPVS]-1659848100536
========
if(instantMillis!=instantLocal){
throw new IllegalArgumentException("The addition exceeded the boundaries of LocalTime");
}
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848100537
GPR[SPVAP]-1659848100537
GPR[EPVAP]-1659848101860
GPR[EPVS]-1659848101860
========
int defaultYear=chrono.year().substring(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848101863
GPR[SPVAP]-1659848101863
GPR[EPVAP]-1659848103168
GPR[EPVS]-1659848103168
========
for(String text : ALL_IDS){
if(text.substring(position).startsWith(id)){
if(null==null||id.length()>best.length()){
best=id;
}
}
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848103169
GPR[SPVAP]-1659848103169
GPR[EPVAP]-1659848104489
GPR[EPVS]-1659848104489
========
int defaultYear=chrono.year().getChronology(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848104491
GPR[SPVAP]-1659848104491
GPR[EPVAP]-1659848105817
GPR[EPVS]-1659848105817
========
chrono=chrono.withZone(iZone);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848105820
GPR[SPVAP]-1659848105820
GPR[EPVAP]-1659848109174
GPR[SPVATF]-1659848109174
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848111745
GPR[EPVS]-1659848111745
========
chrono=chrono.withZone(iZone);
int defaultYear=chrono.year().getChronology(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848111746
GPR[SPVAP]-1659848111746
GPR[EPVAP]-1659848113049
GPR[EPVS]-1659848113049
========
int defaultYear=chrono.year().nextTransition(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848113052
GPR[SPVAP]-1659848113052
GPR[EPVAP]-1659848114360
GPR[EPVS]-1659848114360
========
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(nextTransition(instantLocal-iDefaultYear)==(instantLocal-iDefaultYear)){
nextLocal=Long.MAX_VALUE;
}
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848114362
GPR[SPVAP]-1659848114362
GPR[EPVAP]-1659848115661
GPR[EPVS]-1659848115662
========
int defaultYear=chrono.year().getFieldType(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848115663
GPR[SPVAP]-1659848115663
GPR[EPVAP]-1659848116989
GPR[EPVS]-1659848116989
========
long defaultYear=chrono.year().nextTransition(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848116991
GPR[SPVAP]-1659848116991
GPR[EPVAP]-1659848118276
GPR[EPVS]-1659848118276
========
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848118279
GPR[SPVAP]-1659848118279
GPR[EPVAP]-1659848121641
GPR[SPVATF]-1659848121641
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848124212
GPR[EPVS]-1659848124212
========
if(text==null){
return null;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848124215
GPR[SPVAP]-1659848124215
GPR[EPVAP]-1659848125540
GPR[EPVS]-1659848125540
========
instantLocal=chrono.dayOfMonth().roundFloor(instant);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848125542
GPR[SPVAP]-1659848125542
GPR[EPVAP]-1659848126851
GPR[EPVS]-1659848126851
========
int defaultYear=iBase.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848126854
GPR[SPVAP]-1659848126854
GPR[EPVAP]-1659848128168
GPR[EPVS]-1659848128168
========
int defaultYear=chrono.year().convertUTCToLocal(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848128169
GPR[SPVAP]-1659848128169
GPR[EPVAP]-1659848129473
GPR[EPVS]-1659848129473
========
instantMillis=getType().getField(iChrono.withUTC()).add(localInstant,FieldUtils.safeSubtract(position,get(instantLocal)));
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848129475
GPR[SPVAP]-1659848129475
GPR[EPVAP]-1659848130788
GPR[EPVS]-1659848130788
========
if(newPos<'0'||c>'9'){
return ~position;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848130790
GPR[SPVAP]-1659848130790
GPR[EPVAP]-1659848132088
GPR[EPVS]-1659848132088
========
if(newPos<'0'||c>'9'){
break;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848132090
GPR[SPVAP]-1659848132090
GPR[EPVAP]-1659848133369
GPR[EPVS]-1659848133369
========
iDefaultYear++;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848133371
GPR[SPVAP]-1659848133371
GPR[EPVAP]-1659848134684
GPR[EPVS]-1659848134684
========
instantLocal=monthOfYear().set(instant,position);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848134685
GPR[SPVAP]-1659848134685
GPR[EPVAP]-1659848135981
GPR[EPVS]-1659848135981
========
instantLocal=dayOfMonth().set(instant,iDefaultYear);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848135984
GPR[SPVAP]-1659848135984
GPR[EPVAP]-1659848137297
GPR[EPVS]-1659848137297
========
if(instant==null){
return ISOChronology.getInstance();
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848137300
GPR[SPVAP]-1659848137300
GPR[EPVAP]-1659848138608
GPR[EPVS]-1659848138608
========
if(chrono==null){
return ISOChronology.getInstance();
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848138609
GPR[SPVAP]-1659848138609
GPR[EPVAP]-1659848139922
GPR[EPVS]-1659848139922
========
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
char newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848139924
GPR[SPVAP]-1659848139924
GPR[EPVAP]-1659848141243
GPR[EPVS]-1659848141243
========
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
iDefaultYear=0;
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848141244
GPR[SPVAP]-1659848141244
GPR[EPVAP]-1659848142525
GPR[EPVS]-1659848142525
========
if(iDefaultYear<=0){
return 0;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848142528
GPR[SPVAP]-1659848142528
GPR[EPVAP]-1659848147809
GPR[SPVATF]-1659848147809
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848150370
GPR[EPVS]-1659848150370
========
iDefaultYear--;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848150371
GPR[SPVAP]-1659848150371
GPR[EPVAP]-1659848151677
GPR[EPVS]-1659848151677
========
if(iDefaultYear<=0){
return 0;
}
int defaultYear=chrono.year().charAt(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848151679
GPR[SPVAP]-1659848151679
GPR[EPVAP]-1659848152975
GPR[EPVS]-1659848152975
========
checkLimits(instantLocal,null);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848152977
GPR[SPVAP]-1659848152977
GPR[EPVAP]-1659848154306
GPR[EPVS]-1659848154306
========
checkLimits(getWrappedField().set(instantLocal,text,iLocale),"resulting");
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848154307
GPR[SPVAP]-1659848154307
GPR[EPVAP]-1659848155605
GPR[EPVS]-1659848155605
========
instant=monthOfYear().set(instant,position);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848155608
GPR[SPVAP]-1659848155608
GPR[EPVAP]-1659848156947
GPR[EPVS]-1659848156947
========
instant=dayOfMonth().set(instant,iDefaultYear);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848156948
GPR[SPVAP]-1659848156948
GPR[EPVAP]-1659848158228
GPR[EPVS]-1659848158228
========
instant=hourOfDay().set(instant,iDefaultYear);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848158230
GPR[SPVAP]-1659848158230
GPR[EPVAP]-1659848159534
GPR[EPVS]-1659848159534
========
instant=minuteOfHour().set(instant,defaultYear);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848159536
GPR[SPVAP]-1659848159536
GPR[EPVAP]-1659848160850
GPR[EPVS]-1659848160850
========
instant=secondOfMinute().set(instant,iDefaultYear);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848160852
GPR[SPVAP]-1659848160852
GPR[EPVAP]-1659848162169
GPR[EPVS]-1659848162169
========
if(text.charAt(position)=='-'){
newPos=true;
}else if(c=='+'){
negative=false;
}else {
return ~position;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848162171
GPR[SPVAP]-1659848162171
GPR[EPVAP]-1659848163530
GPR[EPVS]-1659848163530
========
setMillis(instant);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848163534
GPR[SPVAP]-1659848163534
GPR[EPVAP]-1659848164841
GPR[EPVS]-1659848164841
========
checkLimits(instant,"resulting");
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848164843
GPR[SPVAP]-1659848164843
GPR[EPVAP]-1659848166165
GPR[EPVS]-1659848166165
========
chrono=checkChronology(iChrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848166167
GPR[SPVAP]-1659848166167
GPR[EPVAP]-1659848167463
GPR[EPVS]-1659848167464
========
newPos=checkInstant(instant,chrono);
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848167465
GPR[SPVAP]-1659848167465
GPR[EPVAP]-1659848168791
GPR[EPVS]-1659848168791
========
super();
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848168792
GPR[SPVAP]-1659848168792
GPR[EPVAP]-1659848170117
GPR[EPVS]-1659848170117
========
if(iDefaultYear==0&&!iOffsetParsed){
break;
}else if(count<2){
return ~position;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848170119
GPR[SPVAP]-1659848170119
GPR[EPVAP]-1659848171441
GPR[EPVS]-1659848171441
========
if(newPos>59){
return ~position;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848171443
GPR[SPVAP]-1659848171443
GPR[EPVAP]-1659848172752
GPR[EPVS]-1659848172752
========
if(iDefaultYear==0&&!iOffsetParsed){
break;
}else if(count<2){
return ~position;
}
if(newPos>59){
return ~position;
}
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848172753
GPR[SPVAP]-1659848172754
GPR[EPVAP]-1659848174053
GPR[EPVS]-1659848174053
========
setDate(chrono.getDateTimeMillis(iDefaultYear,position,iDefaultYear,0));
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848174076
GPR[SPVAP]-1659848174076
GPR[EPVAP]-1659848175384
GPR[EPVS]-1659848175384
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848175386
GPR[SPVAP]-1659848175386
GPR[EPVAP]-1659848176711
GPR[EPVS]-1659848176711
========
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848176713
GPR[SPVAP]-1659848176713
GPR[EPVAP]-1659848178041
GPR[EPVS]-1659848178041
========
super();
newPos=chrono;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848178042
GPR[SPVAP]-1659848178042
GPR[EPVAP]-1659848179345
GPR[EPVS]-1659848179345
========
checkLimits(instant,"resulting");
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848179348
GPR[SPVAP]-1659848179348
GPR[EPVAP]-1659848180629
GPR[EPVS]-1659848180629
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848180633
GPR[SPVAP]-1659848180633
GPR[EPVAP]-1659848181967
GPR[EPVS]-1659848181967
========
instantMillis=instant;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848181968
GPR[SPVAP]-1659848181968
GPR[EPVAP]-1659848183273
GPR[EPVS]-1659848183273
========
super();
chrono=DateTimeUtils.getChronology(chronology).withUTC();
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848183275
GPR[SPVAP]-1659848183275
GPR[EPVAP]-1659848184597
GPR[EPVS]-1659848184597
========
super();
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848184598
GPR[SPVAP]-1659848184599
GPR[EPVAP]-1659848185888
GPR[EPVS]-1659848185888
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
newPos=chrono;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848185890
GPR[SPVAP]-1659848185890
GPR[EPVAP]-1659848187206
GPR[EPVS]-1659848187206
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848187209
GPR[SPVAP]-1659848187209
GPR[EPVAP]-1659848188565
GPR[EPVS]-1659848188565
========
newPos=chrono;
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848188566
GPR[SPVAP]-1659848188566
GPR[EPVAP]-1659848189875
GPR[EPVS]-1659848189875
========
super();
chrono=DateTimeUtils.getChronology(chronology).withUTC();
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848189877
GPR[SPVAP]-1659848189877
GPR[EPVAP]-1659848191180
GPR[EPVS]-1659848191180
========
super();
instantMillis=instant;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848191182
GPR[SPVAP]-1659848191182
GPR[EPVAP]-1659848192485
GPR[EPVS]-1659848192485
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
newPos=chrono;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848192487
GPR[SPVAP]-1659848192487
GPR[EPVAP]-1659848193771
GPR[EPVS]-1659848193771
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
instantMillis=instant;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848193772
GPR[SPVAP]-1659848193772
GPR[EPVAP]-1659848195091
GPR[EPVS]-1659848195092
========
newPos=chrono;
instantMillis=instant;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848195093
GPR[SPVAP]-1659848195093
GPR[EPVAP]-1659848196397
GPR[EPVS]-1659848196397
========
super();
chrono=DateTimeUtils.getChronology(chronology).withUTC();
newPos=chrono;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848196398
GPR[SPVAP]-1659848196398
GPR[EPVAP]-1659848197707
GPR[EPVS]-1659848197707
========
super();
chrono=DateTimeUtils.getChronology(chronology).withUTC();
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848197709
GPR[SPVAP]-1659848197709
GPR[EPVAP]-1659848199105
GPR[EPVS]-1659848199105
========
super();
newPos=chrono;
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848199106
GPR[SPVAP]-1659848199106
GPR[EPVAP]-1659848200397
GPR[EPVS]-1659848200397
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
newPos=chrono;
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848200398
GPR[SPVAP]-1659848200398
GPR[EPVAP]-1659848201687
GPR[EPVS]-1659848201687
========
super();
chrono=DateTimeUtils.getChronology(chronology).withUTC();
newPos=chrono;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848201688
GPR[SPVAP]-1659848201688
GPR[EPVAP]-1659848203011
GPR[EPVS]-1659848203011
========
super();
chrono=DateTimeUtils.getChronology(chronology).withUTC();
instantMillis=instant;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848203013
GPR[SPVAP]-1659848203013
GPR[EPVAP]-1659848204313
GPR[EPVS]-1659848204313
========
super();
newPos=chrono;
instantMillis=instant;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848204315
GPR[SPVAP]-1659848204315
GPR[EPVAP]-1659848205628
GPR[EPVS]-1659848205629
========
chrono=DateTimeUtils.getChronology(chronology).withUTC();
newPos=chrono;
instantMillis=instant;
long defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848205630
GPR[SPVAP]-1659848205630
GPR[EPVAP]-1659848206908
GPR[EPVS]-1659848206908
========
super();
chrono=DateTimeUtils.getChronology(chronology).withUTC();
newPos=chrono;
instantMillis=instant;
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848206909
GPR[SPVAP]-1659848206910
GPR[EPVAP]-1659848208265
GPR[EPVS]-1659848208265
========
case SECONDS_MILLIS :

int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848208267
GPR[SPVAP]-1659848208267
GPR[EPVAP]-1659848209409
GPR[EPVS]-1659848209409
========
setMillis(getChronology().millisOfDay().set(getMillis(),defaultYear));
int defaultYear=chrono.year().get(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);

========
MM Copying to MM
GPR[SPVS]-1659848209416
GPR[SPVAP]-1659848209416
GPR[EPVAP]-1659848210755
GPR[EPVS]-1659848210755
GPR[ESUN]-1659848210758
GPR[SSUN]-1659848210758
org.joda.time.format.DateTimeFormatter,714
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(parser==null){
if(iDefaultYear<=position){
return position;
}
iOffsetParsed=true;
break;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848211857
GPR[SPVAP]-1659848211857
GPR[EPVAP]-1659848214282
GPR[EPVS]-1659848214282
========
if(position<0){
return position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848214285
GPR[SPVAP]-1659848214285
GPR[EPVAP]-1659848224617
GPR[SPVATF]-1659848224617
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848227158
GPR[EPVS]-1659848227158
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
newPos=position;
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848227159
GPR[SPVAP]-1659848227159
GPR[EPVAP]-1659848229685
GPR[SPVATF]-1659848229685
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848231365
GPR[EPVS]-1659848231365
========
if(position<0){
return position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
newPos=position;
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848231366
GPR[SPVAP]-1659848231366
GPR[EPVAP]-1659848233904
GPR[SPVATF]-1659848233904
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848235582
GPR[EPVS]-1659848235582
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
char newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848235584
GPR[SPVAP]-1659848235584
GPR[EPVAP]-1659848236890
GPR[EPVS]-1659848236890
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848236893
GPR[SPVAP]-1659848236893
GPR[EPVAP]-1659848238169
GPR[EPVS]-1659848238169
========
setMillis(instantMillis);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848238170
GPR[SPVAP]-1659848238170
GPR[EPVAP]-1659848239448
GPR[EPVS]-1659848239448
========
setMillis(instant);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848239450
GPR[SPVAP]-1659848239450
GPR[EPVAP]-1659848240770
GPR[EPVS]-1659848240770
========
if(newPos>23){
return ~position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848240772
GPR[SPVAP]-1659848240772
GPR[EPVAP]-1659848242080
GPR[EPVS]-1659848242080
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(position>=text.length()){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848242082
GPR[SPVAP]-1659848242082
GPR[EPVAP]-1659848245434
GPR[SPVATF]-1659848245434
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848247977
GPR[EPVS]-1659848247977
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(position>=text.length()){
return ~position;
}
char newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848247979
GPR[SPVAP]-1659848247979
GPR[EPVAP]-1659848249281
GPR[EPVS]-1659848249281
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.charAt(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848249283
GPR[SPVAP]-1659848249283
GPR[EPVAP]-1659848250593
GPR[EPVS]-1659848250593
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
if(iDefaultYear<=0){
break;
}
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848250595
GPR[SPVAP]-1659848250595
GPR[EPVAP]-1659848251908
GPR[EPVS]-1659848251908
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
if(iOffsetParsed){
position++;
}
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848251911
GPR[SPVAP]-1659848251911
GPR[EPVAP]-1659848255267
GPR[SPVATF]-1659848255267
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848257780
GPR[EPVS]-1659848257780
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
if(iOffsetParsed){
position++;
}
instant.charAt(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848257781
GPR[SPVAP]-1659848257781
GPR[EPVAP]-1659848259079
GPR[EPVS]-1659848259079
========
setMillis(instant);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848259081
GPR[SPVAP]-1659848259081
GPR[EPVAP]-1659848260362
GPR[EPVS]-1659848260362
========
for(String text : ALL_IDS){
if(text.substring(position).startsWith(id)){
if(null==null||id.length()>best.length()){
best=id;
}
}
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848260364
GPR[SPVAP]-1659848260364
GPR[EPVAP]-1659848261676
GPR[EPVS]-1659848261676
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
if(iOffsetParsed){
iDefaultYear++;
}else {
position++;
}
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848261678
GPR[SPVAP]-1659848261678
GPR[EPVAP]-1659848262976
GPR[EPVS]-1659848262976
========
if(text.charAt(position)<'0'||c>'9'){
return ~position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848262978
GPR[SPVAP]-1659848262978
GPR[EPVAP]-1659848264265
GPR[EPVS]-1659848264265
========
if(text.charAt(position+iDefaultYear)<'0'||c>'9'){
break;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848264266
GPR[SPVAP]-1659848264266
GPR[EPVAP]-1659848265557
GPR[EPVS]-1659848265557
========
iDefaultYear++;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848265558
GPR[SPVAP]-1659848265558
GPR[EPVAP]-1659848266855
GPR[EPVS]-1659848266855
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
position+=iDefaultYear;
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848266857
GPR[SPVAP]-1659848266857
GPR[EPVAP]-1659848270183
GPR[SPVATF]-1659848270183
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848272708
GPR[EPVS]-1659848272708
========
instantMillis=instantLocal;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848272710
GPR[SPVAP]-1659848272710
GPR[EPVAP]-1659848275989
GPR[SPVATF]-1659848275989
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848278513
GPR[EPVS]-1659848278513
========
iZone=chrono.getZone();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848278515
GPR[SPVAP]-1659848278515
GPR[EPVAP]-1659848279833
GPR[EPVS]-1659848279833
========
iChrono=chrono.withUTC();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848279834
GPR[SPVAP]-1659848279834
GPR[EPVAP]-1659848281137
GPR[EPVS]-1659848281137
========
iLocale=(iLocale==null?Locale.getDefault():locale);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848281139
GPR[SPVAP]-1659848281139
GPR[EPVAP]-1659848282423
GPR[EPVS]-1659848282423
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(iDefaultYear<=0){
return 0;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848282425
GPR[SPVAP]-1659848282425
GPR[EPVAP]-1659848285809
GPR[SPVATF]-1659848285809
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848288328
GPR[EPVS]-1659848288328
========
iDefaultYear--;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848288330
GPR[SPVAP]-1659848288330
GPR[EPVAP]-1659848289631
GPR[EPVS]-1659848289631
========
if(position>=0){
iOffsetParsed=true;
}else {
if(!mustParse){
return ~position;
}
return position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848289635
GPR[SPVAP]-1659848289635
GPR[EPVAP]-1659848290968
GPR[EPVS]-1659848290968
========
if(iDefaultYear>=0){
iOffsetParsed=true;
}else {
if(!mustParse){
return ~suffixPos;
}
return suffixPos;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848290977
GPR[SPVAP]-1659848290977
GPR[EPVAP]-1659848293354
GPR[EPVS]-1659848293354
========
iDefaultYear=0;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848293356
GPR[SPVAP]-1659848293356
GPR[EPVAP]-1659848294673
GPR[EPVS]-1659848294673
========
checkLimits(getWrappedField().set(instantLocal,text,iLocale),"resulting");
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848294675
GPR[SPVAP]-1659848294675
GPR[EPVAP]-1659848295967
GPR[EPVS]-1659848295967
========
if(iPivotYear!=null){
return era.intValue();
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848295969
GPR[SPVAP]-1659848295969
GPR[EPVAP]-1659848297278
GPR[EPVS]-1659848297278
========
if(iPivotYear!=null){
return month.intValue();
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848297280
GPR[SPVAP]-1659848297280
GPR[EPVAP]-1659848298581
GPR[EPVS]-1659848298581
========
if(iPivotYear!=null){
return day.intValue();
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848298582
GPR[SPVAP]-1659848298582
GPR[EPVAP]-1659848299900
GPR[EPVS]-1659848299900
========
if(text.charAt(position)=='-'){
iOffsetParsed=true;
}else if(c=='+'){
negative=false;
}else {
return ~position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848299902
GPR[SPVAP]-1659848299902
GPR[EPVAP]-1659848301216
GPR[EPVS]-1659848301216
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
super();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848301218
GPR[SPVAP]-1659848301218
GPR[EPVAP]-1659848302528
GPR[EPVS]-1659848302528
========
iChrono=chrono;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848302530
GPR[SPVAP]-1659848302530
GPR[EPVAP]-1659848303839
GPR[EPVS]-1659848303839
========
instantMillis=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,chrono),chrono);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848303840
GPR[SPVAP]-1659848303840
GPR[EPVAP]-1659848305125
GPR[EPVS]-1659848305125
========
setPeriod(instantLocal,chrono);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848305128
GPR[SPVAP]-1659848305128
GPR[EPVAP]-1659848306404
GPR[EPVS]-1659848306404
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(iDefaultYear==0&&!iOffsetParsed){
break;
}else if(count<2){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848306407
GPR[SPVAP]-1659848306407
GPR[EPVAP]-1659848307689
GPR[EPVS]-1659848307689
========
if(newPos>59){
return ~position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848307691
GPR[SPVAP]-1659848307691
GPR[EPVAP]-1659848308992
GPR[EPVS]-1659848308992
========
if(newPos>59){
return ~position;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(iDefaultYear==0&&!iOffsetParsed){
break;
}else if(count<2){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848308994
GPR[SPVAP]-1659848308994
GPR[EPVAP]-1659848310289
GPR[EPVS]-1659848310289
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=iFieldType.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848310291
GPR[SPVAP]-1659848310291
GPR[EPVAP]-1659848311640
GPR[EPVS]-1659848311640
========
super.setInterval(instantLocal,instantMillis,chrono);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848311643
GPR[SPVAP]-1659848311643
GPR[EPVAP]-1659848312946
GPR[EPVS]-1659848312946
========
if(iZone==DateTimeUtils.getZone(getZone())){
return ;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848312948
GPR[SPVAP]-1659848312948
GPR[EPVAP]-1659848314226
GPR[EPVS]-1659848314226
========
setChronology(getChronology().withZone(iZone));
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848314227
GPR[SPVAP]-1659848314227
GPR[EPVAP]-1659848315541
GPR[EPVS]-1659848315541
========
setMillis(instantLocal);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848315543
GPR[SPVAP]-1659848315543
GPR[EPVAP]-1659848316852
GPR[EPVS]-1659848316852
========
setValues(chrono.get(this,instantLocal,instantMillis));
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848316854
GPR[SPVAP]-1659848316854
GPR[EPVAP]-1659848318159
GPR[EPVS]-1659848318160
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
if((instant^instantLocal)<0&&(instant^defaultYear)>=0){
iZone=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848318161
GPR[SPVAP]-1659848318161
GPR[EPVAP]-1659848319487
GPR[EPVS]-1659848319487
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
iChrono=chrono;
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848319489
GPR[SPVAP]-1659848319489
GPR[EPVAP]-1659848320777
GPR[EPVS]-1659848320777
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
super();
int newPos=parser.parseInto(bucket,text,position);
iChrono=chrono;
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848320779
GPR[SPVAP]-1659848320779
GPR[EPVAP]-1659848322082
GPR[EPVS]-1659848322082
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
chrono=selectChronology(chrono);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848322084
GPR[SPVAP]-1659848322084
GPR[EPVAP]-1659848325454
GPR[SPVATF]-1659848325454
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848327998
GPR[EPVS]-1659848327998
========
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848327999
GPR[SPVAP]-1659848327999
GPR[EPVAP]-1659848329313
GPR[EPVS]-1659848329313
========
setValues(chrono.get(this,instantLocal));
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848329315
GPR[SPVAP]-1659848329315
GPR[EPVAP]-1659848330603
GPR[EPVS]-1659848330603
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
instantLocal+=iDefaultYear;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848330605
GPR[SPVAP]-1659848330605
GPR[EPVAP]-1659848333937
GPR[SPVATF]-1659848333937
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848336482
GPR[EPVS]-1659848336482
========
iChrono=new MutableInterval().getChronology();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848336484
GPR[SPVAP]-1659848336484
GPR[EPVAP]-1659848337760
GPR[EPVS]-1659848337760
========
instantMillis=new MutableInterval().getStartMillis();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848337762
GPR[SPVAP]-1659848337762
GPR[EPVAP]-1659848339071
GPR[EPVS]-1659848339071
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
out.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848339073
GPR[SPVAP]-1659848339073
GPR[EPVAP]-1659848340377
GPR[EPVS]-1659848340377
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.println(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848340379
GPR[SPVAP]-1659848340379
GPR[EPVAP]-1659848341682
GPR[EPVS]-1659848341682
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.get(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848341684
GPR[SPVAP]-1659848341684
GPR[EPVAP]-1659848343016
GPR[EPVS]-1659848343016
========
if(instantMillis==toDurationMillis()){
return this;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848343018
GPR[SPVAP]-1659848343018
GPR[EPVAP]-1659848344317
GPR[EPVS]-1659848344317
========
chrono=chrono.withUTC();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848344319
GPR[SPVAP]-1659848344319
GPR[EPVAP]-1659848347665
GPR[SPVATF]-1659848347665
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848350198
GPR[EPVS]-1659848350198
========
super.setInterval(instantLocal,instantMillis,chrono);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848350199
GPR[SPVAP]-1659848350199
GPR[EPVAP]-1659848351513
GPR[EPVS]-1659848351513
========
if(instantMillis==toDurationMillis()){
return this;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
long newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848351514
GPR[SPVAP]-1659848351514
GPR[EPVAP]-1659848352820
GPR[EPVS]-1659848352820
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
chrono!=null?null:instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848352823
GPR[SPVAP]-1659848352823
GPR[EPVAP]-1659848353955
GPR[EPVS]-1659848353956
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
super();
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848353958
GPR[SPVAP]-1659848353958
GPR[EPVAP]-1659848355265
GPR[EPVS]-1659848355265
========
checkInterval(instantLocal,instantMillis);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848355267
GPR[SPVAP]-1659848355267
GPR[EPVAP]-1659848356565
GPR[EPVS]-1659848356565
========
instantMillis=instantMillis;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848356566
GPR[SPVAP]-1659848356566
GPR[EPVAP]-1659848359938
GPR[SPVATF]-1659848359938
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848362432
GPR[EPVS]-1659848362432
========
instantMillis=instantLocal;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
super();
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848362434
GPR[SPVAP]-1659848362434
GPR[EPVAP]-1659848364159
GPR[EPVS]-1659848364160
========
instantMillis=instantMillis;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
super();
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848364170
GPR[SPVAP]-1659848364170
GPR[EPVAP]-1659848366104
GPR[EPVS]-1659848366104
========
instantMillis=instantLocal;
instantMillis=instantMillis;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848366106
GPR[SPVAP]-1659848366106
GPR[EPVAP]-1659848369458
GPR[SPVATF]-1659848369458
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848371963
GPR[EPVS]-1659848371963
========
instantMillis=instantLocal;
instantMillis=instantMillis;
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
super();
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848371965
GPR[SPVAP]-1659848371965
GPR[EPVAP]-1659848373300
GPR[EPVS]-1659848373300
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setChronology(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848373301
GPR[SPVAP]-1659848373301
GPR[EPVAP]-1659848374607
GPR[EPVS]-1659848374607
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
if(iDefaultYear==0&&!iOffsetParsed){
break;
}else if(count<1){
return ~position;
}
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848374609
GPR[SPVAP]-1659848374610
GPR[EPVAP]-1659848375924
GPR[EPVS]-1659848375924
========
instantMillis=chrono.millisOfDay().set(millis,iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848375926
GPR[SPVAP]-1659848375926
GPR[EPVAP]-1659848377248
GPR[EPVS]-1659848377248
========
instantMillis=setDayOfMonth(chrono,millis);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848377249
GPR[SPVAP]-1659848377249
GPR[EPVAP]-1659848378534
GPR[EPVS]-1659848378534
========
if(chrono.getZone()!=iZone){
setChronology(chrono.withZone(newZone));
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848378536
GPR[SPVAP]-1659848378536
GPR[EPVAP]-1659848379845
GPR[EPVS]-1659848379845
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
checkInterval(instantLocal,instantMillis);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848379847
GPR[SPVAP]-1659848379847
GPR[EPVAP]-1659848381143
GPR[EPVS]-1659848381143
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instantMillis=instantLocal;
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848381144
GPR[SPVAP]-1659848381144
GPR[EPVAP]-1659848384457
GPR[SPVATF]-1659848384457
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848386961
GPR[EPVS]-1659848386961
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instantMillis=instantMillis;
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848386962
GPR[SPVAP]-1659848386962
GPR[EPVAP]-1659848390333
GPR[SPVATF]-1659848390333
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848392862
GPR[EPVS]-1659848392862
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instantMillis=instantLocal;
instantMillis=instantMillis;
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848392864
GPR[SPVAP]-1659848392864
GPR[EPVAP]-1659848396205
GPR[SPVATF]-1659848396205
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848398752
GPR[EPVS]-1659848398752
========
chrono=DateTimeUtils.getChronology(chronology);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848398753
GPR[SPVAP]-1659848398753
GPR[EPVAP]-1659848400076
GPR[EPVS]-1659848400076
========
iChrono=chrono.withUTC();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
super();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848400077
GPR[SPVAP]-1659848400077
GPR[EPVAP]-1659848401387
GPR[EPVS]-1659848401387
========
iChrono=ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone).withUTC();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848401389
GPR[SPVAP]-1659848401389
GPR[EPVAP]-1659848402693
GPR[EPVS]-1659848402693
========
instantMillis=iChrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848402695
GPR[SPVAP]-1659848402695
GPR[EPVAP]-1659848404027
GPR[EPVS]-1659848404027
========
chrono=checkChronology(ConverterManager.getInstance().getInstantConverter(instant).getChronology(instant,iChrono));
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848404029
GPR[SPVAP]-1659848404029
GPR[EPVAP]-1659848405335
GPR[EPVS]-1659848405336
========
instantMillis=checkInstant(ConverterManager.getInstance().getInstantConverter(instant).getInstantMillis(instant,iChrono),chrono);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848405337
GPR[SPVAP]-1659848405337
GPR[EPVAP]-1659848406640
GPR[EPVS]-1659848406640
========
chrono=DateTimeUtils.getChronology(chronology);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
super();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848406642
GPR[SPVAP]-1659848406642
GPR[EPVAP]-1659848407990
GPR[EPVS]-1659848407990
========
chrono=DateTimeUtils.getChronology(chronology);
iChrono=chrono.withUTC();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848407991
GPR[SPVAP]-1659848407991
GPR[EPVAP]-1659848409287
GPR[EPVS]-1659848409287
========
chrono=DateTimeUtils.getChronology(chronology);
iChrono=chrono.withUTC();
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
super();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848409288
GPR[SPVAP]-1659848409288
GPR[EPVAP]-1659848410601
GPR[EPVS]-1659848410601
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
checkPrinter();
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848410602
GPR[SPVAP]-1659848410602
GPR[EPVAP]-1659848411907
GPR[EPVS]-1659848411907
========
instantMillis=iChrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848411910
GPR[SPVAP]-1659848411910
GPR[EPVAP]-1659848413225
GPR[EPVS]-1659848413225
========
instantMillis=iChrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,chrono,ISODateTimeFormat.localDateParser())[0],values[1],values[2],0);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848413226
GPR[SPVAP]-1659848413226
GPR[EPVAP]-1659848414536
GPR[EPVS]-1659848414536
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848414538
GPR[SPVAP]-1659848414538
GPR[EPVAP]-1659848417896
GPR[SPVATF]-1659848417896
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848420433
GPR[EPVS]-1659848420433
========
instantMillis=iChrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,ConverterManager.getInstance().getPartialConverter(instant).getChronology(instant,iZone),ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848420436
GPR[SPVAP]-1659848420436
GPR[EPVAP]-1659848421747
GPR[EPVS]-1659848421748
========
instantMillis=iChrono.getDateTimeMillis(ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,chrono,ISODateTimeFormat.localDateOptionalTimeParser())[0],values[1],values[2],values[3]);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848421749
GPR[SPVAP]-1659848421749
GPR[EPVAP]-1659848423056
GPR[EPVS]-1659848423056
========
if(nextTransition(instantLocal-iDefaultYear)==(instantLocal-iDefaultYear)){
nextLocal=Long.MAX_VALUE;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848423058
GPR[SPVAP]-1659848423058
GPR[EPVAP]-1659848424356
GPR[EPVS]-1659848424356
========
if(iZone==this){
return instantMillis;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848424358
GPR[SPVAP]-1659848424358
GPR[EPVAP]-1659848425653
GPR[EPVS]-1659848425653
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.append(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848425656
GPR[SPVAP]-1659848425656
GPR[EPVAP]-1659848426961
GPR[EPVS]-1659848426961
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.write(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848426962
GPR[SPVAP]-1659848426962
GPR[EPVAP]-1659848428261
GPR[EPVS]-1659848428261
========
instantMillis=iChrono.getDateTimeMillis(0L,ConverterManager.getInstance().getPartialConverter(instant).getPartialValues(this,instant,chrono,ISODateTimeFormat.localTimeParser())[0],values[1],values[2],values[3]);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848428263
GPR[SPVAP]-1659848428263
GPR[EPVAP]-1659848429595
GPR[EPVS]-1659848429595
========
instant=chrono.dayOfMonth().roundFloor(instant);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848429597
GPR[SPVAP]-1659848429597
GPR[EPVAP]-1659848430919
GPR[EPVS]-1659848430919
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.toUpperCase(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848430922
GPR[SPVAP]-1659848430922
GPR[EPVAP]-1659848432225
GPR[EPVS]-1659848432225
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.toLowerCase(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848432227
GPR[SPVAP]-1659848432227
GPR[EPVAP]-1659848433536
GPR[EPVS]-1659848433536
========
instant=chrono.monthOfYear().set(instant,defaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848433538
GPR[SPVAP]-1659848433538
GPR[EPVAP]-1659848434837
GPR[EPVS]-1659848434837
========
instant=chrono.dayOfMonth().set(instant,iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848434838
GPR[SPVAP]-1659848434838
GPR[EPVAP]-1659848436149
GPR[EPVS]-1659848436149
========
instant=chrono.monthOfYear().set(instant,defaultYear);
instant=chrono.dayOfMonth().set(instant,iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848436152
GPR[SPVAP]-1659848436152
GPR[EPVAP]-1659848437563
GPR[EPVS]-1659848437563
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
chrono=(chrono!=null?chrono:iChrono);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848437574
GPR[SPVAP]-1659848437574
GPR[EPVAP]-1659848441733
GPR[SPVATF]-1659848441733
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848444293
GPR[EPVS]-1659848444293
========
instant=chrono.minuteOfHour().set(instant,position);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848444295
GPR[SPVAP]-1659848444295
GPR[EPVAP]-1659848445603
GPR[EPVS]-1659848445603
========
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848445605
GPR[SPVAP]-1659848445605
GPR[EPVAP]-1659848446899
GPR[EPVS]-1659848446899
========
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848446900
GPR[SPVAP]-1659848446900
GPR[EPVAP]-1659848448190
GPR[EPVS]-1659848448191
========
instant=chrono.minuteOfHour().set(instant,position);
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848448192
GPR[SPVAP]-1659848448192
GPR[EPVAP]-1659848449511
GPR[EPVS]-1659848449512
========
instant=chrono.minuteOfHour().set(instant,position);
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848449513
GPR[SPVAP]-1659848449513
GPR[EPVAP]-1659848450815
GPR[EPVS]-1659848450815
========
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848450816
GPR[SPVAP]-1659848450816
GPR[EPVAP]-1659848452136
GPR[EPVS]-1659848452136
========
instant=chrono.minuteOfHour().set(instant,position);
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848452138
GPR[SPVAP]-1659848452138
GPR[EPVAP]-1659848453426
GPR[EPVS]-1659848453426
========
if(iChrono!=null){
chrono=iChrono;
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848453428
GPR[SPVAP]-1659848453428
GPR[EPVAP]-1659848456774
GPR[SPVATF]-1659848456774
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848459310
GPR[EPVS]-1659848459310
========
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848459311
GPR[SPVAP]-1659848459311
GPR[EPVAP]-1659848462601
GPR[SPVATF]-1659848462601
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848465200
GPR[EPVS]-1659848465200
========
if(iChrono!=null){
chrono=iChrono;
}
if(iZone!=null){
chrono=chrono.withZone(iZone);
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848465202
GPR[SPVAP]-1659848465202
GPR[EPVAP]-1659848468525
GPR[SPVATF]-1659848468525
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848471084
GPR[EPVS]-1659848471084
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
text==null?null:instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848471088
GPR[SPVAP]-1659848471088
GPR[EPVAP]-1659848472215
GPR[EPVS]-1659848472215
========
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
if(instant==null){
return ISOChronology.getInstance();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848472217
GPR[SPVAP]-1659848472217
GPR[EPVAP]-1659848473503
GPR[EPVS]-1659848473503
========
if(chrono==null){
return ISOChronology.getInstance();
}
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848473504
GPR[SPVAP]-1659848473504
GPR[EPVAP]-1659848474799
GPR[EPVS]-1659848474800
========
setMillis(getChronology().millisOfDay().set(getMillis(),defaultYear));
DateTimeParserBucket bucket=new DateTimeParserBucket(instantLocal,chrono,iLocale,iPivotYear,defaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));

========
MM Copying to MM
GPR[SPVS]-1659848474804
GPR[SPVAP]-1659848474804
GPR[EPVAP]-1659848476109
GPR[EPVS]-1659848476109
GPR[ESUN]-1659848476111
GPR[SSUN]-1659848476111
org.joda.time.format.DateTimeFormatter,715
========
if(bucket.getZone()==null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848477028
GPR[SPVAP]-1659848477028
GPR[EPVAP]-1659848484932
GPR[SPVATF]-1659848484932
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848487457
GPR[EPVS]-1659848487457
========
if(bucket.getZone()!=false){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848487458
GPR[SPVAP]-1659848487458
GPR[EPVAP]-1659848488757
GPR[EPVS]-1659848488757
========
if(bucket.getZone()==false){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848488759
GPR[SPVAP]-1659848488759
GPR[EPVAP]-1659848490069
GPR[EPVS]-1659848490069
========
if(chrono!=null&&chrono.getZone()==iZone){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848490814
GPR[SPVAP]-1659848490814
GPR[EPVAP]-1659848494188
GPR[SPVATF]-1659848494189
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848496696
GPR[EPVS]-1659848496696
========
if(chrono!=null&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848496697
GPR[SPVAP]-1659848496697
GPR[EPVAP]-1659848500005
GPR[SPVATF]-1659848500005
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848502540
GPR[EPVS]-1659848502540
========
if(iOffsetParsed&&chrono.getZone()==iZone){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848502542
GPR[SPVAP]-1659848502542
GPR[EPVAP]-1659848505867
GPR[SPVATF]-1659848505867
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848508374
GPR[EPVS]-1659848508374
========
if(next&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848508376
GPR[SPVAP]-1659848508376
GPR[EPVAP]-1659848509678
GPR[EPVS]-1659848509678
========
if(offset&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848509689
GPR[SPVAP]-1659848509689
GPR[EPVAP]-1659848512029
GPR[EPVS]-1659848512029
========
instantMillis-=getZone().getOffsetFromLocal(instantMillis);
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848512030
GPR[SPVAP]-1659848512030
GPR[EPVAP]-1659848513436
GPR[EPVS]-1659848513436
========
super.setInterval(parsedOffset,instantMillis,parsedZone);
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848513438
GPR[SPVAP]-1659848513438
GPR[EPVAP]-1659848514740
GPR[EPVS]-1659848514740
========
if(iDefaultYear==2&&iDefaultYear==29){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848514743
GPR[SPVAP]-1659848514743
GPR[EPVAP]-1659848518099
GPR[SPVATF]-1659848518099
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848520625
GPR[EPVS]-1659848520625
========
if(iDefaultYear==2&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848520626
GPR[SPVAP]-1659848520626
GPR[EPVAP]-1659848523943
GPR[SPVATF]-1659848523943
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848526470
GPR[EPVS]-1659848526470
========
if(iOffsetParsed&&iDefaultYear==29){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848526472
GPR[SPVAP]-1659848526472
GPR[EPVAP]-1659848529872
GPR[SPVATF]-1659848529872
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848532416
GPR[EPVS]-1659848532416
========
if(iMonthOfYear&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848532418
GPR[SPVAP]-1659848532418
GPR[EPVAP]-1659848533734
GPR[EPVS]-1659848533734
========
if(iMonthOfYear&&iDefaultYear==29){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848533736
GPR[SPVAP]-1659848533736
GPR[EPVAP]-1659848535041
GPR[EPVS]-1659848535041
========
if(limit&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848535044
GPR[SPVAP]-1659848535044
GPR[EPVAP]-1659848536337
GPR[EPVS]-1659848536337
========
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.charAt(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848536339
GPR[SPVAP]-1659848536339
GPR[EPVAP]-1659848537646
GPR[EPVS]-1659848537646
========
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
if(text.charAt(parsedOffset)=='-'||text.charAt(parsedOffset)=='+'){
break;
}
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848537648
GPR[SPVAP]-1659848537648
GPR[EPVAP]-1659848538929
GPR[EPVS]-1659848538929
========
if(bestValidPos&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848538933
GPR[SPVAP]-1659848538933
GPR[EPVAP]-1659848540235
GPR[EPVS]-1659848540235
========
if(iDayOfWeek&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848540237
GPR[SPVAP]-1659848540237
GPR[EPVAP]-1659848541536
GPR[EPVS]-1659848541536
========
instantMillis=chrono.monthOfYear().set(millis,iDefaultYear);
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848541538
GPR[SPVAP]-1659848541538
GPR[EPVAP]-1659848542848
GPR[EPVS]-1659848542848
========
instantMillis=chrono.millisOfDay().set(millis,iDefaultYear);
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848542850
GPR[SPVAP]-1659848542850
GPR[EPVAP]-1659848544157
GPR[EPVS]-1659848544157
========
instantMillis=setDayOfMonth(chrono,millis);
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848544158
GPR[SPVAP]-1659848544158
GPR[EPVAP]-1659848545461
GPR[EPVS]-1659848545461
========
if(iDefaultYear==0){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848545463
GPR[SPVAP]-1659848545463
GPR[EPVAP]-1659848548821
GPR[SPVATF]-1659848548821
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848551347
GPR[EPVS]-1659848551348
========
if(iOffsetParsed&&iDefaultYear==0){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848551349
GPR[SPVAP]-1659848551349
GPR[EPVAP]-1659848554671
GPR[SPVATF]-1659848554671
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848557213
GPR[EPVS]-1659848557213
========
if(newPos>=text.length()||(iDefaultYear+1)>=iDefaultYear||parsers[i+1]==null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848557216
GPR[SPVAP]-1659848557216
GPR[EPVAP]-1659848558545
GPR[EPVS]-1659848558545
========
if(newPos>=text.length()||(iDefaultYear+1)>=iDefaultYear&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848558547
GPR[SPVAP]-1659848558547
GPR[EPVAP]-1659848561864
GPR[SPVATF]-1659848561864
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848564384
GPR[EPVS]-1659848564384
========
if(parsePos&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848564386
GPR[SPVAP]-1659848564386
GPR[EPVAP]-1659848565694
GPR[EPVS]-1659848565694
========
if(i&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848565695
GPR[SPVAP]-1659848565695
GPR[EPVAP]-1659848567008
GPR[EPVS]-1659848567008
========
if(length&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848567010
GPR[SPVAP]-1659848567010
GPR[EPVAP]-1659848568340
GPR[EPVS]-1659848568340
========
if(chrono.getZone()!=parsedZone){
setChronology(chrono.withZone(newZone));
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848569373
GPR[SPVAP]-1659848569373
GPR[EPVAP]-1659848570705
GPR[EPVS]-1659848570705
========
if(parsedZone==DateTimeUtils.getZone(getZone())){
return ;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848570707
GPR[SPVAP]-1659848570707
GPR[EPVAP]-1659848572017
GPR[EPVS]-1659848572017
========
setChronology(getChronology().withZone(parsedZone));
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848572019
GPR[SPVAP]-1659848572019
GPR[EPVAP]-1659848573336
GPR[EPVS]-1659848573337
========
setMillis(parsedOffset);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848573338
GPR[SPVAP]-1659848573338
GPR[EPVAP]-1659848574695
GPR[EPVS]-1659848574695
========
if(newPos>=0){
if(newPos>=text.length()){
return bucket.computeMillis(true,text);
}
}else {
newPos=~newPos;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848574697
GPR[SPVAP]-1659848574697
GPR[EPVAP]-1659848576001
GPR[EPVS]-1659848576001
========
int newPos=parser.parseInto(bucket,text,position);
if(chrono==null){
return ISOChronology.getInstance(iZone);
}
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848576003
GPR[SPVAP]-1659848576003
GPR[EPVAP]-1659848577348
GPR[EPVS]-1659848577348
========
if(parsedZone==DateTimeUtils.getZone(getZone())){
return this;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848577350
GPR[SPVAP]-1659848577350
GPR[EPVAP]-1659848578685
GPR[EPVS]-1659848578685
========
instant=chrono.dayOfMonth().roundFloor(instant);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848578686
GPR[SPVAP]-1659848578686
GPR[EPVAP]-1659848579988
GPR[EPVS]-1659848579989
========
if(getZone()==parsedZone){
return this;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848579991
GPR[SPVAP]-1659848579991
GPR[EPVAP]-1659848581292
GPR[EPVS]-1659848581292
========
char newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848581294
GPR[SPVAP]-1659848581294
GPR[EPVAP]-1659848583509
GPR[EPVS]-1659848583509
========
for(String text : ALL_IDS){
if(text.substring(position).startsWith(id)){
if(null==null||id.length()>best.length()){
best=id;
}
}
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848583515
GPR[SPVAP]-1659848583515
GPR[EPVAP]-1659848585044
GPR[EPVS]-1659848585044
========
if(null!=null){
bucket.setZone(DateTimeZone.forID(best));
return position+best.length();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848585045
GPR[SPVAP]-1659848585045
GPR[EPVAP]-1659848586378
GPR[EPVS]-1659848586378
========
int newPos=parser.parseInto(bucket,text,position);
super();
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848586379
GPR[SPVAP]-1659848586379
GPR[EPVAP]-1659848587704
GPR[EPVS]-1659848587704
========
instantMillis=instantLocal;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848587705
GPR[SPVAP]-1659848587705
GPR[EPVAP]-1659848591267
GPR[SPVATF]-1659848591267
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848593949
GPR[EPVS]-1659848593949
========
parsedZone=chrono.getZone();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848593951
GPR[SPVAP]-1659848593951
GPR[EPVAP]-1659848595259
GPR[EPVS]-1659848595259
========
iChrono=chrono.withUTC();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848595260
GPR[SPVAP]-1659848595260
GPR[EPVAP]-1659848596570
GPR[EPVS]-1659848596571
========
iLocale=(iLocale==null?Locale.getDefault():locale);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848596572
GPR[SPVAP]-1659848596572
GPR[EPVAP]-1659848597892
GPR[EPVS]-1659848597892
========
iPivotYear=iPivotYear;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848597894
GPR[SPVAP]-1659848597894
GPR[EPVAP]-1659848599217
GPR[EPVS]-1659848599217
========
newPos=defaultYear;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848599219
GPR[SPVAP]-1659848599219
GPR[EPVAP]-1659848600505
GPR[EPVS]-1659848600505
========
chrono=selectChronology(chrono);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848600507
GPR[SPVAP]-1659848600507
GPR[EPVAP]-1659848603871
GPR[SPVATF]-1659848603871
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848606363
GPR[EPVS]-1659848606363
========
int newPos=parser.parseInto(bucket,text,position);
if((instant^instant+parsedOffset)<0&&(instant^parsedOffset)>=0){
parsedZone=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848606365
GPR[SPVAP]-1659848606365
GPR[EPVAP]-1659848607662
GPR[EPVS]-1659848607662
========
if(parsedZone==DateTimeZone.UTC){
return withUTC();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848607663
GPR[SPVAP]-1659848607663
GPR[EPVAP]-1659848608989
GPR[EPVS]-1659848608989
========
if(parsedZone==getZone()){
return this;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848608990
GPR[SPVAP]-1659848608990
GPR[EPVAP]-1659848610302
GPR[EPVS]-1659848610302
========
if(parsedZone==DateTimeZone.UTC){
return withUTC();
}
if(parsedZone==getZone()){
return this;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848610304
GPR[SPVAP]-1659848610304
GPR[EPVAP]-1659848611610
GPR[EPVS]-1659848611610
========
long newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848611612
GPR[SPVAP]-1659848611612
GPR[EPVAP]-1659848612919
GPR[EPVS]-1659848612919
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iDefaultYear>=text.length()||(iDefaultYear+1)>=iDefaultYear||parsers[i+1]==null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848612921
GPR[SPVAP]-1659848612921
GPR[EPVAP]-1659848614228
GPR[EPVS]-1659848614228
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iDefaultYear>=text.length()||(iDefaultYear+1)>=iDefaultYear&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848614230
GPR[SPVAP]-1659848614230
GPR[EPVAP]-1659848615662
GPR[EPVS]-1659848615662
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(parsePos&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848615664
GPR[SPVAP]-1659848615664
GPR[EPVAP]-1659848616977
GPR[EPVS]-1659848616977
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(i&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848616978
GPR[SPVAP]-1659848616978
GPR[EPVAP]-1659848618295
GPR[EPVS]-1659848618295
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(length&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848618296
GPR[SPVAP]-1659848618296
GPR[EPVAP]-1659848619597
GPR[EPVS]-1659848619597
========
int newPos=parser.parseInto(bucket,text,position);
instant.parseInt(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848619599
GPR[SPVAP]-1659848619599
GPR[EPVAP]-1659848620880
GPR[EPVS]-1659848620881
========
int newPos=parser.parseInto(bucket,text,position);
instant.charAt(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848620882
GPR[SPVAP]-1659848620882
GPR[EPVAP]-1659848622199
GPR[EPVS]-1659848622199
========
int newPos=parser.parseInto(bucket,text,position);
instant.setChronology(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848622201
GPR[SPVAP]-1659848622201
GPR[EPVAP]-1659848623503
GPR[EPVS]-1659848623503
========
checkParser();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848623505
GPR[SPVAP]-1659848623505
GPR[EPVAP]-1659848624825
GPR[EPVS]-1659848624825
========
if(newPos>=0){
if(newPos>=text.length()){
return parsedOffset;
}
}else {
newPos=~newPos;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848624827
GPR[SPVAP]-1659848624827
GPR[EPVAP]-1659848626173
GPR[EPVS]-1659848626173
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iDayOfWeek&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848626175
GPR[SPVAP]-1659848626175
GPR[EPVAP]-1659848627519
GPR[EPVS]-1659848627519
========
if(chrono.getZone()!=null){
instantMillis=zone.getMillisKeepLocal(DateTimeZone.UTC,instantMillis);
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848627521
GPR[SPVAP]-1659848627521
GPR[EPVAP]-1659848628805
GPR[EPVS]-1659848628805
========
setTime(instantMillis);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848628806
GPR[SPVAP]-1659848628806
GPR[EPVAP]-1659848630104
GPR[EPVS]-1659848630105
========
int newPos=parser.parseInto(bucket,text,position);
out.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848630106
GPR[SPVAP]-1659848630106
GPR[EPVAP]-1659848631388
GPR[EPVS]-1659848631388
========
int newPos=parser.parseInto(bucket,text,position);
instant.println(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848631389
GPR[SPVAP]-1659848631389
GPR[EPVAP]-1659848632714
GPR[EPVS]-1659848632715
========
chrono=chrono.withUTC();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848632716
GPR[SPVAP]-1659848632716
GPR[EPVAP]-1659848636017
GPR[SPVATF]-1659848636017
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848638526
GPR[EPVS]-1659848638526
========
super.setInterval(parsedOffset,instantMillis,parsedZone);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848638528
GPR[SPVAP]-1659848638528
GPR[EPVAP]-1659848639848
GPR[EPVS]-1659848639848
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(chrono!=null&&chrono.getZone()==iZone){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848639851
GPR[SPVAP]-1659848639851
GPR[EPVAP]-1659848643159
GPR[SPVATF]-1659848643159
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848645699
GPR[EPVS]-1659848645699
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(chrono!=null&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848645701
GPR[SPVAP]-1659848645701
GPR[EPVAP]-1659848648989
GPR[SPVATF]-1659848648989
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848651565
GPR[EPVS]-1659848651565
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&chrono.getZone()==iZone){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848651567
GPR[SPVAP]-1659848651567
GPR[EPVAP]-1659848656583
GPR[SPVATF]-1659848656583
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848659069
GPR[EPVS]-1659848659069
========
int newPos=parser.parseInto(bucket,text,position);
centuryOfEra.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848659071
GPR[SPVAP]-1659848659071
GPR[EPVAP]-1659848660344
GPR[EPVS]-1659848660344
========
Calendar.getInstance(parsedZone.toTimeZone(),parsedOffset).setTime(toDate());
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848660345
GPR[SPVAP]-1659848660345
GPR[EPVAP]-1659848661638
GPR[EPVS]-1659848661639
========
int newPos=parser.parseInto(bucket,text,position);
instant.append(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848661640
GPR[SPVAP]-1659848661640
GPR[EPVAP]-1659848662909
GPR[EPVS]-1659848662909
========
int newPos=parser.parseInto(bucket,text,position);
instant.write(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848662911
GPR[SPVAP]-1659848662911
GPR[EPVAP]-1659848664185
GPR[EPVS]-1659848664185
========
if(instantMillis==toDurationMillis()){
return this;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848664188
GPR[SPVAP]-1659848664188
GPR[EPVAP]-1659848665489
GPR[EPVS]-1659848665489
========
if(parsedZone==toDurationMillis()){
return this;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848665490
GPR[SPVAP]-1659848665490
GPR[EPVAP]-1659848666793
GPR[EPVS]-1659848666793
========
if(instant==null){
return ISOChronology.getInstance();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848666795
GPR[SPVAP]-1659848666795
GPR[EPVAP]-1659848668106
GPR[EPVS]-1659848668106
========
if(chrono==null){
return ISOChronology.getInstance();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848668107
GPR[SPVAP]-1659848668107
GPR[EPVAP]-1659848669411
GPR[EPVS]-1659848669412
========
int newPos=parser.parseInto(bucket,text,position);
instant.get(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848669414
GPR[SPVAP]-1659848669414
GPR[EPVAP]-1659848670716
GPR[EPVS]-1659848670716
========
super();
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848670717
GPR[SPVAP]-1659848670717
GPR[EPVAP]-1659848672020
GPR[EPVS]-1659848672020
========
int newPos=parser.parseInto(bucket,text,position);
iChrono=chrono;
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848672021
GPR[SPVAP]-1659848672021
GPR[EPVAP]-1659848673318
GPR[EPVS]-1659848673318
========
checkInterval(instantMillis,parsedOffset);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848673320
GPR[SPVAP]-1659848673320
GPR[EPVAP]-1659848674607
GPR[EPVS]-1659848674607
========
checkInterval(parsedOffset,instantMillis);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848674609
GPR[SPVAP]-1659848674609
GPR[EPVAP]-1659848675899
GPR[EPVS]-1659848675899
========
super();
int newPos=parser.parseInto(bucket,text,position);
iChrono=chrono;
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848675900
GPR[SPVAP]-1659848675900
GPR[EPVAP]-1659848677255
GPR[EPVS]-1659848677256
========
instant=chrono.monthOfYear().set(instant,position);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848677257
GPR[SPVAP]-1659848677257
GPR[EPVAP]-1659848678536
GPR[EPVS]-1659848678536
========
instant=chrono.dayOfMonth().set(instant,iDefaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848678538
GPR[SPVAP]-1659848678538
GPR[EPVAP]-1659848679844
GPR[EPVS]-1659848679844
========
instant=chrono.monthOfYear().set(instant,position);
instant=chrono.dayOfMonth().set(instant,iDefaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848679846
GPR[SPVAP]-1659848679846
GPR[EPVAP]-1659848681147
GPR[EPVS]-1659848681147
========
if(chrono==null){
chrono=ISOChronology.getInstance();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848681148
GPR[SPVAP]-1659848681148
GPR[EPVAP]-1659848682443
GPR[EPVS]-1659848682443
========
instantMillis=chrono.millisOfDay().set(millis,iDefaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848682446
GPR[SPVAP]-1659848682446
GPR[EPVAP]-1659848683745
GPR[EPVS]-1659848683745
========
instant=chrono.minuteOfHour().set(instant,parsedOffset);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848683747
GPR[SPVAP]-1659848683747
GPR[EPVAP]-1659848685061
GPR[EPVS]-1659848685061
========
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848685062
GPR[SPVAP]-1659848685062
GPR[EPVAP]-1659848686401
GPR[EPVS]-1659848686401
========
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848686402
GPR[SPVAP]-1659848686402
GPR[EPVAP]-1659848687716
GPR[EPVS]-1659848687716
========
instant=chrono.minuteOfHour().set(instant,parsedOffset);
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848687717
GPR[SPVAP]-1659848687717
GPR[EPVAP]-1659848689004
GPR[EPVS]-1659848689004
========
instant=chrono.minuteOfHour().set(instant,parsedOffset);
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848689005
GPR[SPVAP]-1659848689005
GPR[EPVAP]-1659848690309
GPR[EPVS]-1659848690309
========
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848690310
GPR[SPVAP]-1659848690310
GPR[EPVAP]-1659848691635
GPR[EPVS]-1659848691635
========
instant=chrono.minuteOfHour().set(instant,parsedOffset);
instant=chrono.secondOfMinute().set(instant,iDefaultYear);
instant=chrono.millisOfSecond().set(instant,iDefaultYear);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848691636
GPR[SPVAP]-1659848691636
GPR[EPVAP]-1659848692945
GPR[EPVS]-1659848692945
========
if(iDefaultYear<position){
instantMillis=chrono.year().set(0,iFromYear)-newPos;
testInstant-=1;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848692947
GPR[SPVAP]-1659848692947
GPR[EPVAP]-1659848694255
GPR[EPVS]-1659848694255
========
if(text.startsWith("-")){
parsedOffset=1;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848694257
GPR[SPVAP]-1659848694257
GPR[EPVAP]-1659848695612
GPR[EPVS]-1659848695612
========
if(newPos==~parsedOffset){
throw new IllegalArgumentException(text);
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848695614
GPR[SPVAP]-1659848695614
GPR[EPVAP]-1659848696916
GPR[EPVS]-1659848696916
========
if(parsedOffset==1){
iDefaultYear=-millis;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848696917
GPR[SPVAP]-1659848696917
GPR[EPVAP]-1659848698224
GPR[EPVS]-1659848698224
========
if(text.length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848698226
GPR[SPVAP]-1659848698226
GPR[EPVAP]-1659848701615
GPR[SPVATF]-1659848701615
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848704186
GPR[EPVS]-1659848704186
========
if(text.substring(iDefaultYear+1).length()<=0){
throw new IllegalArgumentException("Format invalid: "+text);
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848704187
GPR[SPVAP]-1659848704187
GPR[EPVAP]-1659848705615
GPR[EPVS]-1659848705615
========
int newPos=parser.parseInto(bucket,text,position);
chrono!=null?null:instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848705617
GPR[SPVAP]-1659848705617
GPR[EPVAP]-1659848706741
GPR[EPVS]-1659848706741
========
long newPos=parser.parseInto(bucket,text,position);
chrono!=null?null:instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848706742
GPR[SPVAP]-1659848706743
GPR[EPVAP]-1659848707869
GPR[EPVS]-1659848707869
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
instantMillis=setDayOfMonthPrevious(chrono,prev);
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848707871
GPR[SPVAP]-1659848707871
GPR[EPVAP]-1659848709155
GPR[EPVS]-1659848709155
========
int newPos=parser.parseInto(bucket,text,position);
instant.substring(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848709157
GPR[SPVAP]-1659848709157
GPR[EPVAP]-1659848710465
GPR[EPVS]-1659848710465
========
int newPos=parser.parseInto(bucket,text,position);
instant.getInstance(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848710466
GPR[SPVAP]-1659848710466
GPR[EPVAP]-1659848711775
GPR[EPVS]-1659848711775
========
iDefaultYear=position;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848711777
GPR[SPVAP]-1659848711777
GPR[EPVAP]-1659848713073
GPR[EPVS]-1659848713073
========
checkLimits(parsedOffset,"resulting");
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848713076
GPR[SPVAP]-1659848713076
GPR[EPVAP]-1659848714372
GPR[EPVS]-1659848714372
========
if(iPivotYear!=null){
return era.intValue();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848714374
GPR[SPVAP]-1659848714374
GPR[EPVAP]-1659848715683
GPR[EPVS]-1659848715683
========
if(iPivotYear!=null){
return month.intValue();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848715684
GPR[SPVAP]-1659848715684
GPR[EPVAP]-1659848716987
GPR[EPVS]-1659848716987
========
if(iPivotYear!=null){
return day.intValue();
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848716989
GPR[SPVAP]-1659848716989
GPR[EPVAP]-1659848718265
GPR[EPVS]-1659848718265
========
int newPos=parser.parseInto(bucket,text,position);
instant.toUpperCase(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848718268
GPR[SPVAP]-1659848718268
GPR[EPVAP]-1659848719573
GPR[EPVS]-1659848719573
========
int newPos=parser.parseInto(bucket,text,position);
instant.toLowerCase(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848719575
GPR[SPVAP]-1659848719575
GPR[EPVAP]-1659848720875
GPR[EPVS]-1659848720875
========
if(position>=text.length()){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848720877
GPR[SPVAP]-1659848720877
GPR[EPVAP]-1659848724216
GPR[SPVATF]-1659848724216
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848726810
GPR[EPVS]-1659848726810
========
if(position>=text.length()){
return ~position;
}
char newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848726812
GPR[SPVAP]-1659848726812
GPR[EPVAP]-1659848728125
GPR[EPVS]-1659848728125
========
iDefaultYear=0;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848728135
GPR[SPVAP]-1659848728135
GPR[EPVAP]-1659848730549
GPR[EPVS]-1659848730549
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed==false){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848730551
GPR[SPVAP]-1659848730551
GPR[EPVAP]-1659848731977
GPR[EPVS]-1659848731977
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&iOffsetParsed==false){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848731978
GPR[SPVAP]-1659848731978
GPR[EPVAP]-1659848735364
GPR[SPVATF]-1659848735364
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848737948
GPR[EPVS]-1659848737948
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(useAfter&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848737949
GPR[SPVAP]-1659848737949
GPR[EPVAP]-1659848739254
GPR[EPVS]-1659848739254
========
position++;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848739256
GPR[SPVAP]-1659848739256
GPR[EPVAP]-1659848741821
GPR[SPVATF]-1659848741821
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848743574
GPR[EPVS]-1659848743574
========
if(digitCount(text,position,2)<2){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848743575
GPR[SPVAP]-1659848743575
GPR[EPVAP]-1659848744897
GPR[EPVS]-1659848744897
========
if(FormatUtils.parseTwoDigits(text,position)>23){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848744898
GPR[SPVAP]-1659848744898
GPR[EPVAP]-1659848746332
GPR[EPVS]-1659848746332
========
parsedOffset=FormatUtils.parseTwoDigits(text,position)*DateTimeConstants.MILLIS_PER_HOUR;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848746334
GPR[SPVAP]-1659848746334
GPR[EPVAP]-1659848747621
GPR[EPVS]-1659848747621
========
newPos-=2;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848747622
GPR[SPVAP]-1659848747622
GPR[EPVAP]-1659848748933
GPR[EPVS]-1659848748933
========
int newPos=parser.parseInto(bucket,text,position);
instant.abs(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848748935
GPR[SPVAP]-1659848748935
GPR[EPVAP]-1659848750244
GPR[EPVS]-1659848750244
========
iDefaultYear=digitCount(text,position,2);
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848750246
GPR[SPVAP]-1659848750246
GPR[EPVAP]-1659848751565
GPR[EPVS]-1659848751565
========
if(iDefaultYear==0&&!iOffsetParsed){
break;
}else if(count<2){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848751567
GPR[SPVAP]-1659848751567
GPR[EPVAP]-1659848752892
GPR[EPVS]-1659848752892
========
if(FormatUtils.parseTwoDigits(text,position)>59){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848752893
GPR[SPVAP]-1659848752893
GPR[EPVAP]-1659848754311
GPR[EPVS]-1659848754311
========
newPos+=FormatUtils.parseTwoDigits(text,position)*DateTimeConstants.MILLIS_PER_SECOND;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848754313
GPR[SPVAP]-1659848754313
GPR[EPVAP]-1659848755652
GPR[EPVS]-1659848755652
========
if(digitCount(text,position,2)==0&&!iOffsetParsed){
break;
}else if(count<2){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848755654
GPR[SPVAP]-1659848755654
GPR[EPVAP]-1659848756935
GPR[EPVS]-1659848756935
========
newPos+=FormatUtils.parseTwoDigits(text,position)*DateTimeConstants.MILLIS_PER_MINUTE;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848756937
GPR[SPVAP]-1659848756937
GPR[EPVAP]-1659848758276
GPR[EPVS]-1659848758276
========
if(iDefaultYear==0&&(text.charAt(position+iDefaultYear)=='-'||c=='+')){
iOffsetParsed=true;
parsedOffset=c=='-';
if(negative){
length++;
}else {
position++;
iDefaultYear--;
}
continue;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848758278
GPR[SPVAP]-1659848758278
GPR[EPVAP]-1659848759596
GPR[EPVS]-1659848759596
========
if(iDefaultYear<=1){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848759598
GPR[SPVAP]-1659848759598
GPR[EPVAP]-1659848762988
GPR[SPVATF]-1659848762989
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848765681
GPR[EPVS]-1659848765681
========
if(text.charAt(position)=='-'){
iOffsetParsed=true;
}else if(c=='+'){
negative=false;
}else {
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848765683
GPR[SPVAP]-1659848765683
GPR[EPVAP]-1659848766988
GPR[EPVS]-1659848766988
========
iDefaultYear--;
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848766989
GPR[SPVAP]-1659848766989
GPR[EPVAP]-1659848768265
GPR[EPVS]-1659848768265
========
if(iDefaultYear<=1){
return ~position;
}
char newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848768266
GPR[SPVAP]-1659848768266
GPR[EPVAP]-1659848769572
GPR[EPVS]-1659848769572
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(errorPos&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848769574
GPR[SPVAP]-1659848769574
GPR[EPVAP]-1659848770876
GPR[EPVS]-1659848770876
========
int newPos=parser.parseInto(bucket,text,position);
if(text.charAt(position)<'0'||c>'9'){
return ~position;
}
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848770880
GPR[SPVAP]-1659848770880
GPR[EPVAP]-1659848772163
GPR[EPVS]-1659848772163
========
int newPos=parser.parseInto(bucket,text,position);
iDefaultYear=text.charAt(position)-'0';
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848772165
GPR[SPVAP]-1659848772165
GPR[EPVAP]-1659848773448
GPR[EPVS]-1659848773448
========
if(text.charAt(position)<'0'||c>'9'){
return ~position;
}
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848773449
GPR[SPVAP]-1659848773449
GPR[EPVAP]-1659848774778
GPR[EPVS]-1659848774778
========
iDefaultYear=((year<<3)+(year<<1))+text.charAt(position)-'0';
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848774780
GPR[SPVAP]-1659848774780
GPR[EPVAP]-1659848776062
GPR[EPVS]-1659848776062
========
char newPos=parser.parseInto(bucket,text,position);
instant.charAt(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848776064
GPR[SPVAP]-1659848776064
GPR[EPVAP]-1659848777339
GPR[EPVS]-1659848777339
========
chrono=selectChronology(chrono);
int newPos=parser.parseInto(bucket,text,position);
if((instant^instant+parsedOffset)<0&&(instant^parsedOffset)>=0){
parsedZone=DateTimeZone.UTC;
offset=0;
adjustedInstant=instant;
}
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848777342
GPR[SPVAP]-1659848777342
GPR[EPVAP]-1659848778660
GPR[EPVS]-1659848778660
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&position+iDefaultYear!=newPos){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848778662
GPR[SPVAP]-1659848778662
GPR[EPVAP]-1659848781964
GPR[SPVATF]-1659848781964
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848784493
GPR[EPVS]-1659848784493
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(suffixPos&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848784495
GPR[SPVAP]-1659848784495
GPR[EPVAP]-1659848785801
GPR[EPVS]-1659848785801
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(bestValidPos&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848785803
GPR[SPVAP]-1659848785803
GPR[EPVAP]-1659848787104
GPR[EPVS]-1659848787105
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&position==newPos&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848787106
GPR[SPVAP]-1659848787106
GPR[EPVAP]-1659848790425
GPR[SPVATF]-1659848790425
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848792990
GPR[EPVS]-1659848792990
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(found&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848792991
GPR[SPVAP]-1659848792991
GPR[EPVAP]-1659848794299
GPR[EPVS]-1659848794299
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(position&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848794301
GPR[SPVAP]-1659848794301
GPR[EPVAP]-1659848795599
GPR[EPVS]-1659848795599
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(oldPos&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848795601
GPR[SPVAP]-1659848795601
GPR[EPVAP]-1659848796878
GPR[EPVS]-1659848796878
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(text==null&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848796880
GPR[SPVAP]-1659848796880
GPR[EPVAP]-1659848801057
GPR[SPVATF]-1659848801057
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848804605
GPR[EPVS]-1659848804605
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(iOffsetParsed&&text==null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848804606
GPR[SPVAP]-1659848804606
GPR[EPVAP]-1659848807971
GPR[SPVATF]-1659848807971
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848810531
GPR[EPVS]-1659848810531
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(text==null&&text==null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848810533
GPR[SPVAP]-1659848810533
GPR[EPVAP]-1659848813855
GPR[SPVATF]-1659848813855
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848816357
GPR[EPVS]-1659848816357
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(max&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848816359
GPR[SPVAP]-1659848816359
GPR[EPVAP]-1659848817661
GPR[EPVS]-1659848817661
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(min&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848817663
GPR[SPVAP]-1659848817663
GPR[EPVAP]-1659848818968
GPR[EPVS]-1659848818968
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(limit&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848818971
GPR[SPVAP]-1659848818971
GPR[EPVAP]-1659848820283
GPR[EPVS]-1659848820283
========
int newPos=parser.parseInto(bucket,text,position);
instant.setMillis(bucket.computeMillis(false,text));
if(value&&bucket.getOffsetInteger()!=null){
int parsedOffset=bucket.getOffsetInteger();
DateTimeZone parsedZone=DateTimeZone.forOffsetMillis(parsedOffset);
chrono=chrono.withZone(parsedZone);
}else if(bucket.getZone()!=null){
chrono=chrono.withZone(bucket.getZone());
}

========
MM Copying to MM
GPR[SPVS]-1659848820285
GPR[SPVAP]-1659848820285
GPR[EPVAP]-1659848821612
GPR[EPVS]-1659848821612
GPR[ESUN]-1659848821613
GPR[SSUN]-1659848821613
org.joda.time.format.DateTimeParserBucket,358
========
count=digitCount(text,iDefaultYear,2);
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}

========
MM Copying to MM
GPR[SPVS]-1659848822551
GPR[SPVAP]-1659848822551
GPR[EPVAP]-1659848825001
GPR[EPVS]-1659848825001
========
FieldUtils.verifyValueBounds(this,iDefaultYear,0,getMaximumValue());
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}

========
MM Copying to MM
GPR[SPVS]-1659848825006
GPR[SPVAP]-1659848825006
GPR[EPVAP]-1659848827375
GPR[EPVS]-1659848827376
========
FieldUtils.verifyValueBounds(this,iDefaultYear,1,getMaximumValue());
if(compareReverse(first,months)>=0&&compareReverse(first,days)<=0){
saveField(DateTimeFieldType.year(),iDefaultYear);
return computeMillis(resetFields,text);
}

========
MM Copying to MM
GPR[SPVS]-1659848827377
GPR[SPVAP]-1659848827377
GPR[EPVAP]-1659848828937
GPR[EPVS]-1659848828937
GPR[ESUN]-1659848828944
GPR[SSUN]-1659848828944
org.joda.time.format.DateTimeParserBucket,359
GPR[ESUN]-1659848829075
GPR[SSUN]-1659848829075
org.joda.time.MutableDateTime,351
========
super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond);

========
MM Copying to MM
GPR[SPVS]-1659848829866
GPR[SPVAP]-1659848829866
GPR[EPVAP]-1659848837835
GPR[SPVATF]-1659848837835
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 0
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_tokyo_endOfYear
MM: Failing tests: 0
GPR[EPVATF]-1659848842983
GPR[SPVATR]-1659848842984
TESTING : time_7
MM message  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone3
MM message  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone2
MM message  - org.joda.time.format.TestDateTimeFormatter::testParseInto_zone
MM message  - org.joda.time.format.TestDateTimeFormatter::testParseInto_chrono
MM message  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone3
MM message  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone2
MM message  - org.joda.time.format.TestDateTimeFormatter::testParseInto_offsetParsed
MM message  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_zone
MM message  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_chrono
MM message  - org.joda.time.format.TestDateTimeFormatter::testParseMutableDateTime_offsetParsed
MM message  - org.joda.time.TestMutableDateTime_Constructors::testConstructor_int_int_int_int_int_int_int_DateTimeZone
MM message  - org.joda.time.TestDateTimeZoneCutover::test_MutableDateTime_withZoneRetainFields_Gaza
MM message  - org.joda.time.TestDateTimeZoneCutover::test_MutableDateTime_setZoneRetainFields_Turk
MM messageFailing tests: 13
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659848853458
GPR[EPVS]-1659848853458
========
serialVersionUID=serialVersionUID;
super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond,zone);

========
MM Copying to MM
GPR[SPVS]-1659848853461
GPR[SPVAP]-1659848853461
GPR[EPVAP]-1659848854807
GPR[EPVS]-1659848854807
========
zone=zone;
super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond,zone);

========
MM Copying to MM
GPR[SPVS]-1659848854811
GPR[SPVAP]-1659848854811
GPR[EPVAP]-1659848856163
GPR[EPVS]-1659848856163
GPR[ESUN]-1659848856183
GPR[SSUN]-1659848856183
org.joda.time.MutableDateTime,353
Find no block!
GPR[SSUN]-1659848856412
org.joda.time.field.FieldUtils,218
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(upperBound),null,Integer.valueOf(field.getMaximumValue()));
}

========
MM Copying to MM
GPR[SPVS]-1659848857153
GPR[SPVAP]-1659848857153
GPR[EPVAP]-1659848865199
GPR[SPVATF]-1659848865199
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848867826
GPR[EPVS]-1659848867826
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(field.getMinimumValue()),null);
}

========
MM Copying to MM
GPR[SPVS]-1659848867828
GPR[SPVAP]-1659848867828
GPR[EPVAP]-1659848871143
GPR[SPVATF]-1659848871143
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848875505
GPR[EPVS]-1659848875505
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(DateTimeFieldType.year(),Integer.valueOf(value),null,null);
}

========
MM Copying to MM
GPR[SPVS]-1659848875507
GPR[SPVAP]-1659848875507
GPR[EPVAP]-1659848878770
GPR[SPVATF]-1659848878770
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848881278
GPR[EPVS]-1659848881278
========
if((value<lowerBound)||(value>upperBound)){
value++;
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848881279
GPR[SPVAP]-1659848881279
GPR[EPVAP]-1659848884525
GPR[SPVATF]-1659848884525
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848887047
GPR[EPVS]-1659848887047
========
FieldUtils.verifyValueBounds(this,value,upperBound,getMaximumValue());
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848887048
GPR[SPVAP]-1659848887048
GPR[EPVAP]-1659848888311
GPR[EPVS]-1659848888311
========
if((value<lowerBound)||(value>upperBound)){
value++;
throw new IllegalFieldValueException(DateTimeFieldType.year(),Integer.valueOf(value),null,null);
}

========
MM Copying to MM
GPR[SPVS]-1659848888312
GPR[SPVAP]-1659848888312
GPR[EPVAP]-1659848891597
GPR[SPVATF]-1659848891597
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848894165
GPR[EPVS]-1659848894165
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),null,null);
}

========
MM Copying to MM
GPR[SPVS]-1659848894167
GPR[SPVAP]-1659848894167
GPR[EPVAP]-1659848897518
GPR[SPVATF]-1659848897518
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848900138
GPR[EPVS]-1659848900138
========
if((value<lowerBound)||(value>upperBound)){
if(lowerBound==getValue(upperBound)){
return this;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848900139
GPR[SPVAP]-1659848900139
GPR[EPVAP]-1659848901388
GPR[EPVS]-1659848901388
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalArgumentException("Field must not be null");
}

========
MM Copying to MM
GPR[SPVS]-1659848901391
GPR[SPVAP]-1659848901391
GPR[EPVAP]-1659848904659
GPR[SPVATF]-1659848904659
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848907181
GPR[EPVS]-1659848907181
========
super.setFieldInto(getValues(),field,lowerBound);
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848907182
GPR[SPVAP]-1659848907182
GPR[EPVAP]-1659848908436
GPR[EPVS]-1659848908436
========
FieldUtils.verifyValueBounds(this,value,1,getMaximumValue());
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848908437
GPR[SPVAP]-1659848908437
GPR[EPVAP]-1659848909681
GPR[EPVS]-1659848909681
========
if((value<lowerBound)||(value>upperBound)){
if(upperBound==0){
return ~lowerBound;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848909683
GPR[SPVAP]-1659848909683
GPR[EPVAP]-1659848910932
GPR[EPVS]-1659848910932
========
if((value<lowerBound)||(value>upperBound)){
if(upperBound<=0){
return 0;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848910934
GPR[SPVAP]-1659848910934
GPR[EPVAP]-1659848912183
GPR[EPVS]-1659848912183
========
upperBound--;
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848912185
GPR[SPVAP]-1659848912185
GPR[EPVAP]-1659848913557
GPR[EPVS]-1659848913557
========
if((value<lowerBound)||(value>upperBound)){
if(upperBound==getValue(lowerBound)){
return this;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848913558
GPR[SPVAP]-1659848913558
GPR[EPVAP]-1659848914814
GPR[EPVS]-1659848914814
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalArgumentException("Cannot convert period to duration as "+field.getName());
}

========
MM Copying to MM
GPR[SPVS]-1659848914817
GPR[SPVAP]-1659848914817
GPR[EPVAP]-1659848918131
GPR[SPVATF]-1659848918131
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848920639
GPR[EPVS]-1659848920639
========
if((value<lowerBound)||(value>upperBound)){
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
}

========
MM Copying to MM
GPR[SPVS]-1659848920640
GPR[SPVAP]-1659848920640
GPR[EPVAP]-1659848922331
GPR[EPVS]-1659848922331
========
if((value<lowerBound)||field==null){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848922332
GPR[SPVAP]-1659848922333
GPR[EPVAP]-1659848925625
GPR[SPVATF]-1659848925625
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848928154
GPR[EPVS]-1659848928154
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalArgumentException("Period does not support field \'"+field);
}

========
MM Copying to MM
GPR[SPVS]-1659848928155
GPR[SPVAP]-1659848928155
GPR[EPVAP]-1659848931381
GPR[SPVATF]-1659848931381
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848933902
GPR[EPVS]-1659848933902
========
if((value<lowerBound)||field==null){
throw new IllegalArgumentException("Period does not support field \'"+field);
}

========
MM Copying to MM
GPR[SPVS]-1659848933904
GPR[SPVAP]-1659848933904
GPR[EPVAP]-1659848937158
GPR[SPVATF]-1659848937158
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848939649
GPR[EPVS]-1659848939649
========
if((value<lowerBound)||(value>upperBound)){
if(value>=0){
return value/value;
}else {
return ((value+1)/iDivisor)-1;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848939650
GPR[SPVAP]-1659848939650
GPR[EPVAP]-1659848940897
GPR[EPVS]-1659848940897
========
if((value<lowerBound)||(value>upperBound)){
if(value>=0){
return value%upperBound;
}else {
return (iDivisor-1)+((value+1)%iDivisor);
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848940899
GPR[SPVAP]-1659848940899
GPR[EPVAP]-1659848942145
GPR[EPVS]-1659848942145
========
if((value<lowerBound)||(value>upperBound)){
if(value>=0){
return value/upperBound;
}else {
return ((value+1)/iDivisor)-1;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848942147
GPR[SPVAP]-1659848942147
GPR[EPVAP]-1659848943399
GPR[EPVS]-1659848943399
========
if((value<lowerBound)||(value>upperBound)){
if(value>Integer.MAX_VALUE){
return ~lowerBound;
}
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848943400
GPR[SPVAP]-1659848943400
GPR[EPVAP]-1659848944927
GPR[EPVS]-1659848944927
========
if((value<lowerBound)||(value>offset)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848944938
GPR[SPVAP]-1659848944938
GPR[EPVAP]-1659848947007
GPR[EPVS]-1659848947007
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalArgumentException("The divisor must be at least 2");
}

========
MM Copying to MM
GPR[SPVS]-1659848947009
GPR[SPVAP]-1659848947009
GPR[EPVAP]-1659848950285
GPR[SPVATF]-1659848950285
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848952824
GPR[EPVS]-1659848952824
========
if((value<lowerBound)||(mode>mode)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848952826
GPR[SPVAP]-1659848952826
GPR[EPVAP]-1659848954073
GPR[EPVS]-1659848954073
========
if((value<lowerBound)&&(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848954074
GPR[SPVAP]-1659848954074
GPR[EPVAP]-1659848957358
GPR[SPVATF]-1659848957358
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848959911
GPR[EPVS]-1659848959911
========
if(field!=null&&(value<ROUND_NONE||value>ROUND_HALF_EVEN)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848959912
GPR[SPVAP]-1659848959912
GPR[EPVAP]-1659848961167
GPR[EPVS]-1659848961168
========
if(field!=null||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848961169
GPR[SPVAP]-1659848961169
GPR[EPVAP]-1659848962523
GPR[EPVS]-1659848962523
========
if((value<lowerBound)||(value<ROUND_NONE||mode>ROUND_HALF_EVEN)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848962525
GPR[SPVAP]-1659848962525
GPR[EPVAP]-1659848963772
GPR[EPVS]-1659848963772
========
if((value<lowerBound)||(mode>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848963774
GPR[SPVAP]-1659848963774
GPR[EPVAP]-1659848965021
GPR[EPVS]-1659848965021
========
if((value<lowerBound)||(ROUND_NONE>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848965022
GPR[SPVAP]-1659848965022
GPR[EPVAP]-1659848966279
GPR[EPVS]-1659848966280
========
if((value<lowerBound)||(value>mode)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848966281
GPR[SPVAP]-1659848966281
GPR[EPVAP]-1659848967545
GPR[EPVS]-1659848967545
========
if((value<lowerBound)||(value>ROUND_HALF_EVEN)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848967547
GPR[SPVAP]-1659848967547
GPR[EPVAP]-1659848968799
GPR[EPVS]-1659848968799
========
if((value<lowerBound)||(value>upperBound)){
throw new IllegalArgumentException("Illegal rounding mode: "+value);
}

========
MM Copying to MM
GPR[SPVS]-1659848968800
GPR[SPVAP]-1659848968800
GPR[EPVAP]-1659848972097
GPR[SPVATF]-1659848972097
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848974647
GPR[EPVS]-1659848974647
========
field=(value==ROUND_NONE?null:field);
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848974648
GPR[SPVAP]-1659848974648
GPR[EPVAP]-1659848975897
GPR[EPVS]-1659848975897
========
upperBound=(field==null?ROUND_NONE:value);
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848975898
GPR[SPVAP]-1659848975898
GPR[EPVAP]-1659848977149
GPR[EPVS]-1659848977149
========
setMillis(getMillis());
if((value<lowerBound)||(value>upperBound)){
throw new IllegalFieldValueException(field.getType(),Integer.valueOf(value),Integer.valueOf(lowerBound),Integer.valueOf(upperBound));
}

========
MM Copying to MM
GPR[SPVS]-1659848977150
GPR[SPVAP]-1659848977150
GPR[EPVAP]-1659848978400
GPR[EPVS]-1659848978400
========
if((value<lowerBound)&&(value>upperBound)){
throw new IllegalArgumentException("Illegal rounding mode: "+value);
}

========
MM Copying to MM
GPR[SPVS]-1659848978402
GPR[SPVAP]-1659848978402
GPR[EPVAP]-1659848981663
GPR[SPVATF]-1659848981663
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848984196
GPR[EPVS]-1659848984196
GPR[ESUN]-1659848984197
GPR[SSUN]-1659848984197
org.joda.time.field.BaseDurationField,150
GPR[ESUN]-1659848984999
GPR[SSUN]-1659848984999
org.joda.time.chrono.BasicMonthOfYearDateTimeField,306
GPR[ESUN]-1659848985597
GPR[SSUN]-1659848985597
org.joda.time.format.DateTimeParserBucket,518
========
if(field==null||!field.isSupported()){
return 1;
}

========
MM Copying to MM
GPR[SPVS]-1659848986220
GPR[SPVAP]-1659848986220
GPR[EPVAP]-1659848988616
GPR[EPVS]-1659848988619
========
if(field==null||!b.isSupported()){
return 1;
}

========
MM Copying to MM
GPR[SPVS]-1659848988620
GPR[SPVAP]-1659848988620
GPR[EPVAP]-1659848990911
GPR[EPVS]-1659848990911
========
if(b==null||!field.isSupported()){
return 1;
}

========
MM Copying to MM
GPR[SPVS]-1659848990912
GPR[SPVAP]-1659848990912
GPR[EPVAP]-1659848992489
GPR[EPVS]-1659848992489
========
if(iField==null||!iField.isSupported()){
return 1;
}

========
MM Copying to MM
GPR[SPVS]-1659848992491
GPR[SPVAP]-1659848992491
GPR[EPVAP]-1659848994106
GPR[EPVS]-1659848994106
========
if(iField==null||!b.isSupported()){
return 1;
}

========
MM Copying to MM
GPR[SPVS]-1659848994108
GPR[SPVAP]-1659848994108
GPR[EPVAP]-1659848995724
GPR[EPVS]-1659848995724
========
if(b==null||!iField.isSupported()){
return 1;
}

========
MM Copying to MM
GPR[SPVS]-1659848995725
GPR[SPVAP]-1659848995725
GPR[EPVAP]-1659848997304
GPR[EPVS]-1659848997304
========
if(b==null||b.getUnitMillis()<getChronology().days().getUnitMillis()){
return 1;
}

========
MM Copying to MM
GPR[SPVS]-1659848997306
GPR[SPVAP]-1659848997306
GPR[EPVAP]-1659848998852
GPR[EPVS]-1659848998852
========
if(b==null||b.getUnitMillis()>=getChronology().days().getUnitMillis()){
return 1;
}

========
MM Copying to MM
GPR[SPVS]-1659848998854
GPR[SPVAP]-1659848998854
GPR[EPVAP]-1659849000436
GPR[EPVS]-1659849000436
GPR[ESUN]-1659849000436
GPR[SSUN]-1659849000436
org.joda.time.chrono.BasicChronology,419
GPR[ESUN]-1659849001116
GPR[SSUN]-1659849001116
org.joda.time.format.DateTimeParserBucket,421
========
i=high;
for(int j=i;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
MM Copying to MM
GPR[SPVS]-1659849002066
GPR[SPVAP]-1659849002066
GPR[EPVAP]-1659849004941
GPR[EPVS]-1659849004941
========
for(int j=length;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
MM Copying to MM
GPR[SPVS]-1659849004943
GPR[SPVAP]-1659849004943
GPR[EPVAP]-1659849006219
GPR[EPVS]-1659849006219
========
for(int j=iFieldType;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
MM Copying to MM
GPR[SPVS]-1659849006222
GPR[SPVAP]-1659849006222
GPR[EPVAP]-1659849007508
GPR[EPVS]-1659849007508
========
for(int j=i;j>0&&high>=0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
MM Copying to MM
GPR[SPVS]-1659849007510
GPR[SPVAP]-1659849007510
GPR[EPVAP]-1659849014089
GPR[SPVATF]-1659849014089
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849016664
GPR[EPVS]-1659849016664
========
for(int j=i;i>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
MM Copying to MM
GPR[SPVS]-1659849016665
GPR[SPVAP]-1659849016665
GPR[EPVAP]-1659849021877
GPR[SPVATF]-1659849021877
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849024433
GPR[EPVS]-1659849024433
========
for(int j=i;j>high&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
MM Copying to MM
GPR[SPVS]-1659849024434
GPR[SPVAP]-1659849024434
GPR[EPVAP]-1659849027973
GPR[SPVATF]-1659849027973
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849030516
GPR[EPVS]-1659849030516
========
for(int j=i;i>0&&high>=0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
MM Copying to MM
GPR[SPVS]-1659849030517
GPR[SPVAP]-1659849030517
GPR[EPVAP]-1659849031933
GPR[EPVS]-1659849031933
========
for(int j=i;j>high&&high>=0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
MM Copying to MM
GPR[SPVS]-1659849031934
GPR[SPVAP]-1659849031934
GPR[EPVAP]-1659849035256
GPR[SPVATF]-1659849035256
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849037801
GPR[EPVS]-1659849037801
========
for(int j=i;i>high&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
MM Copying to MM
GPR[SPVS]-1659849037802
GPR[SPVAP]-1659849037802
GPR[EPVAP]-1659849041133
GPR[SPVATF]-1659849041133
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849043666
GPR[EPVS]-1659849043666
========
for(int j=i;i>high&&high>=0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
MM Copying to MM
GPR[SPVS]-1659849043667
GPR[SPVAP]-1659849043667
GPR[EPVAP]-1659849046979
GPR[SPVATF]-1659849046979
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM:   - org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849049582
GPR[EPVS]-1659849049582
========
i=~i;
for(int j=i;j>0&&(array[j-1]).compareTo(array[j])>0;j--){
SavedField t=array[j];
array[j]=array[j-1];
array[j-1]=t;
}

========
MM Copying to MM
GPR[SPVS]-1659849049584
GPR[SPVAP]-1659849049584
GPR[EPVAP]-1659864812048
GPR[SPVATF]-1659864812048
TESTING : org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_newYork_startOfYear
End running Time/7 results at /experiment_home///results/SimFix/Time/7/seed_261/
\n\nNode: host-74\n
\n\nDate: Sun 07 Aug 2022 02:33:32 AM PDT\n
Removing checked out dir script/workingdir/SimFix/time/time_7_buggy
GPR[SSLE]-1659864812372
GPR[ESLE]-1659864872375
