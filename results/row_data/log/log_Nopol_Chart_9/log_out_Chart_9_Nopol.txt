Sleep 1m start
GPR[SSLI]-1659859435547
GPR[ESLI]-1659859495553
Running Nopol Chart 9b with approach: smt
Timezone: America/Los_Angeles
Seed 260
OS: linux
Creating out dir /experiment_home///results/Nopol/Chart/9/seed_260/
The file script/workingdir/Nopol/Chart_9 does not exist!
script/workingdir/Nopol/Chart_9
script/workingdir/Nopol/Chart_9
classpath:  script/workingdir/Nopol/Chart_9/lib/servlet.jar:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/Nopol/Chart_9/build:script/workingdir/Nopol/Chart_9/build-tests
Src java:  /source
Classes Java:  /build
Src Test:  /tests
Classes Test:  /build-tests
GPR[SSLB]-1659859514477
GPR[ESLB]-1659859574481
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Chart_9//build:script/workingdir/Nopol/Chart_9//build-tests:script/workingdir/Nopol/Chart_9/lib/servlet.jar:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/Nopol/Chart_9/build:script/workingdir/Nopol/Chart_9/build-tests
Node: host-44
Date init: Sun 07 Aug 2022 01:06:14 AM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Chart_9/source]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Chart_9/build/, file:script/workingdir/Nopol/Chart_9/build-tests/, file:script/workingdir/Nopol/Chart_9/lib/servlet.jar, file:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar, file:script/workingdir/Nopol/Chart_9/build/, file:script/workingdir/Nopol/Chart_9/build-tests/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [org.jfree.chart.annotations.junit.AnnotationsPackageTests, org.jfree.chart.annotations.junit.AnnotationsPackageTests, org.jfree.chart.annotations.junit.CategoryLineAnnotationTests, org.jfree.chart.annotations.junit.CategoryLineAnnotationTests, org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests, org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests, org.jfree.chart.annotations.junit.CategoryTextAnnotationTests, org.jfree.chart.annotations.junit.CategoryTextAnnotationTests, org.jfree.chart.annotations.junit.TextAnnotationTests, org.jfree.chart.annotations.junit.TextAnnotationTests, org.jfree.chart.annotations.junit.XYBoxAnnotationTests, org.jfree.chart.annotations.junit.XYBoxAnnotationTests, org.jfree.chart.annotations.junit.XYDrawableAnnotationTests, org.jfree.chart.annotations.junit.XYDrawableAnnotationTests, org.jfree.chart.annotations.junit.XYImageAnnotationTests, org.jfree.chart.annotations.junit.XYImageAnnotationTests, org.jfree.chart.annotations.junit.XYLineAnnotationTests, org.jfree.chart.annotations.junit.XYLineAnnotationTests, org.jfree.chart.annotations.junit.XYPointerAnnotationTests, org.jfree.chart.annotations.junit.XYPointerAnnotationTests, org.jfree.chart.annotations.junit.XYPolygonAnnotationTests, org.jfree.chart.annotations.junit.XYPolygonAnnotationTests, org.jfree.chart.annotations.junit.XYShapeAnnotationTests, org.jfree.chart.annotations.junit.XYShapeAnnotationTests, org.jfree.chart.annotations.junit.XYTextAnnotationTests, org.jfree.chart.annotations.junit.XYTextAnnotationTests, org.jfree.chart.axis.junit.AxisLocationTests, org.jfree.chart.axis.junit.AxisLocationTests, org.jfree.chart.axis.junit.AxisPackageTests, org.jfree.chart.axis.junit.AxisPackageTests, org.jfree.chart.axis.junit.AxisSpaceTests, org.jfree.chart.axis.junit.AxisSpaceTests, org.jfree.chart.axis.junit.AxisTests, org.jfree.chart.axis.junit.AxisTests, org.jfree.chart.axis.junit.CategoryAnchorTests, org.jfree.chart.axis.junit.CategoryAnchorTests, org.jfree.chart.axis.junit.CategoryAxis3DTests, org.jfree.chart.axis.junit.CategoryAxis3DTests, org.jfree.chart.axis.junit.CategoryAxisTests, org.jfree.chart.axis.junit.CategoryAxisTests, org.jfree.chart.axis.junit.CategoryLabelPositionTests, org.jfree.chart.axis.junit.CategoryLabelPositionTests, org.jfree.chart.axis.junit.CategoryLabelPositionsTests, org.jfree.chart.axis.junit.CategoryLabelPositionsTests, org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests, org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests, org.jfree.chart.axis.junit.CategoryTickTests, org.jfree.chart.axis.junit.CategoryTickTests, org.jfree.chart.axis.junit.CyclicNumberAxisTests, org.jfree.chart.axis.junit.CyclicNumberAxisTests, org.jfree.chart.axis.junit.DateAxisTests, org.jfree.chart.axis.junit.DateAxisTests, org.jfree.chart.axis.junit.DateTickMarkPositionTests, org.jfree.chart.axis.junit.DateTickMarkPositionTests, org.jfree.chart.axis.junit.DateTickTests, org.jfree.chart.axis.junit.DateTickTests, org.jfree.chart.axis.junit.DateTickUnitTests, org.jfree.chart.axis.junit.DateTickUnitTests, org.jfree.chart.axis.junit.ExtendedCategoryAxisTests, org.jfree.chart.axis.junit.ExtendedCategoryAxisTests, org.jfree.chart.axis.junit.LogAxisTests, org.jfree.chart.axis.junit.LogAxisTests, org.jfree.chart.axis.junit.LogarithmicAxisTests, org.jfree.chart.axis.junit.LogarithmicAxisTests, org.jfree.chart.axis.junit.MarkerAxisBandTests, org.jfree.chart.axis.junit.MarkerAxisBandTests, org.jfree.chart.axis.junit.MonthDateFormatTests, org.jfree.chart.axis.junit.MonthDateFormatTests, org.jfree.chart.axis.junit.NumberAxis3DTests, org.jfree.chart.axis.junit.NumberAxis3DTests, org.jfree.chart.axis.junit.NumberAxisTests, org.jfree.chart.axis.junit.NumberAxisTests, org.jfree.chart.axis.junit.NumberTickUnitTests, org.jfree.chart.axis.junit.NumberTickUnitTests, org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests, org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests, org.jfree.chart.axis.junit.PeriodAxisTests, org.jfree.chart.axis.junit.PeriodAxisTests, org.jfree.chart.axis.junit.QuarterDateFormatTests, org.jfree.chart.axis.junit.QuarterDateFormatTests, org.jfree.chart.axis.junit.SegmentedTimelineTests, org.jfree.chart.axis.junit.SegmentedTimelineTests, org.jfree.chart.axis.junit.SegmentedTimelineTests2, org.jfree.chart.axis.junit.SegmentedTimelineTests2, org.jfree.chart.axis.junit.StandardTickUnitSourceTests, org.jfree.chart.axis.junit.StandardTickUnitSourceTests, org.jfree.chart.axis.junit.SubCategoryAxisTests, org.jfree.chart.axis.junit.SubCategoryAxisTests, org.jfree.chart.axis.junit.SymbolAxisTests, org.jfree.chart.axis.junit.SymbolAxisTests, org.jfree.chart.axis.junit.TickUnitsTests, org.jfree.chart.axis.junit.TickUnitsTests, org.jfree.chart.axis.junit.ValueAxisTests, org.jfree.chart.axis.junit.ValueAxisTests, org.jfree.chart.block.junit.AbstractBlockTests, org.jfree.chart.block.junit.AbstractBlockTests, org.jfree.chart.block.junit.BlockBorderTests, org.jfree.chart.block.junit.BlockBorderTests, org.jfree.chart.block.junit.BlockContainerTests, org.jfree.chart.block.junit.BlockContainerTests, org.jfree.chart.block.junit.BlockPackageTests, org.jfree.chart.block.junit.BlockPackageTests, org.jfree.chart.block.junit.BorderArrangementTests, org.jfree.chart.block.junit.BorderArrangementTests, org.jfree.chart.block.junit.ColorBlockTests, org.jfree.chart.block.junit.ColorBlockTests, org.jfree.chart.block.junit.ColumnArrangementTests, org.jfree.chart.block.junit.ColumnArrangementTests, org.jfree.chart.block.junit.EmptyBlockTests, org.jfree.chart.block.junit.EmptyBlockTests, org.jfree.chart.block.junit.FlowArrangementTests, org.jfree.chart.block.junit.FlowArrangementTests, org.jfree.chart.block.junit.GridArrangementTests, org.jfree.chart.block.junit.GridArrangementTests, org.jfree.chart.block.junit.LabelBlockTests, org.jfree.chart.block.junit.LabelBlockTests, org.jfree.chart.block.junit.LineBorderTests, org.jfree.chart.block.junit.LineBorderTests, org.jfree.chart.block.junit.RectangleConstraintTests, org.jfree.chart.block.junit.RectangleConstraintTests, org.jfree.chart.entity.junit.CategoryItemEntityTests, org.jfree.chart.entity.junit.CategoryItemEntityTests, org.jfree.chart.entity.junit.EntityPackageTests, org.jfree.chart.entity.junit.EntityPackageTests, org.jfree.chart.entity.junit.LegendItemEntityTests, org.jfree.chart.entity.junit.LegendItemEntityTests, org.jfree.chart.entity.junit.PieSectionEntityTests, org.jfree.chart.entity.junit.PieSectionEntityTests, org.jfree.chart.entity.junit.StandardEntityCollectionTests, org.jfree.chart.entity.junit.StandardEntityCollectionTests, org.jfree.chart.entity.junit.TickLabelEntityTests, org.jfree.chart.entity.junit.TickLabelEntityTests, org.jfree.chart.entity.junit.XYItemEntityTests, org.jfree.chart.entity.junit.XYItemEntityTests, org.jfree.chart.imagemap.junit.ImageMapPackageTests, org.jfree.chart.imagemap.junit.ImageMapPackageTests, org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardURLTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardURLTagFragmentGeneratorTests, org.jfree.chart.junit.AreaChartTests, org.jfree.chart.junit.AreaChartTests, org.jfree.chart.junit.BarChart3DTests, org.jfree.chart.junit.BarChart3DTests, org.jfree.chart.junit.BarChartTests, org.jfree.chart.junit.BarChartTests, org.jfree.chart.junit.ChartPackageTests, org.jfree.chart.junit.ChartPackageTests, org.jfree.chart.junit.ChartPanelTests, org.jfree.chart.junit.ChartPanelTests, org.jfree.chart.junit.ChartRenderingInfoTests, org.jfree.chart.junit.ChartRenderingInfoTests, org.jfree.chart.junit.GanttChartTests, org.jfree.chart.junit.GanttChartTests, org.jfree.chart.junit.JFreeChartTests, org.jfree.chart.junit.JFreeChartTests, org.jfree.chart.junit.LegendItemCollectionTests, org.jfree.chart.junit.LegendItemCollectionTests, org.jfree.chart.junit.LegendItemTests, org.jfree.chart.junit.LegendItemTests, org.jfree.chart.junit.LineChart3DTests, org.jfree.chart.junit.LineChart3DTests, org.jfree.chart.junit.LineChartTests, org.jfree.chart.junit.LineChartTests, org.jfree.chart.junit.MeterChartTests, org.jfree.chart.junit.MeterChartTests, org.jfree.chart.junit.PaintMapTests, org.jfree.chart.junit.PaintMapTests, org.jfree.chart.junit.PieChart3DTests, org.jfree.chart.junit.PieChart3DTests, org.jfree.chart.junit.PieChartTests, org.jfree.chart.junit.PieChartTests, org.jfree.chart.junit.ScatterPlotTests, org.jfree.chart.junit.ScatterPlotTests, org.jfree.chart.junit.StackedAreaChartTests, org.jfree.chart.junit.StackedAreaChartTests, org.jfree.chart.junit.StackedBarChart3DTests, org.jfree.chart.junit.StackedBarChart3DTests, org.jfree.chart.junit.StackedBarChartTests, org.jfree.chart.junit.StackedBarChartTests, org.jfree.chart.junit.StrokeMapTests, org.jfree.chart.junit.StrokeMapTests, org.jfree.chart.junit.TimeSeriesChartTests, org.jfree.chart.junit.TimeSeriesChartTests, org.jfree.chart.junit.WaterfallChartTests, org.jfree.chart.junit.WaterfallChartTests, org.jfree.chart.junit.XYAreaChartTests, org.jfree.chart.junit.XYAreaChartTests, org.jfree.chart.junit.XYBarChartTests, org.jfree.chart.junit.XYBarChartTests, org.jfree.chart.junit.XYLineChartTests, org.jfree.chart.junit.XYLineChartTests, org.jfree.chart.junit.XYStepAreaChartTests, org.jfree.chart.junit.XYStepAreaChartTests, org.jfree.chart.junit.XYStepChartTests, org.jfree.chart.junit.XYStepChartTests, org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests, org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests, org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests, org.jfree.chart.labels.junit.ItemLabelAnchorTests, org.jfree.chart.labels.junit.ItemLabelAnchorTests, org.jfree.chart.labels.junit.ItemLabelPositionTests, org.jfree.chart.labels.junit.ItemLabelPositionTests, org.jfree.chart.labels.junit.LabelsPackageTests, org.jfree.chart.labels.junit.LabelsPackageTests, org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests, org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests, org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests, org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests, org.jfree.chart.needle.junit.ArrowNeedleTests, org.jfree.chart.needle.junit.ArrowNeedleTests, org.jfree.chart.needle.junit.LineNeedleTests, org.jfree.chart.needle.junit.LineNeedleTests, org.jfree.chart.needle.junit.LongNeedleTests, org.jfree.chart.needle.junit.LongNeedleTests, org.jfree.chart.needle.junit.MeterNeedleTests, org.jfree.chart.needle.junit.MeterNeedleTests, org.jfree.chart.needle.junit.MiddlePinNeedleTests, org.jfree.chart.needle.junit.MiddlePinNeedleTests, org.jfree.chart.needle.junit.NeedlePackageTests, org.jfree.chart.needle.junit.NeedlePackageTests, org.jfree.chart.needle.junit.PinNeedleTests, org.jfree.chart.needle.junit.PinNeedleTests, org.jfree.chart.needle.junit.PlumNeedleTests, org.jfree.chart.needle.junit.PlumNeedleTests, org.jfree.chart.needle.junit.PointerNeedleTests, org.jfree.chart.needle.junit.PointerNeedleTests, org.jfree.chart.needle.junit.ShipNeedleTests, org.jfree.chart.needle.junit.ShipNeedleTests, org.jfree.chart.needle.junit.WindNeedleTests, org.jfree.chart.needle.junit.WindNeedleTests, org.jfree.chart.plot.dial.junit.AbstractDialLayerTests, org.jfree.chart.plot.dial.junit.AbstractDialLayerTests, org.jfree.chart.plot.dial.junit.ArcDialFrameTests, org.jfree.chart.plot.dial.junit.ArcDialFrameTests, org.jfree.chart.plot.dial.junit.DialBackgroundTests, org.jfree.chart.plot.dial.junit.DialBackgroundTests, org.jfree.chart.plot.dial.junit.DialCapTests, org.jfree.chart.plot.dial.junit.DialCapTests, org.jfree.chart.plot.dial.junit.DialPackageTests, org.jfree.chart.plot.dial.junit.DialPackageTests, org.jfree.chart.plot.dial.junit.DialPlotTests, org.jfree.chart.plot.dial.junit.DialPlotTests, org.jfree.chart.plot.dial.junit.DialPointerTests, org.jfree.chart.plot.dial.junit.DialPointerTests, org.jfree.chart.plot.dial.junit.DialTextAnnotationTests, org.jfree.chart.plot.dial.junit.DialTextAnnotationTests, org.jfree.chart.plot.dial.junit.DialValueIndicatorTests, org.jfree.chart.plot.dial.junit.DialValueIndicatorTests, org.jfree.chart.plot.dial.junit.StandardDialFrameTests, org.jfree.chart.plot.dial.junit.StandardDialFrameTests, org.jfree.chart.plot.dial.junit.StandardDialRangeTests, org.jfree.chart.plot.dial.junit.StandardDialRangeTests, org.jfree.chart.plot.dial.junit.StandardDialScaleTests, org.jfree.chart.plot.dial.junit.StandardDialScaleTests, org.jfree.chart.plot.junit.CategoryMarkerTests, org.jfree.chart.plot.junit.CategoryMarkerTests, org.jfree.chart.plot.junit.CategoryPlotTests, org.jfree.chart.plot.junit.CategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainXYPlotTests, org.jfree.chart.plot.junit.CombinedDomainXYPlotTests, org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests, org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests, org.jfree.chart.plot.junit.CombinedRangeXYPlotTests, org.jfree.chart.plot.junit.CombinedRangeXYPlotTests, org.jfree.chart.plot.junit.CompassPlotTests, org.jfree.chart.plot.junit.CompassPlotTests, org.jfree.chart.plot.junit.DefaultDrawingSupplierTests, org.jfree.chart.plot.junit.DefaultDrawingSupplierTests, org.jfree.chart.plot.junit.FastScatterPlotTests, org.jfree.chart.plot.junit.FastScatterPlotTests, org.jfree.chart.plot.junit.IntervalMarkerTests, org.jfree.chart.plot.junit.IntervalMarkerTests, org.jfree.chart.plot.junit.MarkerTests, org.jfree.chart.plot.junit.MarkerTests, org.jfree.chart.plot.junit.MeterIntervalTests, org.jfree.chart.plot.junit.MeterIntervalTests, org.jfree.chart.plot.junit.MeterPlotTests, org.jfree.chart.plot.junit.MeterPlotTests, org.jfree.chart.plot.junit.MultiplePiePlotTests, org.jfree.chart.plot.junit.MultiplePiePlotTests, org.jfree.chart.plot.junit.PieLabelRecordTests, org.jfree.chart.plot.junit.PieLabelRecordTests, org.jfree.chart.plot.junit.PiePlot3DTests, org.jfree.chart.plot.junit.PiePlot3DTests, org.jfree.chart.plot.junit.PiePlotTests, org.jfree.chart.plot.junit.PiePlotTests, org.jfree.chart.plot.junit.PlotOrientationTests, org.jfree.chart.plot.junit.PlotOrientationTests, org.jfree.chart.plot.junit.PlotPackageTests, org.jfree.chart.plot.junit.PlotPackageTests, org.jfree.chart.plot.junit.PlotRenderingInfoTests, org.jfree.chart.plot.junit.PlotRenderingInfoTests, org.jfree.chart.plot.junit.PlotTests, org.jfree.chart.plot.junit.PlotTests, org.jfree.chart.plot.junit.PolarPlotTests, org.jfree.chart.plot.junit.PolarPlotTests, org.jfree.chart.plot.junit.RingPlotTests, org.jfree.chart.plot.junit.RingPlotTests, org.jfree.chart.plot.junit.SpiderWebPlotTests, org.jfree.chart.plot.junit.SpiderWebPlotTests, org.jfree.chart.plot.junit.ThermometerPlotTests, org.jfree.chart.plot.junit.ThermometerPlotTests, org.jfree.chart.plot.junit.ValueMarkerTests, org.jfree.chart.plot.junit.ValueMarkerTests, org.jfree.chart.plot.junit.XYPlotTests, org.jfree.chart.plot.junit.XYPlotTests, org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.AreaRendererTests, org.jfree.chart.renderer.category.junit.AreaRendererTests, org.jfree.chart.renderer.category.junit.BarRenderer3DTests, org.jfree.chart.renderer.category.junit.BarRenderer3DTests, org.jfree.chart.renderer.category.junit.BarRendererTests, org.jfree.chart.renderer.category.junit.BarRendererTests, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests, org.jfree.chart.renderer.category.junit.CategoryStepRendererTests, org.jfree.chart.renderer.category.junit.CategoryStepRendererTests, org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.GanttRendererTests, org.jfree.chart.renderer.category.junit.GanttRendererTests, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests, org.jfree.chart.renderer.category.junit.LevelRendererTests, org.jfree.chart.renderer.category.junit.LevelRendererTests, org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.LineRenderer3DTests, org.jfree.chart.renderer.category.junit.LineRenderer3DTests, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests, org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests, org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests, org.jfree.chart.renderer.category.junit.ScatterRendererTests, org.jfree.chart.renderer.category.junit.ScatterRendererTests, org.jfree.chart.renderer.category.junit.StackedAreaRendererTests, org.jfree.chart.renderer.category.junit.StackedAreaRendererTests, org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests, org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests, org.jfree.chart.renderer.category.junit.StackedBarRendererTests, org.jfree.chart.renderer.category.junit.StackedBarRendererTests, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests, org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests, org.jfree.chart.renderer.junit.AbstractRendererTests, org.jfree.chart.renderer.junit.AbstractRendererTests, org.jfree.chart.renderer.junit.AreaRendererEndTypeTests, org.jfree.chart.renderer.junit.AreaRendererEndTypeTests, org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests, org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests, org.jfree.chart.renderer.junit.GrayPaintScaleTests, org.jfree.chart.renderer.junit.GrayPaintScaleTests, org.jfree.chart.renderer.junit.LookupPaintScaleTests, org.jfree.chart.renderer.junit.LookupPaintScaleTests, org.jfree.chart.renderer.junit.OutlierTests, org.jfree.chart.renderer.junit.OutlierTests, org.jfree.chart.renderer.junit.RendererPackageTests, org.jfree.chart.renderer.junit.RendererPackageTests, org.jfree.chart.renderer.junit.RendererUtilitiesTests, org.jfree.chart.renderer.junit.RendererUtilitiesTests, org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests, org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests, org.jfree.chart.renderer.xy.junit.CandlestickRendererTests, org.jfree.chart.renderer.xy.junit.CandlestickRendererTests, org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests, org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests, org.jfree.chart.renderer.xy.junit.DeviationRendererTests, org.jfree.chart.renderer.xy.junit.DeviationRendererTests, org.jfree.chart.renderer.xy.junit.HighLowRendererTests, org.jfree.chart.renderer.xy.junit.HighLowRendererTests, org.jfree.chart.renderer.xy.junit.RendererXYPackageTests, org.jfree.chart.renderer.xy.junit.RendererXYPackageTests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests, org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests, org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests, org.jfree.chart.renderer.xy.junit.VectorRendererTests, org.jfree.chart.renderer.xy.junit.VectorRendererTests, org.jfree.chart.renderer.xy.junit.WindItemRendererTests, org.jfree.chart.renderer.xy.junit.WindItemRendererTests, org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.XYAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYBarRendererTests, org.jfree.chart.renderer.xy.junit.XYBarRendererTests, org.jfree.chart.renderer.xy.junit.XYBlockRendererTests, org.jfree.chart.renderer.xy.junit.XYBlockRendererTests, org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests, org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests, org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests, org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests, org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests, org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests, org.jfree.chart.renderer.xy.junit.XYDotRendererTests, org.jfree.chart.renderer.xy.junit.XYDotRendererTests, org.jfree.chart.renderer.xy.junit.XYErrorRendererTests, org.jfree.chart.renderer.xy.junit.XYErrorRendererTests, org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests, org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests, org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYStepRendererTests, org.jfree.chart.renderer.xy.junit.XYStepRendererTests, org.jfree.chart.renderer.xy.junit.YIntervalRendererTests, org.jfree.chart.renderer.xy.junit.YIntervalRendererTests, org.jfree.chart.title.junit.CompositeTitleTests, org.jfree.chart.title.junit.CompositeTitleTests, org.jfree.chart.title.junit.DateTitleTests, org.jfree.chart.title.junit.DateTitleTests, org.jfree.chart.title.junit.ImageTitleTests, org.jfree.chart.title.junit.ImageTitleTests, org.jfree.chart.title.junit.LegendGraphicTests, org.jfree.chart.title.junit.LegendGraphicTests, org.jfree.chart.title.junit.LegendTitleTests, org.jfree.chart.title.junit.LegendTitleTests, org.jfree.chart.title.junit.PaintScaleLegendTests, org.jfree.chart.title.junit.PaintScaleLegendTests, org.jfree.chart.title.junit.TextTitleTests, org.jfree.chart.title.junit.TextTitleTests, org.jfree.chart.title.junit.TitlePackageTests, org.jfree.chart.title.junit.TitlePackageTests, org.jfree.chart.title.junit.TitleTests, org.jfree.chart.title.junit.TitleTests, org.jfree.chart.urls.junit.CustomPieURLGeneratorTests, org.jfree.chart.urls.junit.CustomPieURLGeneratorTests, org.jfree.chart.urls.junit.CustomXYURLGeneratorTests, org.jfree.chart.urls.junit.CustomXYURLGeneratorTests, org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests, org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests, org.jfree.chart.urls.junit.StandardPieURLGeneratorTests, org.jfree.chart.urls.junit.StandardPieURLGeneratorTests, org.jfree.chart.urls.junit.StandardXYURLGeneratorTests, org.jfree.chart.urls.junit.StandardXYURLGeneratorTests, org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests, org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests, org.jfree.chart.urls.junit.UrlsPackageTests, org.jfree.chart.urls.junit.UrlsPackageTests, org.jfree.chart.util.junit.BooleanListTests, org.jfree.chart.util.junit.BooleanListTests, org.jfree.chart.util.junit.HashUtilitiesTests, org.jfree.chart.util.junit.HashUtilitiesTests, org.jfree.chart.util.junit.LogFormatTests, org.jfree.chart.util.junit.LogFormatTests, org.jfree.chart.util.junit.PaintListTests, org.jfree.chart.util.junit.PaintListTests, org.jfree.chart.util.junit.RelativeDateFormatTests, org.jfree.chart.util.junit.RelativeDateFormatTests, org.jfree.chart.util.junit.ShapeUtilitiesTests, org.jfree.chart.util.junit.ShapeUtilitiesTests, org.jfree.chart.util.junit.StrokeListTests, org.jfree.chart.util.junit.StrokeListTests, org.jfree.chart.util.junit.UtilPackageTests, org.jfree.chart.util.junit.UtilPackageTests, org.jfree.data.category.junit.CategoryToPieDatasetTests, org.jfree.data.category.junit.CategoryToPieDatasetTests, org.jfree.data.category.junit.DataCategoryPackageTests, org.jfree.data.category.junit.DataCategoryPackageTests, org.jfree.data.category.junit.DefaultCategoryDatasetTests, org.jfree.data.category.junit.DefaultCategoryDatasetTests, org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests, org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests, org.jfree.data.gantt.junit.DataGanttPackageTests, org.jfree.data.gantt.junit.DataGanttPackageTests, org.jfree.data.gantt.junit.TaskSeriesCollectionTests, org.jfree.data.gantt.junit.TaskSeriesCollectionTests, org.jfree.data.gantt.junit.TaskSeriesTests, org.jfree.data.gantt.junit.TaskSeriesTests, org.jfree.data.gantt.junit.TaskTests, org.jfree.data.gantt.junit.TaskTests, org.jfree.data.general.junit.DataGeneralPackageTests, org.jfree.data.general.junit.DataGeneralPackageTests, org.jfree.data.general.junit.DatasetGroupTests, org.jfree.data.general.junit.DatasetGroupTests, org.jfree.data.general.junit.DatasetUtilitiesTests, org.jfree.data.general.junit.DatasetUtilitiesTests, org.jfree.data.general.junit.DefaultKeyedValueDatasetTests, org.jfree.data.general.junit.DefaultKeyedValueDatasetTests, org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests, org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests, org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests, org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests, org.jfree.data.general.junit.DefaultPieDatasetTests, org.jfree.data.general.junit.DefaultPieDatasetTests, org.jfree.data.junit.ComparableObjectItemTests, org.jfree.data.junit.ComparableObjectItemTests, org.jfree.data.junit.ComparableObjectSeriesTests, org.jfree.data.junit.ComparableObjectSeriesTests, org.jfree.data.junit.DataPackageTests, org.jfree.data.junit.DataPackageTests, org.jfree.data.junit.DataUtilitiesTests, org.jfree.data.junit.DataUtilitiesTests, org.jfree.data.junit.DefaultKeyedValueTests, org.jfree.data.junit.DefaultKeyedValueTests, org.jfree.data.junit.DefaultKeyedValues2DTests, org.jfree.data.junit.DefaultKeyedValues2DTests, org.jfree.data.junit.DefaultKeyedValuesTests, org.jfree.data.junit.DefaultKeyedValuesTests, org.jfree.data.junit.DomainOrderTests, org.jfree.data.junit.DomainOrderTests, org.jfree.data.junit.KeyToGroupMapTests, org.jfree.data.junit.KeyToGroupMapTests, org.jfree.data.junit.KeyedObjectTests, org.jfree.data.junit.KeyedObjectTests, org.jfree.data.junit.KeyedObjects2DTests, org.jfree.data.junit.KeyedObjects2DTests, org.jfree.data.junit.KeyedObjectsTests, org.jfree.data.junit.KeyedObjectsTests, org.jfree.data.junit.RangeTests, org.jfree.data.junit.RangeTests, org.jfree.data.junit.RangeTypeTests, org.jfree.data.junit.RangeTypeTests, org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests, org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests, org.jfree.data.statistics.junit.BoxAndWhiskerItemTests, org.jfree.data.statistics.junit.BoxAndWhiskerItemTests, org.jfree.data.statistics.junit.DataStatisticsPackageTests, org.jfree.data.statistics.junit.DataStatisticsPackageTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests, org.jfree.data.statistics.junit.HistogramBinTests, org.jfree.data.statistics.junit.HistogramBinTests, org.jfree.data.statistics.junit.HistogramDatasetTests, org.jfree.data.statistics.junit.HistogramDatasetTests, org.jfree.data.statistics.junit.MeanAndStandardDeviationTests, org.jfree.data.statistics.junit.MeanAndStandardDeviationTests, org.jfree.data.statistics.junit.RegressionTests, org.jfree.data.statistics.junit.RegressionTests, org.jfree.data.statistics.junit.SimpleHistogramBinTests, org.jfree.data.statistics.junit.SimpleHistogramBinTests, org.jfree.data.statistics.junit.SimpleHistogramDatasetTests, org.jfree.data.statistics.junit.SimpleHistogramDatasetTests, org.jfree.data.statistics.junit.StatisticsTests, org.jfree.data.statistics.junit.StatisticsTests, org.jfree.data.time.junit.DataTimePackageTests, org.jfree.data.time.junit.DataTimePackageTests, org.jfree.data.time.junit.DateRangeTests, org.jfree.data.time.junit.DateRangeTests, org.jfree.data.time.junit.DayTests, org.jfree.data.time.junit.DayTests, org.jfree.data.time.junit.FixedMillisecondTests, org.jfree.data.time.junit.FixedMillisecondTests, org.jfree.data.time.junit.HourTests, org.jfree.data.time.junit.HourTests, org.jfree.data.time.junit.MillisecondTests, org.jfree.data.time.junit.MillisecondTests, org.jfree.data.time.junit.MinuteTests, org.jfree.data.time.junit.MinuteTests, org.jfree.data.time.junit.MonthTests, org.jfree.data.time.junit.MonthTests, org.jfree.data.time.junit.MovingAverageTests, org.jfree.data.time.junit.MovingAverageTests, org.jfree.data.time.junit.QuarterTests, org.jfree.data.time.junit.QuarterTests, org.jfree.data.time.junit.SecondTests, org.jfree.data.time.junit.SecondTests, org.jfree.data.time.junit.SimpleTimePeriodTests, org.jfree.data.time.junit.SimpleTimePeriodTests, org.jfree.data.time.junit.TimePeriodAnchorTests, org.jfree.data.time.junit.TimePeriodAnchorTests, org.jfree.data.time.junit.TimePeriodValueTests, org.jfree.data.time.junit.TimePeriodValueTests, org.jfree.data.time.junit.TimePeriodValuesCollectionTests, org.jfree.data.time.junit.TimePeriodValuesCollectionTests, org.jfree.data.time.junit.TimePeriodValuesTests, org.jfree.data.time.junit.TimePeriodValuesTests, org.jfree.data.time.junit.TimeSeriesCollectionTests, org.jfree.data.time.junit.TimeSeriesCollectionTests, org.jfree.data.time.junit.TimeSeriesDataItemTests, org.jfree.data.time.junit.TimeSeriesDataItemTests, org.jfree.data.time.junit.TimeSeriesTests, org.jfree.data.time.junit.TimeSeriesTests, org.jfree.data.time.junit.TimeTableXYDatasetTests, org.jfree.data.time.junit.TimeTableXYDatasetTests, org.jfree.data.time.junit.WeekTests, org.jfree.data.time.junit.WeekTests, org.jfree.data.time.junit.YearTests, org.jfree.data.time.junit.YearTests, org.jfree.data.time.ohlc.junit.OHLCItemTests, org.jfree.data.time.ohlc.junit.OHLCItemTests, org.jfree.data.time.ohlc.junit.OHLCPackageTests, org.jfree.data.time.ohlc.junit.OHLCPackageTests, org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests, org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests, org.jfree.data.time.ohlc.junit.OHLCSeriesTests, org.jfree.data.time.ohlc.junit.OHLCSeriesTests, org.jfree.data.time.ohlc.junit.OHLCTests, org.jfree.data.time.ohlc.junit.OHLCTests, org.jfree.data.xy.junit.CategoryTableXYDatasetTests, org.jfree.data.xy.junit.CategoryTableXYDatasetTests, org.jfree.data.xy.junit.DataXYPackageTests, org.jfree.data.xy.junit.DataXYPackageTests, org.jfree.data.xy.junit.DefaultHighLowDatasetTests, org.jfree.data.xy.junit.DefaultHighLowDatasetTests, org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests, org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests, org.jfree.data.xy.junit.DefaultOHLCDatasetTests, org.jfree.data.xy.junit.DefaultOHLCDatasetTests, org.jfree.data.xy.junit.DefaultTableXYDatasetTests, org.jfree.data.xy.junit.DefaultTableXYDatasetTests, org.jfree.data.xy.junit.DefaultWindDatasetTests, org.jfree.data.xy.junit.DefaultWindDatasetTests, org.jfree.data.xy.junit.DefaultXYDatasetTests, org.jfree.data.xy.junit.DefaultXYDatasetTests, org.jfree.data.xy.junit.DefaultXYZDatasetTests, org.jfree.data.xy.junit.DefaultXYZDatasetTests, org.jfree.data.xy.junit.IntervalXYDelegateTests, org.jfree.data.xy.junit.IntervalXYDelegateTests, org.jfree.data.xy.junit.MatrixSeriesCollectionTests, org.jfree.data.xy.junit.MatrixSeriesCollectionTests, org.jfree.data.xy.junit.MatrixSeriesTests, org.jfree.data.xy.junit.MatrixSeriesTests, org.jfree.data.xy.junit.OHLCDataItemTests, org.jfree.data.xy.junit.OHLCDataItemTests, org.jfree.data.xy.junit.TableXYDatasetTests, org.jfree.data.xy.junit.TableXYDatasetTests, org.jfree.data.xy.junit.VectorDataItemTests, org.jfree.data.xy.junit.VectorDataItemTests, org.jfree.data.xy.junit.VectorSeriesCollectionTests, org.jfree.data.xy.junit.VectorSeriesCollectionTests, org.jfree.data.xy.junit.VectorSeriesTests, org.jfree.data.xy.junit.VectorSeriesTests, org.jfree.data.xy.junit.VectorTests, org.jfree.data.xy.junit.VectorTests, org.jfree.data.xy.junit.XIntervalDataItemTests, org.jfree.data.xy.junit.XIntervalDataItemTests, org.jfree.data.xy.junit.XIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XIntervalSeriesTests, org.jfree.data.xy.junit.XIntervalSeriesTests, org.jfree.data.xy.junit.XYBarDatasetTests, org.jfree.data.xy.junit.XYBarDatasetTests, org.jfree.data.xy.junit.XYCoordinateTests, org.jfree.data.xy.junit.XYCoordinateTests, org.jfree.data.xy.junit.XYDataItemTests, org.jfree.data.xy.junit.XYDataItemTests, org.jfree.data.xy.junit.XYIntervalDataItemTests, org.jfree.data.xy.junit.XYIntervalDataItemTests, org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XYIntervalSeriesTests, org.jfree.data.xy.junit.XYIntervalSeriesTests, org.jfree.data.xy.junit.XYIntervalTests, org.jfree.data.xy.junit.XYIntervalTests, org.jfree.data.xy.junit.XYSeriesCollectionTests, org.jfree.data.xy.junit.XYSeriesCollectionTests, org.jfree.data.xy.junit.XYSeriesTests, org.jfree.data.xy.junit.XYSeriesTests, org.jfree.data.xy.junit.YIntervalDataItemTests, org.jfree.data.xy.junit.YIntervalDataItemTests, org.jfree.data.xy.junit.YIntervalSeriesCollectionTests, org.jfree.data.xy.junit.YIntervalSeriesCollectionTests, org.jfree.data.xy.junit.YIntervalSeriesTests, org.jfree.data.xy.junit.YIntervalSeriesTests, org.jfree.data.xy.junit.YIntervalTests, org.jfree.data.xy.junit.YIntervalTests, org.jfree.data.xy.junit.YWithXIntervalTests, org.jfree.data.xy.junit.YWithXIntervalTests]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Chart_9/source], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[org.jfree.chart.annotations.junit.AnnotationsPackageTests, org.jfree.chart.annotations.junit.AnnotationsPackageTests, org.jfree.chart.annotations.junit.CategoryLineAnnotationTests, org.jfree.chart.annotations.junit.CategoryLineAnnotationTests, org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests, org.jfree.chart.annotations.junit.CategoryPointerAnnotationTests, org.jfree.chart.annotations.junit.CategoryTextAnnotationTests, org.jfree.chart.annotations.junit.CategoryTextAnnotationTests, org.jfree.chart.annotations.junit.TextAnnotationTests, org.jfree.chart.annotations.junit.TextAnnotationTests, org.jfree.chart.annotations.junit.XYBoxAnnotationTests, org.jfree.chart.annotations.junit.XYBoxAnnotationTests, org.jfree.chart.annotations.junit.XYDrawableAnnotationTests, org.jfree.chart.annotations.junit.XYDrawableAnnotationTests, org.jfree.chart.annotations.junit.XYImageAnnotationTests, org.jfree.chart.annotations.junit.XYImageAnnotationTests, org.jfree.chart.annotations.junit.XYLineAnnotationTests, org.jfree.chart.annotations.junit.XYLineAnnotationTests, org.jfree.chart.annotations.junit.XYPointerAnnotationTests, org.jfree.chart.annotations.junit.XYPointerAnnotationTests, org.jfree.chart.annotations.junit.XYPolygonAnnotationTests, org.jfree.chart.annotations.junit.XYPolygonAnnotationTests, org.jfree.chart.annotations.junit.XYShapeAnnotationTests, org.jfree.chart.annotations.junit.XYShapeAnnotationTests, org.jfree.chart.annotations.junit.XYTextAnnotationTests, org.jfree.chart.annotations.junit.XYTextAnnotationTests, org.jfree.chart.axis.junit.AxisLocationTests, org.jfree.chart.axis.junit.AxisLocationTests, org.jfree.chart.axis.junit.AxisPackageTests, org.jfree.chart.axis.junit.AxisPackageTests, org.jfree.chart.axis.junit.AxisSpaceTests, org.jfree.chart.axis.junit.AxisSpaceTests, org.jfree.chart.axis.junit.AxisTests, org.jfree.chart.axis.junit.AxisTests, org.jfree.chart.axis.junit.CategoryAnchorTests, org.jfree.chart.axis.junit.CategoryAnchorTests, org.jfree.chart.axis.junit.CategoryAxis3DTests, org.jfree.chart.axis.junit.CategoryAxis3DTests, org.jfree.chart.axis.junit.CategoryAxisTests, org.jfree.chart.axis.junit.CategoryAxisTests, org.jfree.chart.axis.junit.CategoryLabelPositionTests, org.jfree.chart.axis.junit.CategoryLabelPositionTests, org.jfree.chart.axis.junit.CategoryLabelPositionsTests, org.jfree.chart.axis.junit.CategoryLabelPositionsTests, org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests, org.jfree.chart.axis.junit.CategoryLabelWidthTypeTests, org.jfree.chart.axis.junit.CategoryTickTests, org.jfree.chart.axis.junit.CategoryTickTests, org.jfree.chart.axis.junit.CyclicNumberAxisTests, org.jfree.chart.axis.junit.CyclicNumberAxisTests, org.jfree.chart.axis.junit.DateAxisTests, org.jfree.chart.axis.junit.DateAxisTests, org.jfree.chart.axis.junit.DateTickMarkPositionTests, org.jfree.chart.axis.junit.DateTickMarkPositionTests, org.jfree.chart.axis.junit.DateTickTests, org.jfree.chart.axis.junit.DateTickTests, org.jfree.chart.axis.junit.DateTickUnitTests, org.jfree.chart.axis.junit.DateTickUnitTests, org.jfree.chart.axis.junit.ExtendedCategoryAxisTests, org.jfree.chart.axis.junit.ExtendedCategoryAxisTests, org.jfree.chart.axis.junit.LogAxisTests, org.jfree.chart.axis.junit.LogAxisTests, org.jfree.chart.axis.junit.LogarithmicAxisTests, org.jfree.chart.axis.junit.LogarithmicAxisTests, org.jfree.chart.axis.junit.MarkerAxisBandTests, org.jfree.chart.axis.junit.MarkerAxisBandTests, org.jfree.chart.axis.junit.MonthDateFormatTests, org.jfree.chart.axis.junit.MonthDateFormatTests, org.jfree.chart.axis.junit.NumberAxis3DTests, org.jfree.chart.axis.junit.NumberAxis3DTests, org.jfree.chart.axis.junit.NumberAxisTests, org.jfree.chart.axis.junit.NumberAxisTests, org.jfree.chart.axis.junit.NumberTickUnitTests, org.jfree.chart.axis.junit.NumberTickUnitTests, org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests, org.jfree.chart.axis.junit.PeriodAxisLabelInfoTests, org.jfree.chart.axis.junit.PeriodAxisTests, org.jfree.chart.axis.junit.PeriodAxisTests, org.jfree.chart.axis.junit.QuarterDateFormatTests, org.jfree.chart.axis.junit.QuarterDateFormatTests, org.jfree.chart.axis.junit.SegmentedTimelineTests, org.jfree.chart.axis.junit.SegmentedTimelineTests, org.jfree.chart.axis.junit.SegmentedTimelineTests2, org.jfree.chart.axis.junit.SegmentedTimelineTests2, org.jfree.chart.axis.junit.StandardTickUnitSourceTests, org.jfree.chart.axis.junit.StandardTickUnitSourceTests, org.jfree.chart.axis.junit.SubCategoryAxisTests, org.jfree.chart.axis.junit.SubCategoryAxisTests, org.jfree.chart.axis.junit.SymbolAxisTests, org.jfree.chart.axis.junit.SymbolAxisTests, org.jfree.chart.axis.junit.TickUnitsTests, org.jfree.chart.axis.junit.TickUnitsTests, org.jfree.chart.axis.junit.ValueAxisTests, org.jfree.chart.axis.junit.ValueAxisTests, org.jfree.chart.block.junit.AbstractBlockTests, org.jfree.chart.block.junit.AbstractBlockTests, org.jfree.chart.block.junit.BlockBorderTests, org.jfree.chart.block.junit.BlockBorderTests, org.jfree.chart.block.junit.BlockContainerTests, org.jfree.chart.block.junit.BlockContainerTests, org.jfree.chart.block.junit.BlockPackageTests, org.jfree.chart.block.junit.BlockPackageTests, org.jfree.chart.block.junit.BorderArrangementTests, org.jfree.chart.block.junit.BorderArrangementTests, org.jfree.chart.block.junit.ColorBlockTests, org.jfree.chart.block.junit.ColorBlockTests, org.jfree.chart.block.junit.ColumnArrangementTests, org.jfree.chart.block.junit.ColumnArrangementTests, org.jfree.chart.block.junit.EmptyBlockTests, org.jfree.chart.block.junit.EmptyBlockTests, org.jfree.chart.block.junit.FlowArrangementTests, org.jfree.chart.block.junit.FlowArrangementTests, org.jfree.chart.block.junit.GridArrangementTests, org.jfree.chart.block.junit.GridArrangementTests, org.jfree.chart.block.junit.LabelBlockTests, org.jfree.chart.block.junit.LabelBlockTests, org.jfree.chart.block.junit.LineBorderTests, org.jfree.chart.block.junit.LineBorderTests, org.jfree.chart.block.junit.RectangleConstraintTests, org.jfree.chart.block.junit.RectangleConstraintTests, org.jfree.chart.entity.junit.CategoryItemEntityTests, org.jfree.chart.entity.junit.CategoryItemEntityTests, org.jfree.chart.entity.junit.EntityPackageTests, org.jfree.chart.entity.junit.EntityPackageTests, org.jfree.chart.entity.junit.LegendItemEntityTests, org.jfree.chart.entity.junit.LegendItemEntityTests, org.jfree.chart.entity.junit.PieSectionEntityTests, org.jfree.chart.entity.junit.PieSectionEntityTests, org.jfree.chart.entity.junit.StandardEntityCollectionTests, org.jfree.chart.entity.junit.StandardEntityCollectionTests, org.jfree.chart.entity.junit.TickLabelEntityTests, org.jfree.chart.entity.junit.TickLabelEntityTests, org.jfree.chart.entity.junit.XYItemEntityTests, org.jfree.chart.entity.junit.XYItemEntityTests, org.jfree.chart.imagemap.junit.ImageMapPackageTests, org.jfree.chart.imagemap.junit.ImageMapPackageTests, org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardURLTagFragmentGeneratorTests, org.jfree.chart.imagemap.junit.StandardURLTagFragmentGeneratorTests, org.jfree.chart.junit.AreaChartTests, org.jfree.chart.junit.AreaChartTests, org.jfree.chart.junit.BarChart3DTests, org.jfree.chart.junit.BarChart3DTests, org.jfree.chart.junit.BarChartTests, org.jfree.chart.junit.BarChartTests, org.jfree.chart.junit.ChartPackageTests, org.jfree.chart.junit.ChartPackageTests, org.jfree.chart.junit.ChartPanelTests, org.jfree.chart.junit.ChartPanelTests, org.jfree.chart.junit.ChartRenderingInfoTests, org.jfree.chart.junit.ChartRenderingInfoTests, org.jfree.chart.junit.GanttChartTests, org.jfree.chart.junit.GanttChartTests, org.jfree.chart.junit.JFreeChartTests, org.jfree.chart.junit.JFreeChartTests, org.jfree.chart.junit.LegendItemCollectionTests, org.jfree.chart.junit.LegendItemCollectionTests, org.jfree.chart.junit.LegendItemTests, org.jfree.chart.junit.LegendItemTests, org.jfree.chart.junit.LineChart3DTests, org.jfree.chart.junit.LineChart3DTests, org.jfree.chart.junit.LineChartTests, org.jfree.chart.junit.LineChartTests, org.jfree.chart.junit.MeterChartTests, org.jfree.chart.junit.MeterChartTests, org.jfree.chart.junit.PaintMapTests, org.jfree.chart.junit.PaintMapTests, org.jfree.chart.junit.PieChart3DTests, org.jfree.chart.junit.PieChart3DTests, org.jfree.chart.junit.PieChartTests, org.jfree.chart.junit.PieChartTests, org.jfree.chart.junit.ScatterPlotTests, org.jfree.chart.junit.ScatterPlotTests, org.jfree.chart.junit.StackedAreaChartTests, org.jfree.chart.junit.StackedAreaChartTests, org.jfree.chart.junit.StackedBarChart3DTests, org.jfree.chart.junit.StackedBarChart3DTests, org.jfree.chart.junit.StackedBarChartTests, org.jfree.chart.junit.StackedBarChartTests, org.jfree.chart.junit.StrokeMapTests, org.jfree.chart.junit.StrokeMapTests, org.jfree.chart.junit.TimeSeriesChartTests, org.jfree.chart.junit.TimeSeriesChartTests, org.jfree.chart.junit.WaterfallChartTests, org.jfree.chart.junit.WaterfallChartTests, org.jfree.chart.junit.XYAreaChartTests, org.jfree.chart.junit.XYAreaChartTests, org.jfree.chart.junit.XYBarChartTests, org.jfree.chart.junit.XYBarChartTests, org.jfree.chart.junit.XYLineChartTests, org.jfree.chart.junit.XYLineChartTests, org.jfree.chart.junit.XYStepAreaChartTests, org.jfree.chart.junit.XYStepAreaChartTests, org.jfree.chart.junit.XYStepChartTests, org.jfree.chart.junit.XYStepChartTests, org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests, org.jfree.chart.labels.junit.BoxAndWhiskerXYToolTipGeneratorTests, org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.BubbleXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.CustomXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests, org.jfree.chart.labels.junit.HighLowItemLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests, org.jfree.chart.labels.junit.IntervalCategoryLabelGeneratorTests, org.jfree.chart.labels.junit.ItemLabelAnchorTests, org.jfree.chart.labels.junit.ItemLabelAnchorTests, org.jfree.chart.labels.junit.ItemLabelPositionTests, org.jfree.chart.labels.junit.ItemLabelPositionTests, org.jfree.chart.labels.junit.LabelsPackageTests, org.jfree.chart.labels.junit.LabelsPackageTests, org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.MultipleXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategorySeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardCategoryToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests, org.jfree.chart.labels.junit.StandardPieSectionLabelGeneratorTests, org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardPieToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYSeriesLabelGeneratorTests, org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests, org.jfree.chart.labels.junit.StandardXYZToolTipGeneratorTests, org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests, org.jfree.chart.labels.junit.SymbolicXYItemLabelGeneratorTests, org.jfree.chart.needle.junit.ArrowNeedleTests, org.jfree.chart.needle.junit.ArrowNeedleTests, org.jfree.chart.needle.junit.LineNeedleTests, org.jfree.chart.needle.junit.LineNeedleTests, org.jfree.chart.needle.junit.LongNeedleTests, org.jfree.chart.needle.junit.LongNeedleTests, org.jfree.chart.needle.junit.MeterNeedleTests, org.jfree.chart.needle.junit.MeterNeedleTests, org.jfree.chart.needle.junit.MiddlePinNeedleTests, org.jfree.chart.needle.junit.MiddlePinNeedleTests, org.jfree.chart.needle.junit.NeedlePackageTests, org.jfree.chart.needle.junit.NeedlePackageTests, org.jfree.chart.needle.junit.PinNeedleTests, org.jfree.chart.needle.junit.PinNeedleTests, org.jfree.chart.needle.junit.PlumNeedleTests, org.jfree.chart.needle.junit.PlumNeedleTests, org.jfree.chart.needle.junit.PointerNeedleTests, org.jfree.chart.needle.junit.PointerNeedleTests, org.jfree.chart.needle.junit.ShipNeedleTests, org.jfree.chart.needle.junit.ShipNeedleTests, org.jfree.chart.needle.junit.WindNeedleTests, org.jfree.chart.needle.junit.WindNeedleTests, org.jfree.chart.plot.dial.junit.AbstractDialLayerTests, org.jfree.chart.plot.dial.junit.AbstractDialLayerTests, org.jfree.chart.plot.dial.junit.ArcDialFrameTests, org.jfree.chart.plot.dial.junit.ArcDialFrameTests, org.jfree.chart.plot.dial.junit.DialBackgroundTests, org.jfree.chart.plot.dial.junit.DialBackgroundTests, org.jfree.chart.plot.dial.junit.DialCapTests, org.jfree.chart.plot.dial.junit.DialCapTests, org.jfree.chart.plot.dial.junit.DialPackageTests, org.jfree.chart.plot.dial.junit.DialPackageTests, org.jfree.chart.plot.dial.junit.DialPlotTests, org.jfree.chart.plot.dial.junit.DialPlotTests, org.jfree.chart.plot.dial.junit.DialPointerTests, org.jfree.chart.plot.dial.junit.DialPointerTests, org.jfree.chart.plot.dial.junit.DialTextAnnotationTests, org.jfree.chart.plot.dial.junit.DialTextAnnotationTests, org.jfree.chart.plot.dial.junit.DialValueIndicatorTests, org.jfree.chart.plot.dial.junit.DialValueIndicatorTests, org.jfree.chart.plot.dial.junit.StandardDialFrameTests, org.jfree.chart.plot.dial.junit.StandardDialFrameTests, org.jfree.chart.plot.dial.junit.StandardDialRangeTests, org.jfree.chart.plot.dial.junit.StandardDialRangeTests, org.jfree.chart.plot.dial.junit.StandardDialScaleTests, org.jfree.chart.plot.dial.junit.StandardDialScaleTests, org.jfree.chart.plot.junit.CategoryMarkerTests, org.jfree.chart.plot.junit.CategoryMarkerTests, org.jfree.chart.plot.junit.CategoryPlotTests, org.jfree.chart.plot.junit.CategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainCategoryPlotTests, org.jfree.chart.plot.junit.CombinedDomainXYPlotTests, org.jfree.chart.plot.junit.CombinedDomainXYPlotTests, org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests, org.jfree.chart.plot.junit.CombinedRangeCategoryPlotTests, org.jfree.chart.plot.junit.CombinedRangeXYPlotTests, org.jfree.chart.plot.junit.CombinedRangeXYPlotTests, org.jfree.chart.plot.junit.CompassPlotTests, org.jfree.chart.plot.junit.CompassPlotTests, org.jfree.chart.plot.junit.DefaultDrawingSupplierTests, org.jfree.chart.plot.junit.DefaultDrawingSupplierTests, org.jfree.chart.plot.junit.FastScatterPlotTests, org.jfree.chart.plot.junit.FastScatterPlotTests, org.jfree.chart.plot.junit.IntervalMarkerTests, org.jfree.chart.plot.junit.IntervalMarkerTests, org.jfree.chart.plot.junit.MarkerTests, org.jfree.chart.plot.junit.MarkerTests, org.jfree.chart.plot.junit.MeterIntervalTests, org.jfree.chart.plot.junit.MeterIntervalTests, org.jfree.chart.plot.junit.MeterPlotTests, org.jfree.chart.plot.junit.MeterPlotTests, org.jfree.chart.plot.junit.MultiplePiePlotTests, org.jfree.chart.plot.junit.MultiplePiePlotTests, org.jfree.chart.plot.junit.PieLabelRecordTests, org.jfree.chart.plot.junit.PieLabelRecordTests, org.jfree.chart.plot.junit.PiePlot3DTests, org.jfree.chart.plot.junit.PiePlot3DTests, org.jfree.chart.plot.junit.PiePlotTests, org.jfree.chart.plot.junit.PiePlotTests, org.jfree.chart.plot.junit.PlotOrientationTests, org.jfree.chart.plot.junit.PlotOrientationTests, org.jfree.chart.plot.junit.PlotPackageTests, org.jfree.chart.plot.junit.PlotPackageTests, org.jfree.chart.plot.junit.PlotRenderingInfoTests, org.jfree.chart.plot.junit.PlotRenderingInfoTests, org.jfree.chart.plot.junit.PlotTests, org.jfree.chart.plot.junit.PlotTests, org.jfree.chart.plot.junit.PolarPlotTests, org.jfree.chart.plot.junit.PolarPlotTests, org.jfree.chart.plot.junit.RingPlotTests, org.jfree.chart.plot.junit.RingPlotTests, org.jfree.chart.plot.junit.SpiderWebPlotTests, org.jfree.chart.plot.junit.SpiderWebPlotTests, org.jfree.chart.plot.junit.ThermometerPlotTests, org.jfree.chart.plot.junit.ThermometerPlotTests, org.jfree.chart.plot.junit.ValueMarkerTests, org.jfree.chart.plot.junit.ValueMarkerTests, org.jfree.chart.plot.junit.XYPlotTests, org.jfree.chart.plot.junit.XYPlotTests, org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.AreaRendererTests, org.jfree.chart.renderer.category.junit.AreaRendererTests, org.jfree.chart.renderer.category.junit.BarRenderer3DTests, org.jfree.chart.renderer.category.junit.BarRenderer3DTests, org.jfree.chart.renderer.category.junit.BarRendererTests, org.jfree.chart.renderer.category.junit.BarRendererTests, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests, org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests, org.jfree.chart.renderer.category.junit.CategoryStepRendererTests, org.jfree.chart.renderer.category.junit.CategoryStepRendererTests, org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.DefaultCategoryItemRendererTests, org.jfree.chart.renderer.category.junit.GanttRendererTests, org.jfree.chart.renderer.category.junit.GanttRendererTests, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests, org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests, org.jfree.chart.renderer.category.junit.IntervalBarRendererTests, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests, org.jfree.chart.renderer.category.junit.LayeredBarRendererTests, org.jfree.chart.renderer.category.junit.LevelRendererTests, org.jfree.chart.renderer.category.junit.LevelRendererTests, org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.LineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.LineRenderer3DTests, org.jfree.chart.renderer.category.junit.LineRenderer3DTests, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests, org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests, org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests, org.jfree.chart.renderer.category.junit.RendererCategoryPackageTests, org.jfree.chart.renderer.category.junit.ScatterRendererTests, org.jfree.chart.renderer.category.junit.ScatterRendererTests, org.jfree.chart.renderer.category.junit.StackedAreaRendererTests, org.jfree.chart.renderer.category.junit.StackedAreaRendererTests, org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests, org.jfree.chart.renderer.category.junit.StackedBarRenderer3DTests, org.jfree.chart.renderer.category.junit.StackedBarRendererTests, org.jfree.chart.renderer.category.junit.StackedBarRendererTests, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests, org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests, org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests, org.jfree.chart.renderer.category.junit.WaterfallBarRendererTests, org.jfree.chart.renderer.junit.AbstractRendererTests, org.jfree.chart.renderer.junit.AbstractRendererTests, org.jfree.chart.renderer.junit.AreaRendererEndTypeTests, org.jfree.chart.renderer.junit.AreaRendererEndTypeTests, org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests, org.jfree.chart.renderer.junit.DefaultPolarItemRendererTests, org.jfree.chart.renderer.junit.GrayPaintScaleTests, org.jfree.chart.renderer.junit.GrayPaintScaleTests, org.jfree.chart.renderer.junit.LookupPaintScaleTests, org.jfree.chart.renderer.junit.LookupPaintScaleTests, org.jfree.chart.renderer.junit.OutlierTests, org.jfree.chart.renderer.junit.OutlierTests, org.jfree.chart.renderer.junit.RendererPackageTests, org.jfree.chart.renderer.junit.RendererPackageTests, org.jfree.chart.renderer.junit.RendererUtilitiesTests, org.jfree.chart.renderer.junit.RendererUtilitiesTests, org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests, org.jfree.chart.renderer.xy.junit.AbstractXYItemRendererTests, org.jfree.chart.renderer.xy.junit.CandlestickRendererTests, org.jfree.chart.renderer.xy.junit.CandlestickRendererTests, org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests, org.jfree.chart.renderer.xy.junit.ClusteredXYBarRendererTests, org.jfree.chart.renderer.xy.junit.DeviationRendererTests, org.jfree.chart.renderer.xy.junit.DeviationRendererTests, org.jfree.chart.renderer.xy.junit.HighLowRendererTests, org.jfree.chart.renderer.xy.junit.HighLowRendererTests, org.jfree.chart.renderer.xy.junit.RendererXYPackageTests, org.jfree.chart.renderer.xy.junit.RendererXYPackageTests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYAreaRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests, org.jfree.chart.renderer.xy.junit.StackedXYBarRendererTests, org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests, org.jfree.chart.renderer.xy.junit.StandardXYItemRendererTests, org.jfree.chart.renderer.xy.junit.VectorRendererTests, org.jfree.chart.renderer.xy.junit.VectorRendererTests, org.jfree.chart.renderer.xy.junit.WindItemRendererTests, org.jfree.chart.renderer.xy.junit.WindItemRendererTests, org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests, org.jfree.chart.renderer.xy.junit.XYAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYBarRendererTests, org.jfree.chart.renderer.xy.junit.XYBarRendererTests, org.jfree.chart.renderer.xy.junit.XYBlockRendererTests, org.jfree.chart.renderer.xy.junit.XYBlockRendererTests, org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests, org.jfree.chart.renderer.xy.junit.XYBoxAndWhiskerRendererTests, org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests, org.jfree.chart.renderer.xy.junit.XYBubbleRendererTests, org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests, org.jfree.chart.renderer.xy.junit.XYDifferenceRendererTests, org.jfree.chart.renderer.xy.junit.XYDotRendererTests, org.jfree.chart.renderer.xy.junit.XYDotRendererTests, org.jfree.chart.renderer.xy.junit.XYErrorRendererTests, org.jfree.chart.renderer.xy.junit.XYErrorRendererTests, org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests, org.jfree.chart.renderer.xy.junit.XYLine3DRendererTests, org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYLineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYSplineAndShapeRendererTests, org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYStepAreaRendererTests, org.jfree.chart.renderer.xy.junit.XYStepRendererTests, org.jfree.chart.renderer.xy.junit.XYStepRendererTests, org.jfree.chart.renderer.xy.junit.YIntervalRendererTests, org.jfree.chart.renderer.xy.junit.YIntervalRendererTests, org.jfree.chart.title.junit.CompositeTitleTests, org.jfree.chart.title.junit.CompositeTitleTests, org.jfree.chart.title.junit.DateTitleTests, org.jfree.chart.title.junit.DateTitleTests, org.jfree.chart.title.junit.ImageTitleTests, org.jfree.chart.title.junit.ImageTitleTests, org.jfree.chart.title.junit.LegendGraphicTests, org.jfree.chart.title.junit.LegendGraphicTests, org.jfree.chart.title.junit.LegendTitleTests, org.jfree.chart.title.junit.LegendTitleTests, org.jfree.chart.title.junit.PaintScaleLegendTests, org.jfree.chart.title.junit.PaintScaleLegendTests, org.jfree.chart.title.junit.TextTitleTests, org.jfree.chart.title.junit.TextTitleTests, org.jfree.chart.title.junit.TitlePackageTests, org.jfree.chart.title.junit.TitlePackageTests, org.jfree.chart.title.junit.TitleTests, org.jfree.chart.title.junit.TitleTests, org.jfree.chart.urls.junit.CustomPieURLGeneratorTests, org.jfree.chart.urls.junit.CustomPieURLGeneratorTests, org.jfree.chart.urls.junit.CustomXYURLGeneratorTests, org.jfree.chart.urls.junit.CustomXYURLGeneratorTests, org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests, org.jfree.chart.urls.junit.StandardCategoryURLGeneratorTests, org.jfree.chart.urls.junit.StandardPieURLGeneratorTests, org.jfree.chart.urls.junit.StandardPieURLGeneratorTests, org.jfree.chart.urls.junit.StandardXYURLGeneratorTests, org.jfree.chart.urls.junit.StandardXYURLGeneratorTests, org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests, org.jfree.chart.urls.junit.TimeSeriesURLGeneratorTests, org.jfree.chart.urls.junit.UrlsPackageTests, org.jfree.chart.urls.junit.UrlsPackageTests, org.jfree.chart.util.junit.BooleanListTests, org.jfree.chart.util.junit.BooleanListTests, org.jfree.chart.util.junit.HashUtilitiesTests, org.jfree.chart.util.junit.HashUtilitiesTests, org.jfree.chart.util.junit.LogFormatTests, org.jfree.chart.util.junit.LogFormatTests, org.jfree.chart.util.junit.PaintListTests, org.jfree.chart.util.junit.PaintListTests, org.jfree.chart.util.junit.RelativeDateFormatTests, org.jfree.chart.util.junit.RelativeDateFormatTests, org.jfree.chart.util.junit.ShapeUtilitiesTests, org.jfree.chart.util.junit.ShapeUtilitiesTests, org.jfree.chart.util.junit.StrokeListTests, org.jfree.chart.util.junit.StrokeListTests, org.jfree.chart.util.junit.UtilPackageTests, org.jfree.chart.util.junit.UtilPackageTests, org.jfree.data.category.junit.CategoryToPieDatasetTests, org.jfree.data.category.junit.CategoryToPieDatasetTests, org.jfree.data.category.junit.DataCategoryPackageTests, org.jfree.data.category.junit.DataCategoryPackageTests, org.jfree.data.category.junit.DefaultCategoryDatasetTests, org.jfree.data.category.junit.DefaultCategoryDatasetTests, org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests, org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests, org.jfree.data.gantt.junit.DataGanttPackageTests, org.jfree.data.gantt.junit.DataGanttPackageTests, org.jfree.data.gantt.junit.TaskSeriesCollectionTests, org.jfree.data.gantt.junit.TaskSeriesCollectionTests, org.jfree.data.gantt.junit.TaskSeriesTests, org.jfree.data.gantt.junit.TaskSeriesTests, org.jfree.data.gantt.junit.TaskTests, org.jfree.data.gantt.junit.TaskTests, org.jfree.data.general.junit.DataGeneralPackageTests, org.jfree.data.general.junit.DataGeneralPackageTests, org.jfree.data.general.junit.DatasetGroupTests, org.jfree.data.general.junit.DatasetGroupTests, org.jfree.data.general.junit.DatasetUtilitiesTests, org.jfree.data.general.junit.DatasetUtilitiesTests, org.jfree.data.general.junit.DefaultKeyedValueDatasetTests, org.jfree.data.general.junit.DefaultKeyedValueDatasetTests, org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests, org.jfree.data.general.junit.DefaultKeyedValues2DDatasetTests, org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests, org.jfree.data.general.junit.DefaultKeyedValuesDatasetTests, org.jfree.data.general.junit.DefaultPieDatasetTests, org.jfree.data.general.junit.DefaultPieDatasetTests, org.jfree.data.junit.ComparableObjectItemTests, org.jfree.data.junit.ComparableObjectItemTests, org.jfree.data.junit.ComparableObjectSeriesTests, org.jfree.data.junit.ComparableObjectSeriesTests, org.jfree.data.junit.DataPackageTests, org.jfree.data.junit.DataPackageTests, org.jfree.data.junit.DataUtilitiesTests, org.jfree.data.junit.DataUtilitiesTests, org.jfree.data.junit.DefaultKeyedValueTests, org.jfree.data.junit.DefaultKeyedValueTests, org.jfree.data.junit.DefaultKeyedValues2DTests, org.jfree.data.junit.DefaultKeyedValues2DTests, org.jfree.data.junit.DefaultKeyedValuesTests, org.jfree.data.junit.DefaultKeyedValuesTests, org.jfree.data.junit.DomainOrderTests, org.jfree.data.junit.DomainOrderTests, org.jfree.data.junit.KeyToGroupMapTests, org.jfree.data.junit.KeyToGroupMapTests, org.jfree.data.junit.KeyedObjectTests, org.jfree.data.junit.KeyedObjectTests, org.jfree.data.junit.KeyedObjects2DTests, org.jfree.data.junit.KeyedObjects2DTests, org.jfree.data.junit.KeyedObjectsTests, org.jfree.data.junit.KeyedObjectsTests, org.jfree.data.junit.RangeTests, org.jfree.data.junit.RangeTests, org.jfree.data.junit.RangeTypeTests, org.jfree.data.junit.RangeTypeTests, org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests, org.jfree.data.statistics.junit.BoxAndWhiskerCalculatorTests, org.jfree.data.statistics.junit.BoxAndWhiskerItemTests, org.jfree.data.statistics.junit.BoxAndWhiskerItemTests, org.jfree.data.statistics.junit.DataStatisticsPackageTests, org.jfree.data.statistics.junit.DataStatisticsPackageTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultBoxAndWhiskerCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultMultiValueCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests, org.jfree.data.statistics.junit.DefaultStatisticalCategoryDatasetTests, org.jfree.data.statistics.junit.HistogramBinTests, org.jfree.data.statistics.junit.HistogramBinTests, org.jfree.data.statistics.junit.HistogramDatasetTests, org.jfree.data.statistics.junit.HistogramDatasetTests, org.jfree.data.statistics.junit.MeanAndStandardDeviationTests, org.jfree.data.statistics.junit.MeanAndStandardDeviationTests, org.jfree.data.statistics.junit.RegressionTests, org.jfree.data.statistics.junit.RegressionTests, org.jfree.data.statistics.junit.SimpleHistogramBinTests, org.jfree.data.statistics.junit.SimpleHistogramBinTests, org.jfree.data.statistics.junit.SimpleHistogramDatasetTests, org.jfree.data.statistics.junit.SimpleHistogramDatasetTests, org.jfree.data.statistics.junit.StatisticsTests, org.jfree.data.statistics.junit.StatisticsTests, org.jfree.data.time.junit.DataTimePackageTests, org.jfree.data.time.junit.DataTimePackageTests, org.jfree.data.time.junit.DateRangeTests, org.jfree.data.time.junit.DateRangeTests, org.jfree.data.time.junit.DayTests, org.jfree.data.time.junit.DayTests, org.jfree.data.time.junit.FixedMillisecondTests, org.jfree.data.time.junit.FixedMillisecondTests, org.jfree.data.time.junit.HourTests, org.jfree.data.time.junit.HourTests, org.jfree.data.time.junit.MillisecondTests, org.jfree.data.time.junit.MillisecondTests, org.jfree.data.time.junit.MinuteTests, org.jfree.data.time.junit.MinuteTests, org.jfree.data.time.junit.MonthTests, org.jfree.data.time.junit.MonthTests, org.jfree.data.time.junit.MovingAverageTests, org.jfree.data.time.junit.MovingAverageTests, org.jfree.data.time.junit.QuarterTests, org.jfree.data.time.junit.QuarterTests, org.jfree.data.time.junit.SecondTests, org.jfree.data.time.junit.SecondTests, org.jfree.data.time.junit.SimpleTimePeriodTests, org.jfree.data.time.junit.SimpleTimePeriodTests, org.jfree.data.time.junit.TimePeriodAnchorTests, org.jfree.data.time.junit.TimePeriodAnchorTests, org.jfree.data.time.junit.TimePeriodValueTests, org.jfree.data.time.junit.TimePeriodValueTests, org.jfree.data.time.junit.TimePeriodValuesCollectionTests, org.jfree.data.time.junit.TimePeriodValuesCollectionTests, org.jfree.data.time.junit.TimePeriodValuesTests, org.jfree.data.time.junit.TimePeriodValuesTests, org.jfree.data.time.junit.TimeSeriesCollectionTests, org.jfree.data.time.junit.TimeSeriesCollectionTests, org.jfree.data.time.junit.TimeSeriesDataItemTests, org.jfree.data.time.junit.TimeSeriesDataItemTests, org.jfree.data.time.junit.TimeSeriesTests, org.jfree.data.time.junit.TimeSeriesTests, org.jfree.data.time.junit.TimeTableXYDatasetTests, org.jfree.data.time.junit.TimeTableXYDatasetTests, org.jfree.data.time.junit.WeekTests, org.jfree.data.time.junit.WeekTests, org.jfree.data.time.junit.YearTests, org.jfree.data.time.junit.YearTests, org.jfree.data.time.ohlc.junit.OHLCItemTests, org.jfree.data.time.ohlc.junit.OHLCItemTests, org.jfree.data.time.ohlc.junit.OHLCPackageTests, org.jfree.data.time.ohlc.junit.OHLCPackageTests, org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests, org.jfree.data.time.ohlc.junit.OHLCSeriesCollectionTests, org.jfree.data.time.ohlc.junit.OHLCSeriesTests, org.jfree.data.time.ohlc.junit.OHLCSeriesTests, org.jfree.data.time.ohlc.junit.OHLCTests, org.jfree.data.time.ohlc.junit.OHLCTests, org.jfree.data.xy.junit.CategoryTableXYDatasetTests, org.jfree.data.xy.junit.CategoryTableXYDatasetTests, org.jfree.data.xy.junit.DataXYPackageTests, org.jfree.data.xy.junit.DataXYPackageTests, org.jfree.data.xy.junit.DefaultHighLowDatasetTests, org.jfree.data.xy.junit.DefaultHighLowDatasetTests, org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests, org.jfree.data.xy.junit.DefaultIntervalXYDatasetTests, org.jfree.data.xy.junit.DefaultOHLCDatasetTests, org.jfree.data.xy.junit.DefaultOHLCDatasetTests, org.jfree.data.xy.junit.DefaultTableXYDatasetTests, org.jfree.data.xy.junit.DefaultTableXYDatasetTests, org.jfree.data.xy.junit.DefaultWindDatasetTests, org.jfree.data.xy.junit.DefaultWindDatasetTests, org.jfree.data.xy.junit.DefaultXYDatasetTests, org.jfree.data.xy.junit.DefaultXYDatasetTests, org.jfree.data.xy.junit.DefaultXYZDatasetTests, org.jfree.data.xy.junit.DefaultXYZDatasetTests, org.jfree.data.xy.junit.IntervalXYDelegateTests, org.jfree.data.xy.junit.IntervalXYDelegateTests, org.jfree.data.xy.junit.MatrixSeriesCollectionTests, org.jfree.data.xy.junit.MatrixSeriesCollectionTests, org.jfree.data.xy.junit.MatrixSeriesTests, org.jfree.data.xy.junit.MatrixSeriesTests, org.jfree.data.xy.junit.OHLCDataItemTests, org.jfree.data.xy.junit.OHLCDataItemTests, org.jfree.data.xy.junit.TableXYDatasetTests, org.jfree.data.xy.junit.TableXYDatasetTests, org.jfree.data.xy.junit.VectorDataItemTests, org.jfree.data.xy.junit.VectorDataItemTests, org.jfree.data.xy.junit.VectorSeriesCollectionTests, org.jfree.data.xy.junit.VectorSeriesCollectionTests, org.jfree.data.xy.junit.VectorSeriesTests, org.jfree.data.xy.junit.VectorSeriesTests, org.jfree.data.xy.junit.VectorTests, org.jfree.data.xy.junit.VectorTests, org.jfree.data.xy.junit.XIntervalDataItemTests, org.jfree.data.xy.junit.XIntervalDataItemTests, org.jfree.data.xy.junit.XIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XIntervalSeriesTests, org.jfree.data.xy.junit.XIntervalSeriesTests, org.jfree.data.xy.junit.XYBarDatasetTests, org.jfree.data.xy.junit.XYBarDatasetTests, org.jfree.data.xy.junit.XYCoordinateTests, org.jfree.data.xy.junit.XYCoordinateTests, org.jfree.data.xy.junit.XYDataItemTests, org.jfree.data.xy.junit.XYDataItemTests, org.jfree.data.xy.junit.XYIntervalDataItemTests, org.jfree.data.xy.junit.XYIntervalDataItemTests, org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XYIntervalSeriesCollectionTests, org.jfree.data.xy.junit.XYIntervalSeriesTests, org.jfree.data.xy.junit.XYIntervalSeriesTests, org.jfree.data.xy.junit.XYIntervalTests, org.jfree.data.xy.junit.XYIntervalTests, org.jfree.data.xy.junit.XYSeriesCollectionTests, org.jfree.data.xy.junit.XYSeriesCollectionTests, org.jfree.data.xy.junit.XYSeriesTests, org.jfree.data.xy.junit.XYSeriesTests, org.jfree.data.xy.junit.YIntervalDataItemTests, org.jfree.data.xy.junit.YIntervalDataItemTests, org.jfree.data.xy.junit.YIntervalSeriesCollectionTests, org.jfree.data.xy.junit.YIntervalSeriesCollectionTests, org.jfree.data.xy.junit.YIntervalSeriesTests, org.jfree.data.xy.junit.YIntervalSeriesTests, org.jfree.data.xy.junit.YIntervalTests, org.jfree.data.xy.junit.YIntervalTests, org.jfree.data.xy.junit.YWithXIntervalTests, org.jfree.data.xy.junit.YWithXIntervalTests], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Chart/9/seed_260/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[6] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659859578719
GPR[ESUP]-1659859578719
GPR[SFL]-1659859578719
GPR[EFL]-1659859590172
GPR[SFP]-1659859590172
GPR[SSUN]-1659859590251
-1522070587
GPR[SPVATF]-1659859590568
GPR[EPVATF]-1659859590634
GPR[SPS]-1659859590634
GPR[EPS]-1659859591515
GPR[SPVATR]-1659859591515
[16335] INFO TestPatch - Applying patch: org.jfree.data.time.TimeSeries:883: PRECONDITION org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length() == org.jfree.data.time.TimeSeries.this.data.size()
[16566] INFO TestPatch - Running test suite to check the patch "org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length() == org.jfree.data.time.TimeSeries.this.data.size()" is working
GPR[EPVATR]-1659859591762
[16581] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659859591762
[16604] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -882,3 +882,5 @@
         if (end < start) {
-            throw new IllegalArgumentException("Requires start <= end.");
+            if (org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length() == org.jfree.data.time.TimeSeries.this.data.size()) {
+                throw new IllegalArgumentException("Requires start <= end.");
+            }
         }

Saving patch at /experiment_home///results/Nopol/Chart/9/seed_260/patch_13066_1ts_1659859591785.diff
GPR[ESUN]-1659859591787
GPR[SSUN]-1659859591787
-1522070587
GPR[SPVATF]-1659859591931
GPR[EPVATF]-1659859591953
GPR[SPS]-1659859591953
[17013] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TimeSeries extends org.jfree.data.general.Series implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = -5032960206869675528L;

    protected static final java.lang.String DEFAULT_DOMAIN_DESCRIPTION = "Time";

    protected static final java.lang.String DEFAULT_RANGE_DESCRIPTION = "Value";

    private java.lang.String domain;

    private java.lang.String range;

    protected java.lang.Class timePeriodClass;

    protected java.util.List data;

    private int maximumItemCount;

    private long maximumItemAge;

    public TimeSeries(java.lang.Comparable name) {
        this(name, org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION, org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION, org.jfree.data.time.Day.class);
    }

    public TimeSeries(java.lang.Comparable name, java.lang.Class timePeriodClass) {
        this(name, org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION, org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION, timePeriodClass);
    }

    public TimeSeries(java.lang.Comparable name, java.lang.String domain, java.lang.String range, java.lang.Class timePeriodClass) {
        super(name);
        this.domain = domain;
        this.range = range;
        this.timePeriodClass = timePeriodClass;
        this.data = new java.util.ArrayList();
        this.maximumItemCount = java.lang.Integer.MAX_VALUE;
        this.maximumItemAge = java.lang.Long.MAX_VALUE;
    }

    public java.lang.String getDomainDescription() {
        return this.domain;
    }

    public void setDomainDescription(java.lang.String description) {
        java.lang.String old = this.domain;
        this.domain = description;
        firePropertyChange("Domain", old, description);
    }

    public java.lang.String getRangeDescription() {
        return this.range;
    }

    public void setRangeDescription(java.lang.String description) {
        java.lang.String old = this.range;
        this.range = description;
        firePropertyChange("Range", old, description);
    }

    public int getItemCount() {
        return this.data.size();
    }

    public java.util.List getItems() {
        return java.util.Collections.unmodifiableList(this.data);
    }

    public int getMaximumItemCount() {
        return this.maximumItemCount;
    }

    public void setMaximumItemCount(int maximum) {
        if (maximum < 0) {
            throw new java.lang.IllegalArgumentException("Negative 'maximum' argument.");
        }
        this.maximumItemCount = maximum;
        int count = this.data.size();
        if (count > maximum) {
            delete(0, (count - maximum) - 1);
        }
    }

    public long getMaximumItemAge() {
        return this.maximumItemAge;
    }

    public void setMaximumItemAge(long periods) {
        if (periods < 0) {
            throw new java.lang.IllegalArgumentException("Negative 'periods' argument.");
        }
        this.maximumItemAge = periods;
        removeAgedItems(true);
    }

    public java.lang.Class getTimePeriodClass() {
        return this.timePeriodClass;
    }

    public org.jfree.data.time.TimeSeriesDataItem getDataItem(int index) {
        return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
    }

    public org.jfree.data.time.TimeSeriesDataItem getDataItem(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
        } else {
            return null;
        }
    }

    public org.jfree.data.time.RegularTimePeriod getTimePeriod(int index) {
        return getDataItem(index).getPeriod();
    }

    public org.jfree.data.time.RegularTimePeriod getNextTimePeriod() {
        org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
        return last.next();
    }

    public java.util.Collection getTimePeriods() {
        java.util.Collection result = new java.util.ArrayList();
        for (int i = 0; i < getItemCount(); i++) {
            result.add(getTimePeriod(i));
        }
        return result;
    }

    public java.util.Collection getTimePeriodsUniqueToOtherSeries(org.jfree.data.time.TimeSeries series) {
        java.util.Collection result = new java.util.ArrayList();
        for (int i = 0; i < series.getItemCount(); i++) {
            org.jfree.data.time.RegularTimePeriod period = series.getTimePeriod(i);
            int index = getIndex(period);
            if (index < 0) {
                result.add(period);
            }
        }
        return result;
    }

    public int getIndex(org.jfree.data.time.RegularTimePeriod period) {
        if (period == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        org.jfree.data.time.TimeSeriesDataItem dummy = new org.jfree.data.time.TimeSeriesDataItem(period, java.lang.Integer.MIN_VALUE);
        return java.util.Collections.binarySearch(this.data, dummy);
    }

    public java.lang.Number getValue(int index) {
        return getDataItem(index).getValue();
    }

    public java.lang.Number getValue(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            return getValue(index);
        } else {
            return null;
        }
    }

    public void add(org.jfree.data.time.TimeSeriesDataItem item) {
        add(item, true);
    }

    public void add(org.jfree.data.time.TimeSeriesDataItem item, boolean notify) {
        if (item == null) {
            throw new java.lang.IllegalArgumentException("Null 'item' argument.");
        }
        if (!item.getPeriod().getClass().equals(this.timePeriodClass)) {
            java.lang.StringBuffer b = new java.lang.StringBuffer();
            b.append("You are trying to add data where the time period class ");
            b.append("is ");
            b.append(item.getPeriod().getClass().getName());
            b.append(", but the TimeSeries is expecting an instance of ");
            b.append(this.timePeriodClass.getName());
            b.append(".");
            throw new org.jfree.data.general.SeriesException(b.toString());
        }
        boolean added = false;
        int count = getItemCount();
        if (count == 0) {
            this.data.add(item);
            added = true;
        } else {
            org.jfree.data.time.RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
            if (item.getPeriod().compareTo(last) > 0) {
                this.data.add(item);
                added = true;
            } else {
                int index = java.util.Collections.binarySearch(this.data, item);
                if (index < 0) {
                    this.data.add((-index) - 1, item);
                    added = true;
                } else {
                    java.lang.StringBuffer b = new java.lang.StringBuffer();
                    b.append("You are attempting to add an observation for ");
                    b.append("the time period ");
                    b.append(item.getPeriod().toString());
                    b.append(" but the series already contains an observation");
                    b.append(" for that time period. Duplicates are not ");
                    b.append("permitted.  Try using the addOrUpdate() method.");
                    throw new org.jfree.data.general.SeriesException(b.toString());
                }
            }
        }
        if (added) {
            if (getItemCount() > this.maximumItemCount) {
                this.data.remove(0);
            }
            removeAgedItems(false);
            if (notify) {
                fireSeriesChanged();
            }
        }
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, double value) {
        add(period, value, true);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, double value, boolean notify) {
        org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        add(item, notify);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        add(period, value, true);
    }

    public void add(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value, boolean notify) {
        org.jfree.data.time.TimeSeriesDataItem item = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        add(item, notify);
    }

    public void update(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        org.jfree.data.time.TimeSeriesDataItem temp = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        int index = java.util.Collections.binarySearch(this.data, temp);
        if (index >= 0) {
            org.jfree.data.time.TimeSeriesDataItem pair = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
            pair.setValue(value);
            fireSeriesChanged();
        } else {
            throw new org.jfree.data.general.SeriesException("TimeSeries.update(TimePeriod, Number):  period does not exist.");
        }
    }

    public void update(int index, java.lang.Number value) {
        org.jfree.data.time.TimeSeriesDataItem item = getDataItem(index);
        item.setValue(value);
        fireSeriesChanged();
    }

    public org.jfree.data.time.TimeSeries addAndOrUpdate(org.jfree.data.time.TimeSeries series) {
        org.jfree.data.time.TimeSeries overwritten = new org.jfree.data.time.TimeSeries("Overwritten values from: " + getKey(), series.getTimePeriodClass());
        for (int i = 0; i < series.getItemCount(); i++) {
            org.jfree.data.time.TimeSeriesDataItem item = series.getDataItem(i);
            org.jfree.data.time.TimeSeriesDataItem oldItem = addOrUpdate(item.getPeriod(), item.getValue());
            if (oldItem != null) {
                overwritten.add(oldItem);
            }
        }
        return overwritten;
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, double value) {
        return addOrUpdate(period, new java.lang.Double(value));
    }

    public org.jfree.data.time.TimeSeriesDataItem addOrUpdate(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        if (period == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        org.jfree.data.time.TimeSeriesDataItem overwritten = null;
        org.jfree.data.time.TimeSeriesDataItem key = new org.jfree.data.time.TimeSeriesDataItem(period, value);
        int index = java.util.Collections.binarySearch(this.data, key);
        if (index >= 0) {
            org.jfree.data.time.TimeSeriesDataItem existing = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
            overwritten = ((org.jfree.data.time.TimeSeriesDataItem) (existing.clone()));
            existing.setValue(value);
            removeAgedItems(false);
            fireSeriesChanged();
        } else {
            this.data.add((-index) - 1, new org.jfree.data.time.TimeSeriesDataItem(period, value));
            if (getItemCount() > this.maximumItemCount) {
                this.data.remove(0);
            }
            removeAgedItems(false);
            fireSeriesChanged();
        }
        return overwritten;
    }

    public void removeAgedItems(boolean notify) {
        if (getItemCount() > 1) {
            long latest = getTimePeriod(getItemCount() - 1).getSerialIndex();
            boolean removed = false;
            while ((latest - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge) {
                this.data.remove(0);
                removed = true;
            } 
            if (removed && notify) {
                fireSeriesChanged();
            }
        }
    }

    public void removeAgedItems(long latest, boolean notify) {
        long index = java.lang.Long.MAX_VALUE;
        try {
            java.lang.reflect.Method m = org.jfree.data.time.RegularTimePeriod.class.getDeclaredMethod("createInstance", new java.lang.Class[]{ java.lang.Class.class, java.util.Date.class, java.util.TimeZone.class });
            org.jfree.data.time.RegularTimePeriod newest = ((org.jfree.data.time.RegularTimePeriod) (m.invoke(this.timePeriodClass, new java.lang.Object[]{ this.timePeriodClass, new java.util.Date(latest), java.util.TimeZone.getDefault() })));
            index = newest.getSerialIndex();
        } catch (java.lang.NoSuchMethodException e) {
            e.printStackTrace();
        } catch (java.lang.IllegalAccessException e) {
            e.printStackTrace();
        } catch (java.lang.reflect.InvocationTargetException e) {
            e.printStackTrace();
        }
        boolean removed = false;
        while ((getItemCount() > 0) && ((index - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge)) {
            this.data.remove(0);
            removed = true;
        } 
        if (removed && notify) {
            fireSeriesChanged();
        }
    }

    public void clear() {
        if (this.data.size() > 0) {
            this.data.clear();
            fireSeriesChanged();
        }
    }

    public void delete(org.jfree.data.time.RegularTimePeriod period) {
        int index = getIndex(period);
        if (index >= 0) {
            this.data.remove(index);
            fireSeriesChanged();
        }
    }

    public void delete(int start, int end) {
        if (end < start) {
            throw new java.lang.IllegalArgumentException("Requires start <= end.");
        }
        for (int i = 0; i <= (end - start); i++) {
            this.data.remove(start);
        }
        fireSeriesChanged();
    }

    public java.lang.Object clone() throws java.lang.CloneNotSupportedException {
        org.jfree.data.time.TimeSeries clone = ((org.jfree.data.time.TimeSeries) (super.clone()));
        clone.data = ((java.util.List) (org.jfree.chart.util.ObjectUtilities.deepClone(this.data)));
        return clone;
    }

    public org.jfree.data.time.TimeSeries createCopy(int start, int end) throws java.lang.CloneNotSupportedException {
        if (start < 0) {
            throw new java.lang.IllegalArgumentException("Requires start >= 0.");
        }
        if (end < start) {
            throw new java.lang.IllegalArgumentException("Requires start <= end.");
        }
        org.jfree.data.time.TimeSeries copy = ((org.jfree.data.time.TimeSeries) (super.clone()));
        copy.data = new java.util.ArrayList();
        if (this.data.size() > 0) {
            for (int index = start; index <= end; index++) {
                org.jfree.data.time.TimeSeriesDataItem item = ((org.jfree.data.time.TimeSeriesDataItem) (this.data.get(index)));
                org.jfree.data.time.TimeSeriesDataItem clone = ((org.jfree.data.time.TimeSeriesDataItem) (item.clone()));
                try {
                    copy.add(clone);
                } catch (org.jfree.data.general.SeriesException e) {
                    e.printStackTrace();
                }
            }
        }
        return copy;
    }

    public org.jfree.data.time.TimeSeries createCopy(org.jfree.data.time.RegularTimePeriod start, org.jfree.data.time.RegularTimePeriod end) throws java.lang.CloneNotSupportedException {
        if (start == null) {
            throw new java.lang.IllegalArgumentException("Null 'start' argument.");
        }
        if (end == null) {
            throw new java.lang.IllegalArgumentException("Null 'end' argument.");
        }
        if (start.compareTo(end) > 0) {
            throw new java.lang.IllegalArgumentException("Requires start on or before end.");
        }
        boolean emptyRange = false;
        int startIndex = getIndex(start);
        if (startIndex < 0) {
            startIndex = -(startIndex + 1);
            if (startIndex == this.data.size()) {
                emptyRange = true;
            }
        }
        int endIndex = getIndex(end);
        if (endIndex < 0) {
            endIndex = -(endIndex + 1);
            endIndex = endIndex - 1;
        }
        if (endIndex < 0) {
            emptyRange = true;
        }
        if (emptyRange) {
            org.jfree.data.time.TimeSeries copy = ((org.jfree.data.time.TimeSeries) (super.clone()));
            copy.data = new java.util.ArrayList();
            return copy;
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(1).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.data.time.TimeSeries.this.data",org.jfree.data.time.TimeSeries.this.data);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("start",start);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.data.time.TimeSeries.this.maximumItemAge",org.jfree.data.time.TimeSeries.this.maximumItemAge);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.data.time.TimeSeries.this.timePeriodClass",org.jfree.data.time.TimeSeries.this.timePeriodClass);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("emptyRange",emptyRange);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.data.time.TimeSeries.this.maximumItemCount",org.jfree.data.time.TimeSeries.this.maximumItemCount);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION",org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("startIndex",startIndex);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.data.time.TimeSeries.this.domain",org.jfree.data.time.TimeSeries.this.domain);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("endIndex",endIndex);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("end",end);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION",org.jfree.data.time.TimeSeries.DEFAULT_DOMAIN_DESCRIPTION);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectInput("org.jfree.data.time.TimeSeries.this.range",org.jfree.data.time.TimeSeries.this.range);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(1).collectionEnds();
            }
            if (runtimeAngelicValue)
                return createCopy(startIndex, endIndex);

        }
    }

    public boolean equals(java.lang.Object object) {
        if (object == this) {
            return true;
        }
        if ((!(object instanceof org.jfree.data.time.TimeSeries)) || (!super.equals(object))) {
            return false;
        }
        org.jfree.data.time.TimeSeries s = ((org.jfree.data.time.TimeSeries) (object));
        if (!org.jfree.chart.util.ObjectUtilities.equal(getDomainDescription(), s.getDomainDescription())) {
            return false;
        }
        if (!org.jfree.chart.util.ObjectUtilities.equal(getRangeDescription(), s.getRangeDescription())) {
            return false;
        }
        if (!getClass().equals(s.getClass())) {
            return false;
        }
        if (getMaximumItemAge() != s.getMaximumItemAge()) {
            return false;
        }
        if (getMaximumItemCount() != s.getMaximumItemCount()) {
            return false;
        }
        int count = getItemCount();
        if (count != s.getItemCount()) {
            return false;
        }
        for (int i = 0; i < count; i++) {
            if (!getDataItem(i).equals(s.getDataItem(i))) {
                return false;
            }
        }
        return true;
    }

    public int hashCode() {
        int result = super.hashCode();
        result = (29 * result) + (this.domain != null ? this.domain.hashCode() : 0);
        result = (29 * result) + (this.range != null ? this.range.hashCode() : 0);
        result = (29 * result) + (this.timePeriodClass != null ? this.timePeriodClass.hashCode() : 0);
        int count = getItemCount();
        if (count > 0) {
            org.jfree.data.time.TimeSeriesDataItem item = getDataItem(0);
            result = (29 * result) + item.hashCode();
        }
        if (count > 1) {
            org.jfree.data.time.TimeSeriesDataItem item = getDataItem(count - 1);
            result = (29 * result) + item.hashCode();
        }
        if (count > 2) {
            org.jfree.data.time.TimeSeriesDataItem item = getDataItem(count / 2);
            result = (29 * result) + item.hashCode();
        }
        result = (29 * result) + this.maximumItemCount;
        result = (29 * result) + ((int) (this.maximumItemAge));
        return result;
    }
}
[17013] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659859592194
GPR[SSUN]-1659859592194
-1522070587
GPR[SPVATF]-1659859592327
GPR[EPVATF]-1659859592348
GPR[SPS]-1659859592348
GPR[EPS]-1659859592885
GPR[SPVATR]-1659859592885
[17704] INFO TestPatch - Applying patch: org.jfree.data.time.TimeSeries:947: CONDITIONAL endIndex < startIndex
[17877] INFO TestPatch - Running test suite to check the patch "endIndex < startIndex" is working
GPR[EPVATR]-1659859593071
[17890] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659859593071
[17899] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -946,3 +946,3 @@
         }
-        if (emptyRange) {
+        if (endIndex < startIndex) {
             TimeSeries copy = (TimeSeries) super.clone();

Saving patch at /experiment_home///results/Nopol/Chart/9/seed_260/patch_14361_2ts_1659859593080.diff
GPR[ESUN]-1659859593081
GPR[SSUN]-1659859593081
-1522070587
GPR[SPVATF]-1659859593233
GPR[EPVATF]-1659859593251
GPR[SPS]-1659859593251
[18263] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:944.
GPR[EPS]-1659859593444
GPR[SPVATF]-1659859593444
GPR[EPVATF]-1659859593462
GPR[SPS]-1659859593462
GPR[EPS]-1659859593988
GPR[SPVATR]-1659859593988
[18807] INFO TestPatch - Applying patch: org.jfree.data.time.TimeSeries:944: CONDITIONAL (endIndex < 0) || ((org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length()) != (org.jfree.data.time.TimeSeries.this.data.size()))
[18971] INFO TestPatch - Running test suite to check the patch "(endIndex < 0) || ((org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length()) != (org.jfree.data.time.TimeSeries.this.data.size()))" is working
GPR[EPVATR]-1659859594163
[18982] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659859594163
[18987] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -943,3 +943,3 @@
         }
-        if (endIndex < 0) {
+        if ((endIndex < 0) || ((org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length()) != (org.jfree.data.time.TimeSeries.this.data.size()))) {
             emptyRange = true;

Saving patch at /experiment_home///results/Nopol/Chart/9/seed_260/patch_15449_3ts_1659859594168.diff
GPR[ESUN]-1659859594169
GPR[SSUN]-1659859594169
-1522070587
GPR[SPVATF]-1659859594285
GPR[EPVATF]-1659859594301
GPR[SPS]-1659859594301
GPR[EPS]-1659859594641
GPR[SPVATR]-1659859594641
[19460] INFO TestPatch - Applying patch: org.jfree.data.time.TimeSeries:942: PRECONDITION org.jfree.data.time.TimeSeries.this.data.size() == org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length()
[19615] INFO TestPatch - Running test suite to check the patch "org.jfree.data.time.TimeSeries.this.data.size() == org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length()" is working
GPR[EPVATR]-1659859594807
[19626] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659859594807
[19631] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -941,3 +941,5 @@
             endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
+            if (org.jfree.data.time.TimeSeries.this.data.size() == org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length()) {
+                endIndex = endIndex - 1;    // so this is last item BEFORE end
+            }
         }

Saving patch at /experiment_home///results/Nopol/Chart/9/seed_260/patch_16093_4ts_1659859594812.diff
GPR[ESUN]-1659859594812
GPR[SSUN]-1659859594812
-1522070587
GPR[SPVATF]-1659859594927
GPR[EPVATF]-1659859594944
GPR[SPS]-1659859594944
GPR[EPS]-1659859595273
GPR[SPVATR]-1659859595273
[20092] INFO TestPatch - Applying patch: org.jfree.data.time.TimeSeries:941: PRECONDITION org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length() == org.jfree.data.time.TimeSeries.this.data.size()
[20252] INFO TestPatch - Running test suite to check the patch "org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length() == org.jfree.data.time.TimeSeries.this.data.size()" is working
GPR[EPVATR]-1659859595444
[20263] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659859595444
[20268] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -940,3 +940,5 @@
         if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
+            if (org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length() == org.jfree.data.time.TimeSeries.this.data.size()) {
+                endIndex = -(endIndex + 1); // this is first item AFTER end period
+            }
             endIndex = endIndex - 1;    // so this is last item BEFORE end

Saving patch at /experiment_home///results/Nopol/Chart/9/seed_260/patch_16730_5ts_1659859595449.diff
GPR[ESUN]-1659859595449
GPR[SSUN]-1659859595449
-1522070587
GPR[SPVATF]-1659859595566
GPR[EPVATF]-1659859595582
GPR[SPS]-1659859595582
GPR[EPS]-1659859595989
GPR[SPVATR]-1659859595990
[20809] INFO TestPatch - Applying patch: org.jfree.data.time.TimeSeries:940: PRECONDITION org.jfree.data.time.TimeSeries.this.data.size() == org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length()
[20967] INFO TestPatch - Running test suite to check the patch "org.jfree.data.time.TimeSeries.this.data.size() == org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length()" is working
GPR[EPVATR]-1659859596158
[20978] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659859596159
[20982] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -939,5 +939,7 @@
         int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
+        if (org.jfree.data.time.TimeSeries.this.data.size() == org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length()) {
+            if (endIndex < 0) {             // end period is not in original series
+                endIndex = -(endIndex + 1); // this is first item AFTER end period
+                endIndex = endIndex - 1;    // so this is last item BEFORE end
+            }
         }

Saving patch at /experiment_home///results/Nopol/Chart/9/seed_260/patch_17444_6ts_1659859596163.diff
GPR[SPVATF]-1659859596163
GPR[EPVATF]-1659859596179
GPR[SPS]-1659859596179
GPR[EPS]-1659859596671
GPR[SPVATR]-1659859596671
[21490] INFO TestPatch - Applying patch: org.jfree.data.time.TimeSeries:940: CONDITIONAL (endIndex < 0) && ((2) != (org.jfree.data.time.TimeSeries.this.data.size()))
[21640] INFO TestPatch - Running test suite to check the patch "(endIndex < 0) && ((2) != (org.jfree.data.time.TimeSeries.this.data.size()))" is working
GPR[EPVATR]-1659859596831
[21650] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659859596831
[21655] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -939,3 +939,3 @@
         int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
+        if ((endIndex < 0) && ((2) != (org.jfree.data.time.TimeSeries.this.data.size()))) {             // end period is not in original series
             endIndex = -(endIndex + 1); // this is first item AFTER end period

Saving patch at /experiment_home///results/Nopol/Chart/9/seed_260/patch_18117_7ts_1659859596836.diff
GPR[ESUN]-1659859596836
GPR[SSUN]-1659859596836
-1522070587
GPR[ESUN]-1659859596953
GPR[SSUN]-1659859596953
-1522070587
GPR[SPVATF]-1659859597065
GPR[EPVATF]-1659859597080
GPR[SPS]-1659859597080
[22063] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:935.
GPR[EPS]-1659859597244
GPR[SPVATF]-1659859597245
GPR[EPVATF]-1659859597259
GPR[SPS]-1659859597259
GPR[EPS]-1659859597788
GPR[SPVATR]-1659859597788
[22607] INFO TestPatch - Applying patch: org.jfree.data.time.TimeSeries:935: CONDITIONAL (org.jfree.data.time.TimeSeries.this.data.size() == 2) || (!((startIndex) != (org.jfree.data.time.TimeSeries.this.data.size())))
[22767] INFO TestPatch - Running test suite to check the patch "(org.jfree.data.time.TimeSeries.this.data.size() == 2) || (!((startIndex) != (org.jfree.data.time.TimeSeries.this.data.size())))" is working
GPR[EPVATR]-1659859597957
[22776] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659859597957
[22780] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -934,3 +934,3 @@
             startIndex = -(startIndex + 1);
-            if (startIndex == this.data.size()) {
+            if ((org.jfree.data.time.TimeSeries.this.data.size() == 2) || (!((startIndex) != (org.jfree.data.time.TimeSeries.this.data.size())))) {
                 emptyRange = true;  // start is after last data item

Saving patch at /experiment_home///results/Nopol/Chart/9/seed_260/patch_19242_8ts_1659859597961.diff
GPR[ESUN]-1659859597962
GPR[SSUN]-1659859597962
-1522070587
GPR[SPVATF]-1659859598078
GPR[EPVATF]-1659859598093
GPR[SPS]-1659859598093
[23074] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:934.
GPR[EPS]-1659859598255
GPR[ESUN]-1659859598255
GPR[SSUN]-1659859598256
-1522070587
GPR[SPVATF]-1659859598371
GPR[EPVATF]-1659859598386
GPR[SPS]-1659859598386
[23368] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:933.
GPR[EPS]-1659859598549
GPR[SPVATF]-1659859598550
GPR[EPVATF]-1659859598564
GPR[SPS]-1659859598564
[23547] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:933.
GPR[EPS]-1659859598728
GPR[ESUN]-1659859598729
GPR[SSUN]-1659859598729
-1522070587
GPR[ESUN]-1659859598845
GPR[SSUN]-1659859598845
-1522070587
GPR[ESUN]-1659859598956
GPR[SSUN]-1659859598956
-1522070587
GPR[SPVATF]-1659859599070
GPR[EPVATF]-1659859599136
GPR[SPS]-1659859599136
[24120] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:927.
GPR[EPS]-1659859599302
GPR[SPVATF]-1659859599302
GPR[EPVATF]-1659859599316
GPR[SPS]-1659859599316
[24296] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:927.
GPR[EPS]-1659859599477
GPR[ESUN]-1659859599477
GPR[SSUN]-1659859599477
-1522070587
GPR[SPVATF]-1659859599589
GPR[EPVATF]-1659859599604
GPR[SPS]-1659859599604
[24590] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:924.
GPR[EPS]-1659859599771
GPR[SPVATF]-1659859599772
GPR[EPVATF]-1659859599786
GPR[SPS]-1659859599786
[24765] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:924.
GPR[EPS]-1659859599946
GPR[ESUN]-1659859599946
GPR[SSUN]-1659859599946
-1522070587
GPR[SPVATF]-1659859600057
GPR[EPVATF]-1659859600071
GPR[SPS]-1659859600071
[25048] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:921.
GPR[EPS]-1659859600229
GPR[SPVATF]-1659859600229
GPR[EPVATF]-1659859600245
GPR[SPS]-1659859600245
[25229] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:921.
GPR[EPS]-1659859600410
GPR[ESUN]-1659859600410
GPR[SSUN]-1659859600410
-1522070587
GPR[SPVATF]-1659859600531
GPR[EPVATF]-1659859600546
GPR[SPS]-1659859600546
GPR[EPS]-1659859600876
GPR[SPVATR]-1659859600877
[25696] INFO TestPatch - Applying patch: org.jfree.data.time.TimeSeries:882: PRECONDITION (2) != (org.jfree.data.time.TimeSeries.this.data.size())
[25846] INFO TestPatch - Running test suite to check the patch "(2) != (org.jfree.data.time.TimeSeries.this.data.size())" is working
GPR[EPVATR]-1659859601038
[25857] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659859601038
[25860] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -881,4 +881,6 @@
         }
-        if (end < start) {
-            throw new IllegalArgumentException("Requires start <= end.");
+        if ((2) != (org.jfree.data.time.TimeSeries.this.data.size())) {
+            if (end < start) {
+                throw new IllegalArgumentException("Requires start <= end.");
+            }
         }

Saving patch at /experiment_home///results/Nopol/Chart/9/seed_260/patch_22322_9ts_1659859601041.diff
GPR[SPVATF]-1659859601042
GPR[EPVATF]-1659859601057
GPR[SPS]-1659859601057
GPR[EPS]-1659859601539
GPR[SPVATR]-1659859601539
[26358] INFO TestPatch - Applying patch: org.jfree.data.time.TimeSeries:882: CONDITIONAL ((org.jfree.data.time.TimeSeries.this.data.size()) != (2)) && (end < start)
[26504] INFO TestPatch - Running test suite to check the patch "((org.jfree.data.time.TimeSeries.this.data.size()) != (2)) && (end < start)" is working
GPR[EPVATR]-1659859601696
[26515] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659859601696
[26518] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -881,3 +881,3 @@
         }
-        if (end < start) {
+        if (((org.jfree.data.time.TimeSeries.this.data.size()) != (2)) && (end < start)) {
             throw new IllegalArgumentException("Requires start <= end.");

Saving patch at /experiment_home///results/Nopol/Chart/9/seed_260/patch_22980_10ts_1659859601699.diff
GPR[ESUN]-1659859601700
GPR[SSUN]-1659859601700
-1522070587
GPR[SPVATF]-1659859601809
GPR[EPVATF]-1659859601824
GPR[SPS]-1659859601824
[27399] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:879.
GPR[EPS]-1659859602580
GPR[SPVATF]-1659859602581
GPR[EPVATF]-1659859602595
GPR[SPS]-1659859602595
[27575] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:879.
GPR[EPS]-1659859602756
GPR[ESUN]-1659859602756
GPR[SSUN]-1659859602756
-1522070587
GPR[ESUN]-1659859602869
GPR[SSUN]-1659859602869
-1522070587
GPR[ESUN]-1659859602979
GPR[SSUN]-1659859602979
-1522070587
GPR[SPVATF]-1659859603086
GPR[EPVATF]-1659859603100
GPR[SPS]-1659859603100
[28078] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:430.
GPR[EPS]-1659859603259
GPR[SPVATF]-1659859603260
GPR[EPVATF]-1659859603274
GPR[SPS]-1659859603274
[28257] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:430.
GPR[EPS]-1659859603438
GPR[ESUN]-1659859603438
GPR[SSUN]-1659859603438
1776071035
GPR[ESUN]-1659859603534
GPR[SSUN]-1659859603534
68477
GPR[ESUN]-1659859603629
GPR[SSUN]-1659859603629
68477
GPR[ESUN]-1659859603727
GPR[SSUN]-1659859603727
68477
GPR[SPVATF]-1659859603825
GPR[EPVATF]-1659859603839
GPR[SPS]-1659859603839
[28790] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Day extends org.jfree.data.time.RegularTimePeriod implements java.io.Serializable {
    private static final long serialVersionUID = -7082667380758962755L;

    protected static final java.text.DateFormat DATE_FORMAT = new java.text.SimpleDateFormat("yyyy-MM-dd");

    protected static final java.text.DateFormat DATE_FORMAT_SHORT = java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);

    protected static final java.text.DateFormat DATE_FORMAT_MEDIUM = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);

    protected static final java.text.DateFormat DATE_FORMAT_LONG = java.text.DateFormat.getDateInstance(java.text.DateFormat.LONG);

    private org.jfree.data.time.SerialDate serialDate;

    private long firstMillisecond;

    private long lastMillisecond;

    public Day() {
        this(new java.util.Date());
    }

    public Day(int day, int month, int year) {
        this.serialDate = org.jfree.data.time.SerialDate.createInstance(day, month, year);
        peg(java.util.Calendar.getInstance());
    }

    public Day(org.jfree.data.time.SerialDate serialDate) {
        if (serialDate == null) {
            throw new java.lang.IllegalArgumentException("Null 'serialDate' argument.");
        }
        this.serialDate = serialDate;
        peg(java.util.Calendar.getInstance());
    }

    public Day(java.util.Date time) {
        this(time, org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE);
    }

    public Day(java.util.Date time, java.util.TimeZone zone) {
        if (time == null) {
            throw new java.lang.IllegalArgumentException("Null 'time' argument.");
        }
        if (zone == null) {
            throw new java.lang.IllegalArgumentException("Null 'zone' argument.");
        }
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(time);
        int d = calendar.get(java.util.Calendar.DAY_OF_MONTH);
        int m = calendar.get(java.util.Calendar.MONTH) + 1;
        int y = calendar.get(java.util.Calendar.YEAR);
        this.serialDate = org.jfree.data.time.SerialDate.createInstance(d, m, y);
        peg(calendar);
    }

    public org.jfree.data.time.SerialDate getSerialDate() {
        return this.serialDate;
    }

    public int getYear() {
        return this.serialDate.getYYYY();
    }

    public int getMonth() {
        return this.serialDate.getMonth();
    }

    public int getDayOfMonth() {
        return this.serialDate.getDayOfMonth();
    }

    public long getFirstMillisecond() {
        return this.firstMillisecond;
    }

    public long getLastMillisecond() {
        return this.lastMillisecond;
    }

    public void peg(java.util.Calendar calendar) {
        this.firstMillisecond = getFirstMillisecond(calendar);
        this.lastMillisecond = getLastMillisecond(calendar);
    }

    public org.jfree.data.time.RegularTimePeriod previous() {
        org.jfree.data.time.Day result;
        int serial = this.serialDate.toSerial();
        if (serial > org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND) {
            org.jfree.data.time.SerialDate yesterday = org.jfree.data.time.SerialDate.createInstance(serial - 1);
            return new org.jfree.data.time.Day(yesterday);
        } else {
            result = null;
        }
        return result;
    }

    public org.jfree.data.time.RegularTimePeriod next() {
        org.jfree.data.time.Day result;
        int serial = this.serialDate.toSerial();
        if (serial < org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND) {
            org.jfree.data.time.SerialDate tomorrow = org.jfree.data.time.SerialDate.createInstance(serial + 1);
            return new org.jfree.data.time.Day(tomorrow);
        } else {
            result = null;
        }
        return result;
    }

    public long getSerialIndex() {
        return this.serialDate.toSerial();
    }

    public long getFirstMillisecond(java.util.Calendar calendar) {
        int year = this.serialDate.getYYYY();
        int month = this.serialDate.getMonth();
        int day = this.serialDate.getDayOfMonth();
        calendar.clear();
        calendar.set(year, month - 1, day, 0, 0, 0);
        calendar.set(java.util.Calendar.MILLISECOND, 0);
        return calendar.getTime().getTime();
    }

    public long getLastMillisecond(java.util.Calendar calendar) {
        int year = this.serialDate.getYYYY();
        int month = this.serialDate.getMonth();
        int day = this.serialDate.getDayOfMonth();
        calendar.clear();
        calendar.set(year, month - 1, day, 23, 59, 59);
        calendar.set(java.util.Calendar.MILLISECOND, 999);
        return calendar.getTime().getTime();
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.time.Day)) {
            return false;
        }
        org.jfree.data.time.Day that = ((org.jfree.data.time.Day) (obj));
        if (!this.serialDate.equals(that.getSerialDate())) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        return this.serialDate.hashCode();
    }

    public int compareTo(java.lang.Object o1) {
        int result;
        if (o1 instanceof org.jfree.data.time.Day) {
            org.jfree.data.time.Day d = ((org.jfree.data.time.Day) (o1));
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(26).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("o1",o1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.jfree.data.time.Day.this.firstMillisecond",org.jfree.data.time.Day.this.firstMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("d",d);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.jfree.data.time.Day.DATE_FORMAT_SHORT",org.jfree.data.time.Day.DATE_FORMAT_SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.jfree.data.time.Day.DATE_FORMAT_LONG",org.jfree.data.time.Day.DATE_FORMAT_LONG);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.jfree.data.time.Day.this.serialDate",org.jfree.data.time.Day.this.serialDate);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.jfree.data.time.Day.DATE_FORMAT_MEDIUM",org.jfree.data.time.Day.DATE_FORMAT_MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.jfree.data.time.Day.DATE_FORMAT",org.jfree.data.time.Day.DATE_FORMAT);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectInput("org.jfree.data.time.Day.this.lastMillisecond",org.jfree.data.time.Day.this.lastMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(26).collectionEnds();
            }
            if (runtimeAngelicValue)
                result = -d.getSerialDate().compare(this.serialDate);

        } else if (o1 instanceof org.jfree.data.time.RegularTimePeriod) {
            result = 0;
        } else {
            result = 1;
        }
        return result;
    }

    public java.lang.String toString() {
        return this.serialDate.toString();
    }

    public static org.jfree.data.time.Day parseDay(java.lang.String s) {
        try {
            return new org.jfree.data.time.Day(org.jfree.data.time.Day.DATE_FORMAT.parse(s));
        } catch (java.text.ParseException e1) {
            try {
                return new org.jfree.data.time.Day(org.jfree.data.time.Day.DATE_FORMAT_SHORT.parse(s));
            } catch (java.text.ParseException e2) {
            }
        }
        return null;
    }
}
[28790] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659859603971
GPR[SSUN]-1659859603971
68477
GPR[ESUN]-1659859604064
GPR[SSUN]-1659859604064
68477
GPR[SPVATF]-1659859604159
GPR[EPVATF]-1659859604174
GPR[SPS]-1659859604174
[29118] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Day extends org.jfree.data.time.RegularTimePeriod implements java.io.Serializable {
    private static final long serialVersionUID = -7082667380758962755L;

    protected static final java.text.DateFormat DATE_FORMAT = new java.text.SimpleDateFormat("yyyy-MM-dd");

    protected static final java.text.DateFormat DATE_FORMAT_SHORT = java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT);

    protected static final java.text.DateFormat DATE_FORMAT_MEDIUM = java.text.DateFormat.getDateInstance(java.text.DateFormat.MEDIUM);

    protected static final java.text.DateFormat DATE_FORMAT_LONG = java.text.DateFormat.getDateInstance(java.text.DateFormat.LONG);

    private org.jfree.data.time.SerialDate serialDate;

    private long firstMillisecond;

    private long lastMillisecond;

    public Day() {
        this(new java.util.Date());
    }

    public Day(int day, int month, int year) {
        this.serialDate = org.jfree.data.time.SerialDate.createInstance(day, month, year);
        peg(java.util.Calendar.getInstance());
    }

    public Day(org.jfree.data.time.SerialDate serialDate) {
        if (serialDate == null) {
            throw new java.lang.IllegalArgumentException("Null 'serialDate' argument.");
        }
        this.serialDate = serialDate;
        peg(java.util.Calendar.getInstance());
    }

    public Day(java.util.Date time) {
        this(time, org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE);
    }

    public Day(java.util.Date time, java.util.TimeZone zone) {
        if (time == null) {
            throw new java.lang.IllegalArgumentException("Null 'time' argument.");
        }
        if (zone == null) {
            throw new java.lang.IllegalArgumentException("Null 'zone' argument.");
        }
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(time);
        int d = calendar.get(java.util.Calendar.DAY_OF_MONTH);
        int m = calendar.get(java.util.Calendar.MONTH) + 1;
        int y = calendar.get(java.util.Calendar.YEAR);
        this.serialDate = org.jfree.data.time.SerialDate.createInstance(d, m, y);
        peg(calendar);
    }

    public org.jfree.data.time.SerialDate getSerialDate() {
        return this.serialDate;
    }

    public int getYear() {
        return this.serialDate.getYYYY();
    }

    public int getMonth() {
        return this.serialDate.getMonth();
    }

    public int getDayOfMonth() {
        return this.serialDate.getDayOfMonth();
    }

    public long getFirstMillisecond() {
        return this.firstMillisecond;
    }

    public long getLastMillisecond() {
        return this.lastMillisecond;
    }

    public void peg(java.util.Calendar calendar) {
        this.firstMillisecond = getFirstMillisecond(calendar);
        this.lastMillisecond = getLastMillisecond(calendar);
    }

    public org.jfree.data.time.RegularTimePeriod previous() {
        org.jfree.data.time.Day result;
        int serial = this.serialDate.toSerial();
        if (serial > org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND) {
            org.jfree.data.time.SerialDate yesterday = org.jfree.data.time.SerialDate.createInstance(serial - 1);
            return new org.jfree.data.time.Day(yesterday);
        } else {
            result = null;
        }
        return result;
    }

    public org.jfree.data.time.RegularTimePeriod next() {
        org.jfree.data.time.Day result;
        int serial = this.serialDate.toSerial();
        if (serial < org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND) {
            org.jfree.data.time.SerialDate tomorrow = org.jfree.data.time.SerialDate.createInstance(serial + 1);
            return new org.jfree.data.time.Day(tomorrow);
        } else {
            result = null;
        }
        return result;
    }

    public long getSerialIndex() {
        return this.serialDate.toSerial();
    }

    public long getFirstMillisecond(java.util.Calendar calendar) {
        int year = this.serialDate.getYYYY();
        int month = this.serialDate.getMonth();
        int day = this.serialDate.getDayOfMonth();
        calendar.clear();
        calendar.set(year, month - 1, day, 0, 0, 0);
        calendar.set(java.util.Calendar.MILLISECOND, 0);
        return calendar.getTime().getTime();
    }

    public long getLastMillisecond(java.util.Calendar calendar) {
        int year = this.serialDate.getYYYY();
        int month = this.serialDate.getMonth();
        int day = this.serialDate.getDayOfMonth();
        calendar.clear();
        calendar.set(year, month - 1, day, 23, 59, 59);
        calendar.set(java.util.Calendar.MILLISECOND, 999);
        return calendar.getTime().getTime();
    }

    public boolean equals(java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof org.jfree.data.time.Day)) {
            return false;
        }
        org.jfree.data.time.Day that = ((org.jfree.data.time.Day) (obj));
        if (!this.serialDate.equals(that.getSerialDate())) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        return this.serialDate.hashCode();
    }

    public int compareTo(java.lang.Object o1) {
        int result;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(27).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("o1",o1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("org.jfree.data.time.Day.this.firstMillisecond",org.jfree.data.time.Day.this.firstMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("org.jfree.data.time.Day.DATE_FORMAT_SHORT",org.jfree.data.time.Day.DATE_FORMAT_SHORT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("org.jfree.data.time.Day.DATE_FORMAT_LONG",org.jfree.data.time.Day.DATE_FORMAT_LONG);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("org.jfree.data.time.Day.this.serialDate",org.jfree.data.time.Day.this.serialDate);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("org.jfree.data.time.Day.DATE_FORMAT_MEDIUM",org.jfree.data.time.Day.DATE_FORMAT_MEDIUM);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("org.jfree.data.time.Day.DATE_FORMAT",org.jfree.data.time.Day.DATE_FORMAT);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("org.jfree.data.time.Day.this.lastMillisecond",org.jfree.data.time.Day.this.lastMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectInput("o1 instanceof org.jfree.data.time.Day",o1 instanceof org.jfree.data.time.Day);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(27).collectionEnds();
        }
        if (runtimeAngelicValue) if (o1 instanceof org.jfree.data.time.Day) {
            org.jfree.data.time.Day d = ((org.jfree.data.time.Day) (o1));
            result = -d.getSerialDate().compare(this.serialDate);
        } else if (o1 instanceof org.jfree.data.time.RegularTimePeriod) {
            result = 0;
        } else {
            result = 1;
        }
        return result;
    }

    public java.lang.String toString() {
        return this.serialDate.toString();
    }

    public static org.jfree.data.time.Day parseDay(java.lang.String s) {
        try {
            return new org.jfree.data.time.Day(org.jfree.data.time.Day.DATE_FORMAT.parse(s));
        } catch (java.text.ParseException e1) {
            try {
                return new org.jfree.data.time.Day(org.jfree.data.time.Day.DATE_FORMAT_SHORT.parse(s));
            } catch (java.text.ParseException e2) {
            }
        }
        return null;
    }
}
[29118] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659859604299
GPR[EPVATF]-1659859604313
GPR[SPS]-1659859604313
[29271] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:404.
GPR[EPS]-1659859604452
GPR[ESUN]-1659859604452
GPR[SSUN]-1659859604452
1374250434
GPR[ESUN]-1659859604543
GPR[SSUN]-1659859604543
1374250434
GPR[ESUN]-1659859604635
GPR[SSUN]-1659859604635
1374250434
GPR[SPVATF]-1659859604726
GPR[EPVATF]-1659859604742
GPR[SPS]-1659859604742
[29674] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TimeSeriesDataItem implements java.lang.Cloneable , java.lang.Comparable , java.io.Serializable {
    private static final long serialVersionUID = -2235346966016401302L;

    private org.jfree.data.time.RegularTimePeriod period;

    private java.lang.Number value;

    public TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        if (period == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        this.period = period;
        this.value = value;
    }

    public TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod period, double value) {
        this(period, new java.lang.Double(value));
    }

    public org.jfree.data.time.RegularTimePeriod getPeriod() {
        return this.period;
    }

    public java.lang.Number getValue() {
        return this.value;
    }

    public void setValue(java.lang.Number value) {
        this.value = value;
    }

    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof org.jfree.data.time.TimeSeriesDataItem)) {
            return false;
        }
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem = ((org.jfree.data.time.TimeSeriesDataItem) (o));
        if (this.period != null) {
            if (!this.period.equals(timeSeriesDataItem.period)) {
                return false;
            }
        } else if (timeSeriesDataItem.period != null) {
            return false;
        }
        if (this.value != null) {
            if (!this.value.equals(timeSeriesDataItem.value)) {
                return false;
            }
        } else if (timeSeriesDataItem.value != null) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result;
        result = (this.period != null) ? this.period.hashCode() : 0;
        result = (29 * result) + (this.value != null ? this.value.hashCode() : 0);
        return result;
    }

    public int compareTo(java.lang.Object o1) {
        int result;
        if (o1 instanceof org.jfree.data.time.TimeSeriesDataItem) {
            org.jfree.data.time.TimeSeriesDataItem datapair = ((org.jfree.data.time.TimeSeriesDataItem) (o1));
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(29).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(29).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(29).collectInput("org.jfree.data.time.TimeSeriesDataItem.this.period",org.jfree.data.time.TimeSeriesDataItem.this.period);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(29).collectInput("o1",o1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(29).collectInput("datapair",datapair);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(29).collectInput("org.jfree.data.time.TimeSeriesDataItem.this.value",org.jfree.data.time.TimeSeriesDataItem.this.value);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(29).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(29).collectionEnds();
            }
            if (runtimeAngelicValue)
                result = getPeriod().compareTo(datapair.getPeriod());

        } else {
            result = 1;
        }
        return result;
    }

    public java.lang.Object clone() {
        java.lang.Object clone = null;
        try {
            clone = super.clone();
        } catch (java.lang.CloneNotSupportedException e) {
            e.printStackTrace();
        }
        return clone;
    }
}
[29674] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659859604855
GPR[SSUN]-1659859604855
1374250434
GPR[ESUN]-1659859604949
GPR[SSUN]-1659859604949
1374250434
GPR[SPVATF]-1659859605039
GPR[EPVATF]-1659859605053
GPR[SPS]-1659859605053
[29983] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class TimeSeriesDataItem implements java.lang.Cloneable , java.lang.Comparable , java.io.Serializable {
    private static final long serialVersionUID = -2235346966016401302L;

    private org.jfree.data.time.RegularTimePeriod period;

    private java.lang.Number value;

    public TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod period, java.lang.Number value) {
        if (period == null) {
            throw new java.lang.IllegalArgumentException("Null 'period' argument.");
        }
        this.period = period;
        this.value = value;
    }

    public TimeSeriesDataItem(org.jfree.data.time.RegularTimePeriod period, double value) {
        this(period, new java.lang.Double(value));
    }

    public org.jfree.data.time.RegularTimePeriod getPeriod() {
        return this.period;
    }

    public java.lang.Number getValue() {
        return this.value;
    }

    public void setValue(java.lang.Number value) {
        this.value = value;
    }

    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof org.jfree.data.time.TimeSeriesDataItem)) {
            return false;
        }
        org.jfree.data.time.TimeSeriesDataItem timeSeriesDataItem = ((org.jfree.data.time.TimeSeriesDataItem) (o));
        if (this.period != null) {
            if (!this.period.equals(timeSeriesDataItem.period)) {
                return false;
            }
        } else if (timeSeriesDataItem.period != null) {
            return false;
        }
        if (this.value != null) {
            if (!this.value.equals(timeSeriesDataItem.value)) {
                return false;
            }
        } else if (timeSeriesDataItem.value != null) {
            return false;
        }
        return true;
    }

    public int hashCode() {
        int result;
        result = (this.period != null) ? this.period.hashCode() : 0;
        result = (29 * result) + (this.value != null ? this.value.hashCode() : 0);
        return result;
    }

    public int compareTo(java.lang.Object o1) {
        int result;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(30).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("org.jfree.data.time.TimeSeriesDataItem.this.period",org.jfree.data.time.TimeSeriesDataItem.this.period);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("o1",o1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("org.jfree.data.time.TimeSeriesDataItem.this.value",org.jfree.data.time.TimeSeriesDataItem.this.value);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectInput("o1 instanceof org.jfree.data.time.TimeSeriesDataItem",o1 instanceof org.jfree.data.time.TimeSeriesDataItem);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(30).collectionEnds();
        }
        if (runtimeAngelicValue) if (o1 instanceof org.jfree.data.time.TimeSeriesDataItem) {
            org.jfree.data.time.TimeSeriesDataItem datapair = ((org.jfree.data.time.TimeSeriesDataItem) (o1));
            result = getPeriod().compareTo(datapair.getPeriod());
        } else {
            result = 1;
        }
        return result;
    }

    public java.lang.Object clone() {
        java.lang.Object clone = null;
        try {
            clone = super.clone();
        } catch (java.lang.CloneNotSupportedException e) {
            e.printStackTrace();
        }
        return clone;
    }
}
[29983] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659859605164
GPR[EPVATF]-1659859605179
GPR[SPS]-1659859605179
GPR[EPS]-1659859614169
GPR[ESUN]-1659859614169
GPR[SSUN]-1659859614169
68477
GPR[ESUN]-1659859614265
GPR[SSUN]-1659859614265
-1522070587
GPR[ESUN]-1659859614386
GPR[SSUN]-1659859614386
-1522070587
GPR[SPVATF]-1659859614505
GPR[EPVATF]-1659859614522
GPR[SPS]-1659859614522
GPR[EPS]-1659859667682
GPR[ESUN]-1659859667682
GPR[SSUN]-1659859667682
-1522070587
GPR[ESUN]-1659859667860
GPR[SSUN]-1659859667860
-1522070587
GPR[ESUN]-1659859667969
GPR[SSUN]-1659859667969
-1522070587
GPR[SPVATF]-1659859668079
GPR[EPVATF]-1659859668094
GPR[SPS]-1659859668094
GPR[EPS]-1659859691890
GPR[ESUN]-1659859691890
GPR[SSUN]-1659859691890
2751582
GPR[ESUN]-1659859691985
GPR[SSUN]-1659859691985
-1522070587
GPR[ESUN]-1659859692094
GPR[SSUN]-1659859692094
-1522070587
GPR[SPVATF]-1659859692203
GPR[EPVATF]-1659859692217
GPR[SPS]-1659859692217
[117191] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:603.
GPR[EPS]-1659859692372
GPR[ESUN]-1659859692372
GPR[SSUN]-1659859692372
-1522070587
GPR[ESUN]-1659859692513
GPR[SSUN]-1659859692513
-1522070587
GPR[ESUN]-1659859692624
GPR[SSUN]-1659859692624
-1522070587
GPR[SPVATF]-1659859692735
GPR[EPVATF]-1659859692750
GPR[SPS]-1659859692750
[117721] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:588.
GPR[EPS]-1659859692902
GPR[ESUN]-1659859692902
GPR[SSUN]-1659859692902
1374250434
GPR[ESUN]-1659859692993
GPR[SSUN]-1659859692993
-1522070587
GPR[ESUN]-1659859693112
GPR[SSUN]-1659859693112
-1522070587
GPR[SPVATF]-1659859693232
GPR[EPVATF]-1659859693246
GPR[SPS]-1659859693246
[118219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:748.
GPR[EPS]-1659859693400
GPR[SPVATF]-1659859693400
GPR[EPVATF]-1659859693414
GPR[SPS]-1659859693414
[118393] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:748.
GPR[EPS]-1659859693574
GPR[ESUN]-1659859693574
GPR[SSUN]-1659859693574
-1522070587
GPR[ESUN]-1659859693698
GPR[SSUN]-1659859693698
-1522070587
GPR[ESUN]-1659859693806
GPR[SSUN]-1659859693806
-1522070587
GPR[ESUN]-1659859693927
GPR[SSUN]-1659859693927
-1522070587
GPR[SPVATF]-1659859694044
GPR[EPVATF]-1659859694058
GPR[SPS]-1659859694058
[119046] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:740.
GPR[EPS]-1659859694227
GPR[SPVATF]-1659859694227
GPR[EPVATF]-1659859694241
GPR[SPS]-1659859694241
[119223] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:740.
GPR[EPS]-1659859694404
GPR[ESUN]-1659859694404
GPR[SSUN]-1659859694404
-1522070587
GPR[ESUN]-1659859694521
GPR[SSUN]-1659859694521
-1522070587
GPR[SPVATF]-1659859694648
GPR[EPVATF]-1659859694662
GPR[SPS]-1659859694662
[119632] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:546.
GPR[EPS]-1659859694813
GPR[ESUN]-1659859694813
GPR[SSUN]-1659859694813
-1522070587
GPR[SPVATF]-1659859694925
GPR[EPVATF]-1659859694939
GPR[SPS]-1659859694939
[119907] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:545.
GPR[EPS]-1659859695088
GPR[SPVATF]-1659859695089
GPR[EPVATF]-1659859695103
GPR[SPS]-1659859695103
[120073] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:545.
GPR[EPS]-1659859695254
GPR[ESUN]-1659859695254
GPR[SSUN]-1659859695254
-1522070587
GPR[SPVATF]-1659859695369
GPR[EPVATF]-1659859695383
GPR[SPS]-1659859695383
[120354] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:542.
GPR[EPS]-1659859695535
GPR[ESUN]-1659859695535
GPR[SSUN]-1659859695535
-1522070587
GPR[SPVATF]-1659859695645
GPR[EPVATF]-1659859695658
GPR[SPS]-1659859695658
[120630] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:538.
GPR[EPS]-1659859695811
GPR[SPVATF]-1659859695811
GPR[EPVATF]-1659859695824
GPR[SPS]-1659859695825
GPR[EPS]-1659859706882
GPR[ESUN]-1659859706882
GPR[SSUN]-1659859706882
-1522070587
GPR[SPVATF]-1659859706995
GPR[EPVATF]-1659859707009
GPR[SPS]-1659859707009
[131980] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:536.
GPR[EPS]-1659859707161
GPR[SPVATF]-1659859707161
GPR[EPVATF]-1659859707175
GPR[SPS]-1659859707175
[132149] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:536.
GPR[EPS]-1659859707330
GPR[ESUN]-1659859707330
GPR[SSUN]-1659859707330
-1522070587
GPR[SPVATF]-1659859707446
GPR[EPVATF]-1659859707460
GPR[SPS]-1659859707460
[132430] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:516.
GPR[EPS]-1659859707611
GPR[ESUN]-1659859707611
GPR[SSUN]-1659859707611
-1522070587
GPR[SPVATF]-1659859707721
GPR[EPVATF]-1659859707734
GPR[SPS]-1659859707734
GPR[EPS]-1659859720158
GPR[ESUN]-1659859720158
GPR[SSUN]-1659859720158
-1522070587
GPR[SPVATF]-1659859720314
GPR[EPVATF]-1659859720327
GPR[SPS]-1659859720327
GPR[EPS]-1659859732977
GPR[SPVATF]-1659859732977
GPR[EPVATF]-1659859732992
GPR[SPS]-1659859732992
[157972] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:514.
GPR[EPS]-1659859733153
GPR[ESUN]-1659859733153
GPR[SSUN]-1659859733153
-1522070587
GPR[ESUN]-1659859733269
GPR[SSUN]-1659859733269
-1522070587
GPR[SPVATF]-1659859733381
GPR[EPVATF]-1659859733397
GPR[SPS]-1659859733397
[158396] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:510.
GPR[EPS]-1659859733577
GPR[ESUN]-1659859733577
GPR[SSUN]-1659859733577
-1522070587
GPR[SPVATF]-1659859733691
GPR[EPVATF]-1659859733704
GPR[SPS]-1659859733704
GPR[EPS]-1659859738796
GPR[ESUN]-1659859738796
GPR[SSUN]-1659859738796
-1522070587
GPR[SPVATF]-1659859738909
GPR[EPVATF]-1659859738925
GPR[SPS]-1659859738925
GPR[EPS]-1659859760021
GPR[SPVATF]-1659859760022
GPR[EPVATF]-1659859760037
GPR[SPS]-1659859760037
[185005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:508.
GPR[EPS]-1659859760186
GPR[ESUN]-1659859760186
GPR[SSUN]-1659859760186
-1522070587
GPR[ESUN]-1659859760294
GPR[SSUN]-1659859760295
-1522070587
GPR[ESUN]-1659859760404
GPR[SSUN]-1659859760404
-1522070587
GPR[SPVATF]-1659859760512
GPR[EPVATF]-1659859760526
GPR[SPS]-1659859760526
[185495] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:494.
GPR[EPS]-1659859760676
GPR[SPVATF]-1659859760676
GPR[EPVATF]-1659859760690
GPR[SPS]-1659859760690
[185658] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:494.
GPR[EPS]-1659859760839
GPR[ESUN]-1659859760839
GPR[SSUN]-1659859760839
-1522070587
GPR[SPVATF]-1659859760985
GPR[EPVATF]-1659859761001
GPR[SPS]-1659859761001
[185988] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:491.
GPR[EPS]-1659859761169
GPR[SPVATF]-1659859761169
GPR[EPVATF]-1659859761183
GPR[SPS]-1659859761184
[186166] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.TimeSeries:491.
GPR[EPS]-1659859761347
GPR[ESUN]-1659859761347
GPR[SSUN]-1659859761347
-1522070587
GPR[ESUN]-1659859761463
GPR[SSUN]-1659859761463
-1522070587
GPR[ESUN]-1659859761574
GPR[SSUN]-1659859761574
-1522070587
GPR[ESUN]-1659859761717
GPR[SSUN]-1659859761717
68477
GPR[ESUN]-1659859761828
GPR[SSUN]-1659859761828
2751582
GPR[ESUN]-1659859761935
GPR[SSUN]-1659859761935
2751582
GPR[ESUN]-1659859762045
GPR[SSUN]-1659859762045
2751582
GPR[SPVATF]-1659859762155
GPR[EPVATF]-1659859762170
GPR[SPS]-1659859762170
[187109] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Year extends org.jfree.data.time.RegularTimePeriod implements java.io.Serializable {
    private static final long serialVersionUID = -7659990929736074836L;

    private short year;

    private long firstMillisecond;

    private long lastMillisecond;

    public Year() {
        this(new java.util.Date());
    }

    public Year(int year) {
        if ((year < org.jfree.data.time.SerialDate.MINIMUM_YEAR_SUPPORTED) || (year > org.jfree.data.time.SerialDate.MAXIMUM_YEAR_SUPPORTED)) {
            throw new java.lang.IllegalArgumentException(("Year constructor: year (" + year) + ") outside valid range.");
        }
        this.year = ((short) (year));
        peg(java.util.Calendar.getInstance());
    }

    public Year(java.util.Date time) {
        this(time, org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE);
    }

    public Year(java.util.Date time, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(time);
        this.year = ((short) (calendar.get(java.util.Calendar.YEAR)));
        peg(calendar);
    }

    public int getYear() {
        return this.year;
    }

    public long getFirstMillisecond() {
        return this.firstMillisecond;
    }

    public long getLastMillisecond() {
        return this.lastMillisecond;
    }

    public void peg(java.util.Calendar calendar) {
        this.firstMillisecond = getFirstMillisecond(calendar);
        this.lastMillisecond = getLastMillisecond(calendar);
    }

    public org.jfree.data.time.RegularTimePeriod previous() {
        if (this.year > org.jfree.data.time.SerialDate.MINIMUM_YEAR_SUPPORTED) {
            return new org.jfree.data.time.Year(this.year - 1);
        } else {
            return null;
        }
    }

    public org.jfree.data.time.RegularTimePeriod next() {
        if (this.year < org.jfree.data.time.SerialDate.MAXIMUM_YEAR_SUPPORTED) {
            return new org.jfree.data.time.Year(this.year + 1);
        } else {
            return null;
        }
    }

    public long getSerialIndex() {
        return this.year;
    }

    public long getFirstMillisecond(java.util.Calendar calendar) {
        calendar.set(this.year, java.util.Calendar.JANUARY, 1, 0, 0, 0);
        calendar.set(java.util.Calendar.MILLISECOND, 0);
        return calendar.getTime().getTime();
    }

    public long getLastMillisecond(java.util.Calendar calendar) {
        calendar.set(this.year, java.util.Calendar.DECEMBER, 31, 23, 59, 59);
        calendar.set(java.util.Calendar.MILLISECOND, 999);
        return calendar.getTime().getTime();
    }

    public boolean equals(java.lang.Object object) {
        if (object != null) {
            if (object instanceof org.jfree.data.time.Year) {
                org.jfree.data.time.Year target = ((org.jfree.data.time.Year) (object));
                return this.year == target.getYear();
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    public int hashCode() {
        int result = 17;
        int c = this.year;
        result = (37 * result) + c;
        return result;
    }

    public int compareTo(java.lang.Object o1) {
        int result;
        if (o1 instanceof org.jfree.data.time.Year) {
            org.jfree.data.time.Year y = ((org.jfree.data.time.Year) (o1));
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(60).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("org.jfree.data.time.Year.this.lastMillisecond",org.jfree.data.time.Year.this.lastMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("y",y);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("o1",o1);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("org.jfree.data.time.Year.this.firstMillisecond",org.jfree.data.time.Year.this.firstMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectInput("org.jfree.data.time.Year.this.year",org.jfree.data.time.Year.this.year);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(60).collectionEnds();
            }
            if (runtimeAngelicValue)
                result = this.year - y.getYear();

        } else if (o1 instanceof org.jfree.data.time.RegularTimePeriod) {
            result = 0;
        } else {
            result = 1;
        }
        return result;
    }

    public java.lang.String toString() {
        return java.lang.Integer.toString(this.year);
    }

    public static org.jfree.data.time.Year parseYear(java.lang.String s) {
        int y;
        try {
            y = java.lang.Integer.parseInt(s.trim());
        } catch (java.lang.NumberFormatException e) {
            throw new org.jfree.data.time.TimePeriodFormatException("Cannot parse string.");
        }
        try {
            return new org.jfree.data.time.Year(y);
        } catch (java.lang.IllegalArgumentException e) {
            throw new org.jfree.data.time.TimePeriodFormatException("Year outside valid range.");
        }
    }
}
[187109] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659859762290
GPR[SSUN]-1659859762290
2751582
GPR[ESUN]-1659859762403
GPR[SSUN]-1659859762404
2751582
GPR[SPVATF]-1659859762546
GPR[EPVATF]-1659859762562
GPR[SPS]-1659859762562
[187518] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Year extends org.jfree.data.time.RegularTimePeriod implements java.io.Serializable {
    private static final long serialVersionUID = -7659990929736074836L;

    private short year;

    private long firstMillisecond;

    private long lastMillisecond;

    public Year() {
        this(new java.util.Date());
    }

    public Year(int year) {
        if ((year < org.jfree.data.time.SerialDate.MINIMUM_YEAR_SUPPORTED) || (year > org.jfree.data.time.SerialDate.MAXIMUM_YEAR_SUPPORTED)) {
            throw new java.lang.IllegalArgumentException(("Year constructor: year (" + year) + ") outside valid range.");
        }
        this.year = ((short) (year));
        peg(java.util.Calendar.getInstance());
    }

    public Year(java.util.Date time) {
        this(time, org.jfree.data.time.RegularTimePeriod.DEFAULT_TIME_ZONE);
    }

    public Year(java.util.Date time, java.util.TimeZone zone) {
        java.util.Calendar calendar = java.util.Calendar.getInstance(zone);
        calendar.setTime(time);
        this.year = ((short) (calendar.get(java.util.Calendar.YEAR)));
        peg(calendar);
    }

    public int getYear() {
        return this.year;
    }

    public long getFirstMillisecond() {
        return this.firstMillisecond;
    }

    public long getLastMillisecond() {
        return this.lastMillisecond;
    }

    public void peg(java.util.Calendar calendar) {
        this.firstMillisecond = getFirstMillisecond(calendar);
        this.lastMillisecond = getLastMillisecond(calendar);
    }

    public org.jfree.data.time.RegularTimePeriod previous() {
        if (this.year > org.jfree.data.time.SerialDate.MINIMUM_YEAR_SUPPORTED) {
            return new org.jfree.data.time.Year(this.year - 1);
        } else {
            return null;
        }
    }

    public org.jfree.data.time.RegularTimePeriod next() {
        if (this.year < org.jfree.data.time.SerialDate.MAXIMUM_YEAR_SUPPORTED) {
            return new org.jfree.data.time.Year(this.year + 1);
        } else {
            return null;
        }
    }

    public long getSerialIndex() {
        return this.year;
    }

    public long getFirstMillisecond(java.util.Calendar calendar) {
        calendar.set(this.year, java.util.Calendar.JANUARY, 1, 0, 0, 0);
        calendar.set(java.util.Calendar.MILLISECOND, 0);
        return calendar.getTime().getTime();
    }

    public long getLastMillisecond(java.util.Calendar calendar) {
        calendar.set(this.year, java.util.Calendar.DECEMBER, 31, 23, 59, 59);
        calendar.set(java.util.Calendar.MILLISECOND, 999);
        return calendar.getTime().getTime();
    }

    public boolean equals(java.lang.Object object) {
        if (object != null) {
            if (object instanceof org.jfree.data.time.Year) {
                org.jfree.data.time.Year target = ((org.jfree.data.time.Year) (object));
                return this.year == target.getYear();
            } else {
                return false;
            }
        } else {
            return false;
        }
    }

    public int hashCode() {
        int result = 17;
        int c = this.year;
        result = (37 * result) + c;
        return result;
    }

    public int compareTo(java.lang.Object o1) {
        int result;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(61).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("org.jfree.data.time.Year.this.lastMillisecond",org.jfree.data.time.Year.this.lastMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("o1",o1);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("org.jfree.data.time.Year.this.firstMillisecond",org.jfree.data.time.Year.this.firstMillisecond);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("o1 instanceof org.jfree.data.time.Year",o1 instanceof org.jfree.data.time.Year);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectInput("org.jfree.data.time.Year.this.year",org.jfree.data.time.Year.this.year);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(61).collectionEnds();
        }
        if (runtimeAngelicValue) if (o1 instanceof org.jfree.data.time.Year) {
            org.jfree.data.time.Year y = ((org.jfree.data.time.Year) (o1));
            result = this.year - y.getYear();
        } else if (o1 instanceof org.jfree.data.time.RegularTimePeriod) {
            result = 0;
        } else {
            result = 1;
        }
        return result;
    }

    public java.lang.String toString() {
        return java.lang.Integer.toString(this.year);
    }

    public static org.jfree.data.time.Year parseYear(java.lang.String s) {
        int y;
        try {
            y = java.lang.Integer.parseInt(s.trim());
        } catch (java.lang.NumberFormatException e) {
            throw new org.jfree.data.time.TimePeriodFormatException("Cannot parse string.");
        }
        try {
            return new org.jfree.data.time.Year(y);
        } catch (java.lang.IllegalArgumentException e) {
            throw new org.jfree.data.time.TimePeriodFormatException("Year outside valid range.");
        }
    }
}
[187518] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659859762699
GPR[EPVATF]-1659859762713
GPR[SPS]-1659859762713
[187681] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Year:317.
GPR[EPS]-1659859762862
GPR[ESUN]-1659859762862
GPR[SSUN]-1659859762862
1776071035
GPR[ESUN]-1659859762958
GPR[SSUN]-1659859762958
2751582
GPR[ESUN]-1659859763048
GPR[SSUN]-1659859763048
2751582
GPR[ESUN]-1659859763139
GPR[SSUN]-1659859763139
2751582
GPR[SPVATF]-1659859763229
GPR[EPVATF]-1659859763244
GPR[SPS]-1659859763244
[188187] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Year:253.
GPR[EPS]-1659859763369
GPR[ESUN]-1659859763369
GPR[SSUN]-1659859763369
2751582
GPR[SPVATF]-1659859763461
GPR[EPVATF]-1659859763475
GPR[SPS]-1659859763475
[188414] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Year:252.
GPR[EPS]-1659859763595
GPR[ESUN]-1659859763595
GPR[SSUN]-1659859763595
2751582
GPR[ESUN]-1659859763686
GPR[SSUN]-1659859763686
2751582
GPR[SPVATF]-1659859763780
GPR[EPVATF]-1659859763794
GPR[SPS]-1659859763794
[188745] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Year:234.
GPR[EPS]-1659859763926
GPR[ESUN]-1659859763926
GPR[SSUN]-1659859763926
2751582
GPR[SPVATF]-1659859764023
GPR[EPVATF]-1659859764036
GPR[SPS]-1659859764036
[188976] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Year:233.
GPR[EPS]-1659859764157
GPR[ESUN]-1659859764157
GPR[SSUN]-1659859764157
2751582
GPR[ESUN]-1659859764258
GPR[SSUN]-1659859764258
2751582
GPR[SPVATF]-1659859764361
GPR[EPVATF]-1659859764375
GPR[SPS]-1659859764375
[189311] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Year:177.
GPR[EPS]-1659859764492
GPR[ESUN]-1659859764492
GPR[SSUN]-1659859764492
2751582
GPR[SPVATF]-1659859764584
GPR[EPVATF]-1659859764599
GPR[SPS]-1659859764599
[189541] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Year:176.
GPR[EPS]-1659859764722
GPR[ESUN]-1659859764722
GPR[SSUN]-1659859764722
1776071035
GPR[SPVATF]-1659859764815
GPR[EPVATF]-1659859764829
GPR[SPS]-1659859764829
[189773] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.SpreadsheetDate:452.
GPR[EPS]-1659859764954
GPR[SPVATF]-1659859764954
GPR[EPVATF]-1659859764968
GPR[SPS]-1659859764968
[189912] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.SpreadsheetDate:452.
GPR[EPS]-1659859765093
GPR[ESUN]-1659859765093
GPR[SSUN]-1659859765093
1394353123
GPR[SPVATF]-1659859765203
GPR[EPVATF]-1659859765218
GPR[SPS]-1659859765218
[190172] ERROR ConstraintModelBuilder - Unable to compile the change: 
public abstract class SerialDate implements java.lang.Comparable , java.io.Serializable , org.jfree.data.time.MonthConstants {
    private static final long serialVersionUID = -293716040467423637L;

    public static final java.text.DateFormatSymbols DATE_FORMAT_SYMBOLS = new java.text.SimpleDateFormat().getDateFormatSymbols();

    public static final int SERIAL_LOWER_BOUND = 2;

    public static final int SERIAL_UPPER_BOUND = 2958465;

    public static final int MINIMUM_YEAR_SUPPORTED = 1900;

    public static final int MAXIMUM_YEAR_SUPPORTED = 9999;

    public static final int MONDAY = java.util.Calendar.MONDAY;

    public static final int TUESDAY = java.util.Calendar.TUESDAY;

    public static final int WEDNESDAY = java.util.Calendar.WEDNESDAY;

    public static final int THURSDAY = java.util.Calendar.THURSDAY;

    public static final int FRIDAY = java.util.Calendar.FRIDAY;

    public static final int SATURDAY = java.util.Calendar.SATURDAY;

    public static final int SUNDAY = java.util.Calendar.SUNDAY;

    static final int[] LAST_DAY_OF_MONTH = new int[]{ 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

    static final int[] AGGREGATE_DAYS_TO_END_OF_MONTH = new int[]{ 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 };

    static final int[] AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH = new int[]{ 0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 };

    static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH = new int[]{ 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 };

    static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH = new int[]{ 0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 };

    public static final int FIRST_WEEK_IN_MONTH = 1;

    public static final int SECOND_WEEK_IN_MONTH = 2;

    public static final int THIRD_WEEK_IN_MONTH = 3;

    public static final int FOURTH_WEEK_IN_MONTH = 4;

    public static final int LAST_WEEK_IN_MONTH = 0;

    public static final int INCLUDE_NONE = 0;

    public static final int INCLUDE_FIRST = 1;

    public static final int INCLUDE_SECOND = 2;

    public static final int INCLUDE_BOTH = 3;

    public static final int PRECEDING = -1;

    public static final int NEAREST = 0;

    public static final int FOLLOWING = 1;

    private java.lang.String description;

    protected SerialDate() {
    }

    public static boolean isValidWeekdayCode(final int code) {
        switch (code) {
            case org.jfree.data.time.SerialDate.SUNDAY :
            case org.jfree.data.time.SerialDate.MONDAY :
            case org.jfree.data.time.SerialDate.TUESDAY :
            case org.jfree.data.time.SerialDate.WEDNESDAY :
            case org.jfree.data.time.SerialDate.THURSDAY :
            case org.jfree.data.time.SerialDate.FRIDAY :
            case org.jfree.data.time.SerialDate.SATURDAY :
                return true;
            default :
                return false;
        }
    }

    public static int stringToWeekdayCode(java.lang.String s) {
        final java.lang.String[] shortWeekdayNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortWeekdays();
        final java.lang.String[] weekDayNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getWeekdays();
        int result = -1;
        s = s.trim();
        for (int i = 0; i < weekDayNames.length; i++) {
            if (s.equals(shortWeekdayNames[i])) {
                result = i;
                break;
            }
            if (s.equals(weekDayNames[i])) {
                result = i;
                break;
            }
        }
        return result;
    }

    public static java.lang.String weekdayCodeToString(final int weekday) {
        final java.lang.String[] weekdays = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getWeekdays();
        return weekdays[weekday];
    }

    public static java.lang.String[] getMonths() {
        return org.jfree.data.time.SerialDate.getMonths(false);
    }

    public static java.lang.String[] getMonths(final boolean shortened) {
        if (shortened) {
            return org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortMonths();
        } else {
            return org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getMonths();
        }
    }

    public static boolean isValidMonthCode(final int code) {
        switch (code) {
            case org.jfree.data.time.MonthConstants.JANUARY :
            case org.jfree.data.time.MonthConstants.FEBRUARY :
            case org.jfree.data.time.MonthConstants.MARCH :
            case org.jfree.data.time.MonthConstants.APRIL :
            case org.jfree.data.time.MonthConstants.MAY :
            case org.jfree.data.time.MonthConstants.JUNE :
            case org.jfree.data.time.MonthConstants.JULY :
            case org.jfree.data.time.MonthConstants.AUGUST :
            case org.jfree.data.time.MonthConstants.SEPTEMBER :
            case org.jfree.data.time.MonthConstants.OCTOBER :
            case org.jfree.data.time.MonthConstants.NOVEMBER :
            case org.jfree.data.time.MonthConstants.DECEMBER :
                return true;
            default :
                return false;
        }
    }

    public static int monthCodeToQuarter(final int code) {
        switch (code) {
            case org.jfree.data.time.MonthConstants.JANUARY :
            case org.jfree.data.time.MonthConstants.FEBRUARY :
            case org.jfree.data.time.MonthConstants.MARCH :
                return 1;
            case org.jfree.data.time.MonthConstants.APRIL :
            case org.jfree.data.time.MonthConstants.MAY :
            case org.jfree.data.time.MonthConstants.JUNE :
                return 2;
            case org.jfree.data.time.MonthConstants.JULY :
            case org.jfree.data.time.MonthConstants.AUGUST :
            case org.jfree.data.time.MonthConstants.SEPTEMBER :
                return 3;
            case org.jfree.data.time.MonthConstants.OCTOBER :
            case org.jfree.data.time.MonthConstants.NOVEMBER :
            case org.jfree.data.time.MonthConstants.DECEMBER :
                return 4;
            default :
                throw new java.lang.IllegalArgumentException("SerialDate.monthCodeToQuarter: invalid month code.");
        }
    }

    public static java.lang.String monthCodeToString(final int month) {
        return org.jfree.data.time.SerialDate.monthCodeToString(month, false);
    }

    public static java.lang.String monthCodeToString(final int month, final boolean shortened) {
        if (!org.jfree.data.time.SerialDate.isValidMonthCode(month)) {
            throw new java.lang.IllegalArgumentException("SerialDate.monthCodeToString: month outside valid range.");
        }
        final java.lang.String[] months;
        if (shortened) {
            months = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortMonths();
        } else {
            months = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getMonths();
        }
        return months[month - 1];
    }

    public static int stringToMonthCode(java.lang.String s) {
        final java.lang.String[] shortMonthNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortMonths();
        final java.lang.String[] monthNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getMonths();
        int result = -1;
        s = s.trim();
        try {
            result = java.lang.Integer.parseInt(s);
        } catch (java.lang.NumberFormatException e) {
        }
        if ((result < 1) || (result > 12)) {
            for (int i = 0; i < monthNames.length; i++) {
                if (s.equals(shortMonthNames[i])) {
                    result = i + 1;
                    break;
                }
                if (s.equals(monthNames[i])) {
                    result = i + 1;
                    break;
                }
            }
        }
        return result;
    }

    public static boolean isValidWeekInMonthCode(final int code) {
        switch (code) {
            case org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH :
                return true;
            default :
                return false;
        }
    }

    public static boolean isLeapYear(final int yyyy) {
        if ((yyyy % 4) != 0) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(71).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND",org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.THURSDAY",org.jfree.data.time.SerialDate.THURSDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS",org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.INCLUDE_NONE",org.jfree.data.time.SerialDate.INCLUDE_NONE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.MAXIMUM_YEAR_SUPPORTED",org.jfree.data.time.SerialDate.MAXIMUM_YEAR_SUPPORTED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.LAST_DAY_OF_MONTH",org.jfree.data.time.SerialDate.LAST_DAY_OF_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.WEDNESDAY",org.jfree.data.time.SerialDate.WEDNESDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH",org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.INCLUDE_FIRST",org.jfree.data.time.SerialDate.INCLUDE_FIRST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH",org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_MONTH",org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.TUESDAY",org.jfree.data.time.SerialDate.TUESDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.MINIMUM_YEAR_SUPPORTED",org.jfree.data.time.SerialDate.MINIMUM_YEAR_SUPPORTED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.NEAREST",org.jfree.data.time.SerialDate.NEAREST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.SUNDAY",org.jfree.data.time.SerialDate.SUNDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH",org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.SATURDAY",org.jfree.data.time.SerialDate.SATURDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND",org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.PRECEDING",org.jfree.data.time.SerialDate.PRECEDING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.INCLUDE_SECOND",org.jfree.data.time.SerialDate.INCLUDE_SECOND);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.INCLUDE_BOTH",org.jfree.data.time.SerialDate.INCLUDE_BOTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.FOLLOWING",org.jfree.data.time.SerialDate.FOLLOWING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.FRIDAY",org.jfree.data.time.SerialDate.FRIDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("org.jfree.data.time.SerialDate.MONDAY",org.jfree.data.time.SerialDate.MONDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectInput("yyyy",yyyy);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(71).collectionEnds();
            }
            if (runtimeAngelicValue)
                return false;

        } else if ((yyyy % 400) == 0) {
            return true;
        } else if ((yyyy % 100) == 0) {
            return false;
        } else {
            return true;
        }
    }

    public static int leapYearCount(final int yyyy) {
        final int leap4 = (yyyy - 1896) / 4;
        final int leap100 = (yyyy - 1800) / 100;
        final int leap400 = (yyyy - 1600) / 400;
        return (leap4 - leap100) + leap400;
    }

    public static int lastDayOfMonth(final int month, final int yyyy) {
        final int result = org.jfree.data.time.SerialDate.LAST_DAY_OF_MONTH[month];
        if (month != org.jfree.data.time.MonthConstants.FEBRUARY) {
            return result;
        } else if (org.jfree.data.time.SerialDate.isLeapYear(yyyy)) {
            return result + 1;
        } else {
            return result;
        }
    }

    public static org.jfree.data.time.SerialDate addDays(final int days, final org.jfree.data.time.SerialDate base) {
        final int serialDayNumber = base.toSerial() + days;
        return org.jfree.data.time.SerialDate.createInstance(serialDayNumber);
    }

    public static org.jfree.data.time.SerialDate addMonths(final int months, final org.jfree.data.time.SerialDate base) {
        final int yy = ((((12 * base.getYYYY()) + base.getMonth()) + months) - 1) / 12;
        final int mm = (((((12 * base.getYYYY()) + base.getMonth()) + months) - 1) % 12) + 1;
        final int dd = java.lang.Math.min(base.getDayOfMonth(), org.jfree.data.time.SerialDate.lastDayOfMonth(mm, yy));
        return org.jfree.data.time.SerialDate.createInstance(dd, mm, yy);
    }

    public static org.jfree.data.time.SerialDate addYears(final int years, final org.jfree.data.time.SerialDate base) {
        final int baseY = base.getYYYY();
        final int baseM = base.getMonth();
        final int baseD = base.getDayOfMonth();
        final int targetY = baseY + years;
        final int targetD = java.lang.Math.min(baseD, org.jfree.data.time.SerialDate.lastDayOfMonth(baseM, targetY));
        return org.jfree.data.time.SerialDate.createInstance(targetD, baseM, targetY);
    }

    public static org.jfree.data.time.SerialDate getPreviousDayOfWeek(final int targetWeekday, final org.jfree.data.time.SerialDate base) {
        if (!org.jfree.data.time.SerialDate.isValidWeekdayCode(targetWeekday)) {
            throw new java.lang.IllegalArgumentException("Invalid day-of-the-week code.");
        }
        final int adjust;
        final int baseDOW = base.getDayOfWeek();
        if (baseDOW > targetWeekday) {
            adjust = java.lang.Math.min(0, targetWeekday - baseDOW);
        } else {
            adjust = (-7) + java.lang.Math.max(0, targetWeekday - baseDOW);
        }
        return org.jfree.data.time.SerialDate.addDays(adjust, base);
    }

    public static org.jfree.data.time.SerialDate getFollowingDayOfWeek(final int targetWeekday, final org.jfree.data.time.SerialDate base) {
        if (!org.jfree.data.time.SerialDate.isValidWeekdayCode(targetWeekday)) {
            throw new java.lang.IllegalArgumentException("Invalid day-of-the-week code.");
        }
        final int adjust;
        final int baseDOW = base.getDayOfWeek();
        if (baseDOW > targetWeekday) {
            adjust = 7 + java.lang.Math.min(0, targetWeekday - baseDOW);
        } else {
            adjust = java.lang.Math.max(0, targetWeekday - baseDOW);
        }
        return org.jfree.data.time.SerialDate.addDays(adjust, base);
    }

    public static org.jfree.data.time.SerialDate getNearestDayOfWeek(final int targetDOW, final org.jfree.data.time.SerialDate base) {
        if (!org.jfree.data.time.SerialDate.isValidWeekdayCode(targetDOW)) {
            throw new java.lang.IllegalArgumentException("Invalid day-of-the-week code.");
        }
        final int baseDOW = base.getDayOfWeek();
        int adjust = -java.lang.Math.abs(targetDOW - baseDOW);
        if (adjust >= 4) {
            adjust = 7 - adjust;
        }
        if (adjust <= (-4)) {
            adjust = 7 + adjust;
        }
        return org.jfree.data.time.SerialDate.addDays(adjust, base);
    }

    public org.jfree.data.time.SerialDate getEndOfCurrentMonth(final org.jfree.data.time.SerialDate base) {
        final int last = org.jfree.data.time.SerialDate.lastDayOfMonth(base.getMonth(), base.getYYYY());
        return org.jfree.data.time.SerialDate.createInstance(last, base.getMonth(), base.getYYYY());
    }

    public static java.lang.String weekInMonthToString(final int count) {
        switch (count) {
            case org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH :
                return "First";
            case org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH :
                return "Second";
            case org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH :
                return "Third";
            case org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH :
                return "Fourth";
            case org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH :
                return "Last";
            default :
                return "SerialDate.weekInMonthToString(): invalid code.";
        }
    }

    public static java.lang.String relativeToString(final int relative) {
        switch (relative) {
            case org.jfree.data.time.SerialDate.PRECEDING :
                return "Preceding";
            case org.jfree.data.time.SerialDate.NEAREST :
                return "Nearest";
            case org.jfree.data.time.SerialDate.FOLLOWING :
                return "Following";
            default :
                return "ERROR : Relative To String";
        }
    }

    public static org.jfree.data.time.SerialDate createInstance(final int day, final int month, final int yyyy) {
        return new org.jfree.data.time.SpreadsheetDate(day, month, yyyy);
    }

    public static org.jfree.data.time.SerialDate createInstance(final int serial) {
        return new org.jfree.data.time.SpreadsheetDate(serial);
    }

    public static org.jfree.data.time.SerialDate createInstance(final java.util.Date date) {
        final java.util.GregorianCalendar calendar = new java.util.GregorianCalendar();
        calendar.setTime(date);
        return new org.jfree.data.time.SpreadsheetDate(calendar.get(java.util.Calendar.DATE), calendar.get(java.util.Calendar.MONTH) + 1, calendar.get(java.util.Calendar.YEAR));
    }

    public abstract int toSerial();

    public abstract java.util.Date toDate();

    public java.lang.String getDescription() {
        return this.description;
    }

    public void setDescription(final java.lang.String description) {
        this.description = description;
    }

    public java.lang.String toString() {
        return (((getDayOfMonth() + "-") + org.jfree.data.time.SerialDate.monthCodeToString(getMonth())) + "-") + getYYYY();
    }

    public abstract int getYYYY();

    public abstract int getMonth();

    public abstract int getDayOfMonth();

    public abstract int getDayOfWeek();

    public abstract int compare(org.jfree.data.time.SerialDate other);

    public abstract boolean isOn(org.jfree.data.time.SerialDate other);

    public abstract boolean isBefore(org.jfree.data.time.SerialDate other);

    public abstract boolean isOnOrBefore(org.jfree.data.time.SerialDate other);

    public abstract boolean isAfter(org.jfree.data.time.SerialDate other);

    public abstract boolean isOnOrAfter(org.jfree.data.time.SerialDate other);

    public abstract boolean isInRange(org.jfree.data.time.SerialDate d1, org.jfree.data.time.SerialDate d2);

    public abstract boolean isInRange(org.jfree.data.time.SerialDate d1, org.jfree.data.time.SerialDate d2, int include);

    public org.jfree.data.time.SerialDate getPreviousDayOfWeek(final int targetDOW) {
        return org.jfree.data.time.SerialDate.getPreviousDayOfWeek(targetDOW, this);
    }

    public org.jfree.data.time.SerialDate getFollowingDayOfWeek(final int targetDOW) {
        return org.jfree.data.time.SerialDate.getFollowingDayOfWeek(targetDOW, this);
    }

    public org.jfree.data.time.SerialDate getNearestDayOfWeek(final int targetDOW) {
        return org.jfree.data.time.SerialDate.getNearestDayOfWeek(targetDOW, this);
    }
}
[190172] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659859765353
GPR[SSUN]-1659859765353
1394353123
GPR[SPVATF]-1659859765451
GPR[EPVATF]-1659859765465
GPR[SPS]-1659859765465
[190422] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.SerialDate:499.
GPR[EPS]-1659859765603
GPR[ESUN]-1659859765603
GPR[SSUN]-1659859765603
68477
GPR[ESUN]-1659859765700
GPR[SSUN]-1659859765700
68477
GPR[SPVATF]-1659859765794
GPR[EPVATF]-1659859765809
GPR[SPS]-1659859765809
[190758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:344.
GPR[EPS]-1659859765939
GPR[ESUN]-1659859765939
GPR[SSUN]-1659859765939
68477
GPR[SPVATF]-1659859766039
GPR[EPVATF]-1659859766055
GPR[SPS]-1659859766055
[191000] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:343.
GPR[EPS]-1659859766181
GPR[ESUN]-1659859766181
GPR[SSUN]-1659859766181
68477
GPR[SPVATF]-1659859766277
GPR[EPVATF]-1659859766292
GPR[SPS]-1659859766292
[191239] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:342.
GPR[EPS]-1659859766420
GPR[ESUN]-1659859766420
GPR[SSUN]-1659859766420
68477
GPR[ESUN]-1659859766515
GPR[SSUN]-1659859766515
68477
GPR[ESUN]-1659859766617
GPR[SSUN]-1659859766617
68477
GPR[ESUN]-1659859766717
GPR[SSUN]-1659859766717
68477
GPR[ESUN]-1659859766810
GPR[SSUN]-1659859766810
68477
GPR[SPVATF]-1659859766902
GPR[EPVATF]-1659859766917
GPR[SPS]-1659859766917
[191859] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:322.
GPR[EPS]-1659859767040
GPR[ESUN]-1659859767040
GPR[SSUN]-1659859767040
68477
GPR[SPVATF]-1659859767134
GPR[EPVATF]-1659859767150
GPR[SPS]-1659859767150
[192094] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:321.
GPR[EPS]-1659859767275
GPR[ESUN]-1659859767275
GPR[SSUN]-1659859767275
68477
GPR[SPVATF]-1659859767368
GPR[EPVATF]-1659859767383
GPR[SPS]-1659859767383
[192330] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:320.
GPR[EPS]-1659859767511
GPR[ESUN]-1659859767511
GPR[SSUN]-1659859767511
68477
GPR[ESUN]-1659859767603
GPR[SSUN]-1659859767604
68477
GPR[ESUN]-1659859767695
GPR[SSUN]-1659859767695
68477
GPR[ESUN]-1659859767786
GPR[SSUN]-1659859767786
68477
GPR[ESUN]-1659859767877
GPR[SSUN]-1659859767877
68477
GPR[SPVATF]-1659859767972
GPR[EPVATF]-1659859767986
GPR[SPS]-1659859767986
[192931] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:251.
GPR[EPS]-1659859768112
GPR[ESUN]-1659859768112
GPR[SSUN]-1659859768112
68477
GPR[SPVATF]-1659859768212
GPR[EPVATF]-1659859768226
GPR[SPS]-1659859768226
[193165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.Day:250.
GPR[EPS]-1659859768347
GPR[ESUN]-1659859768347
GPR[SSUN]-1659859768347
1394353123
GPR[ESUN]-1659859768445
GPR[SSUN]-1659859768445
1394353123
GPR[ESUN]-1659859768540
GPR[SSUN]-1659859768540
1394353123
GPR[ESUN]-1659859768655
GPR[SSUN]-1659859768655
1394353123
GPR[ESUN]-1659859768750
GPR[SSUN]-1659859768750
1394353123
GPR[ESUN]-1659859768843
GPR[SSUN]-1659859768843
1776071035
GPR[ESUN]-1659859768939
GPR[SSUN]-1659859768939
1776071035
GPR[ESUN]-1659859769028
GPR[SSUN]-1659859769028
1776071035
GPR[SPVATF]-1659859769119
GPR[EPVATF]-1659859769133
GPR[SPS]-1659859769133
[194073] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.SpreadsheetDate:451.
GPR[EPS]-1659859769254
GPR[SPVATF]-1659859769254
GPR[EPVATF]-1659859769267
GPR[SPS]-1659859769267
[194209] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.SpreadsheetDate:451.
GPR[EPS]-1659859769391
GPR[ESUN]-1659859769391
GPR[SSUN]-1659859769391
1776071035
GPR[ESUN]-1659859769515
GPR[SSUN]-1659859769515
1776071035
GPR[ESUN]-1659859769606
GPR[SSUN]-1659859769606
1776071035
GPR[ESUN]-1659859769695
GPR[SSUN]-1659859769695
1776071035
GPR[ESUN]-1659859769785
GPR[SSUN]-1659859769785
1776071035
GPR[ESUN]-1659859769900
GPR[SSUN]-1659859769900
1394353123
GPR[SPVATF]-1659859769992
GPR[EPVATF]-1659859770007
GPR[SPS]-1659859770007
[194957] ERROR ConstraintModelBuilder - Unable to compile the change: 
public abstract class SerialDate implements java.lang.Comparable , java.io.Serializable , org.jfree.data.time.MonthConstants {
    private static final long serialVersionUID = -293716040467423637L;

    public static final java.text.DateFormatSymbols DATE_FORMAT_SYMBOLS = new java.text.SimpleDateFormat().getDateFormatSymbols();

    public static final int SERIAL_LOWER_BOUND = 2;

    public static final int SERIAL_UPPER_BOUND = 2958465;

    public static final int MINIMUM_YEAR_SUPPORTED = 1900;

    public static final int MAXIMUM_YEAR_SUPPORTED = 9999;

    public static final int MONDAY = java.util.Calendar.MONDAY;

    public static final int TUESDAY = java.util.Calendar.TUESDAY;

    public static final int WEDNESDAY = java.util.Calendar.WEDNESDAY;

    public static final int THURSDAY = java.util.Calendar.THURSDAY;

    public static final int FRIDAY = java.util.Calendar.FRIDAY;

    public static final int SATURDAY = java.util.Calendar.SATURDAY;

    public static final int SUNDAY = java.util.Calendar.SUNDAY;

    static final int[] LAST_DAY_OF_MONTH = new int[]{ 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

    static final int[] AGGREGATE_DAYS_TO_END_OF_MONTH = new int[]{ 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 };

    static final int[] AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH = new int[]{ 0, 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 };

    static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH = new int[]{ 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 };

    static final int[] LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH = new int[]{ 0, 0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335, 366 };

    public static final int FIRST_WEEK_IN_MONTH = 1;

    public static final int SECOND_WEEK_IN_MONTH = 2;

    public static final int THIRD_WEEK_IN_MONTH = 3;

    public static final int FOURTH_WEEK_IN_MONTH = 4;

    public static final int LAST_WEEK_IN_MONTH = 0;

    public static final int INCLUDE_NONE = 0;

    public static final int INCLUDE_FIRST = 1;

    public static final int INCLUDE_SECOND = 2;

    public static final int INCLUDE_BOTH = 3;

    public static final int PRECEDING = -1;

    public static final int NEAREST = 0;

    public static final int FOLLOWING = 1;

    private java.lang.String description;

    protected SerialDate() {
    }

    public static boolean isValidWeekdayCode(final int code) {
        switch (code) {
            case org.jfree.data.time.SerialDate.SUNDAY :
            case org.jfree.data.time.SerialDate.MONDAY :
            case org.jfree.data.time.SerialDate.TUESDAY :
            case org.jfree.data.time.SerialDate.WEDNESDAY :
            case org.jfree.data.time.SerialDate.THURSDAY :
            case org.jfree.data.time.SerialDate.FRIDAY :
            case org.jfree.data.time.SerialDate.SATURDAY :
                return true;
            default :
                return false;
        }
    }

    public static int stringToWeekdayCode(java.lang.String s) {
        final java.lang.String[] shortWeekdayNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortWeekdays();
        final java.lang.String[] weekDayNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getWeekdays();
        int result = -1;
        s = s.trim();
        for (int i = 0; i < weekDayNames.length; i++) {
            if (s.equals(shortWeekdayNames[i])) {
                result = i;
                break;
            }
            if (s.equals(weekDayNames[i])) {
                result = i;
                break;
            }
        }
        return result;
    }

    public static java.lang.String weekdayCodeToString(final int weekday) {
        final java.lang.String[] weekdays = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getWeekdays();
        return weekdays[weekday];
    }

    public static java.lang.String[] getMonths() {
        return org.jfree.data.time.SerialDate.getMonths(false);
    }

    public static java.lang.String[] getMonths(final boolean shortened) {
        if (shortened) {
            return org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortMonths();
        } else {
            return org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getMonths();
        }
    }

    public static boolean isValidMonthCode(final int code) {
        switch (code) {
            case org.jfree.data.time.MonthConstants.JANUARY :
            case org.jfree.data.time.MonthConstants.FEBRUARY :
            case org.jfree.data.time.MonthConstants.MARCH :
            case org.jfree.data.time.MonthConstants.APRIL :
            case org.jfree.data.time.MonthConstants.MAY :
            case org.jfree.data.time.MonthConstants.JUNE :
            case org.jfree.data.time.MonthConstants.JULY :
            case org.jfree.data.time.MonthConstants.AUGUST :
            case org.jfree.data.time.MonthConstants.SEPTEMBER :
            case org.jfree.data.time.MonthConstants.OCTOBER :
            case org.jfree.data.time.MonthConstants.NOVEMBER :
            case org.jfree.data.time.MonthConstants.DECEMBER :
                return true;
            default :
                return false;
        }
    }

    public static int monthCodeToQuarter(final int code) {
        switch (code) {
            case org.jfree.data.time.MonthConstants.JANUARY :
            case org.jfree.data.time.MonthConstants.FEBRUARY :
            case org.jfree.data.time.MonthConstants.MARCH :
                return 1;
            case org.jfree.data.time.MonthConstants.APRIL :
            case org.jfree.data.time.MonthConstants.MAY :
            case org.jfree.data.time.MonthConstants.JUNE :
                return 2;
            case org.jfree.data.time.MonthConstants.JULY :
            case org.jfree.data.time.MonthConstants.AUGUST :
            case org.jfree.data.time.MonthConstants.SEPTEMBER :
                return 3;
            case org.jfree.data.time.MonthConstants.OCTOBER :
            case org.jfree.data.time.MonthConstants.NOVEMBER :
            case org.jfree.data.time.MonthConstants.DECEMBER :
                return 4;
            default :
                throw new java.lang.IllegalArgumentException("SerialDate.monthCodeToQuarter: invalid month code.");
        }
    }

    public static java.lang.String monthCodeToString(final int month) {
        return org.jfree.data.time.SerialDate.monthCodeToString(month, false);
    }

    public static java.lang.String monthCodeToString(final int month, final boolean shortened) {
        if (!org.jfree.data.time.SerialDate.isValidMonthCode(month)) {
            throw new java.lang.IllegalArgumentException("SerialDate.monthCodeToString: month outside valid range.");
        }
        final java.lang.String[] months;
        if (shortened) {
            months = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortMonths();
        } else {
            months = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getMonths();
        }
        return months[month - 1];
    }

    public static int stringToMonthCode(java.lang.String s) {
        final java.lang.String[] shortMonthNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getShortMonths();
        final java.lang.String[] monthNames = org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS.getMonths();
        int result = -1;
        s = s.trim();
        try {
            result = java.lang.Integer.parseInt(s);
        } catch (java.lang.NumberFormatException e) {
        }
        if ((result < 1) || (result > 12)) {
            for (int i = 0; i < monthNames.length; i++) {
                if (s.equals(shortMonthNames[i])) {
                    result = i + 1;
                    break;
                }
                if (s.equals(monthNames[i])) {
                    result = i + 1;
                    break;
                }
            }
        }
        return result;
    }

    public static boolean isValidWeekInMonthCode(final int code) {
        switch (code) {
            case org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH :
            case org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH :
                return true;
            default :
                return false;
        }
    }

    public static boolean isLeapYear(final int yyyy) {
        if ((yyyy % 4) != 0) {
            return false;
        } else if ((yyyy % 400) == 0) {
            return true;
        } else if ((yyyy % 100) == 0) {
            return false;
        } else {
            return true;
        }
    }

    public static int leapYearCount(final int yyyy) {
        final int leap4 = (yyyy - 1896) / 4;
        final int leap100 = (yyyy - 1800) / 100;
        final int leap400 = (yyyy - 1600) / 400;
        return (leap4 - leap100) + leap400;
    }

    public static int lastDayOfMonth(final int month, final int yyyy) {
        final int result = org.jfree.data.time.SerialDate.LAST_DAY_OF_MONTH[month];
        if (month != org.jfree.data.time.MonthConstants.FEBRUARY) {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(83).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND",org.jfree.data.time.SerialDate.SERIAL_UPPER_BOUND);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.THURSDAY",org.jfree.data.time.SerialDate.THURSDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS",org.jfree.data.time.SerialDate.DATE_FORMAT_SYMBOLS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.INCLUDE_NONE",org.jfree.data.time.SerialDate.INCLUDE_NONE);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.MAXIMUM_YEAR_SUPPORTED",org.jfree.data.time.SerialDate.MAXIMUM_YEAR_SUPPORTED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("result",result);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.LAST_DAY_OF_MONTH",org.jfree.data.time.SerialDate.LAST_DAY_OF_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.WEDNESDAY",org.jfree.data.time.SerialDate.WEDNESDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH",org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.INCLUDE_FIRST",org.jfree.data.time.SerialDate.INCLUDE_FIRST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH",org.jfree.data.time.SerialDate.LEAP_YEAR_AGGREGATE_DAYS_TO_END_OF_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_MONTH",org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.TUESDAY",org.jfree.data.time.SerialDate.TUESDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.MINIMUM_YEAR_SUPPORTED",org.jfree.data.time.SerialDate.MINIMUM_YEAR_SUPPORTED);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.NEAREST",org.jfree.data.time.SerialDate.NEAREST);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.SUNDAY",org.jfree.data.time.SerialDate.SUNDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH",org.jfree.data.time.SerialDate.AGGREGATE_DAYS_TO_END_OF_PRECEDING_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH",org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.SATURDAY",org.jfree.data.time.SerialDate.SATURDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND",org.jfree.data.time.SerialDate.SERIAL_LOWER_BOUND);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.PRECEDING",org.jfree.data.time.SerialDate.PRECEDING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.INCLUDE_SECOND",org.jfree.data.time.SerialDate.INCLUDE_SECOND);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("month",month);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.INCLUDE_BOTH",org.jfree.data.time.SerialDate.INCLUDE_BOTH);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.FOLLOWING",org.jfree.data.time.SerialDate.FOLLOWING);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.FRIDAY",org.jfree.data.time.SerialDate.FRIDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("org.jfree.data.time.SerialDate.MONDAY",org.jfree.data.time.SerialDate.MONDAY);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectInput("yyyy",yyyy);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(83).collectionEnds();
            }
            if (runtimeAngelicValue)
                return result;

        } else if (org.jfree.data.time.SerialDate.isLeapYear(yyyy)) {
            return result + 1;
        } else {
            return result;
        }
    }

    public static org.jfree.data.time.SerialDate addDays(final int days, final org.jfree.data.time.SerialDate base) {
        final int serialDayNumber = base.toSerial() + days;
        return org.jfree.data.time.SerialDate.createInstance(serialDayNumber);
    }

    public static org.jfree.data.time.SerialDate addMonths(final int months, final org.jfree.data.time.SerialDate base) {
        final int yy = ((((12 * base.getYYYY()) + base.getMonth()) + months) - 1) / 12;
        final int mm = (((((12 * base.getYYYY()) + base.getMonth()) + months) - 1) % 12) + 1;
        final int dd = java.lang.Math.min(base.getDayOfMonth(), org.jfree.data.time.SerialDate.lastDayOfMonth(mm, yy));
        return org.jfree.data.time.SerialDate.createInstance(dd, mm, yy);
    }

    public static org.jfree.data.time.SerialDate addYears(final int years, final org.jfree.data.time.SerialDate base) {
        final int baseY = base.getYYYY();
        final int baseM = base.getMonth();
        final int baseD = base.getDayOfMonth();
        final int targetY = baseY + years;
        final int targetD = java.lang.Math.min(baseD, org.jfree.data.time.SerialDate.lastDayOfMonth(baseM, targetY));
        return org.jfree.data.time.SerialDate.createInstance(targetD, baseM, targetY);
    }

    public static org.jfree.data.time.SerialDate getPreviousDayOfWeek(final int targetWeekday, final org.jfree.data.time.SerialDate base) {
        if (!org.jfree.data.time.SerialDate.isValidWeekdayCode(targetWeekday)) {
            throw new java.lang.IllegalArgumentException("Invalid day-of-the-week code.");
        }
        final int adjust;
        final int baseDOW = base.getDayOfWeek();
        if (baseDOW > targetWeekday) {
            adjust = java.lang.Math.min(0, targetWeekday - baseDOW);
        } else {
            adjust = (-7) + java.lang.Math.max(0, targetWeekday - baseDOW);
        }
        return org.jfree.data.time.SerialDate.addDays(adjust, base);
    }

    public static org.jfree.data.time.SerialDate getFollowingDayOfWeek(final int targetWeekday, final org.jfree.data.time.SerialDate base) {
        if (!org.jfree.data.time.SerialDate.isValidWeekdayCode(targetWeekday)) {
            throw new java.lang.IllegalArgumentException("Invalid day-of-the-week code.");
        }
        final int adjust;
        final int baseDOW = base.getDayOfWeek();
        if (baseDOW > targetWeekday) {
            adjust = 7 + java.lang.Math.min(0, targetWeekday - baseDOW);
        } else {
            adjust = java.lang.Math.max(0, targetWeekday - baseDOW);
        }
        return org.jfree.data.time.SerialDate.addDays(adjust, base);
    }

    public static org.jfree.data.time.SerialDate getNearestDayOfWeek(final int targetDOW, final org.jfree.data.time.SerialDate base) {
        if (!org.jfree.data.time.SerialDate.isValidWeekdayCode(targetDOW)) {
            throw new java.lang.IllegalArgumentException("Invalid day-of-the-week code.");
        }
        final int baseDOW = base.getDayOfWeek();
        int adjust = -java.lang.Math.abs(targetDOW - baseDOW);
        if (adjust >= 4) {
            adjust = 7 - adjust;
        }
        if (adjust <= (-4)) {
            adjust = 7 + adjust;
        }
        return org.jfree.data.time.SerialDate.addDays(adjust, base);
    }

    public org.jfree.data.time.SerialDate getEndOfCurrentMonth(final org.jfree.data.time.SerialDate base) {
        final int last = org.jfree.data.time.SerialDate.lastDayOfMonth(base.getMonth(), base.getYYYY());
        return org.jfree.data.time.SerialDate.createInstance(last, base.getMonth(), base.getYYYY());
    }

    public static java.lang.String weekInMonthToString(final int count) {
        switch (count) {
            case org.jfree.data.time.SerialDate.FIRST_WEEK_IN_MONTH :
                return "First";
            case org.jfree.data.time.SerialDate.SECOND_WEEK_IN_MONTH :
                return "Second";
            case org.jfree.data.time.SerialDate.THIRD_WEEK_IN_MONTH :
                return "Third";
            case org.jfree.data.time.SerialDate.FOURTH_WEEK_IN_MONTH :
                return "Fourth";
            case org.jfree.data.time.SerialDate.LAST_WEEK_IN_MONTH :
                return "Last";
            default :
                return "SerialDate.weekInMonthToString(): invalid code.";
        }
    }

    public static java.lang.String relativeToString(final int relative) {
        switch (relative) {
            case org.jfree.data.time.SerialDate.PRECEDING :
                return "Preceding";
            case org.jfree.data.time.SerialDate.NEAREST :
                return "Nearest";
            case org.jfree.data.time.SerialDate.FOLLOWING :
                return "Following";
            default :
                return "ERROR : Relative To String";
        }
    }

    public static org.jfree.data.time.SerialDate createInstance(final int day, final int month, final int yyyy) {
        return new org.jfree.data.time.SpreadsheetDate(day, month, yyyy);
    }

    public static org.jfree.data.time.SerialDate createInstance(final int serial) {
        return new org.jfree.data.time.SpreadsheetDate(serial);
    }

    public static org.jfree.data.time.SerialDate createInstance(final java.util.Date date) {
        final java.util.GregorianCalendar calendar = new java.util.GregorianCalendar();
        calendar.setTime(date);
        return new org.jfree.data.time.SpreadsheetDate(calendar.get(java.util.Calendar.DATE), calendar.get(java.util.Calendar.MONTH) + 1, calendar.get(java.util.Calendar.YEAR));
    }

    public abstract int toSerial();

    public abstract java.util.Date toDate();

    public java.lang.String getDescription() {
        return this.description;
    }

    public void setDescription(final java.lang.String description) {
        this.description = description;
    }

    public java.lang.String toString() {
        return (((getDayOfMonth() + "-") + org.jfree.data.time.SerialDate.monthCodeToString(getMonth())) + "-") + getYYYY();
    }

    public abstract int getYYYY();

    public abstract int getMonth();

    public abstract int getDayOfMonth();

    public abstract int getDayOfWeek();

    public abstract int compare(org.jfree.data.time.SerialDate other);

    public abstract boolean isOn(org.jfree.data.time.SerialDate other);

    public abstract boolean isBefore(org.jfree.data.time.SerialDate other);

    public abstract boolean isOnOrBefore(org.jfree.data.time.SerialDate other);

    public abstract boolean isAfter(org.jfree.data.time.SerialDate other);

    public abstract boolean isOnOrAfter(org.jfree.data.time.SerialDate other);

    public abstract boolean isInRange(org.jfree.data.time.SerialDate d1, org.jfree.data.time.SerialDate d2);

    public abstract boolean isInRange(org.jfree.data.time.SerialDate d1, org.jfree.data.time.SerialDate d2, int include);

    public org.jfree.data.time.SerialDate getPreviousDayOfWeek(final int targetDOW) {
        return org.jfree.data.time.SerialDate.getPreviousDayOfWeek(targetDOW, this);
    }

    public org.jfree.data.time.SerialDate getFollowingDayOfWeek(final int targetDOW) {
        return org.jfree.data.time.SerialDate.getFollowingDayOfWeek(targetDOW, this);
    }

    public org.jfree.data.time.SerialDate getNearestDayOfWeek(final int targetDOW) {
        return org.jfree.data.time.SerialDate.getNearestDayOfWeek(targetDOW, this);
    }
}
[194957] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659859770138
GPR[SSUN]-1659859770138
1394353123
GPR[SPVATF]-1659859770238
GPR[EPVATF]-1659859770252
GPR[SPS]-1659859770252
[195206] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.time.SerialDate:545.
GPR[EPS]-1659859770387
GPR[ESUN]-1659859770387
GPR[SSUN]-1659859770387
1394353123
GPR[ESUN]-1659859770484
GPR[SSUN]-1659859770485
-1821971816
GPR[ESUN]-1659859770574
GPR[SSUN]-1659859770574
-1821971816
GPR[SPVATF]-1659859770690
GPR[EPVATF]-1659859770855
GPR[SPS]-1659859770855
[195815] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.Series:327.
GPR[EPS]-1659859770996
GPR[ESUN]-1659859770996
GPR[SSUN]-1659859770996
-1821971816
GPR[ESUN]-1659859771089
GPR[SSUN]-1659859771089
-1821971816
GPR[ESUN]-1659859771180
GPR[SSUN]-1659859771180
-1821971816
GPR[SPVATF]-1659859771271
GPR[EPVATF]-1659859771284
GPR[SPS]-1659859771284
[196222] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.Series:314.
GPR[EPS]-1659859771403
GPR[ESUN]-1659859771403
GPR[SSUN]-1659859771403
-1821971816
GPR[SPVATF]-1659859771502
GPR[EPVATF]-1659859771518
GPR[SPS]-1659859771518
[196462] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.Series:313.
GPR[EPS]-1659859771643
GPR[SPVATF]-1659859771644
GPR[EPVATF]-1659859771657
GPR[SPS]-1659859771657
[196600] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation org.jfree.data.general.Series:313.
GPR[EPS]-1659859771781
GPR[ESUN]-1659859771782
[196610] INFO NoPol - ----INFORMATION----
[196722] INFO NoPol - Nb classes : 580
[196722] INFO NoPol - Nb methods : 6290
[196722] INFO NoPol - Nb Statements Analyzed : 89
[196722] INFO NoPol - Nb Statements with Angelic Value Found : 18
[196722] INFO NoPol - Nb inputs in SMT : 10
[196722] INFO NoPol - Nb SMT level: 5
[196723] INFO NoPol - Nb SMT components: [14] [== of arity: 2, != of arity: 2, < of arity: 2, <= of arity: 2, ! of arity: 1, || of arity: 2, && of arity: 2, == of arity: 2, != of arity: 2, < of arity: 2, <= of arity: 2, ! of arity: 1, || of arity: 2, && of arity: 2]
[196723] INFO NoPol -                   class java.lang.Boolean: 14
[196723] INFO NoPol - Nb variables in SMT : 28
[196723] INFO NoPol - NoPol Execution time : 196610ms
[196723] INFO NoPol - 
[196723] INFO NoPol - ----PATCH FOUND----
[196723] INFO NoPol - org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length() == org.jfree.data.time.TimeSeries.this.data.size()
[196784] INFO NoPol - Nb test that executes the patch: 4
[196784] INFO NoPol - org.jfree.data.time.TimeSeries:883: PRECONDITION
[196787] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -882,3 +882,5 @@
         if (end < start) {
-            throw new IllegalArgumentException("Requires start <= end.");
+            if (org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length() == org.jfree.data.time.TimeSeries.this.data.size()) {
+                throw new IllegalArgumentException("Requires start <= end.");
+            }
         }

[196788] INFO NoPol - endIndex < startIndex
[196848] INFO NoPol - Nb test that executes the patch: 4
[196848] INFO NoPol - org.jfree.data.time.TimeSeries:947: CONDITIONAL
[196852] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -946,3 +946,3 @@
         }
-        if (emptyRange) {
+        if (endIndex < startIndex) {
             TimeSeries copy = (TimeSeries) super.clone();

[196852] INFO NoPol - (endIndex < 0) || ((org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length()) != (org.jfree.data.time.TimeSeries.this.data.size()))
[196910] INFO NoPol - Nb test that executes the patch: 4
[196910] INFO NoPol - org.jfree.data.time.TimeSeries:944: CONDITIONAL
[196915] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -943,3 +943,3 @@
         }
-        if (endIndex < 0) {
+        if ((endIndex < 0) || ((org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length()) != (org.jfree.data.time.TimeSeries.this.data.size()))) {
             emptyRange = true;

[196915] INFO NoPol - org.jfree.data.time.TimeSeries.this.data.size() == org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length()
[196968] INFO NoPol - Nb test that executes the patch: 4
[196968] INFO NoPol - org.jfree.data.time.TimeSeries:942: PRECONDITION
[196973] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -941,3 +941,5 @@
             endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
+            if (org.jfree.data.time.TimeSeries.this.data.size() == org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length()) {
+                endIndex = endIndex - 1;    // so this is last item BEFORE end
+            }
         }

[196973] INFO NoPol - org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length() == org.jfree.data.time.TimeSeries.this.data.size()
[197025] INFO NoPol - Nb test that executes the patch: 4
[197025] INFO NoPol - org.jfree.data.time.TimeSeries:941: PRECONDITION
[197030] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -940,3 +940,5 @@
         if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
+            if (org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length() == org.jfree.data.time.TimeSeries.this.data.size()) {
+                endIndex = -(endIndex + 1); // this is first item AFTER end period
+            }
             endIndex = endIndex - 1;    // so this is last item BEFORE end

[197031] INFO NoPol - org.jfree.data.time.TimeSeries.this.data.size() == org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length()
[197075] INFO NoPol - Nb test that executes the patch: 4
[197075] INFO NoPol - org.jfree.data.time.TimeSeries:940: PRECONDITION
[197078] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -939,5 +939,7 @@
         int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
-            endIndex = -(endIndex + 1); // this is first item AFTER end period
-            endIndex = endIndex - 1;    // so this is last item BEFORE end
+        if (org.jfree.data.time.TimeSeries.this.data.size() == org.jfree.data.time.TimeSeries.DEFAULT_RANGE_DESCRIPTION.length()) {
+            if (endIndex < 0) {             // end period is not in original series
+                endIndex = -(endIndex + 1); // this is first item AFTER end period
+                endIndex = endIndex - 1;    // so this is last item BEFORE end
+            }
         }

[197079] INFO NoPol - (endIndex < 0) && ((2) != (org.jfree.data.time.TimeSeries.this.data.size()))
[197113] INFO NoPol - Nb test that executes the patch: 4
[197113] INFO NoPol - org.jfree.data.time.TimeSeries:940: CONDITIONAL
[197117] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -939,3 +939,3 @@
         int endIndex = getIndex(end);
-        if (endIndex < 0) {             // end period is not in original series
+        if ((endIndex < 0) && ((2) != (org.jfree.data.time.TimeSeries.this.data.size()))) {             // end period is not in original series
             endIndex = -(endIndex + 1); // this is first item AFTER end period

[197118] INFO NoPol - (org.jfree.data.time.TimeSeries.this.data.size() == 2) || (!((startIndex) != (org.jfree.data.time.TimeSeries.this.data.size())))
[197152] INFO NoPol - Nb test that executes the patch: 4
[197152] INFO NoPol - org.jfree.data.time.TimeSeries:935: CONDITIONAL
[197155] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -934,3 +934,3 @@
             startIndex = -(startIndex + 1);
-            if (startIndex == this.data.size()) {
+            if ((org.jfree.data.time.TimeSeries.this.data.size() == 2) || (!((startIndex) != (org.jfree.data.time.TimeSeries.this.data.size())))) {
                 emptyRange = true;  // start is after last data item

[197156] INFO NoPol - (2) != (org.jfree.data.time.TimeSeries.this.data.size())
[197190] INFO NoPol - Nb test that executes the patch: 6
[197190] INFO NoPol - org.jfree.data.time.TimeSeries:882: PRECONDITION
[197193] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -881,4 +881,6 @@
         }
-        if (end < start) {
-            throw new IllegalArgumentException("Requires start <= end.");
+        if ((2) != (org.jfree.data.time.TimeSeries.this.data.size())) {
+            if (end < start) {
+                throw new IllegalArgumentException("Requires start <= end.");
+            }
         }

[197193] INFO NoPol - ((org.jfree.data.time.TimeSeries.this.data.size()) != (2)) && (end < start)
[197227] INFO NoPol - Nb test that executes the patch: 6
[197227] INFO NoPol - org.jfree.data.time.TimeSeries:882: CONDITIONAL
[197230] INFO NoPol - --- a/source/org/jfree/data/time/TimeSeries.java
+++ b/source/org/jfree/data/time/TimeSeries.java
@@ -881,3 +881,3 @@
         }
-        if (end < start) {
+        if (((org.jfree.data.time.TimeSeries.this.data.size()) != (2)) && (end < start)) {
             throw new IllegalArgumentException("Requires start <= end.");

GPR[EFP]-1659859772791
PATCH
\n\nNode: host-44\n
\n\nDate: Sun 07 Aug 2022 01:09:33 AM PDT\n
End running Nopol Chart/9 results at /experiment_home///results/Nopol/Chart/9/seed_260/
Removing checked out dir script/workingdir/Nopol/Chart_9
GPR[SSLE]-1659859773710
GPR[ESLE]-1659859833713
