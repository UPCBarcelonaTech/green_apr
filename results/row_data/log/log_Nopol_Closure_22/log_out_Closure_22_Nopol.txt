Sleep 1m start
GPR[SSLI]-1659829368800
GPR[ESLI]-1659829428805
Running Nopol Closure 22b with approach: smt
Timezone: America/Los_Angeles
Seed 260
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/22/seed_260/
The file script/workingdir/Nopol/Closure_22 does not exist!
script/workingdir/Nopol/Closure_22
script/workingdir/Nopol/Closure_22
classpath:  script/workingdir/Nopol/Closure_22/build/classes:script/workingdir/Nopol/Closure_22/lib/args4j.jar:script/workingdir/Nopol/Closure_22/lib/guava.jar:script/workingdir/Nopol/Closure_22/lib/json.jar:script/workingdir/Nopol/Closure_22/lib/jsr305.jar:script/workingdir/Nopol/Closure_22/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_22/build/lib/rhino.jar:script/workingdir/Nopol/Closure_22/lib/ant.jar:script/workingdir/Nopol/Closure_22/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_22/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_22/lib/jarjar.jar:script/workingdir/Nopol/Closure_22/lib/junit.jar:script/workingdir/Nopol/Closure_22/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659829451663
GPR[ESLB]-1659829511669
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_22//build/classes:script/workingdir/Nopol/Closure_22//build/test:script/workingdir/Nopol/Closure_22/build/classes:script/workingdir/Nopol/Closure_22/lib/args4j.jar:script/workingdir/Nopol/Closure_22/lib/guava.jar:script/workingdir/Nopol/Closure_22/lib/json.jar:script/workingdir/Nopol/Closure_22/lib/jsr305.jar:script/workingdir/Nopol/Closure_22/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_22/build/lib/rhino.jar:script/workingdir/Nopol/Closure_22/lib/ant.jar:script/workingdir/Nopol/Closure_22/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_22/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_22/lib/jarjar.jar:script/workingdir/Nopol/Closure_22/lib/junit.jar:script/workingdir/Nopol/Closure_22/build/test
Node: host-49
Date init: Sat 06 Aug 2022 04:45:11 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_22/src]
[0] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_22/build/classes/, file:script/workingdir/Nopol/Closure_22/build/test/, file:script/workingdir/Nopol/Closure_22/build/classes/, file:script/workingdir/Nopol/Closure_22/lib/args4j.jar, file:script/workingdir/Nopol/Closure_22/lib/guava.jar, file:script/workingdir/Nopol/Closure_22/lib/json.jar, file:script/workingdir/Nopol/Closure_22/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_22/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_22/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_22/lib/ant.jar, file:script/workingdir/Nopol/Closure_22/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_22/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_22/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_22/lib/junit.jar, file:script/workingdir/Nopol/Closure_22/build/test/]
[0] INFO NoPol - Statement type: PRE_THEN_COND
[0] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[2] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_22/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/22/seed_260/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[7] INFO NoPol - Free memory: 1 GB
[7] INFO NoPol - Maximum memory: 7 GB
[7] INFO NoPol - Total memory available to JVM: 1 GB
[8] INFO NoPol - Java version: 1.8.0_45
[9] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[9] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659829517224
GPR[ESUP]-1659829517224
GPR[SFL]-1659829517224
GPR[EFL]-1659829559690
GPR[SFP]-1659829559690
GPR[SSUN]-1659829561526
-283827935
GPR[SPVATF]-1659829562365
GPR[EPVATF]-1659829562401
[49809] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829562401
GPR[SSUN]-1659829562402
1870456228
GPR[SPVATF]-1659829562649
GPR[EPVATF]-1659829562883
GPR[SPS]-1659829562883
[51641] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:115.
GPR[EPS]-1659829564233
GPR[ESUN]-1659829564233
GPR[SSUN]-1659829564233
80988634
GPR[ESUN]-1659829564428
GPR[SSUN]-1659829564428
-1966087783
GPR[ESUN]-1659829564643
GPR[SSUN]-1659829564643
-1966087783
GPR[SPVATF]-1659829564856
GPR[EPVATF]-1659829564885
[52294] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829564886
GPR[SSUN]-1659829564886
-1659631726
GPR[ESUN]-1659829565093
GPR[SSUN]-1659829565093
130004992
GPR[ESUN]-1659829565291
GPR[SSUN]-1659829565291
130004992
GPR[SPVATF]-1659829565485
GPR[EPVATF]-1659829565515
[52923] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829565515
GPR[SSUN]-1659829565515
130004992
GPR[ESUN]-1659829565710
GPR[SSUN]-1659829565710
-1966087783
GPR[SPVATF]-1659829565923
GPR[EPVATF]-1659829565946
[53354] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829565946
GPR[SSUN]-1659829565946
-1966087783
GPR[SPVATF]-1659829566160
GPR[EPVATF]-1659829566182
[53590] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829566182
GPR[SSUN]-1659829566182
1870456228
GPR[SPVATF]-1659829566434
GPR[EPVATF]-1659829566656
GPR[SPS]-1659829566656
[57175] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:122.
GPR[EPS]-1659829569767
GPR[SPVATF]-1659829569768
GPR[EPVATF]-1659829569990
GPR[SPS]-1659829569990
[57970] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:122.
GPR[EPS]-1659829570562
GPR[ESUN]-1659829570562
GPR[SSUN]-1659829570563
1870456228
GPR[SPVATF]-1659829570805
GPR[EPVATF]-1659829571030
GPR[SPS]-1659829571030
GPR[EPS]-1659829571976
GPR[SPVATR]-1659829571977
[59385] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CheckSideEffects:117: PRECONDITION com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0
[59742] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0" is working
GPR[EPVATR]-1659829572550
[59958] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659829572551
[59966] INFO NoPol - --- a/src/com/google/javascript/jscomp/CheckSideEffects.java
+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java
@@ -116,3 +116,5 @@
           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
-            return;
+            if (com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0) {
+              return;
+            }
           else

Saving patch at /experiment_home///results/Nopol/Closure/22/seed_260/patch_55334_1ts_1659829572558.diff
GPR[ESUN]-1659829572560
GPR[SSUN]-1659829572560
1870456228
GPR[SPVATF]-1659829572806
GPR[EPVATF]-1659829573034
GPR[SPS]-1659829573034
GPR[EPS]-1659829573941
GPR[SPVATR]-1659829573941
[61349] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CheckSideEffects:116: PRECONDITION com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0
[61705] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0" is working
GPR[EPVATR]-1659829574512
[61920] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659829574512
[61922] INFO NoPol - --- a/src/com/google/javascript/jscomp/CheckSideEffects.java
+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java
@@ -115,6 +115,8 @@
             continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
+          if (com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0) {
+            if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
             return;
-          else
+            else
             break;
+          }
         }

Saving patch at /experiment_home///results/Nopol/Closure/22/seed_260/patch_57290_2ts_1659829574514.diff
GPR[SPVATF]-1659829574515
GPR[EPVATF]-1659829574740
GPR[SPS]-1659829574740
GPR[EPS]-1659829576248
GPR[SPVATR]-1659829576248
[63656] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CheckSideEffects:116: CONDITIONAL com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0
[64009] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0" is working
GPR[EPVATR]-1659829576795
[64203] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659829576796
[64205] INFO NoPol - --- a/src/com/google/javascript/jscomp/CheckSideEffects.java
+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java
@@ -115,6 +115,6 @@
             continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
-            return;
+          if (com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0)
+          return;
           else
-            break;
+          break;
         }

Saving patch at /experiment_home///results/Nopol/Closure/22/seed_260/patch_59573_3ts_1659829576797.diff
GPR[ESUN]-1659829576797
GPR[SSUN]-1659829576797
1870456228
GPR[SPVATF]-1659829577033
GPR[EPVATF]-1659829577251
GPR[SPS]-1659829577251
[65201] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:114.
GPR[EPS]-1659829577793
GPR[SPVATF]-1659829577794
GPR[EPVATF]-1659829578011
GPR[SPS]-1659829578011
GPR[EPS]-1659829578909
GPR[SPVATR]-1659829578909
[66317] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CheckSideEffects:114: CONDITIONAL com.google.javascript.jscomp.CheckSideEffects.this.problemNodes!=null
[66672] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.CheckSideEffects.this.problemNodes!=null" is working
GPR[EPVATR]-1659829579472
[66880] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659829579472
[66881] INFO NoPol - --- a/src/com/google/javascript/jscomp/CheckSideEffects.java
+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java
@@ -113,4 +113,4 @@
           int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
-            continue;
+          if (com.google.javascript.jscomp.CheckSideEffects.this.problemNodes!=null)
+          continue;
           if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)

Saving patch at /experiment_home///results/Nopol/Closure/22/seed_260/patch_62249_4ts_1659829579473.diff
GPR[ESUN]-1659829579474
GPR[SSUN]-1659829579474
1870456228
GPR[ESUN]-1659829579718
GPR[SSUN]-1659829579718
1870456228
GPR[SPVATF]-1659829579945
GPR[EPVATF]-1659829580169
GPR[SPS]-1659829580169
GPR[EPS]-1659829580997
GPR[SPVATR]-1659829580997
[68405] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CheckSideEffects:112: PRECONDITION com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0
[68755] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0" is working
GPR[EPVATR]-1659829581548
[68956] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659829581548
[68957] INFO NoPol - --- a/src/com/google/javascript/jscomp/CheckSideEffects.java
+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java
@@ -111,10 +111,12 @@
       if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
+        if (com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0) {
+          for (Node an : parent.getAncestors()) {
+            int ancestorType = an.getType();
+            if (ancestorType == Token.COMMA)
             continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
+            if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
             return;
-          else
+            else
             break;
+          }
         }

Saving patch at /experiment_home///results/Nopol/Closure/22/seed_260/patch_64325_5ts_1659829581549.diff
GPR[ESUN]-1659829581550
GPR[SSUN]-1659829581550
1870456228
GPR[SPVATF]-1659829581811
GPR[EPVATF]-1659829582036
GPR[SPS]-1659829582036
GPR[EPS]-1659829582920
GPR[SPVATR]-1659829582920
[70328] INFO TestPatch - Applying patch: com.google.javascript.jscomp.CheckSideEffects:111: PRECONDITION com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0
[70661] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0" is working
GPR[EPVATR]-1659829583452
[70860] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659829583452
[70861] INFO NoPol - --- a/src/com/google/javascript/jscomp/CheckSideEffects.java
+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java
@@ -110,11 +110,13 @@
     // be attached to the name. This check should not complain about it.
-      if (n == parent.getLastChild()) {
-        for (Node an : parent.getAncestors()) {
-          int ancestorType = an.getType();
-          if (ancestorType == Token.COMMA)
+      if (com.google.javascript.jscomp.CheckSideEffects.PROTECTOR_FN.length()==0) {
+        if (n == parent.getLastChild()) {
+          for (Node an : parent.getAncestors()) {
+            int ancestorType = an.getType();
+            if (ancestorType == Token.COMMA)
             continue;
-          if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
+            if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
             return;
-          else
+            else
             break;
+          }
         }

Saving patch at /experiment_home///results/Nopol/Closure/22/seed_260/patch_66229_6ts_1659829583453.diff
GPR[SPVATF]-1659829583454
GPR[EPVATF]-1659829583669
GPR[SPS]-1659829583669
GPR[EPS]-1659829594003
GPR[ESUN]-1659829594003
GPR[SSUN]-1659829594003
1870456228
GPR[SPVATF]-1659829595780
GPR[EPVATF]-1659829596362
GPR[SPS]-1659829596362
[84449] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:103.
GPR[EPS]-1659829597042
GPR[SPVATF]-1659829597042
GPR[EPVATF]-1659829597248
GPR[SPS]-1659829597248
[85176] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:103.
GPR[EPS]-1659829597768
GPR[ESUN]-1659829597768
GPR[SSUN]-1659829597768
1870456228
GPR[ESUN]-1659829598005
GPR[SSUN]-1659829598005
1870456228
GPR[SPVATF]-1659829598235
GPR[EPVATF]-1659829599112
GPR[SPS]-1659829599112
[87092] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:141.
GPR[EPS]-1659829599684
GPR[ESUN]-1659829599684
GPR[SSUN]-1659829599684
890942016
GPR[ESUN]-1659829599905
GPR[SSUN]-1659829599905
890942016
GPR[SPVATF]-1659829600106
GPR[EPVATF]-1659829600125
[87534] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829600126
GPR[SSUN]-1659829600126
890942016
GPR[SPVATF]-1659829600331
GPR[EPVATF]-1659829600351
[87760] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829600352
GPR[EPVATF]-1659829600371
[87779] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829600371
GPR[SSUN]-1659829600371
890942016
GPR[ESUN]-1659829600582
GPR[SSUN]-1659829600582
890942016
GPR[ESUN]-1659829600775
GPR[SSUN]-1659829600775
-1966087783
GPR[ESUN]-1659829600964
GPR[SSUN]-1659829600964
-1966087783
GPR[SPVATF]-1659829601157
GPR[EPVATF]-1659829601174
[88583] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829601175
GPR[EPVATF]-1659829601193
[88601] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829601193
GPR[SSUN]-1659829601193
-1966087783
GPR[ESUN]-1659829601404
GPR[SSUN]-1659829601404
-1966087783
GPR[SPVATF]-1659829601610
GPR[EPVATF]-1659829601629
[89037] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829601630
GPR[EPVATF]-1659829601646
[89054] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829601647
GPR[SSUN]-1659829601647
-1966087783
GPR[ESUN]-1659829601862
GPR[SSUN]-1659829601862
-1966087783
GPR[ESUN]-1659829602083
GPR[SSUN]-1659829602083
-1966087783
GPR[ESUN]-1659829602289
GPR[SSUN]-1659829602289
1613130706
GPR[ESUN]-1659829602502
GPR[SSUN]-1659829602502
1613130706
GPR[ESUN]-1659829602719
GPR[SSUN]-1659829602719
1613130706
GPR[SPVATF]-1659829602945
GPR[EPVATF]-1659829603140
[90548] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829603140
GPR[SSUN]-1659829603140
1187751237
GPR[ESUN]-1659829603452
GPR[SSUN]-1659829603452
1187751237
GPR[SPVATF]-1659829603765
GPR[EPVATF]-1659829603966
GPR[SPS]-1659829603966
[92201] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3124.
GPR[EPS]-1659829604793
GPR[SPVATF]-1659829604793
GPR[EPVATF]-1659829605004
GPR[SPS]-1659829605004
[93174] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3124.
GPR[EPS]-1659829605766
GPR[ESUN]-1659829605766
GPR[SSUN]-1659829605766
1187751237
GPR[ESUN]-1659829606085
GPR[SSUN]-1659829606086
234947553
GPR[ESUN]-1659829606299
GPR[SSUN]-1659829606299
234947553
GPR[SPVATF]-1659829606485
GPR[EPVATF]-1659829606500
[93908] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829606501
GPR[EPVATF]-1659829606515
[93923] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829606515
GPR[SSUN]-1659829606516
234947553
GPR[ESUN]-1659829606711
GPR[SSUN]-1659829606711
234947553
GPR[SPVATF]-1659829606930
GPR[EPVATF]-1659829606947
[94355] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829606947
GPR[EPVATF]-1659829606962
[94370] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829606962
GPR[SSUN]-1659829606962
234947553
GPR[SPVATF]-1659829607190
GPR[EPVATF]-1659829607210
[94618] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829607211
GPR[SSUN]-1659829607211
234947553
GPR[ESUN]-1659829607427
GPR[SSUN]-1659829607427
234947553
GPR[ESUN]-1659829607629
GPR[SSUN]-1659829607629
234947553
GPR[SPVATF]-1659829607820
GPR[EPVATF]-1659829607834
[95242] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829607834
GPR[SSUN]-1659829607834
234947553
GPR[SPVATF]-1659829608022
GPR[EPVATF]-1659829608037
[95445] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829608038
GPR[SSUN]-1659829608038
234947553
GPR[SPVATF]-1659829608232
GPR[EPVATF]-1659829608250
[95658] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829608251
GPR[SSUN]-1659829608251
234947553
GPR[ESUN]-1659829608463
GPR[SSUN]-1659829608463
234947553
GPR[ESUN]-1659829608664
GPR[SSUN]-1659829608664
234947553
GPR[SPVATF]-1659829608867
GPR[EPVATF]-1659829608884
[96292] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829608884
GPR[SSUN]-1659829608884
234947553
GPR[SPVATF]-1659829609101
GPR[EPVATF]-1659829609117
[96525] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829609117
GPR[SSUN]-1659829609117
234947553
GPR[ESUN]-1659829609319
GPR[SSUN]-1659829609319
234947553
GPR[SPVATF]-1659829609517
GPR[EPVATF]-1659829609535
[96943] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829609535
GPR[SSUN]-1659829609535
234947553
GPR[SPVATF]-1659829609780
GPR[EPVATF]-1659829609796
[97204] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829609796
GPR[SSUN]-1659829609796
234947553
GPR[ESUN]-1659829610026
GPR[SSUN]-1659829610026
890942016
GPR[SPVATF]-1659829610247
GPR[EPVATF]-1659829610267
[97675] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829610267
GPR[EPVATF]-1659829610286
[97694] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829610286
GPR[SSUN]-1659829610286
890942016
GPR[SPVATF]-1659829610505
GPR[EPVATF]-1659829610524
[97932] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829610524
GPR[SSUN]-1659829610524
890942016
GPR[ESUN]-1659829610732
GPR[SSUN]-1659829610732
890942016
GPR[SPVATF]-1659829610937
GPR[EPVATF]-1659829610960
[98368] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829610960
GPR[SSUN]-1659829610960
890942016
GPR[SPVATF]-1659829611177
GPR[EPVATF]-1659829611198
[98606] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829611198
GPR[EPVATF]-1659829611216
[98624] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829611216
GPR[SSUN]-1659829611217
890942016
GPR[SPVATF]-1659829611423
GPR[EPVATF]-1659829611444
[98852] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829611444
GPR[SSUN]-1659829611444
890942016
GPR[SPVATF]-1659829611671
GPR[EPVATF]-1659829611690
[99099] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829611691
GPR[EPVATF]-1659829611711
[99119] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829611711
GPR[SSUN]-1659829611711
890942016
GPR[ESUN]-1659829611933
GPR[SSUN]-1659829611933
890942016
GPR[SPVATF]-1659829612138
GPR[EPVATF]-1659829612157
[99565] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829612157
GPR[SSUN]-1659829612157
890942016
GPR[SPVATF]-1659829612371
GPR[EPVATF]-1659829612392
[99801] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829612393
GPR[SSUN]-1659829612393
890942016
GPR[SPVATF]-1659829612609
GPR[EPVATF]-1659829612628
[100036] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829612628
GPR[SSUN]-1659829612628
890942016
GPR[ESUN]-1659829612835
GPR[SSUN]-1659829612835
1613130706
GPR[SPVATF]-1659829613087
GPR[EPVATF]-1659829613287
[100695] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829613287
GPR[EPVATF]-1659829613483
[100891] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829613483
GPR[SSUN]-1659829613483
1613130706
GPR[SPVATF]-1659829613720
GPR[EPVATF]-1659829613916
[101324] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829613916
GPR[SSUN]-1659829613916
1613130706
GPR[SPVATF]-1659829614148
GPR[EPVATF]-1659829614344
[101752] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829614344
GPR[EPVATF]-1659829614535
[101943] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829614536
GPR[SSUN]-1659829614536
1613130706
GPR[SPVATF]-1659829614778
GPR[EPVATF]-1659829614961
[102369] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829614962
GPR[EPVATF]-1659829615145
[102553] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829615145
GPR[SSUN]-1659829615145
1613130706
GPR[SPVATF]-1659829615370
GPR[EPVATF]-1659829615570
[102978] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829615570
GPR[EPVATF]-1659829615778
[103186] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829615778
GPR[SSUN]-1659829615778
1613130706
GPR[ESUN]-1659829616020
GPR[SSUN]-1659829616020
1613130706
GPR[ESUN]-1659829616251
GPR[SSUN]-1659829616251
1613130706
GPR[ESUN]-1659829616501
GPR[SSUN]-1659829616501
1613130706
GPR[ESUN]-1659829616737
GPR[SSUN]-1659829616737
1613130706
GPR[SPVATF]-1659829616986
GPR[EPVATF]-1659829617196
[104604] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829617197
GPR[EPVATF]-1659829617380
[104788] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829617380
GPR[SSUN]-1659829617380
1613130706
GPR[SPVATF]-1659829617621
GPR[EPVATF]-1659829617821
[105229] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829617821
GPR[SSUN]-1659829617821
1613130706
GPR[ESUN]-1659829618070
GPR[SSUN]-1659829618070
1613130706
GPR[SPVATF]-1659829618319
GPR[EPVATF]-1659829618509
[105917] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829618510
GPR[EPVATF]-1659829618717
[106125] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829618717
GPR[SSUN]-1659829618718
1613130706
GPR[ESUN]-1659829618960
GPR[SSUN]-1659829618960
1613130706
GPR[SPVATF]-1659829619216
GPR[EPVATF]-1659829619422
[106830] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829619422
GPR[EPVATF]-1659829619636
[107044] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829619636
GPR[SSUN]-1659829619636
-1966087783
GPR[ESUN]-1659829619851
GPR[SSUN]-1659829619851
-1966087783
GPR[SPVATF]-1659829620067
GPR[EPVATF]-1659829620091
[107499] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829620091
GPR[EPVATF]-1659829620112
[107521] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829620113
GPR[SSUN]-1659829620113
-1966087783
GPR[SPVATF]-1659829620331
GPR[EPVATF]-1659829620357
[107765] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829620357
GPR[SSUN]-1659829620357
1870456228
GPR[SPVATF]-1659829620573
GPR[EPVATF]-1659829620789
GPR[SPS]-1659829620789
[108760] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:91.
GPR[EPS]-1659829621352
GPR[ESUN]-1659829621352
GPR[SSUN]-1659829621352
1870456228
GPR[SPVATF]-1659829621596
GPR[EPVATF]-1659829621818
GPR[SPS]-1659829621818
[110361] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:143.
GPR[EPS]-1659829622953
GPR[ESUN]-1659829622953
GPR[SSUN]-1659829622953
1870456228
GPR[ESUN]-1659829623213
GPR[SSUN]-1659829623213
1870456228
GPR[SPVATF]-1659829623466
GPR[EPVATF]-1659829623665
GPR[SPS]-1659829623665
[111673] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:187.
GPR[EPS]-1659829624265
GPR[ESUN]-1659829624265
GPR[SSUN]-1659829624265
1870456228
GPR[SPVATF]-1659829624506
GPR[EPVATF]-1659829624726
GPR[SPS]-1659829624726
[112691] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:186.
GPR[EPS]-1659829625283
GPR[ESUN]-1659829625284
GPR[SSUN]-1659829625284
1870456228
GPR[ESUN]-1659829625530
GPR[SSUN]-1659829625530
1870456228
GPR[SPVATF]-1659829625770
GPR[EPVATF]-1659829625984
GPR[SPS]-1659829625984
[113959] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:184.
GPR[EPS]-1659829626551
GPR[ESUN]-1659829626551
GPR[SSUN]-1659829626551
1870456228
GPR[SPVATF]-1659829626799
GPR[EPVATF]-1659829627018
GPR[SPS]-1659829627018
[114959] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:183.
GPR[EPS]-1659829627551
GPR[ESUN]-1659829627551
GPR[SSUN]-1659829627551
1870456228
GPR[ESUN]-1659829627787
GPR[SSUN]-1659829627787
1870456228
GPR[ESUN]-1659829628037
GPR[SSUN]-1659829628037
1870456228
GPR[SPVATF]-1659829628275
GPR[EPVATF]-1659829628507
GPR[SPS]-1659829628507
[116454] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:179.
GPR[EPS]-1659829629046
GPR[ESUN]-1659829629046
GPR[SSUN]-1659829629046
1870456228
GPR[ESUN]-1659829629293
GPR[SSUN]-1659829629293
1870456228
GPR[SPVATF]-1659829629538
GPR[EPVATF]-1659829629747
GPR[SPS]-1659829629747
[117708] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:173.
GPR[EPS]-1659829630300
GPR[ESUN]-1659829630300
GPR[SSUN]-1659829630300
1870456228
GPR[ESUN]-1659829630548
GPR[SSUN]-1659829630548
1870456228
GPR[SPVATF]-1659829630799
GPR[EPVATF]-1659829631009
GPR[SPS]-1659829631009
[118952] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:171.
GPR[EPS]-1659829631544
GPR[ESUN]-1659829631544
GPR[SSUN]-1659829631544
1870456228
GPR[SPVATF]-1659829631790
GPR[EPVATF]-1659829632008
GPR[SPS]-1659829632008
[119910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:170.
GPR[EPS]-1659829632502
GPR[ESUN]-1659829632502
GPR[SSUN]-1659829632502
1870456228
GPR[SPVATF]-1659829632746
GPR[EPVATF]-1659829632944
GPR[SPS]-1659829632944
[120866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:169.
GPR[EPS]-1659829633458
GPR[ESUN]-1659829633458
GPR[SSUN]-1659829633458
1870456228
GPR[ESUN]-1659829633698
GPR[SSUN]-1659829633698
1870456228
GPR[SPVATF]-1659829633941
GPR[EPVATF]-1659829634174
GPR[SPS]-1659829634174
[122093] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:167.
GPR[EPS]-1659829634685
GPR[ESUN]-1659829634685
GPR[SSUN]-1659829634685
1870456228
GPR[ESUN]-1659829634925
GPR[SSUN]-1659829634925
1870456228
GPR[SPVATF]-1659829635167
GPR[EPVATF]-1659829635379
GPR[SPS]-1659829635379
[123297] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:165.
GPR[EPS]-1659829635889
GPR[ESUN]-1659829635889
GPR[SSUN]-1659829635889
1870456228
GPR[SPVATF]-1659829636118
GPR[EPVATF]-1659829636328
GPR[SPS]-1659829636328
[124278] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:164.
GPR[EPS]-1659829636870
GPR[ESUN]-1659829636870
GPR[SSUN]-1659829636870
-1966087783
GPR[SPVATF]-1659829637072
GPR[EPVATF]-1659829637098
[124507] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829637099
GPR[EPVATF]-1659829637123
[124531] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829637123
GPR[SSUN]-1659829637123
-1966087783
GPR[SPVATF]-1659829637351
GPR[EPVATF]-1659829637377
[124785] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829637377
GPR[EPVATF]-1659829637404
[124812] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829637404
GPR[SSUN]-1659829637404
-1966087783
GPR[SPVATF]-1659829637616
GPR[EPVATF]-1659829637643
[125051] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829637643
GPR[EPVATF]-1659829637671
[125079] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829637671
GPR[SSUN]-1659829637671
-1966087783
GPR[ESUN]-1659829637881
GPR[SSUN]-1659829637881
-1966087783
GPR[ESUN]-1659829638082
GPR[SSUN]-1659829638082
-1966087783
GPR[SPVATF]-1659829638289
GPR[EPVATF]-1659829638317
[125725] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829638317
GPR[EPVATF]-1659829638342
[125750] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829638342
GPR[SSUN]-1659829638342
-1966087783
GPR[SPVATF]-1659829638559
GPR[EPVATF]-1659829638586
[125994] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829638586
GPR[EPVATF]-1659829638611
[126019] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829638611
GPR[SSUN]-1659829638611
-1966087783
GPR[ESUN]-1659829638823
GPR[SSUN]-1659829638823
-1966087783
GPR[SPVATF]-1659829639033
GPR[EPVATF]-1659829639059
[126467] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829639059
GPR[SSUN]-1659829639059
-1966087783
GPR[SPVATF]-1659829639281
GPR[EPVATF]-1659829639308
[126716] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829639308
GPR[SSUN]-1659829639308
-1966087783
GPR[ESUN]-1659829639521
GPR[SSUN]-1659829639521
-1966087783
GPR[SPVATF]-1659829639716
GPR[EPVATF]-1659829639742
[127150] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829639742
GPR[SSUN]-1659829639742
-1966087783
GPR[ESUN]-1659829639954
GPR[SSUN]-1659829639954
-1966087783
GPR[ESUN]-1659829640164
GPR[SSUN]-1659829640164
-1966087783
GPR[SPVATF]-1659829640370
GPR[EPVATF]-1659829640394
[127802] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829640394
GPR[SSUN]-1659829640394
-1966087783
GPR[SPVATF]-1659829640628
GPR[EPVATF]-1659829640655
[128063] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829640655
GPR[SSUN]-1659829640655
-1966087783
GPR[SPVATF]-1659829640870
GPR[EPVATF]-1659829640889
[128297] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829640889
GPR[SSUN]-1659829640889
-1966087783
GPR[SPVATF]-1659829641094
GPR[EPVATF]-1659829641113
[128521] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829641113
GPR[SSUN]-1659829641113
-1966087783
GPR[SPVATF]-1659829641327
GPR[EPVATF]-1659829641347
[128755] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829641347
GPR[SSUN]-1659829641347
-1966087783
GPR[SPVATF]-1659829641558
GPR[EPVATF]-1659829641578
[128987] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829641579
GPR[SSUN]-1659829641579
-1966087783
GPR[SPVATF]-1659829641794
GPR[EPVATF]-1659829641814
[129222] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829641814
GPR[SSUN]-1659829641814
-1966087783
GPR[SPVATF]-1659829642034
GPR[EPVATF]-1659829642058
[129466] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829642058
GPR[SSUN]-1659829642058
-1966087783
GPR[SPVATF]-1659829642575
GPR[EPVATF]-1659829642594
[130002] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829642594
GPR[EPVATF]-1659829642614
[130022] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829642614
GPR[SSUN]-1659829642614
-1966087783
GPR[ESUN]-1659829642842
GPR[SSUN]-1659829642842
1187751237
GPR[ESUN]-1659829643157
GPR[SSUN]-1659829643157
1870456228
GPR[SPVATF]-1659829643424
GPR[EPVATF]-1659829643646
GPR[SPS]-1659829643646
[131604] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:142.
GPR[EPS]-1659829644196
GPR[SPVATF]-1659829644196
GPR[EPVATF]-1659829644440
GPR[SPS]-1659829644440
[132402] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:142.
GPR[EPS]-1659829644994
GPR[ESUN]-1659829644994
GPR[SSUN]-1659829644994
-132053243
GPR[SPVATF]-1659829645214
GPR[EPVATF]-1659829645236
[132644] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829645236
GPR[SSUN]-1659829645236
-132053243
GPR[SPVATF]-1659829645450
GPR[EPVATF]-1659829645471
[132879] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829645471
GPR[SSUN]-1659829645471
-132053243
GPR[SPVATF]-1659829645675
GPR[EPVATF]-1659829645694
[133102] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829645694
GPR[SSUN]-1659829645694
1870456228
GPR[SPVATF]-1659829645941
GPR[EPVATF]-1659829646156
GPR[SPS]-1659829646156
[134090] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:152.
GPR[EPS]-1659829646682
GPR[ESUN]-1659829646682
GPR[SSUN]-1659829646682
1870456228
GPR[SPVATF]-1659829646923
GPR[EPVATF]-1659829647146
GPR[SPS]-1659829647146
[135089] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:151.
GPR[EPS]-1659829647681
GPR[SPVATF]-1659829647682
GPR[EPVATF]-1659829648585
GPR[SPS]-1659829648585
[136524] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:151.
GPR[EPS]-1659829649116
GPR[ESUN]-1659829649116
GPR[SSUN]-1659829649116
1870456228
GPR[SPVATF]-1659829649366
GPR[EPVATF]-1659829649582
GPR[SPS]-1659829649582
[137516] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:147.
GPR[EPS]-1659829650108
GPR[ESUN]-1659829650108
GPR[SSUN]-1659829650108
1870456228
GPR[SPVATF]-1659829650347
GPR[EPVATF]-1659829650542
GPR[SPS]-1659829650542
[138475] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:140.
GPR[EPS]-1659829651067
GPR[SPVATF]-1659829651068
GPR[EPVATF]-1659829651285
GPR[SPS]-1659829651285
[139232] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:140.
GPR[EPS]-1659829651824
GPR[ESUN]-1659829651824
GPR[SSUN]-1659829651824
1870456228
GPR[ESUN]-1659829652056
GPR[SSUN]-1659829652056
1870456228
GPR[SPVATF]-1659829652307
GPR[EPVATF]-1659829652528
GPR[SPS]-1659829652528
[140506] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:136.
GPR[EPS]-1659829653098
GPR[SPVATF]-1659829653098
GPR[EPVATF]-1659829653311
GPR[SPS]-1659829653311
[141237] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:136.
GPR[EPS]-1659829653829
GPR[ESUN]-1659829653829
GPR[SSUN]-1659829653829
-132053243
GPR[SPVATF]-1659829654045
GPR[EPVATF]-1659829654066
[141474] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829654066
GPR[EPVATF]-1659829654084
[141493] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829654085
GPR[SSUN]-1659829654085
-132053243
GPR[ESUN]-1659829654298
GPR[SSUN]-1659829654298
-132053243
GPR[ESUN]-1659829654514
GPR[SSUN]-1659829654514
-132053243
GPR[SPVATF]-1659829654731
GPR[EPVATF]-1659829654750
[142158] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829654751
GPR[EPVATF]-1659829654769
[142177] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829654769
GPR[SSUN]-1659829654769
-132053243
GPR[ESUN]-1659829654975
GPR[SSUN]-1659829654975
-132053243
GPR[ESUN]-1659829655179
GPR[SSUN]-1659829655179
-132053243
GPR[ESUN]-1659829655390
GPR[SSUN]-1659829655391
-132053243
GPR[SPVATF]-1659829655609
GPR[EPVATF]-1659829655627
[143035] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829655627
GPR[EPVATF]-1659829655648
[143056] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829655648
GPR[SSUN]-1659829655648
-132053243
GPR[SPVATF]-1659829655855
GPR[EPVATF]-1659829655876
[143284] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829655876
GPR[SSUN]-1659829655876
1870456228
GPR[SPVATF]-1659829656135
GPR[EPVATF]-1659829656342
GPR[SPS]-1659829656342
[144298] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:134.
GPR[EPS]-1659829656890
GPR[SPVATF]-1659829656891
GPR[EPVATF]-1659829657092
GPR[SPS]-1659829657092
[144994] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:134.
GPR[EPS]-1659829657586
GPR[ESUN]-1659829657586
GPR[SSUN]-1659829657586
-132053243
GPR[SPVATF]-1659829657790
GPR[EPVATF]-1659829657809
[145217] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829657809
GPR[SSUN]-1659829657809
-132053243
GPR[SPVATF]-1659829658010
GPR[EPVATF]-1659829658028
[145436] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829658028
GPR[SSUN]-1659829658028
-132053243
GPR[SPVATF]-1659829658230
GPR[EPVATF]-1659829658249
[145658] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829658250
GPR[EPVATF]-1659829658270
[145678] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829658270
GPR[SSUN]-1659829658270
-1251822497
GPR[SPVATF]-1659829658466
GPR[EPVATF]-1659829658671
GPR[SPS]-1659829658671
[146338] ERROR ConstraintModelBuilder - Unable to compile the change: 
public final class JSDocInfoBuilder {
    private com.google.javascript.rhino.JSDocInfo currentInfo;

    private boolean populated = false;

    private boolean parseDocumentation = false;

    private com.google.javascript.rhino.JSDocInfo.Marker currentMarker = null;

    public JSDocInfoBuilder(boolean parseDocumentation) {
        this.currentInfo = new com.google.javascript.rhino.JSDocInfo(parseDocumentation);
        this.parseDocumentation = parseDocumentation;
    }

    public void recordOriginalCommentString(java.lang.String sourceComment) {
        if (parseDocumentation) {
            currentInfo.setOriginalCommentString(sourceComment);
        }
    }

    public boolean shouldParseDocumentation() {
        return parseDocumentation;
    }

    public boolean isPopulated() {
        return populated;
    }

    public boolean isPopulatedWithFileOverview() {
        return isPopulated() && ((currentInfo.hasFileOverview() || currentInfo.isExterns()) || currentInfo.isNoCompile());
    }

    public boolean isDescriptionRecorded() {
        return currentInfo.getDescription() != null;
    }

    public com.google.javascript.rhino.JSDocInfo build(com.google.javascript.rhino.Node associatedNode) {
        if (populated) {
            com.google.javascript.rhino.JSDocInfo built = currentInfo;
            built.setAssociatedNode(associatedNode);
            com.google.javascript.rhino.JSDocInfoBuilder.populateDefaults(built);
            populated = false;
            currentInfo = new com.google.javascript.rhino.JSDocInfo(this.parseDocumentation);
            return built;
        } else {
            return null;
        }
    }

    private static void populateDefaults(com.google.javascript.rhino.JSDocInfo info) {
        if (info.getVisibility() == null) {
            info.setVisibility(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED);
        }
    }

    public void markAnnotation(java.lang.String annotation, int lineno, int charno) {
        com.google.javascript.rhino.JSDocInfo.Marker marker = currentInfo.addMarker();
        if (marker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(annotation);
            position.setPositionInformation(lineno, charno, lineno, charno + annotation.length());
            marker.setAnnotation(position);
            populated = true;
        }
        currentMarker = marker;
    }

    public void markText(java.lang.String text, int startLineno, int startCharno, int endLineno, int endCharno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.StringPosition position = new com.google.javascript.rhino.JSDocInfo.StringPosition();
            position.setItem(text);
            position.setPositionInformation(startLineno, startCharno, endLineno, endCharno);
            currentMarker.setDescription(position);
        }
    }

    public void markTypeNode(com.google.javascript.rhino.Node typeNode, int lineno, int startCharno, int endLineno, int endCharno, boolean hasLC) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TypePosition position = new com.google.javascript.rhino.JSDocInfo.TypePosition();
            position.setItem(typeNode);
            position.setHasBrackets(hasLC);
            position.setPositionInformation(lineno, startCharno, endLineno, endCharno);
            currentMarker.setType(position);
        }
    }

    @java.lang.Deprecated
    public void markName(java.lang.String name, int lineno, int charno) {
        markName(name, null, lineno, charno);
    }

    public void markName(java.lang.String name, com.google.javascript.rhino.jstype.StaticSourceFile file, int lineno, int charno) {
        if (currentMarker != null) {
            com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition position = new com.google.javascript.rhino.JSDocInfo.TrimmedStringPosition();
            position.setItem(name);
            position.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setName(position);
            com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodePos = new com.google.javascript.rhino.JSDocInfo.NamePosition();
            com.google.javascript.rhino.Node node = com.google.javascript.rhino.Node.newString(com.google.javascript.rhino.Token.NAME, name, lineno, charno);
            node.setLength(name.length());
            node.setStaticSourceFile(file);
            nodePos.setItem(node);
            nodePos.setPositionInformation(lineno, charno, lineno, charno + name.length());
            currentMarker.setNameNode(nodePos);
        }
    }

    public boolean recordBlockDescription(java.lang.String description) {
        populated = true;
        return currentInfo.documentBlock(description);
    }

    public boolean recordVisibility(com.google.javascript.rhino.JSDocInfo.Visibility visibility) {
        if (currentInfo.getVisibility() == null) {
            populated = true;
            currentInfo.setVisibility(visibility);
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameter(java.lang.String parameterName, com.google.javascript.rhino.JSTypeExpression type) {
        if ((!hasAnySingletonTypeTags()) && currentInfo.declareParam(type, parameterName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordParameterDescription(java.lang.String parameterName, java.lang.String description) {
        if (currentInfo.documentParam(parameterName, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTemplateTypeNames(java.util.List<java.lang.String> names) {
        if (currentInfo.declareTemplateTypeNames(names)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThrowType(com.google.javascript.rhino.JSTypeExpression type) {
        if (!hasAnySingletonTypeTags()) {
            currentInfo.declareThrows(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordThrowDescription(com.google.javascript.rhino.JSTypeExpression type, java.lang.String description) {
        if (currentInfo.documentThrows(type, description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addAuthor(java.lang.String author) {
        if (currentInfo.documentAuthor(author)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean addReference(java.lang.String reference) {
        if (currentInfo.documentReference(reference)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConsistentIdGenerator() {
        if (!currentInfo.isConsistentIdGenerator()) {
            currentInfo.setConsistentIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordVersion(java.lang.String version) {
        if (currentInfo.documentVersion(version)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDeprecationReason(java.lang.String reason) {
        if (currentInfo.setDeprecationReason(reason)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordSuppressions(java.util.Set<java.lang.String> suppressions) {
        if (currentInfo.setSuppressions(suppressions)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordModifies(java.util.Set<java.lang.String> modifies) {
        if ((!hasAnySingletonSideEffectTags()) && currentInfo.setModifies(modifies)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordTypedef(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setTypedefType(type);
            populated = true;
            return true;
        }
        return false;
    }

    public boolean recordIdGenerator() {
        if (!currentInfo.isIdGenerator()) {
            currentInfo.setIdGenerator(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (currentInfo.getReturnType() == null)) && (!hasAnySingletonTypeTags())) {
            currentInfo.setReturnType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordReturnDescription(java.lang.String description) {
        if (currentInfo.documentReturn(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDefineType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((((type != null) && (!currentInfo.isConstant())) && (!currentInfo.isDefine())) && recordType(type)) {
            currentInfo.setDefine(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordEnumParameterType(com.google.javascript.rhino.JSTypeExpression type) {
        if ((type != null) && (!hasAnyTypeRelatedTags())) {
            currentInfo.setEnumParameterType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordThisType(com.google.javascript.rhino.JSTypeExpression type) {
        if (((type != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasThisType())) {
            currentInfo.setThisType(type);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordBaseType(com.google.javascript.rhino.JSTypeExpression jsType) {
        if (((jsType != null) && (!hasAnySingletonTypeTags())) && (!currentInfo.hasBaseType())) {
            currentInfo.setBaseType(jsType);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstancy() {
        if (!currentInfo.isConstant()) {
            currentInfo.setConstant(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordDescription(java.lang.String description) {
        if ((description != null) && (currentInfo.getDescription() == null)) {
            currentInfo.setDescription(description);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordMeaning(java.lang.String meaning) {
        if ((meaning != null) && (currentInfo.getMeaning() == null)) {
            currentInfo.setMeaning(meaning);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordFileOverview(java.lang.String description) {
        if (currentInfo.documentFileOverview(description)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordHiddenness() {
        if (!currentInfo.isHidden()) {
            currentInfo.setHidden(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoCompile() {
        if (!currentInfo.isNoCompile()) {
            currentInfo.setNoCompile(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoTypeCheck() {
        if (!currentInfo.isNoTypeCheck()) {
            currentInfo.setNoCheck(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordConstructor() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setConstructor(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isConstructorRecorded() {
        return currentInfo.isConstructor();
    }

    public boolean recordJavaDispatch() {
        if (!currentInfo.isJavaDispatch()) {
            currentInfo.setJavaDispatch(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isJavaDispatch() {
        return currentInfo.isJavaDispatch();
    }

    public boolean recordPreserveTry() {
        if (!currentInfo.shouldPreserveTry()) {
            currentInfo.setShouldPreserveTry(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordOverride() {
        if (!currentInfo.isOverride()) {
            currentInfo.setOverride(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoAlias() {
        if (!currentInfo.isNoAlias()) {
            currentInfo.setNoAlias(true);
            populated = true;
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(42).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(42).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(42).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.populated",com.google.javascript.rhino.JSDocInfoBuilder.this.populated);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(42).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation",com.google.javascript.rhino.JSDocInfoBuilder.this.parseDocumentation);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(42).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker",com.google.javascript.rhino.JSDocInfoBuilder.this.currentMarker);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(42).collectInput("com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo",com.google.javascript.rhino.JSDocInfoBuilder.this.currentInfo);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(42).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(42).collectionEnds();
            }
            if (runtimeAngelicValue)
                return true;

        } else {
            return false;
        }
    }

    public boolean recordDeprecated() {
        if (!currentInfo.isDeprecated()) {
            currentInfo.setDeprecated(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordInterface() {
        if (((!hasAnySingletonTypeTags()) && (!currentInfo.isConstructor())) && (!currentInfo.isInterface())) {
            currentInfo.setInterface(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExport() {
        if (!currentInfo.isExport()) {
            currentInfo.setExport(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExpose() {
        if (!currentInfo.isExpose()) {
            currentInfo.setExpose(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoShadow() {
        if (!currentInfo.isNoShadow()) {
            currentInfo.setNoShadow(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordImplicitCast() {
        if (!currentInfo.isImplicitCast()) {
            currentInfo.setImplicitCast(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordNoSideEffects() {
        if ((!hasAnySingletonSideEffectTags()) && (!currentInfo.isNoSideEffects())) {
            currentInfo.setNoSideEffects(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExterns() {
        if (!currentInfo.isExterns()) {
            currentInfo.setExterns(true);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean isInterfaceRecorded() {
        return currentInfo.isInterface();
    }

    public boolean hasParameter(java.lang.String name) {
        return currentInfo.hasParameter(name);
    }

    public boolean recordImplementedInterface(com.google.javascript.rhino.JSTypeExpression interfaceName) {
        if (currentInfo.addImplementedInterface(interfaceName)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordExtendedInterface(com.google.javascript.rhino.JSTypeExpression interfaceType) {
        if (currentInfo.addExtendedInterface(interfaceType)) {
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    public boolean recordLends(java.lang.String name) {
        if (!hasAnyTypeRelatedTags()) {
            currentInfo.setLendsName(name);
            populated = true;
            return true;
        } else {
            return false;
        }
    }

    private boolean hasAnyTypeRelatedTags() {
        return (((((((currentInfo.isConstructor() || currentInfo.isInterface()) || (currentInfo.getParameterCount() > 0)) || currentInfo.hasReturnType()) || currentInfo.hasBaseType()) || (currentInfo.getExtendedInterfacesCount() > 0)) || (currentInfo.getLendsName() != null)) || currentInfo.hasThisType()) || hasAnySingletonTypeTags();
    }

    private boolean hasAnySingletonTypeTags() {
        return (currentInfo.hasType() || currentInfo.hasTypedefType()) || currentInfo.hasEnumParameterType();
    }

    private boolean hasAnySingletonSideEffectTags() {
        return currentInfo.isNoSideEffects() || currentInfo.hasModifies();
    }
}
[146338] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659829658930
GPR[SSUN]-1659829658930
-1251822497
GPR[SPVATF]-1659829659134
GPR[EPVATF]-1659829659333
GPR[SPS]-1659829659333
[147175] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:781.
GPR[EPS]-1659829659767
GPR[ESUN]-1659829659767
GPR[SSUN]-1659829659767
-1251822497
GPR[SPVATF]-1659829659958
GPR[EPVATF]-1659829660140
GPR[SPS]-1659829660140
[147942] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:780.
GPR[EPS]-1659829660535
GPR[ESUN]-1659829660535
GPR[SSUN]-1659829660535
-1251822497
GPR[SPVATF]-1659829660729
GPR[EPVATF]-1659829660911
GPR[SPS]-1659829660911
[148717] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfoBuilder:779.
GPR[EPS]-1659829661310
GPR[ESUN]-1659829661310
GPR[SSUN]-1659829661310
1508981886
GPR[ESUN]-1659829661524
GPR[SSUN]-1659829661524
1508981886
GPR[SPVATF]-1659829661733
GPR[EPVATF]-1659829661918
GPR[SPS]-1659829661918
[149806] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.JSDocInfo:373.
GPR[EPS]-1659829662398
GPR[ESUN]-1659829662398
GPR[SSUN]-1659829662398
1508981886
GPR[ESUN]-1659829662615
GPR[SSUN]-1659829662615
2433571
GPR[SPVATF]-1659829662854
GPR[EPVATF]-1659829663038
GPR[SPS]-1659829663038
[151579] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:692.
GPR[EPS]-1659829664171
GPR[ESUN]-1659829664171
GPR[SSUN]-1659829664171
2433571
GPR[SPVATF]-1659829664708
GPR[EPVATF]-1659829665024
GPR[SPS]-1659829665024
[153082] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:690.
GPR[EPS]-1659829665674
GPR[ESUN]-1659829665675
GPR[SSUN]-1659829665675
2433571
GPR[SPVATF]-1659829665922
GPR[EPVATF]-1659829666140
GPR[SPS]-1659829666140
[155157] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:687.
GPR[EPS]-1659829667749
GPR[SPVATF]-1659829667749
GPR[EPVATF]-1659829668509
GPR[SPS]-1659829668509
[156611] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:687.
GPR[EPS]-1659829669203
GPR[ESUN]-1659829669203
GPR[SSUN]-1659829669203
-132053243
GPR[ESUN]-1659829669427
GPR[SSUN]-1659829669427
-132053243
GPR[SPVATF]-1659829669633
GPR[EPVATF]-1659829669655
[157063] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829669655
GPR[EPVATF]-1659829669675
[157083] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829669675
GPR[SSUN]-1659829669675
-132053243
GPR[ESUN]-1659829669925
GPR[SSUN]-1659829669925
1187751237
GPR[ESUN]-1659829670209
GPR[SSUN]-1659829670209
-132053243
GPR[SPVATF]-1659829670409
GPR[EPVATF]-1659829670429
[157837] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829670429
GPR[SSUN]-1659829670429
-132053243
GPR[SPVATF]-1659829670635
GPR[EPVATF]-1659829670655
[158063] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829670655
GPR[SSUN]-1659829670655
-132053243
GPR[SPVATF]-1659829670865
GPR[EPVATF]-1659829670885
[158293] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829670885
GPR[SSUN]-1659829670885
-132053243
GPR[SPVATF]-1659829671102
GPR[EPVATF]-1659829671125
[158533] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829671125
GPR[SSUN]-1659829671125
-132053243
GPR[SPVATF]-1659829671335
GPR[EPVATF]-1659829671358
[158766] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829671358
GPR[SSUN]-1659829671358
-132053243
GPR[ESUN]-1659829671567
GPR[SSUN]-1659829671567
-1966087783
GPR[ESUN]-1659829671761
GPR[SSUN]-1659829671761
-1966087783
GPR[SPVATF]-1659829671967
GPR[EPVATF]-1659829672018
[159426] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829672018
GPR[EPVATF]-1659829672042
[159450] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829672042
GPR[SSUN]-1659829672042
GPR[ESUN]-1659829672042
GPR[SSUN]-1659829672042
GPR[ESUN]-1659829672042
GPR[SSUN]-1659829672042
1187751237
GPR[ESUN]-1659829672344
GPR[SSUN]-1659829672344
-718432441
GPR[SPVATF]-1659829672580
GPR[EPVATF]-1659829672794
GPR[SPS]-1659829672794
[160878] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:175.
GPR[EPS]-1659829673470
GPR[ESUN]-1659829673470
GPR[SSUN]-1659829673470
-718432441
GPR[SPVATF]-1659829673698
GPR[EPVATF]-1659829673928
GPR[SPS]-1659829673928
[162016] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:224.
GPR[EPS]-1659829674608
GPR[ESUN]-1659829674608
GPR[SSUN]-1659829674608
-718432441
GPR[SPVATF]-1659829674854
GPR[EPVATF]-1659829675083
GPR[SPS]-1659829675083
[163230] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:223.
GPR[EPS]-1659829675822
GPR[ESUN]-1659829675822
GPR[SSUN]-1659829675822
-718432441
GPR[SPVATF]-1659829676068
GPR[EPVATF]-1659829676290
GPR[SPS]-1659829676290
[164403] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:222.
GPR[EPS]-1659829676995
GPR[ESUN]-1659829676995
GPR[SSUN]-1659829676995
-1966087783
GPR[SPVATF]-1659829677188
GPR[EPVATF]-1659829677207
[164616] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829677208
GPR[EPVATF]-1659829677225
[164633] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829677225
GPR[SSUN]-1659829677225
-1966087783
GPR[ESUN]-1659829677415
GPR[SSUN]-1659829677415
2433571
GPR[ESUN]-1659829677657
GPR[SSUN]-1659829677657
2433571
GPR[ESUN]-1659829677921
GPR[SSUN]-1659829677921
2433571
GPR[SPVATF]-1659829678195
GPR[EPVATF]-1659829679114
GPR[SPS]-1659829679114
[167272] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:635.
GPR[EPS]-1659829679864
GPR[ESUN]-1659829679864
GPR[SSUN]-1659829679864
-534884160
GPR[ESUN]-1659829680256
GPR[SSUN]-1659829680256
-534884160
GPR[SPVATF]-1659829680638
GPR[EPVATF]-1659829680849
GPR[SPS]-1659829680850
[169194] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2336.
GPR[EPS]-1659829681786
GPR[ESUN]-1659829681786
GPR[SSUN]-1659829681786
-534884160
GPR[SPVATF]-1659829682178
GPR[EPVATF]-1659829682401
GPR[SPS]-1659829682401
[170704] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2335.
GPR[EPS]-1659829683296
GPR[SPVATF]-1659829683296
GPR[EPVATF]-1659829683517
GPR[SPS]-1659829683517
[171817] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:2335.
GPR[EPS]-1659829684409
GPR[ESUN]-1659829684409
GPR[SSUN]-1659829684409
-534884160
GPR[ESUN]-1659829684805
GPR[SSUN]-1659829684805
-534884160
GPR[SPVATF]-1659829685213
GPR[EPVATF]-1659829685432
GPR[SPS]-1659829685432
[173769] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1034.
GPR[EPS]-1659829686361
GPR[ESUN]-1659829686361
GPR[SSUN]-1659829686361
-534884160
GPR[SPVATF]-1659829686746
GPR[EPVATF]-1659829686966
GPR[SPS]-1659829686966
[175279] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1033.
GPR[EPS]-1659829687871
GPR[ESUN]-1659829687871
GPR[SSUN]-1659829687871
-534884160
GPR[SPVATF]-1659829688269
GPR[EPVATF]-1659829688491
GPR[SPS]-1659829688491
[176783] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1032.
GPR[EPS]-1659829689375
GPR[ESUN]-1659829689375
GPR[SSUN]-1659829689375
-534884160
GPR[ESUN]-1659829689768
GPR[SSUN]-1659829689768
-534884160
GPR[SPVATF]-1659829690161
GPR[EPVATF]-1659829690382
GPR[SPS]-1659829690382
[178661] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1028.
GPR[EPS]-1659829691253
GPR[SPVATF]-1659829691254
GPR[EPVATF]-1659829691482
GPR[SPS]-1659829691482
[179747] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.Compiler:1028.
GPR[EPS]-1659829692339
GPR[ESUN]-1659829692340
GPR[SSUN]-1659829692340
-534884160
GPR[ESUN]-1659829692722
GPR[SSUN]-1659829692722
-478581474
GPR[ESUN]-1659829692937
GPR[SSUN]-1659829692937
-478581474
GPR[ESUN]-1659829693142
GPR[SSUN]-1659829693142
-478581474
GPR[ESUN]-1659829693352
GPR[SSUN]-1659829693352
-478581474
GPR[SPVATF]-1659829693576
GPR[EPVATF]-1659829693794
GPR[SPS]-1659829693794
[181691] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntheticAst:52.
GPR[EPS]-1659829694283
GPR[ESUN]-1659829694283
GPR[SSUN]-1659829694283
-478581474
GPR[SPVATF]-1659829694506
GPR[EPVATF]-1659829694719
GPR[SPS]-1659829694719
[182623] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntheticAst:51.
GPR[EPS]-1659829695215
GPR[ESUN]-1659829695215
GPR[SSUN]-1659829695215
-478581474
GPR[SPVATF]-1659829695469
GPR[EPVATF]-1659829695692
GPR[SPS]-1659829695692
[183599] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntheticAst:50.
GPR[EPS]-1659829696191
GPR[ESUN]-1659829696191
GPR[SSUN]-1659829696191
-478581474
GPR[ESUN]-1659829696399
GPR[SSUN]-1659829696399
1187751237
GPR[SPVATF]-1659829696691
GPR[EPVATF]-1659829696907
GPR[SPS]-1659829696907
[185053] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:882.
GPR[EPS]-1659829697645
GPR[ESUN]-1659829697645
GPR[SSUN]-1659829697645
GPR[ESUN]-1659829697645
GPR[SSUN]-1659829697645
-1345859678
GPR[ESUN]-1659829697922
GPR[SSUN]-1659829697922
GPR[ESUN]-1659829697922
GPR[SSUN]-1659829697922
GPR[ESUN]-1659829697922
GPR[SSUN]-1659829697922
GPR[ESUN]-1659829697922
GPR[SSUN]-1659829697922
GPR[ESUN]-1659829697922
GPR[SSUN]-1659829697922
GPR[ESUN]-1659829697923
GPR[SSUN]-1659829697923
GPR[ESUN]-1659829697923
GPR[SSUN]-1659829697923
GPR[ESUN]-1659829697923
GPR[SSUN]-1659829697923
2433571
GPR[ESUN]-1659829698173
GPR[SSUN]-1659829698173
2433571
GPR[SPVATF]-1659829698439
GPR[EPVATF]-1659829698659
GPR[SPS]-1659829698659
[186689] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1966.
GPR[EPS]-1659829699281
GPR[ESUN]-1659829699281
GPR[SSUN]-1659829699281
-1345859678
GPR[SPVATF]-1659829699554
GPR[EPVATF]-1659829699750
GPR[SPS]-1659829699750
[187795] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:226.
GPR[EPS]-1659829700387
GPR[ESUN]-1659829700387
GPR[SSUN]-1659829700387
-1345859678
GPR[SPVATF]-1659829700661
GPR[EPVATF]-1659829700881
GPR[SPS]-1659829700881
[188903] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:225.
GPR[EPS]-1659829701495
GPR[ESUN]-1659829701495
GPR[SSUN]-1659829701495
1331276989
GPR[ESUN]-1659829701732
GPR[SSUN]-1659829701732
1870456228
GPR[ESUN]-1659829701973
GPR[SSUN]-1659829701973
1870456228
GPR[SPVATF]-1659829702268
GPR[EPVATF]-1659829702489
GPR[SPS]-1659829702489
[190697] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:163.
GPR[EPS]-1659829703289
GPR[SPVATF]-1659829703289
GPR[EPVATF]-1659829703496
GPR[SPS]-1659829703496
[191463] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:163.
GPR[EPS]-1659829704055
GPR[ESUN]-1659829704055
GPR[SSUN]-1659829704055
1870456228
GPR[SPVATF]-1659829704306
GPR[EPVATF]-1659829704509
GPR[SPS]-1659829704509
[192496] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:74.
GPR[EPS]-1659829705089
GPR[ESUN]-1659829705089
GPR[SSUN]-1659829705089
2346
GPR[ESUN]-1659829705299
GPR[SSUN]-1659829705299
2346
GPR[SPVATF]-1659829705502
GPR[EPVATF]-1659829705721
GPR[SPS]-1659829705721
[193769] WARN SpoonReferenceLibrary - spoon.SpoonException: spoon.support.compiler.SnippetCompilationError: Node cannot be resolved to a type at Foo.java:2
[194002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.IR:302.
GPR[EPS]-1659829706594
GPR[ESUN]-1659829706594
GPR[SSUN]-1659829706594
2346
GPR[ESUN]-1659829706816
GPR[SSUN]-1659829706816
GPR[ESUN]-1659829706816
GPR[SSUN]-1659829706816
-600752576
GPR[ESUN]-1659829707044
GPR[SSUN]-1659829707044
GPR[ESUN]-1659829707045
GPR[SSUN]-1659829707045
-718432441
GPR[SPVATF]-1659829707279
GPR[EPVATF]-1659829707490
GPR[SPS]-1659829707490
[195582] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:816.
GPR[EPS]-1659829708174
GPR[ESUN]-1659829708174
GPR[SSUN]-1659829708174
-718432441
GPR[SPVATF]-1659829708414
GPR[EPVATF]-1659829708628
GPR[SPS]-1659829708628
[196727] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:818.
GPR[EPS]-1659829709320
GPR[ESUN]-1659829709320
GPR[SSUN]-1659829709320
-718432441
GPR[SPVATF]-1659829709550
GPR[EPVATF]-1659829709768
GPR[SPS]-1659829709768
[197871] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:812.
GPR[EPS]-1659829710463
GPR[SPVATF]-1659829710464
GPR[EPVATF]-1659829713133
GPR[SPS]-1659829713133
[201291] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:812.
GPR[EPS]-1659829713883
GPR[ESUN]-1659829713883
GPR[SSUN]-1659829713883
-1345859678
GPR[ESUN]-1659829714163
GPR[SSUN]-1659829714163
GPR[ESUN]-1659829714163
GPR[SSUN]-1659829714163
GPR[ESUN]-1659829714163
GPR[SSUN]-1659829714163
GPR[ESUN]-1659829714163
GPR[SSUN]-1659829714163
GPR[ESUN]-1659829714163
GPR[SSUN]-1659829714163
GPR[ESUN]-1659829714163
GPR[SSUN]-1659829714163
GPR[ESUN]-1659829714163
GPR[SSUN]-1659829714163
GPR[ESUN]-1659829714163
GPR[SSUN]-1659829714163
GPR[ESUN]-1659829714163
GPR[SSUN]-1659829714163
GPR[ESUN]-1659829714163
GPR[SSUN]-1659829714163
GPR[ESUN]-1659829714163
GPR[SSUN]-1659829714163
GPR[ESUN]-1659829714163
GPR[SSUN]-1659829714163
-132053243
GPR[ESUN]-1659829714373
GPR[SSUN]-1659829714373
-132053243
GPR[SPVATF]-1659829714586
GPR[EPVATF]-1659829714652
[202060] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829714652
GPR[SSUN]-1659829714653
711965926
GPR[ESUN]-1659829714848
GPR[SSUN]-1659829714848
711965926
GPR[SPVATF]-1659829715058
GPR[EPVATF]-1659829715329
GPR[SPS]-1659829715329
[203207] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AbstractMessageFormatter:37.
GPR[EPS]-1659829715799
GPR[ESUN]-1659829715799
GPR[SSUN]-1659829715799
GPR[ESUN]-1659829715799
GPR[SSUN]-1659829715799
-1117079791
GPR[ESUN]-1659829716019
GPR[SSUN]-1659829716019
-1117079791
GPR[SPVATF]-1659829716228
GPR[EPVATF]-1659829716475
GPR[SPS]-1659829716475
[204386] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:481.
GPR[EPS]-1659829716978
GPR[SPVATF]-1659829716978
GPR[EPVATF]-1659829717234
GPR[SPS]-1659829717234
[205157] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:481.
GPR[EPS]-1659829717749
GPR[ESUN]-1659829717749
GPR[SSUN]-1659829717749
-1117079791
GPR[SPVATF]-1659829717975
GPR[EPVATF]-1659829718223
GPR[SPS]-1659829718223
[206158] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:480.
GPR[EPS]-1659829718750
GPR[ESUN]-1659829718750
GPR[SSUN]-1659829718750
-1117079791
GPR[SPVATF]-1659829718978
GPR[EPVATF]-1659829719211
GPR[SPS]-1659829719211
[207126] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:479.
GPR[EPS]-1659829719718
GPR[ESUN]-1659829719718
GPR[SSUN]-1659829719718
-1117079791
GPR[ESUN]-1659829719926
GPR[SSUN]-1659829719926
-1117079791
GPR[SPVATF]-1659829720141
GPR[EPVATF]-1659829720386
GPR[SPS]-1659829720386
[208311] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:128.
GPR[EPS]-1659829720903
GPR[ESUN]-1659829720903
GPR[SSUN]-1659829720903
1616555300
GPR[SPVATF]-1659829721112
GPR[EPVATF]-1659829721329
GPR[SPS]-1659829721329
[209221] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:142.
GPR[EPS]-1659829721813
GPR[ESUN]-1659829721813
GPR[SSUN]-1659829721813
1616555300
GPR[SPVATF]-1659829722030
GPR[EPVATF]-1659829722241
GPR[SPS]-1659829722241
[210121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:141.
GPR[EPS]-1659829722714
GPR[ESUN]-1659829722714
GPR[SSUN]-1659829722714
1616555300
GPR[SPVATF]-1659829722919
GPR[EPVATF]-1659829723136
GPR[SPS]-1659829723136
[211022] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:140.
GPR[EPS]-1659829723614
GPR[ESUN]-1659829723614
GPR[SSUN]-1659829723614
-718432441
GPR[ESUN]-1659829723857
GPR[SSUN]-1659829723857
-718432441
GPR[SPVATF]-1659829724082
GPR[EPVATF]-1659829724297
GPR[SPS]-1659829724297
[212427] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:889.
GPR[EPS]-1659829725019
GPR[ESUN]-1659829725019
GPR[SSUN]-1659829725019
-718432441
GPR[SPVATF]-1659829725274
GPR[EPVATF]-1659829725492
GPR[SPS]-1659829725492
[213576] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:888.
GPR[EPS]-1659829726168
GPR[ESUN]-1659829726168
GPR[SSUN]-1659829726168
-718432441
GPR[SPVATF]-1659829726403
GPR[EPVATF]-1659829726615
GPR[SPS]-1659829726615
[214721] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:887.
GPR[EPS]-1659829727313
GPR[ESUN]-1659829727313
GPR[SSUN]-1659829727313
GPR[ESUN]-1659829727313
GPR[SSUN]-1659829727313
GPR[ESUN]-1659829727313
GPR[SSUN]-1659829727313
GPR[ESUN]-1659829727313
GPR[SSUN]-1659829727313
GPR[ESUN]-1659829727313
GPR[SSUN]-1659829727313
GPR[ESUN]-1659829727313
GPR[SSUN]-1659829727313
1187751237
GPR[SPVATF]-1659829727625
GPR[EPVATF]-1659829727847
GPR[SPS]-1659829727847
[215986] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:881.
GPR[EPS]-1659829728578
GPR[SPVATF]-1659829728578
GPR[EPVATF]-1659829728797
GPR[SPS]-1659829728797
[216945] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:881.
GPR[EPS]-1659829729537
GPR[ESUN]-1659829729537
GPR[SSUN]-1659829729537
1187751237
GPR[ESUN]-1659829729839
GPR[SSUN]-1659829729839
2433571
GPR[ESUN]-1659829730163
GPR[SSUN]-1659829730163
2433571
GPR[SPVATF]-1659829730425
GPR[EPVATF]-1659829730688
GPR[SPS]-1659829730688
[218738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:533.
GPR[EPS]-1659829731330
GPR[ESUN]-1659829731330
GPR[SSUN]-1659829731330
-718432441
GPR[SPVATF]-1659829731577
GPR[EPVATF]-1659829731782
GPR[SPS]-1659829731782
[219892] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:543.
GPR[EPS]-1659829732484
GPR[ESUN]-1659829732484
GPR[SSUN]-1659829732484
-718432441
GPR[SPVATF]-1659829732730
GPR[EPVATF]-1659829732963
GPR[SPS]-1659829732963
[221110] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:542.
GPR[EPS]-1659829733702
GPR[ESUN]-1659829733702
GPR[SSUN]-1659829733702
GPR[ESUN]-1659829733702
GPR[SSUN]-1659829733702
-1117079791
GPR[ESUN]-1659829733930
GPR[SSUN]-1659829733930
-1117079791
GPR[SPVATF]-1659829734147
GPR[EPVATF]-1659829734370
GPR[SPS]-1659829734370
[222257] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:143.
GPR[EPS]-1659829734849
GPR[ESUN]-1659829734849
GPR[SSUN]-1659829734849
1187751237
GPR[SPVATF]-1659829735122
GPR[EPVATF]-1659829735311
GPR[SPS]-1659829735311
[223358] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:929.
GPR[EPS]-1659829735950
GPR[ESUN]-1659829735950
GPR[SSUN]-1659829735950
-1345859678
GPR[SPVATF]-1659829736194
GPR[EPVATF]-1659829736381
GPR[SPS]-1659829736381
[224349] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:232.
GPR[EPS]-1659829736941
GPR[ESUN]-1659829736941
GPR[SSUN]-1659829736941
-1345859678
GPR[SPVATF]-1659829737183
GPR[EPVATF]-1659829737371
GPR[SPS]-1659829737371
[225345] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:231.
GPR[EPS]-1659829737937
GPR[ESUN]-1659829737937
GPR[SSUN]-1659829737937
-1345859678
GPR[SPVATF]-1659829738206
GPR[EPVATF]-1659829738392
GPR[SPS]-1659829738392
[227830] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:230.
GPR[EPS]-1659829740422
GPR[ESUN]-1659829740422
GPR[SSUN]-1659829740422
-1345859678
GPR[SPVATF]-1659829740974
GPR[EPVATF]-1659829741407
GPR[SPS]-1659829741408
[229720] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:229.
GPR[EPS]-1659829742312
GPR[ESUN]-1659829742312
GPR[SSUN]-1659829742312
-1345859678
GPR[ESUN]-1659829742571
GPR[SSUN]-1659829742571
-718432441
GPR[SPVATF]-1659829742791
GPR[EPVATF]-1659829742990
GPR[SPS]-1659829742990
[231816] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:835.
GPR[EPS]-1659829744408
GPR[ESUN]-1659829744408
GPR[SSUN]-1659829744409
-718432441
GPR[SPVATF]-1659829744646
GPR[EPVATF]-1659829744858
GPR[SPS]-1659829744858
[233092] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:546.
GPR[EPS]-1659829745684
GPR[SPVATF]-1659829745684
GPR[EPVATF]-1659829745891
GPR[SPS]-1659829745891
[233942] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:546.
GPR[EPS]-1659829746534
GPR[ESUN]-1659829746534
GPR[SSUN]-1659829746534
-718432441
GPR[SPVATF]-1659829746758
GPR[EPVATF]-1659829746954
GPR[SPS]-1659829746954
[235053] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:535.
GPR[EPS]-1659829747646
GPR[SPVATF]-1659829747646
GPR[EPVATF]-1659829747856
GPR[SPS]-1659829747856
[235937] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:535.
GPR[EPS]-1659829748529
GPR[ESUN]-1659829748529
GPR[SSUN]-1659829748529
-718432441
GPR[SPVATF]-1659829748763
GPR[EPVATF]-1659829748957
GPR[SPS]-1659829748957
[237029] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:533.
GPR[EPS]-1659829749621
GPR[ESUN]-1659829749621
GPR[SSUN]-1659829749621
-718432441
GPR[SPVATF]-1659829749860
GPR[EPVATF]-1659829750081
GPR[SPS]-1659829750081
[238187] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:532.
GPR[EPS]-1659829750779
GPR[ESUN]-1659829750779
GPR[SSUN]-1659829750779
-718432441
GPR[SPVATF]-1659829751015
GPR[EPVATF]-1659829751235
GPR[SPS]-1659829751235
[239334] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:531.
GPR[EPS]-1659829751927
GPR[ESUN]-1659829751927
GPR[SSUN]-1659829751927
-718432441
GPR[SPVATF]-1659829752165
GPR[EPVATF]-1659829752381
GPR[SPS]-1659829752381
[240485] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:527.
GPR[EPS]-1659829753077
GPR[SPVATF]-1659829753077
GPR[EPVATF]-1659829753296
GPR[SPS]-1659829753296
[241382] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:527.
GPR[EPS]-1659829753974
GPR[ESUN]-1659829753974
GPR[SSUN]-1659829753974
-718432441
GPR[ESUN]-1659829754230
GPR[SSUN]-1659829754230
-718432441
GPR[ESUN]-1659829754461
GPR[SSUN]-1659829754461
-718432441
GPR[SPVATF]-1659829754699
GPR[EPVATF]-1659829754922
GPR[SPS]-1659829754922
[242975] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else {
                unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState(first.getNext().isBlock() && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || first.isEmpty()) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.isComma()) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                unrollBinaryOperator(n, com.google.javascript.rhino.Token.COMMA, ",", context, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, 0, 0);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().isNumber()) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    cc.addOp(":", true);
                    addExpr(last, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((!first.isString()) || (!last.isString())) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                com.google.common.base.Preconditions.checkState(n.getParent().isObjectLit());
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.isFunction());
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GETTER_DEF) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n);
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && n.getParent().isScript());
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.isVar()) {
                            cc.endStatement();
                        }
                        if (c.isFunction()) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.isVar()) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.isString(), "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.isNumber();
                    if (needsParens) {
                        add("(");
                    }
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    add(")");
                } else {
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("null");
                break;
            case com.google.javascript.rhino.Token.THIS :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("this");
                break;
            case com.google.javascript.rhino.Token.FALSE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("false");
                break;
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("true");
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION)) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                com.google.common.base.Preconditions.checkState(childCount == 1, "Object lit key must have 1 child");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.STRING :
                com.google.common.base.Preconditions.checkState(childCount == 0, "A string may not have children");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if (c.isGetterDef() || c.isSetterDef()) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.isStringKey());
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (!first.isLabelName()) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    private void unrollBinaryOperator(com.google.javascript.rhino.Node n, int op, java.lang.String opStr, com.google.javascript.jscomp.CodeGenerator.Context context, com.google.javascript.jscomp.CodeGenerator.Context rhsContext, int leftPrecedence, int rightPrecedence) {
        com.google.javascript.rhino.Node firstNonOperator = n.getFirstChild();
        while (firstNonOperator.getType() == op) {
            firstNonOperator = firstNonOperator.getFirstChild();
        } 
        addExpr(firstNonOperator, leftPrecedence, context);
        com.google.javascript.rhino.Node current = firstNonOperator;
        do {
            current = current.getParent();
            cc.addOp(opStr, true);
            addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
        } while (current != n );
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return (len > 0) && (s.charAt(0) != '0');
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return (n.isName() && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (!n.isBlock())) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.isBlock()) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.isEmpty()) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.isVar()) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.isLabel()) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (!labeledStatement.isBlock()) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(112).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(112).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(112).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(112).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(112).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(112).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(112).collectInput("n",n);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(112).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(112).collectionEnds();
            }
            if (runtimeAngelicValue)
                return n.isFunction() || n.isDo();

        }
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && n.isIn())) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            lastWasEmpty = n.isEmpty();
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    private void addJsString(com.google.javascript.rhino.Node n) {
        java.lang.String s = n.getString();
        boolean useSlashV = n.getBooleanProp(com.google.javascript.rhino.Node.SLASH_V);
        if (useSlashV) {
            add(jsString(n.getString(), useSlashV));
        } else {
            java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
            if (cached == null) {
                cached = jsString(n.getString(), useSlashV);
                ESCAPED_JS_STRINGS.put(s, cached);
            }
            add(cached);
        }
    }

    private java.lang.String jsString(java.lang.String s, boolean useSlashV) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            doublequote = "\\\"";
            singlequote = "\'";
        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder, useSlashV);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder, false);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null, false);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    private static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder, boolean useSlashV) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\u000b' :
                    if (useSlashV) {
                        sb.append("\\v");
                    } else {
                        sb.append("\\x0B");
                    }
                    break;
                case '\b' :
                    sb.append("\\b");
                    break;
                case '\f' :
                    sb.append("\\f");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case ' ' :
                    sb.append("\\u2028");
                    break;
                case ' ' :
                    sb.append("\\u2029");
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.isBlock()) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (!c.isEmpty()) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.isBlock()) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (!c.isEmpty()) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[242976] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659829755568
GPR[SSUN]-1659829755568
-718432441
GPR[SPVATF]-1659829755799
GPR[EPVATF]-1659829756012
GPR[SPS]-1659829756012
[244109] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:862.
GPR[EPS]-1659829756701
GPR[ESUN]-1659829756701
GPR[SSUN]-1659829756701
-718432441
GPR[SPVATF]-1659829756942
GPR[EPVATF]-1659829757160
GPR[SPS]-1659829757160
[245230] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1153.
GPR[EPS]-1659829757822
GPR[ESUN]-1659829757822
GPR[SSUN]-1659829757822
-718432441
GPR[SPVATF]-1659829758055
GPR[EPVATF]-1659829758273
GPR[SPS]-1659829758273
[246384] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1147.
GPR[EPS]-1659829758976
GPR[SPVATF]-1659829758976
GPR[EPVATF]-1659829759203
GPR[SPS]-1659829759203
[247282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1147.
GPR[EPS]-1659829759874
GPR[ESUN]-1659829759874
GPR[SSUN]-1659829759874
-718432441
GPR[SPVATF]-1659829760118
GPR[EPVATF]-1659829760330
GPR[SPS]-1659829760330
[248406] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1146.
GPR[EPS]-1659829760998
GPR[ESUN]-1659829760998
GPR[SSUN]-1659829760998
-718432441
GPR[SPVATF]-1659829761249
GPR[EPVATF]-1659829761474
GPR[SPS]-1659829761474
[249591] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:827.
GPR[EPS]-1659829762183
GPR[SPVATF]-1659829762183
GPR[EPVATF]-1659829762417
GPR[SPS]-1659829762417
[250841] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:827.
GPR[EPS]-1659829763433
GPR[ESUN]-1659829763433
GPR[SSUN]-1659829763433
-718432441
GPR[ESUN]-1659829763706
GPR[SSUN]-1659829763706
-718432441
GPR[ESUN]-1659829763946
GPR[SSUN]-1659829763946
-1117079791
GPR[ESUN]-1659829764209
GPR[SSUN]-1659829764209
-1117079791
GPR[SPVATF]-1659829764425
GPR[EPVATF]-1659829764637
GPR[SPS]-1659829764637
[252558] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:467.
GPR[EPS]-1659829765150
GPR[SPVATF]-1659829765151
GPR[EPVATF]-1659829765369
GPR[SPS]-1659829765369
[253268] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:467.
GPR[EPS]-1659829765860
GPR[ESUN]-1659829765860
GPR[SSUN]-1659829765860
-1117079791
GPR[ESUN]-1659829766079
GPR[SSUN]-1659829766079
-1117079791
GPR[SPVATF]-1659829766290
GPR[EPVATF]-1659829766523
GPR[SPS]-1659829766523
[254428] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:466.
GPR[EPS]-1659829767020
GPR[ESUN]-1659829767020
GPR[SSUN]-1659829767020
-1117079791
GPR[SPVATF]-1659829767235
GPR[EPVATF]-1659829767455
GPR[SPS]-1659829767455
[255406] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:465.
GPR[EPS]-1659829767998
GPR[ESUN]-1659829767998
GPR[SSUN]-1659829767998
-1117079791
GPR[SPVATF]-1659829768222
GPR[EPVATF]-1659829768449
GPR[SPS]-1659829768449
[256366] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:464.
GPR[EPS]-1659829768958
GPR[ESUN]-1659829768958
GPR[SSUN]-1659829768958
-1117079791
GPR[SPVATF]-1659829769186
GPR[EPVATF]-1659829769422
GPR[SPS]-1659829769422
[257337] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:463.
GPR[EPS]-1659829769929
GPR[ESUN]-1659829769929
GPR[SSUN]-1659829769929
-1117079791
GPR[SPVATF]-1659829770145
GPR[EPVATF]-1659829770365
GPR[SPS]-1659829770365
[258290] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:462.
GPR[EPS]-1659829770882
GPR[ESUN]-1659829770882
GPR[SSUN]-1659829770882
-1117079791
GPR[SPVATF]-1659829771155
GPR[EPVATF]-1659829771376
GPR[SPS]-1659829771376
[259306] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:119.
GPR[EPS]-1659829771898
GPR[ESUN]-1659829771898
GPR[SSUN]-1659829771898
-718432441
GPR[SPVATF]-1659829772137
GPR[EPVATF]-1659829772364
GPR[SPS]-1659829772364
[260482] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:442.
GPR[EPS]-1659829773074
GPR[ESUN]-1659829773074
GPR[SSUN]-1659829773074
-718432441
GPR[SPVATF]-1659829773313
GPR[EPVATF]-1659829773550
GPR[SPS]-1659829773550
[261671] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:441.
GPR[EPS]-1659829774263
GPR[ESUN]-1659829774263
GPR[SSUN]-1659829774263
-1345859678
GPR[SPVATF]-1659829774546
GPR[EPVATF]-1659829774766
GPR[SPS]-1659829774766
[262818] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:224.
GPR[EPS]-1659829775410
GPR[SPVATF]-1659829775410
GPR[EPVATF]-1659829775642
GPR[SPS]-1659829775642
[263683] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory:224.
GPR[EPS]-1659829776275
GPR[ESUN]-1659829776275
GPR[SSUN]-1659829776275
1870456228
GPR[SPVATF]-1659829777278
GPR[EPVATF]-1659829777485
GPR[SPS]-1659829777485
[265402] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:126.
GPR[EPS]-1659829777994
GPR[ESUN]-1659829777994
GPR[SSUN]-1659829777994
1870456228
GPR[SPVATF]-1659829778219
GPR[EPVATF]-1659829778521
GPR[SPS]-1659829778521
[266481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:123.
GPR[EPS]-1659829779073
GPR[SPVATF]-1659829779074
GPR[EPVATF]-1659829779280
GPR[SPS]-1659829779280
[267197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:123.
GPR[EPS]-1659829779789
GPR[ESUN]-1659829779789
GPR[SSUN]-1659829779789
-718432441
GPR[SPVATF]-1659829780025
GPR[EPVATF]-1659829780234
GPR[SPS]-1659829780234
[268328] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:839.
GPR[EPS]-1659829780920
GPR[SPVATF]-1659829780921
GPR[EPVATF]-1659829781144
GPR[SPS]-1659829781144
[269263] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:839.
GPR[EPS]-1659829781855
GPR[ESUN]-1659829781855
GPR[SSUN]-1659829781855
-898632916
GPR[SPVATF]-1659829782091
GPR[EPVATF]-1659829782324
GPR[SPS]-1659829782324
[270223] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:71.
GPR[EPS]-1659829782815
GPR[SPVATF]-1659829782816
GPR[EPVATF]-1659829783034
GPR[SPS]-1659829783034
[271002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:71.
GPR[EPS]-1659829783594
GPR[ESUN]-1659829783594
GPR[SSUN]-1659829783594
-898632916
GPR[ESUN]-1659829783831
GPR[SSUN]-1659829783831
2433571
GPR[ESUN]-1659829784107
GPR[SSUN]-1659829784107
2433571
GPR[SPVATF]-1659829784368
GPR[EPVATF]-1659829784619
GPR[SPS]-1659829784619
[272655] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:603.
GPR[EPS]-1659829785247
GPR[SPVATF]-1659829785247
GPR[EPVATF]-1659829785503
GPR[SPS]-1659829785503
[273564] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:603.
GPR[EPS]-1659829786156
GPR[ESUN]-1659829786156
GPR[SSUN]-1659829786156
2433571
GPR[SPVATF]-1659829786422
GPR[EPVATF]-1659829786680
GPR[SPS]-1659829786681
[274741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:602.
GPR[EPS]-1659829787333
GPR[ESUN]-1659829787333
GPR[SSUN]-1659829787333
2433571
GPR[SPVATF]-1659829787599
GPR[EPVATF]-1659829787857
GPR[SPS]-1659829787857
[275932] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:601.
GPR[EPS]-1659829788524
GPR[ESUN]-1659829788524
GPR[SSUN]-1659829788524
2433571
GPR[SPVATF]-1659829788814
GPR[EPVATF]-1659829789066
GPR[SPS]-1659829789066
[277128] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:600.
GPR[EPS]-1659829789720
GPR[ESUN]-1659829789720
GPR[SSUN]-1659829789720
2433571
GPR[SPVATF]-1659829789976
GPR[EPVATF]-1659829790231
GPR[SPS]-1659829790231
[278318] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:599.
GPR[EPS]-1659829790910
GPR[ESUN]-1659829790910
GPR[SSUN]-1659829790911
2433571
GPR[SPVATF]-1659829791172
GPR[EPVATF]-1659829791411
GPR[SPS]-1659829791411
[279471] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:598.
GPR[EPS]-1659829792063
GPR[ESUN]-1659829792063
GPR[SSUN]-1659829792063
-718432441
GPR[SPVATF]-1659829792298
GPR[EPVATF]-1659829792502
GPR[SPS]-1659829792502
[280574] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1138.
GPR[EPS]-1659829793166
GPR[ESUN]-1659829793166
GPR[SSUN]-1659829793166
-718432441
GPR[SPVATF]-1659829793402
GPR[EPVATF]-1659829793621
GPR[SPS]-1659829793621
[281765] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1137.
GPR[EPS]-1659829794357
GPR[SPVATF]-1659829794357
GPR[EPVATF]-1659829794580
GPR[SPS]-1659829794580
[282690] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1137.
GPR[EPS]-1659829795282
GPR[ESUN]-1659829795282
GPR[SSUN]-1659829795282
-718432441
GPR[SPVATF]-1659829795525
GPR[EPVATF]-1659829795745
GPR[SPS]-1659829795745
[283840] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1135.
GPR[EPS]-1659829796432
GPR[SPVATF]-1659829796433
GPR[EPVATF]-1659829796649
GPR[SPS]-1659829796649
[284751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1135.
GPR[EPS]-1659829797343
GPR[ESUN]-1659829797343
GPR[SSUN]-1659829797343
-718432441
GPR[SPVATF]-1659829797585
GPR[EPVATF]-1659829797792
GPR[SPS]-1659829797792
[285883] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:821.
GPR[EPS]-1659829798475
GPR[SPVATF]-1659829798476
GPR[EPVATF]-1659829798703
GPR[SPS]-1659829798703
[286808] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:821.
GPR[EPS]-1659829799400
GPR[ESUN]-1659829799400
GPR[SSUN]-1659829799400
1870456228
GPR[ESUN]-1659829799653
GPR[SSUN]-1659829799653
1870456228
GPR[SPVATF]-1659829799942
GPR[EPVATF]-1659829800170
GPR[SPS]-1659829800170
[288111] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:132.
GPR[EPS]-1659829800703
GPR[SPVATF]-1659829800704
GPR[EPVATF]-1659829800934
GPR[SPS]-1659829800934
[288845] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:132.
GPR[EPS]-1659829801437
GPR[ESUN]-1659829801437
GPR[SSUN]-1659829801438
1870456228
GPR[ESUN]-1659829801684
GPR[SSUN]-1659829801684
1870456228
GPR[ESUN]-1659829801925
GPR[SSUN]-1659829801925
1870456228
GPR[SPVATF]-1659829802176
GPR[EPVATF]-1659829802413
GPR[SPS]-1659829802413
GPR[EPS]-1659829816454
GPR[SPVATF]-1659829816454
GPR[EPVATF]-1659829816774
GPR[SPS]-1659829816774
[305017] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:101.
GPR[EPS]-1659829817609
GPR[ESUN]-1659829817609
GPR[SSUN]-1659829817609
1870456228
GPR[SPVATF]-1659829817937
GPR[EPVATF]-1659829818129
GPR[SPS]-1659829818129
[305994] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:95.
GPR[EPS]-1659829818586
GPR[ESUN]-1659829818586
GPR[SSUN]-1659829818586
1870456228
GPR[SPVATF]-1659829818817
GPR[EPVATF]-1659829819047
GPR[SPS]-1659829819047
[306991] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:94.
GPR[EPS]-1659829819583
GPR[SPVATF]-1659829819583
GPR[EPVATF]-1659829819817
GPR[SPS]-1659829819817
[307749] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:94.
GPR[EPS]-1659829820341
GPR[ESUN]-1659829820342
GPR[SSUN]-1659829820342
1870456228
GPR[SPVATF]-1659829820584
GPR[EPVATF]-1659829820810
GPR[SPS]-1659829820810
[308753] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:89.
GPR[EPS]-1659829821345
GPR[SPVATF]-1659829821346
GPR[EPVATF]-1659829821599
GPR[SPS]-1659829821599
[309460] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:89.
GPR[EPS]-1659829822052
GPR[ESUN]-1659829822052
GPR[SSUN]-1659829822052
1870456228
GPR[ESUN]-1659829822279
GPR[SSUN]-1659829822279
1870456228
GPR[SPVATF]-1659829822494
GPR[EPVATF]-1659829822698
GPR[SPS]-1659829822698
[310778] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:73.
GPR[EPS]-1659829823370
GPR[SPVATF]-1659829823370
GPR[EPVATF]-1659829823590
GPR[SPS]-1659829823590
[311553] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:73.
GPR[EPS]-1659829824145
GPR[ESUN]-1659829824145
GPR[SSUN]-1659829824145
1870456228
GPR[SPVATF]-1659829824370
GPR[EPVATF]-1659829824598
GPR[SPS]-1659829824598
[313322] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckSideEffects:66.
GPR[EPS]-1659829825915
GPR[ESUN]-1659829825915
GPR[SSUN]-1659829825915
-1117079791
GPR[SPVATF]-1659829826134
GPR[EPVATF]-1659829826347
GPR[SPS]-1659829826347
[314237] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:794.
GPR[EPS]-1659829826829
GPR[ESUN]-1659829826829
GPR[SSUN]-1659829826829
-718432441
GPR[ESUN]-1659829827070
GPR[SSUN]-1659829827070
-718432441
GPR[SPVATF]-1659829827304
GPR[EPVATF]-1659829827687
GPR[SPS]-1659829827687
[315739] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:851.
GPR[EPS]-1659829828331
GPR[SPVATF]-1659829828331
GPR[EPVATF]-1659829828555
GPR[SPS]-1659829828555
[316673] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:851.
GPR[EPS]-1659829829265
GPR[ESUN]-1659829829265
GPR[SSUN]-1659829829265
-718432441
GPR[SPVATF]-1659829829495
GPR[EPVATF]-1659829829730
GPR[SPS]-1659829829730
[317839] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:847.
GPR[EPS]-1659829830431
GPR[ESUN]-1659829830431
GPR[SSUN]-1659829830431
-718432441
GPR[SPVATF]-1659829830662
GPR[EPVATF]-1659829830872
GPR[SPS]-1659829830872
[318966] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:844.
GPR[EPS]-1659829831558
GPR[SPVATF]-1659829831558
GPR[EPVATF]-1659829831789
GPR[SPS]-1659829831789
[319880] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:844.
GPR[EPS]-1659829832473
GPR[ESUN]-1659829832473
GPR[SSUN]-1659829832473
GPR[ESUN]-1659829832473
GPR[SSUN]-1659829832473
1537627151
GPR[ESUN]-1659829832691
GPR[SSUN]-1659829832692
-1345859678
GPR[ESUN]-1659829832988
GPR[SSUN]-1659829832988
-1345859678
GPR[ESUN]-1659829833257
GPR[SSUN]-1659829833257
-1345859678
GPR[SPVATF]-1659829833518
GPR[EPVATF]-1659829833775
GPR[SPS]-1659829833775
[321830] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:899.
GPR[EPS]-1659829834422
GPR[SPVATF]-1659829834422
GPR[EPVATF]-1659829834679
GPR[SPS]-1659829834679
[322691] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:899.
GPR[EPS]-1659829835283
GPR[ESUN]-1659829835283
GPR[SSUN]-1659829835283
-1345859678
GPR[ESUN]-1659829835549
GPR[SSUN]-1659829835549
GPR[ESUN]-1659829835549
GPR[SSUN]-1659829835549
GPR[ESUN]-1659829835549
GPR[SSUN]-1659829835549
GPR[ESUN]-1659829835549
GPR[SSUN]-1659829835549
GPR[ESUN]-1659829835549
GPR[SSUN]-1659829835549
GPR[ESUN]-1659829835549
GPR[SSUN]-1659829835549
GPR[ESUN]-1659829835549
GPR[SSUN]-1659829835549
GPR[ESUN]-1659829835549
GPR[SSUN]-1659829835549
GPR[ESUN]-1659829835549
GPR[SSUN]-1659829835549
GPR[ESUN]-1659829835549
GPR[SSUN]-1659829835549
GPR[ESUN]-1659829835550
GPR[SSUN]-1659829835550
GPR[ESUN]-1659829835550
GPR[SSUN]-1659829835550
GPR[ESUN]-1659829835550
GPR[SSUN]-1659829835550
GPR[ESUN]-1659829835550
GPR[SSUN]-1659829835550
GPR[ESUN]-1659829835550
GPR[SSUN]-1659829835550
GPR[ESUN]-1659829835550
GPR[SSUN]-1659829835550
GPR[ESUN]-1659829835550
GPR[SSUN]-1659829835550
GPR[ESUN]-1659829835550
GPR[SSUN]-1659829835550
GPR[ESUN]-1659829835550
GPR[SSUN]-1659829835550
GPR[ESUN]-1659829835550
GPR[SSUN]-1659829835550
1616555300
GPR[ESUN]-1659829835761
GPR[SSUN]-1659829835761
1187751237
GPR[SPVATF]-1659829836059
GPR[EPVATF]-1659829836269
GPR[SPS]-1659829836269
[324399] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:876.
GPR[EPS]-1659829836991
GPR[ESUN]-1659829836991
GPR[SSUN]-1659829836991
1187751237
GPR[ESUN]-1659829837297
GPR[SSUN]-1659829837297
1187751237
GPR[ESUN]-1659829837600
GPR[SSUN]-1659829837600
1187751237
GPR[SPVATF]-1659829837899
GPR[EPVATF]-1659829838115
GPR[SPS]-1659829838115
[326229] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:3113.
GPR[EPS]-1659829838821
GPR[ESUN]-1659829838821
GPR[SSUN]-1659829838821
1187751237
GPR[ESUN]-1659829839124
GPR[SSUN]-1659829839124
1187751237
GPR[ESUN]-1659829839448
GPR[SSUN]-1659829839448
1187751237
GPR[ESUN]-1659829839751
GPR[SSUN]-1659829839751
1187751237
GPR[SPVATF]-1659829840058
GPR[EPVATF]-1659829840281
GPR[SPS]-1659829840281
[328432] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:867.
GPR[EPS]-1659829841024
GPR[SPVATF]-1659829841024
GPR[EPVATF]-1659829841239
GPR[SPS]-1659829841239
[329355] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:867.
GPR[EPS]-1659829841947
GPR[ESUN]-1659829841947
GPR[SSUN]-1659829841947
-718432441
GPR[ESUN]-1659829842184
GPR[SSUN]-1659829842184
-718432441
GPR[SPVATF]-1659829842416
GPR[EPVATF]-1659829842647
GPR[SPS]-1659829842647
[330751] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1134.
GPR[EPS]-1659829843343
GPR[ESUN]-1659829843343
GPR[SSUN]-1659829843343
-718432441
GPR[ESUN]-1659829843566
GPR[SSUN]-1659829843566
-718432441
GPR[ESUN]-1659829843792
GPR[SSUN]-1659829843792
-718432441
GPR[SPVATF]-1659829844037
GPR[EPVATF]-1659829844276
GPR[SPS]-1659829844276
[332393] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:811.
GPR[EPS]-1659829844985
GPR[SPVATF]-1659829844985
GPR[EPVATF]-1659829845205
GPR[SPS]-1659829845205
[333298] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:811.
GPR[EPS]-1659829845890
GPR[ESUN]-1659829845890
GPR[SSUN]-1659829845890
-718432441
GPR[ESUN]-1659829846159
GPR[SSUN]-1659829846159
-1117079791
GPR[SPVATF]-1659829846379
GPR[EPVATF]-1659829846612
GPR[SPS]-1659829846612
[334489] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:793.
GPR[EPS]-1659829847081
GPR[SPVATF]-1659829847082
GPR[EPVATF]-1659829847310
GPR[SPS]-1659829847310
[335239] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:793.
GPR[EPS]-1659829847831
GPR[ESUN]-1659829847831
GPR[SSUN]-1659829847831
-1117079791
GPR[ESUN]-1659829848047
GPR[SSUN]-1659829848048
-1117079791
GPR[ESUN]-1659829848272
GPR[SSUN]-1659829848272
-1117079791
GPR[SPVATF]-1659829848490
GPR[EPVATF]-1659829848746
GPR[SPS]-1659829848746
[336678] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:652.
GPR[EPS]-1659829849270
GPR[ESUN]-1659829849270
GPR[SSUN]-1659829849270
-1117079791
GPR[SPVATF]-1659829849490
GPR[EPVATF]-1659829849753
GPR[SPS]-1659829849753
[337658] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:649.
GPR[EPS]-1659829850250
GPR[ESUN]-1659829850250
GPR[SSUN]-1659829850250
-1117079791
GPR[SPVATF]-1659829850492
GPR[EPVATF]-1659829850743
GPR[SPS]-1659829850743
[338662] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:648.
GPR[EPS]-1659829851254
GPR[ESUN]-1659829851254
GPR[SSUN]-1659829851254
-1117079791
GPR[ESUN]-1659829851479
GPR[SSUN]-1659829851479
-1117079791
GPR[SPVATF]-1659829851701
GPR[EPVATF]-1659829851966
GPR[SPS]-1659829851966
[339901] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:231.
GPR[EPS]-1659829852493
GPR[ESUN]-1659829852493
GPR[SSUN]-1659829852493
-1117079791
GPR[SPVATF]-1659829852718
GPR[EPVATF]-1659829852983
GPR[SPS]-1659829852983
[340907] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:279.
GPR[EPS]-1659829853499
GPR[ESUN]-1659829853499
GPR[SSUN]-1659829853499
-718432441
GPR[SPVATF]-1659829853748
GPR[EPVATF]-1659829853961
GPR[SPS]-1659829853961
[342065] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:809.
GPR[EPS]-1659829854657
GPR[SPVATF]-1659829854657
GPR[EPVATF]-1659829854934
GPR[SPS]-1659829854934
[343029] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:809.
GPR[EPS]-1659829855621
GPR[ESUN]-1659829855621
GPR[SSUN]-1659829855621
-718432441
GPR[SPVATF]-1659829855862
GPR[EPVATF]-1659829856093
GPR[SPS]-1659829856093
[344190] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:803.
GPR[EPS]-1659829856782
GPR[SPVATF]-1659829856783
GPR[EPVATF]-1659829857011
GPR[SPS]-1659829857011
[345095] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:803.
GPR[EPS]-1659829857687
GPR[ESUN]-1659829857687
GPR[SSUN]-1659829857687
-718432441
GPR[ESUN]-1659829857926
GPR[SSUN]-1659829857926
-718432441
GPR[SPVATF]-1659829858161
GPR[EPVATF]-1659829858384
GPR[SPS]-1659829858384
[346491] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:911.
GPR[EPS]-1659829859083
GPR[ESUN]-1659829859083
GPR[SSUN]-1659829859083
-718432441
GPR[SPVATF]-1659829859322
GPR[EPVATF]-1659829859555
GPR[SPS]-1659829859555
[347653] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:910.
GPR[EPS]-1659829860245
GPR[ESUN]-1659829860245
GPR[SSUN]-1659829860245
1187751237
GPR[SPVATF]-1659829860556
GPR[EPVATF]-1659829860782
GPR[SPS]-1659829860782
[348890] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:879.
GPR[EPS]-1659829861482
GPR[SPVATF]-1659829861482
GPR[EPVATF]-1659829861714
GPR[SPS]-1659829861714
[349892] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:879.
GPR[EPS]-1659829862484
GPR[ESUN]-1659829862484
GPR[SSUN]-1659829862484
-1117079791
GPR[ESUN]-1659829862707
GPR[SSUN]-1659829862707
-1117079791
GPR[SPVATF]-1659829862920
GPR[EPVATF]-1659829863123
[350531] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829863123
GPR[SSUN]-1659829863123
-1117079791
GPR[SPVATF]-1659829863418
GPR[EPVATF]-1659829863633
[351041] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829863633
GPR[SSUN]-1659829863634
-1117079791
GPR[SPVATF]-1659829863890
GPR[EPVATF]-1659829864095
[351503] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829864095
GPR[SSUN]-1659829864095
-1117079791
GPR[SPVATF]-1659829864324
GPR[EPVATF]-1659829864538
[351946] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829864538
GPR[SSUN]-1659829864539
-1117079791
GPR[ESUN]-1659829864778
GPR[SSUN]-1659829864778
-1117079791
GPR[SPVATF]-1659829865011
GPR[EPVATF]-1659829865227
[352636] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829865228
GPR[SSUN]-1659829865228
-1117079791
GPR[SPVATF]-1659829865449
GPR[EPVATF]-1659829865664
[353072] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829865664
GPR[SSUN]-1659829865664
2433571
GPR[ESUN]-1659829865933
GPR[SSUN]-1659829865933
2433571
GPR[SPVATF]-1659829866184
GPR[EPVATF]-1659829866424
GPR[SPS]-1659829866424
[354505] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:678.
GPR[EPS]-1659829867097
GPR[SPVATF]-1659829867097
GPR[EPVATF]-1659829868146
GPR[SPS]-1659829868146
[356202] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:678.
GPR[EPS]-1659829868794
GPR[ESUN]-1659829868794
GPR[SSUN]-1659829868794
2433571
GPR[ESUN]-1659829869053
GPR[SSUN]-1659829869053
2433571
GPR[SPVATF]-1659829869297
GPR[EPVATF]-1659829869555
GPR[SPS]-1659829869555
[357613] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:674.
GPR[EPS]-1659829870205
GPR[ESUN]-1659829870205
GPR[SSUN]-1659829870205
2433571
GPR[SPVATF]-1659829870456
GPR[EPVATF]-1659829870692
GPR[SPS]-1659829870692
[358773] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:673.
GPR[EPS]-1659829871365
GPR[ESUN]-1659829871365
GPR[SSUN]-1659829871365
2433571
GPR[SPVATF]-1659829871635
GPR[EPVATF]-1659829871876
GPR[SPS]-1659829871876
[359969] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:672.
GPR[EPS]-1659829872561
GPR[ESUN]-1659829872561
GPR[SSUN]-1659829872561
2433571
GPR[SPVATF]-1659829872819
GPR[EPVATF]-1659829873029
GPR[SPS]-1659829873029
[361080] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:671.
GPR[EPS]-1659829873672
GPR[ESUN]-1659829873672
GPR[SSUN]-1659829873672
1187751237
GPR[SPVATF]-1659829873966
GPR[EPVATF]-1659829874203
GPR[SPS]-1659829874203
[362360] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:841.
GPR[EPS]-1659829874952
GPR[SPVATF]-1659829874952
GPR[EPVATF]-1659829875178
GPR[SPS]-1659829875178
[363303] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:841.
GPR[EPS]-1659829875895
GPR[ESUN]-1659829875895
GPR[SSUN]-1659829875895
2433571
GPR[ESUN]-1659829876149
GPR[SSUN]-1659829876149
-1117079791
GPR[SPVATF]-1659829876371
GPR[EPVATF]-1659829876602
GPR[SPS]-1659829876602
[364516] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:811.
GPR[EPS]-1659829877108
GPR[ESUN]-1659829877108
GPR[SSUN]-1659829877108
GPR[ESUN]-1659829877108
GPR[SSUN]-1659829877108
-1117079791
GPR[ESUN]-1659829877336
GPR[SSUN]-1659829877336
-1117079791
GPR[SPVATF]-1659829877565
GPR[EPVATF]-1659829877779
[365187] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829877779
GPR[EPVATF]-1659829877981
[365389] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829877981
GPR[SSUN]-1659829877981
-1117079791
GPR[SPVATF]-1659829878199
GPR[EPVATF]-1659829878405
[365814] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829878406
GPR[SSUN]-1659829878406
-1117079791
GPR[SPVATF]-1659829878620
GPR[EPVATF]-1659829878830
[366238] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829878830
GPR[SSUN]-1659829878830
2433571
GPR[ESUN]-1659829879092
GPR[SSUN]-1659829879092
-1345859678
GPR[ESUN]-1659829879360
GPR[SSUN]-1659829879360
-1345859678
GPR[SPVATF]-1659829879642
GPR[EPVATF]-1659829879892
GPR[SPS]-1659829879892
[367928] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:617.
GPR[EPS]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
GPR[ESUN]-1659829880520
GPR[SSUN]-1659829880520
2433571
GPR[ESUN]-1659829880770
GPR[SSUN]-1659829880770
2433571
GPR[SPVATF]-1659829881026
GPR[EPVATF]-1659829881247
GPR[SPS]-1659829881248
[369312] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:591.
GPR[EPS]-1659829881905
GPR[ESUN]-1659829881905
GPR[SSUN]-1659829881905
2433571
GPR[ESUN]-1659829882190
GPR[SSUN]-1659829882190
-1117079791
GPR[ESUN]-1659829882415
GPR[SSUN]-1659829882415
-1117079791
GPR[SPVATF]-1659829882634
GPR[EPVATF]-1659829882886
GPR[SPS]-1659829882886
[371002] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:376.
GPR[EPS]-1659829883594
GPR[ESUN]-1659829883594
GPR[SSUN]-1659829883594
-1117079791
GPR[SPVATF]-1659829883836
GPR[EPVATF]-1659829884086
GPR[SPS]-1659829884086
[371999] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:375.
GPR[EPS]-1659829884591
GPR[ESUN]-1659829884591
GPR[SSUN]-1659829884591
-1117079791
GPR[SPVATF]-1659829884811
GPR[EPVATF]-1659829885067
GPR[SPS]-1659829885067
[372973] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:374.
GPR[EPS]-1659829885565
GPR[ESUN]-1659829885566
GPR[SSUN]-1659829885566
-1117079791
GPR[SPVATF]-1659829885782
GPR[EPVATF]-1659829886034
GPR[SPS]-1659829886034
[374361] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:373.
GPR[EPS]-1659829886954
GPR[ESUN]-1659829886954
GPR[SSUN]-1659829886954
-1117079791
GPR[ESUN]-1659829887543
GPR[SSUN]-1659829887543
-1117079791
GPR[SPVATF]-1659829888179
GPR[EPVATF]-1659829888696
GPR[SPS]-1659829888696
[376613] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:259.
GPR[EPS]-1659829889205
GPR[ESUN]-1659829889205
GPR[SSUN]-1659829889205
-718432441
GPR[SPVATF]-1659829889446
GPR[EPVATF]-1659829889678
GPR[SPS]-1659829889678
[377713] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:641.
GPR[EPS]-1659829890305
GPR[ESUN]-1659829890305
GPR[SSUN]-1659829890305
-718432441
GPR[SPVATF]-1659829890518
GPR[EPVATF]-1659829890712
GPR[SPS]-1659829890712
[378742] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:640.
GPR[EPS]-1659829891334
GPR[ESUN]-1659829891334
GPR[SSUN]-1659829891334
-718432441
GPR[SPVATF]-1659829891586
GPR[EPVATF]-1659829891775
GPR[SPS]-1659829891775
[379807] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:638.
GPR[EPS]-1659829892399
GPR[ESUN]-1659829892399
GPR[SSUN]-1659829892399
1187751237
GPR[SPVATF]-1659829892672
GPR[EPVATF]-1659829892857
GPR[SPS]-1659829892857
[380910] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1013.
GPR[EPS]-1659829893502
GPR[SPVATF]-1659829893503
GPR[EPVATF]-1659829893815
GPR[SPS]-1659829893815
[382328] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1013.
GPR[EPS]-1659829894920
GPR[ESUN]-1659829894920
GPR[SSUN]-1659829894920
1187751237
GPR[SPVATF]-1659829895192
GPR[EPVATF]-1659829895384
GPR[SPS]-1659829895384
[383458] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1010.
GPR[EPS]-1659829896050
GPR[SPVATF]-1659829896051
GPR[EPVATF]-1659829896243
GPR[SPS]-1659829896243
[384369] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1010.
GPR[EPS]-1659829896961
GPR[ESUN]-1659829896961
GPR[SSUN]-1659829896961
1187751237
GPR[ESUN]-1659829897274
GPR[SSUN]-1659829897274
-718432441
GPR[SPVATF]-1659829897515
GPR[EPVATF]-1659829897723
GPR[SPS]-1659829897723
[385841] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:972.
GPR[EPS]-1659829898433
GPR[ESUN]-1659829898433
GPR[SSUN]-1659829898433
704176156
GPR[SPVATF]-1659829898673
GPR[EPVATF]-1659829898926
GPR[SPS]-1659829898926
[386864] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.PrepareAst$PrepareAnnotations:171.
GPR[EPS]-1659829899456
GPR[ESUN]-1659829899456
GPR[SSUN]-1659829899456
GPR[ESUN]-1659829899456
GPR[SSUN]-1659829899456
GPR[ESUN]-1659829899456
GPR[SSUN]-1659829899456
GPR[ESUN]-1659829899456
GPR[SSUN]-1659829899456
1537627151
GPR[ESUN]-1659829899687
GPR[SSUN]-1659829899687
-1345859678
GPR[ESUN]-1659829899953
GPR[SSUN]-1659829899953
-1345859678
GPR[SPVATF]-1659829900220
GPR[EPVATF]-1659829900411
GPR[SPS]-1659829900411
[388389] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:715.
GPR[EPS]-1659829900981
GPR[SPVATF]-1659829900981
GPR[EPVATF]-1659829901171
GPR[SPS]-1659829901171
[389125] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:715.
GPR[EPS]-1659829901717
GPR[ESUN]-1659829901717
GPR[SSUN]-1659829901717
-1345859678
GPR[SPVATF]-1659829901960
GPR[EPVATF]-1659829902152
GPR[SPS]-1659829902152
[390200] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:714.
GPR[EPS]-1659829902792
GPR[ESUN]-1659829902792
GPR[SSUN]-1659829902792
-1345859678
GPR[SPVATF]-1659829903049
GPR[EPVATF]-1659829903277
GPR[SPS]-1659829903277
[391296] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:713.
GPR[EPS]-1659829903888
GPR[ESUN]-1659829903888
GPR[SSUN]-1659829903888
-1345859678
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
GPR[ESUN]-1659829904154
GPR[SSUN]-1659829904154
-718432441
GPR[SPVATF]-1659829904394
GPR[EPVATF]-1659829904625
GPR[SPS]-1659829904625
[392734] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else {
                unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState(first.getNext().isBlock() && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || first.isEmpty()) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.isComma()) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                unrollBinaryOperator(n, com.google.javascript.rhino.Token.COMMA, ",", context, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, 0, 0);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().isNumber()) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    cc.addOp(":", true);
                    addExpr(last, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((!first.isString()) || (!last.isString())) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                com.google.common.base.Preconditions.checkState(n.getParent().isObjectLit());
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.isFunction());
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GETTER_DEF) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n);
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && n.getParent().isScript());
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.isVar()) {
                            cc.endStatement();
                        }
                        if (c.isFunction()) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.isVar()) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.isString(), "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.isNumber();
                    if (needsParens) {
                        add("(");
                    }
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    add(")");
                } else {
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("null");
                break;
            case com.google.javascript.rhino.Token.THIS :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("this");
                break;
            case com.google.javascript.rhino.Token.FALSE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("false");
                break;
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("true");
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION)) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                com.google.common.base.Preconditions.checkState(childCount == 1, "Object lit key must have 1 child");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.STRING :
                com.google.common.base.Preconditions.checkState(childCount == 0, "A string may not have children");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if (c.isGetterDef() || c.isSetterDef()) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.isStringKey());
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (!first.isLabelName()) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    private void unrollBinaryOperator(com.google.javascript.rhino.Node n, int op, java.lang.String opStr, com.google.javascript.jscomp.CodeGenerator.Context context, com.google.javascript.jscomp.CodeGenerator.Context rhsContext, int leftPrecedence, int rightPrecedence) {
        com.google.javascript.rhino.Node firstNonOperator = n.getFirstChild();
        while (firstNonOperator.getType() == op) {
            firstNonOperator = firstNonOperator.getFirstChild();
        } 
        addExpr(firstNonOperator, leftPrecedence, context);
        com.google.javascript.rhino.Node current = firstNonOperator;
        do {
            current = current.getParent();
            cc.addOp(opStr, true);
            addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
        } while (current != n );
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return (len > 0) && (s.charAt(0) != '0');
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return (n.isName() && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (!n.isBlock())) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.isBlock()) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.isEmpty()) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.isVar()) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.isLabel()) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (!labeledStatement.isBlock()) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return n.isFunction() || n.isDo();
        }
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && n.isIn())) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            lastWasEmpty = n.isEmpty();
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    private void addJsString(com.google.javascript.rhino.Node n) {
        java.lang.String s = n.getString();
        boolean useSlashV = n.getBooleanProp(com.google.javascript.rhino.Node.SLASH_V);
        if (useSlashV) {
            add(jsString(n.getString(), useSlashV));
        } else {
            java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
            if (cached == null) {
                cached = jsString(n.getString(), useSlashV);
                ESCAPED_JS_STRINGS.put(s, cached);
            }
            add(cached);
        }
    }

    private java.lang.String jsString(java.lang.String s, boolean useSlashV) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            doublequote = "\\\"";
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(224).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(224).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(224).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(224).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(224).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(224).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(224).collectInput("useSlashV",useSlashV);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(224).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(224).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(224).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(224).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(224).collectionEnds();
            }
            if (runtimeAngelicValue)
                singlequote = "\'";

        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder, useSlashV);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder, false);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null, false);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    private static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder, boolean useSlashV) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\u000b' :
                    if (useSlashV) {
                        sb.append("\\v");
                    } else {
                        sb.append("\\x0B");
                    }
                    break;
                case '\b' :
                    sb.append("\\b");
                    break;
                case '\f' :
                    sb.append("\\f");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case ' ' :
                    sb.append("\\u2028");
                    break;
                case ' ' :
                    sb.append("\\u2029");
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.isBlock()) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (!c.isEmpty()) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.isBlock()) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (!c.isEmpty()) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[392734] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659829905326
GPR[SSUN]-1659829905326
-718432441
GPR[SPVATF]-1659829905570
GPR[EPVATF]-1659829905799
GPR[SPS]-1659829905799
[393850] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else {
                unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState(first.getNext().isBlock() && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || first.isEmpty()) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.isComma()) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                unrollBinaryOperator(n, com.google.javascript.rhino.Token.COMMA, ",", context, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, 0, 0);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().isNumber()) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    cc.addOp(":", true);
                    addExpr(last, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((!first.isString()) || (!last.isString())) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                com.google.common.base.Preconditions.checkState(n.getParent().isObjectLit());
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.isFunction());
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GETTER_DEF) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n);
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && n.getParent().isScript());
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.isVar()) {
                            cc.endStatement();
                        }
                        if (c.isFunction()) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.isVar()) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.isString(), "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.isNumber();
                    if (needsParens) {
                        add("(");
                    }
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    add(")");
                } else {
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("null");
                break;
            case com.google.javascript.rhino.Token.THIS :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("this");
                break;
            case com.google.javascript.rhino.Token.FALSE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("false");
                break;
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("true");
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION)) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                com.google.common.base.Preconditions.checkState(childCount == 1, "Object lit key must have 1 child");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.STRING :
                com.google.common.base.Preconditions.checkState(childCount == 0, "A string may not have children");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if (c.isGetterDef() || c.isSetterDef()) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.isStringKey());
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (!first.isLabelName()) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    private void unrollBinaryOperator(com.google.javascript.rhino.Node n, int op, java.lang.String opStr, com.google.javascript.jscomp.CodeGenerator.Context context, com.google.javascript.jscomp.CodeGenerator.Context rhsContext, int leftPrecedence, int rightPrecedence) {
        com.google.javascript.rhino.Node firstNonOperator = n.getFirstChild();
        while (firstNonOperator.getType() == op) {
            firstNonOperator = firstNonOperator.getFirstChild();
        } 
        addExpr(firstNonOperator, leftPrecedence, context);
        com.google.javascript.rhino.Node current = firstNonOperator;
        do {
            current = current.getParent();
            cc.addOp(opStr, true);
            addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
        } while (current != n );
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return (len > 0) && (s.charAt(0) != '0');
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return (n.isName() && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (!n.isBlock())) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.isBlock()) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.isEmpty()) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.isVar()) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.isLabel()) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (!labeledStatement.isBlock()) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return n.isFunction() || n.isDo();
        }
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && n.isIn())) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            lastWasEmpty = n.isEmpty();
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    private void addJsString(com.google.javascript.rhino.Node n) {
        java.lang.String s = n.getString();
        boolean useSlashV = n.getBooleanProp(com.google.javascript.rhino.Node.SLASH_V);
        if (useSlashV) {
            add(jsString(n.getString(), useSlashV));
        } else {
            java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
            if (cached == null) {
                cached = jsString(n.getString(), useSlashV);
                ESCAPED_JS_STRINGS.put(s, cached);
            }
            add(cached);
        }
    }

    private java.lang.String jsString(java.lang.String s, boolean useSlashV) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(225).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(225).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(225).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(225).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(225).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(225).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(225).collectInput("useSlashV",useSlashV);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(225).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(225).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(225).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(225).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(225).collectionEnds();
            }
            if (runtimeAngelicValue)
                doublequote = "\\\"";

            singlequote = "\'";
        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder, useSlashV);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder, false);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null, false);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    private static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder, boolean useSlashV) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\u000b' :
                    if (useSlashV) {
                        sb.append("\\v");
                    } else {
                        sb.append("\\x0B");
                    }
                    break;
                case '\b' :
                    sb.append("\\b");
                    break;
                case '\f' :
                    sb.append("\\f");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case ' ' :
                    sb.append("\\u2028");
                    break;
                case ' ' :
                    sb.append("\\u2029");
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.isBlock()) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (!c.isEmpty()) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.isBlock()) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (!c.isEmpty()) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[393851] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659829906443
GPR[SSUN]-1659829906443
-718432441
GPR[SPVATF]-1659829906674
GPR[EPVATF]-1659829906903
GPR[SPS]-1659829906903
[394971] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else {
                unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState(first.getNext().isBlock() && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || first.isEmpty()) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.isComma()) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                unrollBinaryOperator(n, com.google.javascript.rhino.Token.COMMA, ",", context, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, 0, 0);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().isNumber()) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    cc.addOp(":", true);
                    addExpr(last, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((!first.isString()) || (!last.isString())) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                com.google.common.base.Preconditions.checkState(n.getParent().isObjectLit());
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.isFunction());
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GETTER_DEF) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n);
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && n.getParent().isScript());
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.isVar()) {
                            cc.endStatement();
                        }
                        if (c.isFunction()) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.isVar()) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.isString(), "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.isNumber();
                    if (needsParens) {
                        add("(");
                    }
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    add(")");
                } else {
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("null");
                break;
            case com.google.javascript.rhino.Token.THIS :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("this");
                break;
            case com.google.javascript.rhino.Token.FALSE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("false");
                break;
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("true");
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION)) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                com.google.common.base.Preconditions.checkState(childCount == 1, "Object lit key must have 1 child");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.STRING :
                com.google.common.base.Preconditions.checkState(childCount == 0, "A string may not have children");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if (c.isGetterDef() || c.isSetterDef()) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.isStringKey());
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (!first.isLabelName()) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    private void unrollBinaryOperator(com.google.javascript.rhino.Node n, int op, java.lang.String opStr, com.google.javascript.jscomp.CodeGenerator.Context context, com.google.javascript.jscomp.CodeGenerator.Context rhsContext, int leftPrecedence, int rightPrecedence) {
        com.google.javascript.rhino.Node firstNonOperator = n.getFirstChild();
        while (firstNonOperator.getType() == op) {
            firstNonOperator = firstNonOperator.getFirstChild();
        } 
        addExpr(firstNonOperator, leftPrecedence, context);
        com.google.javascript.rhino.Node current = firstNonOperator;
        do {
            current = current.getParent();
            cc.addOp(opStr, true);
            addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
        } while (current != n );
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return (len > 0) && (s.charAt(0) != '0');
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return (n.isName() && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (!n.isBlock())) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.isBlock()) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.isEmpty()) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.isVar()) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.isLabel()) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (!labeledStatement.isBlock()) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return n.isFunction() || n.isDo();
        }
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && n.isIn())) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            lastWasEmpty = n.isEmpty();
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    private void addJsString(com.google.javascript.rhino.Node n) {
        java.lang.String s = n.getString();
        boolean useSlashV = n.getBooleanProp(com.google.javascript.rhino.Node.SLASH_V);
        if (useSlashV) {
            add(jsString(n.getString(), useSlashV));
        } else {
            java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
            if (cached == null) {
                cached = jsString(n.getString(), useSlashV);
                ESCAPED_JS_STRINGS.put(s, cached);
            }
            add(cached);
        }
    }

    private java.lang.String jsString(java.lang.String s, boolean useSlashV) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            boolean spoonDefaultValue = false;
            try {
                spoonDefaultValue = true;
            } catch (java.lang.Exception __NopolProcessorException) {
            }
            boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
            if (fr.inria.lille.commons.trace.RuntimeValues.instance(226).isEnabled()) {
                fr.inria.lille.commons.trace.RuntimeValues.instance(226).collectionStarts();
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(226).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(226).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(226).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(226).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(226).collectInput("useSlashV",useSlashV);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(226).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(226).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
                try{fr.inria.lille.commons.trace.RuntimeValues.instance(226).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
                fr.inria.lille.commons.trace.RuntimeValues.instance(226).collectOutput(runtimeAngelicValue);
                fr.inria.lille.commons.trace.RuntimeValues.instance(226).collectionEnds();
            }
            if (runtimeAngelicValue)
                quote = '\"';

            doublequote = "\\\"";
            singlequote = "\'";
        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder, useSlashV);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder, false);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null, false);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    private static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder, boolean useSlashV) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\u000b' :
                    if (useSlashV) {
                        sb.append("\\v");
                    } else {
                        sb.append("\\x0B");
                    }
                    break;
                case '\b' :
                    sb.append("\\b");
                    break;
                case '\f' :
                    sb.append("\\f");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case ' ' :
                    sb.append("\\u2028");
                    break;
                case ' ' :
                    sb.append("\\u2029");
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.isBlock()) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (!c.isEmpty()) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.isBlock()) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (!c.isEmpty()) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[394971] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659829907563
GPR[SSUN]-1659829907563
-718432441
GPR[SPVATF]-1659829907799
GPR[EPVATF]-1659829908030
GPR[SPS]-1659829908030
[396129] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:963.
GPR[EPS]-1659829908721
GPR[ESUN]-1659829908721
GPR[SSUN]-1659829908721
-718432441
GPR[SPVATF]-1659829908970
GPR[EPVATF]-1659829909204
GPR[SPS]-1659829909204
[398123] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:961.
GPR[EPS]-1659829910715
GPR[ESUN]-1659829910715
GPR[SSUN]-1659829910715
-718432441
GPR[SPVATF]-1659829910993
GPR[EPVATF]-1659829911218
GPR[SPS]-1659829911218
[399329] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:960.
GPR[EPS]-1659829911921
GPR[ESUN]-1659829911921
GPR[SSUN]-1659829911921
-718432441
GPR[SPVATF]-1659829912164
GPR[EPVATF]-1659829912522
GPR[SPS]-1659829912522
[400618] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:959.
GPR[EPS]-1659829913210
GPR[SPVATF]-1659829913210
GPR[EPVATF]-1659829913442
GPR[SPS]-1659829913442
[401529] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:959.
GPR[EPS]-1659829914121
GPR[ESUN]-1659829914121
GPR[SSUN]-1659829914121
-718432441
GPR[ESUN]-1659829914358
GPR[SSUN]-1659829914358
-718432441
GPR[ESUN]-1659829914593
GPR[SSUN]-1659829914593
-718432441
GPR[SPVATF]-1659829914836
GPR[EPVATF]-1659829915061
GPR[SPS]-1659829915061
[403110] ERROR ConstraintModelBuilder - Unable to compile the change: 
class CodeGenerator {
    private final java.util.Map<java.lang.String, java.lang.String> ESCAPED_JS_STRINGS = com.google.common.collect.Maps.newHashMap();

    private static final char[] HEX_CHARS = new char[]{ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

    private final com.google.javascript.jscomp.CodeConsumer cc;

    private final java.nio.charset.CharsetEncoder outputCharsetEncoder;

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer, java.nio.charset.Charset outputCharset) {
        cc = consumer;
        if ((outputCharset == null) || (outputCharset == com.google.common.base.Charsets.US_ASCII)) {
            this.outputCharsetEncoder = null;
        } else {
            this.outputCharsetEncoder = outputCharset.newEncoder();
        }
    }

    CodeGenerator(com.google.javascript.jscomp.CodeConsumer consumer) {
        this(consumer, null);
    }

    public void tagAsStrict() {
        add("'use strict';");
    }

    void add(java.lang.String str) {
        cc.add(str);
    }

    private void addIdentifier(java.lang.String identifier) {
        cc.addIdentifier(com.google.javascript.jscomp.CodeGenerator.identifierEscape(identifier));
    }

    void add(com.google.javascript.rhino.Node n) {
        add(n, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void add(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if (!cc.continueProcessing()) {
            return;
        }
        int type = n.getType();
        java.lang.String opstr = com.google.javascript.jscomp.NodeUtil.opToStr(type);
        int childCount = n.getChildCount();
        com.google.javascript.rhino.Node first = n.getFirstChild();
        com.google.javascript.rhino.Node last = n.getLastChild();
        if ((opstr != null) && (first != last)) {
            com.google.common.base.Preconditions.checkState(childCount == 2, "Bad binary operator \"%s\": expected 2 arguments but got %s", opstr, childCount);
            int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
            com.google.javascript.jscomp.CodeGenerator.Context rhsContext = getContextForNoInOperator(context);
            if ((last.getType() == type) && com.google.javascript.jscomp.NodeUtil.isAssociative(type)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else if (com.google.javascript.jscomp.NodeUtil.isAssignmentOp(n) && com.google.javascript.jscomp.NodeUtil.isAssignmentOp(last)) {
                addExpr(first, p, context);
                cc.addOp(opstr, true);
                addExpr(last, p, rhsContext);
            } else {
                unrollBinaryOperator(n, type, opstr, context, rhsContext, p, p + 1);
            }
            return;
        }
        cc.startSourceMapping(n);
        switch (type) {
            case com.google.javascript.rhino.Token.TRY :
                {
                    com.google.common.base.Preconditions.checkState(first.getNext().isBlock() && (!first.getNext().hasMoreThanOneChild()));
                    com.google.common.base.Preconditions.checkState((childCount >= 2) && (childCount <= 3));
                    add("try");
                    add(first, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    com.google.javascript.rhino.Node catchblock = first.getNext().getFirstChild();
                    if (catchblock != null) {
                        add(catchblock);
                    }
                    if (childCount == 3) {
                        add("finally");
                        add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CATCH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("catch(");
                add(first);
                add(")");
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.THROW :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("throw");
                add(first);
                cc.endStatement(true);
                break;
            case com.google.javascript.rhino.Token.RETURN :
                add("return");
                if (childCount == 1) {
                    add(first);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 0);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.VAR :
                if (first != null) {
                    add("var ");
                    addList(first, false, getContextForNoInOperator(context));
                }
                break;
            case com.google.javascript.rhino.Token.LABEL_NAME :
                com.google.common.base.Preconditions.checkState(!n.getString().isEmpty());
                addIdentifier(n.getString());
                break;
            case com.google.javascript.rhino.Token.NAME :
                if ((first == null) || first.isEmpty()) {
                    addIdentifier(n.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    addIdentifier(n.getString());
                    cc.addOp("=", true);
                    if (first.isComma()) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.ASSIGN), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    } else {
                        addExpr(first, 0, getContextForNoInOperator(context));
                    }
                }
                break;
            case com.google.javascript.rhino.Token.ARRAYLIT :
                add("[");
                addArrayList(first);
                add("]");
                break;
            case com.google.javascript.rhino.Token.PARAM_LIST :
                add("(");
                addList(first);
                add(")");
                break;
            case com.google.javascript.rhino.Token.COMMA :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                unrollBinaryOperator(n, com.google.javascript.rhino.Token.COMMA, ",", context, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, 0, 0);
                break;
            case com.google.javascript.rhino.Token.NUMBER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addNumber(n.getDouble());
                break;
            case com.google.javascript.rhino.Token.TYPEOF :
            case com.google.javascript.rhino.Token.VOID :
            case com.google.javascript.rhino.Token.NOT :
            case com.google.javascript.rhino.Token.BITNOT :
            case com.google.javascript.rhino.Token.POS :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.NEG :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    if (n.getFirstChild().isNumber()) {
                        cc.addNumber(-n.getFirstChild().getDouble());
                    } else {
                        cc.addOp(com.google.javascript.jscomp.NodeUtil.opToStrNoFail(type), false);
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.HOOK :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    int p = com.google.javascript.jscomp.NodeUtil.precedence(type);
                    addExpr(first, p + 1, context);
                    cc.addOp("?", true);
                    addExpr(first.getNext(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    cc.addOp(":", true);
                    addExpr(last, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    break;
                }
            case com.google.javascript.rhino.Token.REGEXP :
                if ((!first.isString()) || (!last.isString())) {
                    throw new java.lang.Error("Expected children to be strings");
                }
                java.lang.String regexp = com.google.javascript.jscomp.CodeGenerator.regexpEscape(first.getString(), outputCharsetEncoder);
                if (childCount == 2) {
                    add(regexp + last.getString());
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    add(regexp);
                }
                break;
            case com.google.javascript.rhino.Token.FUNCTION :
                if (n.getClass() != com.google.javascript.rhino.Node.class) {
                    throw new java.lang.Error("Unexpected Node subclass.");
                }
                com.google.common.base.Preconditions.checkState(childCount == 3);
                boolean funcNeedsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                if (funcNeedsParens) {
                    add("(");
                }
                add("function");
                add(first);
                add(first.getNext());
                add(last, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                cc.endFunction(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                if (funcNeedsParens) {
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.GETTER_DEF :
            case com.google.javascript.rhino.Token.SETTER_DEF :
                com.google.common.base.Preconditions.checkState(n.getParent().isObjectLit());
                com.google.common.base.Preconditions.checkState(childCount == 1);
                com.google.common.base.Preconditions.checkState(first.isFunction());
                com.google.common.base.Preconditions.checkState(first.getFirstChild().getString().isEmpty());
                if (type == com.google.javascript.rhino.Token.GETTER_DEF) {
                    com.google.common.base.Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());
                    add("get ");
                } else {
                    com.google.common.base.Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());
                    add("set ");
                }
                java.lang.String name = n.getString();
                com.google.javascript.rhino.Node fn = first;
                com.google.javascript.rhino.Node parameters = fn.getChildAtIndex(1);
                com.google.javascript.rhino.Node body = fn.getLastChild();
                if (((!n.isQuotedString()) && com.google.javascript.rhino.TokenStream.isJSIdentifier(name)) && com.google.javascript.jscomp.NodeUtil.isLatin(name)) {
                    add(name);
                } else {
                    double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(name);
                    if (!java.lang.Double.isNaN(d)) {
                        cc.addNumber(d);
                    } else {
                        addJsString(n);
                    }
                }
                add(parameters);
                add(body, com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK);
                break;
            case com.google.javascript.rhino.Token.SCRIPT :
            case com.google.javascript.rhino.Token.BLOCK :
                {
                    if (n.getClass() != com.google.javascript.rhino.Node.class) {
                        throw new java.lang.Error("Unexpected Node subclass.");
                    }
                    boolean preserveBlock = context == com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
                    if (preserveBlock) {
                        cc.beginBlock();
                    }
                    boolean preferLineBreaks = (type == com.google.javascript.rhino.Token.SCRIPT) || ((((type == com.google.javascript.rhino.Token.BLOCK) && (!preserveBlock)) && (n.getParent() != null)) && n.getParent().isScript());
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        add(c, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                        if (c.isVar()) {
                            cc.endStatement();
                        }
                        if (c.isFunction()) {
                            cc.maybeLineBreak();
                        }
                        if (preferLineBreaks) {
                            cc.notePreferredLineBreak();
                        }
                    }
                    if (preserveBlock) {
                        cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.FOR :
                if (childCount == 4) {
                    add("for(");
                    if (first.isVar()) {
                        add(first, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    } else {
                        addExpr(first, 0, com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE);
                    }
                    add(";");
                    add(first.getNext());
                    add(";");
                    add(first.getNext().getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    com.google.common.base.Preconditions.checkState(childCount == 3);
                    add("for(");
                    add(first);
                    add("in");
                    add(first.getNext());
                    add(")");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                }
                break;
            case com.google.javascript.rhino.Token.DO :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("do");
                addNonEmptyStatement(first, com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                add("while(");
                add(last);
                add(")");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.WHILE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("while(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.EMPTY :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                break;
            case com.google.javascript.rhino.Token.GETPROP :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETPROP: expected 2 children, but got %s", childCount);
                    com.google.common.base.Preconditions.checkState(last.isString(), "Bad GETPROP: RHS should be STRING");
                    boolean needsParens = first.isNumber();
                    if (needsParens) {
                        add("(");
                    }
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                    if (needsParens) {
                        add(")");
                    }
                    add(".");
                    addIdentifier(last.getString());
                    break;
                }
            case com.google.javascript.rhino.Token.GETELEM :
                com.google.common.base.Preconditions.checkState(childCount == 2, "Bad GETELEM: expected 2 children but got %s", childCount);
                addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                add("[");
                add(first.getNext());
                add("]");
                break;
            case com.google.javascript.rhino.Token.WITH :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("with(");
                add(first);
                add(")");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                break;
            case com.google.javascript.rhino.Token.INC :
            case com.google.javascript.rhino.Token.DEC :
                {
                    com.google.common.base.Preconditions.checkState(childCount == 1);
                    java.lang.String o = (type == com.google.javascript.rhino.Token.INC) ? "++" : "--";
                    int postProp = n.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
                    if (postProp != 0) {
                        addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                        cc.addOp(o, false);
                    } else {
                        cc.addOp(o, false);
                        add(first);
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.CALL :
                if (isIndirectEval(first) || (n.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) && com.google.javascript.jscomp.NodeUtil.isGet(first))) {
                    add("(0,");
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(com.google.javascript.rhino.Token.COMMA), com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                    add(")");
                } else {
                    addExpr(first, com.google.javascript.jscomp.NodeUtil.precedence(type), context);
                }
                add("(");
                addList(first.getNext());
                add(")");
                break;
            case com.google.javascript.rhino.Token.IF :
                boolean hasElse = childCount == 3;
                boolean ambiguousElseClause = (context == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE) && (!hasElse);
                if (ambiguousElseClause) {
                    cc.beginBlock();
                }
                add("if(");
                add(first);
                add(")");
                if (hasElse) {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE, false);
                    add("else");
                    addNonEmptyStatement(last, getContextForNonEmptyExpression(context), false);
                } else {
                    addNonEmptyStatement(first.getNext(), com.google.javascript.jscomp.CodeGenerator.Context.OTHER, false);
                    com.google.common.base.Preconditions.checkState(childCount == 2);
                }
                if (ambiguousElseClause) {
                    cc.endBlock();
                }
                break;
            case com.google.javascript.rhino.Token.NULL :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("null");
                break;
            case com.google.javascript.rhino.Token.THIS :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("this");
                break;
            case com.google.javascript.rhino.Token.FALSE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("false");
                break;
            case com.google.javascript.rhino.Token.TRUE :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                cc.addConstant("true");
                break;
            case com.google.javascript.rhino.Token.CONTINUE :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("continue");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.DEBUGGER :
                com.google.common.base.Preconditions.checkState(childCount == 0);
                add("debugger");
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.BREAK :
                com.google.common.base.Preconditions.checkState(childCount <= 1);
                add("break");
                if (childCount == 1) {
                    if (!first.isLabelName()) {
                        throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                    }
                    add(" ");
                    add(first);
                }
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.EXPR_RESULT :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add(first, com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR);
                cc.endStatement();
                break;
            case com.google.javascript.rhino.Token.NEW :
                add("new ");
                int precedence = com.google.javascript.jscomp.NodeUtil.precedence(type);
                if (com.google.javascript.jscomp.NodeUtil.containsType(first, com.google.javascript.rhino.Token.CALL, com.google.javascript.jscomp.NodeUtil.MATCH_NOT_FUNCTION)) {
                    precedence = com.google.javascript.jscomp.NodeUtil.precedence(first.getType()) + 1;
                }
                addExpr(first, precedence, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                com.google.javascript.rhino.Node next = first.getNext();
                if (next != null) {
                    add("(");
                    addList(next);
                    add(")");
                }
                break;
            case com.google.javascript.rhino.Token.STRING_KEY :
                com.google.common.base.Preconditions.checkState(childCount == 1, "Object lit key must have 1 child");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.STRING :
                com.google.common.base.Preconditions.checkState(childCount == 0, "A string may not have children");
                addJsString(n);
                break;
            case com.google.javascript.rhino.Token.DELPROP :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("delete ");
                add(first);
                break;
            case com.google.javascript.rhino.Token.OBJECTLIT :
                {
                    boolean needsParens = context == com.google.javascript.jscomp.CodeGenerator.Context.START_OF_EXPR;
                    if (needsParens) {
                        add("(");
                    }
                    add("{");
                    for (com.google.javascript.rhino.Node c = first; c != null; c = c.getNext()) {
                        if (c != first) {
                            cc.listSeparator();
                        }
                        if (c.isGetterDef() || c.isSetterDef()) {
                            add(c);
                        } else {
                            com.google.common.base.Preconditions.checkState(c.isStringKey());
                            java.lang.String key = c.getString();
                            if ((((!c.isQuotedString()) && (!com.google.javascript.rhino.TokenStream.isKeyword(key))) && com.google.javascript.rhino.TokenStream.isJSIdentifier(key)) && com.google.javascript.jscomp.NodeUtil.isLatin(key)) {
                                add(key);
                            } else {
                                double d = com.google.javascript.jscomp.CodeGenerator.getSimpleNumber(key);
                                if (!java.lang.Double.isNaN(d)) {
                                    cc.addNumber(d);
                                } else {
                                    addExpr(c, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                                }
                            }
                            add(":");
                            addExpr(c.getFirstChild(), 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
                        }
                    }
                    add("}");
                    if (needsParens) {
                        add(")");
                    }
                    break;
                }
            case com.google.javascript.rhino.Token.SWITCH :
                add("switch(");
                add(first);
                add(")");
                cc.beginBlock();
                addAllSiblings(first.getNext());
                cc.endBlock(context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                break;
            case com.google.javascript.rhino.Token.CASE :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                add("case ");
                add(first);
                addCaseBody(last);
                break;
            case com.google.javascript.rhino.Token.DEFAULT_CASE :
                com.google.common.base.Preconditions.checkState(childCount == 1);
                add("default");
                addCaseBody(first);
                break;
            case com.google.javascript.rhino.Token.LABEL :
                com.google.common.base.Preconditions.checkState(childCount == 2);
                if (!first.isLabelName()) {
                    throw new java.lang.Error("Unexpected token type. Should be LABEL_NAME.");
                }
                add(first);
                add(":");
                addNonEmptyStatement(last, getContextForNonEmptyExpression(context), true);
                break;
            default :
                throw new java.lang.Error((("Unknown type " + type) + "\n") + n.toStringTree());
        }
        cc.endSourceMapping(n);
    }

    private void unrollBinaryOperator(com.google.javascript.rhino.Node n, int op, java.lang.String opStr, com.google.javascript.jscomp.CodeGenerator.Context context, com.google.javascript.jscomp.CodeGenerator.Context rhsContext, int leftPrecedence, int rightPrecedence) {
        com.google.javascript.rhino.Node firstNonOperator = n.getFirstChild();
        while (firstNonOperator.getType() == op) {
            firstNonOperator = firstNonOperator.getFirstChild();
        } 
        addExpr(firstNonOperator, leftPrecedence, context);
        com.google.javascript.rhino.Node current = firstNonOperator;
        do {
            current = current.getParent();
            cc.addOp(opStr, true);
            addExpr(current.getFirstChild().getNext(), rightPrecedence, rhsContext);
        } while (current != n );
    }

    static boolean isSimpleNumber(java.lang.String s) {
        int len = s.length();
        for (int index = 0; index < len; index++) {
            char c = s.charAt(index);
            if ((c < '0') || (c > '9')) {
                return false;
            }
        }
        return (len > 0) && (s.charAt(0) != '0');
    }

    static double getSimpleNumber(java.lang.String s) {
        if (com.google.javascript.jscomp.CodeGenerator.isSimpleNumber(s)) {
            try {
                long l = java.lang.Long.parseLong(s);
                if (l < com.google.javascript.jscomp.NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {
                    return l;
                }
            } catch (java.lang.NumberFormatException e) {
            }
        }
        return java.lang.Double.NaN;
    }

    private boolean isIndirectEval(com.google.javascript.rhino.Node n) {
        return (n.isName() && "eval".equals(n.getString())) && (!n.getBooleanProp(com.google.javascript.rhino.Node.DIRECT_EVAL));
    }

    private void addNonEmptyStatement(com.google.javascript.rhino.Node n, com.google.javascript.jscomp.CodeGenerator.Context context, boolean allowNonBlockChild) {
        com.google.javascript.rhino.Node nodeToProcess = n;
        if ((!allowNonBlockChild) && (!n.isBlock())) {
            throw new java.lang.Error("Missing BLOCK child.");
        }
        if (n.isBlock()) {
            int count = com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2);
            if (count == 0) {
                if (cc.shouldPreserveExtraBlocks()) {
                    cc.beginBlock();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                } else {
                    cc.endStatement(true);
                }
                return;
            }
            if (count == 1) {
                com.google.javascript.rhino.Node firstAndOnlyChild = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n);
                boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();
                if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) {
                    cc.beginBlock();
                    add(firstAndOnlyChild, com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT);
                    cc.maybeLineBreak();
                    cc.endBlock(cc.breakAfterBlockFor(n, context == com.google.javascript.jscomp.CodeGenerator.Context.STATEMENT));
                    return;
                } else {
                    nodeToProcess = firstAndOnlyChild;
                }
            }
            if (count > 1) {
                context = com.google.javascript.jscomp.CodeGenerator.Context.PRESERVE_BLOCK;
            }
        }
        if (nodeToProcess.isEmpty()) {
            cc.endStatement(true);
        } else {
            add(nodeToProcess, context);
            if (nodeToProcess.isVar()) {
                cc.endStatement();
            }
        }
    }

    private boolean isOneExactlyFunctionOrDo(com.google.javascript.rhino.Node n) {
        if (n.isLabel()) {
            com.google.javascript.rhino.Node labeledStatement = n.getLastChild();
            if (!labeledStatement.isBlock()) {
                return isOneExactlyFunctionOrDo(labeledStatement);
            } else if (com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(n, 2) == 1) {
                return isOneExactlyFunctionOrDo(com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(n));
            } else {
                return false;
            }
        } else {
            return n.isFunction() || n.isDo();
        }
    }

    private void addExpr(com.google.javascript.rhino.Node n, int minPrecedence, com.google.javascript.jscomp.CodeGenerator.Context context) {
        if ((com.google.javascript.jscomp.NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE) && n.isIn())) {
            add("(");
            add(n, clearContextForNoInOperator(context));
            add(")");
        } else {
            add(n, context);
        }
    }

    void addList(com.google.javascript.rhino.Node firstInList) {
        addList(firstInList, true, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument) {
        addList(firstInList, isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
    }

    void addList(com.google.javascript.rhino.Node firstInList, boolean isArrayOrFunctionArgument, com.google.javascript.jscomp.CodeGenerator.Context lhsContext) {
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            boolean isFirst = n == firstInList;
            if (isFirst) {
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
            } else {
                cc.listSeparator();
                addExpr(n, isArrayOrFunctionArgument ? 1 : 0, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            }
        }
    }

    void addArrayList(com.google.javascript.rhino.Node firstInList) {
        boolean lastWasEmpty = false;
        for (com.google.javascript.rhino.Node n = firstInList; n != null; n = n.getNext()) {
            if (n != firstInList) {
                cc.listSeparator();
            }
            addExpr(n, 1, com.google.javascript.jscomp.CodeGenerator.Context.OTHER);
            lastWasEmpty = n.isEmpty();
        }
        if (lastWasEmpty) {
            cc.listSeparator();
        }
    }

    void addCaseBody(com.google.javascript.rhino.Node caseBody) {
        cc.beginCaseBody();
        add(caseBody);
        cc.endCaseBody();
    }

    void addAllSiblings(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n; c != null; c = c.getNext()) {
            add(c);
        }
    }

    private void addJsString(com.google.javascript.rhino.Node n) {
        java.lang.String s = n.getString();
        boolean useSlashV = n.getBooleanProp(com.google.javascript.rhino.Node.SLASH_V);
        if (useSlashV) {
            add(jsString(n.getString(), useSlashV));
        } else {
            java.lang.String cached = ESCAPED_JS_STRINGS.get(s);
            if (cached == null) {
                cached = jsString(n.getString(), useSlashV);
                ESCAPED_JS_STRINGS.put(s, cached);
            }
            add(cached);
        }
    }

    private java.lang.String jsString(java.lang.String s, boolean useSlashV) {
        int singleq = 0;
        int doubleq = 0;
        for (int i = 0; i < s.length(); i++) {
            switch (s.charAt(i)) {
                case '"' :
                    doubleq++;
                    break;
                case '\'' :
                    singleq++;
                    break;
            }
        }
        java.lang.String doublequote;
        java.lang.String singlequote;
        char quote;
        boolean spoonDefaultValue = false;
        try {
            spoonDefaultValue = true;
        } catch (java.lang.Exception __NopolProcessorException) {
        }
        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
        if (fr.inria.lille.commons.trace.RuntimeValues.instance(232).isEnabled()) {
            fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectionStarts();
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("singleq",singleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("com.google.javascript.jscomp.CodeGenerator.HEX_CHARS",com.google.javascript.jscomp.CodeGenerator.HEX_CHARS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS",com.google.javascript.jscomp.CodeGenerator.this.ESCAPED_JS_STRINGS);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("s",s);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("useSlashV",useSlashV);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("doubleq",doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("singleq < doubleq",singleq < doubleq);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("com.google.javascript.jscomp.CodeGenerator.this.cc",com.google.javascript.jscomp.CodeGenerator.this.cc);} catch (Exception ex1) {ex1.printStackTrace();};
            try{fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectInput("com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder",com.google.javascript.jscomp.CodeGenerator.this.outputCharsetEncoder);} catch (Exception ex1) {ex1.printStackTrace();};
            fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectOutput(runtimeAngelicValue);
            fr.inria.lille.commons.trace.RuntimeValues.instance(232).collectionEnds();
        }
        if (runtimeAngelicValue) if (singleq < doubleq) {
            quote = '\'';
            doublequote = "\"";
            singlequote = "\\\'";
        } else {
            quote = '\"';
            doublequote = "\\\"";
            singlequote = "\'";
        }
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, quote, doublequote, singlequote, "\\\\", outputCharsetEncoder, useSlashV);
    }

    static java.lang.String regexpEscape(java.lang.String s, java.nio.charset.CharsetEncoder outputCharsetEncoder) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '/', "\"", "'", "\\", outputCharsetEncoder, false);
    }

    static java.lang.String escapeToDoubleQuotedJsString(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.strEscape(s, '"', "\\\"", "\'", "\\\\", null, false);
    }

    static java.lang.String regexpEscape(java.lang.String s) {
        return com.google.javascript.jscomp.CodeGenerator.regexpEscape(s, null);
    }

    private static java.lang.String strEscape(java.lang.String s, char quote, java.lang.String doublequoteEscape, java.lang.String singlequoteEscape, java.lang.String backslashEscape, java.nio.charset.CharsetEncoder outputCharsetEncoder, boolean useSlashV) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder(s.length() + 2);
        sb.append(quote);
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\u0000' :
                    sb.append("\\x00");
                    break;
                case '\u000b' :
                    if (useSlashV) {
                        sb.append("\\v");
                    } else {
                        sb.append("\\x0B");
                    }
                    break;
                case '\b' :
                    sb.append("\\b");
                    break;
                case '\f' :
                    sb.append("\\f");
                    break;
                case '\n' :
                    sb.append("\\n");
                    break;
                case '\r' :
                    sb.append("\\r");
                    break;
                case '\t' :
                    sb.append("\\t");
                    break;
                case '\\' :
                    sb.append(backslashEscape);
                    break;
                case '\"' :
                    sb.append(doublequoteEscape);
                    break;
                case '\'' :
                    sb.append(singlequoteEscape);
                    break;
                case ' ' :
                    sb.append("\\u2028");
                    break;
                case ' ' :
                    sb.append("\\u2029");
                    break;
                case '>' :
                    if ((i >= 2) && (((s.charAt(i - 1) == '-') && (s.charAt(i - 2) == '-')) || ((s.charAt(i - 1) == ']') && (s.charAt(i - 2) == ']')))) {
                        sb.append("\\>");
                    } else {
                        sb.append(c);
                    }
                    break;
                case '<' :
                    final java.lang.String END_SCRIPT = "/script";
                    final java.lang.String START_COMMENT = "!--";
                    if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {
                        sb.append("<\\");
                    } else if (s.regionMatches(false, i + 1, START_COMMENT, 0, START_COMMENT.length())) {
                        sb.append("<\\");
                    } else {
                        sb.append(c);
                    }
                    break;
                default :
                    if (outputCharsetEncoder != null) {
                        if (outputCharsetEncoder.canEncode(c)) {
                            sb.append(c);
                        } else {
                            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                        }
                    } else if ((c > 0x1f) && (c < 0x7f)) {
                        sb.append(c);
                    } else {
                        com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
                    }
            }
        }
        sb.append(quote);
        return sb.toString();
    }

    static java.lang.String identifierEscape(java.lang.String s) {
        if (com.google.javascript.jscomp.NodeUtil.isLatin(s)) {
            return s;
        }
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if ((c > 0x1f) && (c < 0x7f)) {
                sb.append(c);
            } else {
                com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(sb, c);
            }
        }
        return sb.toString();
    }

    private static int getNonEmptyChildCount(com.google.javascript.rhino.Node n, int maxCount) {
        int i = 0;
        com.google.javascript.rhino.Node c = n.getFirstChild();
        for (; (c != null) && (i < maxCount); c = c.getNext()) {
            if (c.isBlock()) {
                i += com.google.javascript.jscomp.CodeGenerator.getNonEmptyChildCount(c, maxCount - i);
            } else if (!c.isEmpty()) {
                i++;
            }
        }
        return i;
    }

    private static com.google.javascript.rhino.Node getFirstNonEmptyChild(com.google.javascript.rhino.Node n) {
        for (com.google.javascript.rhino.Node c = n.getFirstChild(); c != null; c = c.getNext()) {
            if (c.isBlock()) {
                com.google.javascript.rhino.Node result = com.google.javascript.jscomp.CodeGenerator.getFirstNonEmptyChild(c);
                if (result != null) {
                    return result;
                }
            } else if (!c.isEmpty()) {
                return c;
            }
        }
        return null;
    }

    enum Context {

        STATEMENT,
        BEFORE_DANGLING_ELSE,
        START_OF_EXPR,
        PRESERVE_BLOCK,
        IN_FOR_INIT_CLAUSE,
        OTHER;}

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNonEmptyExpression(com.google.javascript.jscomp.CodeGenerator.Context currentContext) {
        return currentContext == com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE ? com.google.javascript.jscomp.CodeGenerator.Context.BEFORE_DANGLING_ELSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context getContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE : com.google.javascript.jscomp.CodeGenerator.Context.OTHER;
    }

    private com.google.javascript.jscomp.CodeGenerator.Context clearContextForNoInOperator(com.google.javascript.jscomp.CodeGenerator.Context context) {
        return context == com.google.javascript.jscomp.CodeGenerator.Context.IN_FOR_INIT_CLAUSE ? com.google.javascript.jscomp.CodeGenerator.Context.OTHER : context;
    }

    private static void appendHexJavaScriptRepresentation(java.lang.StringBuilder sb, char c) {
        try {
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(c, sb);
        } catch (java.io.IOException ex) {
            throw new java.lang.RuntimeException(ex);
        }
    }

    private static void appendHexJavaScriptRepresentation(int codePoint, java.lang.Appendable out) throws java.io.IOException {
        if (java.lang.Character.isSupplementaryCodePoint(codePoint)) {
            char[] surrogates = java.lang.Character.toChars(codePoint);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[0], out);
            com.google.javascript.jscomp.CodeGenerator.appendHexJavaScriptRepresentation(surrogates[1], out);
            return;
        }
        out.append("\\u").append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 12) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 8) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[(codePoint >>> 4) & 0xf]).append(com.google.javascript.jscomp.CodeGenerator.HEX_CHARS[codePoint & 0xf]);
    }
}
[403111] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[SPVATF]-1659829915703
GPR[EPVATF]-1659829915928
GPR[SPS]-1659829915928
[404048] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:980.
GPR[EPS]-1659829916640
GPR[ESUN]-1659829916640
GPR[SSUN]-1659829916640
-718432441
GPR[SPVATF]-1659829916873
GPR[EPVATF]-1659829917092
GPR[SPS]-1659829917092
[405214] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:971.
GPR[EPS]-1659829917806
GPR[ESUN]-1659829917806
GPR[SSUN]-1659829917806
-718432441
GPR[ESUN]-1659829918047
GPR[SSUN]-1659829918047
-718432441
GPR[ESUN]-1659829918280
GPR[SSUN]-1659829918280
-718432441
GPR[SPVATF]-1659829918521
GPR[EPVATF]-1659829918749
GPR[SPS]-1659829918749
[406827] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:955.
GPR[EPS]-1659829919420
GPR[SPVATF]-1659829919420
GPR[EPVATF]-1659829919650
GPR[SPS]-1659829919650
[407753] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:955.
GPR[EPS]-1659829920345
GPR[ESUN]-1659829920345
GPR[SSUN]-1659829920345
-718432441
GPR[ESUN]-1659829920580
GPR[SSUN]-1659829920580
-718432441
GPR[ESUN]-1659829920811
GPR[SSUN]-1659829920811
-718432441
GPR[SPVATF]-1659829921046
GPR[EPVATF]-1659829921271
GPR[SPS]-1659829921271
[409380] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1091.
GPR[EPS]-1659829921972
GPR[ESUN]-1659829921972
GPR[SSUN]-1659829921972
-718432441
GPR[SPVATF]-1659829922209
GPR[EPVATF]-1659829922443
GPR[SPS]-1659829922443
[410541] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1090.
GPR[EPS]-1659829923133
GPR[SPVATF]-1659829923134
GPR[EPVATF]-1659829923357
GPR[SPS]-1659829923357
[411561] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1090.
GPR[EPS]-1659829924153
GPR[ESUN]-1659829924153
GPR[SSUN]-1659829924153
-718432441
GPR[SPVATF]-1659829924417
GPR[EPVATF]-1659829924643
GPR[SPS]-1659829924643
[412774] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1079.
GPR[EPS]-1659829925366
GPR[SPVATF]-1659829925367
GPR[EPVATF]-1659829925593
GPR[SPS]-1659829925593
[413686] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1079.
GPR[EPS]-1659829926278
GPR[ESUN]-1659829926278
GPR[SSUN]-1659829926278
-718432441
GPR[SPVATF]-1659829926517
GPR[EPVATF]-1659829926751
GPR[SPS]-1659829926751
[414853] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1027.
GPR[EPS]-1659829927446
GPR[ESUN]-1659829927446
GPR[SSUN]-1659829927446
-718432441
GPR[ESUN]-1659829927680
GPR[SSUN]-1659829927680
1616555300
GPR[ESUN]-1659829927892
GPR[SSUN]-1659829927892
1616555300
GPR[SPVATF]-1659829928098
GPR[EPVATF]-1659829928328
GPR[SPS]-1659829928328
[416239] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:125.
GPR[EPS]-1659829928831
GPR[ESUN]-1659829928831
GPR[SSUN]-1659829928831
1616555300
GPR[SPVATF]-1659829929040
GPR[EPVATF]-1659829929259
GPR[SPS]-1659829929259
[417165] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeConsumer:124.
GPR[EPS]-1659829929757
GPR[ESUN]-1659829929757
GPR[SSUN]-1659829929757
1187751237
GPR[SPVATF]-1659829930062
GPR[EPVATF]-1659829930291
GPR[SPS]-1659829930291
[418423] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:928.
GPR[EPS]-1659829931015
GPR[SPVATF]-1659829931015
GPR[EPVATF]-1659829931241
GPR[SPS]-1659829931241
[419395] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:928.
GPR[EPS]-1659829931987
GPR[ESUN]-1659829931988
GPR[SSUN]-1659829931988
2433571
GPR[ESUN]-1659829932243
GPR[SSUN]-1659829932243
-718432441
GPR[ESUN]-1659829932477
GPR[SSUN]-1659829932477
-718432441
GPR[SPVATF]-1659829932704
GPR[EPVATF]-1659829932901
GPR[SPS]-1659829932901
[421005] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1101.
GPR[EPS]-1659829933597
GPR[ESUN]-1659829933597
GPR[SSUN]-1659829933597
-718432441
GPR[SPVATF]-1659829933831
GPR[EPVATF]-1659829934060
GPR[SPS]-1659829934060
[422163] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1025.
GPR[EPS]-1659829934755
GPR[ESUN]-1659829934755
GPR[SSUN]-1659829934755
-718432441
GPR[SPVATF]-1659829934989
GPR[EPVATF]-1659829935215
GPR[SPS]-1659829935215
[423295] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:1024.
GPR[EPS]-1659829935887
GPR[ESUN]-1659829935887
GPR[SSUN]-1659829935887
-718432441
GPR[ESUN]-1659829936121
GPR[SSUN]-1659829936121
-1117079791
GPR[ESUN]-1659829936326
GPR[SSUN]-1659829936326
-1117079791
GPR[SPVATF]-1659829936525
GPR[EPVATF]-1659829936738
GPR[SPS]-1659829936738
[424642] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:202.
GPR[EPS]-1659829937234
GPR[ESUN]-1659829937234
GPR[SSUN]-1659829937234
-898632916
GPR[SPVATF]-1659829937466
GPR[EPVATF]-1659829937691
GPR[SPS]-1659829937691
[425656] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SuppressDocWarningsGuard:66.
GPR[EPS]-1659829938248
GPR[ESUN]-1659829938248
GPR[SSUN]-1659829938248
GPR[ESUN]-1659829938248
GPR[SSUN]-1659829938248
GPR[ESUN]-1659829938248
GPR[SSUN]-1659829938248
1187751237
GPR[ESUN]-1659829938546
GPR[SSUN]-1659829938546
GPR[ESUN]-1659829938546
GPR[SSUN]-1659829938546
GPR[ESUN]-1659829938546
GPR[SSUN]-1659829938546
GPR[ESUN]-1659829938546
GPR[SSUN]-1659829938546
GPR[ESUN]-1659829938546
GPR[SSUN]-1659829938546
GPR[ESUN]-1659829938546
GPR[SSUN]-1659829938546
GPR[ESUN]-1659829938546
GPR[SSUN]-1659829938546
GPR[ESUN]-1659829938546
GPR[SSUN]-1659829938546
-718432441
GPR[SPVATF]-1659829938783
GPR[EPVATF]-1659829939014
GPR[SPS]-1659829939014
[427119] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:178.
GPR[EPS]-1659829939711
GPR[ESUN]-1659829939711
GPR[SSUN]-1659829939711
-718432441
GPR[SPVATF]-1659829939948
GPR[EPVATF]-1659829940167
GPR[SPS]-1659829940167
[428276] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:177.
GPR[EPS]-1659829940868
GPR[ESUN]-1659829940868
GPR[SSUN]-1659829940868
-718432441
GPR[SPVATF]-1659829941118
GPR[EPVATF]-1659829941352
GPR[SPS]-1659829941352
[429459] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:172.
GPR[EPS]-1659829942051
GPR[SPVATF]-1659829942052
GPR[EPVATF]-1659829942276
GPR[SPS]-1659829942276
[430363] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:172.
GPR[EPS]-1659829942955
GPR[ESUN]-1659829942955
GPR[SSUN]-1659829942955
-718432441
GPR[SPVATF]-1659829943398
GPR[EPVATF]-1659829943619
GPR[SPS]-1659829943619
[431741] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:171.
GPR[EPS]-1659829944333
GPR[ESUN]-1659829944333
GPR[SSUN]-1659829944333
GPR[ESUN]-1659829944333
GPR[SSUN]-1659829944333
GPR[ESUN]-1659829944333
GPR[SSUN]-1659829944333
GPR[ESUN]-1659829944333
GPR[SSUN]-1659829944333
GPR[ESUN]-1659829944333
GPR[SSUN]-1659829944333
2433571
GPR[ESUN]-1659829944593
GPR[SSUN]-1659829944593
2433571
GPR[ESUN]-1659829944856
GPR[SSUN]-1659829944856
2433571
GPR[ESUN]-1659829945162
GPR[SSUN]-1659829945162
2433571
GPR[SPVATF]-1659829945415
GPR[EPVATF]-1659829945647
GPR[SPS]-1659829945647
[844005] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659830530137
GPR[SSUN]-1659830530137
\n\nNode: host-49\n
\n\nDate: Sat 06 Aug 2022 05:46:48 PM PDT\n
End running Nopol Closure/22 results at /experiment_home///results/Nopol/Closure/22/seed_260/
Removing checked out dir script/workingdir/Nopol/Closure_22
GPR[SSLE]-1659833210688
GPR[ESLE]-1659833270695
