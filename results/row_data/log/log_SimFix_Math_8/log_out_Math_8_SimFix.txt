Sleep 1m start
GPR[SSLI]-1659875187551
GPR[ESLI]-1659875247557
Running SimFix Math 8b
Timezone: America/Los_Angeles
Seed 261
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Math/8/seed_261/
Project lc: math
New out script/workingdir/SimFix/math/math_8_buggy
The file script/workingdir/SimFix/math/math_8_buggy does not exist!
script/workingdir/SimFix/math/math_8_buggy
Current directory: script/workingdir/SimFix/math/math_8_buggy
classpath:  script/workingdir/SimFix/math/math_8_buggy/target/classes:script/workingdir/SimFix/math/math_8_buggy/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/SimFix/math/math_8_buggy/lib/junit-4.8.2.jar
Src java:  /src/main/java
Classes Java:  /target/classes
Src Test:  /src/test/java
Classes Test:  /target/test-classes
GPR[SSLB]-1659875264860
GPR[ESLB]-1659875324863
Calling SimFix: at script/workingdir/SimFix/math/math_8_buggy
build.xml
checkstyle.xml
d4j-info
defects4j.build.properties
doap_math.rdf
doc
findbugs-exclude-filter.xml
license-header.txt
LICENSE.txt
math-pre-RC.sh
math-RC.sh
NOTICE.txt
pom.xml
PROPOSAL.html
RELEASE-NOTES.txt
siteMods
src
target
test-jar.xml
content current dir: build.xml checkstyle.xml d4j-info defects4j.build.properties doap_math.rdf doc findbugs-exclude-filter.xml license-header.txt LICENSE.txt math-pre-RC.sh math-RC.sh NOTICE.txt pom.xml PROPOSAL.html RELEASE-NOTES.txt siteMods src target test-jar.xml
Node: host-68
Date init: Sun 07 Aug 2022 05:28:47 AM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659875327122
=================================================
Project : math_8	start : 22/08/07 05:28

Field type inconsistancy 'start' with types : Vector2D and Vector3D
Field type inconsistancy 'end' with types : Vector2D and Vector3D
Variable type inconsistancy of 'start' in method 'getSegments' with types : Vector2D and Vector3D
Variable type inconsistancy of 'end' in method 'getSegments' with types : Vector2D and Vector3D
Field type inconsistancy 'SUPER' with types : MultivariateOptimizer and BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>
Field type inconsistancy 'SUPER' with types : MultivariateOptimizer and BaseAbstractMultivariateOptimizer<MultivariateFunction>
Field type inconsistancy 'SUPER' with types : MultivariateOptimizer and BaseAbstractMultivariateOptimizer<MultivariateFunction>
Field type inconsistancy 'SUPER' with types : MultivariateOptimizer and BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>
Field type inconsistancy 'SUPER' with types : GradientMultivariateOptimizer and AbstractScalarDifferentiableOptimizer
Field type inconsistancy 'updateFormula' with types : Formula and ConjugateGradientFormula
Field type inconsistancy 'SUPER' with types : JacobianMultivariateVectorOptimizer and BaseAbstractMultivariateVectorOptimizer<DifferentiableMultivariateVectorFunction>
Field type inconsistancy 'SUPER' with types : UnivariateOptimizer and BaseAbstractUnivariateOptimizer
Field type inconsistancy 'SUPER' with types : LinearOptimizer and AbstractLinearOptimizer
Field type inconsistancy 'optimizer' with types : MultivariateDifferentiableVectorOptimizer and MultivariateVectorOptimizer
GPR[ESUP]-1659875331428
MM Purify? false
GPR[SFL]-1659875332085
GPR[EFL]-1659875332127
GPR[SFP]-1659875332127
TIMEOUT : 18000000
GPR[SSUN]-1659875332139
org.apache.commons.math3.distribution.DiscreteDistribution,69
GPR[ESUN]-1659875334234
GPR[SSUN]-1659875334234
org.apache.commons.math3.distribution.DiscreteDistribution,70
Find no block!
GPR[SSUN]-1659875334576
org.apache.commons.math3.distribution.DiscreteDistribution,182
========
if(sampleSize<0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}

========
MM Copying to MM
GPR[SPVS]-1659875336651
GPR[SPVAP]-1659875336651
GPR[EPVAP]-1659875343049
GPR[SPVATF]-1659875343049
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875345011
GPR[EPVS]-1659875345011
========
if(sampleSize<=0){
throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}

========
MM Copying to MM
GPR[SPVS]-1659875345013
GPR[SPVAP]-1659875345013
GPR[EPVAP]-1659875347074
GPR[SPVATF]-1659875347074
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875350125
GPR[EPVS]-1659875350125
========
if(sampleSize<0){
throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}

========
MM Copying to MM
GPR[SPVS]-1659875350126
GPR[SPVAP]-1659875350126
GPR[EPVAP]-1659875352315
GPR[SPVATF]-1659875352315
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875354372
GPR[EPVS]-1659875354372
GPR[ESUN]-1659875354373
GPR[SSUN]-1659875354373
org.apache.commons.math3.distribution.DiscreteDistribution,187
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<weight.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875360299
GPR[SPVAP]-1659875360299
GPR[EPVAP]-1659875362936
GPR[EPVS]-1659875362936
========
for(int i=0;i<length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875362937
GPR[SPVAP]-1659875362937
GPR[EPVAP]-1659875365091
GPR[EPVS]-1659875365091
========
for(int i=0;i<value;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875365092
GPR[SPVAP]-1659875365092
GPR[EPVAP]-1659875367216
GPR[EPVS]-1659875367216
========
for(int i=0;i<nCols;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875367217
GPR[SPVAP]-1659875367217
GPR[EPVAP]-1659875369357
GPR[EPVS]-1659875369357
========
for(int i=0;i<nRows;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875369359
GPR[SPVAP]-1659875369359
GPR[EPVAP]-1659875371460
GPR[EPVS]-1659875371460
========
for(int i=0;i<dimension;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875371461
GPR[SPVAP]-1659875371461
GPR[EPVAP]-1659875373586
GPR[EPVS]-1659875373587
========
for(int i=0;i<values.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875373588
GPR[SPVAP]-1659875373588
GPR[EPVAP]-1659875375706
GPR[EPVS]-1659875375706
========
for(int i=0;i<data.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875375708
GPR[SPVAP]-1659875375708
GPR[EPVAP]-1659875377850
GPR[EPVS]-1659875377850
========
for(int i=0;i<=sampleSize;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875377853
GPR[SPVAP]-1659875377853
GPR[EPVAP]-1659875383874
GPR[SPVATF]-1659875383874
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875385883
GPR[EPVS]-1659875385883
========
for(int i=0;i<k;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875385889
GPR[SPVAP]-1659875385889
GPR[EPVAP]-1659875386958
GPR[EPVS]-1659875386959
========
for(int i=0;i<n;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875386960
GPR[SPVAP]-1659875386960
GPR[EPVAP]-1659875388015
GPR[EPVS]-1659875388015
========
for(int i=0;i<=n;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875388016
GPR[SPVAP]-1659875388016
GPR[EPVAP]-1659875389078
GPR[EPVS]-1659875389078
========
for(int i=0;i<historySize;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875389080
GPR[SPVAP]-1659875389080
GPR[EPVAP]-1659875390145
GPR[EPVS]-1659875390145
========
for(int i=0;i<dim;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875390146
GPR[SPVAP]-1659875390146
GPR[EPVAP]-1659875391235
GPR[EPVS]-1659875391235
========
for(int i=0;i<order;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875391237
GPR[SPVAP]-1659875391237
GPR[EPVAP]-1659875392325
GPR[EPVS]-1659875392334
========
for(int i=0;i<l;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875392335
GPR[SPVAP]-1659875392335
GPR[EPVAP]-1659875393454
GPR[EPVS]-1659875393454
========
for(int i=0;i<virtualSize;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875393460
GPR[SPVAP]-1659875393460
GPR[EPVAP]-1659875394535
GPR[EPVS]-1659875394535
========
for(int i=0;i<m;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875394537
GPR[SPVAP]-1659875394537
GPR[EPVAP]-1659875395617
GPR[EPVS]-1659875395617
========
for(int i=0;i<ranks.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875395619
GPR[SPVAP]-1659875395619
GPR[EPVAP]-1659875396712
GPR[EPVS]-1659875396712
========
for(int i=0;i<imagEigenvalues.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875396714
GPR[SPVAP]-1659875396714
GPR[EPVAP]-1659875397785
GPR[EPVS]-1659875397785
========
for(int i=0;i<size;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875397786
GPR[SPVAP]-1659875397786
GPR[EPVAP]-1659875398852
GPR[EPVS]-1659875398852
========
for(int i=0;i<centroid.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875398855
GPR[SPVAP]-1659875398855
GPR[EPVAP]-1659875399915
GPR[EPVS]-1659875399915
========
for(int i=0;i<stages;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875399917
GPR[SPVAP]-1659875399917
GPR[EPVAP]-1659875400988
GPR[EPVS]-1659875400988
========
for(int i=0;i<secondaryMappers.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875400989
GPR[SPVAP]-1659875400989
GPR[EPVAP]-1659875402068
GPR[EPVS]-1659875402068
========
for(int i=0;i<currentState.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875402070
GPR[SPVAP]-1659875402070
GPR[EPVAP]-1659875403151
GPR[EPVS]-1659875403151
========
for(int i=0;i<normalized.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875403152
GPR[SPVAP]-1659875403152
GPR[EPVAP]-1659875404213
GPR[EPVS]-1659875404213
========
for(int i=0;i<newPols.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875404215
GPR[SPVAP]-1659875404215
GPR[EPVAP]-1659875405301
GPR[EPVS]-1659875405301
========
for(int i=0;i<this.sampleSize;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875405303
GPR[SPVAP]-1659875405303
GPR[EPVAP]-1659875406367
GPR[EPVS]-1659875406367
========
for(int i=0;i<nvars;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875406374
GPR[SPVAP]-1659875406374
GPR[EPVAP]-1659875407426
GPR[EPVS]-1659875407426
========
for(int i=0;i<polynomials.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875407428
GPR[SPVAP]-1659875407428
GPR[EPVAP]-1659875408533
GPR[EPVS]-1659875408533
========
for(int i=0;i<dimensionSize.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875408535
GPR[SPVAP]-1659875408535
GPR[EPVAP]-1659875409597
GPR[EPVS]-1659875409597
========
for(int i=0;i<f.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875409598
GPR[SPVAP]-1659875409598
GPR[EPVAP]-1659875410715
GPR[EPVS]-1659875410715
========
for(int i=0;i<sample.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875410717
GPR[SPVAP]-1659875410717
GPR[EPVAP]-1659875411767
GPR[EPVS]-1659875411767
========
for(int i=0;i<x.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875411769
GPR[SPVAP]-1659875411769
GPR[EPVAP]-1659875412826
GPR[EPVS]-1659875412826
========
for(int i=0;i<k.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875412827
GPR[SPVAP]-1659875412827
GPR[EPVAP]-1659875413914
GPR[EPVS]-1659875413914
========
for(int i=0;i<scaled.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875413916
GPR[SPVAP]-1659875413916
GPR[EPVAP]-1659875414979
GPR[EPVS]-1659875414979
========
for(int i=0;i<inputArray.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875414980
GPR[SPVAP]-1659875414980
GPR[EPVAP]-1659875416040
GPR[EPVS]-1659875416040
========
for(int i=0;i<rows;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875416041
GPR[SPVAP]-1659875416041
GPR[EPVAP]-1659875417102
GPR[EPVS]-1659875417102
========
for(int i=0;i<ds.data.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875417103
GPR[SPVAP]-1659875417103
GPR[EPVAP]-1659875418177
GPR[EPVS]-1659875418177
========
for(int i=0;i<ndim;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875418179
GPR[SPVAP]-1659875418179
GPR[EPVAP]-1659875419257
GPR[EPVS]-1659875419257
========
for(int i=sampleSize;i<sampleSize;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875419258
GPR[SPVAP]-1659875419258
GPR[EPVAP]-1659875421279
GPR[SPVATF]-1659875421279
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 0
GPR[EPVATF]-1659875423212
GPR[SPVATR]-1659875423213
TESTING : math_8
MM messageFailing tests: 0
GPR[EPVATR]-1659875490916
GPR[EPVS]-1659875490916
GPR[PF]-1659875490916
sourceFile  script/workingdir/SimFix/math/math_8_buggy/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
location   script/workingdir/SimFix/math/math_8_buggy
MM Out patch at /experiment_home///results/SimFix/Math/8/seed_261/patch/math/8/0/patch_158794_1_ts_1659875490916.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java --label=/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java /tmp/tmpDirMM8197263359798876949/DiscreteDistribution.java  /experiment_home///results/SimFix/Math/8/seed_261/patch/math/8/0/1_DiscreteDistribution.java  --unified=3  > /experiment_home///results/SimFix/Math/8/seed_261/patch/math/8/0/patch_158794_1_ts_1659875490916.diff
MMOut command diff: []
========
for(int i=0;i<iHeight;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875490928
GPR[SPVAP]-1659875490929
GPR[EPVAP]-1659875492017
GPR[EPVS]-1659875492017
========
for(int i=0;i<nreq;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875492019
GPR[SPVAP]-1659875492019
GPR[EPVAP]-1659875493082
GPR[EPVS]-1659875493082
========
for(int i=0;i<l1;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875493084
GPR[SPVAP]-1659875493084
GPR[EPVAP]-1659875494146
GPR[EPVS]-1659875494146
========
for(int i=0;i<nSteps;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875494148
GPR[SPVAP]-1659875494148
GPR[EPVAP]-1659875495235
GPR[EPVS]-1659875495235
========
for(int i=0;i<dataI.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875495236
GPR[SPVAP]-1659875495236
GPR[EPVAP]-1659875496312
GPR[EPVS]-1659875496312
========
for(int i=0;i<a.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875496314
GPR[SPVAP]-1659875496314
GPR[EPVAP]-1659875497394
GPR[EPVS]-1659875497394
========
for(int i=0;i<b.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875497396
GPR[SPVAP]-1659875497396
GPR[EPVAP]-1659875498444
GPR[EPVS]-1659875498444
========
for(int i=0;i<results.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875498445
GPR[SPVAP]-1659875498445
GPR[EPVAP]-1659875499516
GPR[EPVS]-1659875499517
========
for(int i=0;i<result.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875499518
GPR[SPVAP]-1659875499518
GPR[EPVAP]-1659875500578
GPR[EPVS]-1659875500578
========
for(int i=0;i<d.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875500579
GPR[SPVAP]-1659875500579
GPR[EPVAP]-1659875501664
GPR[EPVS]-1659875501664
========
for(int i=0;i<real.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875501666
GPR[SPVAP]-1659875501666
GPR[EPVAP]-1659875502717
GPR[EPVS]-1659875502717
========
for(int i=0;i<varcov.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875502718
GPR[SPVAP]-1659875502718
GPR[EPVAP]-1659875503771
GPR[EPVS]-1659875503771
========
for(int i=0;i<z.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875503773
GPR[SPVAP]-1659875503773
GPR[EPVAP]-1659875504826
GPR[EPVS]-1659875504826
========
for(int i=0;i<parameters.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875504827
GPR[SPVAP]-1659875504827
GPR[EPVAP]-1659875505878
GPR[EPVS]-1659875505879
========
for(int i=0;i<nR;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875505880
GPR[SPVAP]-1659875505880
GPR[EPVAP]-1659875506963
GPR[EPVS]-1659875506963
========
for(int i=0;i<nC;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875506965
GPR[SPVAP]-1659875506965
GPR[EPVAP]-1659875508035
GPR[EPVS]-1659875508035
========
for(int i=0;i<idx;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875508037
GPR[SPVAP]-1659875508037
GPR[EPVAP]-1659875509091
GPR[EPVS]-1659875509091
========
for(int i=0;i<v.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875509093
GPR[SPVAP]-1659875509093
GPR[EPVAP]-1659875510165
GPR[EPVS]-1659875510165
========
for(int i=0;i<indices.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875510167
GPR[SPVAP]-1659875510167
GPR[EPVAP]-1659875511228
GPR[EPVS]-1659875511229
========
for(int i=0;i<residuals.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875511230
GPR[SPVAP]-1659875511230
GPR[EPVAP]-1659875512309
GPR[EPVS]-1659875512309
========
for(int i=0;i<=idx;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875512310
GPR[SPVAP]-1659875512310
GPR[EPVAP]-1659875513381
GPR[EPVS]-1659875513381
========
for(int i=0;i<sampleSize;i++){
scale*=FastMath.PI;
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875513383
GPR[SPVAP]-1659875513383
GPR[EPVAP]-1659875514463
GPR[EPVS]-1659875514463
========
for(int i=0;i<mant.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875514466
GPR[SPVAP]-1659875514466
GPR[EPVAP]-1659875515999
GPR[EPVS]-1659875515999
========
for(int i=0;i<y0.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875516001
GPR[SPVAP]-1659875516001
GPR[EPVAP]-1659875517124
GPR[EPVS]-1659875517124
========
for(int i=0;i<coefficients.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875517126
GPR[SPVAP]-1659875517126
GPR[EPVAP]-1659875518258
GPR[EPVS]-1659875518258
========
for(int i=0;i<=order;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875518260
GPR[SPVAP]-1659875518260
GPR[EPVAP]-1659875519379
GPR[EPVS]-1659875519379
========
for(int i=0;i<in.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875519380
GPR[SPVAP]-1659875519380
GPR[EPVAP]-1659875520434
GPR[EPVS]-1659875520434
========
for(int i=0;i<s.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875520436
GPR[SPVAP]-1659875520436
GPR[EPVAP]-1659875521490
GPR[EPVS]-1659875521490
========
for(int i=0;i<guess.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875521492
GPR[SPVAP]-1659875521492
GPR[EPVAP]-1659875522563
GPR[EPVS]-1659875522563
========
for(int i=0;i<binCount;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875522564
GPR[SPVAP]-1659875522564
GPR[EPVAP]-1659875523628
GPR[EPVS]-1659875523628
========
for(int i=0;i<numberOfRegressors;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875523630
GPR[SPVAP]-1659875523630
GPR[EPVAP]-1659875524685
GPR[EPVS]-1659875524685
========
for(int i=0;i<singularValues.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875524687
GPR[SPVAP]-1659875524687
GPR[EPVAP]-1659875525747
GPR[EPVS]-1659875525748
========
for(int i=0;i<end;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875525749
GPR[SPVAP]-1659875525749
GPR[EPVAP]-1659875526812
GPR[EPVS]-1659875526812
========
for(int i=sampleSize;i<=sampleSize;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875526813
GPR[SPVAP]-1659875526813
GPR[EPVAP]-1659875528822
GPR[SPVATF]-1659875528822
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875530742
GPR[EPVS]-1659875530742
========
for(int i=sampleSize;i<n;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875530743
GPR[SPVAP]-1659875530743
GPR[EPVAP]-1659875531802
GPR[EPVS]-1659875531802
========
for(int i=sampleSize;i<=n;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875531803
GPR[SPVAP]-1659875531803
GPR[EPVAP]-1659875532866
GPR[EPVS]-1659875532866
========
for(int i=0;i<pp;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875532868
GPR[SPVAP]-1659875532868
GPR[EPVAP]-1659875533940
GPR[EPVS]-1659875533940
========
for(int i=0;i<doubles.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875533941
GPR[SPVAP]-1659875533941
GPR[EPVAP]-1659875535019
GPR[EPVS]-1659875535019
========
for(int i=0;i<max;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875535021
GPR[SPVAP]-1659875535021
GPR[EPVAP]-1659875536105
GPR[EPVS]-1659875536105
========
for(int i=0;i<mappers.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875536107
GPR[SPVAP]-1659875536107
GPR[EPVAP]-1659875537197
GPR[EPVS]-1659875537197
========
for(int i=0;i<l2;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875537199
GPR[SPVAP]-1659875537199
GPR[EPVAP]-1659875538282
GPR[EPVS]-1659875538282
========
for(int i=0;i<degree;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875538283
GPR[SPVAP]-1659875538283
GPR[EPVAP]-1659875539351
GPR[EPVS]-1659875539351
========
for(int i=0;i<dp1;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875539352
GPR[SPVAP]-1659875539352
GPR[EPVAP]-1659875540414
GPR[EPVS]-1659875540414
========
for(int i=0;i<high;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875540415
GPR[SPVAP]-1659875540415
GPR[EPVAP]-1659875541471
GPR[EPVS]-1659875541471
========
for(int i=0;i<p1.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875541473
GPR[SPVAP]-1659875541473
GPR[EPVAP]-1659875542543
GPR[EPVS]-1659875542543
========
for(int i=0;i<columns;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875542545
GPR[SPVAP]-1659875542545
GPR[EPVAP]-1659875543599
GPR[EPVS]-1659875543599
========
for(int i=0;i<lsd;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875543601
GPR[SPVAP]-1659875543601
GPR[EPVAP]-1659875544660
GPR[EPVS]-1659875544660
========
for(int i=0;i<singletons.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875544662
GPR[SPVAP]-1659875544662
GPR[EPVAP]-1659875545751
GPR[EPVS]-1659875545751
========
for(int i=0;i<xArray.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875545752
GPR[SPVAP]-1659875545752
GPR[EPVAP]-1659875546804
GPR[EPVS]-1659875546804
========
for(int i=0;i<diagonal.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875546805
GPR[SPVAP]-1659875546805
GPR[EPVAP]-1659875547856
GPR[EPVS]-1659875547856
========
for(int i=0;i<centered.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875547858
GPR[SPVAP]-1659875547858
GPR[EPVAP]-1659875548919
GPR[EPVS]-1659875548919
========
for(int i=0;i<numPoints;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875548920
GPR[SPVAP]-1659875548920
GPR[EPVAP]-1659875549979
GPR[EPVS]-1659875549979
========
for(int i=0;i<len;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875549981
GPR[SPVAP]-1659875549981
GPR[EPVAP]-1659875551039
GPR[EPVS]-1659875551039
========
for(int i=0;i<row;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875551041
GPR[SPVAP]-1659875551041
GPR[EPVAP]-1659875552110
GPR[EPVS]-1659875552110
========
for(int i=0;i<nSum;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875552112
GPR[SPVAP]-1659875552112
GPR[EPVAP]-1659875553184
GPR[EPVS]-1659875553184
========
for(int i=0;i<preMultiplied.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875553186
GPR[SPVAP]-1659875553186
GPR[EPVAP]-1659875554291
GPR[EPVS]-1659875554291
========
for(int i=0;i<point.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875554293
GPR[SPVAP]-1659875554293
GPR[EPVAP]-1659875555396
GPR[EPVS]-1659875555396
========
for(int i=0;i<r.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875555397
GPR[SPVAP]-1659875555397
GPR[EPVAP]-1659875556446
GPR[EPVS]-1659875556446
========
for(int i=0;i<shiftedPoint.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875556447
GPR[SPVAP]-1659875556447
GPR[EPVAP]-1659875557518
GPR[EPVS]-1659875557518
========
for(int i=0;i<gradient.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875557520
GPR[SPVAP]-1659875557520
GPR[EPVAP]-1659875558611
GPR[EPVS]-1659875558611
========
for(int i=0;i<begin;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875558613
GPR[SPVAP]-1659875558613
GPR[EPVAP]-1659875559712
GPR[EPVS]-1659875559712
========
for(int i=0;i<probabilities.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875559713
GPR[SPVAP]-1659875559713
GPR[EPVAP]-1659875561723
GPR[SPVATF]-1659875561723
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875563667
GPR[EPVS]-1659875563667
========
for(int i=0;i<=end;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875563668
GPR[SPVAP]-1659875563668
GPR[EPVAP]-1659875564727
GPR[EPVS]-1659875564727
========
for(int i=0;i<covMatEigenvalues.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875564728
GPR[SPVAP]-1659875564728
GPR[EPVAP]-1659875565805
GPR[EPVS]-1659875565805
========
for(int i=0;i<highLength;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875565807
GPR[SPVAP]-1659875565807
GPR[EPVAP]-1659875566874
GPR[EPVS]-1659875566874
========
for(int i=0;i<tmp2.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875566876
GPR[SPVAP]-1659875566876
GPR[EPVAP]-1659875567951
GPR[EPVS]-1659875567951
========
for(int i=0;i<vSize;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875567952
GPR[SPVAP]-1659875567952
GPR[EPVAP]-1659875569031
GPR[EPVS]-1659875569031
========
for(int i=0;i<xLen;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875569033
GPR[SPVAP]-1659875569033
GPR[EPVAP]-1659875570095
GPR[EPVS]-1659875570095
========
for(int i=0;i<points.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875570097
GPR[SPVAP]-1659875570097
GPR[EPVAP]-1659875571162
GPR[EPVS]-1659875571162
========
for(int i=0;i<=k;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875571164
GPR[SPVAP]-1659875571164
GPR[EPVAP]-1659875572232
GPR[EPVS]-1659875572232
========
for(int i=0;i<special.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875572234
GPR[SPVAP]-1659875572234
GPR[EPVAP]-1659875573313
GPR[EPVS]-1659875573313
========
for(int i=0;i<sampleSize;i++){
xk*=operand[operandOffset];
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875573315
GPR[SPVAP]-1659875573315
GPR[EPVAP]-1659875574379
GPR[EPVS]-1659875574379
========
for(int i=sampleSize;i<sampleSize;i++){
xk*=operand[operandOffset];
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875574380
GPR[SPVAP]-1659875574380
GPR[EPVAP]-1659875575472
GPR[EPVS]-1659875575472
========
for(int i=0;i<observed.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875575474
GPR[SPVAP]-1659875575474
GPR[EPVAP]-1659875576559
GPR[EPVS]-1659875576559
========
for(int i=0;i<observed1.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875576560
GPR[SPVAP]-1659875576560
GPR[EPVAP]-1659875577643
GPR[EPVS]-1659875577643
========
for(int i=0;i<exp;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875577645
GPR[SPVAP]-1659875577645
GPR[EPVAP]-1659875578691
GPR[EPVS]-1659875578691
========
for(int i=0;i<errors.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875578692
GPR[SPVAP]-1659875578692
GPR[EPVAP]-1659875579751
GPR[EPVS]-1659875579751
========
for(int i=0;i<sampleSize;i++){
coefficient*=sampleSize-i;
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875579753
GPR[SPVAP]-1659875579753
GPR[EPVAP]-1659875580806
GPR[EPVS]-1659875580806
========
for(int i=0;i<dSize;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875580808
GPR[SPVAP]-1659875580808
GPR[EPVAP]-1659875581875
GPR[EPVS]-1659875581875
========
for(int i=0;i<scale.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875581877
GPR[SPVAP]-1659875581877
GPR[EPVAP]-1659875582952
GPR[EPVS]-1659875582952
========
for(int i=0;i<cols;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875582953
GPR[SPVAP]-1659875582953
GPR[EPVAP]-1659875584007
GPR[EPVS]-1659875584007
========
for(int i=0;i<lowLength;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875584009
GPR[SPVAP]-1659875584009
GPR[EPVAP]-1659875585079
GPR[EPVS]-1659875585079
========
for(int i=0;i<sub.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875585080
GPR[SPVAP]-1659875585080
GPR[EPVAP]-1659875586133
GPR[EPVS]-1659875586133
========
for(int i=0;i<target.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875586134
GPR[SPVAP]-1659875586134
GPR[EPVAP]-1659875587192
GPR[EPVS]-1659875587192
========
for(int i=0;i<endColumn;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875587193
GPR[SPVAP]-1659875587193
GPR[EPVAP]-1659875588261
GPR[EPVS]-1659875588261
========
for(int i=0;i<j;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875588262
GPR[SPVAP]-1659875588262
GPR[EPVAP]-1659875589306
GPR[EPVS]-1659875589306
========
for(int i=0;i<=j;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875589308
GPR[SPVAP]-1659875589308
GPR[EPVAP]-1659875590366
GPR[EPVS]-1659875590366
========
for(int i=0;i<col;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875590368
GPR[SPVAP]-1659875590368
GPR[EPVAP]-1659875591431
GPR[EPVS]-1659875591431
========
for(int i=0;i<interpolatedState.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875591432
GPR[SPVAP]-1659875591432
GPR[EPVAP]-1659875592513
GPR[EPVS]-1659875592513
========
for(int i=sampleSize;i<m;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875592514
GPR[SPVAP]-1659875592514
GPR[EPVAP]-1659875593632
GPR[EPVS]-1659875593633
========
for(int i=0;i<=high;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875593635
GPR[SPVAP]-1659875593635
GPR[EPVAP]-1659875594700
GPR[EPVS]-1659875594700
========
for(int i=0;i<realEigenvalues.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875594701
GPR[SPVAP]-1659875594701
GPR[EPVAP]-1659875595782
GPR[EPVS]-1659875595782
========
for(int i=0;i<stateDim;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875595783
GPR[SPVAP]-1659875595783
GPR[EPVAP]-1659875596865
GPR[EPVS]-1659875596865
========
for(int i=0;i<npt;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875596867
GPR[SPVAP]-1659875596867
GPR[EPVAP]-1659875597938
GPR[EPVS]-1659875597938
========
for(int i=0;i<crossoverIndex;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875597941
GPR[SPVAP]-1659875597941
GPR[EPVAP]-1659875598996
GPR[EPVS]-1659875598996
========
for(int i=0;i<variablesToInclude.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875598998
GPR[SPVAP]-1659875598998
GPR[EPVAP]-1659875600058
GPR[EPVS]-1659875600058
========
for(int i=0;i<cache.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875600060
GPR[SPVAP]-1659875600060
GPR[EPVAP]-1659875601118
GPR[EPVS]-1659875601118
========
for(int i=0;i<blocks.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875601119
GPR[SPVAP]-1659875601119
GPR[EPVAP]-1659875602193
GPR[EPVS]-1659875602193
========
for(int i=0;i<lTData.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875602194
GPR[SPVAP]-1659875602194
GPR[EPVAP]-1659875603246
GPR[EPVS]-1659875603246
========
for(int i=0;i<random.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875603247
GPR[SPVAP]-1659875603247
GPR[EPVAP]-1659875604303
GPR[EPVS]-1659875604303
========
for(int i=0;i<endRow;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875604304
GPR[SPVAP]-1659875604304
GPR[EPVAP]-1659875605370
GPR[EPVS]-1659875605370
========
for(int i=0;i<outCols;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875605372
GPR[SPVAP]-1659875605372
GPR[EPVAP]-1659875606446
GPR[EPVS]-1659875606446
========
for(int i=0;i<val.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875606448
GPR[SPVAP]-1659875606448
GPR[EPVAP]-1659875607522
GPR[EPVS]-1659875607522
========
for(int i=0;i<pos;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875607523
GPR[SPVAP]-1659875607524
GPR[EPVAP]-1659875608573
GPR[EPVS]-1659875608573
========
for(int i=0;i<index;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875608574
GPR[SPVAP]-1659875608574
GPR[EPVAP]-1659875609658
GPR[EPVS]-1659875609658
========
for(int i=0;i<nSing;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875609660
GPR[SPVAP]-1659875609660
GPR[EPVAP]-1659875610735
GPR[EPVS]-1659875610735
========
for(int i=0;i<sampleSize;i++){
subVector[d]=i;
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875610737
GPR[SPVAP]-1659875610737
GPR[EPVAP]-1659875611811
GPR[EPVS]-1659875611811
========
for(int i=0;i<sampleSize;i++){
orders[i]=1;
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875611812
GPR[SPVAP]-1659875611812
GPR[EPVAP]-1659875612894
GPR[EPVS]-1659875612894
========
for(int i=0;i<sampleSize;i++){
orders[i]=0;
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875612895
GPR[SPVAP]-1659875612895
GPR[EPVAP]-1659875613965
GPR[EPVS]-1659875613965
========
for(int i=0;i<sampleSize;i++){
orders[i]=1;
orders[i]=0;

out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875613966
GPR[SPVAP]-1659875613966
GPR[EPVAP]-1659875615031
GPR[EPVS]-1659875615031
========
for(int i=0;i<root.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875615032
GPR[SPVAP]-1659875615032
GPR[EPVAP]-1659875616107
GPR[EPVS]-1659875616107
========
for(int i=0;i<interpolatedSecondaryState.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875616109
GPR[SPVAP]-1659875616109
GPR[EPVAP]-1659875617173
GPR[EPVS]-1659875617173
========
for(int i=0;i<coordinates.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875617175
GPR[SPVAP]-1659875617175
GPR[EPVAP]-1659875618230
GPR[EPVS]-1659875618230
========
for(int i=0;i<=endColumn;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875618231
GPR[SPVAP]-1659875618231
GPR[EPVAP]-1659875619303
GPR[EPVS]-1659875619303
========
for(int i=0;i<mu;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875619304
GPR[SPVAP]-1659875619304
GPR[EPVAP]-1659875620361
GPR[EPVS]-1659875620361
========
for(int i=0;i<lower.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875620363
GPR[SPVAP]-1659875620363
GPR[EPVAP]-1659875621419
GPR[EPVS]-1659875621419
========
for(int i=0;i<sampleSize;i++){
dividend[i]=mant[i];
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875621420
GPR[SPVAP]-1659875621420
GPR[EPVAP]-1659875622481
GPR[EPVS]-1659875622481
========
for(int i=0;i<sampleSize;i++){
remainder[i]=0;
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875622482
GPR[SPVAP]-1659875622482
GPR[EPVAP]-1659875623570
GPR[EPVS]-1659875623570
========
for(int i=0;i<sampleSize;i++){
dividend[i]=mant[i];
remainder[i]=0;

out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875623571
GPR[SPVAP]-1659875623572
GPR[EPVAP]-1659875624632
GPR[EPVS]-1659875624632
========
for(int i=0;i<rawData.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875624634
GPR[SPVAP]-1659875624634
GPR[EPVAP]-1659875625695
GPR[EPVS]-1659875625695
========
for(int i=0;i<matrixT.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875625696
GPR[SPVAP]-1659875625696
GPR[EPVAP]-1659875626757
GPR[EPVS]-1659875626757
========
for(int i=0;i<dataC.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875626759
GPR[SPVAP]-1659875626759
GPR[EPVAP]-1659875627814
GPR[EPVS]-1659875627814
========
for(int i=0;i<y.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875627815
GPR[SPVAP]-1659875627815
GPR[EPVAP]-1659875628868
GPR[EPVS]-1659875628869
========
for(int i=0;i<sampleSize;i++){
++i;
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875628870
GPR[SPVAP]-1659875628870
GPR[EPVAP]-1659875630879
GPR[SPVATF]-1659875630879
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875632834
GPR[EPVS]-1659875632834
========
for(int i=0;i<solvedCols;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875632835
GPR[SPVAP]-1659875632835
GPR[EPVAP]-1659875633903
GPR[EPVS]-1659875633903
========
for(int i=0;i<sampleSize;i++){
total+=d[i]*rhs[i];
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875633905
GPR[SPVAP]-1659875633905
GPR[EPVAP]-1659875634991
GPR[EPVS]-1659875634991
========
for(int i=0;i<halfN;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875634992
GPR[SPVAP]-1659875634992
GPR[EPVAP]-1659875636054
GPR[EPVS]-1659875636054
========
for(int i=0;i<numComp;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875636056
GPR[SPVAP]-1659875636056
GPR[EPVAP]-1659875637123
GPR[EPVS]-1659875637123
========
for(int i=0;i<sampleSize;i++){
coefficients[0]=y[i];
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875637124
GPR[SPVAP]-1659875637124
GPR[EPVAP]-1659875638176
GPR[EPVS]-1659875638176
========
for(int i=0;i<sampleSize;i++){
coefficients[1]=m[i];
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875638177
GPR[SPVAP]-1659875638177
GPR[EPVAP]-1659875639238
GPR[EPVS]-1659875639238
========
for(int i=0;i<sampleSize;i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875639239
GPR[SPVAP]-1659875639239
GPR[EPVAP]-1659875640509
GPR[EPVS]-1659875640509
========
for(int i=0;i<rsize;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875640513
GPR[SPVAP]-1659875640514
GPR[EPVAP]-1659875641582
GPR[EPVS]-1659875641582
========
for(int i=0;i<randomBytes.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875641583
GPR[SPVAP]-1659875641583
GPR[EPVAP]-1659875642651
GPR[EPVS]-1659875642651
========
for(int i=0;i<hash.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875642652
GPR[SPVAP]-1659875642652
GPR[EPVAP]-1659875643710
GPR[EPVS]-1659875643710
========
for(int i=0;i<this.probabilities.sampleSize;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875643712
GPR[SPVAP]-1659875643712
GPR[EPVAP]-1659875644764
GPR[EPVS]-1659875644764
========
for(int i=0;i<simplex.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875644766
GPR[SPVAP]-1659875644766
GPR[EPVAP]-1659875645835
GPR[EPVS]-1659875645835
========
for(int i=0;i<observations.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875645836
GPR[SPVAP]-1659875645836
GPR[EPVAP]-1659875646899
GPR[EPVS]-1659875646899
========
for(int i=0;i<=endRow;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875646900
GPR[SPVAP]-1659875646900
GPR[EPVAP]-1659875647953
GPR[EPVS]-1659875647953
========
for(int i=0;i<nData.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875647954
GPR[SPVAP]-1659875647954
GPR[EPVAP]-1659875649019
GPR[EPVS]-1659875649019
========
for(int i=0;i<starts;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875649020
GPR[SPVAP]-1659875649020
GPR[EPVAP]-1659875650082
GPR[EPVS]-1659875650082
========
for(int i=0;i<buf.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875650084
GPR[SPVAP]-1659875650084
GPR[EPVAP]-1659875651138
GPR[EPVS]-1659875651138
========
for(int i=0;i<optimData.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875651139
GPR[SPVAP]-1659875651139
GPR[EPVAP]-1659875652196
GPR[EPVS]-1659875652196
========
if(i<0){
i=-i-2;
}
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875652197
GPR[SPVAP]-1659875652197
GPR[EPVAP]-1659875653266
GPR[EPVS]-1659875653266
========
for(int i=0;i<selectedRows.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875653267
GPR[SPVAP]-1659875653267
GPR[EPVAP]-1659875654322
GPR[EPVS]-1659875654322
========
for(int i=0;i<xval.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875654323
GPR[SPVAP]-1659875654323
GPR[EPVAP]-1659875655428
GPR[EPVS]-1659875655428
========
for(int i=0;i<dsY.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875655431
GPR[SPVAP]-1659875655431
GPR[EPVAP]-1659875656481
GPR[EPVS]-1659875656481
========
for(int i=0;i<init.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875656483
GPR[SPVAP]-1659875656483
GPR[EPVAP]-1659875657541
GPR[EPVS]-1659875657541
========
for(int i=0;i<correlated.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875657542
GPR[SPVAP]-1659875657542
GPR[EPVAP]-1659875658596
GPR[EPVS]-1659875658596
========
for(int i=0;i<last;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875658597
GPR[SPVAP]-1659875658597
GPR[EPVAP]-1659875659648
GPR[EPVS]-1659875659648
========
for(int i=0;i<sampleSize;i++){
tS*=size[i];
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875659649
GPR[SPVAP]-1659875659649
GPR[EPVAP]-1659875660709
GPR[EPVS]-1659875660709
========
for(int i=0;i<nVars;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875660711
GPR[SPVAP]-1659875660711
GPR[EPVAP]-1659875661791
GPR[EPVS]-1659875661791
========
for(int i=0;i<sz;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875661792
GPR[SPVAP]-1659875661792
GPR[EPVAP]-1659875662862
GPR[EPVS]-1659875662862
========
for(int i=0;i<d;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875662864
GPR[SPVAP]-1659875662864
GPR[EPVAP]-1659875663918
GPR[EPVS]-1659875663918
========
for(int i=0;i<list.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875663919
GPR[SPVAP]-1659875663919
GPR[EPVAP]-1659875664978
GPR[EPVS]-1659875664978
========
for(int i=sampleSize;i<idx;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875664980
GPR[SPVAP]-1659875664980
GPR[EPVAP]-1659875666043
GPR[EPVS]-1659875666043
========
for(int i=sampleSize;i<=idx;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875666044
GPR[SPVAP]-1659875666044
GPR[EPVAP]-1659875667102
GPR[EPVS]-1659875667102
========
for(int i=0;i<series.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875667104
GPR[SPVAP]-1659875667104
GPR[EPVAP]-1659875668174
GPR[EPVS]-1659875668174
========
for(int i=0;i<p.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875668176
GPR[SPVAP]-1659875668176
GPR[EPVAP]-1659875669227
GPR[EPVS]-1659875669227
========
for(int i=0;i<newCoefficients.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875669229
GPR[SPVAP]-1659875669229
GPR[EPVAP]-1659875670290
GPR[EPVS]-1659875670291
========
for(int i=sampleSize;i<order;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875670292
GPR[SPVAP]-1659875670292
GPR[EPVAP]-1659875671351
GPR[EPVS]-1659875671351
========
for(int i=0;i<aI.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875671353
GPR[SPVAP]-1659875671353
GPR[EPVAP]-1659875672410
GPR[EPVS]-1659875672410
========
for(int i=0;i<pData.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875672412
GPR[SPVAP]-1659875672412
GPR[EPVAP]-1659875673511
GPR[EPVS]-1659875673511
========
for(int i=0;i<sampleSize;i++){
d[i]=y[i];
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875673512
GPR[SPVAP]-1659875673512
GPR[EPVAP]-1659875674579
GPR[EPVS]-1659875674580
========
for(int i=0;i<loop.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875674581
GPR[SPVAP]-1659875674581
GPR[EPVAP]-1659875675633
GPR[EPVS]-1659875675633
========
for(int i=0;i<oldLength;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875675635
GPR[SPVAP]-1659875675635
GPR[EPVAP]-1659875676696
GPR[EPVS]-1659875676696
========
for(int i=0;i<multIndirection.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875676698
GPR[SPVAP]-1659875676698
GPR[EPVAP]-1659875677778
GPR[EPVS]-1659875677778
========
for(int i=0;i<nbPoints;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875677780
GPR[SPVAP]-1659875677780
GPR[EPVAP]-1659875678836
GPR[EPVS]-1659875678836
========
for(int i=0;i<crossoverPoints;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875678838
GPR[SPVAP]-1659875678838
GPR[EPVAP]-1659875679915
GPR[EPVS]-1659875679915
========
for(int i=0;i<main.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875679917
GPR[SPVAP]-1659875679917
GPR[EPVAP]-1659875680971
GPR[EPVS]-1659875680971
========
for(int i=0;i<mainSetDimension;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875680974
GPR[SPVAP]-1659875680974
GPR[EPVAP]-1659875682039
GPR[EPVS]-1659875682039
========
for(int i=0;i<sampleSize;i++){
bottom[i]=y[i];
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875682040
GPR[SPVAP]-1659875682040
GPR[EPVAP]-1659875683091
GPR[EPVS]-1659875683091
========
for(int i=0;i<vertices.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875683093
GPR[SPVAP]-1659875683093
GPR[EPVAP]-1659875684193
GPR[EPVS]-1659875684193
========
for(int i=0;i<beta.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875684195
GPR[SPVAP]-1659875684195
GPR[EPVAP]-1659875685811
GPR[EPVS]-1659875685811
========
for(int i=0;i<sampleSize;i++){
_i=newIndices[i];
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875685812
GPR[SPVAP]-1659875685812
GPR[EPVAP]-1659875686931
GPR[EPVS]-1659875686931
========
for(int i=0;i<compIndirection.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875686934
GPR[SPVAP]-1659875686934
GPR[EPVAP]-1659875688059
GPR[EPVS]-1659875688059
========
for(int i=sampleSize;i<nvars;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875688061
GPR[SPVAP]-1659875688061
GPR[EPVAP]-1659875689139
GPR[EPVS]-1659875689139
========
for(int i=0;i<extend;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875689142
GPR[SPVAP]-1659875689142
GPR[EPVAP]-1659875690199
GPR[EPVS]-1659875690199
========
for(int i=0;i<after.length;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875690201
GPR[SPVAP]-1659875690201
GPR[EPVAP]-1659875691257
GPR[EPVS]-1659875691257
========
for(int i=sampleSize;i<index;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875691266
GPR[SPVAP]-1659875691266
GPR[EPVAP]-1659875692344
GPR[EPVS]-1659875692344
========
for(int i=sampleSize;i<solvedCols;i++){
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875692349
GPR[SPVAP]-1659875692349
GPR[EPVAP]-1659875693419
GPR[EPVS]-1659875693419
========
for(int i=0;i<beta.length;i++){
_i=newIndices[i];
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875693421
GPR[SPVAP]-1659875693421
GPR[EPVAP]-1659875694495
GPR[EPVS]-1659875694495
========
for(int i=0;i<length;i++){
_i=newIndices[i];
out[i]=sample();
}

========
MM Copying to MM
GPR[SPVS]-1659875694496
GPR[SPVAP]-1659875694496
GPR[EPVAP]-1659875695558
GPR[EPVS]-1659875695558
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<weight.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875701163
GPR[SPVAP]-1659875701163
GPR[EPVAP]-1659875702218
GPR[EPVS]-1659875702218
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875702220
GPR[SPVAP]-1659875702220
GPR[EPVAP]-1659875703279
GPR[EPVS]-1659875703279
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<probabilities.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875703280
GPR[SPVAP]-1659875703280
GPR[EPVAP]-1659875705294
GPR[SPVATF]-1659875705294
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875707239
GPR[EPVS]-1659875707239
========
if(sampleSize<0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875707240
GPR[SPVAP]-1659875707240
GPR[EPVAP]-1659875709191
GPR[SPVATF]-1659875709191
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875711147
GPR[EPVS]-1659875711147
========
if(exp<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875711148
GPR[SPVAP]-1659875711148
GPR[EPVAP]-1659875712202
GPR[EPVS]-1659875712202
========
if(sampleSize<=0){
result=dotrap(DfpField.FLAG_INEXACT,TRUNC_TRAP,this,newInstance(this));
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875712203
GPR[SPVAP]-1659875712203
GPR[EPVAP]-1659875713283
GPR[EPVS]-1659875713283
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<rows;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875713284
GPR[SPVAP]-1659875713284
GPR[EPVAP]-1659875714347
GPR[EPVS]-1659875714347
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<in.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875714349
GPR[SPVAP]-1659875714349
GPR[EPVAP]-1659875715411
GPR[EPVS]-1659875715411
========
if(idx<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875715413
GPR[SPVAP]-1659875715413
GPR[EPVAP]-1659875716463
GPR[EPVS]-1659875716463
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
checkInterpolation();
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875716465
GPR[SPVAP]-1659875716465
GPR[EPVAP]-1659875717531
GPR[EPVS]-1659875717531
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<n;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875717532
GPR[SPVAP]-1659875717532
GPR[EPVAP]-1659875718635
GPR[EPVS]-1659875718635
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
bottom0=out;
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875718636
GPR[SPVAP]-1659875718636
GPR[EPVAP]-1659875719704
GPR[EPVS]-1659875719704
========
if(count<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875719706
GPR[SPVAP]-1659875719706
GPR[EPVAP]-1659875720775
GPR[EPVS]-1659875720775
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<numPoints;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875720776
GPR[SPVAP]-1659875720776
GPR[EPVAP]-1659875721865
GPR[EPVS]-1659875721865
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<getColumnDimension();i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875721867
GPR[SPVAP]-1659875721867
GPR[EPVAP]-1659875722931
GPR[EPVS]-1659875722931
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<nCols;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875722932
GPR[SPVAP]-1659875722932
GPR[EPVAP]-1659875723997
GPR[EPVS]-1659875723997
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
checkRowIndex(sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875723998
GPR[SPVAP]-1659875723998
GPR[EPVAP]-1659875725055
GPR[EPVS]-1659875725055
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<getRowDimension();i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875725056
GPR[SPVAP]-1659875725056
GPR[EPVAP]-1659875726115
GPR[EPVS]-1659875726115
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<nRows;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875726116
GPR[SPVAP]-1659875726116
GPR[EPVAP]-1659875727203
GPR[EPVS]-1659875727203
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
checkColumnIndex(sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875727204
GPR[SPVAP]-1659875727204
GPR[EPVAP]-1659875728303
GPR[EPVS]-1659875728303
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<data.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875728304
GPR[SPVAP]-1659875728304
GPR[EPVAP]-1659875729370
GPR[EPVS]-1659875729370
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<l;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875729372
GPR[SPVAP]-1659875729372
GPR[EPVAP]-1659875730450
GPR[EPVS]-1659875730450
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<len;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875730451
GPR[SPVAP]-1659875730451
GPR[EPVAP]-1659875731545
GPR[EPVS]-1659875731545
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<=sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875731547
GPR[SPVAP]-1659875731547
GPR[EPVAP]-1659875733507
GPR[SPVATF]-1659875733507
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875735455
GPR[EPVS]-1659875735455
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<=length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875735456
GPR[SPVAP]-1659875735456
GPR[EPVAP]-1659875736507
GPR[EPVS]-1659875736507
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
checkVectorDimensions(v.data.length);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875736508
GPR[SPVAP]-1659875736508
GPR[EPVAP]-1659875737573
GPR[EPVS]-1659875737573
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
checkVectorDimensions(v.data.length);
for(int i=0;i<data.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875737574
GPR[SPVAP]-1659875737574
GPR[EPVAP]-1659875738649
GPR[EPVS]-1659875738649
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
checkVectorDimensions(v.data.length);
for(int i=0;i<length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875738650
GPR[SPVAP]-1659875738650
GPR[EPVAP]-1659875739712
GPR[EPVS]-1659875739713
========
if(i<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875739714
GPR[SPVAP]-1659875739714
GPR[EPVAP]-1659875740789
GPR[EPVS]-1659875740789
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<binCount;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875740791
GPR[SPVAP]-1659875740791
GPR[EPVAP]-1659875741847
GPR[EPVS]-1659875741847
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<ranks.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875741849
GPR[SPVAP]-1659875741849
GPR[EPVAP]-1659875742894
GPR[EPVS]-1659875742895
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<imagEigenvalues.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875742896
GPR[SPVAP]-1659875742896
GPR[EPVAP]-1659875743957
GPR[EPVS]-1659875743957
========
if(sampleSize<=0){
throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875743959
GPR[SPVAP]-1659875743959
GPR[EPVAP]-1659875745912
GPR[SPVATF]-1659875745912
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875747867
GPR[EPVS]-1659875747867
========
if(sampleSize<0){
throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875747868
GPR[SPVAP]-1659875747868
GPR[EPVAP]-1659875749840
GPR[SPVATF]-1659875749840
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875751784
GPR[EPVS]-1659875751784
========
if(divisor<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875751785
GPR[SPVAP]-1659875751785
GPR[EPVAP]-1659875752846
GPR[EPVS]-1659875752846
========
if(sampleSize<=RADIX){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875752847
GPR[SPVAP]-1659875752847
GPR[EPVAP]-1659875753927
GPR[EPVS]-1659875753927
========
if(sampleSize<=0){
result.nans=QNAN;
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875753928
GPR[SPVAP]-1659875753928
GPR[EPVAP]-1659875755006
GPR[EPVS]-1659875755006
========
if(sampleSize<=0){
result=dotrap(DfpField.FLAG_INVALID,DIVIDE_TRAP,newInstance(this),result);
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875755007
GPR[SPVAP]-1659875755007
GPR[EPVAP]-1659875756072
GPR[EPVS]-1659875756072
========
if(sampleSize<=0){
result.nans=QNAN;
result=dotrap(DfpField.FLAG_INVALID,DIVIDE_TRAP,newInstance(this),result);

throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875756074
GPR[SPVAP]-1659875756074
GPR[EPVAP]-1659875757123
GPR[EPVS]-1659875757123
========
if(sampleSize<=0){
throw new InvalidRepresentationException(LocalizedFormats.INVALID_BINARY_DIGIT,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875757125
GPR[SPVAP]-1659875757125
GPR[EPVAP]-1659875758177
GPR[EPVS]-1659875758177
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<s.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875758178
GPR[SPVAP]-1659875758178
GPR[EPVAP]-1659875759246
GPR[EPVS]-1659875759246
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<x.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875759248
GPR[SPVAP]-1659875759248
GPR[EPVAP]-1659875760312
GPR[EPVS]-1659875760312
========
if(end<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875760314
GPR[SPVAP]-1659875760314
GPR[EPVAP]-1659875761375
GPR[EPVS]-1659875761375
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<covMatEigenvalues.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875761377
GPR[SPVAP]-1659875761377
GPR[EPVAP]-1659875762417
GPR[EPVS]-1659875762417
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<numberOfRegressors;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875762418
GPR[SPVAP]-1659875762418
GPR[EPVAP]-1659875763499
GPR[EPVS]-1659875763499
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<nreq;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875763500
GPR[SPVAP]-1659875763500
GPR[EPVAP]-1659875764598
GPR[EPVS]-1659875764598
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<max;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875764599
GPR[SPVAP]-1659875764599
GPR[EPVAP]-1659875765653
GPR[EPVS]-1659875765653
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<z.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875765654
GPR[SPVAP]-1659875765654
GPR[EPVAP]-1659875766709
GPR[EPVS]-1659875766709
========
if(sampleSize<=0){
throw new MathIllegalArgumentException(LocalizedFormats.INDEX_NOT_POSITIVE,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875766710
GPR[SPVAP]-1659875766710
GPR[EPVAP]-1659875768714
GPR[SPVATF]-1659875768714
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875770664
GPR[EPVS]-1659875770664
========
if(i<0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875770665
GPR[SPVAP]-1659875770665
GPR[EPVAP]-1659875771724
GPR[EPVS]-1659875771724
========
if(sampleSize<0){
throw new MathIllegalArgumentException(LocalizedFormats.INDEX_NOT_POSITIVE,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875771725
GPR[SPVAP]-1659875771725
GPR[EPVAP]-1659875773681
GPR[SPVATF]-1659875773681
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875775605
GPR[EPVS]-1659875775605
========
if(i<=0){
throw new MathIllegalArgumentException(LocalizedFormats.INDEX_NOT_POSITIVE,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875775606
GPR[SPVAP]-1659875775606
GPR[EPVAP]-1659875776651
GPR[EPVS]-1659875776651
========
if(i<0){
throw new MathIllegalArgumentException(LocalizedFormats.INDEX_NOT_POSITIVE,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875776652
GPR[SPVAP]-1659875776652
GPR[EPVAP]-1659875777711
GPR[EPVS]-1659875777711
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<special.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875777712
GPR[SPVAP]-1659875777712
GPR[EPVAP]-1659875778783
GPR[EPVS]-1659875778783
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<dimension;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875778784
GPR[SPVAP]-1659875778784
GPR[EPVAP]-1659875779841
GPR[EPVS]-1659875779841
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=sampleSize;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875779844
GPR[SPVAP]-1659875779844
GPR[EPVAP]-1659875781835
GPR[SPVATF]-1659875781835
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 0
GPR[EPVATF]-1659875783771
GPR[SPVATR]-1659875783772
TESTING : math_8
MM messageFailing tests: 0
GPR[EPVATR]-1659875852943
GPR[EPVS]-1659875852943
GPR[PF]-1659875852943
sourceFile  script/workingdir/SimFix/math/math_8_buggy/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java
location   script/workingdir/SimFix/math/math_8_buggy
MM Out patch at /experiment_home///results/SimFix/Math/8/seed_261/patch/math/8/0/patch_520819_2_ts_1659875852943.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java --label=/src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java /tmp/tmpDirMM6224473996382142524/DiscreteDistribution.java  /experiment_home///results/SimFix/Math/8/seed_261/patch/math/8/0/2_DiscreteDistribution.java  --unified=3  > /experiment_home///results/SimFix/Math/8/seed_261/patch/math/8/0/patch_520819_2_ts_1659875852943.diff
MMOut command diff: []
========
if(length<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875852955
GPR[SPVAP]-1659875852955
GPR[EPVAP]-1659875854143
GPR[EPVS]-1659875854143
========
if(sampleSize<=0){
throw new DimensionMismatchException(v.length,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875854144
GPR[SPVAP]-1659875854144
GPR[EPVAP]-1659875855208
GPR[EPVS]-1659875855209
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<points.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875855210
GPR[SPVAP]-1659875855210
GPR[EPVAP]-1659875856298
GPR[EPVS]-1659875856298
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<realEigenvalues.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875856300
GPR[SPVAP]-1659875856300
GPR[EPVAP]-1659875857351
GPR[EPVS]-1659875857351
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<singularValues.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875857352
GPR[SPVAP]-1659875857352
GPR[EPVAP]-1659875858435
GPR[EPVS]-1659875858435
========
if(length<=0){
throw new DimensionMismatchException(v.length,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875858436
GPR[SPVAP]-1659875858436
GPR[EPVAP]-1659875859512
GPR[EPVS]-1659875859512
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<this.sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875859513
GPR[SPVAP]-1659875859513
GPR[EPVAP]-1659875860630
GPR[EPVS]-1659875860630
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<stateDim;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875860632
GPR[SPVAP]-1659875860632
GPR[EPVAP]-1659875861689
GPR[EPVS]-1659875861689
========
default :

if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875861691
GPR[SPVAP]-1659875861691
GPR[EPVAP]-1659875862641
GPR[EPVS]-1659875862641
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<val.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875862643
GPR[SPVAP]-1659875862643
GPR[EPVAP]-1659875863706
GPR[EPVS]-1659875863706
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<adiff;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875863708
GPR[SPVAP]-1659875863708
GPR[EPVAP]-1659875864772
GPR[EPVS]-1659875864772
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<coordinates.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875864774
GPR[SPVAP]-1659875864774
GPR[EPVAP]-1659875865838
GPR[EPVS]-1659875865838
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<root.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875865839
GPR[SPVAP]-1659875865839
GPR[EPVAP]-1659875866897
GPR[EPVS]-1659875866897
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<guess.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875866899
GPR[SPVAP]-1659875866899
GPR[EPVAP]-1659875867960
GPR[EPVS]-1659875867960
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<randomBytes.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875867962
GPR[SPVAP]-1659875867962
GPR[EPVAP]-1659875869044
GPR[EPVS]-1659875869044
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<hash.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875869046
GPR[SPVAP]-1659875869046
GPR[EPVAP]-1659875870167
GPR[EPVS]-1659875870167
========
if(dim<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875870169
GPR[SPVAP]-1659875870169
GPR[EPVAP]-1659875871233
GPR[EPVS]-1659875871233
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<cols;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875871234
GPR[SPVAP]-1659875871234
GPR[EPVAP]-1659875872302
GPR[EPVS]-1659875872302
========
if(sampleSize<=0){
result=newInstance(this);
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875872304
GPR[SPVAP]-1659875872304
GPR[EPVAP]-1659875873362
GPR[EPVS]-1659875873362
========
if(sampleSize<=0){
result.sign=(byte)(i*x.sign);
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875873363
GPR[SPVAP]-1659875873363
GPR[EPVAP]-1659875874423
GPR[EPVS]-1659875874423
========
if(sampleSize<=0){
result=newInstance(this);
result.sign=(byte)(i*x.sign);

throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875874424
GPR[SPVAP]-1659875874424
GPR[EPVAP]-1659875875481
GPR[EPVS]-1659875875481
========
if(numberOfSuccesses<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875875482
GPR[SPVAP]-1659875875482
GPR[EPVAP]-1659875876535
GPR[EPVS]-1659875876535
========
this.sampleSize=populationSize;
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875876536
GPR[SPVAP]-1659875876536
GPR[EPVAP]-1659875877641
GPR[EPVS]-1659875877641
========
this.sampleSize=sampleSize;
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875877643
GPR[SPVAP]-1659875877643
GPR[EPVAP]-1659875878695
GPR[EPVS]-1659875878695
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<simplex.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875878696
GPR[SPVAP]-1659875878696
GPR[EPVAP]-1659875879769
GPR[EPVS]-1659875879769
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<lower.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875879771
GPR[SPVAP]-1659875879771
GPR[EPVAP]-1659875880825
GPR[EPVS]-1659875880825
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<variablesToInclude.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875880826
GPR[SPVAP]-1659875880826
GPR[EPVAP]-1659875881872
GPR[EPVS]-1659875881872
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<dim;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875881873
GPR[SPVAP]-1659875881873
GPR[EPVAP]-1659875882934
GPR[EPVS]-1659875882934
========
sampleSize=sampleSize;
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875882936
GPR[SPVAP]-1659875882936
GPR[EPVAP]-1659875884925
GPR[SPVATF]-1659875884925
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875886905
GPR[EPVS]-1659875886905
========
i=sampleSize;
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875886906
GPR[SPVAP]-1659875886906
GPR[EPVAP]-1659875887960
GPR[EPVS]-1659875887960
========
if(sampleSize<=0){
throw new DimensionMismatchException(xvalI.length,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875887961
GPR[SPVAP]-1659875887961
GPR[EPVAP]-1659875889077
GPR[EPVS]-1659875889077
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<mant.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875889078
GPR[SPVAP]-1659875889078
GPR[EPVAP]-1659875890131
GPR[EPVS]-1659875890132
========
if(sampleSize<=0){
result=newInstance(this);
result.sign=(byte)(i*x.sign);
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875890133
GPR[SPVAP]-1659875890133
GPR[EPVAP]-1659875891195
GPR[EPVS]-1659875891195
========
if(sampleSize<=0){
result=newInstance(this);
result=newInstance(this);
result.sign=(byte)(i*x.sign);

throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875891196
GPR[SPVAP]-1659875891196
GPR[EPVAP]-1659875892249
GPR[EPVS]-1659875892249
========
if(sampleSize<=0){
result.sign=(byte)(i*x.sign);
result=newInstance(this);
result.sign=(byte)(i*x.sign);

throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875892250
GPR[SPVAP]-1659875892250
GPR[EPVAP]-1659875893323
GPR[EPVS]-1659875893323
========
if(sampleSize<=0){
result=newInstance(this);
result.sign=(byte)(i*x.sign);
result=newInstance(this);
result.sign=(byte)(i*x.sign);

throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875893324
GPR[SPVAP]-1659875893324
GPR[EPVAP]-1659875894402
GPR[EPVS]-1659875894402
========
if(sampleSize<=0){
result.sign=(byte)(i*divisor.sign);
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875894404
GPR[SPVAP]-1659875894404
GPR[EPVAP]-1659875895464
GPR[EPVS]-1659875895464
========
if(sampleSize<=0){
result=newInstance(this);
result.sign=(byte)(i*divisor.sign);

throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875895466
GPR[SPVAP]-1659875895466
GPR[EPVAP]-1659875896520
GPR[EPVS]-1659875896520
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<dimensionSize.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875896522
GPR[SPVAP]-1659875896522
GPR[EPVAP]-1659875897582
GPR[EPVS]-1659875897582
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<limit;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875897583
GPR[SPVAP]-1659875897583
GPR[EPVAP]-1659875898649
GPR[EPVS]-1659875898649
========
if(x<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875898651
GPR[SPVAP]-1659875898651
GPR[EPVAP]-1659875899715
GPR[EPVS]-1659875899715
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=sampleSize;i<n;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875899717
GPR[SPVAP]-1659875899717
GPR[EPVAP]-1659875900793
GPR[EPVS]-1659875900793
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<observations.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875900795
GPR[SPVAP]-1659875900795
GPR[EPVAP]-1659875901855
GPR[EPVS]-1659875901855
========
if(sampleSize<=0){
throw new ZeroException(LocalizedFormats.EQUAL_VERTICES_IN_SIMPLEX);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875901871
GPR[SPVAP]-1659875901871
GPR[EPVAP]-1659875902944
GPR[EPVS]-1659875902944
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<p.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875902946
GPR[SPVAP]-1659875902946
GPR[EPVAP]-1659875904003
GPR[EPVS]-1659875904003
========
if(sampleSize<=0){
result=newInstance(getZero());
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875904005
GPR[SPVAP]-1659875904005
GPR[EPVAP]-1659875905084
GPR[EPVS]-1659875905084
========
if(sampleSize<=0){
result=newInstance(getZero());
result.sign=(byte)(i*divisor.sign);

throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875905085
GPR[SPVAP]-1659875905085
GPR[EPVAP]-1659875906156
GPR[EPVS]-1659875906156
========
if(j<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875906158
GPR[SPVAP]-1659875906158
GPR[EPVAP]-1659875907222
GPR[EPVS]-1659875907222
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<m;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875907223
GPR[SPVAP]-1659875907223
GPR[EPVAP]-1659875908298
GPR[EPVS]-1659875908298
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<buf.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875908300
GPR[SPVAP]-1659875908300
GPR[EPVAP]-1659875909363
GPR[EPVS]-1659875909363
========
if(slbd<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875909365
GPR[SPVAP]-1659875909365
GPR[EPVAP]-1659875910433
GPR[EPVS]-1659875910433
========
if(tmp<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875910435
GPR[SPVAP]-1659875910435
GPR[EPVAP]-1659875911498
GPR[EPVS]-1659875911498
========
System.arraycopy(probabilities,0,probabilities,0,secondaryState.length);
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875911500
GPR[SPVAP]-1659875911500
GPR[EPVAP]-1659875912581
GPR[EPVS]-1659875912581
========
if(subd<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875912582
GPR[SPVAP]-1659875912582
GPR[EPVAP]-1659875913680
GPR[EPVS]-1659875913680
========
if(ordersSum<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875913681
GPR[SPVAP]-1659875913681
GPR[EPVAP]-1659875914765
GPR[EPVS]-1659875914765
========
if(l<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875914766
GPR[SPVAP]-1659875914766
GPR[EPVAP]-1659875915828
GPR[EPVS]-1659875915828
========
if(sampleSize<=0){
++sampleSize;
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875915829
GPR[SPVAP]-1659875915829
GPR[EPVAP]-1659875917846
GPR[SPVATF]-1659875917846
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875919808
GPR[EPVS]-1659875919808
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<optimData.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875919810
GPR[SPVAP]-1659875919810
GPR[EPVAP]-1659875920875
GPR[EPVS]-1659875920875
========
if(parameters<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875920878
GPR[SPVAP]-1659875920878
GPR[EPVAP]-1659875921952
GPR[EPVS]-1659875921952
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<iHeight;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875921953
GPR[SPVAP]-1659875921953
GPR[EPVAP]-1659875923023
GPR[EPVS]-1659875923023
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
outBlock[outIndex++]=block[i*jWidth+jColumn];
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875923024
GPR[SPVAP]-1659875923024
GPR[EPVAP]-1659875924079
GPR[EPVS]-1659875924079
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
block[i*jWidth+jColumn]=mBlock[mIndex++];
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875924086
GPR[SPVAP]-1659875924086
GPR[EPVAP]-1659875925190
GPR[EPVS]-1659875925190
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize+sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875925191
GPR[SPVAP]-1659875925191
GPR[EPVAP]-1659875927158
GPR[SPVATF]-1659875927158
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875929147
GPR[EPVS]-1659875929147
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<begin;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875929148
GPR[SPVAP]-1659875929148
GPR[EPVAP]-1659875930214
GPR[EPVS]-1659875930214
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=sampleSize;i<sampleSize+sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875930215
GPR[SPVAP]-1659875930215
GPR[EPVAP]-1659875932197
GPR[SPVATF]-1659875932197
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875934137
GPR[EPVS]-1659875934137
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=sampleSize;i<length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875934138
GPR[SPVAP]-1659875934138
GPR[EPVAP]-1659875935230
GPR[EPVS]-1659875935230
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=sampleSize;i<begin;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875935231
GPR[SPVAP]-1659875935231
GPR[EPVAP]-1659875936291
GPR[EPVS]-1659875936291
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<init.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875936292
GPR[SPVAP]-1659875936292
GPR[EPVAP]-1659875937359
GPR[EPVS]-1659875937359
========
if(checkFeasableCount<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875937360
GPR[SPVAP]-1659875937360
GPR[EPVAP]-1659875938429
GPR[EPVS]-1659875938429
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<end;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875938430
GPR[SPVAP]-1659875938430
GPR[EPVAP]-1659875939485
GPR[EPVS]-1659875939485
========
if(index<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875939487
GPR[SPVAP]-1659875939487
GPR[EPVAP]-1659875940547
GPR[EPVS]-1659875940547
========
if(sampleSize<=0){
result=newInstance(getZero());
result.nans=QNAN;

throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875940549
GPR[SPVAP]-1659875940549
GPR[EPVAP]-1659875941616
GPR[EPVS]-1659875941616
========
if(x<=RADIX){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875941617
GPR[SPVAP]-1659875941617
GPR[EPVAP]-1659875942691
GPR[EPVS]-1659875942691
========
if(x<=0){
result=newInstance(getZero());
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875942692
GPR[SPVAP]-1659875942692
GPR[EPVAP]-1659875943755
GPR[EPVS]-1659875943755
========
if(x<=0){
result.nans=QNAN;
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875943756
GPR[SPVAP]-1659875943756
GPR[EPVAP]-1659875944838
GPR[EPVS]-1659875944838
========
if(sampleSize<=RADIX){
result=newInstance(getZero());
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875944840
GPR[SPVAP]-1659875944840
GPR[EPVAP]-1659875945906
GPR[EPVS]-1659875945906
========
if(sampleSize<=RADIX){
result.nans=QNAN;
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875945907
GPR[SPVAP]-1659875945907
GPR[EPVAP]-1659875946990
GPR[EPVS]-1659875946990
========
if(sampleSize<=0){
result=newInstance(getZero());
result.nans=QNAN;
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875946991
GPR[SPVAP]-1659875946991
GPR[EPVAP]-1659875948082
GPR[EPVS]-1659875948082
========
if(x<=RADIX){
result=newInstance(getZero());
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875948083
GPR[SPVAP]-1659875948083
GPR[EPVAP]-1659875949154
GPR[EPVS]-1659875949154
========
if(x<=RADIX){
result.nans=QNAN;
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875949155
GPR[SPVAP]-1659875949155
GPR[EPVAP]-1659875950223
GPR[EPVS]-1659875950223
========
if(x<=0){
result=newInstance(getZero());
result.nans=QNAN;
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875950224
GPR[SPVAP]-1659875950224
GPR[EPVAP]-1659875951291
GPR[EPVS]-1659875951291
========
if(sampleSize<=RADIX){
result=newInstance(getZero());
result.nans=QNAN;
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875951293
GPR[SPVAP]-1659875951293
GPR[EPVAP]-1659875952357
GPR[EPVS]-1659875952357
========
if(x<=RADIX){
result=newInstance(getZero());
result.nans=QNAN;
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875952358
GPR[SPVAP]-1659875952358
GPR[EPVAP]-1659875953419
GPR[EPVS]-1659875953419
========
if(sampleSize<=0){
result=newInstance(getZero());
result=newInstance(getZero());
result.nans=QNAN;

throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875953420
GPR[SPVAP]-1659875953420
GPR[EPVAP]-1659875954509
GPR[EPVS]-1659875954509
========
if(sampleSize<=0){
result.nans=QNAN;
result=newInstance(getZero());
result.nans=QNAN;

throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875954510
GPR[SPVAP]-1659875954510
GPR[EPVAP]-1659875955585
GPR[EPVS]-1659875955585
========
if(sampleSize<=0){
result=newInstance(getZero());
result.nans=QNAN;
result=newInstance(getZero());
result.nans=QNAN;

throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875955586
GPR[SPVAP]-1659875955586
GPR[EPVAP]-1659875956654
GPR[EPVS]-1659875956654
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<nbPoints;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875956656
GPR[SPVAP]-1659875956656
GPR[EPVAP]-1659875957723
GPR[EPVS]-1659875957723
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<nvars;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875957724
GPR[SPVAP]-1659875957724
GPR[EPVAP]-1659875958784
GPR[EPVS]-1659875958784
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
sampleSize++;
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875958785
GPR[SPVAP]-1659875958785
GPR[EPVAP]-1659875960799
GPR[SPVATF]-1659875960799
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659875962727
GPR[EPVS]-1659875962727
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=sampleSize;i<points.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875962728
GPR[SPVAP]-1659875962728
GPR[EPVAP]-1659875963797
GPR[EPVS]-1659875963797
========
if(i<0){
i=-i-2;
}
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875963799
GPR[SPVAP]-1659875963799
GPR[EPVAP]-1659875964849
GPR[EPVS]-1659875964849
========
if(i>=polynomials.length){
i--;
}
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875964850
GPR[SPVAP]-1659875964850
GPR[EPVAP]-1659875965914
GPR[EPVS]-1659875965914
========
if(k<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875965915
GPR[SPVAP]-1659875965915
GPR[EPVAP]-1659875966979
GPR[EPVS]-1659875966979
========
if(e<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875966980
GPR[SPVAP]-1659875966980
GPR[EPVAP]-1659875968039
GPR[EPVS]-1659875968039
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sample.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875968043
GPR[SPVAP]-1659875968043
GPR[EPVAP]-1659875969123
GPR[EPVS]-1659875969123
========
if(v<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875969125
GPR[SPVAP]-1659875969125
GPR[EPVAP]-1659875970195
GPR[EPVS]-1659875970195
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<observed.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875970196
GPR[SPVAP]-1659875970196
GPR[EPVAP]-1659875971263
GPR[EPVS]-1659875971263
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<starts;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875971264
GPR[SPVAP]-1659875971264
GPR[EPVAP]-1659875972318
GPR[EPVS]-1659875972318
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<series.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875972320
GPR[SPVAP]-1659875972320
GPR[EPVAP]-1659875973386
GPR[EPVS]-1659875973386
========
if(cmp<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875973388
GPR[SPVAP]-1659875973388
GPR[EPVAP]-1659875974471
GPR[EPVS]-1659875974471
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
inc.exp=this.exp;
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875974472
GPR[SPVAP]-1659875974472
GPR[EPVAP]-1659875975555
GPR[EPVS]-1659875975555
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
inc.sign=this.sign;
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875975556
GPR[SPVAP]-1659875975556
GPR[EPVAP]-1659875976614
GPR[EPVS]-1659875976614
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<numTrials;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875976616
GPR[SPVAP]-1659875976616
GPR[EPVAP]-1659875977739
GPR[EPVS]-1659875977739
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<components.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875977741
GPR[SPVAP]-1659875977741
GPR[EPVAP]-1659875978824
GPR[EPVS]-1659875978824
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return array;

========
MM Copying to MM
GPR[SPVS]-1659875978826
GPR[SPVAP]-1659875978826
GPR[EPVAP]-1659875979899
GPR[EPVS]-1659875979899
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<order;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875979900
GPR[SPVAP]-1659875979900
GPR[EPVAP]-1659875980959
GPR[EPVS]-1659875980959
========
if(sampleSize<=0){
if(sampleSize>=0&&x<RADIX){
return multiplyFast(x);
}else {
return multiply(newInstance(x));
}
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875980960
GPR[SPVAP]-1659875980960
GPR[EPVAP]-1659875982072
GPR[EPVS]-1659875982072
========
if(di<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875982073
GPR[SPVAP]-1659875982073
GPR[EPVAP]-1659875983150
GPR[EPVS]-1659875983150
========
if(colIndex<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875983151
GPR[SPVAP]-1659875983151
GPR[EPVAP]-1659875984213
GPR[EPVS]-1659875984213
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<nVars;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875984215
GPR[SPVAP]-1659875984215
GPR[EPVAP]-1659875985278
GPR[EPVS]-1659875985278
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<oldLength;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875985280
GPR[SPVAP]-1659875985280
GPR[EPVAP]-1659875986374
GPR[EPVS]-1659875986374
========
sampleSize-=i;
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875986376
GPR[SPVAP]-1659875986376
GPR[EPVAP]-1659875987439
GPR[EPVS]-1659875987439
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
MatrixUtils.checkColumnIndex(this,sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875987440
GPR[SPVAP]-1659875987440
GPR[EPVAP]-1659875988515
GPR[EPVS]-1659875988515
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=sampleSize;i<order;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875988517
GPR[SPVAP]-1659875988517
GPR[EPVAP]-1659875989646
GPR[EPVS]-1659875989646
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<mainSetDimension;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875989647
GPR[SPVAP]-1659875989647
GPR[EPVAP]-1659875990728
GPR[EPVS]-1659875990728
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<nC;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875990731
GPR[SPVAP]-1659875990731
GPR[EPVAP]-1659875991815
GPR[EPVS]-1659875991815
========
if(i<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<=sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875991817
GPR[SPVAP]-1659875991817
GPR[EPVAP]-1659875992877
GPR[EPVS]-1659875992878
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<main.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875992879
GPR[SPVAP]-1659875992879
GPR[EPVAP]-1659875993935
GPR[EPVS]-1659875993935
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<vertices.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875993936
GPR[SPVAP]-1659875993936
GPR[EPVAP]-1659875994993
GPR[EPVS]-1659875994993
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<mappers.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875994994
GPR[SPVAP]-1659875994994
GPR[EPVAP]-1659875996054
GPR[EPVS]-1659875996054
========
probabilities[sampleSize-1]=probabilities[n];
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875996057
GPR[SPVAP]-1659875996057
GPR[EPVAP]-1659875997142
GPR[EPVS]-1659875997142
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<observed1.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875997144
GPR[SPVAP]-1659875997144
GPR[EPVAP]-1659875998211
GPR[EPVS]-1659875998211
========
if(sampleSize<=0){
throw new MathIllegalArgumentException(LocalizedFormats.PROPAGATION_DIRECTION_MISMATCH);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659875998212
GPR[SPVAP]-1659875998212
GPR[EPVAP]-1659876000212
GPR[SPVATF]-1659876000212
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659876002212
GPR[EPVS]-1659876002212
========
if(_i<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876002214
GPR[SPVAP]-1659876002214
GPR[EPVAP]-1659876003298
GPR[EPVS]-1659876003298
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=sampleSize;i<nvars;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876003300
GPR[SPVAP]-1659876003300
GPR[EPVAP]-1659876004372
GPR[EPVS]-1659876004372
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<blockColumns;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876004374
GPR[SPVAP]-1659876004374
GPR[EPVAP]-1659876005435
GPR[EPVS]-1659876005435
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<after.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876005437
GPR[SPVAP]-1659876005437
GPR[EPVAP]-1659876006505
GPR[EPVS]-1659876006505
========
probabilities[sampleSize]=FastMath.abs(probabilities[i]-probabilities[i]);
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876006507
GPR[SPVAP]-1659876006507
GPR[EPVAP]-1659876007599
GPR[EPVS]-1659876007599
========
if(exponent<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876007601
GPR[SPVAP]-1659876007601
GPR[EPVAP]-1659876008698
GPR[EPVS]-1659876008698
========
if(sampleSize<=0){
if(sampleSize<-1074){
return 0;
}
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876008699
GPR[SPVAP]-1659876008699
GPR[EPVAP]-1659876009749
GPR[EPVS]-1659876009749
========
probabilities[sampleSize]=work[i];
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876009751
GPR[SPVAP]-1659876009751
GPR[EPVAP]-1659876011206
GPR[EPVS]-1659876011206
========
if(currentDegree<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876011207
GPR[SPVAP]-1659876011207
GPR[EPVAP]-1659876012350
GPR[EPVS]-1659876012350
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<scale.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876012351
GPR[SPVAP]-1659876012351
GPR[EPVAP]-1659876013459
GPR[EPVS]-1659876013459
========
if(mu<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876013464
GPR[SPVAP]-1659876013464
GPR[EPVAP]-1659876014581
GPR[EPVS]-1659876014581
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<high;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876014583
GPR[SPVAP]-1659876014583
GPR[EPVAP]-1659876015704
GPR[EPVS]-1659876015704
========
if(colIndex<0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876015708
GPR[SPVAP]-1659876015708
GPR[EPVAP]-1659876016765
GPR[EPVS]-1659876016765
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
case ROUND_HALF_EVEN :

for(int i=0;i<sampleSize;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876016772
GPR[SPVAP]-1659876016772
GPR[EPVAP]-1659876017731
GPR[EPVS]-1659876017731
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<iHeight;i++){
outBlock[outIndex++]=block[i*jWidth+jColumn];
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876017736
GPR[SPVAP]-1659876017736
GPR[EPVAP]-1659876018834
GPR[EPVS]-1659876018834
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<iHeight;i++){
block[i*jWidth+jColumn]=mBlock[mIndex++];
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876018836
GPR[SPVAP]-1659876018836
GPR[EPVAP]-1659876019911
GPR[EPVS]-1659876019911
========
if(sampleSize<=0){
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,sampleSize);
}
 final T[] out=(T[])java.lang.reflect.Array.newInstance(singletons.get(0).getClass(),sampleSize);
for(int i=0;i<f.length;i++){
out[i]=sample();
}
return out;

========
MM Copying to MM
GPR[SPVS]-1659876019915
GPR[SPVAP]-1659876019915
GPR[EPVAP]-1659876021007
GPR[EPVS]-1659876021007
GPR[ESUN]-1659876021007
GPR[SSUN]-1659876021007
org.apache.commons.math3.distribution.DiscreteDistribution,189
GPR[ESUN]-1659876021661
GPR[SSUN]-1659876021661
org.apache.commons.math3.distribution.DiscreteDistribution,190
GPR[ESUN]-1659876022058
GPR[SSUN]-1659876022058
org.apache.commons.math3.distribution.DiscreteDistribution,157
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
if(randomValue<=sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876027336
GPR[SPVAP]-1659876027336
GPR[EPVAP]-1659876033793
GPR[SPVATF]-1659876033793
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659876035779
GPR[EPVS]-1659876035779
========
if(length<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876035781
GPR[SPVAP]-1659876035781
GPR[EPVAP]-1659876036902
GPR[EPVS]-1659876036902
========
if(outValue<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876036904
GPR[SPVAP]-1659876036904
GPR[EPVAP]-1659876037964
GPR[EPVS]-1659876037964
========
if(sum<minDistSquared[j]){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876037966
GPR[SPVAP]-1659876037966
GPR[EPVAP]-1659876039023
GPR[EPVS]-1659876039023
========
if(randomValue<probabilities[i]){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876039024
GPR[SPVAP]-1659876039024
GPR[EPVAP]-1659876041007
GPR[SPVATF]-1659876041007
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659876043003
GPR[EPVS]-1659876043003
========
if(d2<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876043005
GPR[SPVAP]-1659876043005
GPR[EPVAP]-1659876044083
GPR[EPVS]-1659876044083
========
if(distance<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876044085
GPR[SPVAP]-1659876044085
GPR[EPVAP]-1659876045203
GPR[EPVS]-1659876045203
========
if(value<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876045212
GPR[SPVAP]-1659876045212
GPR[EPVAP]-1659876046280
GPR[EPVS]-1659876046280
========
if(x<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876046282
GPR[SPVAP]-1659876046282
GPR[EPVAP]-1659876047343
GPR[EPVS]-1659876047343
========
if(randomValue<=probabilities[i]){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876047345
GPR[SPVAP]-1659876047345
GPR[EPVAP]-1659876049340
GPR[SPVATF]-1659876049340
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659876051307
GPR[EPVS]-1659876051307
========
if(min<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876051309
GPR[SPVAP]-1659876051309
GPR[EPVAP]-1659876052359
GPR[EPVS]-1659876052359
========
if(randomValue<=ZERO){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876052361
GPR[SPVAP]-1659876052361
GPR[EPVAP]-1659876053464
GPR[EPVS]-1659876053464
========
if(randomValue<ZERO){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876053465
GPR[SPVAP]-1659876053465
GPR[EPVAP]-1659876054555
GPR[EPVS]-1659876054555
========
if(tempb<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876054556
GPR[SPVAP]-1659876054556
GPR[EPVAP]-1659876055647
GPR[EPVS]-1659876055647
========
if(t<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876055650
GPR[SPVAP]-1659876055650
GPR[EPVAP]-1659876056719
GPR[EPVS]-1659876056719
========
splitReciprocal(probabilities,i);
if(randomValue<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876056720
GPR[SPVAP]-1659876056720
GPR[EPVAP]-1659876057769
GPR[EPVS]-1659876057769
========
if(p<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876057771
GPR[SPVAP]-1659876057771
GPR[EPVAP]-1659876058831
GPR[EPVS]-1659876058831
========
if(ltI[i]<=randomValue){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876058832
GPR[SPVAP]-1659876058832
GPR[EPVAP]-1659876059884
GPR[EPVS]-1659876059884
========
if(probabilities[i]<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876059885
GPR[SPVAP]-1659876059885
GPR[EPVAP]-1659876061874
GPR[SPVATF]-1659876061874
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659876063839
GPR[EPVS]-1659876063839
========
if(probabilities[i]<=sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876063840
GPR[SPVAP]-1659876063840
GPR[EPVAP]-1659876065799
GPR[SPVATF]-1659876065799
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 0
GPR[EPVATF]-1659876067762
GPR[SPVATR]-1659876067763
TESTING : math_8
MM message  - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testSample
MM message  - org.apache.commons.math3.distribution.DiscreteIntegerDistributionTest::testSample
MM messageFailing tests: 2
MM messageRunning ant (run.dev.tests)................................................ OK
MM messageRunning ant (compile.tests)................................................ OK
GPR[EPVATR]-1659876137407
GPR[EPVS]-1659876137407
========
if(i<0){
throw new MathIllegalArgumentException(LocalizedFormats.INDEX_NOT_POSITIVE,i);
}
if(randomValue<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876137412
GPR[SPVAP]-1659876137412
GPR[EPVAP]-1659876139839
GPR[SPVATF]-1659876139839
TESTING : org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM:   - org.apache.commons.math3.distribution.DiscreteRealDistributionTest::testIssue942
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659876141792
GPR[EPVS]-1659876141792
========
if(randomValue<Precision.SAFE_MIN){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876141793
GPR[SPVAP]-1659876141793
GPR[EPVAP]-1659876142855
GPR[EPVS]-1659876142855
========
if(dist<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876142857
GPR[SPVAP]-1659876142857
GPR[EPVAP]-1659876143930
GPR[EPVS]-1659876143930
========
if(sigma<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876143931
GPR[SPVAP]-1659876143931
GPR[EPVAP]-1659876145047
GPR[EPVS]-1659876145047
========
if(max<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876145049
GPR[SPVAP]-1659876145049
GPR[EPVAP]-1659876146110
GPR[EPVS]-1659876146110
========
if(w<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876146112
GPR[SPVAP]-1659876146112
GPR[EPVAP]-1659876147163
GPR[EPVS]-1659876147163
========
if(u2<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876147164
GPR[SPVAP]-1659876147164
GPR[EPVAP]-1659876148231
GPR[EPVS]-1659876148231
========
if(c<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876148232
GPR[SPVAP]-1659876148232
GPR[EPVAP]-1659876149293
GPR[EPVS]-1659876149293
========
if(eigen<sum){
return singletons.get(i);
}

========
MM Copying to MM
GPR[SPVS]-1659876149295
GPR[SPVAP]-1659876149295
GPR[EPVAP]-1659876150394
GPR[EPVS]-1659876150394
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fb44e1cfefd, pid=1349550, tid=140412703299328
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 5209 C2 cofix.core.parser.node.expr.InfixExpr.match(Lcofix/core/parser/node/Node;Ljava/util/Map;Ljava/util/Map;Ljava/util/List;)Z (1104 bytes) @ 0x00007fb44e1cfefd [0x00007fb44e1cd5c0+0x293d]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/math/math_8_buggy/hs_err_pid1349550.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Math/8 results at /experiment_home///results/SimFix/Math/8/seed_261/
\n\nNode: host-68\n
\n\nDate: Sun 07 Aug 2022 05:42:30 AM PDT\n
Removing checked out dir script/workingdir/SimFix/math/math_8_buggy
GPR[SSLE]-1659876150439
GPR[ESLE]-1659876210444
