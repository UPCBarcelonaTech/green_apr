Sleep 1m start
GPR[SSLI]-1659840815696
GPR[ESLI]-1659840875733
Running SimFix Math 6b
Timezone: America/Los_Angeles
Seed 260
Java 8: /experiment_home/jdk1.8.0_45/bin 
DEFECTS4J_HOME: /experiment_home/defects4j/
Creating out dir /experiment_home///results/SimFix/Math/6/seed_260/
Project lc: math
New out script/workingdir/SimFix/math/math_6_buggy
The file script/workingdir/SimFix/math/math_6_buggy does not exist!
script/workingdir/SimFix/math/math_6_buggy
Current directory: script/workingdir/SimFix/math/math_6_buggy
classpath:  script/workingdir/SimFix/math/math_6_buggy/target/classes:script/workingdir/SimFix/math/math_6_buggy/target/test-classes:/experiment_home/defects4j/framework/projects/lib/junit-4.11.jar:script/workingdir/SimFix/math/math_6_buggy/lib/junit-4.8.2.jar
Src java:  /src/main/java
Classes Java:  /target/classes
Src Test:  /src/test/java
Classes Test:  /target/test-classes
GPR[SSLB]-1659840893110
GPR[ESLB]-1659840953114
Calling SimFix: at script/workingdir/SimFix/math/math_6_buggy
build.xml
checkstyle.xml
d4j-info
defects4j.build.properties
doap_math.rdf
doc
findbugs-exclude-filter.xml
license-header.txt
LICENSE.txt
math-pre-RC.sh
math-RC.sh
NOTICE.txt
pom.xml
PROPOSAL.html
RELEASE-NOTES.txt
siteMods
src
target
test-jar.xml
content current dir: build.xml checkstyle.xml d4j-info defects4j.build.properties doap_math.rdf doc findbugs-exclude-filter.xml license-header.txt LICENSE.txt math-pre-RC.sh math-RC.sh NOTICE.txt pom.xml PROPOSAL.html RELEASE-NOTES.txt siteMods src target test-jar.xml
Node: host-66
Date init: Sat 06 Aug 2022 07:55:55 PM PDT
OAR_JOB_ID: 3720517
script/workingdir/SimFix/
GPR[SSUP]-1659840955354
=================================================
Project : math_6	start : 22/08/06 19:55

Field type inconsistancy 'start' with types : Vector2D and Vector3D
Field type inconsistancy 'end' with types : Vector2D and Vector3D
Variable type inconsistancy of 'start' in method 'getSegments' with types : Vector2D and Vector3D
Variable type inconsistancy of 'end' in method 'getSegments' with types : Vector2D and Vector3D
Field type inconsistancy 'SUPER' with types : MultivariateOptimizer and BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>
Field type inconsistancy 'SUPER' with types : MultivariateOptimizer and BaseAbstractMultivariateOptimizer<MultivariateFunction>
Field type inconsistancy 'SUPER' with types : MultivariateOptimizer and BaseAbstractMultivariateOptimizer<MultivariateFunction>
Field type inconsistancy 'SUPER' with types : MultivariateOptimizer and BaseAbstractMultivariateSimpleBoundsOptimizer<MultivariateFunction>
Field type inconsistancy 'SUPER' with types : GradientMultivariateOptimizer and AbstractScalarDifferentiableOptimizer
Field type inconsistancy 'updateFormula' with types : Formula and ConjugateGradientFormula
Field type inconsistancy 'SUPER' with types : JacobianMultivariateVectorOptimizer and BaseAbstractMultivariateVectorOptimizer<DifferentiableMultivariateVectorFunction>
Field type inconsistancy 'SUPER' with types : UnivariateOptimizer and BaseAbstractUnivariateOptimizer
Field type inconsistancy 'SUPER' with types : LinearOptimizer and AbstractLinearOptimizer
Field type inconsistancy 'optimizer' with types : MultivariateDifferentiableVectorOptimizer and MultivariateVectorOptimizer
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_1
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_2
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_1
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_2
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_3
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_4
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_5
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_1
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_2
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_3
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_4
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_5
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_1
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_2
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_3
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_4
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_5
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1_purify_1
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1_purify_2
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1_purify_3
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1_purify_4
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1_purify_5
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1_purify_1
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1_purify_2
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1_purify_3
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1_purify_4
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1_purify_5
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2_purify_1
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2_purify_2
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2_purify_3
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2_purify_4
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2_purify_5
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2_purify_1
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2_purify_2
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2_purify_3
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2_purify_4
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2_purify_5
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1_purify_1
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1_purify_2
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1_purify_3
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1_purify_4
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1_purify_5
MM: Failing tests: 0
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[ESUP]-1659841107924
MM Purify? true
GPR[SFL]-1659841108882
GPR[EFL]-1659841108886
GPR[SFP]-1659841108886
TIMEOUT : 600000
GPR[SSUN]-1659841108900
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659841111064
GPR[SPVAP]-1659841111064
GPR[EPVAP]-1659841117607
GPR[SPVATF]-1659841117608
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 0
GPR[EPVATF]-1659841119629
GPR[SPVATR]-1659841119629
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659841184941
GPR[EPVS]-1659841184941
GPR[PF]-1659841184941
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/0/patch_76059_1_ts_1659841184941.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM8195308957406845517/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/0/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/0/patch_76059_1_ts_1659841184941.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659841184952
GPR[SPVAP]-1659841184952
GPR[EPVAP]-1659841186919
GPR[SPVATF]-1659841186919
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841188870
GPR[EPVS]-1659841188870
GPR[ESUN]-1659841188872
GPR[SSUN]-1659841188872
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841191249
GPR[SPVAP]-1659841191249
GPR[EPVAP]-1659841197847
GPR[SPVATF]-1659841197847
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841199974
GPR[EPVS]-1659841199974
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841199975
GPR[SPVAP]-1659841199975
GPR[EPVAP]-1659841202029
GPR[SPVATF]-1659841202029
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841203993
GPR[EPVS]-1659841203993
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841203995
GPR[SPVAP]-1659841203995
GPR[EPVAP]-1659841206073
GPR[SPVATF]-1659841206073
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841208123
GPR[EPVS]-1659841208123
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841208125
GPR[SPVAP]-1659841208125
GPR[EPVAP]-1659841210192
GPR[SPVATF]-1659841210192
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841212141
GPR[EPVS]-1659841212141
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841212143
GPR[SPVAP]-1659841212143
GPR[EPVAP]-1659841214190
GPR[SPVATF]-1659841214191
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841216225
GPR[EPVS]-1659841216225
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841216227
GPR[SPVAP]-1659841216227
GPR[EPVAP]-1659841218305
GPR[SPVATF]-1659841218305
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841220246
GPR[EPVS]-1659841220246
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841220248
GPR[SPVAP]-1659841220248
GPR[EPVAP]-1659841222334
GPR[SPVATF]-1659841222334
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841224302
GPR[EPVS]-1659841224302
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841224304
GPR[SPVAP]-1659841224304
GPR[EPVAP]-1659841226389
GPR[SPVATF]-1659841226389
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841228345
GPR[EPVS]-1659841228345
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841228347
GPR[SPVAP]-1659841228347
GPR[EPVAP]-1659841230394
GPR[SPVATF]-1659841230394
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841232382
GPR[EPVS]-1659841232382
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841232384
GPR[SPVAP]-1659841232384
GPR[EPVAP]-1659841234443
GPR[SPVATF]-1659841234443
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841236430
GPR[EPVS]-1659841236430
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841236432
GPR[SPVAP]-1659841236432
GPR[EPVAP]-1659841239912
GPR[SPVATF]-1659841239912
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841241896
GPR[EPVS]-1659841241896
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841241898
GPR[SPVAP]-1659841241898
GPR[EPVAP]-1659841243997
GPR[SPVATF]-1659841243997
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841245970
GPR[EPVS]-1659841245970
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841245972
GPR[SPVAP]-1659841245972
GPR[EPVAP]-1659841248047
GPR[SPVATF]-1659841248047
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841250030
GPR[EPVS]-1659841250030
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841250032
GPR[SPVAP]-1659841250032
GPR[EPVAP]-1659841252064
GPR[SPVATF]-1659841252064
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841254000
GPR[EPVS]-1659841254000
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841254002
GPR[SPVAP]-1659841254002
GPR[EPVAP]-1659841256041
GPR[SPVATF]-1659841256041
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841258000
GPR[EPVS]-1659841258000
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841258002
GPR[SPVAP]-1659841258002
GPR[EPVAP]-1659841260062
GPR[SPVATF]-1659841260062
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841262066
GPR[EPVS]-1659841262066
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841262068
GPR[SPVAP]-1659841262068
GPR[EPVAP]-1659841264109
GPR[SPVATF]-1659841264109
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841266086
GPR[EPVS]-1659841266086
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841266087
GPR[SPVAP]-1659841266087
GPR[EPVAP]-1659841268151
GPR[SPVATF]-1659841268151
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841270170
GPR[EPVS]-1659841270170
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841270172
GPR[SPVAP]-1659841270172
GPR[EPVAP]-1659841272238
GPR[SPVATF]-1659841272238
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841274210
GPR[EPVS]-1659841274210
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841274212
GPR[SPVAP]-1659841274212
GPR[EPVAP]-1659841276319
GPR[SPVATF]-1659841276319
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841278288
GPR[EPVS]-1659841278288
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841278290
GPR[SPVAP]-1659841278290
GPR[EPVAP]-1659841280340
GPR[SPVATF]-1659841280340
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841282301
GPR[EPVS]-1659841282301
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841282303
GPR[SPVAP]-1659841282303
GPR[EPVAP]-1659841284418
GPR[SPVATF]-1659841284418
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841286369
GPR[EPVS]-1659841286369
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841286371
GPR[SPVAP]-1659841286371
GPR[EPVAP]-1659841288447
GPR[SPVATF]-1659841288447
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841290392
GPR[EPVS]-1659841290393
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841290394
GPR[SPVAP]-1659841290394
GPR[EPVAP]-1659841292545
GPR[SPVATF]-1659841292546
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841294517
GPR[EPVS]-1659841294517
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841294519
GPR[SPVAP]-1659841294519
GPR[EPVAP]-1659841296578
GPR[SPVATF]-1659841296578
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841298524
GPR[EPVS]-1659841298524
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841298525
GPR[SPVAP]-1659841298525
GPR[EPVAP]-1659841300576
GPR[SPVATF]-1659841300576
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841302548
GPR[EPVS]-1659841302548
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841302549
GPR[SPVAP]-1659841302549
GPR[EPVAP]-1659841304599
GPR[SPVATF]-1659841304599
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841306591
GPR[EPVS]-1659841306591
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841306593
GPR[SPVAP]-1659841306593
GPR[EPVAP]-1659841308642
GPR[SPVATF]-1659841308642
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841312318
GPR[EPVS]-1659841312318
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841312321
GPR[SPVAP]-1659841312321
GPR[EPVAP]-1659841314388
GPR[SPVATF]-1659841314388
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841316381
GPR[EPVS]-1659841316382
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841316383
GPR[SPVAP]-1659841316383
GPR[EPVAP]-1659841318433
GPR[SPVATF]-1659841318433
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841320438
GPR[EPVS]-1659841320438
GPR[ESUN]-1659841320442
GPR[SSUN]-1659841320442
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841327887
GPR[SPVAP]-1659841327887
GPR[EPVAP]-1659841334385
GPR[SPVATF]-1659841334386
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841336405
GPR[EPVS]-1659841336405
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659841336408
GPR[SPVAP]-1659841336408
GPR[EPVAP]-1659841337538
GPR[EPVS]-1659841337538
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841337541
GPR[SPVAP]-1659841337541
GPR[EPVAP]-1659841338653
GPR[EPVS]-1659841338653
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841338656
GPR[SPVAP]-1659841338656
GPR[EPVAP]-1659841339767
GPR[EPVS]-1659841339767
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841339772
GPR[SPVAP]-1659841339772
GPR[EPVAP]-1659841340911
GPR[EPVS]-1659841340911
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841340913
GPR[SPVAP]-1659841340913
GPR[EPVAP]-1659841342036
GPR[EPVS]-1659841342036
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841342038
GPR[SPVAP]-1659841342038
GPR[EPVAP]-1659841343177
GPR[EPVS]-1659841343177
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841343186
GPR[SPVAP]-1659841343186
GPR[EPVAP]-1659841345320
GPR[SPVATF]-1659841345320
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841347340
GPR[EPVS]-1659841347340
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841347342
GPR[SPVAP]-1659841347342
GPR[EPVAP]-1659841348487
GPR[EPVS]-1659841348487
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841348489
GPR[SPVAP]-1659841348489
GPR[EPVAP]-1659841349613
GPR[EPVS]-1659841349613
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841349615
GPR[SPVAP]-1659841349615
GPR[EPVAP]-1659841350719
GPR[EPVS]-1659841350719
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841350722
GPR[SPVAP]-1659841350722
GPR[EPVAP]-1659841351853
GPR[EPVS]-1659841351853
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841351855
GPR[SPVAP]-1659841351855
GPR[EPVAP]-1659841352968
GPR[EPVS]-1659841352968
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841352970
GPR[SPVAP]-1659841352970
GPR[EPVAP]-1659841354068
GPR[EPVS]-1659841354068
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841354070
GPR[SPVAP]-1659841354070
GPR[EPVAP]-1659841355208
GPR[EPVS]-1659841355208
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841355210
GPR[SPVAP]-1659841355210
GPR[EPVAP]-1659841356333
GPR[EPVS]-1659841356333
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841356339
GPR[SPVAP]-1659841356339
GPR[EPVAP]-1659841357453
GPR[EPVS]-1659841357453
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841357455
GPR[SPVAP]-1659841357455
GPR[EPVAP]-1659841358570
GPR[EPVS]-1659841358570
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841358573
GPR[SPVAP]-1659841358573
GPR[EPVAP]-1659841359689
GPR[EPVS]-1659841359689
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841359691
GPR[SPVAP]-1659841359691
GPR[EPVAP]-1659841360817
GPR[EPVS]-1659841360817
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841360819
GPR[SPVAP]-1659841360819
GPR[EPVAP]-1659841361943
GPR[EPVS]-1659841361943
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841361945
GPR[SPVAP]-1659841361945
GPR[EPVAP]-1659841364024
GPR[SPVATF]-1659841364025
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841365992
GPR[EPVS]-1659841365992
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659841365995
GPR[SPVAP]-1659841365995
GPR[EPVAP]-1659841367111
GPR[EPVS]-1659841367111
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841367113
GPR[SPVAP]-1659841367113
GPR[EPVAP]-1659841368225
GPR[EPVS]-1659841368225
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841368229
GPR[SPVAP]-1659841368229
GPR[EPVAP]-1659841369371
GPR[EPVS]-1659841369371
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841369374
GPR[SPVAP]-1659841369374
GPR[EPVAP]-1659841370494
GPR[EPVS]-1659841370494
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841370498
GPR[SPVAP]-1659841370498
GPR[EPVAP]-1659841371613
GPR[EPVS]-1659841371613
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841371615
GPR[SPVAP]-1659841371615
GPR[EPVAP]-1659841372727
GPR[EPVS]-1659841372728
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841372729
GPR[SPVAP]-1659841372729
GPR[EPVAP]-1659841373860
GPR[EPVS]-1659841373860
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841373863
GPR[SPVAP]-1659841373863
GPR[EPVAP]-1659841375003
GPR[EPVS]-1659841375003
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841375005
GPR[SPVAP]-1659841375005
GPR[EPVAP]-1659841376112
GPR[EPVS]-1659841376112
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841376114
GPR[SPVAP]-1659841376114
GPR[EPVAP]-1659841377213
GPR[EPVS]-1659841377213
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841377215
GPR[SPVAP]-1659841377215
GPR[EPVAP]-1659841378317
GPR[EPVS]-1659841378317
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841378319
GPR[SPVAP]-1659841378319
GPR[EPVAP]-1659841379456
GPR[EPVS]-1659841379456
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841379458
GPR[SPVAP]-1659841379458
GPR[EPVAP]-1659841381518
GPR[SPVATF]-1659841381518
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841385161
GPR[EPVS]-1659841385161
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841385163
GPR[SPVAP]-1659841385163
GPR[EPVAP]-1659841386259
GPR[EPVS]-1659841386259
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841386261
GPR[SPVAP]-1659841386261
GPR[EPVAP]-1659841387388
GPR[EPVS]-1659841387388
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841387390
GPR[SPVAP]-1659841387390
GPR[EPVAP]-1659841388493
GPR[EPVS]-1659841388493
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841388495
GPR[SPVAP]-1659841388495
GPR[EPVAP]-1659841389606
GPR[EPVS]-1659841389606
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841389608
GPR[SPVAP]-1659841389608
GPR[EPVAP]-1659841390726
GPR[EPVS]-1659841390726
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841390728
GPR[SPVAP]-1659841390728
GPR[EPVAP]-1659841391830
GPR[EPVS]-1659841391830
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841391832
GPR[SPVAP]-1659841391832
GPR[EPVAP]-1659841392949
GPR[EPVS]-1659841392949
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841392954
GPR[SPVAP]-1659841392954
GPR[EPVAP]-1659841394056
GPR[EPVS]-1659841394056
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841394060
GPR[SPVAP]-1659841394060
GPR[EPVAP]-1659841395181
GPR[EPVS]-1659841395181
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841395183
GPR[SPVAP]-1659841395183
GPR[EPVAP]-1659841396316
GPR[EPVS]-1659841396316
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841396318
GPR[SPVAP]-1659841396318
GPR[EPVAP]-1659841397478
GPR[EPVS]-1659841397478
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841397479
GPR[SPVAP]-1659841397479
GPR[EPVAP]-1659841398580
GPR[EPVS]-1659841398580
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841398583
GPR[SPVAP]-1659841398583
GPR[EPVAP]-1659841399685
GPR[EPVS]-1659841399685
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841399687
GPR[SPVAP]-1659841399687
GPR[EPVAP]-1659841400799
GPR[EPVS]-1659841400799
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841400804
GPR[SPVAP]-1659841400804
GPR[EPVAP]-1659841401907
GPR[EPVS]-1659841401907
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841401911
GPR[SPVAP]-1659841401911
GPR[EPVAP]-1659841403042
GPR[EPVS]-1659841403042
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841403044
GPR[SPVAP]-1659841403044
GPR[EPVAP]-1659841404172
GPR[EPVS]-1659841404172
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841404175
GPR[SPVAP]-1659841404175
GPR[EPVAP]-1659841405279
GPR[EPVS]-1659841405279
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841405282
GPR[SPVAP]-1659841405282
GPR[EPVAP]-1659841406408
GPR[EPVS]-1659841406408
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841406410
GPR[SPVAP]-1659841406410
GPR[EPVAP]-1659841407533
GPR[EPVS]-1659841407533
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841407534
GPR[SPVAP]-1659841407534
GPR[EPVAP]-1659841408646
GPR[EPVS]-1659841408646
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841408648
GPR[SPVAP]-1659841408648
GPR[EPVAP]-1659841409819
GPR[EPVS]-1659841409819
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841409820
GPR[SPVAP]-1659841409820
GPR[EPVAP]-1659841410935
GPR[EPVS]-1659841410935
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841410936
GPR[SPVAP]-1659841410936
GPR[EPVAP]-1659841412101
GPR[EPVS]-1659841412101
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841412103
GPR[SPVAP]-1659841412103
GPR[EPVAP]-1659841413261
GPR[EPVS]-1659841413261
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841413263
GPR[SPVAP]-1659841413263
GPR[EPVAP]-1659841414401
GPR[EPVS]-1659841414401
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841414402
GPR[SPVAP]-1659841414402
GPR[EPVAP]-1659841415518
GPR[EPVS]-1659841415518
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841415520
GPR[SPVAP]-1659841415520
GPR[EPVAP]-1659841416629
GPR[EPVS]-1659841416629
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841416632
GPR[SPVAP]-1659841416632
GPR[EPVAP]-1659841418772
GPR[SPVATF]-1659841418772
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841420761
GPR[EPVS]-1659841420761
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841420763
GPR[SPVAP]-1659841420763
GPR[EPVAP]-1659841421900
GPR[EPVS]-1659841421900
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841421903
GPR[SPVAP]-1659841421903
GPR[EPVAP]-1659841423020
GPR[EPVS]-1659841423020
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841423022
GPR[SPVAP]-1659841423022
GPR[EPVAP]-1659841424145
GPR[EPVS]-1659841424145
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841424150
GPR[SPVAP]-1659841424150
GPR[EPVAP]-1659841425261
GPR[EPVS]-1659841425261
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841425265
GPR[SPVAP]-1659841425265
GPR[EPVAP]-1659841426371
GPR[EPVS]-1659841426371
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841426373
GPR[SPVAP]-1659841426373
GPR[EPVAP]-1659841427509
GPR[EPVS]-1659841427509
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841427511
GPR[SPVAP]-1659841427511
GPR[EPVAP]-1659841428669
GPR[EPVS]-1659841428670
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841428675
GPR[SPVAP]-1659841428675
GPR[EPVAP]-1659841429779
GPR[EPVS]-1659841429779
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841429787
GPR[SPVAP]-1659841429787
GPR[EPVAP]-1659841430948
GPR[EPVS]-1659841430948
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841430951
GPR[SPVAP]-1659841430951
GPR[EPVAP]-1659841432059
GPR[EPVS]-1659841432059
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841432062
GPR[SPVAP]-1659841432062
GPR[EPVAP]-1659841433191
GPR[EPVS]-1659841433191
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841433193
GPR[SPVAP]-1659841433193
GPR[EPVAP]-1659841434314
GPR[EPVS]-1659841434314
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841434316
GPR[SPVAP]-1659841434316
GPR[EPVAP]-1659841435424
GPR[EPVS]-1659841435424
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841435433
GPR[SPVAP]-1659841435433
GPR[EPVAP]-1659841436540
GPR[EPVS]-1659841436540
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841436541
GPR[SPVAP]-1659841436541
GPR[EPVAP]-1659841437679
GPR[EPVS]-1659841437679
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841437681
GPR[SPVAP]-1659841437681
GPR[EPVAP]-1659841438792
GPR[EPVS]-1659841438792
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841438793
GPR[SPVAP]-1659841438793
GPR[EPVAP]-1659841439910
GPR[EPVS]-1659841439910
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659841439913
GPR[SPVAP]-1659841439913
GPR[EPVAP]-1659841441024
GPR[EPVS]-1659841441024
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841441028
GPR[SPVAP]-1659841441028
GPR[EPVAP]-1659841442149
GPR[EPVS]-1659841442149
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841442151
GPR[SPVAP]-1659841442151
GPR[EPVAP]-1659841443281
GPR[EPVS]-1659841443281
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841443282
GPR[SPVAP]-1659841443282
GPR[EPVAP]-1659841444402
GPR[EPVS]-1659841444402
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841444410
GPR[SPVAP]-1659841444410
GPR[EPVAP]-1659841445537
GPR[EPVS]-1659841445537
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841445542
GPR[SPVAP]-1659841445542
GPR[EPVAP]-1659841446655
GPR[EPVS]-1659841446655
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841446656
GPR[SPVAP]-1659841446656
GPR[EPVAP]-1659841447756
GPR[EPVS]-1659841447756
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841447758
GPR[SPVAP]-1659841447758
GPR[EPVAP]-1659841448885
GPR[EPVS]-1659841448885
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841448888
GPR[SPVAP]-1659841448888
GPR[EPVAP]-1659841450001
GPR[EPVS]-1659841450001
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841450008
GPR[SPVAP]-1659841450008
GPR[EPVAP]-1659841451122
GPR[EPVS]-1659841451122
GPR[ESUN]-1659841451122
GPR[SSUN]-1659841451122
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841458136
GPR[SPVAP]-1659841458136
GPR[EPVAP]-1659841464795
GPR[SPVATF]-1659841464795
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841466852
GPR[EPVS]-1659841466852
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841466854
GPR[SPVAP]-1659841466854
GPR[EPVAP]-1659841468026
GPR[EPVS]-1659841468027
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841468028
GPR[SPVAP]-1659841468028
GPR[EPVAP]-1659841469134
GPR[EPVS]-1659841469134
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841469135
GPR[SPVAP]-1659841469135
GPR[EPVAP]-1659841471242
GPR[SPVATF]-1659841471242
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841473266
GPR[EPVS]-1659841473266
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659841473268
GPR[SPVAP]-1659841473268
GPR[EPVAP]-1659841474378
GPR[EPVS]-1659841474378
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841474380
GPR[SPVAP]-1659841474380
GPR[EPVAP]-1659841475482
GPR[EPVS]-1659841475482
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841475483
GPR[SPVAP]-1659841475483
GPR[EPVAP]-1659841476597
GPR[EPVS]-1659841476597
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841476600
GPR[SPVAP]-1659841476600
GPR[EPVAP]-1659841477713
GPR[EPVS]-1659841477713
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841477715
GPR[SPVAP]-1659841477715
GPR[EPVAP]-1659841478823
GPR[EPVS]-1659841478823
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841478824
GPR[SPVAP]-1659841478824
GPR[EPVAP]-1659841479965
GPR[EPVS]-1659841479965
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841479966
GPR[SPVAP]-1659841479966
GPR[EPVAP]-1659841481092
GPR[EPVS]-1659841481092
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841481093
GPR[SPVAP]-1659841481093
GPR[EPVAP]-1659841482250
GPR[EPVS]-1659841482250
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841482253
GPR[SPVAP]-1659841482253
GPR[EPVAP]-1659841483376
GPR[EPVS]-1659841483376
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841483377
GPR[SPVAP]-1659841483377
GPR[EPVAP]-1659841484491
GPR[EPVS]-1659841484491
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841484493
GPR[SPVAP]-1659841484493
GPR[EPVAP]-1659841485647
GPR[EPVS]-1659841485647
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841485648
GPR[SPVAP]-1659841485648
GPR[EPVAP]-1659841486766
GPR[EPVS]-1659841486766
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841486767
GPR[SPVAP]-1659841486767
GPR[EPVAP]-1659841487869
GPR[EPVS]-1659841487869
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841487870
GPR[SPVAP]-1659841487870
GPR[EPVAP]-1659841488973
GPR[EPVS]-1659841488973
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841488974
GPR[SPVAP]-1659841488974
GPR[EPVAP]-1659841490077
GPR[EPVS]-1659841490077
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841490078
GPR[SPVAP]-1659841490078
GPR[EPVAP]-1659841491205
GPR[EPVS]-1659841491205
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841491207
GPR[SPVAP]-1659841491207
GPR[EPVAP]-1659841492341
GPR[EPVS]-1659841492341
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841492342
GPR[SPVAP]-1659841492342
GPR[EPVAP]-1659841493443
GPR[EPVS]-1659841493443
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841493447
GPR[SPVAP]-1659841493447
GPR[EPVAP]-1659841494580
GPR[EPVS]-1659841494580
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841494582
GPR[SPVAP]-1659841494582
GPR[EPVAP]-1659841495692
GPR[EPVS]-1659841495692
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841495694
GPR[SPVAP]-1659841495694
GPR[EPVAP]-1659841496811
GPR[EPVS]-1659841496811
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659841496813
GPR[SPVAP]-1659841496813
GPR[EPVAP]-1659841497938
GPR[EPVS]-1659841497938
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841497941
GPR[SPVAP]-1659841497941
GPR[EPVAP]-1659841499046
GPR[EPVS]-1659841499046
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841499048
GPR[SPVAP]-1659841499048
GPR[EPVAP]-1659841500151
GPR[EPVS]-1659841500151
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841500154
GPR[SPVAP]-1659841500154
GPR[EPVAP]-1659841501291
GPR[EPVS]-1659841501291
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841501295
GPR[SPVAP]-1659841501295
GPR[EPVAP]-1659841502406
GPR[EPVS]-1659841502406
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841502408
GPR[SPVAP]-1659841502408
GPR[EPVAP]-1659841503519
GPR[EPVS]-1659841503519
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841503521
GPR[SPVAP]-1659841503521
GPR[EPVAP]-1659841504640
GPR[EPVS]-1659841504640
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841504642
GPR[SPVAP]-1659841504642
GPR[EPVAP]-1659841505766
GPR[EPVS]-1659841505766
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841505768
GPR[SPVAP]-1659841505768
GPR[EPVAP]-1659841506878
GPR[EPVS]-1659841506878
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841506880
GPR[SPVAP]-1659841506880
GPR[EPVAP]-1659841508030
GPR[EPVS]-1659841508030
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841508031
GPR[SPVAP]-1659841508031
GPR[EPVAP]-1659841509133
GPR[EPVS]-1659841509133
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841509135
GPR[SPVAP]-1659841509135
GPR[EPVAP]-1659841510284
GPR[EPVS]-1659841510284
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841510285
GPR[SPVAP]-1659841510285
GPR[EPVAP]-1659841511412
GPR[EPVS]-1659841511412
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841511414
GPR[SPVAP]-1659841511414
GPR[EPVAP]-1659841512540
GPR[EPVS]-1659841512540
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841512542
GPR[SPVAP]-1659841512542
GPR[EPVAP]-1659841513652
GPR[EPVS]-1659841513652
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841513654
GPR[SPVAP]-1659841513654
GPR[EPVAP]-1659841514755
GPR[EPVS]-1659841514755
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841514757
GPR[SPVAP]-1659841514757
GPR[EPVAP]-1659841515886
GPR[EPVS]-1659841515886
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841515887
GPR[SPVAP]-1659841515887
GPR[EPVAP]-1659841516996
GPR[EPVS]-1659841516996
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841516997
GPR[SPVAP]-1659841516997
GPR[EPVAP]-1659841518136
GPR[EPVS]-1659841518136
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841518138
GPR[SPVAP]-1659841518138
GPR[EPVAP]-1659841519247
GPR[EPVS]-1659841519247
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841519248
GPR[SPVAP]-1659841519248
GPR[EPVAP]-1659841520349
GPR[EPVS]-1659841520349
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841520351
GPR[SPVAP]-1659841520351
GPR[EPVAP]-1659841521477
GPR[EPVS]-1659841521477
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841521479
GPR[SPVAP]-1659841521479
GPR[EPVAP]-1659841522596
GPR[EPVS]-1659841522597
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841522602
GPR[SPVAP]-1659841522603
GPR[EPVAP]-1659841523704
GPR[EPVS]-1659841523704
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841523706
GPR[SPVAP]-1659841523706
GPR[EPVAP]-1659841524813
GPR[EPVS]-1659841524813
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841524815
GPR[SPVAP]-1659841524815
GPR[EPVAP]-1659841525931
GPR[EPVS]-1659841525931
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841525932
GPR[SPVAP]-1659841525932
GPR[EPVAP]-1659841527045
GPR[EPVS]-1659841527045
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841527046
GPR[SPVAP]-1659841527046
GPR[EPVAP]-1659841528151
GPR[EPVS]-1659841528151
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841528155
GPR[SPVAP]-1659841528155
GPR[EPVAP]-1659841530926
GPR[EPVS]-1659841530926
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841530928
GPR[SPVAP]-1659841530928
GPR[EPVAP]-1659841532039
GPR[EPVS]-1659841532039
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841532040
GPR[SPVAP]-1659841532040
GPR[EPVAP]-1659841533153
GPR[EPVS]-1659841533153
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841533155
GPR[SPVAP]-1659841533155
GPR[EPVAP]-1659841534260
GPR[EPVS]-1659841534260
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841534263
GPR[SPVAP]-1659841534263
GPR[EPVAP]-1659841535365
GPR[EPVS]-1659841535365
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841535367
GPR[SPVAP]-1659841535367
GPR[EPVAP]-1659841536473
GPR[EPVS]-1659841536473
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841536475
GPR[SPVAP]-1659841536475
GPR[EPVAP]-1659841537591
GPR[EPVS]-1659841537591
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841537593
GPR[SPVAP]-1659841537593
GPR[EPVAP]-1659841538700
GPR[EPVS]-1659841538700
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841538703
GPR[SPVAP]-1659841538703
GPR[EPVAP]-1659841539812
GPR[EPVS]-1659841539812
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841539815
GPR[SPVAP]-1659841539815
GPR[EPVAP]-1659841540932
GPR[EPVS]-1659841540932
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841540933
GPR[SPVAP]-1659841540933
GPR[EPVAP]-1659841542037
GPR[EPVS]-1659841542037
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841542040
GPR[SPVAP]-1659841542040
GPR[EPVAP]-1659841543149
GPR[EPVS]-1659841543149
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841543151
GPR[SPVAP]-1659841543151
GPR[EPVAP]-1659841544253
GPR[EPVS]-1659841544253
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841544255
GPR[SPVAP]-1659841544255
GPR[EPVAP]-1659841545353
GPR[EPVS]-1659841545353
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841545355
GPR[SPVAP]-1659841545355
GPR[EPVAP]-1659841546473
GPR[EPVS]-1659841546473
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841546474
GPR[SPVAP]-1659841546474
GPR[EPVAP]-1659841547597
GPR[EPVS]-1659841547597
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841547599
GPR[SPVAP]-1659841547599
GPR[EPVAP]-1659841548729
GPR[EPVS]-1659841548729
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841548731
GPR[SPVAP]-1659841548731
GPR[EPVAP]-1659841549835
GPR[EPVS]-1659841549835
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841549836
GPR[SPVAP]-1659841549836
GPR[EPVAP]-1659841550959
GPR[EPVS]-1659841550959
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841550960
GPR[SPVAP]-1659841550960
GPR[EPVAP]-1659841552081
GPR[EPVS]-1659841552081
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841552083
GPR[SPVAP]-1659841552083
GPR[EPVAP]-1659841553187
GPR[EPVS]-1659841553187
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841553188
GPR[SPVAP]-1659841553188
GPR[EPVAP]-1659841554315
GPR[EPVS]-1659841554315
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841554318
GPR[SPVAP]-1659841554318
GPR[EPVAP]-1659841556381
GPR[SPVATF]-1659841556381
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841558364
GPR[EPVS]-1659841558364
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841558366
GPR[SPVAP]-1659841558366
GPR[EPVAP]-1659841559508
GPR[EPVS]-1659841559508
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841559510
GPR[SPVAP]-1659841559510
GPR[EPVAP]-1659841560627
GPR[EPVS]-1659841560627
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841560629
GPR[SPVAP]-1659841560629
GPR[EPVAP]-1659841561729
GPR[EPVS]-1659841561729
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841561730
GPR[SPVAP]-1659841561730
GPR[EPVAP]-1659841562852
GPR[EPVS]-1659841562852
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841562854
GPR[SPVAP]-1659841562854
GPR[EPVAP]-1659841563971
GPR[EPVS]-1659841563971
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841563973
GPR[SPVAP]-1659841563973
GPR[EPVAP]-1659841565107
GPR[EPVS]-1659841565107
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841565108
GPR[SPVAP]-1659841565108
GPR[EPVAP]-1659841566231
GPR[EPVS]-1659841566231
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841566234
GPR[SPVAP]-1659841566234
GPR[EPVAP]-1659841567336
GPR[EPVS]-1659841567336
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841567338
GPR[SPVAP]-1659841567338
GPR[EPVAP]-1659841568440
GPR[EPVS]-1659841568440
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841568443
GPR[SPVAP]-1659841568443
GPR[EPVAP]-1659841569572
GPR[EPVS]-1659841569572
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841569575
GPR[SPVAP]-1659841569575
GPR[EPVAP]-1659841570676
GPR[EPVS]-1659841570676
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841570679
GPR[SPVAP]-1659841570679
GPR[EPVAP]-1659841571785
GPR[EPVS]-1659841571785
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841571790
GPR[SPVAP]-1659841571790
GPR[EPVAP]-1659841572921
GPR[EPVS]-1659841572921
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841572923
GPR[SPVAP]-1659841572923
GPR[EPVAP]-1659841574032
GPR[EPVS]-1659841574032
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841574034
GPR[SPVAP]-1659841574034
GPR[EPVAP]-1659841575158
GPR[EPVS]-1659841575158
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841575159
GPR[SPVAP]-1659841575159
GPR[EPVAP]-1659841576265
GPR[EPVS]-1659841576265
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841576267
GPR[SPVAP]-1659841576267
GPR[EPVAP]-1659841577396
GPR[EPVS]-1659841577396
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841577399
GPR[SPVAP]-1659841577399
GPR[EPVAP]-1659841578501
GPR[EPVS]-1659841578501
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841578503
GPR[SPVAP]-1659841578503
GPR[EPVAP]-1659841579621
GPR[EPVS]-1659841579621
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841579623
GPR[SPVAP]-1659841579623
GPR[EPVAP]-1659841580777
GPR[EPVS]-1659841580777
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841580779
GPR[SPVAP]-1659841580779
GPR[EPVAP]-1659841581882
GPR[EPVS]-1659841581882
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841581884
GPR[SPVAP]-1659841581884
GPR[EPVAP]-1659841582985
GPR[EPVS]-1659841582985
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841582988
GPR[SPVAP]-1659841582988
GPR[EPVAP]-1659841584093
GPR[EPVS]-1659841584093
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841584095
GPR[SPVAP]-1659841584095
GPR[EPVAP]-1659841585200
GPR[EPVS]-1659841585200
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841585202
GPR[SPVAP]-1659841585202
GPR[EPVAP]-1659841586314
GPR[EPVS]-1659841586315
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841586317
GPR[SPVAP]-1659841586317
GPR[EPVAP]-1659841587426
GPR[EPVS]-1659841587426
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841587430
GPR[SPVAP]-1659841587430
GPR[EPVAP]-1659841588557
GPR[EPVS]-1659841588557
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659841588560
GPR[SPVAP]-1659841588560
GPR[EPVAP]-1659841589682
GPR[EPVS]-1659841589682
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659841589683
GPR[SPVAP]-1659841589683
GPR[EPVAP]-1659841590788
GPR[EPVS]-1659841590788
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659841590790
GPR[SPVAP]-1659841590790
GPR[EPVAP]-1659841591907
GPR[EPVS]-1659841591907
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841591909
GPR[SPVAP]-1659841591909
GPR[EPVAP]-1659841593028
GPR[EPVS]-1659841593028
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841593030
GPR[SPVAP]-1659841593030
GPR[EPVAP]-1659841594144
GPR[EPVS]-1659841594144
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841594146
GPR[SPVAP]-1659841594146
GPR[EPVAP]-1659841595277
GPR[EPVS]-1659841595277
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841595279
GPR[SPVAP]-1659841595279
GPR[EPVAP]-1659841596393
GPR[EPVS]-1659841596393
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841596395
GPR[SPVAP]-1659841596395
GPR[EPVAP]-1659841597505
GPR[EPVS]-1659841597505
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841597506
GPR[SPVAP]-1659841597506
GPR[EPVAP]-1659841598672
GPR[EPVS]-1659841598672
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841598679
GPR[SPVAP]-1659841598679
GPR[EPVAP]-1659841599784
GPR[EPVS]-1659841599784
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841599787
GPR[SPVAP]-1659841599787
GPR[EPVAP]-1659841602660
GPR[EPVS]-1659841602660
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841602669
GPR[SPVAP]-1659841602669
GPR[EPVAP]-1659841603837
GPR[EPVS]-1659841603837
GPR[ESUN]-1659841603838
GPR[SSUN]-1659841603838
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659841604524
GPR[SSUN]-1659841604524
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841611473
GPR[SPVAP]-1659841611473
GPR[EPVAP]-1659841618132
GPR[SPVATF]-1659841618132
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841620178
GPR[EPVS]-1659841620178
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841620180
GPR[SPVAP]-1659841620180
GPR[EPVAP]-1659841621310
GPR[EPVS]-1659841621310
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841621313
GPR[SPVAP]-1659841621313
GPR[EPVAP]-1659841623380
GPR[SPVATF]-1659841623380
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial_purify_3
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841625325
GPR[EPVS]-1659841625325
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841625327
GPR[SPVAP]-1659841625327
GPR[EPVAP]-1659841626470
GPR[EPVS]-1659841626470
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841626471
GPR[SPVAP]-1659841626471
GPR[EPVAP]-1659841627592
GPR[EPVS]-1659841627592
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841627594
GPR[SPVAP]-1659841627594
GPR[EPVAP]-1659841628744
GPR[EPVS]-1659841628744
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841628746
GPR[SPVAP]-1659841628746
GPR[EPVAP]-1659841629849
GPR[EPVS]-1659841629849
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841629850
GPR[SPVAP]-1659841629850
GPR[EPVAP]-1659841630976
GPR[EPVS]-1659841630976
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841630978
GPR[SPVAP]-1659841630978
GPR[EPVAP]-1659841632105
GPR[EPVS]-1659841632105
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841632108
GPR[SPVAP]-1659841632108
GPR[EPVAP]-1659841633261
GPR[EPVS]-1659841633261
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841633263
GPR[SPVAP]-1659841633263
GPR[EPVAP]-1659841634367
GPR[EPVS]-1659841634367
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841634368
GPR[SPVAP]-1659841634368
GPR[EPVAP]-1659841635474
GPR[EPVS]-1659841635474
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841635476
GPR[SPVAP]-1659841635476
GPR[EPVAP]-1659841636584
GPR[EPVS]-1659841636584
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841636586
GPR[SPVAP]-1659841636586
GPR[EPVAP]-1659841637679
GPR[EPVS]-1659841637679
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841637682
GPR[SPVAP]-1659841637682
GPR[EPVAP]-1659841638819
GPR[EPVS]-1659841638819
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841638820
GPR[SPVAP]-1659841638820
GPR[EPVAP]-1659841639954
GPR[EPVS]-1659841639954
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841639955
GPR[SPVAP]-1659841639955
GPR[EPVAP]-1659841641070
GPR[EPVS]-1659841641070
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841641072
GPR[SPVAP]-1659841641072
GPR[EPVAP]-1659841642170
GPR[EPVS]-1659841642170
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841642172
GPR[SPVAP]-1659841642172
GPR[EPVAP]-1659841643300
GPR[EPVS]-1659841643300
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841643302
GPR[SPVAP]-1659841643302
GPR[EPVAP]-1659841644415
GPR[EPVS]-1659841644415
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841644416
GPR[SPVAP]-1659841644416
GPR[EPVAP]-1659841645519
GPR[EPVS]-1659841645519
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841645521
GPR[SPVAP]-1659841645521
GPR[EPVAP]-1659841646627
GPR[EPVS]-1659841646627
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841646629
GPR[SPVAP]-1659841646629
GPR[EPVAP]-1659841647732
GPR[EPVS]-1659841647732
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841647733
GPR[SPVAP]-1659841647733
GPR[EPVAP]-1659841648861
GPR[EPVS]-1659841648861
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841648864
GPR[SPVAP]-1659841648864
GPR[EPVAP]-1659841649968
GPR[EPVS]-1659841649968
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841649971
GPR[SPVAP]-1659841649971
GPR[EPVAP]-1659841651082
GPR[EPVS]-1659841651082
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841651084
GPR[SPVAP]-1659841651084
GPR[EPVAP]-1659841652204
GPR[EPVS]-1659841652204
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841652206
GPR[SPVAP]-1659841652206
GPR[EPVAP]-1659841653308
GPR[EPVS]-1659841653308
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841653310
GPR[SPVAP]-1659841653310
GPR[EPVAP]-1659841654417
GPR[EPVS]-1659841654417
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841654418
GPR[SPVAP]-1659841654418
GPR[EPVAP]-1659841655561
GPR[EPVS]-1659841655561
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841655562
GPR[SPVAP]-1659841655562
GPR[EPVAP]-1659841656676
GPR[EPVS]-1659841656676
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841656677
GPR[SPVAP]-1659841656677
GPR[EPVAP]-1659841657777
GPR[EPVS]-1659841657777
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841657780
GPR[SPVAP]-1659841657780
GPR[EPVAP]-1659841658906
GPR[EPVS]-1659841658906
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841658909
GPR[SPVAP]-1659841658909
GPR[EPVAP]-1659841660024
GPR[EPVS]-1659841660024
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841660025
GPR[SPVAP]-1659841660025
GPR[EPVAP]-1659841661125
GPR[EPVS]-1659841661125
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841661127
GPR[SPVAP]-1659841661127
GPR[EPVAP]-1659841662228
GPR[EPVS]-1659841662228
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841662230
GPR[SPVAP]-1659841662230
GPR[EPVAP]-1659841663356
GPR[EPVS]-1659841663356
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841663358
GPR[SPVAP]-1659841663358
GPR[EPVAP]-1659841664474
GPR[EPVS]-1659841664474
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841664477
GPR[SPVAP]-1659841664477
GPR[EPVAP]-1659841665581
GPR[EPVS]-1659841665581
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841665583
GPR[SPVAP]-1659841665583
GPR[EPVAP]-1659841666679
GPR[EPVS]-1659841666679
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841666682
GPR[SPVAP]-1659841666682
GPR[EPVAP]-1659841667782
GPR[EPVS]-1659841667782
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841667784
GPR[SPVAP]-1659841667784
GPR[EPVAP]-1659841668915
GPR[EPVS]-1659841668915
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841668917
GPR[SPVAP]-1659841668917
GPR[EPVAP]-1659841670014
GPR[EPVS]-1659841670014
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841670016
GPR[SPVAP]-1659841670016
GPR[EPVAP]-1659841671162
GPR[EPVS]-1659841671162
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841671164
GPR[SPVAP]-1659841671164
GPR[EPVAP]-1659841672304
GPR[EPVS]-1659841672304
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841672306
GPR[SPVAP]-1659841672306
GPR[EPVAP]-1659841675069
GPR[EPVS]-1659841675069
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841675071
GPR[SPVAP]-1659841675071
GPR[EPVAP]-1659841676180
GPR[EPVS]-1659841676180
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841676184
GPR[SPVAP]-1659841676184
GPR[EPVAP]-1659841677297
GPR[EPVS]-1659841677297
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841677299
GPR[SPVAP]-1659841677299
GPR[EPVAP]-1659841678393
GPR[EPVS]-1659841678393
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841678394
GPR[SPVAP]-1659841678394
GPR[EPVAP]-1659841679507
GPR[EPVS]-1659841679507
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841679509
GPR[SPVAP]-1659841679509
GPR[EPVAP]-1659841680615
GPR[EPVS]-1659841680615
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841680616
GPR[SPVAP]-1659841680616
GPR[EPVAP]-1659841681720
GPR[EPVS]-1659841681720
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841681723
GPR[SPVAP]-1659841681723
GPR[EPVAP]-1659841682838
GPR[EPVS]-1659841682838
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841682839
GPR[SPVAP]-1659841682839
GPR[EPVAP]-1659841683941
GPR[EPVS]-1659841683941
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841683946
GPR[SPVAP]-1659841683946
GPR[EPVAP]-1659841685063
GPR[EPVS]-1659841685063
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841685067
GPR[SPVAP]-1659841685067
GPR[EPVAP]-1659841686194
GPR[EPVS]-1659841686194
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841686196
GPR[SPVAP]-1659841686196
GPR[EPVAP]-1659841687312
GPR[EPVS]-1659841687312
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841687313
GPR[SPVAP]-1659841687313
GPR[EPVAP]-1659841688424
GPR[EPVS]-1659841688424
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841688427
GPR[SPVAP]-1659841688427
GPR[EPVAP]-1659841689550
GPR[EPVS]-1659841689550
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841689555
GPR[SPVAP]-1659841689555
GPR[EPVAP]-1659841690669
GPR[EPVS]-1659841690669
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841690670
GPR[SPVAP]-1659841690670
GPR[EPVAP]-1659841691784
GPR[EPVS]-1659841691784
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841691786
GPR[SPVAP]-1659841691786
GPR[EPVAP]-1659841692896
GPR[EPVS]-1659841692896
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841692897
GPR[SPVAP]-1659841692898
GPR[EPVAP]-1659841694001
GPR[EPVS]-1659841694001
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841694003
GPR[SPVAP]-1659841694003
GPR[EPVAP]-1659841695112
GPR[EPVS]-1659841695112
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841695114
GPR[SPVAP]-1659841695114
GPR[EPVAP]-1659841696227
GPR[EPVS]-1659841696227
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841696229
GPR[SPVAP]-1659841696229
GPR[EPVAP]-1659841697337
GPR[EPVS]-1659841697337
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841697340
GPR[SPVAP]-1659841697340
GPR[EPVAP]-1659841698439
GPR[EPVS]-1659841698439
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841698442
GPR[SPVAP]-1659841698442
GPR[EPVAP]-1659841699579
GPR[EPVS]-1659841699579
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841699581
GPR[SPVAP]-1659841699581
GPR[EPVAP]-1659841700727
GPR[EPVS]-1659841700727
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841700728
GPR[SPVAP]-1659841700728
GPR[EPVAP]-1659841701842
GPR[EPVS]-1659841701842
========
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841701850
GPR[SPVAP]-1659841701850
GPR[EPVAP]-1659841703023
GPR[EPVS]-1659841703023
========
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659841703027
GPR[SPVAP]-1659841703027
GPR[EPVAP]-1659841704133
GPR[EPVS]-1659841704133
GPR[ESUN]-1659841704134
GPR[SSUN]-1659841704134
org.apache.commons.math3.linear.EigenDecomposition,579
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

GPR[ESUN]-1659841710334
GPR[SSUN]-1659841710334
GPR[ESUN]-1659841710334
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659841710992
GPR[EFL]-1659841710995
GPR[SFP]-1659841710995
TIMEOUT : 600000
GPR[SSUN]-1659841710999
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659841713000
GPR[SPVAP]-1659841713000
GPR[EPVAP]-1659841719551
GPR[SPVATF]-1659841719551
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 0
GPR[EPVATF]-1659841721737
GPR[SPVATR]-1659841721738
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659841789053
GPR[EPVS]-1659841789053
GPR[PF]-1659841789053
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/1/patch_78061_1_ts_1659841789053.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM3909889973770901125/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/1/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/1/patch_78061_1_ts_1659841789053.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659841789062
GPR[SPVAP]-1659841789062
GPR[EPVAP]-1659841791070
GPR[SPVATF]-1659841791070
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841793178
GPR[EPVS]-1659841793178
GPR[ESUN]-1659841793179
GPR[SSUN]-1659841793179
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841795447
GPR[SPVAP]-1659841795447
GPR[EPVAP]-1659841802010
GPR[SPVATF]-1659841802010
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841804187
GPR[EPVS]-1659841804187
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841804189
GPR[SPVAP]-1659841804189
GPR[EPVAP]-1659841806261
GPR[SPVATF]-1659841806261
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841808442
GPR[EPVS]-1659841808442
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841808444
GPR[SPVAP]-1659841808444
GPR[EPVAP]-1659841810545
GPR[SPVATF]-1659841810545
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841812698
GPR[EPVS]-1659841812698
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841812700
GPR[SPVAP]-1659841812700
GPR[EPVAP]-1659841814771
GPR[SPVATF]-1659841814771
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841816949
GPR[EPVS]-1659841816949
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841816951
GPR[SPVAP]-1659841816951
GPR[EPVAP]-1659841818962
GPR[SPVATF]-1659841818962
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841822829
GPR[EPVS]-1659841822829
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841822839
GPR[SPVAP]-1659841822839
GPR[EPVAP]-1659841824930
GPR[SPVATF]-1659841824930
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841827137
GPR[EPVS]-1659841827137
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841827139
GPR[SPVAP]-1659841827139
GPR[EPVAP]-1659841829171
GPR[SPVATF]-1659841829171
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841831318
GPR[EPVS]-1659841831318
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841831324
GPR[SPVAP]-1659841831324
GPR[EPVAP]-1659841833378
GPR[SPVATF]-1659841833378
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841835483
GPR[EPVS]-1659841835483
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841835484
GPR[SPVAP]-1659841835484
GPR[EPVAP]-1659841837552
GPR[SPVATF]-1659841837552
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841839653
GPR[EPVS]-1659841839653
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841839655
GPR[SPVAP]-1659841839655
GPR[EPVAP]-1659841841694
GPR[SPVATF]-1659841841694
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841843865
GPR[EPVS]-1659841843865
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841843867
GPR[SPVAP]-1659841843867
GPR[EPVAP]-1659841845909
GPR[SPVATF]-1659841845909
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841848130
GPR[EPVS]-1659841848131
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841848132
GPR[SPVAP]-1659841848132
GPR[EPVAP]-1659841850187
GPR[SPVATF]-1659841850187
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841852286
GPR[EPVS]-1659841852286
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841852288
GPR[SPVAP]-1659841852288
GPR[EPVAP]-1659841854329
GPR[SPVATF]-1659841854329
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841856466
GPR[EPVS]-1659841856466
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841856467
GPR[SPVAP]-1659841856467
GPR[EPVAP]-1659841858516
GPR[SPVATF]-1659841858516
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841860677
GPR[EPVS]-1659841860677
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841860679
GPR[SPVAP]-1659841860679
GPR[EPVAP]-1659841862727
GPR[SPVATF]-1659841862727
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841864826
GPR[EPVS]-1659841864826
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841864828
GPR[SPVAP]-1659841864828
GPR[EPVAP]-1659841866922
GPR[SPVATF]-1659841866922
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841869017
GPR[EPVS]-1659841869017
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841869019
GPR[SPVAP]-1659841869019
GPR[EPVAP]-1659841871145
GPR[SPVATF]-1659841871145
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841873282
GPR[EPVS]-1659841873282
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841873283
GPR[SPVAP]-1659841873283
GPR[EPVAP]-1659841875291
GPR[SPVATF]-1659841875291
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841877522
GPR[EPVS]-1659841877522
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841877523
GPR[SPVAP]-1659841877523
GPR[EPVAP]-1659841879552
GPR[SPVATF]-1659841879552
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841881646
GPR[EPVS]-1659841881646
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841881647
GPR[SPVAP]-1659841881647
GPR[EPVAP]-1659841883729
GPR[SPVATF]-1659841883729
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841885846
GPR[EPVS]-1659841885846
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841885847
GPR[SPVAP]-1659841885847
GPR[EPVAP]-1659841887906
GPR[SPVATF]-1659841887906
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841890042
GPR[EPVS]-1659841890042
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841890043
GPR[SPVAP]-1659841890043
GPR[EPVAP]-1659841893718
GPR[SPVATF]-1659841893718
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841895885
GPR[EPVS]-1659841895885
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841895887
GPR[SPVAP]-1659841895887
GPR[EPVAP]-1659841897957
GPR[SPVATF]-1659841897957
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841900098
GPR[EPVS]-1659841900098
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841900100
GPR[SPVAP]-1659841900100
GPR[EPVAP]-1659841902166
GPR[SPVATF]-1659841902166
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841904306
GPR[EPVS]-1659841904306
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841904307
GPR[SPVAP]-1659841904307
GPR[EPVAP]-1659841906341
GPR[SPVATF]-1659841906341
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841908471
GPR[EPVS]-1659841908471
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659841908472
GPR[SPVAP]-1659841908472
GPR[EPVAP]-1659841910525
GPR[SPVATF]-1659841910525
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841912693
GPR[EPVS]-1659841912693
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841912694
GPR[SPVAP]-1659841912694
GPR[EPVAP]-1659841914741
GPR[SPVATF]-1659841914741
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841916884
GPR[EPVS]-1659841916884
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841916886
GPR[SPVAP]-1659841916886
GPR[EPVAP]-1659841918915
GPR[SPVATF]-1659841918915
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841921013
GPR[EPVS]-1659841921013
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841921014
GPR[SPVAP]-1659841921014
GPR[EPVAP]-1659841923097
GPR[SPVATF]-1659841923097
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841925228
GPR[EPVS]-1659841925228
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659841925230
GPR[SPVAP]-1659841925230
GPR[EPVAP]-1659841927357
GPR[SPVATF]-1659841927357
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841929513
GPR[EPVS]-1659841929513
GPR[ESUN]-1659841929515
GPR[SSUN]-1659841929515
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841936544
GPR[SPVAP]-1659841936544
GPR[EPVAP]-1659841943001
GPR[SPVATF]-1659841943001
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841944999
GPR[EPVS]-1659841944999
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659841945001
GPR[SPVAP]-1659841945001
GPR[EPVAP]-1659841946151
GPR[EPVS]-1659841946151
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841946153
GPR[SPVAP]-1659841946153
GPR[EPVAP]-1659841947280
GPR[EPVS]-1659841947281
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841947283
GPR[SPVAP]-1659841947283
GPR[EPVAP]-1659841948402
GPR[EPVS]-1659841948402
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841948406
GPR[SPVAP]-1659841948406
GPR[EPVAP]-1659841949524
GPR[EPVS]-1659841949524
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841949525
GPR[SPVAP]-1659841949525
GPR[EPVAP]-1659841950647
GPR[EPVS]-1659841950647
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841950649
GPR[SPVAP]-1659841950649
GPR[EPVAP]-1659841951781
GPR[EPVS]-1659841951781
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841951785
GPR[SPVAP]-1659841951785
GPR[EPVAP]-1659841953844
GPR[SPVATF]-1659841953844
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841955958
GPR[EPVS]-1659841955958
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841955959
GPR[SPVAP]-1659841955959
GPR[EPVAP]-1659841957068
GPR[EPVS]-1659841957068
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841957069
GPR[SPVAP]-1659841957070
GPR[EPVAP]-1659841958177
GPR[EPVS]-1659841958177
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841958179
GPR[SPVAP]-1659841958179
GPR[EPVAP]-1659841959292
GPR[EPVS]-1659841959292
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841959293
GPR[SPVAP]-1659841959293
GPR[EPVAP]-1659841960410
GPR[EPVS]-1659841960410
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841960412
GPR[SPVAP]-1659841960412
GPR[EPVAP]-1659841961512
GPR[EPVS]-1659841961512
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841961514
GPR[SPVAP]-1659841961514
GPR[EPVAP]-1659841962620
GPR[EPVS]-1659841962620
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841962622
GPR[SPVAP]-1659841962622
GPR[EPVAP]-1659841963772
GPR[EPVS]-1659841963772
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841963783
GPR[SPVAP]-1659841963783
GPR[EPVAP]-1659841966306
GPR[EPVS]-1659841966306
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841966308
GPR[SPVAP]-1659841966308
GPR[EPVAP]-1659841967437
GPR[EPVS]-1659841967437
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841967439
GPR[SPVAP]-1659841967439
GPR[EPVAP]-1659841968580
GPR[EPVS]-1659841968581
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841968583
GPR[SPVAP]-1659841968583
GPR[EPVAP]-1659841969716
GPR[EPVS]-1659841969716
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841969718
GPR[SPVAP]-1659841969718
GPR[EPVAP]-1659841970828
GPR[EPVS]-1659841970828
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841970830
GPR[SPVAP]-1659841970830
GPR[EPVAP]-1659841971928
GPR[EPVS]-1659841971928
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841971929
GPR[SPVAP]-1659841971929
GPR[EPVAP]-1659841973979
GPR[SPVATF]-1659841973979
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841976005
GPR[EPVS]-1659841976005
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659841976007
GPR[SPVAP]-1659841976007
GPR[EPVAP]-1659841977105
GPR[EPVS]-1659841977105
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841977107
GPR[SPVAP]-1659841977107
GPR[EPVAP]-1659841978217
GPR[EPVS]-1659841978217
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841978219
GPR[SPVAP]-1659841978219
GPR[EPVAP]-1659841979321
GPR[EPVS]-1659841979321
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841979323
GPR[SPVAP]-1659841979323
GPR[EPVAP]-1659841980429
GPR[EPVS]-1659841980429
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841980432
GPR[SPVAP]-1659841980432
GPR[EPVAP]-1659841981560
GPR[EPVS]-1659841981560
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841981561
GPR[SPVAP]-1659841981561
GPR[EPVAP]-1659841982660
GPR[EPVS]-1659841982660
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841982662
GPR[SPVAP]-1659841982662
GPR[EPVAP]-1659841983729
GPR[EPVS]-1659841983729
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841983730
GPR[SPVAP]-1659841983730
GPR[EPVAP]-1659841984836
GPR[EPVS]-1659841984836
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841984838
GPR[SPVAP]-1659841984838
GPR[EPVAP]-1659841985949
GPR[EPVS]-1659841985949
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659841985950
GPR[SPVAP]-1659841985950
GPR[EPVAP]-1659841987058
GPR[EPVS]-1659841987058
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841987061
GPR[SPVAP]-1659841987061
GPR[EPVAP]-1659841988179
GPR[EPVS]-1659841988179
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841988181
GPR[SPVAP]-1659841988181
GPR[EPVAP]-1659841989282
GPR[EPVS]-1659841989282
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841989284
GPR[SPVAP]-1659841989284
GPR[EPVAP]-1659841991444
GPR[SPVATF]-1659841991444
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659841993437
GPR[EPVS]-1659841993437
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841993439
GPR[SPVAP]-1659841993439
GPR[EPVAP]-1659841994543
GPR[EPVS]-1659841994543
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841994545
GPR[SPVAP]-1659841994545
GPR[EPVAP]-1659841995655
GPR[EPVS]-1659841995655
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841995657
GPR[SPVAP]-1659841995657
GPR[EPVAP]-1659841996752
GPR[EPVS]-1659841996752
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841996753
GPR[SPVAP]-1659841996753
GPR[EPVAP]-1659841997861
GPR[EPVS]-1659841997861
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841997863
GPR[SPVAP]-1659841997863
GPR[EPVAP]-1659841998987
GPR[EPVS]-1659841998987
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659841998989
GPR[SPVAP]-1659841998989
GPR[EPVAP]-1659842000112
GPR[EPVS]-1659842000112
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842000114
GPR[SPVAP]-1659842000114
GPR[EPVAP]-1659842001269
GPR[EPVS]-1659842001269
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842001272
GPR[SPVAP]-1659842001272
GPR[EPVAP]-1659842002376
GPR[EPVS]-1659842002376
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842002379
GPR[SPVAP]-1659842002379
GPR[EPVAP]-1659842003480
GPR[EPVS]-1659842003480
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842003482
GPR[SPVAP]-1659842003482
GPR[EPVAP]-1659842004604
GPR[EPVS]-1659842004604
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842004606
GPR[SPVAP]-1659842004606
GPR[EPVAP]-1659842005721
GPR[EPVS]-1659842005721
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842005723
GPR[SPVAP]-1659842005723
GPR[EPVAP]-1659842006844
GPR[EPVS]-1659842006844
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842006847
GPR[SPVAP]-1659842006847
GPR[EPVAP]-1659842007956
GPR[EPVS]-1659842007956
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842007957
GPR[SPVAP]-1659842007957
GPR[EPVAP]-1659842009068
GPR[EPVS]-1659842009068
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842009072
GPR[SPVAP]-1659842009072
GPR[EPVAP]-1659842010194
GPR[EPVS]-1659842010194
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842010198
GPR[SPVAP]-1659842010198
GPR[EPVAP]-1659842011314
GPR[EPVS]-1659842011314
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842011316
GPR[SPVAP]-1659842011316
GPR[EPVAP]-1659842012424
GPR[EPVS]-1659842012424
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842012427
GPR[SPVAP]-1659842012427
GPR[EPVAP]-1659842013536
GPR[EPVS]-1659842013536
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842013538
GPR[SPVAP]-1659842013538
GPR[EPVAP]-1659842014639
GPR[EPVS]-1659842014639
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842014641
GPR[SPVAP]-1659842014641
GPR[EPVAP]-1659842015749
GPR[EPVS]-1659842015749
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842015751
GPR[SPVAP]-1659842015751
GPR[EPVAP]-1659842016872
GPR[EPVS]-1659842016872
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842016875
GPR[SPVAP]-1659842016875
GPR[EPVAP]-1659842018009
GPR[EPVS]-1659842018009
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842018011
GPR[SPVAP]-1659842018011
GPR[EPVAP]-1659842019178
GPR[EPVS]-1659842019178
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842019180
GPR[SPVAP]-1659842019180
GPR[EPVAP]-1659842020308
GPR[EPVS]-1659842020308
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842020310
GPR[SPVAP]-1659842020310
GPR[EPVAP]-1659842021439
GPR[EPVS]-1659842021439
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842021440
GPR[SPVAP]-1659842021440
GPR[EPVAP]-1659842022563
GPR[EPVS]-1659842022563
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842022564
GPR[SPVAP]-1659842022564
GPR[EPVAP]-1659842023672
GPR[EPVS]-1659842023672
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842023674
GPR[SPVAP]-1659842023674
GPR[EPVAP]-1659842024781
GPR[EPVS]-1659842024781
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842024783
GPR[SPVAP]-1659842024783
GPR[EPVAP]-1659842026867
GPR[SPVATF]-1659842026867
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842028877
GPR[EPVS]-1659842028877
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842028879
GPR[SPVAP]-1659842028879
GPR[EPVAP]-1659842029993
GPR[EPVS]-1659842029993
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842029996
GPR[SPVAP]-1659842029996
GPR[EPVAP]-1659842031105
GPR[EPVS]-1659842031105
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842031107
GPR[SPVAP]-1659842031107
GPR[EPVAP]-1659842032231
GPR[EPVS]-1659842032231
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842032237
GPR[SPVAP]-1659842032237
GPR[EPVAP]-1659842033352
GPR[EPVS]-1659842033352
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842033355
GPR[SPVAP]-1659842033355
GPR[EPVAP]-1659842034469
GPR[EPVS]-1659842034469
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842034470
GPR[SPVAP]-1659842034470
GPR[EPVAP]-1659842035578
GPR[EPVS]-1659842035578
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842035580
GPR[SPVAP]-1659842035580
GPR[EPVAP]-1659842036716
GPR[EPVS]-1659842036716
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842036720
GPR[SPVAP]-1659842036720
GPR[EPVAP]-1659842037839
GPR[EPVS]-1659842037839
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842037845
GPR[SPVAP]-1659842037845
GPR[EPVAP]-1659842040729
GPR[EPVS]-1659842040729
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842040731
GPR[SPVAP]-1659842040731
GPR[EPVAP]-1659842041833
GPR[EPVS]-1659842041833
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842041835
GPR[SPVAP]-1659842041835
GPR[EPVAP]-1659842042941
GPR[EPVS]-1659842042941
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842042942
GPR[SPVAP]-1659842042942
GPR[EPVAP]-1659842044073
GPR[EPVS]-1659842044073
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842044074
GPR[SPVAP]-1659842044074
GPR[EPVAP]-1659842045177
GPR[EPVS]-1659842045177
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842045182
GPR[SPVAP]-1659842045182
GPR[EPVAP]-1659842046291
GPR[EPVS]-1659842046291
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842046293
GPR[SPVAP]-1659842046293
GPR[EPVAP]-1659842047396
GPR[EPVS]-1659842047396
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842047398
GPR[SPVAP]-1659842047398
GPR[EPVAP]-1659842048517
GPR[EPVS]-1659842048517
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842048518
GPR[SPVAP]-1659842048518
GPR[EPVAP]-1659842049629
GPR[EPVS]-1659842049629
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659842049630
GPR[SPVAP]-1659842049630
GPR[EPVAP]-1659842050749
GPR[EPVS]-1659842050749
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842050751
GPR[SPVAP]-1659842050751
GPR[EPVAP]-1659842051865
GPR[EPVS]-1659842051865
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842051866
GPR[SPVAP]-1659842051866
GPR[EPVAP]-1659842052992
GPR[EPVS]-1659842052993
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842052995
GPR[SPVAP]-1659842052995
GPR[EPVAP]-1659842054128
GPR[EPVS]-1659842054128
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842054135
GPR[SPVAP]-1659842054135
GPR[EPVAP]-1659842055237
GPR[EPVS]-1659842055237
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842055241
GPR[SPVAP]-1659842055241
GPR[EPVAP]-1659842056371
GPR[EPVS]-1659842056371
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842056372
GPR[SPVAP]-1659842056372
GPR[EPVAP]-1659842057490
GPR[EPVS]-1659842057490
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842057492
GPR[SPVAP]-1659842057492
GPR[EPVAP]-1659842058598
GPR[EPVS]-1659842058598
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842058599
GPR[SPVAP]-1659842058599
GPR[EPVAP]-1659842059721
GPR[EPVS]-1659842059721
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842059728
GPR[SPVAP]-1659842059728
GPR[EPVAP]-1659842060840
GPR[EPVS]-1659842060840
GPR[ESUN]-1659842060840
GPR[SSUN]-1659842060840
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842067420
GPR[SPVAP]-1659842067420
GPR[EPVAP]-1659842073961
GPR[SPVATF]-1659842073961
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842075967
GPR[EPVS]-1659842075967
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842075969
GPR[SPVAP]-1659842075969
GPR[EPVAP]-1659842077101
GPR[EPVS]-1659842077101
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842077106
GPR[SPVAP]-1659842077106
GPR[EPVAP]-1659842078220
GPR[EPVS]-1659842078220
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842078222
GPR[SPVAP]-1659842078222
GPR[EPVAP]-1659842080290
GPR[SPVATF]-1659842080290
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842082429
GPR[EPVS]-1659842082429
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659842082431
GPR[SPVAP]-1659842082431
GPR[EPVAP]-1659842083543
GPR[EPVS]-1659842083543
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842083545
GPR[SPVAP]-1659842083545
GPR[EPVAP]-1659842084647
GPR[EPVS]-1659842084647
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842084649
GPR[SPVAP]-1659842084649
GPR[EPVAP]-1659842085757
GPR[EPVS]-1659842085757
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842085759
GPR[SPVAP]-1659842085759
GPR[EPVAP]-1659842086883
GPR[EPVS]-1659842086883
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842086885
GPR[SPVAP]-1659842086885
GPR[EPVAP]-1659842087992
GPR[EPVS]-1659842087992
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842087994
GPR[SPVAP]-1659842087994
GPR[EPVAP]-1659842089120
GPR[EPVS]-1659842089120
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842089122
GPR[SPVAP]-1659842089122
GPR[EPVAP]-1659842090229
GPR[EPVS]-1659842090229
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842090231
GPR[SPVAP]-1659842090231
GPR[EPVAP]-1659842091363
GPR[EPVS]-1659842091363
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842091365
GPR[SPVAP]-1659842091365
GPR[EPVAP]-1659842092516
GPR[EPVS]-1659842092516
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842092518
GPR[SPVAP]-1659842092518
GPR[EPVAP]-1659842093625
GPR[EPVS]-1659842093625
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842093627
GPR[SPVAP]-1659842093627
GPR[EPVAP]-1659842094766
GPR[EPVS]-1659842094766
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842094767
GPR[SPVAP]-1659842094767
GPR[EPVAP]-1659842095905
GPR[EPVS]-1659842095905
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842095906
GPR[SPVAP]-1659842095906
GPR[EPVAP]-1659842097013
GPR[EPVS]-1659842097013
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842097015
GPR[SPVAP]-1659842097015
GPR[EPVAP]-1659842098117
GPR[EPVS]-1659842098117
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842098119
GPR[SPVAP]-1659842098119
GPR[EPVAP]-1659842099221
GPR[EPVS]-1659842099221
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842099222
GPR[SPVAP]-1659842099222
GPR[EPVAP]-1659842100356
GPR[EPVS]-1659842100356
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842100358
GPR[SPVAP]-1659842100358
GPR[EPVAP]-1659842101554
GPR[EPVS]-1659842101554
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842101555
GPR[SPVAP]-1659842101555
GPR[EPVAP]-1659842102681
GPR[EPVS]-1659842102681
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842102684
GPR[SPVAP]-1659842102684
GPR[EPVAP]-1659842103785
GPR[EPVS]-1659842103785
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842103786
GPR[SPVAP]-1659842103786
GPR[EPVAP]-1659842104892
GPR[EPVS]-1659842104892
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842104894
GPR[SPVAP]-1659842104894
GPR[EPVAP]-1659842106004
GPR[EPVS]-1659842106004
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659842106006
GPR[SPVAP]-1659842106006
GPR[EPVAP]-1659842107125
GPR[EPVS]-1659842107125
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842107127
GPR[SPVAP]-1659842107127
GPR[EPVAP]-1659842108235
GPR[EPVS]-1659842108235
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842108237
GPR[SPVAP]-1659842108237
GPR[EPVAP]-1659842109330
GPR[EPVS]-1659842109330
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842109333
GPR[SPVAP]-1659842109333
GPR[EPVAP]-1659842110649
GPR[EPVS]-1659842110649
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842110661
GPR[SPVAP]-1659842110661
GPR[EPVAP]-1659842112783
GPR[EPVS]-1659842112783
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842112785
GPR[SPVAP]-1659842112785
GPR[EPVAP]-1659842113905
GPR[EPVS]-1659842113905
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842113906
GPR[SPVAP]-1659842113906
GPR[EPVAP]-1659842115024
GPR[EPVS]-1659842115024
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842115026
GPR[SPVAP]-1659842115026
GPR[EPVAP]-1659842116140
GPR[EPVS]-1659842116140
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842116142
GPR[SPVAP]-1659842116142
GPR[EPVAP]-1659842117276
GPR[EPVS]-1659842117276
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842117279
GPR[SPVAP]-1659842117279
GPR[EPVAP]-1659842118424
GPR[EPVS]-1659842118424
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842118426
GPR[SPVAP]-1659842118426
GPR[EPVAP]-1659842119599
GPR[EPVS]-1659842119599
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842119601
GPR[SPVAP]-1659842119601
GPR[EPVAP]-1659842120732
GPR[EPVS]-1659842120732
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842120734
GPR[SPVAP]-1659842120734
GPR[EPVAP]-1659842121851
GPR[EPVS]-1659842121851
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842121852
GPR[SPVAP]-1659842121852
GPR[EPVAP]-1659842122957
GPR[EPVS]-1659842122957
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842122958
GPR[SPVAP]-1659842122958
GPR[EPVAP]-1659842124065
GPR[EPVS]-1659842124065
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842124066
GPR[SPVAP]-1659842124066
GPR[EPVAP]-1659842125185
GPR[EPVS]-1659842125185
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842125187
GPR[SPVAP]-1659842125187
GPR[EPVAP]-1659842126301
GPR[EPVS]-1659842126301
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842126303
GPR[SPVAP]-1659842126303
GPR[EPVAP]-1659842127402
GPR[EPVS]-1659842127402
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842127404
GPR[SPVAP]-1659842127404
GPR[EPVAP]-1659842128519
GPR[EPVS]-1659842128519
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842128521
GPR[SPVAP]-1659842128521
GPR[EPVAP]-1659842129638
GPR[EPVS]-1659842129638
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842129640
GPR[SPVAP]-1659842129640
GPR[EPVAP]-1659842130744
GPR[EPVS]-1659842130744
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842130746
GPR[SPVAP]-1659842130746
GPR[EPVAP]-1659842131857
GPR[EPVS]-1659842131857
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842131859
GPR[SPVAP]-1659842131859
GPR[EPVAP]-1659842132976
GPR[EPVS]-1659842132976
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842132981
GPR[SPVAP]-1659842132981
GPR[EPVAP]-1659842134105
GPR[EPVS]-1659842134105
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842134107
GPR[SPVAP]-1659842134107
GPR[EPVAP]-1659842135209
GPR[EPVS]-1659842135209
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842135211
GPR[SPVAP]-1659842135211
GPR[EPVAP]-1659842136332
GPR[EPVS]-1659842136332
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842136333
GPR[SPVAP]-1659842136333
GPR[EPVAP]-1659842137448
GPR[EPVS]-1659842137448
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842137450
GPR[SPVAP]-1659842137450
GPR[EPVAP]-1659842138571
GPR[EPVS]-1659842138571
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842138575
GPR[SPVAP]-1659842138575
GPR[EPVAP]-1659842139687
GPR[EPVS]-1659842139687
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842139688
GPR[SPVAP]-1659842139688
GPR[EPVAP]-1659842140800
GPR[EPVS]-1659842140800
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842140802
GPR[SPVAP]-1659842140802
GPR[EPVAP]-1659842141936
GPR[EPVS]-1659842141936
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842141939
GPR[SPVAP]-1659842141939
GPR[EPVAP]-1659842143063
GPR[EPVS]-1659842143063
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842143066
GPR[SPVAP]-1659842143066
GPR[EPVAP]-1659842144173
GPR[EPVS]-1659842144173
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842144174
GPR[SPVAP]-1659842144175
GPR[EPVAP]-1659842145305
GPR[EPVS]-1659842145305
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842145307
GPR[SPVAP]-1659842145307
GPR[EPVAP]-1659842146412
GPR[EPVS]-1659842146412
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842146413
GPR[SPVAP]-1659842146413
GPR[EPVAP]-1659842147590
GPR[EPVS]-1659842147590
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842147591
GPR[SPVAP]-1659842147591
GPR[EPVAP]-1659842148728
GPR[EPVS]-1659842148728
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842148731
GPR[SPVAP]-1659842148731
GPR[EPVAP]-1659842149836
GPR[EPVS]-1659842149836
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842149838
GPR[SPVAP]-1659842149838
GPR[EPVAP]-1659842150955
GPR[EPVS]-1659842150955
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842150958
GPR[SPVAP]-1659842150958
GPR[EPVAP]-1659842152072
GPR[EPVS]-1659842152072
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842152074
GPR[SPVAP]-1659842152074
GPR[EPVAP]-1659842153183
GPR[EPVS]-1659842153183
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842153184
GPR[SPVAP]-1659842153184
GPR[EPVAP]-1659842154290
GPR[EPVS]-1659842154290
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842154292
GPR[SPVAP]-1659842154292
GPR[EPVAP]-1659842155396
GPR[EPVS]-1659842155396
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842155398
GPR[SPVAP]-1659842155398
GPR[EPVAP]-1659842156502
GPR[EPVS]-1659842156502
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842156504
GPR[SPVAP]-1659842156504
GPR[EPVAP]-1659842157626
GPR[EPVS]-1659842157626
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842157629
GPR[SPVAP]-1659842157629
GPR[EPVAP]-1659842158760
GPR[EPVS]-1659842158760
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842158762
GPR[SPVAP]-1659842158762
GPR[EPVAP]-1659842159901
GPR[EPVS]-1659842159901
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842159902
GPR[SPVAP]-1659842159902
GPR[EPVAP]-1659842161059
GPR[EPVS]-1659842161059
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842161060
GPR[SPVAP]-1659842161060
GPR[EPVAP]-1659842162179
GPR[EPVS]-1659842162179
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842162181
GPR[SPVAP]-1659842162181
GPR[EPVAP]-1659842163303
GPR[EPVS]-1659842163303
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842163305
GPR[SPVAP]-1659842163305
GPR[EPVAP]-1659842165377
GPR[SPVATF]-1659842165377
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842167368
GPR[EPVS]-1659842167368
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842167371
GPR[SPVAP]-1659842167371
GPR[EPVAP]-1659842168532
GPR[EPVS]-1659842168532
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842168533
GPR[SPVAP]-1659842168533
GPR[EPVAP]-1659842169653
GPR[EPVS]-1659842169653
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842169655
GPR[SPVAP]-1659842169655
GPR[EPVAP]-1659842170772
GPR[EPVS]-1659842170772
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842170774
GPR[SPVAP]-1659842170774
GPR[EPVAP]-1659842171885
GPR[EPVS]-1659842171885
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842171887
GPR[SPVAP]-1659842171887
GPR[EPVAP]-1659842172997
GPR[EPVS]-1659842172997
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842172999
GPR[SPVAP]-1659842172999
GPR[EPVAP]-1659842174141
GPR[EPVS]-1659842174141
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842174142
GPR[SPVAP]-1659842174142
GPR[EPVAP]-1659842175283
GPR[EPVS]-1659842175283
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842175285
GPR[SPVAP]-1659842175285
GPR[EPVAP]-1659842176405
GPR[EPVS]-1659842176405
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842176408
GPR[SPVAP]-1659842176408
GPR[EPVAP]-1659842177526
GPR[EPVS]-1659842177526
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842177529
GPR[SPVAP]-1659842177529
GPR[EPVAP]-1659842178656
GPR[EPVS]-1659842178656
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842178658
GPR[SPVAP]-1659842178658
GPR[EPVAP]-1659842179760
GPR[EPVS]-1659842179760
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842179762
GPR[SPVAP]-1659842179762
GPR[EPVAP]-1659842180880
GPR[EPVS]-1659842180880
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842180884
GPR[SPVAP]-1659842180884
GPR[EPVAP]-1659842181989
GPR[EPVS]-1659842181989
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842181991
GPR[SPVAP]-1659842181991
GPR[EPVAP]-1659842184800
GPR[EPVS]-1659842184800
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842184802
GPR[SPVAP]-1659842184802
GPR[EPVAP]-1659842185929
GPR[EPVS]-1659842185929
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842185930
GPR[SPVAP]-1659842185930
GPR[EPVAP]-1659842187033
GPR[EPVS]-1659842187033
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842187035
GPR[SPVAP]-1659842187035
GPR[EPVAP]-1659842188153
GPR[EPVS]-1659842188153
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842188155
GPR[SPVAP]-1659842188155
GPR[EPVAP]-1659842189278
GPR[EPVS]-1659842189278
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842189281
GPR[SPVAP]-1659842189281
GPR[EPVAP]-1659842190409
GPR[EPVS]-1659842190409
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842190411
GPR[SPVAP]-1659842190411
GPR[EPVAP]-1659842191521
GPR[EPVS]-1659842191521
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842191523
GPR[SPVAP]-1659842191523
GPR[EPVAP]-1659842192630
GPR[EPVS]-1659842192630
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842192632
GPR[SPVAP]-1659842192632
GPR[EPVAP]-1659842193761
GPR[EPVS]-1659842193761
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842193763
GPR[SPVAP]-1659842193763
GPR[EPVAP]-1659842194896
GPR[EPVS]-1659842194896
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842194897
GPR[SPVAP]-1659842194897
GPR[EPVAP]-1659842196012
GPR[EPVS]-1659842196012
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842196015
GPR[SPVAP]-1659842196015
GPR[EPVAP]-1659842197113
GPR[EPVS]-1659842197113
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842197116
GPR[SPVAP]-1659842197116
GPR[EPVAP]-1659842198236
GPR[EPVS]-1659842198236
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842198240
GPR[SPVAP]-1659842198240
GPR[EPVAP]-1659842199359
GPR[EPVS]-1659842199359
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659842199362
GPR[SPVAP]-1659842199362
GPR[EPVAP]-1659842200462
GPR[EPVS]-1659842200462
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659842200464
GPR[SPVAP]-1659842200464
GPR[EPVAP]-1659842201567
GPR[EPVS]-1659842201567
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659842201569
GPR[SPVAP]-1659842201569
GPR[EPVAP]-1659842202681
GPR[EPVS]-1659842202681
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842202683
GPR[SPVAP]-1659842202683
GPR[EPVAP]-1659842203801
GPR[EPVS]-1659842203801
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842203802
GPR[SPVAP]-1659842203802
GPR[EPVAP]-1659842204908
GPR[EPVS]-1659842204908
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842204910
GPR[SPVAP]-1659842204910
GPR[EPVAP]-1659842206021
GPR[EPVS]-1659842206021
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842206025
GPR[SPVAP]-1659842206025
GPR[EPVAP]-1659842207176
GPR[EPVS]-1659842207176
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842207178
GPR[SPVAP]-1659842207178
GPR[EPVAP]-1659842208285
GPR[EPVS]-1659842208285
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842208286
GPR[SPVAP]-1659842208286
GPR[EPVAP]-1659842209401
GPR[EPVS]-1659842209401
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842209407
GPR[SPVAP]-1659842209407
GPR[EPVAP]-1659842210504
GPR[EPVS]-1659842210504
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842210507
GPR[SPVAP]-1659842210507
GPR[EPVAP]-1659842211617
GPR[EPVS]-1659842211617
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842211621
GPR[SPVAP]-1659842211621
GPR[EPVAP]-1659842212753
GPR[EPVS]-1659842212753
GPR[ESUN]-1659842212754
GPR[SSUN]-1659842212754
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659842213465
GPR[SSUN]-1659842213465
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842220126
GPR[SPVAP]-1659842220126
GPR[EPVAP]-1659842226662
GPR[SPVATF]-1659842226662
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842228675
GPR[EPVS]-1659842228675
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842228678
GPR[SPVAP]-1659842228678
GPR[EPVAP]-1659842229833
GPR[EPVS]-1659842229833
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842229835
GPR[SPVAP]-1659842229835
GPR[EPVAP]-1659842231916
GPR[SPVATF]-1659842231916
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842234022
GPR[EPVS]-1659842234022
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842234024
GPR[SPVAP]-1659842234024
GPR[EPVAP]-1659842235173
GPR[EPVS]-1659842235173
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842235174
GPR[SPVAP]-1659842235174
GPR[EPVAP]-1659842236311
GPR[EPVS]-1659842236311
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842236312
GPR[SPVAP]-1659842236312
GPR[EPVAP]-1659842237442
GPR[EPVS]-1659842237442
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842237444
GPR[SPVAP]-1659842237444
GPR[EPVAP]-1659842238548
GPR[EPVS]-1659842238548
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842238550
GPR[SPVAP]-1659842238550
GPR[EPVAP]-1659842239636
GPR[EPVS]-1659842239636
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842239638
GPR[SPVAP]-1659842239638
GPR[EPVAP]-1659842240755
GPR[EPVS]-1659842240755
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842240757
GPR[SPVAP]-1659842240757
GPR[EPVAP]-1659842241893
GPR[EPVS]-1659842241893
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842241895
GPR[SPVAP]-1659842241895
GPR[EPVAP]-1659842243009
GPR[EPVS]-1659842243009
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842243011
GPR[SPVAP]-1659842243011
GPR[EPVAP]-1659842244141
GPR[EPVS]-1659842244141
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842244143
GPR[SPVAP]-1659842244143
GPR[EPVAP]-1659842245265
GPR[EPVS]-1659842245265
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842245266
GPR[SPVAP]-1659842245266
GPR[EPVAP]-1659842246388
GPR[EPVS]-1659842246388
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842246391
GPR[SPVAP]-1659842246391
GPR[EPVAP]-1659842247557
GPR[EPVS]-1659842247557
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842247559
GPR[SPVAP]-1659842247559
GPR[EPVAP]-1659842248686
GPR[EPVS]-1659842248686
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842248688
GPR[SPVAP]-1659842248688
GPR[EPVAP]-1659842249799
GPR[EPVS]-1659842249799
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842249802
GPR[SPVAP]-1659842249802
GPR[EPVAP]-1659842250932
GPR[EPVS]-1659842250932
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842250934
GPR[SPVAP]-1659842250934
GPR[EPVAP]-1659842252051
GPR[EPVS]-1659842252051
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842252053
GPR[SPVAP]-1659842252053
GPR[EPVAP]-1659842253168
GPR[EPVS]-1659842253168
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842253170
GPR[SPVAP]-1659842253170
GPR[EPVAP]-1659842254284
GPR[EPVS]-1659842254284
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842254295
GPR[SPVAP]-1659842254295
GPR[EPVAP]-1659842257024
GPR[EPVS]-1659842257024
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842257026
GPR[SPVAP]-1659842257026
GPR[EPVAP]-1659842258131
GPR[EPVS]-1659842258131
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842258132
GPR[SPVAP]-1659842258132
GPR[EPVAP]-1659842259233
GPR[EPVS]-1659842259233
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842259235
GPR[SPVAP]-1659842259235
GPR[EPVAP]-1659842260339
GPR[EPVS]-1659842260339
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842260341
GPR[SPVAP]-1659842260341
GPR[EPVAP]-1659842261455
GPR[EPVS]-1659842261455
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842261456
GPR[SPVAP]-1659842261456
GPR[EPVAP]-1659842262571
GPR[EPVS]-1659842262571
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842262573
GPR[SPVAP]-1659842262573
GPR[EPVAP]-1659842263679
GPR[EPVS]-1659842263679
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842263681
GPR[SPVAP]-1659842263681
GPR[EPVAP]-1659842264791
GPR[EPVS]-1659842264791
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842264792
GPR[SPVAP]-1659842264792
GPR[EPVAP]-1659842265905
GPR[EPVS]-1659842265905
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842265906
GPR[SPVAP]-1659842265906
GPR[EPVAP]-1659842267009
GPR[EPVS]-1659842267009
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842267010
GPR[SPVAP]-1659842267010
GPR[EPVAP]-1659842268168
GPR[EPVS]-1659842268168
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842268169
GPR[SPVAP]-1659842268169
GPR[EPVAP]-1659842269271
GPR[EPVS]-1659842269271
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842269274
GPR[SPVAP]-1659842269274
GPR[EPVAP]-1659842270407
GPR[EPVS]-1659842270407
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842270408
GPR[SPVAP]-1659842270408
GPR[EPVAP]-1659842271529
GPR[EPVS]-1659842271529
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842271530
GPR[SPVAP]-1659842271530
GPR[EPVAP]-1659842272651
GPR[EPVS]-1659842272651
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842272653
GPR[SPVAP]-1659842272653
GPR[EPVAP]-1659842273778
GPR[EPVS]-1659842273778
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842273779
GPR[SPVAP]-1659842273779
GPR[EPVAP]-1659842274901
GPR[EPVS]-1659842274901
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842274903
GPR[SPVAP]-1659842274903
GPR[EPVAP]-1659842276005
GPR[EPVS]-1659842276005
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842276007
GPR[SPVAP]-1659842276007
GPR[EPVAP]-1659842277112
GPR[EPVS]-1659842277112
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842277114
GPR[SPVAP]-1659842277114
GPR[EPVAP]-1659842278270
GPR[EPVS]-1659842278270
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842278271
GPR[SPVAP]-1659842278271
GPR[EPVAP]-1659842279386
GPR[EPVS]-1659842279386
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842279388
GPR[SPVAP]-1659842279388
GPR[EPVAP]-1659842280505
GPR[EPVS]-1659842280505
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842280506
GPR[SPVAP]-1659842280506
GPR[EPVAP]-1659842281621
GPR[EPVS]-1659842281621
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842281623
GPR[SPVAP]-1659842281623
GPR[EPVAP]-1659842282763
GPR[EPVS]-1659842282763
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842282765
GPR[SPVAP]-1659842282765
GPR[EPVAP]-1659842283889
GPR[EPVS]-1659842283889
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842283890
GPR[SPVAP]-1659842283890
GPR[EPVAP]-1659842285019
GPR[EPVS]-1659842285019
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842285023
GPR[SPVAP]-1659842285023
GPR[EPVAP]-1659842286139
GPR[EPVS]-1659842286139
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842286142
GPR[SPVAP]-1659842286142
GPR[EPVAP]-1659842287248
GPR[EPVS]-1659842287248
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842287249
GPR[SPVAP]-1659842287249
GPR[EPVAP]-1659842288363
GPR[EPVS]-1659842288363
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842288365
GPR[SPVAP]-1659842288365
GPR[EPVAP]-1659842289477
GPR[EPVS]-1659842289477
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842289479
GPR[SPVAP]-1659842289479
GPR[EPVAP]-1659842290599
GPR[EPVS]-1659842290600
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842290602
GPR[SPVAP]-1659842290602
GPR[EPVAP]-1659842291706
GPR[EPVS]-1659842291706
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842291707
GPR[SPVAP]-1659842291707
GPR[EPVAP]-1659842292813
GPR[EPVS]-1659842292813
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842292817
GPR[SPVAP]-1659842292817
GPR[EPVAP]-1659842293940
GPR[EPVS]-1659842293940
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842293944
GPR[SPVAP]-1659842293944
GPR[EPVAP]-1659842295049
GPR[EPVS]-1659842295049
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842295051
GPR[SPVAP]-1659842295051
GPR[EPVAP]-1659842296193
GPR[EPVS]-1659842296193
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842296195
GPR[SPVAP]-1659842296195
GPR[EPVAP]-1659842297306
GPR[EPVS]-1659842297306
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842297309
GPR[SPVAP]-1659842297309
GPR[EPVAP]-1659842298415
GPR[EPVS]-1659842298415
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842298419
GPR[SPVAP]-1659842298419
GPR[EPVAP]-1659842299529
GPR[EPVS]-1659842299529
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842299531
GPR[SPVAP]-1659842299531
GPR[EPVAP]-1659842300647
GPR[EPVS]-1659842300647
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842300649
GPR[SPVAP]-1659842300649
GPR[EPVAP]-1659842301767
GPR[EPVS]-1659842301767
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842301768
GPR[SPVAP]-1659842301768
GPR[EPVAP]-1659842302880
GPR[EPVS]-1659842302880
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842302883
GPR[SPVAP]-1659842302883
GPR[EPVAP]-1659842303983
GPR[EPVS]-1659842303983
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842303986
GPR[SPVAP]-1659842303986
GPR[EPVAP]-1659842305110
GPR[EPVS]-1659842305110
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842305111
GPR[SPVAP]-1659842305111
GPR[EPVAP]-1659842306216
GPR[EPVS]-1659842306216
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842306219
GPR[SPVAP]-1659842306219
GPR[EPVAP]-1659842307340
GPR[EPVS]-1659842307340
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842307343
GPR[SPVAP]-1659842307343
GPR[EPVAP]-1659842308456
GPR[EPVS]-1659842308456
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842308458
GPR[SPVAP]-1659842308458
GPR[EPVAP]-1659842309556
GPR[EPVS]-1659842309556
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842309557
GPR[SPVAP]-1659842309557
GPR[EPVAP]-1659842310660
GPR[EPVS]-1659842310660
========
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842310666
GPR[SPVAP]-1659842310666
GPR[EPVAP]-1659842311773
GPR[EPVS]-1659842311773
GPR[ESUN]-1659842311773
GPR[SSUN]-1659842311773
GPR[ESUN]-1659842311773
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659842312721
GPR[EFL]-1659842312724
GPR[SFP]-1659842312724
TIMEOUT : 600000
GPR[SSUN]-1659842312728
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659842314665
GPR[SPVAP]-1659842314665
GPR[EPVAP]-1659842321115
GPR[SPVATF]-1659842321115
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 0
GPR[EPVATF]-1659842323486
GPR[SPVATR]-1659842323486
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659842390889
GPR[EPVS]-1659842390889
GPR[PF]-1659842390889
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/2/patch_78169_1_ts_1659842390889.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM7939744760387484573/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/2/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/2/patch_78169_1_ts_1659842390889.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659842390899
GPR[SPVAP]-1659842390899
GPR[EPVAP]-1659842392894
GPR[SPVATF]-1659842392894
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842395112
GPR[EPVS]-1659842395112
GPR[ESUN]-1659842395113
GPR[SSUN]-1659842395113
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842397350
GPR[SPVAP]-1659842397350
GPR[EPVAP]-1659842405668
GPR[SPVATF]-1659842405668
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842407864
GPR[EPVS]-1659842407864
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842407865
GPR[SPVAP]-1659842407865
GPR[EPVAP]-1659842409954
GPR[SPVATF]-1659842409954
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842412175
GPR[EPVS]-1659842412175
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842412176
GPR[SPVAP]-1659842412176
GPR[EPVAP]-1659842414256
GPR[SPVATF]-1659842414256
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842416554
GPR[EPVS]-1659842416554
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842416555
GPR[SPVAP]-1659842416555
GPR[EPVAP]-1659842418629
GPR[SPVATF]-1659842418629
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842420834
GPR[EPVS]-1659842420834
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659842420835
GPR[SPVAP]-1659842420835
GPR[EPVAP]-1659842422881
GPR[SPVATF]-1659842422881
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842425136
GPR[EPVS]-1659842425136
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842425139
GPR[SPVAP]-1659842425139
GPR[EPVAP]-1659842427196
GPR[SPVATF]-1659842427196
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842429425
GPR[EPVS]-1659842429425
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842429427
GPR[SPVAP]-1659842429427
GPR[EPVAP]-1659842431498
GPR[SPVATF]-1659842431498
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842433697
GPR[EPVS]-1659842433697
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842433699
GPR[SPVAP]-1659842433699
GPR[EPVAP]-1659842435736
GPR[SPVATF]-1659842435736
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842437912
GPR[EPVS]-1659842437912
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659842437914
GPR[SPVAP]-1659842437914
GPR[EPVAP]-1659842439961
GPR[SPVATF]-1659842439961
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842442132
GPR[EPVS]-1659842442132
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842442133
GPR[SPVAP]-1659842442133
GPR[EPVAP]-1659842444166
GPR[SPVATF]-1659842444166
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842446367
GPR[EPVS]-1659842446367
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842446368
GPR[SPVAP]-1659842446368
GPR[EPVAP]-1659842448452
GPR[SPVATF]-1659842448452
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842450658
GPR[EPVS]-1659842450658
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659842450659
GPR[SPVAP]-1659842450659
GPR[EPVAP]-1659842452762
GPR[SPVATF]-1659842452762
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842454934
GPR[EPVS]-1659842454934
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842454935
GPR[SPVAP]-1659842454935
GPR[EPVAP]-1659842456965
GPR[SPVATF]-1659842456965
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842459233
GPR[EPVS]-1659842459233
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659842459235
GPR[SPVAP]-1659842459235
GPR[EPVAP]-1659842461264
GPR[SPVATF]-1659842461264
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842463473
GPR[EPVS]-1659842463473
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659842463474
GPR[SPVAP]-1659842463474
GPR[EPVAP]-1659842465511
GPR[SPVATF]-1659842465511
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842467692
GPR[EPVS]-1659842467692
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842467693
GPR[SPVAP]-1659842467693
GPR[EPVAP]-1659842469770
GPR[SPVATF]-1659842469770
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842471954
GPR[EPVS]-1659842471954
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842471956
GPR[SPVAP]-1659842471956
GPR[EPVAP]-1659842476049
GPR[SPVATF]-1659842476049
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842478235
GPR[EPVS]-1659842478235
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659842478237
GPR[SPVAP]-1659842478237
GPR[EPVAP]-1659842480278
GPR[SPVATF]-1659842480278
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842482445
GPR[EPVS]-1659842482445
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842482447
GPR[SPVAP]-1659842482447
GPR[EPVAP]-1659842484497
GPR[SPVATF]-1659842484497
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842486725
GPR[EPVS]-1659842486725
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659842486727
GPR[SPVAP]-1659842486727
GPR[EPVAP]-1659842488756
GPR[SPVATF]-1659842488756
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842490948
GPR[EPVS]-1659842490948
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659842490950
GPR[SPVAP]-1659842490950
GPR[EPVAP]-1659842493001
GPR[SPVATF]-1659842493001
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842495168
GPR[EPVS]-1659842495168
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842495170
GPR[SPVAP]-1659842495170
GPR[EPVAP]-1659842497236
GPR[SPVATF]-1659842497236
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842499496
GPR[EPVS]-1659842499496
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659842499497
GPR[SPVAP]-1659842499497
GPR[EPVAP]-1659842501576
GPR[SPVATF]-1659842501576
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842503782
GPR[EPVS]-1659842503782
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659842503783
GPR[SPVAP]-1659842503784
GPR[EPVAP]-1659842505812
GPR[SPVATF]-1659842505812
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842508002
GPR[EPVS]-1659842508002
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659842508004
GPR[SPVAP]-1659842508004
GPR[EPVAP]-1659842510096
GPR[SPVATF]-1659842510096
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842512282
GPR[EPVS]-1659842512282
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842512284
GPR[SPVAP]-1659842512284
GPR[EPVAP]-1659842514311
GPR[SPVATF]-1659842514311
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842516492
GPR[EPVS]-1659842516492
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659842516493
GPR[SPVAP]-1659842516493
GPR[EPVAP]-1659842518536
GPR[SPVATF]-1659842518536
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842520717
GPR[EPVS]-1659842520717
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659842520718
GPR[SPVAP]-1659842520718
GPR[EPVAP]-1659842522762
GPR[SPVATF]-1659842522762
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842524965
GPR[EPVS]-1659842524965
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659842524967
GPR[SPVAP]-1659842524967
GPR[EPVAP]-1659842527004
GPR[SPVATF]-1659842527004
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842529226
GPR[EPVS]-1659842529226
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659842529227
GPR[SPVAP]-1659842529227
GPR[EPVAP]-1659842531266
GPR[SPVATF]-1659842531267
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842533468
GPR[EPVS]-1659842533468
GPR[ESUN]-1659842533470
GPR[SSUN]-1659842533470
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842540410
GPR[SPVAP]-1659842540410
GPR[EPVAP]-1659842548524
GPR[SPVATF]-1659842548524
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842550530
GPR[EPVS]-1659842550530
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659842550531
GPR[SPVAP]-1659842550531
GPR[EPVAP]-1659842551652
GPR[EPVS]-1659842551652
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842551654
GPR[SPVAP]-1659842551654
GPR[EPVAP]-1659842552781
GPR[EPVS]-1659842552781
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842552783
GPR[SPVAP]-1659842552783
GPR[EPVAP]-1659842553889
GPR[EPVS]-1659842553889
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842553892
GPR[SPVAP]-1659842553892
GPR[EPVAP]-1659842554994
GPR[EPVS]-1659842554994
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842554995
GPR[SPVAP]-1659842554995
GPR[EPVAP]-1659842556129
GPR[EPVS]-1659842556129
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842556130
GPR[SPVAP]-1659842556130
GPR[EPVAP]-1659842557262
GPR[EPVS]-1659842557262
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842557266
GPR[SPVAP]-1659842557266
GPR[EPVAP]-1659842559334
GPR[SPVATF]-1659842559334
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842561500
GPR[EPVS]-1659842561500
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842561501
GPR[SPVAP]-1659842561501
GPR[EPVAP]-1659842562616
GPR[EPVS]-1659842562616
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842562618
GPR[SPVAP]-1659842562618
GPR[EPVAP]-1659842563742
GPR[EPVS]-1659842563742
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842563744
GPR[SPVAP]-1659842563744
GPR[EPVAP]-1659842564850
GPR[EPVS]-1659842564850
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842564851
GPR[SPVAP]-1659842564851
GPR[EPVAP]-1659842565954
GPR[EPVS]-1659842565954
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842565956
GPR[SPVAP]-1659842565956
GPR[EPVAP]-1659842567062
GPR[EPVS]-1659842567062
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842567063
GPR[SPVAP]-1659842567063
GPR[EPVAP]-1659842568197
GPR[EPVS]-1659842568197
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842568198
GPR[SPVAP]-1659842568198
GPR[EPVAP]-1659842569322
GPR[EPVS]-1659842569322
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842569324
GPR[SPVAP]-1659842569324
GPR[EPVAP]-1659842570434
GPR[EPVS]-1659842570434
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842570436
GPR[SPVAP]-1659842570436
GPR[EPVAP]-1659842571529
GPR[EPVS]-1659842571529
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842571530
GPR[SPVAP]-1659842571530
GPR[EPVAP]-1659842572679
GPR[EPVS]-1659842572679
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842572681
GPR[SPVAP]-1659842572681
GPR[EPVAP]-1659842573784
GPR[EPVS]-1659842573784
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842573786
GPR[SPVAP]-1659842573786
GPR[EPVAP]-1659842574912
GPR[EPVS]-1659842574912
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842574915
GPR[SPVAP]-1659842574915
GPR[EPVAP]-1659842576027
GPR[EPVS]-1659842576027
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842576029
GPR[SPVAP]-1659842576029
GPR[EPVAP]-1659842578100
GPR[SPVATF]-1659842578100
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842580099
GPR[EPVS]-1659842580099
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659842580101
GPR[SPVAP]-1659842580101
GPR[EPVAP]-1659842581226
GPR[EPVS]-1659842581226
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842581228
GPR[SPVAP]-1659842581228
GPR[EPVAP]-1659842582359
GPR[EPVS]-1659842582359
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842582361
GPR[SPVAP]-1659842582361
GPR[EPVAP]-1659842583483
GPR[EPVS]-1659842583483
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842583485
GPR[SPVAP]-1659842583485
GPR[EPVAP]-1659842584609
GPR[EPVS]-1659842584609
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842584612
GPR[SPVAP]-1659842584612
GPR[EPVAP]-1659842585720
GPR[EPVS]-1659842585720
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842585722
GPR[SPVAP]-1659842585722
GPR[EPVAP]-1659842586823
GPR[EPVS]-1659842586823
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842586825
GPR[SPVAP]-1659842586825
GPR[EPVAP]-1659842587981
GPR[EPVS]-1659842587981
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842587982
GPR[SPVAP]-1659842587982
GPR[EPVAP]-1659842589104
GPR[EPVS]-1659842589104
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842589106
GPR[SPVAP]-1659842589106
GPR[EPVAP]-1659842590216
GPR[EPVS]-1659842590216
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842590218
GPR[SPVAP]-1659842590218
GPR[EPVAP]-1659842591323
GPR[EPVS]-1659842591323
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842591326
GPR[SPVAP]-1659842591326
GPR[EPVAP]-1659842592458
GPR[EPVS]-1659842592458
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842592460
GPR[SPVAP]-1659842592460
GPR[EPVAP]-1659842593588
GPR[EPVS]-1659842593588
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842593590
GPR[SPVAP]-1659842593590
GPR[EPVAP]-1659842595693
GPR[SPVATF]-1659842595693
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842597693
GPR[EPVS]-1659842597693
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842597694
GPR[SPVAP]-1659842597694
GPR[EPVAP]-1659842598796
GPR[EPVS]-1659842598796
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842598798
GPR[SPVAP]-1659842598798
GPR[EPVAP]-1659842599893
GPR[EPVS]-1659842599893
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842599895
GPR[SPVAP]-1659842599895
GPR[EPVAP]-1659842600997
GPR[EPVS]-1659842600997
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842600999
GPR[SPVAP]-1659842600999
GPR[EPVAP]-1659842602107
GPR[EPVS]-1659842602107
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842602109
GPR[SPVAP]-1659842602109
GPR[EPVAP]-1659842603267
GPR[EPVS]-1659842603267
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842603268
GPR[SPVAP]-1659842603268
GPR[EPVAP]-1659842604374
GPR[EPVS]-1659842604374
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842604376
GPR[SPVAP]-1659842604376
GPR[EPVAP]-1659842605475
GPR[EPVS]-1659842605475
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842605479
GPR[SPVAP]-1659842605479
GPR[EPVAP]-1659842606595
GPR[EPVS]-1659842606595
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842606599
GPR[SPVAP]-1659842606599
GPR[EPVAP]-1659842607707
GPR[EPVS]-1659842607707
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842607709
GPR[SPVAP]-1659842607709
GPR[EPVAP]-1659842608831
GPR[EPVS]-1659842608831
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842608832
GPR[SPVAP]-1659842608832
GPR[EPVAP]-1659842609938
GPR[EPVS]-1659842609938
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842609939
GPR[SPVAP]-1659842609939
GPR[EPVAP]-1659842611055
GPR[EPVS]-1659842611055
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842611059
GPR[SPVAP]-1659842611059
GPR[EPVAP]-1659842612161
GPR[EPVS]-1659842612161
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842612162
GPR[SPVAP]-1659842612162
GPR[EPVAP]-1659842613264
GPR[EPVS]-1659842613264
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842613267
GPR[SPVAP]-1659842613267
GPR[EPVAP]-1659842614389
GPR[EPVS]-1659842614389
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842614392
GPR[SPVAP]-1659842614392
GPR[EPVAP]-1659842615509
GPR[EPVS]-1659842615509
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842615510
GPR[SPVAP]-1659842615510
GPR[EPVAP]-1659842616663
GPR[EPVS]-1659842616663
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842616666
GPR[SPVAP]-1659842616666
GPR[EPVAP]-1659842617769
GPR[EPVS]-1659842617769
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842617771
GPR[SPVAP]-1659842617771
GPR[EPVAP]-1659842618899
GPR[EPVS]-1659842618899
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842618901
GPR[SPVAP]-1659842618901
GPR[EPVAP]-1659842620094
GPR[EPVS]-1659842620094
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842620102
GPR[SPVAP]-1659842620102
GPR[EPVAP]-1659842622511
GPR[EPVS]-1659842622511
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842622513
GPR[SPVAP]-1659842622513
GPR[EPVAP]-1659842623623
GPR[EPVS]-1659842623623
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842623625
GPR[SPVAP]-1659842623625
GPR[EPVAP]-1659842624739
GPR[EPVS]-1659842624739
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842624741
GPR[SPVAP]-1659842624741
GPR[EPVAP]-1659842625843
GPR[EPVS]-1659842625843
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842625845
GPR[SPVAP]-1659842625845
GPR[EPVAP]-1659842626963
GPR[EPVS]-1659842626963
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842626964
GPR[SPVAP]-1659842626964
GPR[EPVAP]-1659842628074
GPR[EPVS]-1659842628074
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842628076
GPR[SPVAP]-1659842628076
GPR[EPVAP]-1659842629177
GPR[EPVS]-1659842629177
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842629179
GPR[SPVAP]-1659842629179
GPR[EPVAP]-1659842630281
GPR[EPVS]-1659842630281
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842630284
GPR[SPVAP]-1659842630284
GPR[EPVAP]-1659842632364
GPR[SPVATF]-1659842632364
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842634286
GPR[EPVS]-1659842634286
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842634287
GPR[SPVAP]-1659842634287
GPR[EPVAP]-1659842635409
GPR[EPVS]-1659842635409
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842635411
GPR[SPVAP]-1659842635411
GPR[EPVAP]-1659842636548
GPR[EPVS]-1659842636548
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842636550
GPR[SPVAP]-1659842636550
GPR[EPVAP]-1659842637660
GPR[EPVS]-1659842637661
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842637664
GPR[SPVAP]-1659842637664
GPR[EPVAP]-1659842638766
GPR[EPVS]-1659842638766
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842638769
GPR[SPVAP]-1659842638769
GPR[EPVAP]-1659842639931
GPR[EPVS]-1659842639931
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842639933
GPR[SPVAP]-1659842639933
GPR[EPVAP]-1659842641081
GPR[EPVS]-1659842641081
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842641083
GPR[SPVAP]-1659842641083
GPR[EPVAP]-1659842642201
GPR[EPVS]-1659842642201
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842642206
GPR[SPVAP]-1659842642206
GPR[EPVAP]-1659842643347
GPR[EPVS]-1659842643347
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842643353
GPR[SPVAP]-1659842643353
GPR[EPVAP]-1659842644467
GPR[EPVS]-1659842644467
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842644470
GPR[SPVAP]-1659842644470
GPR[EPVAP]-1659842645581
GPR[EPVS]-1659842645581
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842645583
GPR[SPVAP]-1659842645583
GPR[EPVAP]-1659842646684
GPR[EPVS]-1659842646684
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842646686
GPR[SPVAP]-1659842646686
GPR[EPVAP]-1659842647795
GPR[EPVS]-1659842647795
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842647797
GPR[SPVAP]-1659842647797
GPR[EPVAP]-1659842648957
GPR[EPVS]-1659842648957
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842648962
GPR[SPVAP]-1659842648962
GPR[EPVAP]-1659842650065
GPR[EPVS]-1659842650065
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842650066
GPR[SPVAP]-1659842650066
GPR[EPVAP]-1659842651168
GPR[EPVS]-1659842651168
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842651170
GPR[SPVAP]-1659842651170
GPR[EPVAP]-1659842652282
GPR[EPVS]-1659842652282
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842652284
GPR[SPVAP]-1659842652284
GPR[EPVAP]-1659842653405
GPR[EPVS]-1659842653405
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659842653407
GPR[SPVAP]-1659842653407
GPR[EPVAP]-1659842654511
GPR[EPVS]-1659842654511
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842654514
GPR[SPVAP]-1659842654514
GPR[EPVAP]-1659842655629
GPR[EPVS]-1659842655629
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842655631
GPR[SPVAP]-1659842655631
GPR[EPVAP]-1659842656756
GPR[EPVS]-1659842656756
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842656758
GPR[SPVAP]-1659842656758
GPR[EPVAP]-1659842657856
GPR[EPVS]-1659842657856
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842657862
GPR[SPVAP]-1659842657862
GPR[EPVAP]-1659842658977
GPR[EPVS]-1659842658977
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842658982
GPR[SPVAP]-1659842658982
GPR[EPVAP]-1659842660084
GPR[EPVS]-1659842660084
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842660085
GPR[SPVAP]-1659842660085
GPR[EPVAP]-1659842661202
GPR[EPVS]-1659842661202
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842661203
GPR[SPVAP]-1659842661203
GPR[EPVAP]-1659842662304
GPR[EPVS]-1659842662304
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842662306
GPR[SPVAP]-1659842662306
GPR[EPVAP]-1659842663420
GPR[EPVS]-1659842663420
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842663427
GPR[SPVAP]-1659842663427
GPR[EPVAP]-1659842664539
GPR[EPVS]-1659842664539
GPR[ESUN]-1659842664539
GPR[SSUN]-1659842664539
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842671171
GPR[SPVAP]-1659842671171
GPR[EPVAP]-1659842677647
GPR[SPVATF]-1659842677647
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842679656
GPR[EPVS]-1659842679656
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842679658
GPR[SPVAP]-1659842679658
GPR[EPVAP]-1659842680781
GPR[EPVS]-1659842680781
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842680783
GPR[SPVAP]-1659842680783
GPR[EPVAP]-1659842681915
GPR[EPVS]-1659842681915
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842681916
GPR[SPVAP]-1659842681916
GPR[EPVAP]-1659842683992
GPR[SPVATF]-1659842683992
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842686187
GPR[EPVS]-1659842686187
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659842686190
GPR[SPVAP]-1659842686190
GPR[EPVAP]-1659842687324
GPR[EPVS]-1659842687324
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842687326
GPR[SPVAP]-1659842687326
GPR[EPVAP]-1659842688438
GPR[EPVS]-1659842688438
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842688440
GPR[SPVAP]-1659842688440
GPR[EPVAP]-1659842689536
GPR[EPVS]-1659842689536
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842689538
GPR[SPVAP]-1659842689538
GPR[EPVAP]-1659842690661
GPR[EPVS]-1659842690661
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842690663
GPR[SPVAP]-1659842690663
GPR[EPVAP]-1659842691776
GPR[EPVS]-1659842691776
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842691777
GPR[SPVAP]-1659842691777
GPR[EPVAP]-1659842694467
GPR[EPVS]-1659842694467
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842694469
GPR[SPVAP]-1659842694469
GPR[EPVAP]-1659842695597
GPR[EPVS]-1659842695597
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842695599
GPR[SPVAP]-1659842695599
GPR[EPVAP]-1659842696738
GPR[EPVS]-1659842696738
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842696740
GPR[SPVAP]-1659842696740
GPR[EPVAP]-1659842697891
GPR[EPVS]-1659842697891
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842697892
GPR[SPVAP]-1659842697892
GPR[EPVAP]-1659842699029
GPR[EPVS]-1659842699029
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842699031
GPR[SPVAP]-1659842699031
GPR[EPVAP]-1659842700147
GPR[EPVS]-1659842700147
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842700149
GPR[SPVAP]-1659842700149
GPR[EPVAP]-1659842701264
GPR[EPVS]-1659842701264
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842701265
GPR[SPVAP]-1659842701265
GPR[EPVAP]-1659842702359
GPR[EPVS]-1659842702359
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842702360
GPR[SPVAP]-1659842702360
GPR[EPVAP]-1659842703541
GPR[EPVS]-1659842703541
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842703543
GPR[SPVAP]-1659842703543
GPR[EPVAP]-1659842704650
GPR[EPVS]-1659842704650
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842704652
GPR[SPVAP]-1659842704652
GPR[EPVAP]-1659842705768
GPR[EPVS]-1659842705768
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842705770
GPR[SPVAP]-1659842705770
GPR[EPVAP]-1659842706886
GPR[EPVS]-1659842706886
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842706887
GPR[SPVAP]-1659842706887
GPR[EPVAP]-1659842708000
GPR[EPVS]-1659842708000
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842708003
GPR[SPVAP]-1659842708003
GPR[EPVAP]-1659842709111
GPR[EPVS]-1659842709111
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842709113
GPR[SPVAP]-1659842709113
GPR[EPVAP]-1659842710211
GPR[EPVS]-1659842710211
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842710212
GPR[SPVAP]-1659842710212
GPR[EPVAP]-1659842711315
GPR[EPVS]-1659842711315
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659842711317
GPR[SPVAP]-1659842711317
GPR[EPVAP]-1659842712466
GPR[EPVS]-1659842712466
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842712468
GPR[SPVAP]-1659842712468
GPR[EPVAP]-1659842713592
GPR[EPVS]-1659842713592
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842713594
GPR[SPVAP]-1659842713594
GPR[EPVAP]-1659842714697
GPR[EPVS]-1659842714697
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842714699
GPR[SPVAP]-1659842714699
GPR[EPVAP]-1659842715811
GPR[EPVS]-1659842715811
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842715814
GPR[SPVAP]-1659842715814
GPR[EPVAP]-1659842716922
GPR[EPVS]-1659842716922
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842716924
GPR[SPVAP]-1659842716924
GPR[EPVAP]-1659842718035
GPR[EPVS]-1659842718035
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842718037
GPR[SPVAP]-1659842718037
GPR[EPVAP]-1659842719177
GPR[EPVS]-1659842719177
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842719179
GPR[SPVAP]-1659842719179
GPR[EPVAP]-1659842720305
GPR[EPVS]-1659842720305
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842720307
GPR[SPVAP]-1659842720307
GPR[EPVAP]-1659842721430
GPR[EPVS]-1659842721430
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842721432
GPR[SPVAP]-1659842721432
GPR[EPVAP]-1659842722558
GPR[EPVS]-1659842722559
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842722560
GPR[SPVAP]-1659842722560
GPR[EPVAP]-1659842723732
GPR[EPVS]-1659842723732
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842723734
GPR[SPVAP]-1659842723734
GPR[EPVAP]-1659842724861
GPR[EPVS]-1659842724861
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842724863
GPR[SPVAP]-1659842724863
GPR[EPVAP]-1659842725980
GPR[EPVS]-1659842725980
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842725982
GPR[SPVAP]-1659842725982
GPR[EPVAP]-1659842727101
GPR[EPVS]-1659842727101
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842727102
GPR[SPVAP]-1659842727102
GPR[EPVAP]-1659842728217
GPR[EPVS]-1659842728217
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842728219
GPR[SPVAP]-1659842728219
GPR[EPVAP]-1659842729352
GPR[EPVS]-1659842729352
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842729354
GPR[SPVAP]-1659842729354
GPR[EPVAP]-1659842730472
GPR[EPVS]-1659842730472
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842730473
GPR[SPVAP]-1659842730473
GPR[EPVAP]-1659842731591
GPR[EPVS]-1659842731591
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842731593
GPR[SPVAP]-1659842731593
GPR[EPVAP]-1659842732709
GPR[EPVS]-1659842732709
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842732710
GPR[SPVAP]-1659842732710
GPR[EPVAP]-1659842733818
GPR[EPVS]-1659842733818
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842733819
GPR[SPVAP]-1659842733819
GPR[EPVAP]-1659842734928
GPR[EPVS]-1659842734928
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842734929
GPR[SPVAP]-1659842734929
GPR[EPVAP]-1659842736094
GPR[EPVS]-1659842736094
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842736096
GPR[SPVAP]-1659842736096
GPR[EPVAP]-1659842737249
GPR[EPVS]-1659842737249
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842737254
GPR[SPVAP]-1659842737254
GPR[EPVAP]-1659842738369
GPR[EPVS]-1659842738369
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842738372
GPR[SPVAP]-1659842738372
GPR[EPVAP]-1659842739515
GPR[EPVS]-1659842739515
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842739517
GPR[SPVAP]-1659842739517
GPR[EPVAP]-1659842740640
GPR[EPVS]-1659842740640
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842740642
GPR[SPVAP]-1659842740642
GPR[EPVAP]-1659842741739
GPR[EPVS]-1659842741739
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842741742
GPR[SPVAP]-1659842741742
GPR[EPVAP]-1659842742850
GPR[EPVS]-1659842742851
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842742854
GPR[SPVAP]-1659842742854
GPR[EPVAP]-1659842743985
GPR[EPVS]-1659842743985
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842743986
GPR[SPVAP]-1659842743986
GPR[EPVAP]-1659842745099
GPR[EPVS]-1659842745099
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842745101
GPR[SPVAP]-1659842745101
GPR[EPVAP]-1659842746237
GPR[EPVS]-1659842746237
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842746240
GPR[SPVAP]-1659842746240
GPR[EPVAP]-1659842747356
GPR[EPVS]-1659842747356
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842747359
GPR[SPVAP]-1659842747359
GPR[EPVAP]-1659842748464
GPR[EPVS]-1659842748464
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842748466
GPR[SPVAP]-1659842748466
GPR[EPVAP]-1659842749583
GPR[EPVS]-1659842749583
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842749584
GPR[SPVAP]-1659842749584
GPR[EPVAP]-1659842750701
GPR[EPVS]-1659842750701
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842750703
GPR[SPVAP]-1659842750703
GPR[EPVAP]-1659842751799
GPR[EPVS]-1659842751799
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842751802
GPR[SPVAP]-1659842751802
GPR[EPVAP]-1659842752915
GPR[EPVS]-1659842752915
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842752918
GPR[SPVAP]-1659842752918
GPR[EPVAP]-1659842754044
GPR[EPVS]-1659842754044
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842754045
GPR[SPVAP]-1659842754045
GPR[EPVAP]-1659842755153
GPR[EPVS]-1659842755153
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842755155
GPR[SPVAP]-1659842755155
GPR[EPVAP]-1659842756301
GPR[EPVS]-1659842756301
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842756302
GPR[SPVAP]-1659842756302
GPR[EPVAP]-1659842757419
GPR[EPVS]-1659842757419
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842757420
GPR[SPVAP]-1659842757420
GPR[EPVAP]-1659842758534
GPR[EPVS]-1659842758534
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842758535
GPR[SPVAP]-1659842758535
GPR[EPVAP]-1659842759639
GPR[EPVS]-1659842759639
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842759641
GPR[SPVAP]-1659842759641
GPR[EPVAP]-1659842760744
GPR[EPVS]-1659842760744
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842760746
GPR[SPVAP]-1659842760746
GPR[EPVAP]-1659842761864
GPR[EPVS]-1659842761864
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842761867
GPR[SPVAP]-1659842761867
GPR[EPVAP]-1659842762972
GPR[EPVS]-1659842762972
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842762974
GPR[SPVAP]-1659842762974
GPR[EPVAP]-1659842764274
GPR[EPVS]-1659842764275
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842764283
GPR[SPVAP]-1659842764283
GPR[EPVAP]-1659842766653
GPR[EPVS]-1659842766653
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842766655
GPR[SPVAP]-1659842766655
GPR[EPVAP]-1659842767798
GPR[EPVS]-1659842767798
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842767800
GPR[SPVAP]-1659842767800
GPR[EPVAP]-1659842768913
GPR[EPVS]-1659842768913
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842768915
GPR[SPVAP]-1659842768915
GPR[EPVAP]-1659842771027
GPR[SPVATF]-1659842771027
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842773070
GPR[EPVS]-1659842773070
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842773072
GPR[SPVAP]-1659842773072
GPR[EPVAP]-1659842774213
GPR[EPVS]-1659842774213
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842774214
GPR[SPVAP]-1659842774214
GPR[EPVAP]-1659842775313
GPR[EPVS]-1659842775313
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842775314
GPR[SPVAP]-1659842775314
GPR[EPVAP]-1659842776460
GPR[EPVS]-1659842776460
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842776461
GPR[SPVAP]-1659842776461
GPR[EPVAP]-1659842777565
GPR[EPVS]-1659842777565
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842777567
GPR[SPVAP]-1659842777567
GPR[EPVAP]-1659842778686
GPR[EPVS]-1659842778686
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842778688
GPR[SPVAP]-1659842778688
GPR[EPVAP]-1659842779793
GPR[EPVS]-1659842779793
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842779794
GPR[SPVAP]-1659842779794
GPR[EPVAP]-1659842780894
GPR[EPVS]-1659842780894
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842780895
GPR[SPVAP]-1659842780895
GPR[EPVAP]-1659842782005
GPR[EPVS]-1659842782005
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842782008
GPR[SPVAP]-1659842782008
GPR[EPVAP]-1659842783111
GPR[EPVS]-1659842783111
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842783114
GPR[SPVAP]-1659842783114
GPR[EPVAP]-1659842784290
GPR[EPVS]-1659842784290
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842784293
GPR[SPVAP]-1659842784293
GPR[EPVAP]-1659842785425
GPR[EPVS]-1659842785425
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842785427
GPR[SPVAP]-1659842785427
GPR[EPVAP]-1659842786549
GPR[EPVS]-1659842786549
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842786554
GPR[SPVAP]-1659842786554
GPR[EPVAP]-1659842787660
GPR[EPVS]-1659842787660
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842787662
GPR[SPVAP]-1659842787662
GPR[EPVAP]-1659842788783
GPR[EPVS]-1659842788783
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842788784
GPR[SPVAP]-1659842788784
GPR[EPVAP]-1659842789933
GPR[EPVS]-1659842789933
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842789935
GPR[SPVAP]-1659842789935
GPR[EPVAP]-1659842791088
GPR[EPVS]-1659842791088
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842791090
GPR[SPVAP]-1659842791090
GPR[EPVAP]-1659842792201
GPR[EPVS]-1659842792201
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842792203
GPR[SPVAP]-1659842792203
GPR[EPVAP]-1659842793309
GPR[EPVS]-1659842793309
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842793311
GPR[SPVAP]-1659842793311
GPR[EPVAP]-1659842794424
GPR[EPVS]-1659842794424
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842794426
GPR[SPVAP]-1659842794426
GPR[EPVAP]-1659842795534
GPR[EPVS]-1659842795534
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842795535
GPR[SPVAP]-1659842795536
GPR[EPVAP]-1659842796661
GPR[EPVS]-1659842796661
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842796663
GPR[SPVAP]-1659842796663
GPR[EPVAP]-1659842797775
GPR[EPVS]-1659842797775
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842797782
GPR[SPVAP]-1659842797782
GPR[EPVAP]-1659842798931
GPR[EPVS]-1659842798931
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842798932
GPR[SPVAP]-1659842798932
GPR[EPVAP]-1659842800042
GPR[EPVS]-1659842800042
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842800043
GPR[SPVAP]-1659842800043
GPR[EPVAP]-1659842801169
GPR[EPVS]-1659842801169
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842801171
GPR[SPVAP]-1659842801171
GPR[EPVAP]-1659842802291
GPR[EPVS]-1659842802291
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842802296
GPR[SPVAP]-1659842802296
GPR[EPVAP]-1659842803420
GPR[EPVS]-1659842803420
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659842803423
GPR[SPVAP]-1659842803423
GPR[EPVAP]-1659842804549
GPR[EPVS]-1659842804549
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659842804550
GPR[SPVAP]-1659842804550
GPR[EPVAP]-1659842805688
GPR[EPVS]-1659842805688
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659842805690
GPR[SPVAP]-1659842805690
GPR[EPVAP]-1659842806801
GPR[EPVS]-1659842806801
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842806802
GPR[SPVAP]-1659842806802
GPR[EPVAP]-1659842807920
GPR[EPVS]-1659842807920
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842807922
GPR[SPVAP]-1659842807922
GPR[EPVAP]-1659842809048
GPR[EPVS]-1659842809048
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842809051
GPR[SPVAP]-1659842809051
GPR[EPVAP]-1659842810207
GPR[EPVS]-1659842810207
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842810209
GPR[SPVAP]-1659842810209
GPR[EPVAP]-1659842811353
GPR[EPVS]-1659842811353
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842811355
GPR[SPVAP]-1659842811355
GPR[EPVAP]-1659842812472
GPR[EPVS]-1659842812472
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659842812473
GPR[SPVAP]-1659842812473
GPR[EPVAP]-1659842813584
GPR[EPVS]-1659842813584
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842813590
GPR[SPVAP]-1659842813590
GPR[EPVAP]-1659842814693
GPR[EPVS]-1659842814693
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842814695
GPR[SPVAP]-1659842814695
GPR[EPVAP]-1659842815841
GPR[EPVS]-1659842815841
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659842815846
GPR[SPVAP]-1659842815846
GPR[EPVAP]-1659842816953
GPR[EPVS]-1659842816953
GPR[ESUN]-1659842816954
GPR[SSUN]-1659842816954
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659842817663
GPR[SSUN]-1659842817663
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842824286
GPR[SPVAP]-1659842824286
GPR[EPVAP]-1659842830699
GPR[SPVATF]-1659842830699
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842832710
GPR[EPVS]-1659842832710
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842832712
GPR[SPVAP]-1659842832712
GPR[EPVAP]-1659842833832
GPR[EPVS]-1659842833832
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842833834
GPR[SPVAP]-1659842833834
GPR[EPVAP]-1659842835933
GPR[SPVATF]-1659842835933
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842839617
GPR[EPVS]-1659842839617
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842839618
GPR[SPVAP]-1659842839618
GPR[EPVAP]-1659842840725
GPR[EPVS]-1659842840725
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842840726
GPR[SPVAP]-1659842840726
GPR[EPVAP]-1659842841877
GPR[EPVS]-1659842841877
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842841879
GPR[SPVAP]-1659842841879
GPR[EPVAP]-1659842842980
GPR[EPVS]-1659842842980
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842842981
GPR[SPVAP]-1659842842981
GPR[EPVAP]-1659842844084
GPR[EPVS]-1659842844084
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842844085
GPR[SPVAP]-1659842844085
GPR[EPVAP]-1659842845193
GPR[EPVS]-1659842845193
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842845195
GPR[SPVAP]-1659842845195
GPR[EPVAP]-1659842846363
GPR[EPVS]-1659842846363
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842846365
GPR[SPVAP]-1659842846365
GPR[EPVAP]-1659842847492
GPR[EPVS]-1659842847492
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842847494
GPR[SPVAP]-1659842847494
GPR[EPVAP]-1659842848615
GPR[EPVS]-1659842848615
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842848616
GPR[SPVAP]-1659842848616
GPR[EPVAP]-1659842849773
GPR[EPVS]-1659842849773
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842849775
GPR[SPVAP]-1659842849775
GPR[EPVAP]-1659842850878
GPR[EPVS]-1659842850878
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842850880
GPR[SPVAP]-1659842850880
GPR[EPVAP]-1659842852062
GPR[EPVS]-1659842852062
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842852065
GPR[SPVAP]-1659842852065
GPR[EPVAP]-1659842853195
GPR[EPVS]-1659842853195
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842853197
GPR[SPVAP]-1659842853197
GPR[EPVAP]-1659842854303
GPR[EPVS]-1659842854303
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842854305
GPR[SPVAP]-1659842854305
GPR[EPVAP]-1659842855431
GPR[EPVS]-1659842855431
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842855432
GPR[SPVAP]-1659842855432
GPR[EPVAP]-1659842856539
GPR[EPVS]-1659842856539
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842856540
GPR[SPVAP]-1659842856540
GPR[EPVAP]-1659842857650
GPR[EPVS]-1659842857650
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842857651
GPR[SPVAP]-1659842857651
GPR[EPVAP]-1659842858758
GPR[EPVS]-1659842858758
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842858759
GPR[SPVAP]-1659842858759
GPR[EPVAP]-1659842859873
GPR[EPVS]-1659842859873
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842859874
GPR[SPVAP]-1659842859874
GPR[EPVAP]-1659842860979
GPR[EPVS]-1659842860979
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842860981
GPR[SPVAP]-1659842860981
GPR[EPVAP]-1659842862089
GPR[EPVS]-1659842862089
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842862091
GPR[SPVAP]-1659842862091
GPR[EPVAP]-1659842863224
GPR[EPVS]-1659842863224
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842863227
GPR[SPVAP]-1659842863227
GPR[EPVAP]-1659842864354
GPR[EPVS]-1659842864355
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842864357
GPR[SPVAP]-1659842864357
GPR[EPVAP]-1659842865455
GPR[EPVS]-1659842865455
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842865456
GPR[SPVAP]-1659842865456
GPR[EPVAP]-1659842866554
GPR[EPVS]-1659842866554
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842866556
GPR[SPVAP]-1659842866556
GPR[EPVAP]-1659842867681
GPR[EPVS]-1659842867681
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842867683
GPR[SPVAP]-1659842867683
GPR[EPVAP]-1659842868808
GPR[EPVS]-1659842868808
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842868809
GPR[SPVAP]-1659842868809
GPR[EPVAP]-1659842869940
GPR[EPVS]-1659842869940
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842869942
GPR[SPVAP]-1659842869942
GPR[EPVAP]-1659842871085
GPR[EPVS]-1659842871085
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842871086
GPR[SPVAP]-1659842871086
GPR[EPVAP]-1659842872199
GPR[EPVS]-1659842872199
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842872200
GPR[SPVAP]-1659842872200
GPR[EPVAP]-1659842873313
GPR[EPVS]-1659842873313
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842873315
GPR[SPVAP]-1659842873315
GPR[EPVAP]-1659842874428
GPR[EPVS]-1659842874428
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842874430
GPR[SPVAP]-1659842874430
GPR[EPVAP]-1659842875541
GPR[EPVS]-1659842875541
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842875543
GPR[SPVAP]-1659842875543
GPR[EPVAP]-1659842876694
GPR[EPVS]-1659842876695
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842876696
GPR[SPVAP]-1659842876696
GPR[EPVAP]-1659842877826
GPR[EPVS]-1659842877827
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842877828
GPR[SPVAP]-1659842877828
GPR[EPVAP]-1659842878936
GPR[EPVS]-1659842878936
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842878939
GPR[SPVAP]-1659842878939
GPR[EPVAP]-1659842880035
GPR[EPVS]-1659842880035
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842880036
GPR[SPVAP]-1659842880036
GPR[EPVAP]-1659842881641
GPR[EPVS]-1659842881641
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842881643
GPR[SPVAP]-1659842881643
GPR[EPVAP]-1659842884219
GPR[EPVS]-1659842884219
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842884220
GPR[SPVAP]-1659842884220
GPR[EPVAP]-1659842885355
GPR[EPVS]-1659842885355
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842885357
GPR[SPVAP]-1659842885357
GPR[EPVAP]-1659842886669
GPR[EPVS]-1659842886669
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842886670
GPR[SPVAP]-1659842886670
GPR[EPVAP]-1659842887779
GPR[EPVS]-1659842887779
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842887781
GPR[SPVAP]-1659842887781
GPR[EPVAP]-1659842889243
GPR[EPVS]-1659842889243
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842889244
GPR[SPVAP]-1659842889244
GPR[EPVAP]-1659842890364
GPR[EPVS]-1659842890364
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842890366
GPR[SPVAP]-1659842890366
GPR[EPVAP]-1659842891481
GPR[EPVS]-1659842891481
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842891485
GPR[SPVAP]-1659842891485
GPR[EPVAP]-1659842892594
GPR[EPVS]-1659842892594
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842892595
GPR[SPVAP]-1659842892595
GPR[EPVAP]-1659842893710
GPR[EPVS]-1659842893710
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842893712
GPR[SPVAP]-1659842893712
GPR[EPVAP]-1659842894813
GPR[EPVS]-1659842894813
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842894815
GPR[SPVAP]-1659842894815
GPR[EPVAP]-1659842895915
GPR[EPVS]-1659842895915
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842895917
GPR[SPVAP]-1659842895917
GPR[EPVAP]-1659842897023
GPR[EPVS]-1659842897023
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842897026
GPR[SPVAP]-1659842897026
GPR[EPVAP]-1659842898145
GPR[EPVS]-1659842898145
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842898147
GPR[SPVAP]-1659842898147
GPR[EPVAP]-1659842899265
GPR[EPVS]-1659842899265
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842899271
GPR[SPVAP]-1659842899271
GPR[EPVAP]-1659842900379
GPR[EPVS]-1659842900379
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842900382
GPR[SPVAP]-1659842900382
GPR[EPVAP]-1659842901496
GPR[EPVS]-1659842901496
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842901498
GPR[SPVAP]-1659842901498
GPR[EPVAP]-1659842902645
GPR[EPVS]-1659842902645
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842902646
GPR[SPVAP]-1659842902646
GPR[EPVAP]-1659842903748
GPR[EPVS]-1659842903748
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842903751
GPR[SPVAP]-1659842903751
GPR[EPVAP]-1659842904881
GPR[EPVS]-1659842904881
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842904886
GPR[SPVAP]-1659842904886
GPR[EPVAP]-1659842906026
GPR[EPVS]-1659842906026
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842906027
GPR[SPVAP]-1659842906027
GPR[EPVAP]-1659842907169
GPR[EPVS]-1659842907169
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842907171
GPR[SPVAP]-1659842907171
GPR[EPVAP]-1659842908293
GPR[EPVS]-1659842908293
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842908294
GPR[SPVAP]-1659842908294
GPR[EPVAP]-1659842909427
GPR[EPVS]-1659842909427
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842909429
GPR[SPVAP]-1659842909429
GPR[EPVAP]-1659842910531
GPR[EPVS]-1659842910531
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659842910533
GPR[SPVAP]-1659842910533
GPR[EPVAP]-1659842913337
GPR[EPVS]-1659842913337
GPR[ESUN]-1659842913337
GPR[SSUN]-1659842913337
GPR[ESUN]-1659842913337
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659842914267
GPR[EFL]-1659842914269
GPR[SFP]-1659842914269
TIMEOUT : 600000
GPR[SSUN]-1659842914273
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659842916136
GPR[SPVAP]-1659842916136
GPR[EPVAP]-1659842922730
GPR[SPVATF]-1659842922730
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 0
GPR[EPVATF]-1659842924939
GPR[SPVATR]-1659842924940
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659842992173
GPR[EPVS]-1659842992173
GPR[PF]-1659842992173
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/3/patch_77908_1_ts_1659842992173.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM1623524693093065637/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/3/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/3/patch_77908_1_ts_1659842992173.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659842992184
GPR[SPVAP]-1659842992184
GPR[EPVAP]-1659842994237
GPR[SPVATF]-1659842994237
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659842996372
GPR[EPVS]-1659842996372
GPR[ESUN]-1659842996373
GPR[SSUN]-1659842996373
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659842998583
GPR[SPVAP]-1659842998583
GPR[EPVAP]-1659843005287
GPR[SPVATF]-1659843005287
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843007498
GPR[EPVS]-1659843007498
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843007499
GPR[SPVAP]-1659843007499
GPR[EPVAP]-1659843009642
GPR[SPVATF]-1659843009642
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843011782
GPR[EPVS]-1659843011782
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843011784
GPR[SPVAP]-1659843011784
GPR[EPVAP]-1659843013834
GPR[SPVATF]-1659843013834
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843015998
GPR[EPVS]-1659843015998
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843016000
GPR[SPVAP]-1659843016000
GPR[EPVAP]-1659843018058
GPR[SPVATF]-1659843018058
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843020186
GPR[EPVS]-1659843020186
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843020187
GPR[SPVAP]-1659843020187
GPR[EPVAP]-1659843022235
GPR[SPVATF]-1659843022235
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843024365
GPR[EPVS]-1659843024365
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843024366
GPR[SPVAP]-1659843024366
GPR[EPVAP]-1659843026454
GPR[SPVATF]-1659843026454
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843028625
GPR[EPVS]-1659843028625
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843028627
GPR[SPVAP]-1659843028627
GPR[EPVAP]-1659843030675
GPR[SPVATF]-1659843030675
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843032878
GPR[EPVS]-1659843032878
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843032880
GPR[SPVAP]-1659843032880
GPR[EPVAP]-1659843034933
GPR[SPVATF]-1659843034933
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843037061
GPR[EPVS]-1659843037061
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843037063
GPR[SPVAP]-1659843037063
GPR[EPVAP]-1659843039111
GPR[SPVATF]-1659843039111
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843041242
GPR[EPVS]-1659843041242
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843041243
GPR[SPVAP]-1659843041243
GPR[EPVAP]-1659843043262
GPR[SPVATF]-1659843043263
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843045420
GPR[EPVS]-1659843045420
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843045422
GPR[SPVAP]-1659843045422
GPR[EPVAP]-1659843047524
GPR[SPVATF]-1659843047524
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843049611
GPR[EPVS]-1659843049611
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843049613
GPR[SPVAP]-1659843049613
GPR[EPVAP]-1659843051695
GPR[SPVATF]-1659843051695
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843053839
GPR[EPVS]-1659843053839
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843053840
GPR[SPVAP]-1659843053840
GPR[EPVAP]-1659843057291
GPR[SPVATF]-1659843057291
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843059442
GPR[EPVS]-1659843059442
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843059444
GPR[SPVAP]-1659843059444
GPR[EPVAP]-1659843061542
GPR[SPVATF]-1659843061543
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843063750
GPR[EPVS]-1659843063750
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843063751
GPR[SPVAP]-1659843063751
GPR[EPVAP]-1659843065793
GPR[SPVATF]-1659843065793
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843067940
GPR[EPVS]-1659843067940
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843067941
GPR[SPVAP]-1659843067941
GPR[EPVAP]-1659843070001
GPR[SPVATF]-1659843070001
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843072161
GPR[EPVS]-1659843072161
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843072163
GPR[SPVAP]-1659843072163
GPR[EPVAP]-1659843074192
GPR[SPVATF]-1659843074192
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843076325
GPR[EPVS]-1659843076325
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843076326
GPR[SPVAP]-1659843076326
GPR[EPVAP]-1659843078393
GPR[SPVATF]-1659843078393
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843080510
GPR[EPVS]-1659843080510
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843080511
GPR[SPVAP]-1659843080511
GPR[EPVAP]-1659843082555
GPR[SPVATF]-1659843082555
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843084668
GPR[EPVS]-1659843084668
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843085787
GPR[SPVAP]-1659843085787
GPR[EPVAP]-1659843087841
GPR[SPVATF]-1659843087841
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843090004
GPR[EPVS]-1659843090004
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843090006
GPR[SPVAP]-1659843090006
GPR[EPVAP]-1659843092062
GPR[SPVATF]-1659843092063
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843094250
GPR[EPVS]-1659843094250
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843094251
GPR[SPVAP]-1659843094251
GPR[EPVAP]-1659843096305
GPR[SPVATF]-1659843096305
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843098449
GPR[EPVS]-1659843098449
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843098451
GPR[SPVAP]-1659843098451
GPR[EPVAP]-1659843100564
GPR[SPVATF]-1659843100564
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843102742
GPR[EPVS]-1659843102742
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843102744
GPR[SPVAP]-1659843102744
GPR[EPVAP]-1659843104826
GPR[SPVATF]-1659843104826
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843107002
GPR[EPVS]-1659843107002
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843107003
GPR[SPVAP]-1659843107003
GPR[EPVAP]-1659843109069
GPR[SPVATF]-1659843109069
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843111202
GPR[EPVS]-1659843111202
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843111204
GPR[SPVAP]-1659843111204
GPR[EPVAP]-1659843113310
GPR[SPVATF]-1659843113310
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843115446
GPR[EPVS]-1659843115446
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843115447
GPR[SPVAP]-1659843115447
GPR[EPVAP]-1659843117491
GPR[SPVATF]-1659843117491
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843119611
GPR[EPVS]-1659843119611
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843119613
GPR[SPVAP]-1659843119613
GPR[EPVAP]-1659843121684
GPR[SPVATF]-1659843121684
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843123814
GPR[EPVS]-1659843123814
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843123816
GPR[SPVAP]-1659843123816
GPR[EPVAP]-1659843125859
GPR[SPVATF]-1659843125859
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843129778
GPR[EPVS]-1659843129778
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843129780
GPR[SPVAP]-1659843129780
GPR[EPVAP]-1659843131885
GPR[SPVATF]-1659843131885
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843134001
GPR[EPVS]-1659843134001
GPR[ESUN]-1659843134003
GPR[SSUN]-1659843134003
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843140941
GPR[SPVAP]-1659843140941
GPR[EPVAP]-1659843147428
GPR[SPVATF]-1659843147428
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843149461
GPR[EPVS]-1659843149461
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659843149463
GPR[SPVAP]-1659843149463
GPR[EPVAP]-1659843150577
GPR[EPVS]-1659843150577
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843150578
GPR[SPVAP]-1659843150578
GPR[EPVAP]-1659843151681
GPR[EPVS]-1659843151681
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843151683
GPR[SPVAP]-1659843151683
GPR[EPVAP]-1659843152801
GPR[EPVS]-1659843152801
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843152803
GPR[SPVAP]-1659843152803
GPR[EPVAP]-1659843153905
GPR[EPVS]-1659843153905
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843153907
GPR[SPVAP]-1659843153907
GPR[EPVAP]-1659843155014
GPR[EPVS]-1659843155014
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843155015
GPR[SPVAP]-1659843155015
GPR[EPVAP]-1659843156150
GPR[EPVS]-1659843156150
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843156154
GPR[SPVAP]-1659843156154
GPR[EPVAP]-1659843158206
GPR[SPVATF]-1659843158206
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843160339
GPR[EPVS]-1659843160339
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843160341
GPR[SPVAP]-1659843160341
GPR[EPVAP]-1659843161440
GPR[EPVS]-1659843161440
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843161442
GPR[SPVAP]-1659843161442
GPR[EPVAP]-1659843162543
GPR[EPVS]-1659843162543
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843162546
GPR[SPVAP]-1659843162546
GPR[EPVAP]-1659843163650
GPR[EPVS]-1659843163650
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843163651
GPR[SPVAP]-1659843163651
GPR[EPVAP]-1659843164776
GPR[EPVS]-1659843164776
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843164777
GPR[SPVAP]-1659843164777
GPR[EPVAP]-1659843165881
GPR[EPVS]-1659843165881
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843165882
GPR[SPVAP]-1659843165882
GPR[EPVAP]-1659843166985
GPR[EPVS]-1659843166985
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843166986
GPR[SPVAP]-1659843166986
GPR[EPVAP]-1659843168091
GPR[EPVS]-1659843168091
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843168093
GPR[SPVAP]-1659843168093
GPR[EPVAP]-1659843169225
GPR[EPVS]-1659843169225
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843169227
GPR[SPVAP]-1659843169227
GPR[EPVAP]-1659843170337
GPR[EPVS]-1659843170337
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843170339
GPR[SPVAP]-1659843170339
GPR[EPVAP]-1659843171440
GPR[EPVS]-1659843171440
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843171442
GPR[SPVAP]-1659843171442
GPR[EPVAP]-1659843172554
GPR[EPVS]-1659843172554
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843172556
GPR[SPVAP]-1659843172556
GPR[EPVAP]-1659843173649
GPR[EPVS]-1659843173649
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843173651
GPR[SPVAP]-1659843173651
GPR[EPVAP]-1659843174761
GPR[EPVS]-1659843174761
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843174762
GPR[SPVAP]-1659843174762
GPR[EPVAP]-1659843176891
GPR[SPVATF]-1659843176891
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843178903
GPR[EPVS]-1659843178903
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659843178905
GPR[SPVAP]-1659843178905
GPR[EPVAP]-1659843180013
GPR[EPVS]-1659843180013
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843180015
GPR[SPVAP]-1659843180015
GPR[EPVAP]-1659843181120
GPR[EPVS]-1659843181120
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843181123
GPR[SPVAP]-1659843181123
GPR[EPVAP]-1659843182238
GPR[EPVS]-1659843182238
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843182240
GPR[SPVAP]-1659843182240
GPR[EPVAP]-1659843183385
GPR[EPVS]-1659843183385
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843183387
GPR[SPVAP]-1659843183387
GPR[EPVAP]-1659843184499
GPR[EPVS]-1659843184499
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843184501
GPR[SPVAP]-1659843184501
GPR[EPVAP]-1659843185616
GPR[EPVS]-1659843185616
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843185618
GPR[SPVAP]-1659843185618
GPR[EPVAP]-1659843186728
GPR[EPVS]-1659843186728
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843186729
GPR[SPVAP]-1659843186729
GPR[EPVAP]-1659843187857
GPR[EPVS]-1659843187857
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843187859
GPR[SPVAP]-1659843187859
GPR[EPVAP]-1659843188959
GPR[EPVS]-1659843188959
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843188961
GPR[SPVAP]-1659843188961
GPR[EPVAP]-1659843190080
GPR[EPVS]-1659843190080
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843190082
GPR[SPVAP]-1659843190082
GPR[EPVAP]-1659843191217
GPR[EPVS]-1659843191217
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843191219
GPR[SPVAP]-1659843191219
GPR[EPVAP]-1659843192386
GPR[EPVS]-1659843192386
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843192388
GPR[SPVAP]-1659843192388
GPR[EPVAP]-1659843194493
GPR[SPVATF]-1659843194493
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843196499
GPR[EPVS]-1659843196499
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843196502
GPR[SPVAP]-1659843196502
GPR[EPVAP]-1659843197638
GPR[EPVS]-1659843197638
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843197640
GPR[SPVAP]-1659843197640
GPR[EPVAP]-1659843198758
GPR[EPVS]-1659843198758
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843198759
GPR[SPVAP]-1659843198759
GPR[EPVAP]-1659843199862
GPR[EPVS]-1659843199862
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843199864
GPR[SPVAP]-1659843199864
GPR[EPVAP]-1659843200972
GPR[EPVS]-1659843200972
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843200974
GPR[SPVAP]-1659843200974
GPR[EPVAP]-1659843203835
GPR[EPVS]-1659843203835
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843203837
GPR[SPVAP]-1659843203837
GPR[EPVAP]-1659843204976
GPR[EPVS]-1659843204976
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843204978
GPR[SPVAP]-1659843204978
GPR[EPVAP]-1659843206127
GPR[EPVS]-1659843206127
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843206133
GPR[SPVAP]-1659843206133
GPR[EPVAP]-1659843207271
GPR[EPVS]-1659843207271
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843207274
GPR[SPVAP]-1659843207274
GPR[EPVAP]-1659843208401
GPR[EPVS]-1659843208401
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843208403
GPR[SPVAP]-1659843208403
GPR[EPVAP]-1659843209508
GPR[EPVS]-1659843209508
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843209510
GPR[SPVAP]-1659843209510
GPR[EPVAP]-1659843210624
GPR[EPVS]-1659843210624
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843210626
GPR[SPVAP]-1659843210626
GPR[EPVAP]-1659843211732
GPR[EPVS]-1659843211732
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843211734
GPR[SPVAP]-1659843211734
GPR[EPVAP]-1659843212836
GPR[EPVS]-1659843212836
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843212838
GPR[SPVAP]-1659843212838
GPR[EPVAP]-1659843213939
GPR[EPVS]-1659843213939
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843213942
GPR[SPVAP]-1659843213942
GPR[EPVAP]-1659843215114
GPR[EPVS]-1659843215114
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843215118
GPR[SPVAP]-1659843215118
GPR[EPVAP]-1659843216254
GPR[EPVS]-1659843216254
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843216255
GPR[SPVAP]-1659843216255
GPR[EPVAP]-1659843217368
GPR[EPVS]-1659843217368
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843217371
GPR[SPVAP]-1659843217371
GPR[EPVAP]-1659843218463
GPR[EPVS]-1659843218463
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843218465
GPR[SPVAP]-1659843218465
GPR[EPVAP]-1659843219570
GPR[EPVS]-1659843219570
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843219572
GPR[SPVAP]-1659843219572
GPR[EPVAP]-1659843220709
GPR[EPVS]-1659843220709
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843220711
GPR[SPVAP]-1659843220711
GPR[EPVAP]-1659843221819
GPR[EPVS]-1659843221819
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843221821
GPR[SPVAP]-1659843221821
GPR[EPVAP]-1659843222926
GPR[EPVS]-1659843222926
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843222927
GPR[SPVAP]-1659843222927
GPR[EPVAP]-1659843224033
GPR[EPVS]-1659843224033
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843224034
GPR[SPVAP]-1659843224034
GPR[EPVAP]-1659843225150
GPR[EPVS]-1659843225150
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843225152
GPR[SPVAP]-1659843225152
GPR[EPVAP]-1659843226266
GPR[EPVS]-1659843226266
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843226267
GPR[SPVAP]-1659843226267
GPR[EPVAP]-1659843227369
GPR[EPVS]-1659843227369
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843227371
GPR[SPVAP]-1659843227371
GPR[EPVAP]-1659843228481
GPR[EPVS]-1659843228481
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843228483
GPR[SPVAP]-1659843228483
GPR[EPVAP]-1659843229633
GPR[EPVS]-1659843229633
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843229636
GPR[SPVAP]-1659843229636
GPR[EPVAP]-1659843231728
GPR[SPVATF]-1659843231728
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843233756
GPR[EPVS]-1659843233756
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843233758
GPR[SPVAP]-1659843233758
GPR[EPVAP]-1659843234879
GPR[EPVS]-1659843234879
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843234882
GPR[SPVAP]-1659843234882
GPR[EPVAP]-1659843236010
GPR[EPVS]-1659843236010
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843236011
GPR[SPVAP]-1659843236011
GPR[EPVAP]-1659843237113
GPR[EPVS]-1659843237113
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843237116
GPR[SPVAP]-1659843237116
GPR[EPVAP]-1659843238231
GPR[EPVS]-1659843238231
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843238233
GPR[SPVAP]-1659843238233
GPR[EPVAP]-1659843239357
GPR[EPVS]-1659843239357
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843239360
GPR[SPVAP]-1659843239360
GPR[EPVAP]-1659843240477
GPR[EPVS]-1659843240477
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843240479
GPR[SPVAP]-1659843240479
GPR[EPVAP]-1659843241613
GPR[EPVS]-1659843241614
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843241618
GPR[SPVAP]-1659843241618
GPR[EPVAP]-1659843242742
GPR[EPVS]-1659843242742
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843242747
GPR[SPVAP]-1659843242747
GPR[EPVAP]-1659843243855
GPR[EPVS]-1659843243855
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843243858
GPR[SPVAP]-1659843243858
GPR[EPVAP]-1659843244961
GPR[EPVS]-1659843244961
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843244964
GPR[SPVAP]-1659843244964
GPR[EPVAP]-1659843246056
GPR[EPVS]-1659843246057
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843246058
GPR[SPVAP]-1659843246058
GPR[EPVAP]-1659843247195
GPR[EPVS]-1659843247195
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843247197
GPR[SPVAP]-1659843247197
GPR[EPVAP]-1659843248369
GPR[EPVS]-1659843248369
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843248373
GPR[SPVAP]-1659843248373
GPR[EPVAP]-1659843249492
GPR[EPVS]-1659843249492
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843249493
GPR[SPVAP]-1659843249493
GPR[EPVAP]-1659843250594
GPR[EPVS]-1659843250594
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843250596
GPR[SPVAP]-1659843250596
GPR[EPVAP]-1659843251732
GPR[EPVS]-1659843251732
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843251734
GPR[SPVAP]-1659843251734
GPR[EPVAP]-1659843252862
GPR[EPVS]-1659843252862
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659843252864
GPR[SPVAP]-1659843252864
GPR[EPVAP]-1659843253979
GPR[EPVS]-1659843253979
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843253982
GPR[SPVAP]-1659843253982
GPR[EPVAP]-1659843255108
GPR[EPVS]-1659843255108
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843255109
GPR[SPVAP]-1659843255109
GPR[EPVAP]-1659843256211
GPR[EPVS]-1659843256211
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843256212
GPR[SPVAP]-1659843256212
GPR[EPVAP]-1659843257317
GPR[EPVS]-1659843257317
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843257324
GPR[SPVAP]-1659843257324
GPR[EPVAP]-1659843258437
GPR[EPVS]-1659843258437
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843258441
GPR[SPVAP]-1659843258441
GPR[EPVAP]-1659843259534
GPR[EPVS]-1659843259535
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843259536
GPR[SPVAP]-1659843259536
GPR[EPVAP]-1659843260677
GPR[EPVS]-1659843260677
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843260678
GPR[SPVAP]-1659843260678
GPR[EPVAP]-1659843261795
GPR[EPVS]-1659843261795
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843261797
GPR[SPVAP]-1659843261797
GPR[EPVAP]-1659843263144
GPR[EPVS]-1659843263144
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843263152
GPR[SPVAP]-1659843263152
GPR[EPVAP]-1659843264510
GPR[EPVS]-1659843264511
GPR[ESUN]-1659843264511
GPR[SSUN]-1659843264511
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843271967
GPR[SPVAP]-1659843271967
GPR[EPVAP]-1659843280005
GPR[SPVATF]-1659843280005
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843282014
GPR[EPVS]-1659843282014
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843282015
GPR[SPVAP]-1659843282015
GPR[EPVAP]-1659843283153
GPR[EPVS]-1659843283153
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843283154
GPR[SPVAP]-1659843283154
GPR[EPVAP]-1659843284308
GPR[EPVS]-1659843284308
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843284310
GPR[SPVAP]-1659843284310
GPR[EPVAP]-1659843286356
GPR[SPVATF]-1659843286356
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843288527
GPR[EPVS]-1659843288527
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659843288528
GPR[SPVAP]-1659843288528
GPR[EPVAP]-1659843289647
GPR[EPVS]-1659843289647
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843289648
GPR[SPVAP]-1659843289648
GPR[EPVAP]-1659843290787
GPR[EPVS]-1659843290787
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843290788
GPR[SPVAP]-1659843290788
GPR[EPVAP]-1659843291948
GPR[EPVS]-1659843291948
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843291950
GPR[SPVAP]-1659843291950
GPR[EPVAP]-1659843293064
GPR[EPVS]-1659843293065
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843293067
GPR[SPVAP]-1659843293067
GPR[EPVAP]-1659843294203
GPR[EPVS]-1659843294203
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843294205
GPR[SPVAP]-1659843294205
GPR[EPVAP]-1659843295305
GPR[EPVS]-1659843295305
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843295307
GPR[SPVAP]-1659843295307
GPR[EPVAP]-1659843296445
GPR[EPVS]-1659843296445
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843296447
GPR[SPVAP]-1659843296447
GPR[EPVAP]-1659843297562
GPR[EPVS]-1659843297562
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843297563
GPR[SPVAP]-1659843297563
GPR[EPVAP]-1659843298666
GPR[EPVS]-1659843298666
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843298668
GPR[SPVAP]-1659843298668
GPR[EPVAP]-1659843299788
GPR[EPVS]-1659843299788
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843299789
GPR[SPVAP]-1659843299789
GPR[EPVAP]-1659843300917
GPR[EPVS]-1659843300917
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843300919
GPR[SPVAP]-1659843300919
GPR[EPVAP]-1659843302056
GPR[EPVS]-1659843302056
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843302058
GPR[SPVAP]-1659843302058
GPR[EPVAP]-1659843303171
GPR[EPVS]-1659843303171
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843303173
GPR[SPVAP]-1659843303173
GPR[EPVAP]-1659843304284
GPR[EPVS]-1659843304284
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843304286
GPR[SPVAP]-1659843304286
GPR[EPVAP]-1659843305393
GPR[EPVS]-1659843305393
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843305394
GPR[SPVAP]-1659843305394
GPR[EPVAP]-1659843306516
GPR[EPVS]-1659843306516
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843306517
GPR[SPVAP]-1659843306517
GPR[EPVAP]-1659843307621
GPR[EPVS]-1659843307621
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843307622
GPR[SPVAP]-1659843307622
GPR[EPVAP]-1659843308742
GPR[EPVS]-1659843308742
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843308745
GPR[SPVAP]-1659843308745
GPR[EPVAP]-1659843309865
GPR[EPVS]-1659843309865
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843309867
GPR[SPVAP]-1659843309867
GPR[EPVAP]-1659843310973
GPR[EPVS]-1659843310973
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843310974
GPR[SPVAP]-1659843310974
GPR[EPVAP]-1659843312113
GPR[EPVS]-1659843312113
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659843312116
GPR[SPVAP]-1659843312116
GPR[EPVAP]-1659843313251
GPR[EPVS]-1659843313251
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843313252
GPR[SPVAP]-1659843313252
GPR[EPVAP]-1659843314376
GPR[EPVS]-1659843314376
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843314377
GPR[SPVAP]-1659843314377
GPR[EPVAP]-1659843315518
GPR[EPVS]-1659843315518
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843315521
GPR[SPVAP]-1659843315521
GPR[EPVAP]-1659843316670
GPR[EPVS]-1659843316670
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843316673
GPR[SPVAP]-1659843316673
GPR[EPVAP]-1659843317800
GPR[EPVS]-1659843317800
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843317801
GPR[SPVAP]-1659843317801
GPR[EPVAP]-1659843318906
GPR[EPVS]-1659843318906
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843318908
GPR[SPVAP]-1659843318908
GPR[EPVAP]-1659843320016
GPR[EPVS]-1659843320016
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843320017
GPR[SPVAP]-1659843320017
GPR[EPVAP]-1659843321164
GPR[EPVS]-1659843321164
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843321166
GPR[SPVAP]-1659843321166
GPR[EPVAP]-1659843322284
GPR[EPVS]-1659843322284
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843322286
GPR[SPVAP]-1659843322286
GPR[EPVAP]-1659843323425
GPR[EPVS]-1659843323425
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843323427
GPR[SPVAP]-1659843323427
GPR[EPVAP]-1659843324529
GPR[EPVS]-1659843324529
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843324530
GPR[SPVAP]-1659843324530
GPR[EPVAP]-1659843325663
GPR[EPVS]-1659843325663
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843325665
GPR[SPVAP]-1659843325665
GPR[EPVAP]-1659843326787
GPR[EPVS]-1659843326787
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843326788
GPR[SPVAP]-1659843326788
GPR[EPVAP]-1659843327895
GPR[EPVS]-1659843327895
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843327897
GPR[SPVAP]-1659843327897
GPR[EPVAP]-1659843329036
GPR[EPVS]-1659843329036
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843329037
GPR[SPVAP]-1659843329037
GPR[EPVAP]-1659843330177
GPR[EPVS]-1659843330177
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843330178
GPR[SPVAP]-1659843330178
GPR[EPVAP]-1659843331292
GPR[EPVS]-1659843331292
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843331294
GPR[SPVAP]-1659843331294
GPR[EPVAP]-1659843332401
GPR[EPVS]-1659843332401
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843332402
GPR[SPVAP]-1659843332402
GPR[EPVAP]-1659843333512
GPR[EPVS]-1659843333512
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843333514
GPR[SPVAP]-1659843333514
GPR[EPVAP]-1659843334624
GPR[EPVS]-1659843334624
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843334626
GPR[SPVAP]-1659843334626
GPR[EPVAP]-1659843335749
GPR[EPVS]-1659843335749
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843335751
GPR[SPVAP]-1659843335751
GPR[EPVAP]-1659843336859
GPR[EPVS]-1659843336859
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843336861
GPR[SPVAP]-1659843336861
GPR[EPVAP]-1659843337967
GPR[EPVS]-1659843337967
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843337972
GPR[SPVAP]-1659843337972
GPR[EPVAP]-1659843339093
GPR[EPVS]-1659843339093
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843339095
GPR[SPVAP]-1659843339095
GPR[EPVAP]-1659843340235
GPR[EPVS]-1659843340236
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843340238
GPR[SPVAP]-1659843340238
GPR[EPVAP]-1659843341367
GPR[EPVS]-1659843341367
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843341368
GPR[SPVAP]-1659843341368
GPR[EPVAP]-1659843342488
GPR[EPVS]-1659843342488
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843342491
GPR[SPVAP]-1659843342491
GPR[EPVAP]-1659843343606
GPR[EPVS]-1659843343606
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843343610
GPR[SPVAP]-1659843343610
GPR[EPVAP]-1659843344716
GPR[EPVS]-1659843344716
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843344718
GPR[SPVAP]-1659843344718
GPR[EPVAP]-1659843347038
GPR[EPVS]-1659843347038
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843347047
GPR[SPVAP]-1659843347047
GPR[EPVAP]-1659843348362
GPR[EPVS]-1659843348362
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843348364
GPR[SPVAP]-1659843348364
GPR[EPVAP]-1659843349473
GPR[EPVS]-1659843349473
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843349476
GPR[SPVAP]-1659843349476
GPR[EPVAP]-1659843350610
GPR[EPVS]-1659843350611
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843350613
GPR[SPVAP]-1659843350613
GPR[EPVAP]-1659843351731
GPR[EPVS]-1659843351731
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843351732
GPR[SPVAP]-1659843351732
GPR[EPVAP]-1659843352850
GPR[EPVS]-1659843352850
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843352852
GPR[SPVAP]-1659843352852
GPR[EPVAP]-1659843353985
GPR[EPVS]-1659843353985
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843353987
GPR[SPVAP]-1659843353987
GPR[EPVAP]-1659843355092
GPR[EPVS]-1659843355092
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843355095
GPR[SPVAP]-1659843355095
GPR[EPVAP]-1659843356207
GPR[EPVS]-1659843356207
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843356209
GPR[SPVAP]-1659843356209
GPR[EPVAP]-1659843357311
GPR[EPVS]-1659843357311
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843357313
GPR[SPVAP]-1659843357313
GPR[EPVAP]-1659843358437
GPR[EPVS]-1659843358437
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843358438
GPR[SPVAP]-1659843358439
GPR[EPVAP]-1659843359575
GPR[EPVS]-1659843359575
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843359577
GPR[SPVAP]-1659843359577
GPR[EPVAP]-1659843360678
GPR[EPVS]-1659843360678
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843360679
GPR[SPVAP]-1659843360679
GPR[EPVAP]-1659843361802
GPR[EPVS]-1659843361802
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843361804
GPR[SPVAP]-1659843361804
GPR[EPVAP]-1659843362905
GPR[EPVS]-1659843362905
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843362907
GPR[SPVAP]-1659843362907
GPR[EPVAP]-1659843364021
GPR[EPVS]-1659843364021
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843364023
GPR[SPVAP]-1659843364023
GPR[EPVAP]-1659843365132
GPR[EPVS]-1659843365132
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843365134
GPR[SPVAP]-1659843365134
GPR[EPVAP]-1659843366239
GPR[EPVS]-1659843366239
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843366240
GPR[SPVAP]-1659843366240
GPR[EPVAP]-1659843367349
GPR[EPVS]-1659843367349
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843367351
GPR[SPVAP]-1659843367351
GPR[EPVAP]-1659843368473
GPR[EPVS]-1659843368473
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843368475
GPR[SPVAP]-1659843368475
GPR[EPVAP]-1659843369593
GPR[EPVS]-1659843369593
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843369599
GPR[SPVAP]-1659843369599
GPR[EPVAP]-1659843371693
GPR[SPVATF]-1659843371693
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843373721
GPR[EPVS]-1659843373721
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843373728
GPR[SPVAP]-1659843373728
GPR[EPVAP]-1659843374865
GPR[EPVS]-1659843374865
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843374867
GPR[SPVAP]-1659843374867
GPR[EPVAP]-1659843375983
GPR[EPVS]-1659843375983
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843375984
GPR[SPVAP]-1659843375984
GPR[EPVAP]-1659843377103
GPR[EPVS]-1659843377103
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843377105
GPR[SPVAP]-1659843377105
GPR[EPVAP]-1659843378217
GPR[EPVS]-1659843378217
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843378218
GPR[SPVAP]-1659843378218
GPR[EPVAP]-1659843379335
GPR[EPVS]-1659843379335
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843379338
GPR[SPVAP]-1659843379338
GPR[EPVAP]-1659843380441
GPR[EPVS]-1659843380441
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843380443
GPR[SPVAP]-1659843380443
GPR[EPVAP]-1659843381560
GPR[EPVS]-1659843381560
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843381561
GPR[SPVAP]-1659843381561
GPR[EPVAP]-1659843382686
GPR[EPVS]-1659843382686
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843382688
GPR[SPVAP]-1659843382688
GPR[EPVAP]-1659843383796
GPR[EPVS]-1659843383796
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843383799
GPR[SPVAP]-1659843383799
GPR[EPVAP]-1659843384951
GPR[EPVS]-1659843384952
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843384954
GPR[SPVAP]-1659843384954
GPR[EPVAP]-1659843386085
GPR[EPVS]-1659843386085
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843386087
GPR[SPVAP]-1659843386087
GPR[EPVAP]-1659843387180
GPR[EPVS]-1659843387180
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843387184
GPR[SPVAP]-1659843387184
GPR[EPVAP]-1659843388289
GPR[EPVS]-1659843388289
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843388291
GPR[SPVAP]-1659843388291
GPR[EPVAP]-1659843389401
GPR[EPVS]-1659843389401
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843389403
GPR[SPVAP]-1659843389403
GPR[EPVAP]-1659843390490
GPR[EPVS]-1659843390490
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843390492
GPR[SPVAP]-1659843390492
GPR[EPVAP]-1659843391593
GPR[EPVS]-1659843391593
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843391594
GPR[SPVAP]-1659843391594
GPR[EPVAP]-1659843392703
GPR[EPVS]-1659843392703
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843392705
GPR[SPVAP]-1659843392705
GPR[EPVAP]-1659843393826
GPR[EPVS]-1659843393826
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843393829
GPR[SPVAP]-1659843393829
GPR[EPVAP]-1659843394932
GPR[EPVS]-1659843394932
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843394939
GPR[SPVAP]-1659843394939
GPR[EPVAP]-1659843396062
GPR[EPVS]-1659843396062
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843396064
GPR[SPVAP]-1659843396064
GPR[EPVAP]-1659843397172
GPR[EPVS]-1659843397172
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843397173
GPR[SPVAP]-1659843397173
GPR[EPVAP]-1659843398282
GPR[EPVS]-1659843398282
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843398285
GPR[SPVAP]-1659843398285
GPR[EPVAP]-1659843399397
GPR[EPVS]-1659843399397
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843399399
GPR[SPVAP]-1659843399399
GPR[EPVAP]-1659843400518
GPR[EPVS]-1659843400518
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843400520
GPR[SPVAP]-1659843400520
GPR[EPVAP]-1659843401639
GPR[EPVS]-1659843401639
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843401642
GPR[SPVAP]-1659843401642
GPR[EPVAP]-1659843402755
GPR[EPVS]-1659843402755
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843402758
GPR[SPVAP]-1659843402758
GPR[EPVAP]-1659843403921
GPR[EPVS]-1659843403921
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659843403924
GPR[SPVAP]-1659843403924
GPR[EPVAP]-1659843405041
GPR[EPVS]-1659843405041
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659843405042
GPR[SPVAP]-1659843405042
GPR[EPVAP]-1659843406156
GPR[EPVS]-1659843406156
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659843406158
GPR[SPVAP]-1659843406158
GPR[EPVAP]-1659843407302
GPR[EPVS]-1659843407302
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843407304
GPR[SPVAP]-1659843407304
GPR[EPVAP]-1659843408416
GPR[EPVS]-1659843408416
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843408422
GPR[SPVAP]-1659843408422
GPR[EPVAP]-1659843409548
GPR[EPVS]-1659843409548
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843409550
GPR[SPVAP]-1659843409550
GPR[EPVAP]-1659843410659
GPR[EPVS]-1659843410659
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843410662
GPR[SPVAP]-1659843410662
GPR[EPVAP]-1659843411766
GPR[EPVS]-1659843411766
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843411767
GPR[SPVAP]-1659843411767
GPR[EPVAP]-1659843412879
GPR[EPVS]-1659843412879
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843412881
GPR[SPVAP]-1659843412881
GPR[EPVAP]-1659843414013
GPR[EPVS]-1659843414013
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843414018
GPR[SPVAP]-1659843414018
GPR[EPVAP]-1659843415135
GPR[EPVS]-1659843415135
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843415137
GPR[SPVAP]-1659843415137
GPR[EPVAP]-1659843416247
GPR[EPVS]-1659843416247
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843416252
GPR[SPVAP]-1659843416252
GPR[EPVAP]-1659843417358
GPR[EPVS]-1659843417358
GPR[ESUN]-1659843417359
GPR[SSUN]-1659843417359
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659843420214
GPR[SSUN]-1659843420214
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843426817
GPR[SPVAP]-1659843426817
GPR[EPVAP]-1659843433283
GPR[SPVATF]-1659843433283
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843435324
GPR[EPVS]-1659843435324
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843435326
GPR[SPVAP]-1659843435326
GPR[EPVAP]-1659843436460
GPR[EPVS]-1659843436460
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843436463
GPR[SPVAP]-1659843436463
GPR[EPVAP]-1659843438557
GPR[SPVATF]-1659843438557
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843440676
GPR[EPVS]-1659843440676
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843440678
GPR[SPVAP]-1659843440678
GPR[EPVAP]-1659843441813
GPR[EPVS]-1659843441813
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843441815
GPR[SPVAP]-1659843441815
GPR[EPVAP]-1659843442959
GPR[EPVS]-1659843442959
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843442961
GPR[SPVAP]-1659843442961
GPR[EPVAP]-1659843444067
GPR[EPVS]-1659843444067
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843444068
GPR[SPVAP]-1659843444068
GPR[EPVAP]-1659843445174
GPR[EPVS]-1659843445174
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843445176
GPR[SPVAP]-1659843445176
GPR[EPVAP]-1659843446278
GPR[EPVS]-1659843446278
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843446280
GPR[SPVAP]-1659843446280
GPR[EPVAP]-1659843447397
GPR[EPVS]-1659843447397
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843447398
GPR[SPVAP]-1659843447398
GPR[EPVAP]-1659843448509
GPR[EPVS]-1659843448509
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843448511
GPR[SPVAP]-1659843448511
GPR[EPVAP]-1659843449644
GPR[EPVS]-1659843449645
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843449646
GPR[SPVAP]-1659843449646
GPR[EPVAP]-1659843450773
GPR[EPVS]-1659843450773
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843450775
GPR[SPVAP]-1659843450775
GPR[EPVAP]-1659843451883
GPR[EPVS]-1659843451883
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843451885
GPR[SPVAP]-1659843451885
GPR[EPVAP]-1659843452989
GPR[EPVS]-1659843452989
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843452993
GPR[SPVAP]-1659843452993
GPR[EPVAP]-1659843454116
GPR[EPVS]-1659843454116
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843454118
GPR[SPVAP]-1659843454118
GPR[EPVAP]-1659843455242
GPR[EPVS]-1659843455242
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843455244
GPR[SPVAP]-1659843455244
GPR[EPVAP]-1659843456338
GPR[EPVS]-1659843456338
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843456340
GPR[SPVAP]-1659843456340
GPR[EPVAP]-1659843457442
GPR[EPVS]-1659843457442
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843457444
GPR[SPVAP]-1659843457444
GPR[EPVAP]-1659843458551
GPR[EPVS]-1659843458551
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843458553
GPR[SPVAP]-1659843458553
GPR[EPVAP]-1659843459669
GPR[EPVS]-1659843459669
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843459671
GPR[SPVAP]-1659843459671
GPR[EPVAP]-1659843460781
GPR[EPVS]-1659843460781
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843460782
GPR[SPVAP]-1659843460782
GPR[EPVAP]-1659843461893
GPR[EPVS]-1659843461893
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843461895
GPR[SPVAP]-1659843461895
GPR[EPVAP]-1659843463005
GPR[EPVS]-1659843463005
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843463007
GPR[SPVAP]-1659843463007
GPR[EPVAP]-1659843464120
GPR[EPVS]-1659843464120
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843464122
GPR[SPVAP]-1659843464122
GPR[EPVAP]-1659843465242
GPR[EPVS]-1659843465242
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843465244
GPR[SPVAP]-1659843465244
GPR[EPVAP]-1659843466358
GPR[EPVS]-1659843466358
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843466360
GPR[SPVAP]-1659843466360
GPR[EPVAP]-1659843467471
GPR[EPVS]-1659843467471
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843467473
GPR[SPVAP]-1659843467473
GPR[EPVAP]-1659843468589
GPR[EPVS]-1659843468589
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843468591
GPR[SPVAP]-1659843468591
GPR[EPVAP]-1659843469695
GPR[EPVS]-1659843469695
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843469697
GPR[SPVAP]-1659843469697
GPR[EPVAP]-1659843470803
GPR[EPVS]-1659843470803
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843470805
GPR[SPVAP]-1659843470805
GPR[EPVAP]-1659843471913
GPR[EPVS]-1659843471913
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843471914
GPR[SPVAP]-1659843471914
GPR[EPVAP]-1659843473018
GPR[EPVS]-1659843473018
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843473019
GPR[SPVAP]-1659843473019
GPR[EPVAP]-1659843474123
GPR[EPVS]-1659843474124
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843474126
GPR[SPVAP]-1659843474126
GPR[EPVAP]-1659843475230
GPR[EPVS]-1659843475230
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843475231
GPR[SPVAP]-1659843475231
GPR[EPVAP]-1659843476337
GPR[EPVS]-1659843476337
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843476339
GPR[SPVAP]-1659843476339
GPR[EPVAP]-1659843477492
GPR[EPVS]-1659843477492
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843477494
GPR[SPVAP]-1659843477494
GPR[EPVAP]-1659843478652
GPR[EPVS]-1659843478652
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843478653
GPR[SPVAP]-1659843478653
GPR[EPVAP]-1659843479808
GPR[EPVS]-1659843479808
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843479810
GPR[SPVAP]-1659843479810
GPR[EPVAP]-1659843480948
GPR[EPVS]-1659843480948
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843480949
GPR[SPVAP]-1659843480949
GPR[EPVAP]-1659843482072
GPR[EPVS]-1659843482072
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843482074
GPR[SPVAP]-1659843482074
GPR[EPVAP]-1659843483200
GPR[EPVS]-1659843483200
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843483202
GPR[SPVAP]-1659843483202
GPR[EPVAP]-1659843484309
GPR[EPVS]-1659843484309
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843484310
GPR[SPVAP]-1659843484310
GPR[EPVAP]-1659843485415
GPR[EPVS]-1659843485415
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843485416
GPR[SPVAP]-1659843485416
GPR[EPVAP]-1659843486531
GPR[EPVS]-1659843486531
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843486532
GPR[SPVAP]-1659843486532
GPR[EPVAP]-1659843487675
GPR[EPVS]-1659843487675
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843487677
GPR[SPVAP]-1659843487677
GPR[EPVAP]-1659843488780
GPR[EPVS]-1659843488780
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843488782
GPR[SPVAP]-1659843488782
GPR[EPVAP]-1659843489916
GPR[EPVS]-1659843489916
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843489919
GPR[SPVAP]-1659843489919
GPR[EPVAP]-1659843491040
GPR[EPVS]-1659843491040
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843491042
GPR[SPVAP]-1659843491042
GPR[EPVAP]-1659843492345
GPR[EPVS]-1659843492345
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843492355
GPR[SPVAP]-1659843492355
GPR[EPVAP]-1659843494684
GPR[EPVS]-1659843494684
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843494685
GPR[SPVAP]-1659843494685
GPR[EPVAP]-1659843495824
GPR[EPVS]-1659843495824
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843495825
GPR[SPVAP]-1659843495825
GPR[EPVAP]-1659843496948
GPR[EPVS]-1659843496948
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843496951
GPR[SPVAP]-1659843496951
GPR[EPVAP]-1659843498064
GPR[EPVS]-1659843498064
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843498066
GPR[SPVAP]-1659843498066
GPR[EPVAP]-1659843499181
GPR[EPVS]-1659843499181
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843499185
GPR[SPVAP]-1659843499185
GPR[EPVAP]-1659843500284
GPR[EPVS]-1659843500284
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843500288
GPR[SPVAP]-1659843500288
GPR[EPVAP]-1659843501395
GPR[EPVS]-1659843501395
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843501399
GPR[SPVAP]-1659843501399
GPR[EPVAP]-1659843502520
GPR[EPVS]-1659843502520
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843502522
GPR[SPVAP]-1659843502522
GPR[EPVAP]-1659843503645
GPR[EPVS]-1659843503645
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843503648
GPR[SPVAP]-1659843503648
GPR[EPVAP]-1659843504777
GPR[EPVS]-1659843504777
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843504782
GPR[SPVAP]-1659843504782
GPR[EPVAP]-1659843505909
GPR[EPVS]-1659843505909
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843505910
GPR[SPVAP]-1659843505910
GPR[EPVAP]-1659843507019
GPR[EPVS]-1659843507019
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843507021
GPR[SPVAP]-1659843507021
GPR[EPVAP]-1659843508135
GPR[EPVS]-1659843508135
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843508137
GPR[SPVAP]-1659843508137
GPR[EPVAP]-1659843509237
GPR[EPVS]-1659843509237
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843509239
GPR[SPVAP]-1659843509239
GPR[EPVAP]-1659843510366
GPR[EPVS]-1659843510366
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843510368
GPR[SPVAP]-1659843510368
GPR[EPVAP]-1659843511467
GPR[EPVS]-1659843511467
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843511468
GPR[SPVAP]-1659843511468
GPR[EPVAP]-1659843512613
GPR[EPVS]-1659843512613
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843512615
GPR[SPVAP]-1659843512615
GPR[EPVAP]-1659843513740
GPR[EPVS]-1659843513740
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659843513743
GPR[SPVAP]-1659843513743
GPR[EPVAP]-1659843514865
GPR[EPVS]-1659843514865
Timeout!
MM Purify? true
GPR[SFL]-1659843515830
GPR[EFL]-1659843515833
GPR[SFP]-1659843515833
TIMEOUT : 600000
GPR[SSUN]-1659843515838
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659843517732
GPR[SPVAP]-1659843517732
GPR[EPVAP]-1659843524225
GPR[SPVATF]-1659843524225
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 0
GPR[EPVATF]-1659843526681
GPR[SPVATR]-1659843526682
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659843594019
GPR[EPVS]-1659843594019
GPR[PF]-1659843594019
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/4/patch_78190_1_ts_1659843594019.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM7846106455216221486/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/4/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/4/patch_78190_1_ts_1659843594019.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659843594029
GPR[SPVAP]-1659843594029
GPR[EPVAP]-1659843596019
GPR[SPVATF]-1659843596019
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843598309
GPR[EPVS]-1659843598309
GPR[ESUN]-1659843598309
GPR[SSUN]-1659843598309
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843600588
GPR[SPVAP]-1659843600588
GPR[EPVAP]-1659843607044
GPR[SPVATF]-1659843607044
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843609361
GPR[EPVS]-1659843609361
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843609363
GPR[SPVAP]-1659843609363
GPR[EPVAP]-1659843611472
GPR[SPVATF]-1659843611472
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843613779
GPR[EPVS]-1659843613779
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843613780
GPR[SPVAP]-1659843613780
GPR[EPVAP]-1659843615852
GPR[SPVATF]-1659843615852
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843618149
GPR[EPVS]-1659843618149
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843618150
GPR[SPVAP]-1659843618150
GPR[EPVAP]-1659843620231
GPR[SPVATF]-1659843620231
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843622512
GPR[EPVS]-1659843622512
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843622514
GPR[SPVAP]-1659843622514
GPR[EPVAP]-1659843624577
GPR[SPVATF]-1659843624577
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843626894
GPR[EPVS]-1659843626894
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843626895
GPR[SPVAP]-1659843626895
GPR[EPVAP]-1659843628957
GPR[SPVATF]-1659843628957
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843631253
GPR[EPVS]-1659843631253
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843631255
GPR[SPVAP]-1659843631255
GPR[EPVAP]-1659843633293
GPR[SPVATF]-1659843633293
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843635588
GPR[EPVS]-1659843635588
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843635590
GPR[SPVAP]-1659843635590
GPR[EPVAP]-1659843638906
GPR[SPVATF]-1659843638906
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843641245
GPR[EPVS]-1659843641245
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843641247
GPR[SPVAP]-1659843641247
GPR[EPVAP]-1659843643294
GPR[SPVATF]-1659843643294
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843645574
GPR[EPVS]-1659843645574
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843645575
GPR[SPVAP]-1659843645575
GPR[EPVAP]-1659843647634
GPR[SPVATF]-1659843647634
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843649921
GPR[EPVS]-1659843649921
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843649924
GPR[SPVAP]-1659843649924
GPR[EPVAP]-1659843651966
GPR[SPVATF]-1659843651966
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843654310
GPR[EPVS]-1659843654310
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843654313
GPR[SPVAP]-1659843654313
GPR[EPVAP]-1659843656384
GPR[SPVATF]-1659843656384
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843658706
GPR[EPVS]-1659843658706
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843658708
GPR[SPVAP]-1659843658708
GPR[EPVAP]-1659843660750
GPR[SPVATF]-1659843660750
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843663141
GPR[EPVS]-1659843663141
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843663143
GPR[SPVAP]-1659843663143
GPR[EPVAP]-1659843665196
GPR[SPVATF]-1659843665196
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843667480
GPR[EPVS]-1659843667480
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843667482
GPR[SPVAP]-1659843667482
GPR[EPVAP]-1659843669544
GPR[SPVATF]-1659843669544
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843671851
GPR[EPVS]-1659843671851
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843671853
GPR[SPVAP]-1659843671853
GPR[EPVAP]-1659843673897
GPR[SPVATF]-1659843673897
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843676245
GPR[EPVS]-1659843676245
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843676247
GPR[SPVAP]-1659843676247
GPR[EPVAP]-1659843678289
GPR[SPVATF]-1659843678289
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843680665
GPR[EPVS]-1659843680665
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843680667
GPR[SPVAP]-1659843680667
GPR[EPVAP]-1659843682717
GPR[SPVATF]-1659843682717
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843685079
GPR[EPVS]-1659843685079
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843685081
GPR[SPVAP]-1659843685081
GPR[EPVAP]-1659843687157
GPR[SPVATF]-1659843687157
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843689452
GPR[EPVS]-1659843689452
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843689454
GPR[SPVAP]-1659843689454
GPR[EPVAP]-1659843691507
GPR[SPVATF]-1659843691507
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843693826
GPR[EPVS]-1659843693826
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843693828
GPR[SPVAP]-1659843693828
GPR[EPVAP]-1659843695877
GPR[SPVATF]-1659843695877
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843698209
GPR[EPVS]-1659843698209
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843698210
GPR[SPVAP]-1659843698210
GPR[EPVAP]-1659843700253
GPR[SPVATF]-1659843700253
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843702590
GPR[EPVS]-1659843702590
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843702591
GPR[SPVAP]-1659843702591
GPR[EPVAP]-1659843704673
GPR[SPVATF]-1659843704673
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843706978
GPR[EPVS]-1659843706978
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843706979
GPR[SPVAP]-1659843706979
GPR[EPVAP]-1659843711106
GPR[SPVATF]-1659843711106
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843713403
GPR[EPVS]-1659843713403
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843713404
GPR[SPVAP]-1659843713405
GPR[EPVAP]-1659843715485
GPR[SPVATF]-1659843715485
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843717799
GPR[EPVS]-1659843717799
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659843717800
GPR[SPVAP]-1659843717800
GPR[EPVAP]-1659843719851
GPR[SPVATF]-1659843719851
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843722171
GPR[EPVS]-1659843722171
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843722172
GPR[SPVAP]-1659843722172
GPR[EPVAP]-1659843724245
GPR[SPVATF]-1659843724245
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843726523
GPR[EPVS]-1659843726523
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843726524
GPR[SPVAP]-1659843726524
GPR[EPVAP]-1659843728584
GPR[SPVATF]-1659843728584
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843730900
GPR[EPVS]-1659843730900
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843730901
GPR[SPVAP]-1659843730901
GPR[EPVAP]-1659843732966
GPR[SPVATF]-1659843732966
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843735286
GPR[EPVS]-1659843735286
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659843735288
GPR[SPVAP]-1659843735288
GPR[EPVAP]-1659843737397
GPR[SPVATF]-1659843737397
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843739715
GPR[EPVS]-1659843739715
GPR[ESUN]-1659843739716
GPR[SSUN]-1659843739716
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843746800
GPR[SPVAP]-1659843746800
GPR[EPVAP]-1659843753231
GPR[SPVATF]-1659843753231
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843755249
GPR[EPVS]-1659843755249
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659843755251
GPR[SPVAP]-1659843755251
GPR[EPVAP]-1659843756396
GPR[EPVS]-1659843756396
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843756398
GPR[SPVAP]-1659843756398
GPR[EPVAP]-1659843757546
GPR[EPVS]-1659843757546
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843757549
GPR[SPVAP]-1659843757549
GPR[EPVAP]-1659843758660
GPR[EPVS]-1659843758661
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843758663
GPR[SPVAP]-1659843758663
GPR[EPVAP]-1659843759799
GPR[EPVS]-1659843759799
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843759800
GPR[SPVAP]-1659843759800
GPR[EPVAP]-1659843760926
GPR[EPVS]-1659843760926
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843760928
GPR[SPVAP]-1659843760928
GPR[EPVAP]-1659843762071
GPR[EPVS]-1659843762071
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843762075
GPR[SPVAP]-1659843762075
GPR[EPVAP]-1659843764151
GPR[SPVATF]-1659843764151
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843766454
GPR[EPVS]-1659843766454
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843766456
GPR[SPVAP]-1659843766456
GPR[EPVAP]-1659843767568
GPR[EPVS]-1659843767568
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843767570
GPR[SPVAP]-1659843767570
GPR[EPVAP]-1659843768676
GPR[EPVS]-1659843768676
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843768678
GPR[SPVAP]-1659843768678
GPR[EPVAP]-1659843769793
GPR[EPVS]-1659843769793
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843769794
GPR[SPVAP]-1659843769794
GPR[EPVAP]-1659843770896
GPR[EPVS]-1659843770896
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843770898
GPR[SPVAP]-1659843770898
GPR[EPVAP]-1659843772025
GPR[EPVS]-1659843772025
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843772026
GPR[SPVAP]-1659843772026
GPR[EPVAP]-1659843773120
GPR[EPVS]-1659843773120
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843773121
GPR[SPVAP]-1659843773121
GPR[EPVAP]-1659843774271
GPR[EPVS]-1659843774271
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843774272
GPR[SPVAP]-1659843774273
GPR[EPVAP]-1659843775437
GPR[EPVS]-1659843775437
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843775439
GPR[SPVAP]-1659843775439
GPR[EPVAP]-1659843776552
GPR[EPVS]-1659843776552
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843776554
GPR[SPVAP]-1659843776554
GPR[EPVAP]-1659843777668
GPR[EPVS]-1659843777668
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843777670
GPR[SPVAP]-1659843777670
GPR[EPVAP]-1659843778777
GPR[EPVS]-1659843778777
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843778779
GPR[SPVAP]-1659843778779
GPR[EPVAP]-1659843779897
GPR[EPVS]-1659843779897
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843779899
GPR[SPVAP]-1659843779899
GPR[EPVAP]-1659843781017
GPR[EPVS]-1659843781017
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843781019
GPR[SPVAP]-1659843781019
GPR[EPVAP]-1659843783974
GPR[SPVATF]-1659843783974
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843786608
GPR[EPVS]-1659843786608
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659843786610
GPR[SPVAP]-1659843786610
GPR[EPVAP]-1659843787746
GPR[EPVS]-1659843787746
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843787748
GPR[SPVAP]-1659843787748
GPR[EPVAP]-1659843788855
GPR[EPVS]-1659843788855
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843788858
GPR[SPVAP]-1659843788858
GPR[EPVAP]-1659843789972
GPR[EPVS]-1659843789972
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843789974
GPR[SPVAP]-1659843789974
GPR[EPVAP]-1659843791137
GPR[EPVS]-1659843791137
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843791140
GPR[SPVAP]-1659843791140
GPR[EPVAP]-1659843792256
GPR[EPVS]-1659843792256
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843792258
GPR[SPVAP]-1659843792258
GPR[EPVAP]-1659843793353
GPR[EPVS]-1659843793353
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843793355
GPR[SPVAP]-1659843793355
GPR[EPVAP]-1659843794493
GPR[EPVS]-1659843794493
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843794494
GPR[SPVAP]-1659843794494
GPR[EPVAP]-1659843795602
GPR[EPVS]-1659843795602
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843795604
GPR[SPVAP]-1659843795604
GPR[EPVAP]-1659843796728
GPR[EPVS]-1659843796728
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843796730
GPR[SPVAP]-1659843796730
GPR[EPVAP]-1659843797841
GPR[EPVS]-1659843797841
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843797843
GPR[SPVAP]-1659843797843
GPR[EPVAP]-1659843798964
GPR[EPVS]-1659843798964
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843798966
GPR[SPVAP]-1659843798966
GPR[EPVAP]-1659843800093
GPR[EPVS]-1659843800093
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843800094
GPR[SPVAP]-1659843800094
GPR[EPVAP]-1659843802253
GPR[SPVATF]-1659843802253
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843804377
GPR[EPVS]-1659843804377
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843804379
GPR[SPVAP]-1659843804379
GPR[EPVAP]-1659843805491
GPR[EPVS]-1659843805491
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843805493
GPR[SPVAP]-1659843805493
GPR[EPVAP]-1659843806637
GPR[EPVS]-1659843806637
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843806639
GPR[SPVAP]-1659843806639
GPR[EPVAP]-1659843807749
GPR[EPVS]-1659843807749
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843807750
GPR[SPVAP]-1659843807750
GPR[EPVAP]-1659843808864
GPR[EPVS]-1659843808864
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843808866
GPR[SPVAP]-1659843808866
GPR[EPVAP]-1659843810052
GPR[EPVS]-1659843810052
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843810054
GPR[SPVAP]-1659843810054
GPR[EPVAP]-1659843811153
GPR[EPVS]-1659843811153
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843811155
GPR[SPVAP]-1659843811155
GPR[EPVAP]-1659843812255
GPR[EPVS]-1659843812255
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843812258
GPR[SPVAP]-1659843812258
GPR[EPVAP]-1659843813369
GPR[EPVS]-1659843813369
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843813371
GPR[SPVAP]-1659843813371
GPR[EPVAP]-1659843814486
GPR[EPVS]-1659843814486
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843814489
GPR[SPVAP]-1659843814489
GPR[EPVAP]-1659843815643
GPR[EPVS]-1659843815643
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843815645
GPR[SPVAP]-1659843815645
GPR[EPVAP]-1659843816764
GPR[EPVS]-1659843816764
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843816765
GPR[SPVAP]-1659843816765
GPR[EPVAP]-1659843817874
GPR[EPVS]-1659843817874
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843817950
GPR[SPVAP]-1659843817950
GPR[EPVAP]-1659843819055
GPR[EPVS]-1659843819055
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843819056
GPR[SPVAP]-1659843819056
GPR[EPVAP]-1659843820164
GPR[EPVS]-1659843820164
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843820167
GPR[SPVAP]-1659843820167
GPR[EPVAP]-1659843821278
GPR[EPVS]-1659843821278
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843821282
GPR[SPVAP]-1659843821282
GPR[EPVAP]-1659843822383
GPR[EPVS]-1659843822383
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843822385
GPR[SPVAP]-1659843822385
GPR[EPVAP]-1659843823488
GPR[EPVS]-1659843823488
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843823491
GPR[SPVAP]-1659843823491
GPR[EPVAP]-1659843824609
GPR[EPVS]-1659843824609
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843824611
GPR[SPVAP]-1659843824611
GPR[EPVAP]-1659843825724
GPR[EPVS]-1659843825724
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843825726
GPR[SPVAP]-1659843825726
GPR[EPVAP]-1659843826849
GPR[EPVS]-1659843826849
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843826851
GPR[SPVAP]-1659843826851
GPR[EPVAP]-1659843827955
GPR[EPVS]-1659843827955
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843827956
GPR[SPVAP]-1659843827956
GPR[EPVAP]-1659843829145
GPR[EPVS]-1659843829145
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843829146
GPR[SPVAP]-1659843829146
GPR[EPVAP]-1659843830281
GPR[EPVS]-1659843830281
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843830283
GPR[SPVAP]-1659843830283
GPR[EPVAP]-1659843831381
GPR[EPVS]-1659843831381
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843831383
GPR[SPVAP]-1659843831383
GPR[EPVAP]-1659843832499
GPR[EPVS]-1659843832499
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843832500
GPR[SPVAP]-1659843832500
GPR[EPVAP]-1659843833607
GPR[EPVS]-1659843833607
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843833609
GPR[SPVAP]-1659843833609
GPR[EPVAP]-1659843834710
GPR[EPVS]-1659843834710
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843834712
GPR[SPVAP]-1659843834712
GPR[EPVAP]-1659843835843
GPR[EPVS]-1659843835843
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843835846
GPR[SPVAP]-1659843835846
GPR[EPVAP]-1659843837892
GPR[SPVATF]-1659843837892
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843839900
GPR[EPVS]-1659843839900
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843839902
GPR[SPVAP]-1659843839902
GPR[EPVAP]-1659843841009
GPR[EPVS]-1659843841009
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843841011
GPR[SPVAP]-1659843841011
GPR[EPVAP]-1659843842143
GPR[EPVS]-1659843842143
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843842145
GPR[SPVAP]-1659843842145
GPR[EPVAP]-1659843843244
GPR[EPVS]-1659843843244
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843843247
GPR[SPVAP]-1659843843247
GPR[EPVAP]-1659843844390
GPR[EPVS]-1659843844390
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843844393
GPR[SPVAP]-1659843844393
GPR[EPVAP]-1659843845498
GPR[EPVS]-1659843845498
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843845500
GPR[SPVAP]-1659843845500
GPR[EPVAP]-1659843846579
GPR[EPVS]-1659843846579
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843846581
GPR[SPVAP]-1659843846581
GPR[EPVAP]-1659843847743
GPR[EPVS]-1659843847743
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843847747
GPR[SPVAP]-1659843847747
GPR[EPVAP]-1659843848875
GPR[EPVS]-1659843848875
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843848881
GPR[SPVAP]-1659843848881
GPR[EPVAP]-1659843849995
GPR[EPVS]-1659843849995
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843849998
GPR[SPVAP]-1659843849998
GPR[EPVAP]-1659843851100
GPR[EPVS]-1659843851100
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843851102
GPR[SPVAP]-1659843851103
GPR[EPVAP]-1659843852243
GPR[EPVS]-1659843852243
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843852244
GPR[SPVAP]-1659843852244
GPR[EPVAP]-1659843853344
GPR[EPVS]-1659843853344
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843853346
GPR[SPVAP]-1659843853346
GPR[EPVAP]-1659843854461
GPR[EPVS]-1659843854461
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843854466
GPR[SPVAP]-1659843854466
GPR[EPVAP]-1659843857325
GPR[EPVS]-1659843857325
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843857338
GPR[SPVAP]-1659843857338
GPR[EPVAP]-1659843858551
GPR[EPVS]-1659843858551
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843858553
GPR[SPVAP]-1659843858553
GPR[EPVAP]-1659843859663
GPR[EPVS]-1659843859663
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843859665
GPR[SPVAP]-1659843859665
GPR[EPVAP]-1659843860777
GPR[EPVS]-1659843860777
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659843860779
GPR[SPVAP]-1659843860779
GPR[EPVAP]-1659843861916
GPR[EPVS]-1659843861916
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843861918
GPR[SPVAP]-1659843861918
GPR[EPVAP]-1659843863034
GPR[EPVS]-1659843863034
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843863036
GPR[SPVAP]-1659843863036
GPR[EPVAP]-1659843864156
GPR[EPVS]-1659843864156
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843864158
GPR[SPVAP]-1659843864158
GPR[EPVAP]-1659843865265
GPR[EPVS]-1659843865265
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843865271
GPR[SPVAP]-1659843865271
GPR[EPVAP]-1659843866380
GPR[EPVS]-1659843866380
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843866385
GPR[SPVAP]-1659843866385
GPR[EPVAP]-1659843867489
GPR[EPVS]-1659843867489
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843867490
GPR[SPVAP]-1659843867490
GPR[EPVAP]-1659843868596
GPR[EPVS]-1659843868596
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843868598
GPR[SPVAP]-1659843868598
GPR[EPVAP]-1659843869683
GPR[EPVS]-1659843869683
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843869686
GPR[SPVAP]-1659843869686
GPR[EPVAP]-1659843870794
GPR[EPVS]-1659843870794
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843870801
GPR[SPVAP]-1659843870801
GPR[EPVAP]-1659843871908
GPR[EPVS]-1659843871908
GPR[ESUN]-1659843871908
GPR[SSUN]-1659843871908
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843878610
GPR[SPVAP]-1659843878610
GPR[EPVAP]-1659843885122
GPR[SPVATF]-1659843885122
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843887154
GPR[EPVS]-1659843887154
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843887155
GPR[SPVAP]-1659843887155
GPR[EPVAP]-1659843888414
GPR[EPVS]-1659843888414
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843888415
GPR[SPVAP]-1659843888415
GPR[EPVAP]-1659843889524
GPR[EPVS]-1659843889524
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843889526
GPR[SPVAP]-1659843889526
GPR[EPVAP]-1659843891583
GPR[SPVATF]-1659843891583
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843893946
GPR[EPVS]-1659843893946
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659843893948
GPR[SPVAP]-1659843893948
GPR[EPVAP]-1659843895068
GPR[EPVS]-1659843895068
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843895069
GPR[SPVAP]-1659843895069
GPR[EPVAP]-1659843896212
GPR[EPVS]-1659843896212
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843896213
GPR[SPVAP]-1659843896213
GPR[EPVAP]-1659843897346
GPR[EPVS]-1659843897346
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843897348
GPR[SPVAP]-1659843897348
GPR[EPVAP]-1659843898494
GPR[EPVS]-1659843898494
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843898497
GPR[SPVAP]-1659843898497
GPR[EPVAP]-1659843899622
GPR[EPVS]-1659843899622
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843899623
GPR[SPVAP]-1659843899623
GPR[EPVAP]-1659843900725
GPR[EPVS]-1659843900725
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843900726
GPR[SPVAP]-1659843900726
GPR[EPVAP]-1659843901841
GPR[EPVS]-1659843901842
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843901843
GPR[SPVAP]-1659843901843
GPR[EPVAP]-1659843902975
GPR[EPVS]-1659843902975
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843902977
GPR[SPVAP]-1659843902977
GPR[EPVAP]-1659843904091
GPR[EPVS]-1659843904091
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843904093
GPR[SPVAP]-1659843904093
GPR[EPVAP]-1659843905213
GPR[EPVS]-1659843905213
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843905214
GPR[SPVAP]-1659843905214
GPR[EPVAP]-1659843906344
GPR[EPVS]-1659843906344
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843906345
GPR[SPVAP]-1659843906345
GPR[EPVAP]-1659843907471
GPR[EPVS]-1659843907471
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843907473
GPR[SPVAP]-1659843907473
GPR[EPVAP]-1659843908579
GPR[EPVS]-1659843908579
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843908580
GPR[SPVAP]-1659843908580
GPR[EPVAP]-1659843909711
GPR[EPVS]-1659843909711
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843909713
GPR[SPVAP]-1659843909713
GPR[EPVAP]-1659843910820
GPR[EPVS]-1659843910820
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843910822
GPR[SPVAP]-1659843910822
GPR[EPVAP]-1659843911938
GPR[EPVS]-1659843911938
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843911940
GPR[SPVAP]-1659843911940
GPR[EPVAP]-1659843913047
GPR[EPVS]-1659843913047
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843913048
GPR[SPVAP]-1659843913048
GPR[EPVAP]-1659843914163
GPR[EPVS]-1659843914163
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843914166
GPR[SPVAP]-1659843914166
GPR[EPVAP]-1659843915288
GPR[EPVS]-1659843915288
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843915290
GPR[SPVAP]-1659843915290
GPR[EPVAP]-1659843916406
GPR[EPVS]-1659843916406
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843916408
GPR[SPVAP]-1659843916408
GPR[EPVAP]-1659843917513
GPR[EPVS]-1659843917513
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659843917515
GPR[SPVAP]-1659843917515
GPR[EPVAP]-1659843918629
GPR[EPVS]-1659843918629
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843918631
GPR[SPVAP]-1659843918631
GPR[EPVAP]-1659843919746
GPR[EPVS]-1659843919746
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843919748
GPR[SPVAP]-1659843919748
GPR[EPVAP]-1659843920856
GPR[EPVS]-1659843920856
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843920858
GPR[SPVAP]-1659843920858
GPR[EPVAP]-1659843921971
GPR[EPVS]-1659843921971
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843921974
GPR[SPVAP]-1659843921974
GPR[EPVAP]-1659843923075
GPR[EPVS]-1659843923075
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843923077
GPR[SPVAP]-1659843923077
GPR[EPVAP]-1659843924174
GPR[EPVS]-1659843924174
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659843924175
GPR[SPVAP]-1659843924175
GPR[EPVAP]-1659843925282
GPR[EPVS]-1659843925282
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843925284
GPR[SPVAP]-1659843925284
GPR[EPVAP]-1659843926393
GPR[EPVS]-1659843926393
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843926395
GPR[SPVAP]-1659843926395
GPR[EPVAP]-1659843927700
GPR[EPVS]-1659843927700
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843927709
GPR[SPVAP]-1659843927709
GPR[EPVAP]-1659843930056
GPR[EPVS]-1659843930056
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843930057
GPR[SPVAP]-1659843930057
GPR[EPVAP]-1659843931203
GPR[EPVS]-1659843931203
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843931205
GPR[SPVAP]-1659843931205
GPR[EPVAP]-1659843932324
GPR[EPVS]-1659843932324
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843932326
GPR[SPVAP]-1659843932326
GPR[EPVAP]-1659843933437
GPR[EPVS]-1659843933437
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843933438
GPR[SPVAP]-1659843933438
GPR[EPVAP]-1659843934536
GPR[EPVS]-1659843934536
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843934537
GPR[SPVAP]-1659843934537
GPR[EPVAP]-1659843935684
GPR[EPVS]-1659843935684
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843935686
GPR[SPVAP]-1659843935686
GPR[EPVAP]-1659843936800
GPR[EPVS]-1659843936800
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843936801
GPR[SPVAP]-1659843936801
GPR[EPVAP]-1659843937922
GPR[EPVS]-1659843937922
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843937924
GPR[SPVAP]-1659843937924
GPR[EPVAP]-1659843939036
GPR[EPVS]-1659843939036
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843939038
GPR[SPVAP]-1659843939038
GPR[EPVAP]-1659843940143
GPR[EPVS]-1659843940143
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843940144
GPR[SPVAP]-1659843940144
GPR[EPVAP]-1659843941285
GPR[EPVS]-1659843941285
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843941286
GPR[SPVAP]-1659843941286
GPR[EPVAP]-1659843942406
GPR[EPVS]-1659843942407
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843942408
GPR[SPVAP]-1659843942408
GPR[EPVAP]-1659843943531
GPR[EPVS]-1659843943531
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843943533
GPR[SPVAP]-1659843943533
GPR[EPVAP]-1659843944649
GPR[EPVS]-1659843944649
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843944654
GPR[SPVAP]-1659843944654
GPR[EPVAP]-1659843945772
GPR[EPVS]-1659843945772
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843945774
GPR[SPVAP]-1659843945774
GPR[EPVAP]-1659843946911
GPR[EPVS]-1659843946911
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843946913
GPR[SPVAP]-1659843946913
GPR[EPVAP]-1659843948013
GPR[EPVS]-1659843948013
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843948014
GPR[SPVAP]-1659843948014
GPR[EPVAP]-1659843949131
GPR[EPVS]-1659843949132
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843949133
GPR[SPVAP]-1659843949133
GPR[EPVAP]-1659843950260
GPR[EPVS]-1659843950260
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843950264
GPR[SPVAP]-1659843950264
GPR[EPVAP]-1659843951390
GPR[EPVS]-1659843951390
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843951393
GPR[SPVAP]-1659843951393
GPR[EPVAP]-1659843952518
GPR[EPVS]-1659843952518
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843952519
GPR[SPVAP]-1659843952519
GPR[EPVAP]-1659843953623
GPR[EPVS]-1659843953623
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843953625
GPR[SPVAP]-1659843953625
GPR[EPVAP]-1659843954733
GPR[EPVS]-1659843954733
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843954735
GPR[SPVAP]-1659843954735
GPR[EPVAP]-1659843955849
GPR[EPVS]-1659843955849
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843955851
GPR[SPVAP]-1659843955851
GPR[EPVAP]-1659843956993
GPR[EPVS]-1659843956993
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843956994
GPR[SPVAP]-1659843956994
GPR[EPVAP]-1659843958101
GPR[EPVS]-1659843958101
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843958102
GPR[SPVAP]-1659843958102
GPR[EPVAP]-1659843959221
GPR[EPVS]-1659843959221
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843959223
GPR[SPVAP]-1659843959223
GPR[EPVAP]-1659843960367
GPR[EPVS]-1659843960367
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843960370
GPR[SPVAP]-1659843960370
GPR[EPVAP]-1659843961499
GPR[EPVS]-1659843961499
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843961500
GPR[SPVAP]-1659843961500
GPR[EPVAP]-1659843962615
GPR[EPVS]-1659843962615
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843962618
GPR[SPVAP]-1659843962618
GPR[EPVAP]-1659843963722
GPR[EPVS]-1659843963722
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843963724
GPR[SPVAP]-1659843963724
GPR[EPVAP]-1659843964857
GPR[EPVS]-1659843964857
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843964858
GPR[SPVAP]-1659843964858
GPR[EPVAP]-1659843965960
GPR[EPVS]-1659843965960
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843965963
GPR[SPVAP]-1659843965963
GPR[EPVAP]-1659843967077
GPR[EPVS]-1659843967077
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843967079
GPR[SPVAP]-1659843967079
GPR[EPVAP]-1659843968197
GPR[EPVS]-1659843968197
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843968199
GPR[SPVAP]-1659843968199
GPR[EPVAP]-1659843969308
GPR[EPVS]-1659843969308
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843969310
GPR[SPVAP]-1659843969310
GPR[EPVAP]-1659843970409
GPR[EPVS]-1659843970409
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843970411
GPR[SPVAP]-1659843970411
GPR[EPVAP]-1659843971503
GPR[EPVS]-1659843971503
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843971505
GPR[SPVAP]-1659843971505
GPR[EPVAP]-1659843972610
GPR[EPVS]-1659843972610
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843972611
GPR[SPVAP]-1659843972611
GPR[EPVAP]-1659843973710
GPR[EPVS]-1659843973710
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843973711
GPR[SPVAP]-1659843973711
GPR[EPVAP]-1659843974818
GPR[EPVS]-1659843974818
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843974820
GPR[SPVAP]-1659843974820
GPR[EPVAP]-1659843976909
GPR[SPVATF]-1659843976909
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659843978901
GPR[EPVS]-1659843978901
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843978903
GPR[SPVAP]-1659843978903
GPR[EPVAP]-1659843980034
GPR[EPVS]-1659843980034
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843980036
GPR[SPVAP]-1659843980036
GPR[EPVAP]-1659843981160
GPR[EPVS]-1659843981160
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843981161
GPR[SPVAP]-1659843981161
GPR[EPVAP]-1659843982273
GPR[EPVS]-1659843982273
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843982275
GPR[SPVAP]-1659843982275
GPR[EPVAP]-1659843983381
GPR[EPVS]-1659843983381
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843983382
GPR[SPVAP]-1659843983382
GPR[EPVAP]-1659843984482
GPR[EPVS]-1659843984482
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843984487
GPR[SPVAP]-1659843984487
GPR[EPVAP]-1659843985642
GPR[EPVS]-1659843985643
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843985644
GPR[SPVAP]-1659843985644
GPR[EPVAP]-1659843986775
GPR[EPVS]-1659843986775
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843986776
GPR[SPVAP]-1659843986776
GPR[EPVAP]-1659843987893
GPR[EPVS]-1659843987893
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843987895
GPR[SPVAP]-1659843987895
GPR[EPVAP]-1659843988997
GPR[EPVS]-1659843988997
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843989000
GPR[SPVAP]-1659843989000
GPR[EPVAP]-1659843990098
GPR[EPVS]-1659843990098
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843990101
GPR[SPVAP]-1659843990101
GPR[EPVAP]-1659843991209
GPR[EPVS]-1659843991209
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843991211
GPR[SPVAP]-1659843991211
GPR[EPVAP]-1659843992341
GPR[EPVS]-1659843992341
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843992345
GPR[SPVAP]-1659843992345
GPR[EPVAP]-1659843993459
GPR[EPVS]-1659843993459
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843993462
GPR[SPVAP]-1659843993462
GPR[EPVAP]-1659843994569
GPR[EPVS]-1659843994569
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843994571
GPR[SPVAP]-1659843994571
GPR[EPVAP]-1659843995673
GPR[EPVS]-1659843995673
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843995674
GPR[SPVAP]-1659843995674
GPR[EPVAP]-1659843996808
GPR[EPVS]-1659843996808
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843996810
GPR[SPVAP]-1659843996810
GPR[EPVAP]-1659843997924
GPR[EPVS]-1659843997924
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843997926
GPR[SPVAP]-1659843997926
GPR[EPVAP]-1659843999059
GPR[EPVS]-1659843999059
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659843999069
GPR[SPVAP]-1659843999069
GPR[EPVAP]-1659844001823
GPR[EPVS]-1659844001823
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844001825
GPR[SPVAP]-1659844001825
GPR[EPVAP]-1659844002943
GPR[EPVS]-1659844002943
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844002946
GPR[SPVAP]-1659844002946
GPR[EPVAP]-1659844004061
GPR[EPVS]-1659844004061
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844004062
GPR[SPVAP]-1659844004062
GPR[EPVAP]-1659844005166
GPR[EPVS]-1659844005166
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844005168
GPR[SPVAP]-1659844005168
GPR[EPVAP]-1659844006277
GPR[EPVS]-1659844006277
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844006279
GPR[SPVAP]-1659844006279
GPR[EPVAP]-1659844007406
GPR[EPVS]-1659844007407
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844007408
GPR[SPVAP]-1659844007408
GPR[EPVAP]-1659844008519
GPR[EPVS]-1659844008519
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844008521
GPR[SPVAP]-1659844008521
GPR[EPVAP]-1659844009645
GPR[EPVS]-1659844009645
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844009649
GPR[SPVAP]-1659844009649
GPR[EPVAP]-1659844010769
GPR[EPVS]-1659844010769
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659844010772
GPR[SPVAP]-1659844010772
GPR[EPVAP]-1659844011893
GPR[EPVS]-1659844011893
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659844011895
GPR[SPVAP]-1659844011895
GPR[EPVAP]-1659844013003
GPR[EPVS]-1659844013003
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659844013004
GPR[SPVAP]-1659844013004
GPR[EPVAP]-1659844014118
GPR[EPVS]-1659844014118
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844014120
GPR[SPVAP]-1659844014120
GPR[EPVAP]-1659844015225
GPR[EPVS]-1659844015225
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844015227
GPR[SPVAP]-1659844015227
GPR[EPVAP]-1659844016341
GPR[EPVS]-1659844016341
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844016343
GPR[SPVAP]-1659844016343
GPR[EPVAP]-1659844017439
GPR[EPVS]-1659844017439
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844017441
GPR[SPVAP]-1659844017441
GPR[EPVAP]-1659844018553
GPR[EPVS]-1659844018553
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844018554
GPR[SPVAP]-1659844018554
GPR[EPVAP]-1659844019689
GPR[EPVS]-1659844019689
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844019691
GPR[SPVAP]-1659844019691
GPR[EPVAP]-1659844020863
GPR[EPVS]-1659844020863
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844020870
GPR[SPVAP]-1659844020870
GPR[EPVAP]-1659844022005
GPR[EPVS]-1659844022005
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844022007
GPR[SPVAP]-1659844022007
GPR[EPVAP]-1659844023117
GPR[EPVS]-1659844023117
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844023121
GPR[SPVAP]-1659844023121
GPR[EPVAP]-1659844024233
GPR[EPVS]-1659844024233
GPR[ESUN]-1659844024234
GPR[SSUN]-1659844024234
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659844024871
GPR[SSUN]-1659844024871
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844031425
GPR[SPVAP]-1659844031425
GPR[EPVAP]-1659844037867
GPR[SPVATF]-1659844037867
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844039869
GPR[EPVS]-1659844039869
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844039871
GPR[SPVAP]-1659844039871
GPR[EPVAP]-1659844040995
GPR[EPVS]-1659844040995
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844040997
GPR[SPVAP]-1659844040997
GPR[EPVAP]-1659844043055
GPR[SPVATF]-1659844043055
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844045356
GPR[EPVS]-1659844045356
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844045358
GPR[SPVAP]-1659844045358
GPR[EPVAP]-1659844046479
GPR[EPVS]-1659844046479
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844046480
GPR[SPVAP]-1659844046480
GPR[EPVAP]-1659844047606
GPR[EPVS]-1659844047606
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844047608
GPR[SPVAP]-1659844047608
GPR[EPVAP]-1659844048733
GPR[EPVS]-1659844048733
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844048734
GPR[SPVAP]-1659844048734
GPR[EPVAP]-1659844049859
GPR[EPVS]-1659844049859
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844049860
GPR[SPVAP]-1659844049860
GPR[EPVAP]-1659844050998
GPR[EPVS]-1659844050998
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844051000
GPR[SPVAP]-1659844051000
GPR[EPVAP]-1659844052141
GPR[EPVS]-1659844052141
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844052143
GPR[SPVAP]-1659844052143
GPR[EPVAP]-1659844053252
GPR[EPVS]-1659844053252
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844053255
GPR[SPVAP]-1659844053255
GPR[EPVAP]-1659844054353
GPR[EPVS]-1659844054353
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844054355
GPR[SPVAP]-1659844054355
GPR[EPVAP]-1659844055479
GPR[EPVS]-1659844055479
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844055481
GPR[SPVAP]-1659844055481
GPR[EPVAP]-1659844056613
GPR[EPVS]-1659844056613
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844056614
GPR[SPVAP]-1659844056614
GPR[EPVAP]-1659844057753
GPR[EPVS]-1659844057753
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844057755
GPR[SPVAP]-1659844057755
GPR[EPVAP]-1659844058916
GPR[EPVS]-1659844058916
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844058918
GPR[SPVAP]-1659844058918
GPR[EPVAP]-1659844060048
GPR[EPVS]-1659844060048
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844060050
GPR[SPVAP]-1659844060050
GPR[EPVAP]-1659844061145
GPR[EPVS]-1659844061145
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844061147
GPR[SPVAP]-1659844061147
GPR[EPVAP]-1659844062248
GPR[EPVS]-1659844062248
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844062250
GPR[SPVAP]-1659844062250
GPR[EPVAP]-1659844063349
GPR[EPVS]-1659844063349
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844063351
GPR[SPVAP]-1659844063351
GPR[EPVAP]-1659844064473
GPR[EPVS]-1659844064473
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844064474
GPR[SPVAP]-1659844064474
GPR[EPVAP]-1659844065579
GPR[EPVS]-1659844065579
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844065581
GPR[SPVAP]-1659844065581
GPR[EPVAP]-1659844066687
GPR[EPVS]-1659844066687
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844066689
GPR[SPVAP]-1659844066689
GPR[EPVAP]-1659844067821
GPR[EPVS]-1659844067821
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844067823
GPR[SPVAP]-1659844067823
GPR[EPVAP]-1659844068930
GPR[EPVS]-1659844068930
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844068933
GPR[SPVAP]-1659844068933
GPR[EPVAP]-1659844070039
GPR[EPVS]-1659844070039
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844070042
GPR[SPVAP]-1659844070042
GPR[EPVAP]-1659844071136
GPR[EPVS]-1659844071136
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844071138
GPR[SPVAP]-1659844071138
GPR[EPVAP]-1659844072251
GPR[EPVS]-1659844072251
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844072253
GPR[SPVAP]-1659844072253
GPR[EPVAP]-1659844073379
GPR[EPVS]-1659844073379
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844073380
GPR[SPVAP]-1659844073380
GPR[EPVAP]-1659844076225
GPR[EPVS]-1659844076225
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844076227
GPR[SPVAP]-1659844076227
GPR[EPVAP]-1659844077367
GPR[EPVS]-1659844077367
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844077369
GPR[SPVAP]-1659844077369
GPR[EPVAP]-1659844078473
GPR[EPVS]-1659844078473
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844078475
GPR[SPVAP]-1659844078475
GPR[EPVAP]-1659844079592
GPR[EPVS]-1659844079592
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844079594
GPR[SPVAP]-1659844079594
GPR[EPVAP]-1659844080709
GPR[EPVS]-1659844080709
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844080711
GPR[SPVAP]-1659844080711
GPR[EPVAP]-1659844081819
GPR[EPVS]-1659844081819
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844081821
GPR[SPVAP]-1659844081821
GPR[EPVAP]-1659844082962
GPR[EPVS]-1659844082962
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844082964
GPR[SPVAP]-1659844082964
GPR[EPVAP]-1659844084100
GPR[EPVS]-1659844084100
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844084103
GPR[SPVAP]-1659844084103
GPR[EPVAP]-1659844085210
GPR[EPVS]-1659844085210
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844085212
GPR[SPVAP]-1659844085212
GPR[EPVAP]-1659844086317
GPR[EPVS]-1659844086317
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844086319
GPR[SPVAP]-1659844086319
GPR[EPVAP]-1659844087425
GPR[EPVS]-1659844087425
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844087427
GPR[SPVAP]-1659844087427
GPR[EPVAP]-1659844088543
GPR[EPVS]-1659844088543
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844088546
GPR[SPVAP]-1659844088546
GPR[EPVAP]-1659844089646
GPR[EPVS]-1659844089646
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844089648
GPR[SPVAP]-1659844089648
GPR[EPVAP]-1659844090781
GPR[EPVS]-1659844090781
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844090782
GPR[SPVAP]-1659844090782
GPR[EPVAP]-1659844091881
GPR[EPVS]-1659844091881
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844091882
GPR[SPVAP]-1659844091882
GPR[EPVAP]-1659844093005
GPR[EPVS]-1659844093005
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844093007
GPR[SPVAP]-1659844093007
GPR[EPVAP]-1659844094100
GPR[EPVS]-1659844094100
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844094102
GPR[SPVAP]-1659844094102
GPR[EPVAP]-1659844095216
GPR[EPVS]-1659844095216
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844095217
GPR[SPVAP]-1659844095217
GPR[EPVAP]-1659844096339
GPR[EPVS]-1659844096339
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844096342
GPR[SPVAP]-1659844096342
GPR[EPVAP]-1659844097473
GPR[EPVS]-1659844097473
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844097475
GPR[SPVAP]-1659844097475
GPR[EPVAP]-1659844098587
GPR[EPVS]-1659844098587
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844098589
GPR[SPVAP]-1659844098589
GPR[EPVAP]-1659844099694
GPR[EPVS]-1659844099694
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844099696
GPR[SPVAP]-1659844099696
GPR[EPVAP]-1659844100815
GPR[EPVS]-1659844100815
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844100817
GPR[SPVAP]-1659844100817
GPR[EPVAP]-1659844101920
GPR[EPVS]-1659844101920
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844101922
GPR[SPVAP]-1659844101922
GPR[EPVAP]-1659844103022
GPR[EPVS]-1659844103022
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844103023
GPR[SPVAP]-1659844103023
GPR[EPVAP]-1659844104131
GPR[EPVS]-1659844104131
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844104135
GPR[SPVAP]-1659844104135
GPR[EPVAP]-1659844105245
GPR[EPVS]-1659844105245
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844105249
GPR[SPVAP]-1659844105249
GPR[EPVAP]-1659844106352
GPR[EPVS]-1659844106352
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844106354
GPR[SPVAP]-1659844106354
GPR[EPVAP]-1659844107459
GPR[EPVS]-1659844107460
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844107461
GPR[SPVAP]-1659844107461
GPR[EPVAP]-1659844108565
GPR[EPVS]-1659844108565
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844108567
GPR[SPVAP]-1659844108567
GPR[EPVAP]-1659844109683
GPR[EPVS]-1659844109683
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844109687
GPR[SPVAP]-1659844109687
GPR[EPVAP]-1659844110802
GPR[EPVS]-1659844110802
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844110804
GPR[SPVAP]-1659844110804
GPR[EPVAP]-1659844111913
GPR[EPVS]-1659844111913
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844111915
GPR[SPVAP]-1659844111915
GPR[EPVAP]-1659844113024
GPR[EPVS]-1659844113024
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844113025
GPR[SPVAP]-1659844113025
GPR[EPVAP]-1659844114161
GPR[EPVS]-1659844114161
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844114163
GPR[SPVAP]-1659844114164
GPR[EPVAP]-1659844115273
GPR[EPVS]-1659844115273
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844115275
GPR[SPVAP]-1659844115275
GPR[EPVAP]-1659844116417
GPR[EPVS]-1659844116417
GPR[ESUN]-1659844116417
GPR[SSUN]-1659844116417
GPR[ESUN]-1659844116417
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659844117362
GPR[EFL]-1659844117365
GPR[SFP]-1659844117365
TIMEOUT : 600000
GPR[SSUN]-1659844117369
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659844119287
GPR[SPVAP]-1659844119287
GPR[EPVAP]-1659844125838
GPR[SPVATF]-1659844125838
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 0
GPR[EPVATF]-1659844127849
GPR[SPVATR]-1659844127850
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659844193734
GPR[EPVS]-1659844193734
GPR[PF]-1659844193734
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/5/patch_76373_1_ts_1659844193734.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM8388185212364382704/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/5/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/5/patch_76373_1_ts_1659844193734.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659844193744
GPR[SPVAP]-1659844193744
GPR[EPVAP]-1659844195745
GPR[SPVATF]-1659844195745
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844197758
GPR[EPVS]-1659844197758
GPR[ESUN]-1659844197758
GPR[SSUN]-1659844197758
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844200108
GPR[SPVAP]-1659844200108
GPR[EPVAP]-1659844206660
GPR[SPVATF]-1659844206660
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844208638
GPR[EPVS]-1659844208638
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844208640
GPR[SPVAP]-1659844208640
GPR[EPVAP]-1659844210737
GPR[SPVATF]-1659844210737
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844212679
GPR[EPVS]-1659844212679
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844212680
GPR[SPVAP]-1659844212680
GPR[EPVAP]-1659844214733
GPR[SPVATF]-1659844214733
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844216689
GPR[EPVS]-1659844216689
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844216690
GPR[SPVAP]-1659844216690
GPR[EPVAP]-1659844220412
GPR[SPVATF]-1659844220412
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844222350
GPR[EPVS]-1659844222350
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844222351
GPR[SPVAP]-1659844222351
GPR[EPVAP]-1659844224399
GPR[SPVATF]-1659844224399
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844226342
GPR[EPVS]-1659844226342
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844226343
GPR[SPVAP]-1659844226343
GPR[EPVAP]-1659844228474
GPR[SPVATF]-1659844228474
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844230434
GPR[EPVS]-1659844230434
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844230436
GPR[SPVAP]-1659844230436
GPR[EPVAP]-1659844232521
GPR[SPVATF]-1659844232521
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844234469
GPR[EPVS]-1659844234469
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844234471
GPR[SPVAP]-1659844234471
GPR[EPVAP]-1659844236503
GPR[SPVATF]-1659844236503
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844238437
GPR[EPVS]-1659844238437
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844238439
GPR[SPVAP]-1659844238439
GPR[EPVAP]-1659844240500
GPR[SPVATF]-1659844240501
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844242438
GPR[EPVS]-1659844242438
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844242440
GPR[SPVAP]-1659844242440
GPR[EPVAP]-1659844244496
GPR[SPVATF]-1659844244496
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844246457
GPR[EPVS]-1659844246457
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844246458
GPR[SPVAP]-1659844246458
GPR[EPVAP]-1659844248491
GPR[SPVATF]-1659844248491
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844250467
GPR[EPVS]-1659844250467
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844250468
GPR[SPVAP]-1659844250468
GPR[EPVAP]-1659844252563
GPR[SPVATF]-1659844252563
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844254538
GPR[EPVS]-1659844254538
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844254540
GPR[SPVAP]-1659844254540
GPR[EPVAP]-1659844256630
GPR[SPVATF]-1659844256630
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844258581
GPR[EPVS]-1659844258581
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844258583
GPR[SPVAP]-1659844258583
GPR[EPVAP]-1659844260625
GPR[SPVATF]-1659844260625
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844262584
GPR[EPVS]-1659844262584
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844262586
GPR[SPVAP]-1659844262586
GPR[EPVAP]-1659844264642
GPR[SPVATF]-1659844264642
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844266611
GPR[EPVS]-1659844266611
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844266612
GPR[SPVAP]-1659844266612
GPR[EPVAP]-1659844268717
GPR[SPVATF]-1659844268717
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844270690
GPR[EPVS]-1659844270690
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844270692
GPR[SPVAP]-1659844270692
GPR[EPVAP]-1659844272722
GPR[SPVATF]-1659844272722
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844274666
GPR[EPVS]-1659844274666
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844274668
GPR[SPVAP]-1659844274668
GPR[EPVAP]-1659844276750
GPR[SPVATF]-1659844276750
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844278669
GPR[EPVS]-1659844278669
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844278671
GPR[SPVAP]-1659844278671
GPR[EPVAP]-1659844280734
GPR[SPVATF]-1659844280734
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844282729
GPR[EPVS]-1659844282729
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844282730
GPR[SPVAP]-1659844282730
GPR[EPVAP]-1659844284825
GPR[SPVATF]-1659844284825
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844286805
GPR[EPVS]-1659844286805
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844286806
GPR[SPVAP]-1659844286806
GPR[EPVAP]-1659844288875
GPR[SPVATF]-1659844288875
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844292645
GPR[EPVS]-1659844292645
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844292647
GPR[SPVAP]-1659844292647
GPR[EPVAP]-1659844294684
GPR[SPVATF]-1659844294684
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844296654
GPR[EPVS]-1659844296654
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844296656
GPR[SPVAP]-1659844296656
GPR[EPVAP]-1659844298728
GPR[SPVATF]-1659844298728
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844300735
GPR[EPVS]-1659844300735
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844300737
GPR[SPVAP]-1659844300737
GPR[EPVAP]-1659844302759
GPR[SPVATF]-1659844302759
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844304742
GPR[EPVS]-1659844304742
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844304743
GPR[SPVAP]-1659844304743
GPR[EPVAP]-1659844306807
GPR[SPVATF]-1659844306807
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844308785
GPR[EPVS]-1659844308785
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844308787
GPR[SPVAP]-1659844308787
GPR[EPVAP]-1659844310844
GPR[SPVATF]-1659844310844
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844312802
GPR[EPVS]-1659844312802
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844312803
GPR[SPVAP]-1659844312803
GPR[EPVAP]-1659844314916
GPR[SPVATF]-1659844314916
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844316895
GPR[EPVS]-1659844316895
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844316897
GPR[SPVAP]-1659844316897
GPR[EPVAP]-1659844318922
GPR[SPVATF]-1659844318922
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844320858
GPR[EPVS]-1659844320858
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844320859
GPR[SPVAP]-1659844320859
GPR[EPVAP]-1659844322895
GPR[SPVATF]-1659844322895
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844324880
GPR[EPVS]-1659844324880
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844324882
GPR[SPVAP]-1659844324882
GPR[EPVAP]-1659844327043
GPR[SPVATF]-1659844327043
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844328996
GPR[EPVS]-1659844328996
GPR[ESUN]-1659844328998
GPR[SSUN]-1659844328998
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844336258
GPR[SPVAP]-1659844336258
GPR[EPVAP]-1659844342735
GPR[SPVATF]-1659844342735
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844344718
GPR[EPVS]-1659844344718
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659844344719
GPR[SPVAP]-1659844344719
GPR[EPVAP]-1659844345839
GPR[EPVS]-1659844345839
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844345841
GPR[SPVAP]-1659844345841
GPR[EPVAP]-1659844346973
GPR[EPVS]-1659844346973
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844346975
GPR[SPVAP]-1659844346975
GPR[EPVAP]-1659844348085
GPR[EPVS]-1659844348085
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844348088
GPR[SPVAP]-1659844348088
GPR[EPVAP]-1659844349197
GPR[EPVS]-1659844349197
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844349198
GPR[SPVAP]-1659844349198
GPR[EPVAP]-1659844350310
GPR[EPVS]-1659844350310
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844350312
GPR[SPVAP]-1659844350312
GPR[EPVAP]-1659844351454
GPR[EPVS]-1659844351454
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844351458
GPR[SPVAP]-1659844351458
GPR[EPVAP]-1659844353544
GPR[SPVATF]-1659844353544
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844355518
GPR[EPVS]-1659844355518
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844355519
GPR[SPVAP]-1659844355519
GPR[EPVAP]-1659844356626
GPR[EPVS]-1659844356626
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844356628
GPR[SPVAP]-1659844356628
GPR[EPVAP]-1659844357740
GPR[EPVS]-1659844357740
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844357742
GPR[SPVAP]-1659844357742
GPR[EPVAP]-1659844358856
GPR[EPVS]-1659844358856
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844358858
GPR[SPVAP]-1659844358858
GPR[EPVAP]-1659844359958
GPR[EPVS]-1659844359958
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844359960
GPR[SPVAP]-1659844359960
GPR[EPVAP]-1659844361073
GPR[EPVS]-1659844361073
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844361074
GPR[SPVAP]-1659844361074
GPR[EPVAP]-1659844362188
GPR[EPVS]-1659844362188
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844362190
GPR[SPVAP]-1659844362190
GPR[EPVAP]-1659844363309
GPR[EPVS]-1659844363309
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844363311
GPR[SPVAP]-1659844363311
GPR[EPVAP]-1659844364730
GPR[EPVS]-1659844364730
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844364740
GPR[SPVAP]-1659844364740
GPR[EPVAP]-1659844366967
GPR[EPVS]-1659844366967
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844366969
GPR[SPVAP]-1659844366969
GPR[EPVAP]-1659844368113
GPR[EPVS]-1659844368113
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844368115
GPR[SPVAP]-1659844368115
GPR[EPVAP]-1659844369233
GPR[EPVS]-1659844369233
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844369235
GPR[SPVAP]-1659844369235
GPR[EPVAP]-1659844370348
GPR[EPVS]-1659844370348
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844370350
GPR[SPVAP]-1659844370350
GPR[EPVAP]-1659844371454
GPR[EPVS]-1659844371454
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844371456
GPR[SPVAP]-1659844371456
GPR[EPVAP]-1659844373575
GPR[SPVATF]-1659844373575
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844375542
GPR[EPVS]-1659844375542
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659844375544
GPR[SPVAP]-1659844375544
GPR[EPVAP]-1659844376655
GPR[EPVS]-1659844376655
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844376657
GPR[SPVAP]-1659844376657
GPR[EPVAP]-1659844377802
GPR[EPVS]-1659844377802
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844377804
GPR[SPVAP]-1659844377804
GPR[EPVAP]-1659844378905
GPR[EPVS]-1659844378905
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844378908
GPR[SPVAP]-1659844378908
GPR[EPVAP]-1659844380040
GPR[EPVS]-1659844380041
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844380043
GPR[SPVAP]-1659844380043
GPR[EPVAP]-1659844381161
GPR[EPVS]-1659844381161
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844381163
GPR[SPVAP]-1659844381163
GPR[EPVAP]-1659844382275
GPR[EPVS]-1659844382275
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844382277
GPR[SPVAP]-1659844382277
GPR[EPVAP]-1659844383389
GPR[EPVS]-1659844383389
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844383391
GPR[SPVAP]-1659844383391
GPR[EPVAP]-1659844384494
GPR[EPVS]-1659844384494
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844384496
GPR[SPVAP]-1659844384496
GPR[EPVAP]-1659844385595
GPR[EPVS]-1659844385595
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844385596
GPR[SPVAP]-1659844385596
GPR[EPVAP]-1659844386712
GPR[EPVS]-1659844386712
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844386713
GPR[SPVAP]-1659844386713
GPR[EPVAP]-1659844387826
GPR[EPVS]-1659844387826
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844387827
GPR[SPVAP]-1659844387827
GPR[EPVAP]-1659844388973
GPR[EPVS]-1659844388973
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844388974
GPR[SPVAP]-1659844388974
GPR[EPVAP]-1659844391041
GPR[SPVATF]-1659844391041
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844393036
GPR[EPVS]-1659844393036
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844393038
GPR[SPVAP]-1659844393038
GPR[EPVAP]-1659844394174
GPR[EPVS]-1659844394174
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844394175
GPR[SPVAP]-1659844394175
GPR[EPVAP]-1659844395342
GPR[EPVS]-1659844395342
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844395343
GPR[SPVAP]-1659844395343
GPR[EPVAP]-1659844396477
GPR[EPVS]-1659844396477
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844396478
GPR[SPVAP]-1659844396478
GPR[EPVAP]-1659844397656
GPR[EPVS]-1659844397656
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844397657
GPR[SPVAP]-1659844397657
GPR[EPVAP]-1659844398774
GPR[EPVS]-1659844398774
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844398776
GPR[SPVAP]-1659844398776
GPR[EPVAP]-1659844399888
GPR[EPVS]-1659844399888
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844399889
GPR[SPVAP]-1659844399889
GPR[EPVAP]-1659844401019
GPR[EPVS]-1659844401019
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844401023
GPR[SPVAP]-1659844401023
GPR[EPVAP]-1659844402135
GPR[EPVS]-1659844402135
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844402138
GPR[SPVAP]-1659844402138
GPR[EPVAP]-1659844403248
GPR[EPVS]-1659844403248
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844403250
GPR[SPVAP]-1659844403250
GPR[EPVAP]-1659844404380
GPR[EPVS]-1659844404380
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844404381
GPR[SPVAP]-1659844404381
GPR[EPVAP]-1659844405505
GPR[EPVS]-1659844405505
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844405506
GPR[SPVAP]-1659844405506
GPR[EPVAP]-1659844406683
GPR[EPVS]-1659844406683
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844406686
GPR[SPVAP]-1659844406686
GPR[EPVAP]-1659844407800
GPR[EPVS]-1659844407800
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844407802
GPR[SPVAP]-1659844407802
GPR[EPVAP]-1659844408924
GPR[EPVS]-1659844408924
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844408928
GPR[SPVAP]-1659844408928
GPR[EPVAP]-1659844410058
GPR[EPVS]-1659844410058
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844410062
GPR[SPVAP]-1659844410062
GPR[EPVAP]-1659844411221
GPR[EPVS]-1659844411221
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844411223
GPR[SPVAP]-1659844411223
GPR[EPVAP]-1659844412341
GPR[EPVS]-1659844412341
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844412343
GPR[SPVAP]-1659844412343
GPR[EPVAP]-1659844413452
GPR[EPVS]-1659844413452
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844413455
GPR[SPVAP]-1659844413455
GPR[EPVAP]-1659844414556
GPR[EPVS]-1659844414557
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844414559
GPR[SPVAP]-1659844414559
GPR[EPVAP]-1659844415664
GPR[EPVS]-1659844415664
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844415665
GPR[SPVAP]-1659844415665
GPR[EPVAP]-1659844416787
GPR[EPVS]-1659844416787
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844416789
GPR[SPVAP]-1659844416789
GPR[EPVAP]-1659844417897
GPR[EPVS]-1659844417897
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844417898
GPR[SPVAP]-1659844417898
GPR[EPVAP]-1659844419001
GPR[EPVS]-1659844419001
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844419003
GPR[SPVAP]-1659844419003
GPR[EPVAP]-1659844420145
GPR[EPVS]-1659844420145
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844420147
GPR[SPVAP]-1659844420147
GPR[EPVAP]-1659844421261
GPR[EPVS]-1659844421261
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844421262
GPR[SPVAP]-1659844421262
GPR[EPVAP]-1659844422366
GPR[EPVS]-1659844422366
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844422368
GPR[SPVAP]-1659844422368
GPR[EPVAP]-1659844423524
GPR[EPVS]-1659844423524
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844423526
GPR[SPVAP]-1659844423526
GPR[EPVAP]-1659844424637
GPR[EPVS]-1659844424637
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844424639
GPR[SPVAP]-1659844424639
GPR[EPVAP]-1659844426689
GPR[SPVATF]-1659844426689
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844428621
GPR[EPVS]-1659844428621
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844428623
GPR[SPVAP]-1659844428623
GPR[EPVAP]-1659844429749
GPR[EPVS]-1659844429749
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844429752
GPR[SPVAP]-1659844429752
GPR[EPVAP]-1659844430887
GPR[EPVS]-1659844430887
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844430889
GPR[SPVAP]-1659844430889
GPR[EPVAP]-1659844432013
GPR[EPVS]-1659844432013
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844432016
GPR[SPVAP]-1659844432016
GPR[EPVAP]-1659844433118
GPR[EPVS]-1659844433118
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844433122
GPR[SPVAP]-1659844433122
GPR[EPVAP]-1659844434235
GPR[EPVS]-1659844434235
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844434237
GPR[SPVAP]-1659844434237
GPR[EPVAP]-1659844435350
GPR[EPVS]-1659844435350
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844435352
GPR[SPVAP]-1659844435352
GPR[EPVAP]-1659844436465
GPR[EPVS]-1659844436465
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844436470
GPR[SPVAP]-1659844436470
GPR[EPVAP]-1659844439102
GPR[EPVS]-1659844439102
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844439109
GPR[SPVAP]-1659844439109
GPR[EPVAP]-1659844440297
GPR[EPVS]-1659844440297
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844440300
GPR[SPVAP]-1659844440300
GPR[EPVAP]-1659844441422
GPR[EPVS]-1659844441422
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844441424
GPR[SPVAP]-1659844441424
GPR[EPVAP]-1659844442539
GPR[EPVS]-1659844442539
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844442541
GPR[SPVAP]-1659844442541
GPR[EPVAP]-1659844443685
GPR[EPVS]-1659844443685
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844443686
GPR[SPVAP]-1659844443686
GPR[EPVAP]-1659844444803
GPR[EPVS]-1659844444803
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844444807
GPR[SPVAP]-1659844444807
GPR[EPVAP]-1659844445921
GPR[EPVS]-1659844445921
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844445922
GPR[SPVAP]-1659844445922
GPR[EPVAP]-1659844447078
GPR[EPVS]-1659844447078
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844447080
GPR[SPVAP]-1659844447080
GPR[EPVAP]-1659844448192
GPR[EPVS]-1659844448192
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844448194
GPR[SPVAP]-1659844448194
GPR[EPVAP]-1659844449305
GPR[EPVS]-1659844449305
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659844449307
GPR[SPVAP]-1659844449307
GPR[EPVAP]-1659844450404
GPR[EPVS]-1659844450404
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844450406
GPR[SPVAP]-1659844450406
GPR[EPVAP]-1659844451534
GPR[EPVS]-1659844451535
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844451536
GPR[SPVAP]-1659844451536
GPR[EPVAP]-1659844452652
GPR[EPVS]-1659844452652
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844452654
GPR[SPVAP]-1659844452654
GPR[EPVAP]-1659844453761
GPR[EPVS]-1659844453761
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844453767
GPR[SPVAP]-1659844453767
GPR[EPVAP]-1659844454890
GPR[EPVS]-1659844454890
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844454894
GPR[SPVAP]-1659844454894
GPR[EPVAP]-1659844455997
GPR[EPVS]-1659844455997
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844455998
GPR[SPVAP]-1659844455998
GPR[EPVAP]-1659844457158
GPR[EPVS]-1659844457158
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844457160
GPR[SPVAP]-1659844457160
GPR[EPVAP]-1659844458268
GPR[EPVS]-1659844458268
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844458270
GPR[SPVAP]-1659844458270
GPR[EPVAP]-1659844459389
GPR[EPVS]-1659844459389
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844459396
GPR[SPVAP]-1659844459396
GPR[EPVAP]-1659844460511
GPR[EPVS]-1659844460511
GPR[ESUN]-1659844460511
GPR[SSUN]-1659844460511
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844467204
GPR[SPVAP]-1659844467204
GPR[EPVAP]-1659844473713
GPR[SPVATF]-1659844473713
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844475714
GPR[EPVS]-1659844475714
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844475716
GPR[SPVAP]-1659844475716
GPR[EPVAP]-1659844476825
GPR[EPVS]-1659844476825
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844476826
GPR[SPVAP]-1659844476826
GPR[EPVAP]-1659844477956
GPR[EPVS]-1659844477956
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844477958
GPR[SPVAP]-1659844477958
GPR[EPVAP]-1659844480068
GPR[SPVATF]-1659844480068
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844482072
GPR[EPVS]-1659844482072
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659844482074
GPR[SPVAP]-1659844482074
GPR[EPVAP]-1659844483241
GPR[EPVS]-1659844483241
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844483244
GPR[SPVAP]-1659844483244
GPR[EPVAP]-1659844484356
GPR[EPVS]-1659844484356
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844484357
GPR[SPVAP]-1659844484357
GPR[EPVAP]-1659844485453
GPR[EPVS]-1659844485453
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844485455
GPR[SPVAP]-1659844485455
GPR[EPVAP]-1659844486557
GPR[EPVS]-1659844486557
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844486559
GPR[SPVAP]-1659844486559
GPR[EPVAP]-1659844487660
GPR[EPVS]-1659844487660
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844487662
GPR[SPVAP]-1659844487662
GPR[EPVAP]-1659844488769
GPR[EPVS]-1659844488769
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844488771
GPR[SPVAP]-1659844488771
GPR[EPVAP]-1659844489881
GPR[EPVS]-1659844489881
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844489882
GPR[SPVAP]-1659844489882
GPR[EPVAP]-1659844490995
GPR[EPVS]-1659844490995
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844490997
GPR[SPVAP]-1659844490997
GPR[EPVAP]-1659844492125
GPR[EPVS]-1659844492125
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844492127
GPR[SPVAP]-1659844492127
GPR[EPVAP]-1659844493227
GPR[EPVS]-1659844493227
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844493228
GPR[SPVAP]-1659844493228
GPR[EPVAP]-1659844494393
GPR[EPVS]-1659844494393
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844494394
GPR[SPVAP]-1659844494394
GPR[EPVAP]-1659844495529
GPR[EPVS]-1659844495529
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844495530
GPR[SPVAP]-1659844495530
GPR[EPVAP]-1659844496649
GPR[EPVS]-1659844496649
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844496650
GPR[SPVAP]-1659844496650
GPR[EPVAP]-1659844497762
GPR[EPVS]-1659844497762
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844497763
GPR[SPVAP]-1659844497763
GPR[EPVAP]-1659844498881
GPR[EPVS]-1659844498881
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844498883
GPR[SPVAP]-1659844498883
GPR[EPVAP]-1659844499992
GPR[EPVS]-1659844499992
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844499994
GPR[SPVAP]-1659844499994
GPR[EPVAP]-1659844501168
GPR[EPVS]-1659844501168
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844501170
GPR[SPVAP]-1659844501170
GPR[EPVAP]-1659844502299
GPR[EPVS]-1659844502299
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844502302
GPR[SPVAP]-1659844502302
GPR[EPVAP]-1659844503420
GPR[EPVS]-1659844503420
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844503422
GPR[SPVAP]-1659844503422
GPR[EPVAP]-1659844504539
GPR[EPVS]-1659844504539
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844504541
GPR[SPVAP]-1659844504541
GPR[EPVAP]-1659844505652
GPR[EPVS]-1659844505652
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659844505653
GPR[SPVAP]-1659844505653
GPR[EPVAP]-1659844506807
GPR[EPVS]-1659844506807
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844506809
GPR[SPVAP]-1659844506809
GPR[EPVAP]-1659844507923
GPR[EPVS]-1659844507923
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844507924
GPR[SPVAP]-1659844507924
GPR[EPVAP]-1659844510671
GPR[EPVS]-1659844510671
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844510679
GPR[SPVAP]-1659844510679
GPR[EPVAP]-1659844511796
GPR[EPVS]-1659844511796
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844511799
GPR[SPVAP]-1659844511799
GPR[EPVAP]-1659844512903
GPR[EPVS]-1659844512903
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844512905
GPR[SPVAP]-1659844512905
GPR[EPVAP]-1659844514020
GPR[EPVS]-1659844514020
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844514022
GPR[SPVAP]-1659844514022
GPR[EPVAP]-1659844515161
GPR[EPVS]-1659844515161
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844515163
GPR[SPVAP]-1659844515163
GPR[EPVAP]-1659844516275
GPR[EPVS]-1659844516275
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844516276
GPR[SPVAP]-1659844516276
GPR[EPVAP]-1659844517396
GPR[EPVS]-1659844517396
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844517398
GPR[SPVAP]-1659844517398
GPR[EPVAP]-1659844518530
GPR[EPVS]-1659844518530
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844518531
GPR[SPVAP]-1659844518531
GPR[EPVAP]-1659844519652
GPR[EPVS]-1659844519652
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844519653
GPR[SPVAP]-1659844519653
GPR[EPVAP]-1659844520763
GPR[EPVS]-1659844520763
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844520765
GPR[SPVAP]-1659844520765
GPR[EPVAP]-1659844521887
GPR[EPVS]-1659844521887
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844521888
GPR[SPVAP]-1659844521888
GPR[EPVAP]-1659844522989
GPR[EPVS]-1659844522989
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844522991
GPR[SPVAP]-1659844522991
GPR[EPVAP]-1659844524101
GPR[EPVS]-1659844524101
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844524102
GPR[SPVAP]-1659844524102
GPR[EPVAP]-1659844525223
GPR[EPVS]-1659844525223
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844525224
GPR[SPVAP]-1659844525224
GPR[EPVAP]-1659844526334
GPR[EPVS]-1659844526334
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844526336
GPR[SPVAP]-1659844526336
GPR[EPVAP]-1659844527453
GPR[EPVS]-1659844527453
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844527454
GPR[SPVAP]-1659844527454
GPR[EPVAP]-1659844528576
GPR[EPVS]-1659844528576
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844528577
GPR[SPVAP]-1659844528577
GPR[EPVAP]-1659844529706
GPR[EPVS]-1659844529706
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844529707
GPR[SPVAP]-1659844529707
GPR[EPVAP]-1659844530810
GPR[EPVS]-1659844530811
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844530812
GPR[SPVAP]-1659844530812
GPR[EPVAP]-1659844531923
GPR[EPVS]-1659844531923
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844531925
GPR[SPVAP]-1659844531925
GPR[EPVAP]-1659844533032
GPR[EPVS]-1659844533032
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844533037
GPR[SPVAP]-1659844533037
GPR[EPVAP]-1659844534140
GPR[EPVS]-1659844534140
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844534143
GPR[SPVAP]-1659844534143
GPR[EPVAP]-1659844535256
GPR[EPVS]-1659844535256
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844535258
GPR[SPVAP]-1659844535258
GPR[EPVAP]-1659844536397
GPR[EPVS]-1659844536397
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844536398
GPR[SPVAP]-1659844536398
GPR[EPVAP]-1659844537544
GPR[EPVS]-1659844537544
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844537547
GPR[SPVAP]-1659844537547
GPR[EPVAP]-1659844538668
GPR[EPVS]-1659844538668
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844538671
GPR[SPVAP]-1659844538671
GPR[EPVAP]-1659844539777
GPR[EPVS]-1659844539777
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844539779
GPR[SPVAP]-1659844539779
GPR[EPVAP]-1659844540909
GPR[EPVS]-1659844540909
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844540911
GPR[SPVAP]-1659844540911
GPR[EPVAP]-1659844542097
GPR[EPVS]-1659844542097
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844542099
GPR[SPVAP]-1659844542099
GPR[EPVAP]-1659844543207
GPR[EPVS]-1659844543207
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844543211
GPR[SPVAP]-1659844543211
GPR[EPVAP]-1659844544319
GPR[EPVS]-1659844544319
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844544322
GPR[SPVAP]-1659844544322
GPR[EPVAP]-1659844545445
GPR[EPVS]-1659844545445
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844545446
GPR[SPVAP]-1659844545446
GPR[EPVAP]-1659844546549
GPR[EPVS]-1659844546549
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844546553
GPR[SPVAP]-1659844546553
GPR[EPVAP]-1659844547663
GPR[EPVS]-1659844547663
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844547665
GPR[SPVAP]-1659844547665
GPR[EPVAP]-1659844548773
GPR[EPVS]-1659844548773
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844548776
GPR[SPVAP]-1659844548776
GPR[EPVAP]-1659844549880
GPR[EPVS]-1659844549880
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844553339
GPR[SPVAP]-1659844553339
GPR[EPVAP]-1659844554456
GPR[EPVS]-1659844554456
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844554459
GPR[SPVAP]-1659844554459
GPR[EPVAP]-1659844555570
GPR[EPVS]-1659844555570
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844555572
GPR[SPVAP]-1659844555572
GPR[EPVAP]-1659844556669
GPR[EPVS]-1659844556669
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844556671
GPR[SPVAP]-1659844556671
GPR[EPVAP]-1659844557795
GPR[EPVS]-1659844557795
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844557797
GPR[SPVAP]-1659844557797
GPR[EPVAP]-1659844558909
GPR[EPVS]-1659844558909
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844558910
GPR[SPVAP]-1659844558910
GPR[EPVAP]-1659844560017
GPR[EPVS]-1659844560017
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844560025
GPR[SPVAP]-1659844560025
GPR[EPVAP]-1659844561138
GPR[EPVS]-1659844561138
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844561141
GPR[SPVAP]-1659844561141
GPR[EPVAP]-1659844562244
GPR[EPVS]-1659844562244
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844562245
GPR[SPVAP]-1659844562246
GPR[EPVAP]-1659844563379
GPR[EPVS]-1659844563379
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844563380
GPR[SPVAP]-1659844563380
GPR[EPVAP]-1659844564498
GPR[EPVS]-1659844564498
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844564500
GPR[SPVAP]-1659844564500
GPR[EPVAP]-1659844565612
GPR[EPVS]-1659844565612
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844565614
GPR[SPVAP]-1659844565614
GPR[EPVAP]-1659844566769
GPR[EPVS]-1659844566769
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844566771
GPR[SPVAP]-1659844566771
GPR[EPVAP]-1659844568869
GPR[SPVATF]-1659844568869
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844570822
GPR[EPVS]-1659844570822
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844570824
GPR[SPVAP]-1659844570824
GPR[EPVAP]-1659844571932
GPR[EPVS]-1659844571932
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844571934
GPR[SPVAP]-1659844571934
GPR[EPVAP]-1659844573066
GPR[EPVS]-1659844573066
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844573067
GPR[SPVAP]-1659844573067
GPR[EPVAP]-1659844574200
GPR[EPVS]-1659844574200
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844574202
GPR[SPVAP]-1659844574202
GPR[EPVAP]-1659844575313
GPR[EPVS]-1659844575313
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844575314
GPR[SPVAP]-1659844575314
GPR[EPVAP]-1659844576420
GPR[EPVS]-1659844576420
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844576422
GPR[SPVAP]-1659844576422
GPR[EPVAP]-1659844577536
GPR[EPVS]-1659844577536
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844577538
GPR[SPVAP]-1659844577538
GPR[EPVAP]-1659844578658
GPR[EPVS]-1659844578658
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844578659
GPR[SPVAP]-1659844578659
GPR[EPVAP]-1659844579811
GPR[EPVS]-1659844579811
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844579814
GPR[SPVAP]-1659844579814
GPR[EPVAP]-1659844582751
GPR[EPVS]-1659844582751
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844582763
GPR[SPVAP]-1659844582763
GPR[EPVAP]-1659844583932
GPR[EPVS]-1659844583932
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844583935
GPR[SPVAP]-1659844583935
GPR[EPVAP]-1659844585041
GPR[EPVS]-1659844585041
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844585043
GPR[SPVAP]-1659844585043
GPR[EPVAP]-1659844586160
GPR[EPVS]-1659844586160
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844586164
GPR[SPVAP]-1659844586164
GPR[EPVAP]-1659844587281
GPR[EPVS]-1659844587281
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844587283
GPR[SPVAP]-1659844587283
GPR[EPVAP]-1659844588391
GPR[EPVS]-1659844588391
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844588392
GPR[SPVAP]-1659844588392
GPR[EPVAP]-1659844589510
GPR[EPVS]-1659844589510
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844589511
GPR[SPVAP]-1659844589511
GPR[EPVAP]-1659844590623
GPR[EPVS]-1659844590623
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844590625
GPR[SPVAP]-1659844590625
GPR[EPVAP]-1659844591741
GPR[EPVS]-1659844591741
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844591743
GPR[SPVAP]-1659844591743
GPR[EPVAP]-1659844592861
GPR[EPVS]-1659844592861
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844592864
GPR[SPVAP]-1659844592864
GPR[EPVAP]-1659844593988
GPR[EPVS]-1659844593988
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844593990
GPR[SPVAP]-1659844593990
GPR[EPVAP]-1659844595096
GPR[EPVS]-1659844595096
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844595098
GPR[SPVAP]-1659844595098
GPR[EPVAP]-1659844596205
GPR[EPVS]-1659844596205
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844596207
GPR[SPVAP]-1659844596207
GPR[EPVAP]-1659844597331
GPR[EPVS]-1659844597331
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844597334
GPR[SPVAP]-1659844597334
GPR[EPVAP]-1659844598455
GPR[EPVS]-1659844598455
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844598456
GPR[SPVAP]-1659844598456
GPR[EPVAP]-1659844599572
GPR[EPVS]-1659844599572
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844599574
GPR[SPVAP]-1659844599574
GPR[EPVAP]-1659844600732
GPR[EPVS]-1659844600732
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844600735
GPR[SPVAP]-1659844600735
GPR[EPVAP]-1659844601865
GPR[EPVS]-1659844601865
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844601869
GPR[SPVAP]-1659844601869
GPR[EPVAP]-1659844602988
GPR[EPVS]-1659844602988
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659844602992
GPR[SPVAP]-1659844602992
GPR[EPVAP]-1659844604125
GPR[EPVS]-1659844604125
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659844604126
GPR[SPVAP]-1659844604126
GPR[EPVAP]-1659844605256
GPR[EPVS]-1659844605256
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659844605258
GPR[SPVAP]-1659844605258
GPR[EPVAP]-1659844606421
GPR[EPVS]-1659844606421
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844606423
GPR[SPVAP]-1659844606423
GPR[EPVAP]-1659844607523
GPR[EPVS]-1659844607523
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844607526
GPR[SPVAP]-1659844607526
GPR[EPVAP]-1659844608631
GPR[EPVS]-1659844608631
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844608634
GPR[SPVAP]-1659844608634
GPR[EPVAP]-1659844609768
GPR[EPVS]-1659844609768
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844609769
GPR[SPVAP]-1659844609769
GPR[EPVAP]-1659844610885
GPR[EPVS]-1659844610885
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844610887
GPR[SPVAP]-1659844610887
GPR[EPVAP]-1659844612002
GPR[EPVS]-1659844612002
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844612004
GPR[SPVAP]-1659844612004
GPR[EPVAP]-1659844613148
GPR[EPVS]-1659844613148
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844613154
GPR[SPVAP]-1659844613154
GPR[EPVAP]-1659844614280
GPR[EPVS]-1659844614280
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844614283
GPR[SPVAP]-1659844614283
GPR[EPVAP]-1659844615400
GPR[EPVS]-1659844615400
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844615405
GPR[SPVAP]-1659844615405
GPR[EPVAP]-1659844616527
GPR[EPVS]-1659844616527
GPR[ESUN]-1659844616528
GPR[SSUN]-1659844616528
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659844617184
GPR[SSUN]-1659844617184
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844623889
GPR[SPVAP]-1659844623889
GPR[EPVAP]-1659844630260
GPR[SPVATF]-1659844630260
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844632268
GPR[EPVS]-1659844632268
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844632270
GPR[SPVAP]-1659844632270
GPR[EPVAP]-1659844633402
GPR[EPVS]-1659844633402
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844633404
GPR[SPVAP]-1659844633404
GPR[EPVAP]-1659844635472
GPR[SPVATF]-1659844635472
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844637405
GPR[EPVS]-1659844637405
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844637407
GPR[SPVAP]-1659844637407
GPR[EPVAP]-1659844638543
GPR[EPVS]-1659844638543
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844638545
GPR[SPVAP]-1659844638545
GPR[EPVAP]-1659844639680
GPR[EPVS]-1659844639680
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844639682
GPR[SPVAP]-1659844639682
GPR[EPVAP]-1659844640793
GPR[EPVS]-1659844640793
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844640794
GPR[SPVAP]-1659844640794
GPR[EPVAP]-1659844641897
GPR[EPVS]-1659844641897
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844641898
GPR[SPVAP]-1659844641898
GPR[EPVAP]-1659844643036
GPR[EPVS]-1659844643036
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844643037
GPR[SPVAP]-1659844643037
GPR[EPVAP]-1659844644164
GPR[EPVS]-1659844644164
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844644166
GPR[SPVAP]-1659844644166
GPR[EPVAP]-1659844645288
GPR[EPVS]-1659844645288
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844645291
GPR[SPVAP]-1659844645291
GPR[EPVAP]-1659844646388
GPR[EPVS]-1659844646388
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844646390
GPR[SPVAP]-1659844646390
GPR[EPVAP]-1659844647511
GPR[EPVS]-1659844647511
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844647513
GPR[SPVAP]-1659844647513
GPR[EPVAP]-1659844648622
GPR[EPVS]-1659844648622
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844648624
GPR[SPVAP]-1659844648624
GPR[EPVAP]-1659844649737
GPR[EPVS]-1659844649737
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844649739
GPR[SPVAP]-1659844649739
GPR[EPVAP]-1659844650854
GPR[EPVS]-1659844650854
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844650855
GPR[SPVAP]-1659844650855
GPR[EPVAP]-1659844651999
GPR[EPVS]-1659844651999
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844652002
GPR[SPVAP]-1659844652002
GPR[EPVAP]-1659844653117
GPR[EPVS]-1659844653117
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844653118
GPR[SPVAP]-1659844653118
GPR[EPVAP]-1659844654236
GPR[EPVS]-1659844654236
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844654238
GPR[SPVAP]-1659844654238
GPR[EPVAP]-1659844656939
GPR[EPVS]-1659844656939
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844656951
GPR[SPVAP]-1659844656951
GPR[EPVAP]-1659844658207
GPR[EPVS]-1659844658207
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844658208
GPR[SPVAP]-1659844658208
GPR[EPVAP]-1659844659333
GPR[EPVS]-1659844659333
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844659335
GPR[SPVAP]-1659844659335
GPR[EPVAP]-1659844660438
GPR[EPVS]-1659844660439
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844660440
GPR[SPVAP]-1659844660440
GPR[EPVAP]-1659844661572
GPR[EPVS]-1659844661572
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844661574
GPR[SPVAP]-1659844661574
GPR[EPVAP]-1659844662689
GPR[EPVS]-1659844662689
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844662691
GPR[SPVAP]-1659844662691
GPR[EPVAP]-1659844663790
GPR[EPVS]-1659844663790
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844663792
GPR[SPVAP]-1659844663792
GPR[EPVAP]-1659844664897
GPR[EPVS]-1659844664897
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844664898
GPR[SPVAP]-1659844664898
GPR[EPVAP]-1659844666010
GPR[EPVS]-1659844666010
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844666012
GPR[SPVAP]-1659844666012
GPR[EPVAP]-1659844667128
GPR[EPVS]-1659844667128
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844667130
GPR[SPVAP]-1659844667130
GPR[EPVAP]-1659844668252
GPR[EPVS]-1659844668252
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844668253
GPR[SPVAP]-1659844668253
GPR[EPVAP]-1659844669362
GPR[EPVS]-1659844669362
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844669365
GPR[SPVAP]-1659844669365
GPR[EPVAP]-1659844670484
GPR[EPVS]-1659844670484
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844670486
GPR[SPVAP]-1659844670486
GPR[EPVAP]-1659844671600
GPR[EPVS]-1659844671600
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844671602
GPR[SPVAP]-1659844671602
GPR[EPVAP]-1659844672716
GPR[EPVS]-1659844672716
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844672718
GPR[SPVAP]-1659844672718
GPR[EPVAP]-1659844673823
GPR[EPVS]-1659844673823
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844673824
GPR[SPVAP]-1659844673824
GPR[EPVAP]-1659844674962
GPR[EPVS]-1659844674962
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844674964
GPR[SPVAP]-1659844674964
GPR[EPVAP]-1659844676078
GPR[EPVS]-1659844676078
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844676080
GPR[SPVAP]-1659844676080
GPR[EPVAP]-1659844677194
GPR[EPVS]-1659844677194
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844677196
GPR[SPVAP]-1659844677196
GPR[EPVAP]-1659844678339
GPR[EPVS]-1659844678339
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844678341
GPR[SPVAP]-1659844678341
GPR[EPVAP]-1659844679449
GPR[EPVS]-1659844679449
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844679451
GPR[SPVAP]-1659844679451
GPR[EPVAP]-1659844680568
GPR[EPVS]-1659844680568
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844680571
GPR[SPVAP]-1659844680572
GPR[EPVAP]-1659844681685
GPR[EPVS]-1659844681685
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844681686
GPR[SPVAP]-1659844681686
GPR[EPVAP]-1659844682801
GPR[EPVS]-1659844682801
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844682802
GPR[SPVAP]-1659844682802
GPR[EPVAP]-1659844683920
GPR[EPVS]-1659844683920
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844683922
GPR[SPVAP]-1659844683922
GPR[EPVAP]-1659844685035
GPR[EPVS]-1659844685035
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844685037
GPR[SPVAP]-1659844685037
GPR[EPVAP]-1659844686140
GPR[EPVS]-1659844686140
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844686142
GPR[SPVAP]-1659844686142
GPR[EPVAP]-1659844687308
GPR[EPVS]-1659844687308
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844687309
GPR[SPVAP]-1659844687309
GPR[EPVAP]-1659844688412
GPR[EPVS]-1659844688412
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844688415
GPR[SPVAP]-1659844688415
GPR[EPVAP]-1659844689519
GPR[EPVS]-1659844689519
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844689520
GPR[SPVAP]-1659844689520
GPR[EPVAP]-1659844690626
GPR[EPVS]-1659844690626
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844690628
GPR[SPVAP]-1659844690628
GPR[EPVAP]-1659844691734
GPR[EPVS]-1659844691734
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844691736
GPR[SPVAP]-1659844691736
GPR[EPVAP]-1659844692885
GPR[EPVS]-1659844692885
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844692886
GPR[SPVAP]-1659844692886
GPR[EPVAP]-1659844693997
GPR[EPVS]-1659844693997
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844693999
GPR[SPVAP]-1659844693999
GPR[EPVAP]-1659844695128
GPR[EPVS]-1659844695128
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844695130
GPR[SPVAP]-1659844695130
GPR[EPVAP]-1659844696229
GPR[EPVS]-1659844696229
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844696233
GPR[SPVAP]-1659844696233
GPR[EPVAP]-1659844697342
GPR[EPVS]-1659844697342
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844697346
GPR[SPVAP]-1659844697346
GPR[EPVAP]-1659844698455
GPR[EPVS]-1659844698455
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844698456
GPR[SPVAP]-1659844698456
GPR[EPVAP]-1659844699574
GPR[EPVS]-1659844699574
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844699575
GPR[SPVAP]-1659844699575
GPR[EPVAP]-1659844700694
GPR[EPVS]-1659844700694
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844700697
GPR[SPVAP]-1659844700697
GPR[EPVAP]-1659844701797
GPR[EPVS]-1659844701797
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844701802
GPR[SPVAP]-1659844701802
GPR[EPVAP]-1659844702936
GPR[EPVS]-1659844702936
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844702937
GPR[SPVAP]-1659844702937
GPR[EPVAP]-1659844704037
GPR[EPVS]-1659844704037
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844704039
GPR[SPVAP]-1659844704039
GPR[EPVAP]-1659844705139
GPR[EPVS]-1659844705139
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844705141
GPR[SPVAP]-1659844705141
GPR[EPVAP]-1659844706247
GPR[EPVS]-1659844706247
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844706249
GPR[SPVAP]-1659844706249
GPR[EPVAP]-1659844707365
GPR[EPVS]-1659844707365
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844707368
GPR[SPVAP]-1659844707368
GPR[EPVAP]-1659844708467
GPR[EPVS]-1659844708467
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844708469
GPR[SPVAP]-1659844708469
GPR[EPVAP]-1659844709574
GPR[EPVS]-1659844709574
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844709577
GPR[SPVAP]-1659844709577
GPR[EPVAP]-1659844710689
GPR[EPVS]-1659844710689
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844710691
GPR[SPVAP]-1659844710691
GPR[EPVAP]-1659844711831
GPR[EPVS]-1659844711831
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844711833
GPR[SPVAP]-1659844711833
GPR[EPVAP]-1659844712950
GPR[EPVS]-1659844712950
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844712951
GPR[SPVAP]-1659844712951
GPR[EPVAP]-1659844714073
GPR[EPVS]-1659844714073
========
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844714079
GPR[SPVAP]-1659844714079
GPR[EPVAP]-1659844715195
GPR[EPVS]-1659844715195
========
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659844715199
GPR[SPVAP]-1659844715199
GPR[EPVAP]-1659844716325
GPR[EPVS]-1659844716325
GPR[ESUN]-1659844716327
GPR[SSUN]-1659844716327
org.apache.commons.math3.linear.EigenDecomposition,579
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

GPR[ESUN]-1659844722662
GPR[SSUN]-1659844722662
GPR[ESUN]-1659844722662
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659844723390
GPR[EFL]-1659844723392
GPR[SFP]-1659844723392
TIMEOUT : 600000
GPR[SSUN]-1659844723399
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659844725343
GPR[SPVAP]-1659844725343
GPR[EPVAP]-1659844733367
GPR[SPVATF]-1659844733367
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 0
GPR[EPVATF]-1659844735378
GPR[SPVATR]-1659844735378
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659844801199
GPR[EPVS]-1659844801199
GPR[PF]-1659844801199
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/6/patch_77811_1_ts_1659844801199.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM2315333958992881779/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/6/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/6/patch_77811_1_ts_1659844801199.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659844801209
GPR[SPVAP]-1659844801209
GPR[EPVAP]-1659844803257
GPR[SPVATF]-1659844803257
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844805265
GPR[EPVS]-1659844805265
GPR[ESUN]-1659844805265
GPR[SSUN]-1659844805265
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844807589
GPR[SPVAP]-1659844807589
GPR[EPVAP]-1659844814172
GPR[SPVATF]-1659844814172
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844816220
GPR[EPVS]-1659844816220
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844816222
GPR[SPVAP]-1659844816222
GPR[EPVAP]-1659844818349
GPR[SPVATF]-1659844818349
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844820312
GPR[EPVS]-1659844820312
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844820314
GPR[SPVAP]-1659844820314
GPR[EPVAP]-1659844822419
GPR[SPVATF]-1659844822419
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844824409
GPR[EPVS]-1659844824409
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844824411
GPR[SPVAP]-1659844824411
GPR[EPVAP]-1659844826521
GPR[SPVATF]-1659844826521
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844828492
GPR[EPVS]-1659844828492
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844828494
GPR[SPVAP]-1659844828494
GPR[EPVAP]-1659844830543
GPR[SPVATF]-1659844830543
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844832519
GPR[EPVS]-1659844832519
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844832520
GPR[SPVAP]-1659844832520
GPR[EPVAP]-1659844834661
GPR[SPVATF]-1659844834661
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844836671
GPR[EPVS]-1659844836671
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844836673
GPR[SPVAP]-1659844836673
GPR[EPVAP]-1659844838793
GPR[SPVATF]-1659844838793
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844840751
GPR[EPVS]-1659844840751
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844840752
GPR[SPVAP]-1659844840752
GPR[EPVAP]-1659844842825
GPR[SPVATF]-1659844842825
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844844768
GPR[EPVS]-1659844844768
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844844769
GPR[SPVAP]-1659844844769
GPR[EPVAP]-1659844846821
GPR[SPVATF]-1659844846821
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844848862
GPR[EPVS]-1659844848862
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844848864
GPR[SPVAP]-1659844848864
GPR[EPVAP]-1659844850952
GPR[SPVATF]-1659844850952
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844852905
GPR[EPVS]-1659844852905
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844852907
GPR[SPVAP]-1659844852907
GPR[EPVAP]-1659844854946
GPR[SPVATF]-1659844854946
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844856893
GPR[EPVS]-1659844856893
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844856895
GPR[SPVAP]-1659844856895
GPR[EPVAP]-1659844859044
GPR[SPVATF]-1659844859044
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844861032
GPR[EPVS]-1659844861032
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844861034
GPR[SPVAP]-1659844861034
GPR[EPVAP]-1659844863121
GPR[SPVATF]-1659844863121
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844865144
GPR[EPVS]-1659844865144
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844865146
GPR[SPVAP]-1659844865146
GPR[EPVAP]-1659844867200
GPR[SPVATF]-1659844867200
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844869224
GPR[EPVS]-1659844869224
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844869226
GPR[SPVAP]-1659844869226
GPR[EPVAP]-1659844873308
GPR[SPVATF]-1659844873308
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844875310
GPR[EPVS]-1659844875310
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844875312
GPR[SPVAP]-1659844875312
GPR[EPVAP]-1659844877349
GPR[SPVATF]-1659844877349
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844879296
GPR[EPVS]-1659844879296
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844879298
GPR[SPVAP]-1659844879298
GPR[EPVAP]-1659844881377
GPR[SPVATF]-1659844881377
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844883390
GPR[EPVS]-1659844883390
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844883392
GPR[SPVAP]-1659844883392
GPR[EPVAP]-1659844885502
GPR[SPVATF]-1659844885502
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844887506
GPR[EPVS]-1659844887506
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844887508
GPR[SPVAP]-1659844887508
GPR[EPVAP]-1659844889589
GPR[SPVATF]-1659844889589
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844891599
GPR[EPVS]-1659844891599
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844891600
GPR[SPVAP]-1659844891600
GPR[EPVAP]-1659844893753
GPR[SPVATF]-1659844893753
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844895741
GPR[EPVS]-1659844895741
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844895742
GPR[SPVAP]-1659844895742
GPR[EPVAP]-1659844897854
GPR[SPVATF]-1659844897855
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844899841
GPR[EPVS]-1659844899841
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844899843
GPR[SPVAP]-1659844899843
GPR[EPVAP]-1659844901897
GPR[SPVATF]-1659844901897
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844903842
GPR[EPVS]-1659844903842
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844903843
GPR[SPVAP]-1659844903843
GPR[EPVAP]-1659844905928
GPR[SPVATF]-1659844905928
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844907906
GPR[EPVS]-1659844907906
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844907908
GPR[SPVAP]-1659844907908
GPR[EPVAP]-1659844910016
GPR[SPVATF]-1659844910016
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844912062
GPR[EPVS]-1659844912062
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844912064
GPR[SPVAP]-1659844912064
GPR[EPVAP]-1659844914121
GPR[SPVATF]-1659844914121
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844916109
GPR[EPVS]-1659844916109
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659844916111
GPR[SPVAP]-1659844916111
GPR[EPVAP]-1659844918172
GPR[SPVATF]-1659844918172
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844920137
GPR[EPVS]-1659844920137
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844920138
GPR[SPVAP]-1659844920138
GPR[EPVAP]-1659844922146
GPR[SPVATF]-1659844922146
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844924111
GPR[EPVS]-1659844924112
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844924114
GPR[SPVAP]-1659844924114
GPR[EPVAP]-1659844926190
GPR[SPVATF]-1659844926190
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844928140
GPR[EPVS]-1659844928140
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844928141
GPR[SPVAP]-1659844928141
GPR[EPVAP]-1659844930192
GPR[SPVATF]-1659844930192
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844932121
GPR[EPVS]-1659844932121
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659844932123
GPR[SPVAP]-1659844932123
GPR[EPVAP]-1659844934151
GPR[SPVATF]-1659844934151
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844936145
GPR[EPVS]-1659844936145
GPR[ESUN]-1659844936147
GPR[SSUN]-1659844936147
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844943232
GPR[SPVAP]-1659844943232
GPR[EPVAP]-1659844951558
GPR[SPVATF]-1659844951558
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844953547
GPR[EPVS]-1659844953547
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659844953548
GPR[SPVAP]-1659844953548
GPR[EPVAP]-1659844954671
GPR[EPVS]-1659844954671
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844954673
GPR[SPVAP]-1659844954673
GPR[EPVAP]-1659844955787
GPR[EPVS]-1659844955787
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844955789
GPR[SPVAP]-1659844955789
GPR[EPVAP]-1659844956923
GPR[EPVS]-1659844956923
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844956926
GPR[SPVAP]-1659844956926
GPR[EPVAP]-1659844958038
GPR[EPVS]-1659844958038
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844958040
GPR[SPVAP]-1659844958040
GPR[EPVAP]-1659844959149
GPR[EPVS]-1659844959149
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844959150
GPR[SPVAP]-1659844959150
GPR[EPVAP]-1659844960281
GPR[EPVS]-1659844960281
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844960284
GPR[SPVAP]-1659844960284
GPR[EPVAP]-1659844962398
GPR[SPVATF]-1659844962398
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844964349
GPR[EPVS]-1659844964349
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844964351
GPR[SPVAP]-1659844964351
GPR[EPVAP]-1659844965470
GPR[EPVS]-1659844965470
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844965472
GPR[SPVAP]-1659844965472
GPR[EPVAP]-1659844966582
GPR[EPVS]-1659844966582
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844966584
GPR[SPVAP]-1659844966584
GPR[EPVAP]-1659844967701
GPR[EPVS]-1659844967701
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844967703
GPR[SPVAP]-1659844967703
GPR[EPVAP]-1659844968811
GPR[EPVS]-1659844968811
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844968813
GPR[SPVAP]-1659844968813
GPR[EPVAP]-1659844969928
GPR[EPVS]-1659844969928
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844969929
GPR[SPVAP]-1659844969929
GPR[EPVAP]-1659844971032
GPR[EPVS]-1659844971032
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844971033
GPR[SPVAP]-1659844971034
GPR[EPVAP]-1659844972173
GPR[EPVS]-1659844972173
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844972174
GPR[SPVAP]-1659844972174
GPR[EPVAP]-1659844973333
GPR[EPVS]-1659844973333
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844973334
GPR[SPVAP]-1659844973334
GPR[EPVAP]-1659844974456
GPR[EPVS]-1659844974456
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844974457
GPR[SPVAP]-1659844974457
GPR[EPVAP]-1659844975581
GPR[EPVS]-1659844975581
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844975583
GPR[SPVAP]-1659844975583
GPR[EPVAP]-1659844976695
GPR[EPVS]-1659844976695
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844976698
GPR[SPVAP]-1659844976698
GPR[EPVAP]-1659844977838
GPR[EPVS]-1659844977838
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844977839
GPR[SPVAP]-1659844977839
GPR[EPVAP]-1659844978945
GPR[EPVS]-1659844978945
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844978947
GPR[SPVAP]-1659844978947
GPR[EPVAP]-1659844981044
GPR[SPVATF]-1659844981044
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659844983000
GPR[EPVS]-1659844983000
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659844983002
GPR[SPVAP]-1659844983002
GPR[EPVAP]-1659844984113
GPR[EPVS]-1659844984113
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844984115
GPR[SPVAP]-1659844984115
GPR[EPVAP]-1659844985219
GPR[EPVS]-1659844985219
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844985222
GPR[SPVAP]-1659844985222
GPR[EPVAP]-1659844986340
GPR[EPVS]-1659844986340
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844986342
GPR[SPVAP]-1659844986342
GPR[EPVAP]-1659844987441
GPR[EPVS]-1659844987441
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844987444
GPR[SPVAP]-1659844987444
GPR[EPVAP]-1659844988560
GPR[EPVS]-1659844988560
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844988561
GPR[SPVAP]-1659844988561
GPR[EPVAP]-1659844989717
GPR[EPVS]-1659844989717
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844989719
GPR[SPVAP]-1659844989719
GPR[EPVAP]-1659844990839
GPR[EPVS]-1659844990839
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844990841
GPR[SPVAP]-1659844990841
GPR[EPVAP]-1659844991981
GPR[EPVS]-1659844991981
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844991983
GPR[SPVAP]-1659844991983
GPR[EPVAP]-1659844993089
GPR[EPVS]-1659844993089
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659844993091
GPR[SPVAP]-1659844993091
GPR[EPVAP]-1659844994207
GPR[EPVS]-1659844994207
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844994209
GPR[SPVAP]-1659844994209
GPR[EPVAP]-1659844995320
GPR[EPVS]-1659844995320
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844995322
GPR[SPVAP]-1659844995322
GPR[EPVAP]-1659844996445
GPR[EPVS]-1659844996445
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659844996446
GPR[SPVAP]-1659844996446
GPR[EPVAP]-1659844998510
GPR[SPVATF]-1659844998510
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845000454
GPR[EPVS]-1659845000454
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845000456
GPR[SPVAP]-1659845000456
GPR[EPVAP]-1659845001595
GPR[EPVS]-1659845001595
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845001597
GPR[SPVAP]-1659845001597
GPR[EPVAP]-1659845002746
GPR[EPVS]-1659845002746
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845002747
GPR[SPVAP]-1659845002747
GPR[EPVAP]-1659845003856
GPR[EPVS]-1659845003856
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845003858
GPR[SPVAP]-1659845003858
GPR[EPVAP]-1659845004977
GPR[EPVS]-1659845004977
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845004979
GPR[SPVAP]-1659845004979
GPR[EPVAP]-1659845006085
GPR[EPVS]-1659845006085
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845006086
GPR[SPVAP]-1659845006086
GPR[EPVAP]-1659845007211
GPR[EPVS]-1659845007211
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845007213
GPR[SPVAP]-1659845007213
GPR[EPVAP]-1659845008321
GPR[EPVS]-1659845008321
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845008325
GPR[SPVAP]-1659845008325
GPR[EPVAP]-1659845009436
GPR[EPVS]-1659845009436
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845009438
GPR[SPVAP]-1659845009438
GPR[EPVAP]-1659845010589
GPR[EPVS]-1659845010589
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845010591
GPR[SPVAP]-1659845010591
GPR[EPVAP]-1659845011705
GPR[EPVS]-1659845011705
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845011707
GPR[SPVAP]-1659845011707
GPR[EPVAP]-1659845012827
GPR[EPVS]-1659845012827
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845012828
GPR[SPVAP]-1659845012828
GPR[EPVAP]-1659845013972
GPR[EPVS]-1659845013972
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845013975
GPR[SPVAP]-1659845013975
GPR[EPVAP]-1659845015080
GPR[EPVS]-1659845015080
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845015082
GPR[SPVAP]-1659845015082
GPR[EPVAP]-1659845016183
GPR[EPVS]-1659845016183
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845016187
GPR[SPVAP]-1659845016187
GPR[EPVAP]-1659845017330
GPR[EPVS]-1659845017330
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845017334
GPR[SPVAP]-1659845017334
GPR[EPVAP]-1659845020095
GPR[EPVS]-1659845020095
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845020098
GPR[SPVAP]-1659845020098
GPR[EPVAP]-1659845021201
GPR[EPVS]-1659845021201
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845021203
GPR[SPVAP]-1659845021203
GPR[EPVAP]-1659845022299
GPR[EPVS]-1659845022299
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845022301
GPR[SPVAP]-1659845022301
GPR[EPVAP]-1659845023421
GPR[EPVS]-1659845023421
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845023423
GPR[SPVAP]-1659845023423
GPR[EPVAP]-1659845024538
GPR[EPVS]-1659845024538
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845024539
GPR[SPVAP]-1659845024539
GPR[EPVAP]-1659845025640
GPR[EPVS]-1659845025640
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845025642
GPR[SPVAP]-1659845025642
GPR[EPVAP]-1659845026740
GPR[EPVS]-1659845026740
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845026741
GPR[SPVAP]-1659845026741
GPR[EPVAP]-1659845027846
GPR[EPVS]-1659845027847
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845027848
GPR[SPVAP]-1659845027848
GPR[EPVAP]-1659845028977
GPR[EPVS]-1659845028977
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845028978
GPR[SPVAP]-1659845028978
GPR[EPVAP]-1659845030079
GPR[EPVS]-1659845030079
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845030080
GPR[SPVAP]-1659845030080
GPR[EPVAP]-1659845031215
GPR[EPVS]-1659845031215
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845031216
GPR[SPVAP]-1659845031216
GPR[EPVAP]-1659845032337
GPR[EPVS]-1659845032337
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845032339
GPR[SPVAP]-1659845032339
GPR[EPVAP]-1659845033437
GPR[EPVS]-1659845033437
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845033440
GPR[SPVAP]-1659845033440
GPR[EPVAP]-1659845035519
GPR[SPVATF]-1659845035519
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845037526
GPR[EPVS]-1659845037526
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845037528
GPR[SPVAP]-1659845037528
GPR[EPVAP]-1659845038636
GPR[EPVS]-1659845038636
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845038638
GPR[SPVAP]-1659845038638
GPR[EPVAP]-1659845039735
GPR[EPVS]-1659845039735
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845039737
GPR[SPVAP]-1659845039737
GPR[EPVAP]-1659845040812
GPR[EPVS]-1659845040812
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845040815
GPR[SPVAP]-1659845040815
GPR[EPVAP]-1659845041926
GPR[EPVS]-1659845041926
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845041929
GPR[SPVAP]-1659845041929
GPR[EPVAP]-1659845043032
GPR[EPVS]-1659845043032
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845043034
GPR[SPVAP]-1659845043034
GPR[EPVAP]-1659845044165
GPR[EPVS]-1659845044165
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845044167
GPR[SPVAP]-1659845044167
GPR[EPVAP]-1659845045278
GPR[EPVS]-1659845045278
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845045285
GPR[SPVAP]-1659845045285
GPR[EPVAP]-1659845046425
GPR[EPVS]-1659845046425
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845046431
GPR[SPVAP]-1659845046431
GPR[EPVAP]-1659845047556
GPR[EPVS]-1659845047556
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845047559
GPR[SPVAP]-1659845047559
GPR[EPVAP]-1659845048686
GPR[EPVS]-1659845048686
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845048688
GPR[SPVAP]-1659845048688
GPR[EPVAP]-1659845049814
GPR[EPVS]-1659845049814
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845049816
GPR[SPVAP]-1659845049816
GPR[EPVAP]-1659845050936
GPR[EPVS]-1659845050936
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845050938
GPR[SPVAP]-1659845050938
GPR[EPVAP]-1659845052051
GPR[EPVS]-1659845052051
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845052055
GPR[SPVAP]-1659845052055
GPR[EPVAP]-1659845053192
GPR[EPVS]-1659845053192
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845053194
GPR[SPVAP]-1659845053194
GPR[EPVAP]-1659845054298
GPR[EPVS]-1659845054298
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845054300
GPR[SPVAP]-1659845054300
GPR[EPVAP]-1659845055449
GPR[EPVS]-1659845055449
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845055451
GPR[SPVAP]-1659845055451
GPR[EPVAP]-1659845056570
GPR[EPVS]-1659845056570
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659845056571
GPR[SPVAP]-1659845056571
GPR[EPVAP]-1659845057673
GPR[EPVS]-1659845057673
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845057675
GPR[SPVAP]-1659845057675
GPR[EPVAP]-1659845058804
GPR[EPVS]-1659845058804
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845058805
GPR[SPVAP]-1659845058805
GPR[EPVAP]-1659845059908
GPR[EPVS]-1659845059908
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845059910
GPR[SPVAP]-1659845059910
GPR[EPVAP]-1659845061032
GPR[EPVS]-1659845061032
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845061038
GPR[SPVAP]-1659845061038
GPR[EPVAP]-1659845062164
GPR[EPVS]-1659845062164
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845062169
GPR[SPVAP]-1659845062169
GPR[EPVAP]-1659845063337
GPR[EPVS]-1659845063337
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845063339
GPR[SPVAP]-1659845063339
GPR[EPVAP]-1659845064472
GPR[EPVS]-1659845064472
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845064474
GPR[SPVAP]-1659845064474
GPR[EPVAP]-1659845065625
GPR[EPVS]-1659845065625
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845065627
GPR[SPVAP]-1659845065627
GPR[EPVAP]-1659845066733
GPR[EPVS]-1659845066733
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845066739
GPR[SPVAP]-1659845066739
GPR[EPVAP]-1659845067860
GPR[EPVS]-1659845067860
GPR[ESUN]-1659845067860
GPR[SSUN]-1659845067860
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845074512
GPR[SPVAP]-1659845074512
GPR[EPVAP]-1659845081050
GPR[SPVATF]-1659845081050
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845083048
GPR[EPVS]-1659845083048
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845083050
GPR[SPVAP]-1659845083050
GPR[EPVAP]-1659845084184
GPR[EPVS]-1659845084184
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845084185
GPR[SPVAP]-1659845084185
GPR[EPVAP]-1659845085299
GPR[EPVS]-1659845085299
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845085300
GPR[SPVAP]-1659845085300
GPR[EPVAP]-1659845087374
GPR[SPVATF]-1659845087374
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845089353
GPR[EPVS]-1659845089353
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659845089354
GPR[SPVAP]-1659845089354
GPR[EPVAP]-1659845092329
GPR[EPVS]-1659845092329
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845092331
GPR[SPVAP]-1659845092331
GPR[EPVAP]-1659845093456
GPR[EPVS]-1659845093456
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845093458
GPR[SPVAP]-1659845093458
GPR[EPVAP]-1659845094595
GPR[EPVS]-1659845094595
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845094597
GPR[SPVAP]-1659845094597
GPR[EPVAP]-1659845095731
GPR[EPVS]-1659845095731
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845095733
GPR[SPVAP]-1659845095733
GPR[EPVAP]-1659845096828
GPR[EPVS]-1659845096828
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845096830
GPR[SPVAP]-1659845096830
GPR[EPVAP]-1659845097937
GPR[EPVS]-1659845097937
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845097938
GPR[SPVAP]-1659845097939
GPR[EPVAP]-1659845099052
GPR[EPVS]-1659845099052
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845099054
GPR[SPVAP]-1659845099054
GPR[EPVAP]-1659845100159
GPR[EPVS]-1659845100159
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845100161
GPR[SPVAP]-1659845100161
GPR[EPVAP]-1659845101290
GPR[EPVS]-1659845101290
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845101291
GPR[SPVAP]-1659845101291
GPR[EPVAP]-1659845102414
GPR[EPVS]-1659845102414
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845102416
GPR[SPVAP]-1659845102416
GPR[EPVAP]-1659845103517
GPR[EPVS]-1659845103517
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845103518
GPR[SPVAP]-1659845103518
GPR[EPVAP]-1659845104649
GPR[EPVS]-1659845104649
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845104651
GPR[SPVAP]-1659845104651
GPR[EPVAP]-1659845105796
GPR[EPVS]-1659845105796
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845105797
GPR[SPVAP]-1659845105797
GPR[EPVAP]-1659845106904
GPR[EPVS]-1659845106904
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845106906
GPR[SPVAP]-1659845106906
GPR[EPVAP]-1659845108001
GPR[EPVS]-1659845108001
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845108003
GPR[SPVAP]-1659845108003
GPR[EPVAP]-1659845109116
GPR[EPVS]-1659845109116
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845109118
GPR[SPVAP]-1659845109118
GPR[EPVAP]-1659845110234
GPR[EPVS]-1659845110234
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845110236
GPR[SPVAP]-1659845110236
GPR[EPVAP]-1659845111351
GPR[EPVS]-1659845111351
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845111355
GPR[SPVAP]-1659845111355
GPR[EPVAP]-1659845112456
GPR[EPVS]-1659845112456
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845112458
GPR[SPVAP]-1659845112458
GPR[EPVAP]-1659845113584
GPR[EPVS]-1659845113584
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845113586
GPR[SPVAP]-1659845113586
GPR[EPVAP]-1659845114695
GPR[EPVS]-1659845114695
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659845114696
GPR[SPVAP]-1659845114696
GPR[EPVAP]-1659845115800
GPR[EPVS]-1659845115800
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845115802
GPR[SPVAP]-1659845115802
GPR[EPVAP]-1659845116941
GPR[EPVS]-1659845116941
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845116942
GPR[SPVAP]-1659845116942
GPR[EPVAP]-1659845118072
GPR[EPVS]-1659845118072
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845118074
GPR[SPVAP]-1659845118074
GPR[EPVAP]-1659845119176
GPR[EPVS]-1659845119176
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845119179
GPR[SPVAP]-1659845119179
GPR[EPVAP]-1659845120283
GPR[EPVS]-1659845120283
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845120285
GPR[SPVAP]-1659845120285
GPR[EPVAP]-1659845121394
GPR[EPVS]-1659845121394
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845121396
GPR[SPVAP]-1659845121396
GPR[EPVAP]-1659845122537
GPR[EPVS]-1659845122537
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845122538
GPR[SPVAP]-1659845122538
GPR[EPVAP]-1659845123658
GPR[EPVS]-1659845123658
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845123659
GPR[SPVAP]-1659845123659
GPR[EPVAP]-1659845124771
GPR[EPVS]-1659845124771
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845124772
GPR[SPVAP]-1659845124772
GPR[EPVAP]-1659845125890
GPR[EPVS]-1659845125890
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845125891
GPR[SPVAP]-1659845125891
GPR[EPVAP]-1659845127017
GPR[EPVS]-1659845127017
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845127018
GPR[SPVAP]-1659845127018
GPR[EPVAP]-1659845128132
GPR[EPVS]-1659845128132
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845128133
GPR[SPVAP]-1659845128133
GPR[EPVAP]-1659845129245
GPR[EPVS]-1659845129245
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845129247
GPR[SPVAP]-1659845129247
GPR[EPVAP]-1659845130352
GPR[EPVS]-1659845130352
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845130353
GPR[SPVAP]-1659845130353
GPR[EPVAP]-1659845131482
GPR[EPVS]-1659845131482
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845131484
GPR[SPVAP]-1659845131484
GPR[EPVAP]-1659845132589
GPR[EPVS]-1659845132589
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845132590
GPR[SPVAP]-1659845132590
GPR[EPVAP]-1659845133685
GPR[EPVS]-1659845133685
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845133686
GPR[SPVAP]-1659845133686
GPR[EPVAP]-1659845134800
GPR[EPVS]-1659845134800
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845134801
GPR[SPVAP]-1659845134801
GPR[EPVAP]-1659845135904
GPR[EPVS]-1659845135904
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845135906
GPR[SPVAP]-1659845135906
GPR[EPVAP]-1659845137010
GPR[EPVS]-1659845137010
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845137011
GPR[SPVAP]-1659845137011
GPR[EPVAP]-1659845138120
GPR[EPVS]-1659845138120
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845138121
GPR[SPVAP]-1659845138121
GPR[EPVAP]-1659845139237
GPR[EPVS]-1659845139237
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845139240
GPR[SPVAP]-1659845139240
GPR[EPVAP]-1659845140359
GPR[EPVS]-1659845140359
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845140364
GPR[SPVAP]-1659845140364
GPR[EPVAP]-1659845141472
GPR[EPVS]-1659845141472
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845141474
GPR[SPVAP]-1659845141474
GPR[EPVAP]-1659845142570
GPR[EPVS]-1659845142570
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845142571
GPR[SPVAP]-1659845142571
GPR[EPVAP]-1659845143672
GPR[EPVS]-1659845143672
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845143674
GPR[SPVAP]-1659845143674
GPR[EPVAP]-1659845144783
GPR[EPVS]-1659845144783
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845144785
GPR[SPVAP]-1659845144785
GPR[EPVAP]-1659845145888
GPR[EPVS]-1659845145888
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845145891
GPR[SPVAP]-1659845145891
GPR[EPVAP]-1659845147042
GPR[EPVS]-1659845147042
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845147044
GPR[SPVAP]-1659845147044
GPR[EPVAP]-1659845148157
GPR[EPVS]-1659845148157
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845148158
GPR[SPVAP]-1659845148158
GPR[EPVAP]-1659845149298
GPR[EPVS]-1659845149298
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845149300
GPR[SPVAP]-1659845149300
GPR[EPVAP]-1659845150411
GPR[EPVS]-1659845150411
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845150414
GPR[SPVAP]-1659845150414
GPR[EPVAP]-1659845151519
GPR[EPVS]-1659845151519
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845151520
GPR[SPVAP]-1659845151520
GPR[EPVAP]-1659845152618
GPR[EPVS]-1659845152618
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845152620
GPR[SPVAP]-1659845152620
GPR[EPVAP]-1659845153746
GPR[EPVS]-1659845153746
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845153748
GPR[SPVAP]-1659845153748
GPR[EPVAP]-1659845154867
GPR[EPVS]-1659845154867
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845154869
GPR[SPVAP]-1659845154869
GPR[EPVAP]-1659845155976
GPR[EPVS]-1659845155976
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845155979
GPR[SPVAP]-1659845155979
GPR[EPVAP]-1659845157088
GPR[EPVS]-1659845157088
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845157090
GPR[SPVAP]-1659845157090
GPR[EPVAP]-1659845158201
GPR[EPVS]-1659845158201
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845158204
GPR[SPVAP]-1659845158204
GPR[EPVAP]-1659845159320
GPR[EPVS]-1659845159321
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845159322
GPR[SPVAP]-1659845159322
GPR[EPVAP]-1659845160431
GPR[EPVS]-1659845160431
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845160432
GPR[SPVAP]-1659845160432
GPR[EPVAP]-1659845161551
GPR[EPVS]-1659845161551
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845161552
GPR[SPVAP]-1659845161552
GPR[EPVAP]-1659845164493
GPR[EPVS]-1659845164493
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845164494
GPR[SPVAP]-1659845164494
GPR[EPVAP]-1659845165610
GPR[EPVS]-1659845165610
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845165612
GPR[SPVAP]-1659845165612
GPR[EPVAP]-1659845166741
GPR[EPVS]-1659845166741
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845166744
GPR[SPVAP]-1659845166744
GPR[EPVAP]-1659845167850
GPR[EPVS]-1659845167850
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845167852
GPR[SPVAP]-1659845167852
GPR[EPVAP]-1659845168991
GPR[EPVS]-1659845168991
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845168992
GPR[SPVAP]-1659845168992
GPR[EPVAP]-1659845170109
GPR[EPVS]-1659845170109
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845170110
GPR[SPVAP]-1659845170110
GPR[EPVAP]-1659845171221
GPR[EPVS]-1659845171221
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845171222
GPR[SPVAP]-1659845171222
GPR[EPVAP]-1659845172336
GPR[EPVS]-1659845172336
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845172338
GPR[SPVAP]-1659845172338
GPR[EPVAP]-1659845174438
GPR[SPVATF]-1659845174438
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845176417
GPR[EPVS]-1659845176417
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845176419
GPR[SPVAP]-1659845176419
GPR[EPVAP]-1659845177548
GPR[EPVS]-1659845177548
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845177550
GPR[SPVAP]-1659845177550
GPR[EPVAP]-1659845178683
GPR[EPVS]-1659845178683
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845178684
GPR[SPVAP]-1659845178684
GPR[EPVAP]-1659845179789
GPR[EPVS]-1659845179789
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845179791
GPR[SPVAP]-1659845179791
GPR[EPVAP]-1659845180889
GPR[EPVS]-1659845180889
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845180891
GPR[SPVAP]-1659845180891
GPR[EPVAP]-1659845182028
GPR[EPVS]-1659845182028
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845182030
GPR[SPVAP]-1659845182030
GPR[EPVAP]-1659845183133
GPR[EPVS]-1659845183133
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845183135
GPR[SPVAP]-1659845183135
GPR[EPVAP]-1659845184239
GPR[EPVS]-1659845184239
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845184240
GPR[SPVAP]-1659845184240
GPR[EPVAP]-1659845185339
GPR[EPVS]-1659845185339
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845185341
GPR[SPVAP]-1659845185341
GPR[EPVAP]-1659845186471
GPR[EPVS]-1659845186471
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845186474
GPR[SPVAP]-1659845186474
GPR[EPVAP]-1659845187582
GPR[EPVS]-1659845187582
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845187585
GPR[SPVAP]-1659845187585
GPR[EPVAP]-1659845188697
GPR[EPVS]-1659845188697
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845188699
GPR[SPVAP]-1659845188699
GPR[EPVAP]-1659845189802
GPR[EPVS]-1659845189802
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845189806
GPR[SPVAP]-1659845189806
GPR[EPVAP]-1659845190919
GPR[EPVS]-1659845190919
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845190921
GPR[SPVAP]-1659845190921
GPR[EPVAP]-1659845192039
GPR[EPVS]-1659845192039
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845192041
GPR[SPVAP]-1659845192041
GPR[EPVAP]-1659845193159
GPR[EPVS]-1659845193159
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845193161
GPR[SPVAP]-1659845193161
GPR[EPVAP]-1659845194284
GPR[EPVS]-1659845194284
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845194286
GPR[SPVAP]-1659845194286
GPR[EPVAP]-1659845195440
GPR[EPVS]-1659845195440
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845195443
GPR[SPVAP]-1659845195443
GPR[EPVAP]-1659845196543
GPR[EPVS]-1659845196543
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845196545
GPR[SPVAP]-1659845196545
GPR[EPVAP]-1659845197660
GPR[EPVS]-1659845197660
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845197661
GPR[SPVAP]-1659845197661
GPR[EPVAP]-1659845198772
GPR[EPVS]-1659845198773
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845198774
GPR[SPVAP]-1659845198774
GPR[EPVAP]-1659845199876
GPR[EPVS]-1659845199876
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845199878
GPR[SPVAP]-1659845199878
GPR[EPVAP]-1659845200982
GPR[EPVS]-1659845200982
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845200985
GPR[SPVAP]-1659845200985
GPR[EPVAP]-1659845202113
GPR[EPVS]-1659845202113
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845202114
GPR[SPVAP]-1659845202114
GPR[EPVAP]-1659845203224
GPR[EPVS]-1659845203224
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845203225
GPR[SPVAP]-1659845203225
GPR[EPVAP]-1659845204335
GPR[EPVS]-1659845204335
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845204337
GPR[SPVAP]-1659845204338
GPR[EPVAP]-1659845205476
GPR[EPVS]-1659845205476
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845205480
GPR[SPVAP]-1659845205480
GPR[EPVAP]-1659845206589
GPR[EPVS]-1659845206589
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659845206591
GPR[SPVAP]-1659845206591
GPR[EPVAP]-1659845207702
GPR[EPVS]-1659845207703
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659845207704
GPR[SPVAP]-1659845207704
GPR[EPVAP]-1659845208816
GPR[EPVS]-1659845208816
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659845208817
GPR[SPVAP]-1659845208817
GPR[EPVAP]-1659845209931
GPR[EPVS]-1659845209931
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845209934
GPR[SPVAP]-1659845209934
GPR[EPVAP]-1659845211071
GPR[EPVS]-1659845211071
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845211072
GPR[SPVAP]-1659845211072
GPR[EPVAP]-1659845212193
GPR[EPVS]-1659845212193
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845212195
GPR[SPVAP]-1659845212195
GPR[EPVAP]-1659845213325
GPR[EPVS]-1659845213325
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845213327
GPR[SPVAP]-1659845213327
GPR[EPVAP]-1659845214433
GPR[EPVS]-1659845214433
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845214435
GPR[SPVAP]-1659845214435
GPR[EPVAP]-1659845215541
GPR[EPVS]-1659845215541
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845215542
GPR[SPVAP]-1659845215542
GPR[EPVAP]-1659845216678
GPR[EPVS]-1659845216678
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845216683
GPR[SPVAP]-1659845216683
GPR[EPVAP]-1659845217782
GPR[EPVS]-1659845217782
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845217784
GPR[SPVAP]-1659845217784
GPR[EPVAP]-1659845218889
GPR[EPVS]-1659845218889
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845218893
GPR[SPVAP]-1659845218893
GPR[EPVAP]-1659845220004
GPR[EPVS]-1659845220004
GPR[ESUN]-1659845220005
GPR[SSUN]-1659845220005
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659845220802
GPR[SSUN]-1659845220802
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845227443
GPR[SPVAP]-1659845227443
GPR[EPVAP]-1659845233884
GPR[SPVATF]-1659845233884
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845235887
GPR[EPVS]-1659845235887
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845235888
GPR[SPVAP]-1659845235888
GPR[EPVAP]-1659845238757
GPR[EPVS]-1659845238757
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845238759
GPR[SPVAP]-1659845238759
GPR[EPVAP]-1659845240803
GPR[SPVATF]-1659845240803
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845242785
GPR[EPVS]-1659845242785
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845242786
GPR[SPVAP]-1659845242786
GPR[EPVAP]-1659845243932
GPR[EPVS]-1659845243932
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845243934
GPR[SPVAP]-1659845243934
GPR[EPVAP]-1659845245080
GPR[EPVS]-1659845245080
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845245082
GPR[SPVAP]-1659845245082
GPR[EPVAP]-1659845246191
GPR[EPVS]-1659845246191
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845246192
GPR[SPVAP]-1659845246192
GPR[EPVAP]-1659845247293
GPR[EPVS]-1659845247293
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845247295
GPR[SPVAP]-1659845247295
GPR[EPVAP]-1659845248396
GPR[EPVS]-1659845248396
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845248398
GPR[SPVAP]-1659845248398
GPR[EPVAP]-1659845249508
GPR[EPVS]-1659845249508
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845249510
GPR[SPVAP]-1659845249510
GPR[EPVAP]-1659845250620
GPR[EPVS]-1659845250620
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845250623
GPR[SPVAP]-1659845250623
GPR[EPVAP]-1659845251741
GPR[EPVS]-1659845251741
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845251743
GPR[SPVAP]-1659845251743
GPR[EPVAP]-1659845252851
GPR[EPVS]-1659845252851
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845252853
GPR[SPVAP]-1659845252853
GPR[EPVAP]-1659845253980
GPR[EPVS]-1659845253980
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845253982
GPR[SPVAP]-1659845253982
GPR[EPVAP]-1659845255088
GPR[EPVS]-1659845255088
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845255090
GPR[SPVAP]-1659845255090
GPR[EPVAP]-1659845256203
GPR[EPVS]-1659845256203
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845256205
GPR[SPVAP]-1659845256205
GPR[EPVAP]-1659845257347
GPR[EPVS]-1659845257347
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845257349
GPR[SPVAP]-1659845257349
GPR[EPVAP]-1659845258455
GPR[EPVS]-1659845258455
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845258457
GPR[SPVAP]-1659845258457
GPR[EPVAP]-1659845259581
GPR[EPVS]-1659845259581
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845259583
GPR[SPVAP]-1659845259583
GPR[EPVAP]-1659845260705
GPR[EPVS]-1659845260705
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845260707
GPR[SPVAP]-1659845260707
GPR[EPVAP]-1659845261825
GPR[EPVS]-1659845261825
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845261827
GPR[SPVAP]-1659845261827
GPR[EPVAP]-1659845262933
GPR[EPVS]-1659845262933
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845262934
GPR[SPVAP]-1659845262934
GPR[EPVAP]-1659845264041
GPR[EPVS]-1659845264041
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845264043
GPR[SPVAP]-1659845264043
GPR[EPVAP]-1659845265145
GPR[EPVS]-1659845265145
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845265146
GPR[SPVAP]-1659845265146
GPR[EPVAP]-1659845266252
GPR[EPVS]-1659845266252
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845266254
GPR[SPVAP]-1659845266254
GPR[EPVAP]-1659845267371
GPR[EPVS]-1659845267371
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845267374
GPR[SPVAP]-1659845267374
GPR[EPVAP]-1659845268479
GPR[EPVS]-1659845268479
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845268481
GPR[SPVAP]-1659845268481
GPR[EPVAP]-1659845269585
GPR[EPVS]-1659845269585
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845269586
GPR[SPVAP]-1659845269586
GPR[EPVAP]-1659845270700
GPR[EPVS]-1659845270700
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845270703
GPR[SPVAP]-1659845270703
GPR[EPVAP]-1659845271812
GPR[EPVS]-1659845271812
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845271813
GPR[SPVAP]-1659845271813
GPR[EPVAP]-1659845272920
GPR[EPVS]-1659845272920
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845272922
GPR[SPVAP]-1659845272922
GPR[EPVAP]-1659845274028
GPR[EPVS]-1659845274028
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845274030
GPR[SPVAP]-1659845274030
GPR[EPVAP]-1659845275138
GPR[EPVS]-1659845275138
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845275140
GPR[SPVAP]-1659845275140
GPR[EPVAP]-1659845276249
GPR[EPVS]-1659845276249
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845276251
GPR[SPVAP]-1659845276251
GPR[EPVAP]-1659845277364
GPR[EPVS]-1659845277364
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845277366
GPR[SPVAP]-1659845277366
GPR[EPVAP]-1659845278500
GPR[EPVS]-1659845278500
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845278502
GPR[SPVAP]-1659845278502
GPR[EPVAP]-1659845279616
GPR[EPVS]-1659845279616
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845279618
GPR[SPVAP]-1659845279618
GPR[EPVAP]-1659845280725
GPR[EPVS]-1659845280725
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845280727
GPR[SPVAP]-1659845280727
GPR[EPVAP]-1659845281852
GPR[EPVS]-1659845281852
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845281854
GPR[SPVAP]-1659845281854
GPR[EPVAP]-1659845282965
GPR[EPVS]-1659845282965
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845282967
GPR[SPVAP]-1659845282967
GPR[EPVAP]-1659845284073
GPR[EPVS]-1659845284073
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845284075
GPR[SPVAP]-1659845284075
GPR[EPVAP]-1659845285189
GPR[EPVS]-1659845285189
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845285190
GPR[SPVAP]-1659845285190
GPR[EPVAP]-1659845286289
GPR[EPVS]-1659845286289
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845286291
GPR[SPVAP]-1659845286291
GPR[EPVAP]-1659845287404
GPR[EPVS]-1659845287404
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845287406
GPR[SPVAP]-1659845287406
GPR[EPVAP]-1659845288527
GPR[EPVS]-1659845288527
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845288529
GPR[SPVAP]-1659845288529
GPR[EPVAP]-1659845289638
GPR[EPVS]-1659845289638
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845289640
GPR[SPVAP]-1659845289640
GPR[EPVAP]-1659845290747
GPR[EPVS]-1659845290747
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845290748
GPR[SPVAP]-1659845290748
GPR[EPVAP]-1659845291861
GPR[EPVS]-1659845291861
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845291864
GPR[SPVAP]-1659845291864
GPR[EPVAP]-1659845292976
GPR[EPVS]-1659845292976
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845292978
GPR[SPVAP]-1659845292978
GPR[EPVAP]-1659845294132
GPR[EPVS]-1659845294132
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845294134
GPR[SPVAP]-1659845294134
GPR[EPVAP]-1659845295235
GPR[EPVS]-1659845295235
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845295237
GPR[SPVAP]-1659845295237
GPR[EPVAP]-1659845296382
GPR[EPVS]-1659845296382
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845296383
GPR[SPVAP]-1659845296383
GPR[EPVAP]-1659845297509
GPR[EPVS]-1659845297509
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845297511
GPR[SPVAP]-1659845297511
GPR[EPVAP]-1659845298609
GPR[EPVS]-1659845298609
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845298610
GPR[SPVAP]-1659845298610
GPR[EPVAP]-1659845299711
GPR[EPVS]-1659845299711
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845299715
GPR[SPVAP]-1659845299715
GPR[EPVAP]-1659845300837
GPR[EPVS]-1659845300837
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845300841
GPR[SPVAP]-1659845300841
GPR[EPVAP]-1659845301955
GPR[EPVS]-1659845301955
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845301958
GPR[SPVAP]-1659845301958
GPR[EPVAP]-1659845303063
GPR[EPVS]-1659845303063
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845303064
GPR[SPVAP]-1659845303064
GPR[EPVAP]-1659845304170
GPR[EPVS]-1659845304170
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845304173
GPR[SPVAP]-1659845304173
GPR[EPVAP]-1659845305293
GPR[EPVS]-1659845305293
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845305297
GPR[SPVAP]-1659845305297
GPR[EPVAP]-1659845306434
GPR[EPVS]-1659845306434
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845306436
GPR[SPVAP]-1659845306436
GPR[EPVAP]-1659845307567
GPR[EPVS]-1659845307567
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845307569
GPR[SPVAP]-1659845307569
GPR[EPVAP]-1659845310384
GPR[EPVS]-1659845310384
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845310386
GPR[SPVAP]-1659845310386
GPR[EPVAP]-1659845311543
GPR[EPVS]-1659845311543
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845311545
GPR[SPVAP]-1659845311545
GPR[EPVAP]-1659845312681
GPR[EPVS]-1659845312681
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845312682
GPR[SPVAP]-1659845312682
GPR[EPVAP]-1659845313797
GPR[EPVS]-1659845313797
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845313799
GPR[SPVAP]-1659845313799
GPR[EPVAP]-1659845314926
GPR[EPVS]-1659845314926
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845314930
GPR[SPVAP]-1659845314930
GPR[EPVAP]-1659845316032
GPR[EPVS]-1659845316032
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845316034
GPR[SPVAP]-1659845316034
GPR[EPVAP]-1659845317133
GPR[EPVS]-1659845317133
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845317135
GPR[SPVAP]-1659845317135
GPR[EPVAP]-1659845318279
GPR[EPVS]-1659845318279
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845318281
GPR[SPVAP]-1659845318281
GPR[EPVAP]-1659845319382
GPR[EPVS]-1659845319382
========
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845319388
GPR[SPVAP]-1659845319388
GPR[EPVAP]-1659845320503
GPR[EPVS]-1659845320503
========
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845320507
GPR[SPVAP]-1659845320507
GPR[EPVAP]-1659845321633
GPR[EPVS]-1659845321633
GPR[ESUN]-1659845321634
GPR[SSUN]-1659845321634
org.apache.commons.math3.linear.EigenDecomposition,579
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

GPR[ESUN]-1659845327755
GPR[SSUN]-1659845327755
GPR[ESUN]-1659845327755
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659845328424
GPR[EFL]-1659845328427
GPR[SFP]-1659845328427
TIMEOUT : 600000
GPR[SSUN]-1659845328431
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659845330389
GPR[SPVAP]-1659845330389
GPR[EPVAP]-1659845336914
GPR[SPVATF]-1659845336914
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 0
GPR[EPVATF]-1659845339177
GPR[SPVATR]-1659845339178
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659845406799
GPR[EPVS]-1659845406799
GPR[PF]-1659845406799
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/7/patch_78376_1_ts_1659845406799.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM6363109867589921050/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/7/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/7/patch_78376_1_ts_1659845406799.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659845406810
GPR[SPVAP]-1659845406810
GPR[EPVAP]-1659845408809
GPR[SPVATF]-1659845408809
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845410929
GPR[EPVS]-1659845410929
GPR[ESUN]-1659845410930
GPR[SSUN]-1659845410930
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659845413000
GPR[SPVAP]-1659845413000
GPR[EPVAP]-1659845419521
GPR[SPVATF]-1659845419521
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845421724
GPR[EPVS]-1659845421724
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659845421725
GPR[SPVAP]-1659845421725
GPR[EPVAP]-1659845423821
GPR[SPVATF]-1659845423821
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845425992
GPR[EPVS]-1659845425992
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659845425994
GPR[SPVAP]-1659845425994
GPR[EPVAP]-1659845428059
GPR[SPVATF]-1659845428059
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845430224
GPR[EPVS]-1659845430224
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659845430225
GPR[SPVAP]-1659845430225
GPR[EPVAP]-1659845432279
GPR[SPVATF]-1659845432279
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845434454
GPR[EPVS]-1659845434454
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659845434455
GPR[SPVAP]-1659845434455
GPR[EPVAP]-1659845436535
GPR[SPVATF]-1659845436535
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845438709
GPR[EPVS]-1659845438709
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659845438710
GPR[SPVAP]-1659845438710
GPR[EPVAP]-1659845440864
GPR[SPVATF]-1659845440864
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845443061
GPR[EPVS]-1659845443061
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659845443063
GPR[SPVAP]-1659845443063
GPR[EPVAP]-1659845445128
GPR[SPVATF]-1659845445128
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845447269
GPR[EPVS]-1659845447269
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659845447271
GPR[SPVAP]-1659845447271
GPR[EPVAP]-1659845449317
GPR[SPVATF]-1659845449317
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845451483
GPR[EPVS]-1659845451483
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659845451484
GPR[SPVAP]-1659845451484
GPR[EPVAP]-1659845455224
GPR[SPVATF]-1659845455224
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845457356
GPR[EPVS]-1659845457356
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659845457358
GPR[SPVAP]-1659845457358
GPR[EPVAP]-1659845459421
GPR[SPVATF]-1659845459421
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845461564
GPR[EPVS]-1659845461564
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659845461565
GPR[SPVAP]-1659845461565
GPR[EPVAP]-1659845463629
GPR[SPVATF]-1659845463629
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845465816
GPR[EPVS]-1659845465816
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659845465818
GPR[SPVAP]-1659845465818
GPR[EPVAP]-1659845467901
GPR[SPVATF]-1659845467901
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845470065
GPR[EPVS]-1659845470065
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659845470066
GPR[SPVAP]-1659845470066
GPR[EPVAP]-1659845472157
GPR[SPVATF]-1659845472157
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845474304
GPR[EPVS]-1659845474304
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659845474306
GPR[SPVAP]-1659845474306
GPR[EPVAP]-1659845476345
GPR[SPVATF]-1659845476345
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845478541
GPR[EPVS]-1659845478541
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659845478543
GPR[SPVAP]-1659845478543
GPR[EPVAP]-1659845480588
GPR[SPVATF]-1659845480588
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845482777
GPR[EPVS]-1659845482777
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659845482779
GPR[SPVAP]-1659845482779
GPR[EPVAP]-1659845484837
GPR[SPVATF]-1659845484837
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845486993
GPR[EPVS]-1659845486993
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659845486995
GPR[SPVAP]-1659845486995
GPR[EPVAP]-1659845489033
GPR[SPVATF]-1659845489033
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845491189
GPR[EPVS]-1659845491189
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659845491191
GPR[SPVAP]-1659845491191
GPR[EPVAP]-1659845493227
GPR[SPVATF]-1659845493227
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845495365
GPR[EPVS]-1659845495365
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659845495367
GPR[SPVAP]-1659845495367
GPR[EPVAP]-1659845497440
GPR[SPVATF]-1659845497440
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845499590
GPR[EPVS]-1659845499590
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659845499592
GPR[SPVAP]-1659845499592
GPR[EPVAP]-1659845501637
GPR[SPVATF]-1659845501637
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845503771
GPR[EPVS]-1659845503771
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659845503772
GPR[SPVAP]-1659845503772
GPR[EPVAP]-1659845505844
GPR[SPVATF]-1659845505844
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845507998
GPR[EPVS]-1659845507998
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659845508000
GPR[SPVAP]-1659845508000
GPR[EPVAP]-1659845510085
GPR[SPVATF]-1659845510085
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845512300
GPR[EPVS]-1659845512300
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659845512302
GPR[SPVAP]-1659845512302
GPR[EPVAP]-1659845514373
GPR[SPVATF]-1659845514373
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845516535
GPR[EPVS]-1659845516535
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659845516537
GPR[SPVAP]-1659845516537
GPR[EPVAP]-1659845518560
GPR[SPVATF]-1659845518560
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845520727
GPR[EPVS]-1659845520727
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659845520728
GPR[SPVAP]-1659845520728
GPR[EPVAP]-1659845522806
GPR[SPVATF]-1659845522806
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845524959
GPR[EPVS]-1659845524959
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659845524960
GPR[SPVAP]-1659845524960
GPR[EPVAP]-1659845528561
GPR[SPVATF]-1659845528561
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845530723
GPR[EPVS]-1659845530723
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659845530724
GPR[SPVAP]-1659845530724
GPR[EPVAP]-1659845532793
GPR[SPVATF]-1659845532793
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845535032
GPR[EPVS]-1659845535032
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659845535033
GPR[SPVAP]-1659845535033
GPR[EPVAP]-1659845537076
GPR[SPVATF]-1659845537076
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845539200
GPR[EPVS]-1659845539200
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659845539202
GPR[SPVAP]-1659845539202
GPR[EPVAP]-1659845541222
GPR[SPVATF]-1659845541222
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845543360
GPR[EPVS]-1659845543360
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659845543362
GPR[SPVAP]-1659845543362
GPR[EPVAP]-1659845545401
GPR[SPVATF]-1659845545401
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845547560
GPR[EPVS]-1659845547560
GPR[ESUN]-1659845547562
GPR[SSUN]-1659845547562
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845554557
GPR[SPVAP]-1659845554557
GPR[EPVAP]-1659845561099
GPR[SPVATF]-1659845561099
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845563081
GPR[EPVS]-1659845563081
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659845563083
GPR[SPVAP]-1659845563083
GPR[EPVAP]-1659845564208
GPR[EPVS]-1659845564208
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845564210
GPR[SPVAP]-1659845564210
GPR[EPVAP]-1659845565320
GPR[EPVS]-1659845565320
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845565322
GPR[SPVAP]-1659845565322
GPR[EPVAP]-1659845566457
GPR[EPVS]-1659845566457
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845566460
GPR[SPVAP]-1659845566460
GPR[EPVAP]-1659845567569
GPR[EPVS]-1659845567569
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845567571
GPR[SPVAP]-1659845567571
GPR[EPVAP]-1659845568677
GPR[EPVS]-1659845568677
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845568678
GPR[SPVAP]-1659845568678
GPR[EPVAP]-1659845569819
GPR[EPVS]-1659845569819
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845569822
GPR[SPVAP]-1659845569822
GPR[EPVAP]-1659845571901
GPR[SPVATF]-1659845571901
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845574029
GPR[EPVS]-1659845574029
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845574030
GPR[SPVAP]-1659845574030
GPR[EPVAP]-1659845575206
GPR[EPVS]-1659845575206
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845575208
GPR[SPVAP]-1659845575208
GPR[EPVAP]-1659845576313
GPR[EPVS]-1659845576313
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845576315
GPR[SPVAP]-1659845576315
GPR[EPVAP]-1659845577413
GPR[EPVS]-1659845577413
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845577414
GPR[SPVAP]-1659845577414
GPR[EPVAP]-1659845578551
GPR[EPVS]-1659845578551
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845578553
GPR[SPVAP]-1659845578553
GPR[EPVAP]-1659845579653
GPR[EPVS]-1659845579653
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845579655
GPR[SPVAP]-1659845579655
GPR[EPVAP]-1659845580765
GPR[EPVS]-1659845580765
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845580766
GPR[SPVAP]-1659845580766
GPR[EPVAP]-1659845581895
GPR[EPVS]-1659845581895
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845581896
GPR[SPVAP]-1659845581896
GPR[EPVAP]-1659845583013
GPR[EPVS]-1659845583013
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845583015
GPR[SPVAP]-1659845583015
GPR[EPVAP]-1659845584132
GPR[EPVS]-1659845584132
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845584134
GPR[SPVAP]-1659845584134
GPR[EPVAP]-1659845585258
GPR[EPVS]-1659845585258
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845585261
GPR[SPVAP]-1659845585261
GPR[EPVAP]-1659845586367
GPR[EPVS]-1659845586367
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845586369
GPR[SPVAP]-1659845586369
GPR[EPVAP]-1659845587497
GPR[EPVS]-1659845587497
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845587499
GPR[SPVAP]-1659845587499
GPR[EPVAP]-1659845588607
GPR[EPVS]-1659845588607
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845588609
GPR[SPVAP]-1659845588609
GPR[EPVAP]-1659845590673
GPR[SPVATF]-1659845590673
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845592686
GPR[EPVS]-1659845592686
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659845592687
GPR[SPVAP]-1659845592687
GPR[EPVAP]-1659845593859
GPR[EPVS]-1659845593859
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845593860
GPR[SPVAP]-1659845593860
GPR[EPVAP]-1659845594968
GPR[EPVS]-1659845594968
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845594971
GPR[SPVAP]-1659845594971
GPR[EPVAP]-1659845596065
GPR[EPVS]-1659845596065
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845596066
GPR[SPVAP]-1659845596066
GPR[EPVAP]-1659845597179
GPR[EPVS]-1659845597179
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845597181
GPR[SPVAP]-1659845597181
GPR[EPVAP]-1659845598296
GPR[EPVS]-1659845598296
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845598297
GPR[SPVAP]-1659845598297
GPR[EPVAP]-1659845601133
GPR[EPVS]-1659845601133
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845601134
GPR[SPVAP]-1659845601134
GPR[EPVAP]-1659845602256
GPR[EPVS]-1659845602256
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845602258
GPR[SPVAP]-1659845602258
GPR[EPVAP]-1659845603364
GPR[EPVS]-1659845603364
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845603366
GPR[SPVAP]-1659845603366
GPR[EPVAP]-1659845604492
GPR[EPVS]-1659845604492
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845604494
GPR[SPVAP]-1659845604494
GPR[EPVAP]-1659845605641
GPR[EPVS]-1659845605641
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845605644
GPR[SPVAP]-1659845605644
GPR[EPVAP]-1659845606784
GPR[EPVS]-1659845606784
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845606786
GPR[SPVAP]-1659845606786
GPR[EPVAP]-1659845607919
GPR[EPVS]-1659845607919
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845607920
GPR[SPVAP]-1659845607920
GPR[EPVAP]-1659845609987
GPR[SPVATF]-1659845609987
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845612032
GPR[EPVS]-1659845612032
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845612033
GPR[SPVAP]-1659845612033
GPR[EPVAP]-1659845613136
GPR[EPVS]-1659845613136
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845613138
GPR[SPVAP]-1659845613138
GPR[EPVAP]-1659845614275
GPR[EPVS]-1659845614275
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845614277
GPR[SPVAP]-1659845614277
GPR[EPVAP]-1659845615393
GPR[EPVS]-1659845615393
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845615394
GPR[SPVAP]-1659845615394
GPR[EPVAP]-1659845616505
GPR[EPVS]-1659845616505
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845616507
GPR[SPVAP]-1659845616507
GPR[EPVAP]-1659845617643
GPR[EPVS]-1659845617643
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845617645
GPR[SPVAP]-1659845617645
GPR[EPVAP]-1659845618751
GPR[EPVS]-1659845618751
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845618753
GPR[SPVAP]-1659845618753
GPR[EPVAP]-1659845619875
GPR[EPVS]-1659845619875
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845619879
GPR[SPVAP]-1659845619879
GPR[EPVAP]-1659845621003
GPR[EPVS]-1659845621003
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845621006
GPR[SPVAP]-1659845621006
GPR[EPVAP]-1659845622103
GPR[EPVS]-1659845622103
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845622106
GPR[SPVAP]-1659845622106
GPR[EPVAP]-1659845623203
GPR[EPVS]-1659845623203
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845623204
GPR[SPVAP]-1659845623204
GPR[EPVAP]-1659845624329
GPR[EPVS]-1659845624329
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845624330
GPR[SPVAP]-1659845624330
GPR[EPVAP]-1659845625435
GPR[EPVS]-1659845625435
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845625437
GPR[SPVAP]-1659845625437
GPR[EPVAP]-1659845626547
GPR[EPVS]-1659845626547
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845626548
GPR[SPVAP]-1659845626548
GPR[EPVAP]-1659845627674
GPR[EPVS]-1659845627674
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845627678
GPR[SPVAP]-1659845627678
GPR[EPVAP]-1659845628779
GPR[EPVS]-1659845628779
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845628782
GPR[SPVAP]-1659845628782
GPR[EPVAP]-1659845629893
GPR[EPVS]-1659845629893
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845629895
GPR[SPVAP]-1659845629895
GPR[EPVAP]-1659845631011
GPR[EPVS]-1659845631011
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845631014
GPR[SPVAP]-1659845631014
GPR[EPVAP]-1659845632149
GPR[EPVS]-1659845632149
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845632151
GPR[SPVAP]-1659845632151
GPR[EPVAP]-1659845633267
GPR[EPVS]-1659845633267
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845633269
GPR[SPVAP]-1659845633269
GPR[EPVAP]-1659845634371
GPR[EPVS]-1659845634371
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845634373
GPR[SPVAP]-1659845634373
GPR[EPVAP]-1659845635481
GPR[EPVS]-1659845635481
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845635483
GPR[SPVAP]-1659845635483
GPR[EPVAP]-1659845636598
GPR[EPVS]-1659845636598
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845636600
GPR[SPVAP]-1659845636600
GPR[EPVAP]-1659845637704
GPR[EPVS]-1659845637704
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845637707
GPR[SPVAP]-1659845637707
GPR[EPVAP]-1659845638821
GPR[EPVS]-1659845638821
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845638823
GPR[SPVAP]-1659845638823
GPR[EPVAP]-1659845639928
GPR[EPVS]-1659845639928
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845639929
GPR[SPVAP]-1659845639929
GPR[EPVAP]-1659845641046
GPR[EPVS]-1659845641046
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845641048
GPR[SPVAP]-1659845641048
GPR[EPVAP]-1659845642147
GPR[EPVS]-1659845642147
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845642149
GPR[SPVAP]-1659845642149
GPR[EPVAP]-1659845643247
GPR[EPVS]-1659845643247
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845643250
GPR[SPVAP]-1659845643250
GPR[EPVAP]-1659845645312
GPR[SPVATF]-1659845645312
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845647378
GPR[EPVS]-1659845647378
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845647380
GPR[SPVAP]-1659845647380
GPR[EPVAP]-1659845648496
GPR[EPVS]-1659845648496
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845648499
GPR[SPVAP]-1659845648499
GPR[EPVAP]-1659845649615
GPR[EPVS]-1659845649615
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845649616
GPR[SPVAP]-1659845649616
GPR[EPVAP]-1659845650744
GPR[EPVS]-1659845650744
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845650748
GPR[SPVAP]-1659845650748
GPR[EPVAP]-1659845651864
GPR[EPVS]-1659845651864
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845651867
GPR[SPVAP]-1659845651867
GPR[EPVAP]-1659845652971
GPR[EPVS]-1659845652971
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845652972
GPR[SPVAP]-1659845652972
GPR[EPVAP]-1659845654086
GPR[EPVS]-1659845654086
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845654088
GPR[SPVAP]-1659845654088
GPR[EPVAP]-1659845655231
GPR[EPVS]-1659845655231
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845655235
GPR[SPVAP]-1659845655235
GPR[EPVAP]-1659845656365
GPR[EPVS]-1659845656365
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845656370
GPR[SPVAP]-1659845656370
GPR[EPVAP]-1659845657488
GPR[EPVS]-1659845657488
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845657491
GPR[SPVAP]-1659845657491
GPR[EPVAP]-1659845658598
GPR[EPVS]-1659845658598
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845658600
GPR[SPVAP]-1659845658600
GPR[EPVAP]-1659845659715
GPR[EPVS]-1659845659715
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845659716
GPR[SPVAP]-1659845659716
GPR[EPVAP]-1659845660833
GPR[EPVS]-1659845660833
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845660835
GPR[SPVAP]-1659845660835
GPR[EPVAP]-1659845661967
GPR[EPVS]-1659845661967
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845661971
GPR[SPVAP]-1659845661971
GPR[EPVAP]-1659845663080
GPR[EPVS]-1659845663080
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845663082
GPR[SPVAP]-1659845663082
GPR[EPVAP]-1659845664203
GPR[EPVS]-1659845664203
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845664205
GPR[SPVAP]-1659845664205
GPR[EPVAP]-1659845665315
GPR[EPVS]-1659845665315
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845665316
GPR[SPVAP]-1659845665316
GPR[EPVAP]-1659845666453
GPR[EPVS]-1659845666453
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659845666455
GPR[SPVAP]-1659845666455
GPR[EPVAP]-1659845667563
GPR[EPVS]-1659845667563
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845667566
GPR[SPVAP]-1659845667566
GPR[EPVAP]-1659845668708
GPR[EPVS]-1659845668708
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845668709
GPR[SPVAP]-1659845668709
GPR[EPVAP]-1659845669834
GPR[EPVS]-1659845669834
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845669835
GPR[SPVAP]-1659845669835
GPR[EPVAP]-1659845671137
GPR[EPVS]-1659845671137
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845671153
GPR[SPVAP]-1659845671153
GPR[EPVAP]-1659845673257
GPR[EPVS]-1659845673257
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845673261
GPR[SPVAP]-1659845673261
GPR[EPVAP]-1659845674417
GPR[EPVS]-1659845674418
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845674419
GPR[SPVAP]-1659845674419
GPR[EPVAP]-1659845675531
GPR[EPVS]-1659845675531
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845675532
GPR[SPVAP]-1659845675532
GPR[EPVAP]-1659845676645
GPR[EPVS]-1659845676645
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845676647
GPR[SPVAP]-1659845676647
GPR[EPVAP]-1659845677765
GPR[EPVS]-1659845677765
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845677771
GPR[SPVAP]-1659845677771
GPR[EPVAP]-1659845678874
GPR[EPVS]-1659845678874
GPR[ESUN]-1659845678874
GPR[SSUN]-1659845678874
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845685509
GPR[SPVAP]-1659845685509
GPR[EPVAP]-1659845692061
GPR[SPVATF]-1659845692061
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845694101
GPR[EPVS]-1659845694101
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845694103
GPR[SPVAP]-1659845694103
GPR[EPVAP]-1659845695217
GPR[EPVS]-1659845695217
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845695218
GPR[SPVAP]-1659845695218
GPR[EPVAP]-1659845696349
GPR[EPVS]-1659845696349
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845696350
GPR[SPVAP]-1659845696350
GPR[EPVAP]-1659845698408
GPR[SPVATF]-1659845698408
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845700585
GPR[EPVS]-1659845700585
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659845700587
GPR[SPVAP]-1659845700587
GPR[EPVAP]-1659845701715
GPR[EPVS]-1659845701715
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845701716
GPR[SPVAP]-1659845701716
GPR[EPVAP]-1659845702814
GPR[EPVS]-1659845702814
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845702815
GPR[SPVAP]-1659845702815
GPR[EPVAP]-1659845703919
GPR[EPVS]-1659845703919
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845703921
GPR[SPVAP]-1659845703921
GPR[EPVAP]-1659845705081
GPR[EPVS]-1659845705081
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845705083
GPR[SPVAP]-1659845705083
GPR[EPVAP]-1659845706199
GPR[EPVS]-1659845706199
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845706200
GPR[SPVAP]-1659845706200
GPR[EPVAP]-1659845707311
GPR[EPVS]-1659845707311
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845707312
GPR[SPVAP]-1659845707312
GPR[EPVAP]-1659845708424
GPR[EPVS]-1659845708424
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845708426
GPR[SPVAP]-1659845708426
GPR[EPVAP]-1659845709533
GPR[EPVS]-1659845709533
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845709534
GPR[SPVAP]-1659845709534
GPR[EPVAP]-1659845710645
GPR[EPVS]-1659845710645
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845710646
GPR[SPVAP]-1659845710646
GPR[EPVAP]-1659845711808
GPR[EPVS]-1659845711808
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845711810
GPR[SPVAP]-1659845711810
GPR[EPVAP]-1659845712944
GPR[EPVS]-1659845712944
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845712946
GPR[SPVAP]-1659845712946
GPR[EPVAP]-1659845714087
GPR[EPVS]-1659845714087
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845714089
GPR[SPVAP]-1659845714089
GPR[EPVAP]-1659845715194
GPR[EPVS]-1659845715194
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845715196
GPR[SPVAP]-1659845715196
GPR[EPVAP]-1659845716308
GPR[EPVS]-1659845716308
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845716309
GPR[SPVAP]-1659845716309
GPR[EPVAP]-1659845717413
GPR[EPVS]-1659845717413
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845717414
GPR[SPVAP]-1659845717414
GPR[EPVAP]-1659845718521
GPR[EPVS]-1659845718521
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845718523
GPR[SPVAP]-1659845718523
GPR[EPVAP]-1659845719633
GPR[EPVS]-1659845719633
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845719635
GPR[SPVAP]-1659845719635
GPR[EPVAP]-1659845720744
GPR[EPVS]-1659845720744
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845720747
GPR[SPVAP]-1659845720747
GPR[EPVAP]-1659845721858
GPR[EPVS]-1659845721858
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845721860
GPR[SPVAP]-1659845721860
GPR[EPVAP]-1659845722985
GPR[EPVS]-1659845722985
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845722986
GPR[SPVAP]-1659845722986
GPR[EPVAP]-1659845724129
GPR[EPVS]-1659845724129
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659845724131
GPR[SPVAP]-1659845724131
GPR[EPVAP]-1659845725233
GPR[EPVS]-1659845725233
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845725235
GPR[SPVAP]-1659845725235
GPR[EPVAP]-1659845726381
GPR[EPVS]-1659845726381
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845726382
GPR[SPVAP]-1659845726382
GPR[EPVAP]-1659845727521
GPR[EPVS]-1659845727521
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845727523
GPR[SPVAP]-1659845727523
GPR[EPVAP]-1659845728664
GPR[EPVS]-1659845728664
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845728667
GPR[SPVAP]-1659845728667
GPR[EPVAP]-1659845729775
GPR[EPVS]-1659845729775
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845729777
GPR[SPVAP]-1659845729777
GPR[EPVAP]-1659845730886
GPR[EPVS]-1659845730886
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845730887
GPR[SPVAP]-1659845730887
GPR[EPVAP]-1659845732003
GPR[EPVS]-1659845732003
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845732005
GPR[SPVAP]-1659845732005
GPR[EPVAP]-1659845733105
GPR[EPVS]-1659845733105
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845733107
GPR[SPVAP]-1659845733107
GPR[EPVAP]-1659845734208
GPR[EPVS]-1659845734208
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845734210
GPR[SPVAP]-1659845734210
GPR[EPVAP]-1659845735333
GPR[EPVS]-1659845735333
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845735335
GPR[SPVAP]-1659845735335
GPR[EPVAP]-1659845736449
GPR[EPVS]-1659845736449
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845736451
GPR[SPVAP]-1659845736451
GPR[EPVAP]-1659845737583
GPR[EPVS]-1659845737583
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845737585
GPR[SPVAP]-1659845737585
GPR[EPVAP]-1659845738703
GPR[EPVS]-1659845738703
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845738704
GPR[SPVAP]-1659845738704
GPR[EPVAP]-1659845739854
GPR[EPVS]-1659845739854
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845739855
GPR[SPVAP]-1659845739855
GPR[EPVAP]-1659845740966
GPR[EPVS]-1659845740967
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845740968
GPR[SPVAP]-1659845740968
GPR[EPVAP]-1659845742078
GPR[EPVS]-1659845742078
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845742080
GPR[SPVAP]-1659845742080
GPR[EPVAP]-1659845744973
GPR[EPVS]-1659845744973
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845744974
GPR[SPVAP]-1659845744974
GPR[EPVAP]-1659845746085
GPR[EPVS]-1659845746085
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845746087
GPR[SPVAP]-1659845746087
GPR[EPVAP]-1659845747201
GPR[EPVS]-1659845747201
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845747202
GPR[SPVAP]-1659845747202
GPR[EPVAP]-1659845748320
GPR[EPVS]-1659845748320
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845748322
GPR[SPVAP]-1659845748322
GPR[EPVAP]-1659845749441
GPR[EPVS]-1659845749441
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845749443
GPR[SPVAP]-1659845749443
GPR[EPVAP]-1659845750579
GPR[EPVS]-1659845750579
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845750581
GPR[SPVAP]-1659845750581
GPR[EPVAP]-1659845751712
GPR[EPVS]-1659845751712
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845751717
GPR[SPVAP]-1659845751717
GPR[EPVAP]-1659845752876
GPR[EPVS]-1659845752876
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845752878
GPR[SPVAP]-1659845752878
GPR[EPVAP]-1659845753994
GPR[EPVS]-1659845753994
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845753996
GPR[SPVAP]-1659845753996
GPR[EPVAP]-1659845755108
GPR[EPVS]-1659845755108
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845755109
GPR[SPVAP]-1659845755109
GPR[EPVAP]-1659845756215
GPR[EPVS]-1659845756215
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845756217
GPR[SPVAP]-1659845756217
GPR[EPVAP]-1659845757332
GPR[EPVS]-1659845757332
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845757335
GPR[SPVAP]-1659845757335
GPR[EPVAP]-1659845758435
GPR[EPVS]-1659845758435
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845758436
GPR[SPVAP]-1659845758436
GPR[EPVAP]-1659845759545
GPR[EPVS]-1659845759545
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845759547
GPR[SPVAP]-1659845759547
GPR[EPVAP]-1659845760676
GPR[EPVS]-1659845760677
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845760678
GPR[SPVAP]-1659845760678
GPR[EPVAP]-1659845761793
GPR[EPVS]-1659845761793
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845761796
GPR[SPVAP]-1659845761796
GPR[EPVAP]-1659845762908
GPR[EPVS]-1659845762908
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845762909
GPR[SPVAP]-1659845762909
GPR[EPVAP]-1659845764047
GPR[EPVS]-1659845764047
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845764048
GPR[SPVAP]-1659845764048
GPR[EPVAP]-1659845765144
GPR[EPVS]-1659845765144
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845765146
GPR[SPVAP]-1659845765146
GPR[EPVAP]-1659845766234
GPR[EPVS]-1659845766234
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845766235
GPR[SPVAP]-1659845766235
GPR[EPVAP]-1659845767337
GPR[EPVS]-1659845767337
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845767340
GPR[SPVAP]-1659845767340
GPR[EPVAP]-1659845768449
GPR[EPVS]-1659845768449
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845768450
GPR[SPVAP]-1659845768450
GPR[EPVAP]-1659845769576
GPR[EPVS]-1659845769576
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845769579
GPR[SPVAP]-1659845769579
GPR[EPVAP]-1659845770705
GPR[EPVS]-1659845770705
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845770706
GPR[SPVAP]-1659845770706
GPR[EPVAP]-1659845771829
GPR[EPVS]-1659845771829
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845771831
GPR[SPVAP]-1659845771831
GPR[EPVAP]-1659845772970
GPR[EPVS]-1659845772970
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845772972
GPR[SPVAP]-1659845772972
GPR[EPVAP]-1659845774122
GPR[EPVS]-1659845774122
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845774123
GPR[SPVAP]-1659845774123
GPR[EPVAP]-1659845775335
GPR[EPVS]-1659845775335
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845775338
GPR[SPVAP]-1659845775338
GPR[EPVAP]-1659845776479
GPR[EPVS]-1659845776479
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845776481
GPR[SPVAP]-1659845776481
GPR[EPVAP]-1659845777588
GPR[EPVS]-1659845777588
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845777589
GPR[SPVAP]-1659845777589
GPR[EPVAP]-1659845778747
GPR[EPVS]-1659845778747
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845778749
GPR[SPVAP]-1659845778749
GPR[EPVAP]-1659845779866
GPR[EPVS]-1659845779866
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845779868
GPR[SPVAP]-1659845779868
GPR[EPVAP]-1659845780990
GPR[EPVS]-1659845780990
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845780992
GPR[SPVAP]-1659845780992
GPR[EPVAP]-1659845782119
GPR[EPVS]-1659845782119
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845782124
GPR[SPVAP]-1659845782124
GPR[EPVAP]-1659845784180
GPR[SPVATF]-1659845784180
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845786242
GPR[EPVS]-1659845786242
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845786243
GPR[SPVAP]-1659845786243
GPR[EPVAP]-1659845787352
GPR[EPVS]-1659845787352
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845787354
GPR[SPVAP]-1659845787354
GPR[EPVAP]-1659845788454
GPR[EPVS]-1659845788454
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845788456
GPR[SPVAP]-1659845788456
GPR[EPVAP]-1659845789568
GPR[EPVS]-1659845789568
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845789569
GPR[SPVAP]-1659845789569
GPR[EPVAP]-1659845790667
GPR[EPVS]-1659845790667
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845790669
GPR[SPVAP]-1659845790669
GPR[EPVAP]-1659845791802
GPR[EPVS]-1659845791802
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845791804
GPR[SPVAP]-1659845791804
GPR[EPVAP]-1659845792939
GPR[EPVS]-1659845792939
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845792941
GPR[SPVAP]-1659845792941
GPR[EPVAP]-1659845794081
GPR[EPVS]-1659845794081
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845794083
GPR[SPVAP]-1659845794083
GPR[EPVAP]-1659845795205
GPR[EPVS]-1659845795205
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845795207
GPR[SPVAP]-1659845795207
GPR[EPVAP]-1659845796313
GPR[EPVS]-1659845796313
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845796316
GPR[SPVAP]-1659845796316
GPR[EPVAP]-1659845797422
GPR[EPVS]-1659845797422
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845797425
GPR[SPVAP]-1659845797425
GPR[EPVAP]-1659845798548
GPR[EPVS]-1659845798548
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845798550
GPR[SPVAP]-1659845798550
GPR[EPVAP]-1659845799706
GPR[EPVS]-1659845799707
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845799711
GPR[SPVAP]-1659845799711
GPR[EPVAP]-1659845800826
GPR[EPVS]-1659845800826
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845800828
GPR[SPVAP]-1659845800828
GPR[EPVAP]-1659845801947
GPR[EPVS]-1659845801947
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845801949
GPR[SPVAP]-1659845801949
GPR[EPVAP]-1659845803053
GPR[EPVS]-1659845803053
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845803054
GPR[SPVAP]-1659845803054
GPR[EPVAP]-1659845804153
GPR[EPVS]-1659845804153
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845804154
GPR[SPVAP]-1659845804154
GPR[EPVAP]-1659845805249
GPR[EPVS]-1659845805249
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845805251
GPR[SPVAP]-1659845805251
GPR[EPVAP]-1659845806348
GPR[EPVS]-1659845806348
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845806350
GPR[SPVAP]-1659845806350
GPR[EPVAP]-1659845807454
GPR[EPVS]-1659845807454
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845807456
GPR[SPVAP]-1659845807456
GPR[EPVAP]-1659845808580
GPR[EPVS]-1659845808580
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845808582
GPR[SPVAP]-1659845808582
GPR[EPVAP]-1659845809681
GPR[EPVS]-1659845809681
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845809682
GPR[SPVAP]-1659845809682
GPR[EPVAP]-1659845810781
GPR[EPVS]-1659845810781
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845810784
GPR[SPVAP]-1659845810784
GPR[EPVAP]-1659845811909
GPR[EPVS]-1659845811909
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845811910
GPR[SPVAP]-1659845811910
GPR[EPVAP]-1659845813033
GPR[EPVS]-1659845813033
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845813035
GPR[SPVAP]-1659845813035
GPR[EPVAP]-1659845814141
GPR[EPVS]-1659845814141
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845814144
GPR[SPVAP]-1659845814144
GPR[EPVAP]-1659845815238
GPR[EPVS]-1659845815238
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845815242
GPR[SPVAP]-1659845815242
GPR[EPVAP]-1659845816345
GPR[EPVS]-1659845816345
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659845816348
GPR[SPVAP]-1659845816348
GPR[EPVAP]-1659845818916
GPR[EPVS]-1659845818916
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659845818925
GPR[SPVAP]-1659845818925
GPR[EPVAP]-1659845820209
GPR[EPVS]-1659845820209
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659845820210
GPR[SPVAP]-1659845820210
GPR[EPVAP]-1659845821315
GPR[EPVS]-1659845821315
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845821317
GPR[SPVAP]-1659845821317
GPR[EPVAP]-1659845822430
GPR[EPVS]-1659845822430
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845822431
GPR[SPVAP]-1659845822431
GPR[EPVAP]-1659845823538
GPR[EPVS]-1659845823538
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845823541
GPR[SPVAP]-1659845823541
GPR[EPVAP]-1659845824652
GPR[EPVS]-1659845824652
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845824654
GPR[SPVAP]-1659845824654
GPR[EPVAP]-1659845825771
GPR[EPVS]-1659845825771
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845825773
GPR[SPVAP]-1659845825773
GPR[EPVAP]-1659845826881
GPR[EPVS]-1659845826881
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659845826882
GPR[SPVAP]-1659845826882
GPR[EPVAP]-1659845827989
GPR[EPVS]-1659845827989
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845827994
GPR[SPVAP]-1659845827994
GPR[EPVAP]-1659845829093
GPR[EPVS]-1659845829093
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845829095
GPR[SPVAP]-1659845829095
GPR[EPVAP]-1659845830200
GPR[EPVS]-1659845830200
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659845830204
GPR[SPVAP]-1659845830204
GPR[EPVAP]-1659845831311
GPR[EPVS]-1659845831311
GPR[ESUN]-1659845831312
GPR[SSUN]-1659845831312
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659845831949
GPR[SSUN]-1659845831949
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845838530
GPR[SPVAP]-1659845838530
GPR[EPVAP]-1659845845013
GPR[SPVATF]-1659845845013
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845847050
GPR[EPVS]-1659845847050
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845847052
GPR[SPVAP]-1659845847052
GPR[EPVAP]-1659845848209
GPR[EPVS]-1659845848209
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845848211
GPR[SPVAP]-1659845848211
GPR[EPVAP]-1659845850284
GPR[SPVATF]-1659845850284
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659845852487
GPR[EPVS]-1659845852487
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845852488
GPR[SPVAP]-1659845852488
GPR[EPVAP]-1659845853629
GPR[EPVS]-1659845853629
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845853630
GPR[SPVAP]-1659845853630
GPR[EPVAP]-1659845854765
GPR[EPVS]-1659845854765
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845854766
GPR[SPVAP]-1659845854766
GPR[EPVAP]-1659845855879
GPR[EPVS]-1659845855879
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845855880
GPR[SPVAP]-1659845855880
GPR[EPVAP]-1659845856989
GPR[EPVS]-1659845856989
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845856990
GPR[SPVAP]-1659845856990
GPR[EPVAP]-1659845858098
GPR[EPVS]-1659845858098
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845858099
GPR[SPVAP]-1659845858099
GPR[EPVAP]-1659845859231
GPR[EPVS]-1659845859231
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845859233
GPR[SPVAP]-1659845859233
GPR[EPVAP]-1659845860344
GPR[EPVS]-1659845860344
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845860347
GPR[SPVAP]-1659845860347
GPR[EPVAP]-1659845861457
GPR[EPVS]-1659845861457
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845861458
GPR[SPVAP]-1659845861458
GPR[EPVAP]-1659845862571
GPR[EPVS]-1659845862571
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845862572
GPR[SPVAP]-1659845862572
GPR[EPVAP]-1659845863674
GPR[EPVS]-1659845863674
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845863676
GPR[SPVAP]-1659845863676
GPR[EPVAP]-1659845864788
GPR[EPVS]-1659845864788
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845864791
GPR[SPVAP]-1659845864791
GPR[EPVAP]-1659845865925
GPR[EPVS]-1659845865925
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845865926
GPR[SPVAP]-1659845865926
GPR[EPVAP]-1659845867051
GPR[EPVS]-1659845867051
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845867053
GPR[SPVAP]-1659845867053
GPR[EPVAP]-1659845868170
GPR[EPVS]-1659845868170
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845868172
GPR[SPVAP]-1659845868172
GPR[EPVAP]-1659845869307
GPR[EPVS]-1659845869307
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845869308
GPR[SPVAP]-1659845869308
GPR[EPVAP]-1659845870420
GPR[EPVS]-1659845870420
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845870422
GPR[SPVAP]-1659845870422
GPR[EPVAP]-1659845871535
GPR[EPVS]-1659845871535
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845871536
GPR[SPVAP]-1659845871536
GPR[EPVAP]-1659845872640
GPR[EPVS]-1659845872640
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845872642
GPR[SPVAP]-1659845872642
GPR[EPVAP]-1659845873766
GPR[EPVS]-1659845873766
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845873768
GPR[SPVAP]-1659845873768
GPR[EPVAP]-1659845874894
GPR[EPVS]-1659845874894
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845874896
GPR[SPVAP]-1659845874896
GPR[EPVAP]-1659845876009
GPR[EPVS]-1659845876009
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845876011
GPR[SPVAP]-1659845876011
GPR[EPVAP]-1659845877233
GPR[EPVS]-1659845877233
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845877235
GPR[SPVAP]-1659845877235
GPR[EPVAP]-1659845878361
GPR[EPVS]-1659845878361
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845878363
GPR[SPVAP]-1659845878363
GPR[EPVAP]-1659845879475
GPR[EPVS]-1659845879475
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845879476
GPR[SPVAP]-1659845879476
GPR[EPVAP]-1659845880582
GPR[EPVS]-1659845880582
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845880584
GPR[SPVAP]-1659845880584
GPR[EPVAP]-1659845881703
GPR[EPVS]-1659845881703
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845881704
GPR[SPVAP]-1659845881704
GPR[EPVAP]-1659845882811
GPR[EPVS]-1659845882811
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845882813
GPR[SPVAP]-1659845882813
GPR[EPVAP]-1659845883930
GPR[EPVS]-1659845883930
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845883931
GPR[SPVAP]-1659845883931
GPR[EPVAP]-1659845885061
GPR[EPVS]-1659845885061
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845885063
GPR[SPVAP]-1659845885063
GPR[EPVAP]-1659845886181
GPR[EPVS]-1659845886181
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845886183
GPR[SPVAP]-1659845886183
GPR[EPVAP]-1659845887297
GPR[EPVS]-1659845887297
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845887298
GPR[SPVAP]-1659845887298
GPR[EPVAP]-1659845888409
GPR[EPVS]-1659845888409
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845888411
GPR[SPVAP]-1659845888411
GPR[EPVAP]-1659845891792
GPR[EPVS]-1659845891792
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845891793
GPR[SPVAP]-1659845891793
GPR[EPVAP]-1659845892900
GPR[EPVS]-1659845892900
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845892902
GPR[SPVAP]-1659845892902
GPR[EPVAP]-1659845894012
GPR[EPVS]-1659845894012
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845894014
GPR[SPVAP]-1659845894014
GPR[EPVAP]-1659845895173
GPR[EPVS]-1659845895173
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845895175
GPR[SPVAP]-1659845895175
GPR[EPVAP]-1659845896302
GPR[EPVS]-1659845896302
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845896304
GPR[SPVAP]-1659845896304
GPR[EPVAP]-1659845897407
GPR[EPVS]-1659845897407
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845897408
GPR[SPVAP]-1659845897408
GPR[EPVAP]-1659845898523
GPR[EPVS]-1659845898523
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845898525
GPR[SPVAP]-1659845898525
GPR[EPVAP]-1659845899642
GPR[EPVS]-1659845899643
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845899644
GPR[SPVAP]-1659845899644
GPR[EPVAP]-1659845900782
GPR[EPVS]-1659845900782
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845900784
GPR[SPVAP]-1659845900784
GPR[EPVAP]-1659845901891
GPR[EPVS]-1659845901892
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845901893
GPR[SPVAP]-1659845901893
GPR[EPVAP]-1659845903045
GPR[EPVS]-1659845903045
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845903046
GPR[SPVAP]-1659845903046
GPR[EPVAP]-1659845904149
GPR[EPVS]-1659845904149
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845904152
GPR[SPVAP]-1659845904152
GPR[EPVAP]-1659845905308
GPR[EPVS]-1659845905308
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845905309
GPR[SPVAP]-1659845905309
GPR[EPVAP]-1659845906456
GPR[EPVS]-1659845906456
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845906458
GPR[SPVAP]-1659845906458
GPR[EPVAP]-1659845907571
GPR[EPVS]-1659845907571
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845907573
GPR[SPVAP]-1659845907573
GPR[EPVAP]-1659845908686
GPR[EPVS]-1659845908686
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845908687
GPR[SPVAP]-1659845908687
GPR[EPVAP]-1659845909799
GPR[EPVS]-1659845909799
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845909801
GPR[SPVAP]-1659845909801
GPR[EPVAP]-1659845910930
GPR[EPVS]-1659845910930
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845910932
GPR[SPVAP]-1659845910932
GPR[EPVAP]-1659845912096
GPR[EPVS]-1659845912096
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845912101
GPR[SPVAP]-1659845912101
GPR[EPVAP]-1659845913205
GPR[EPVS]-1659845913205
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845913209
GPR[SPVAP]-1659845913209
GPR[EPVAP]-1659845914316
GPR[EPVS]-1659845914316
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845914318
GPR[SPVAP]-1659845914318
GPR[EPVAP]-1659845915428
GPR[EPVS]-1659845915428
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845915430
GPR[SPVAP]-1659845915430
GPR[EPVAP]-1659845916553
GPR[EPVS]-1659845916553
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845916556
GPR[SPVAP]-1659845916556
GPR[EPVAP]-1659845917665
GPR[EPVS]-1659845917665
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845917669
GPR[SPVAP]-1659845917669
GPR[EPVAP]-1659845918795
GPR[EPVS]-1659845918795
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845918797
GPR[SPVAP]-1659845918797
GPR[EPVAP]-1659845919921
GPR[EPVS]-1659845919921
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845919922
GPR[SPVAP]-1659845919922
GPR[EPVAP]-1659845921063
GPR[EPVS]-1659845921063
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845921064
GPR[SPVAP]-1659845921064
GPR[EPVAP]-1659845922197
GPR[EPVS]-1659845922197
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845922199
GPR[SPVAP]-1659845922199
GPR[EPVAP]-1659845923309
GPR[EPVS]-1659845923309
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845923310
GPR[SPVAP]-1659845923310
GPR[EPVAP]-1659845924406
GPR[EPVS]-1659845924406
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845924408
GPR[SPVAP]-1659845924408
GPR[EPVAP]-1659845925511
GPR[EPVS]-1659845925511
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845925514
GPR[SPVAP]-1659845925514
GPR[EPVAP]-1659845926641
GPR[EPVS]-1659845926641
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845926643
GPR[SPVAP]-1659845926643
GPR[EPVAP]-1659845927752
GPR[EPVS]-1659845927752
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659845927754
GPR[SPVAP]-1659845927754
GPR[EPVAP]-1659845928864
GPR[EPVS]-1659845928864
Timeout!
MM Purify? true
GPR[SFL]-1659845929830
GPR[EFL]-1659845929833
GPR[SFP]-1659845929833
TIMEOUT : 600000
GPR[SSUN]-1659845929837
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659845931815
GPR[SPVAP]-1659845931815
GPR[EPVAP]-1659845938326
GPR[SPVATF]-1659845938326
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 0
GPR[EPVATF]-1659845940325
GPR[SPVATR]-1659845940325
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659846006927
GPR[EPVS]-1659846006927
GPR[PF]-1659846006927
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/8/patch_77099_1_ts_1659846006927.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM1649683461593264935/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/8/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/8/patch_77099_1_ts_1659846006927.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659846006938
GPR[SPVAP]-1659846006938
GPR[EPVAP]-1659846009016
GPR[SPVATF]-1659846009016
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846011029
GPR[EPVS]-1659846011029
GPR[ESUN]-1659846011030
GPR[SSUN]-1659846011030
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846013230
GPR[SPVAP]-1659846013230
GPR[EPVAP]-1659846019747
GPR[SPVATF]-1659846019747
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846021775
GPR[EPVS]-1659846021775
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846021776
GPR[SPVAP]-1659846021776
GPR[EPVAP]-1659846023841
GPR[SPVATF]-1659846023841
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846025857
GPR[EPVS]-1659846025857
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846025859
GPR[SPVAP]-1659846025859
GPR[EPVAP]-1659846027936
GPR[SPVATF]-1659846027936
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846029926
GPR[EPVS]-1659846029926
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846029928
GPR[SPVAP]-1659846029928
GPR[EPVAP]-1659846032029
GPR[SPVATF]-1659846032029
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846035775
GPR[EPVS]-1659846035775
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846035776
GPR[SPVAP]-1659846035776
GPR[EPVAP]-1659846037863
GPR[SPVATF]-1659846037863
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846039837
GPR[EPVS]-1659846039837
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846039838
GPR[SPVAP]-1659846039838
GPR[EPVAP]-1659846041914
GPR[SPVATF]-1659846041914
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846043890
GPR[EPVS]-1659846043890
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846043891
GPR[SPVAP]-1659846043891
GPR[EPVAP]-1659846045969
GPR[SPVATF]-1659846045969
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846047949
GPR[EPVS]-1659846047949
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846047951
GPR[SPVAP]-1659846047951
GPR[EPVAP]-1659846050013
GPR[SPVATF]-1659846050013
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846052018
GPR[EPVS]-1659846052018
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846052020
GPR[SPVAP]-1659846052020
GPR[EPVAP]-1659846054137
GPR[SPVATF]-1659846054137
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846056128
GPR[EPVS]-1659846056128
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846056130
GPR[SPVAP]-1659846056130
GPR[EPVAP]-1659846058181
GPR[SPVATF]-1659846058181
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846060158
GPR[EPVS]-1659846060158
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846060159
GPR[SPVAP]-1659846060159
GPR[EPVAP]-1659846062226
GPR[SPVATF]-1659846062227
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846064188
GPR[EPVS]-1659846064188
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846064190
GPR[SPVAP]-1659846064190
GPR[EPVAP]-1659846066302
GPR[SPVATF]-1659846066302
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846068272
GPR[EPVS]-1659846068272
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846068273
GPR[SPVAP]-1659846068273
GPR[EPVAP]-1659846070415
GPR[SPVATF]-1659846070415
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846072385
GPR[EPVS]-1659846072385
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846072386
GPR[SPVAP]-1659846072386
GPR[EPVAP]-1659846074415
GPR[SPVATF]-1659846074415
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846076398
GPR[EPVS]-1659846076398
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846076399
GPR[SPVAP]-1659846076399
GPR[EPVAP]-1659846078447
GPR[SPVATF]-1659846078447
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846080462
GPR[EPVS]-1659846080462
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846080463
GPR[SPVAP]-1659846080463
GPR[EPVAP]-1659846082552
GPR[SPVATF]-1659846082552
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846084558
GPR[EPVS]-1659846084558
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846084560
GPR[SPVAP]-1659846084560
GPR[EPVAP]-1659846086620
GPR[SPVATF]-1659846086620
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846088585
GPR[EPVS]-1659846088585
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846088587
GPR[SPVAP]-1659846088587
GPR[EPVAP]-1659846090629
GPR[SPVATF]-1659846090629
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846092646
GPR[EPVS]-1659846092646
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846092648
GPR[SPVAP]-1659846092648
GPR[EPVAP]-1659846094730
GPR[SPVATF]-1659846094730
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846096702
GPR[EPVS]-1659846096702
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846096704
GPR[SPVAP]-1659846096704
GPR[EPVAP]-1659846098752
GPR[SPVATF]-1659846098752
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846100698
GPR[EPVS]-1659846100698
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846100699
GPR[SPVAP]-1659846100699
GPR[EPVAP]-1659846102765
GPR[SPVATF]-1659846102765
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846104759
GPR[EPVS]-1659846104759
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846104760
GPR[SPVAP]-1659846104760
GPR[EPVAP]-1659846106827
GPR[SPVATF]-1659846106827
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846110502
GPR[EPVS]-1659846110502
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846110503
GPR[SPVAP]-1659846110503
GPR[EPVAP]-1659846112569
GPR[SPVATF]-1659846112569
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846114593
GPR[EPVS]-1659846114593
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846114595
GPR[SPVAP]-1659846114595
GPR[EPVAP]-1659846116658
GPR[SPVATF]-1659846116658
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846118670
GPR[EPVS]-1659846118670
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846118672
GPR[SPVAP]-1659846118672
GPR[EPVAP]-1659846120765
GPR[SPVATF]-1659846120765
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846122722
GPR[EPVS]-1659846122722
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846122724
GPR[SPVAP]-1659846122724
GPR[EPVAP]-1659846124759
GPR[SPVATF]-1659846124759
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846126718
GPR[EPVS]-1659846126718
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846126719
GPR[SPVAP]-1659846126719
GPR[EPVAP]-1659846128778
GPR[SPVATF]-1659846128778
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846130752
GPR[EPVS]-1659846130752
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846130753
GPR[SPVAP]-1659846130753
GPR[EPVAP]-1659846132873
GPR[SPVATF]-1659846132873
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846134882
GPR[EPVS]-1659846134882
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846134883
GPR[SPVAP]-1659846134883
GPR[EPVAP]-1659846136932
GPR[SPVATF]-1659846136932
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846138899
GPR[EPVS]-1659846138899
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846138901
GPR[SPVAP]-1659846138901
GPR[EPVAP]-1659846140945
GPR[SPVATF]-1659846140945
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846142931
GPR[EPVS]-1659846142931
GPR[ESUN]-1659846142932
GPR[SSUN]-1659846142932
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846149937
GPR[SPVAP]-1659846149937
GPR[EPVAP]-1659846156398
GPR[SPVATF]-1659846156398
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846158442
GPR[EPVS]-1659846158442
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659846158444
GPR[SPVAP]-1659846158445
GPR[EPVAP]-1659846159573
GPR[EPVS]-1659846159573
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846159575
GPR[SPVAP]-1659846159575
GPR[EPVAP]-1659846160715
GPR[EPVS]-1659846160715
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846160717
GPR[SPVAP]-1659846160718
GPR[EPVAP]-1659846161824
GPR[EPVS]-1659846161824
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846161827
GPR[SPVAP]-1659846161827
GPR[EPVAP]-1659846162936
GPR[EPVS]-1659846162936
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846162938
GPR[SPVAP]-1659846162938
GPR[EPVAP]-1659846164057
GPR[EPVS]-1659846164057
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846164058
GPR[SPVAP]-1659846164058
GPR[EPVAP]-1659846165207
GPR[EPVS]-1659846165207
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846165210
GPR[SPVAP]-1659846165210
GPR[EPVAP]-1659846167323
GPR[SPVATF]-1659846167323
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846169294
GPR[EPVS]-1659846169294
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846169295
GPR[SPVAP]-1659846169295
GPR[EPVAP]-1659846170432
GPR[EPVS]-1659846170432
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846170434
GPR[SPVAP]-1659846170434
GPR[EPVAP]-1659846171545
GPR[EPVS]-1659846171545
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846171547
GPR[SPVAP]-1659846171547
GPR[EPVAP]-1659846172677
GPR[EPVS]-1659846172677
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846172679
GPR[SPVAP]-1659846172679
GPR[EPVAP]-1659846173776
GPR[EPVS]-1659846173776
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846173777
GPR[SPVAP]-1659846173777
GPR[EPVAP]-1659846174927
GPR[EPVS]-1659846174927
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846174928
GPR[SPVAP]-1659846174928
GPR[EPVAP]-1659846176027
GPR[EPVS]-1659846176027
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846176028
GPR[SPVAP]-1659846176028
GPR[EPVAP]-1659846177136
GPR[EPVS]-1659846177136
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846177137
GPR[SPVAP]-1659846177137
GPR[EPVAP]-1659846178272
GPR[EPVS]-1659846178272
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846178274
GPR[SPVAP]-1659846178274
GPR[EPVAP]-1659846179448
GPR[EPVS]-1659846179448
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846179449
GPR[SPVAP]-1659846179449
GPR[EPVAP]-1659846182450
GPR[EPVS]-1659846182450
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846182458
GPR[SPVAP]-1659846182458
GPR[EPVAP]-1659846183640
GPR[EPVS]-1659846183640
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846183642
GPR[SPVAP]-1659846183642
GPR[EPVAP]-1659846184778
GPR[EPVS]-1659846184778
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846184781
GPR[SPVAP]-1659846184781
GPR[EPVAP]-1659846185909
GPR[EPVS]-1659846185909
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846185910
GPR[SPVAP]-1659846185910
GPR[EPVAP]-1659846187987
GPR[SPVATF]-1659846187987
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846189913
GPR[EPVS]-1659846189913
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659846189915
GPR[SPVAP]-1659846189915
GPR[EPVAP]-1659846191060
GPR[EPVS]-1659846191060
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846191062
GPR[SPVAP]-1659846191062
GPR[EPVAP]-1659846192186
GPR[EPVS]-1659846192186
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846192189
GPR[SPVAP]-1659846192189
GPR[EPVAP]-1659846193290
GPR[EPVS]-1659846193290
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846193292
GPR[SPVAP]-1659846193292
GPR[EPVAP]-1659846194397
GPR[EPVS]-1659846194397
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846194400
GPR[SPVAP]-1659846194400
GPR[EPVAP]-1659846195526
GPR[EPVS]-1659846195526
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846195528
GPR[SPVAP]-1659846195528
GPR[EPVAP]-1659846196639
GPR[EPVS]-1659846196639
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846196641
GPR[SPVAP]-1659846196641
GPR[EPVAP]-1659846197765
GPR[EPVS]-1659846197765
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846197766
GPR[SPVAP]-1659846197766
GPR[EPVAP]-1659846198867
GPR[EPVS]-1659846198867
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846198869
GPR[SPVAP]-1659846198869
GPR[EPVAP]-1659846199979
GPR[EPVS]-1659846199979
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846199981
GPR[SPVAP]-1659846199981
GPR[EPVAP]-1659846201109
GPR[EPVS]-1659846201109
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846201111
GPR[SPVAP]-1659846201111
GPR[EPVAP]-1659846202231
GPR[EPVS]-1659846202231
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846202233
GPR[SPVAP]-1659846202233
GPR[EPVAP]-1659846203375
GPR[EPVS]-1659846203375
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846203377
GPR[SPVAP]-1659846203377
GPR[EPVAP]-1659846205466
GPR[SPVATF]-1659846205466
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846207450
GPR[EPVS]-1659846207450
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846207451
GPR[SPVAP]-1659846207451
GPR[EPVAP]-1659846208556
GPR[EPVS]-1659846208556
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846208558
GPR[SPVAP]-1659846208558
GPR[EPVAP]-1659846209684
GPR[EPVS]-1659846209684
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846209686
GPR[SPVAP]-1659846209686
GPR[EPVAP]-1659846210832
GPR[EPVS]-1659846210832
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846210833
GPR[SPVAP]-1659846210833
GPR[EPVAP]-1659846211939
GPR[EPVS]-1659846211939
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846211941
GPR[SPVAP]-1659846211941
GPR[EPVAP]-1659846213060
GPR[EPVS]-1659846213060
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846213062
GPR[SPVAP]-1659846213062
GPR[EPVAP]-1659846214157
GPR[EPVS]-1659846214157
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846214159
GPR[SPVAP]-1659846214159
GPR[EPVAP]-1659846215264
GPR[EPVS]-1659846215264
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846215267
GPR[SPVAP]-1659846215267
GPR[EPVAP]-1659846216377
GPR[EPVS]-1659846216377
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846216379
GPR[SPVAP]-1659846216379
GPR[EPVAP]-1659846217479
GPR[EPVS]-1659846217479
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846217481
GPR[SPVAP]-1659846217481
GPR[EPVAP]-1659846218601
GPR[EPVS]-1659846218601
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846218603
GPR[SPVAP]-1659846218603
GPR[EPVAP]-1659846219719
GPR[EPVS]-1659846219719
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846219720
GPR[SPVAP]-1659846219720
GPR[EPVAP]-1659846220830
GPR[EPVS]-1659846220830
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846220833
GPR[SPVAP]-1659846220833
GPR[EPVAP]-1659846221966
GPR[EPVS]-1659846221966
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846221967
GPR[SPVAP]-1659846221967
GPR[EPVAP]-1659846223066
GPR[EPVS]-1659846223066
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846223069
GPR[SPVAP]-1659846223069
GPR[EPVAP]-1659846224176
GPR[EPVS]-1659846224176
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846224179
GPR[SPVAP]-1659846224179
GPR[EPVAP]-1659846225317
GPR[EPVS]-1659846225317
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846225319
GPR[SPVAP]-1659846225319
GPR[EPVAP]-1659846226423
GPR[EPVS]-1659846226423
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846226425
GPR[SPVAP]-1659846226426
GPR[EPVAP]-1659846227563
GPR[EPVS]-1659846227563
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846227565
GPR[SPVAP]-1659846227565
GPR[EPVAP]-1659846228668
GPR[EPVS]-1659846228668
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846228670
GPR[SPVAP]-1659846228670
GPR[EPVAP]-1659846229795
GPR[EPVS]-1659846229795
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846229796
GPR[SPVAP]-1659846229796
GPR[EPVAP]-1659846230932
GPR[EPVS]-1659846230932
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846230934
GPR[SPVAP]-1659846230934
GPR[EPVAP]-1659846232073
GPR[EPVS]-1659846232073
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846232074
GPR[SPVAP]-1659846232074
GPR[EPVAP]-1659846233189
GPR[EPVS]-1659846233189
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846233190
GPR[SPVAP]-1659846233190
GPR[EPVAP]-1659846234291
GPR[EPVS]-1659846234291
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846234293
GPR[SPVAP]-1659846234293
GPR[EPVAP]-1659846235396
GPR[EPVS]-1659846235396
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846235398
GPR[SPVAP]-1659846235398
GPR[EPVAP]-1659846236521
GPR[EPVS]-1659846236521
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846236523
GPR[SPVAP]-1659846236523
GPR[EPVAP]-1659846237645
GPR[EPVS]-1659846237645
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846237646
GPR[SPVAP]-1659846237646
GPR[EPVAP]-1659846238747
GPR[EPVS]-1659846238747
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846238750
GPR[SPVAP]-1659846238750
GPR[EPVAP]-1659846240870
GPR[SPVATF]-1659846240870
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846242844
GPR[EPVS]-1659846242844
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846242846
GPR[SPVAP]-1659846242846
GPR[EPVAP]-1659846243957
GPR[EPVS]-1659846243957
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846243959
GPR[SPVAP]-1659846243959
GPR[EPVAP]-1659846245076
GPR[EPVS]-1659846245076
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846245078
GPR[SPVAP]-1659846245078
GPR[EPVAP]-1659846246183
GPR[EPVS]-1659846246183
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846246187
GPR[SPVAP]-1659846246187
GPR[EPVAP]-1659846247294
GPR[EPVS]-1659846247294
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846247296
GPR[SPVAP]-1659846247296
GPR[EPVAP]-1659846248398
GPR[EPVS]-1659846248398
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846248399
GPR[SPVAP]-1659846248399
GPR[EPVAP]-1659846249509
GPR[EPVS]-1659846249509
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846249511
GPR[SPVAP]-1659846249511
GPR[EPVAP]-1659846250617
GPR[EPVS]-1659846250617
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846250621
GPR[SPVAP]-1659846250621
GPR[EPVAP]-1659846251767
GPR[EPVS]-1659846251767
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846251772
GPR[SPVAP]-1659846251773
GPR[EPVAP]-1659846253484
GPR[EPVS]-1659846253484
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846253496
GPR[SPVAP]-1659846253496
GPR[EPVAP]-1659846255448
GPR[EPVS]-1659846255448
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846255451
GPR[SPVAP]-1659846255451
GPR[EPVAP]-1659846256559
GPR[EPVS]-1659846256559
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846256561
GPR[SPVAP]-1659846256561
GPR[EPVAP]-1659846257678
GPR[EPVS]-1659846257678
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846257679
GPR[SPVAP]-1659846257679
GPR[EPVAP]-1659846258809
GPR[EPVS]-1659846258809
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846258813
GPR[SPVAP]-1659846258813
GPR[EPVAP]-1659846259929
GPR[EPVS]-1659846259929
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846259930
GPR[SPVAP]-1659846259930
GPR[EPVAP]-1659846261033
GPR[EPVS]-1659846261033
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846261034
GPR[SPVAP]-1659846261034
GPR[EPVAP]-1659846262143
GPR[EPVS]-1659846262143
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846262144
GPR[SPVAP]-1659846262144
GPR[EPVAP]-1659846263258
GPR[EPVS]-1659846263258
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659846263261
GPR[SPVAP]-1659846263261
GPR[EPVAP]-1659846264385
GPR[EPVS]-1659846264385
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846264387
GPR[SPVAP]-1659846264387
GPR[EPVAP]-1659846265501
GPR[EPVS]-1659846265501
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846265502
GPR[SPVAP]-1659846265502
GPR[EPVAP]-1659846266607
GPR[EPVS]-1659846266607
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846266608
GPR[SPVAP]-1659846266608
GPR[EPVAP]-1659846267704
GPR[EPVS]-1659846267705
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846267711
GPR[SPVAP]-1659846267711
GPR[EPVAP]-1659846268826
GPR[EPVS]-1659846268826
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846268830
GPR[SPVAP]-1659846268830
GPR[EPVAP]-1659846269939
GPR[EPVS]-1659846269939
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846269940
GPR[SPVAP]-1659846269940
GPR[EPVAP]-1659846271041
GPR[EPVS]-1659846271041
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846271042
GPR[SPVAP]-1659846271042
GPR[EPVAP]-1659846272157
GPR[EPVS]-1659846272157
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846272159
GPR[SPVAP]-1659846272159
GPR[EPVAP]-1659846273265
GPR[EPVS]-1659846273265
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846273271
GPR[SPVAP]-1659846273271
GPR[EPVAP]-1659846274377
GPR[EPVS]-1659846274377
GPR[ESUN]-1659846274377
GPR[SSUN]-1659846274377
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846281109
GPR[SPVAP]-1659846281109
GPR[EPVAP]-1659846287596
GPR[SPVATF]-1659846287596
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846289605
GPR[EPVS]-1659846289605
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846289606
GPR[SPVAP]-1659846289606
GPR[EPVAP]-1659846290743
GPR[EPVS]-1659846290743
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846290744
GPR[SPVAP]-1659846290744
GPR[EPVAP]-1659846291877
GPR[EPVS]-1659846291877
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846291878
GPR[SPVAP]-1659846291878
GPR[EPVAP]-1659846293968
GPR[SPVATF]-1659846293968
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846295950
GPR[EPVS]-1659846295950
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659846295952
GPR[SPVAP]-1659846295952
GPR[EPVAP]-1659846297091
GPR[EPVS]-1659846297091
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846297093
GPR[SPVAP]-1659846297093
GPR[EPVAP]-1659846298213
GPR[EPVS]-1659846298213
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846298214
GPR[SPVAP]-1659846298214
GPR[EPVAP]-1659846299319
GPR[EPVS]-1659846299319
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846299321
GPR[SPVAP]-1659846299321
GPR[EPVAP]-1659846300420
GPR[EPVS]-1659846300420
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846300423
GPR[SPVAP]-1659846300423
GPR[EPVAP]-1659846301537
GPR[EPVS]-1659846301537
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846301538
GPR[SPVAP]-1659846301538
GPR[EPVAP]-1659846302641
GPR[EPVS]-1659846302641
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846302643
GPR[SPVAP]-1659846302643
GPR[EPVAP]-1659846303745
GPR[EPVS]-1659846303745
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846303746
GPR[SPVAP]-1659846303746
GPR[EPVAP]-1659846304838
GPR[EPVS]-1659846304838
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846304839
GPR[SPVAP]-1659846304839
GPR[EPVAP]-1659846305955
GPR[EPVS]-1659846305955
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846305957
GPR[SPVAP]-1659846305957
GPR[EPVAP]-1659846307063
GPR[EPVS]-1659846307063
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846307064
GPR[SPVAP]-1659846307064
GPR[EPVAP]-1659846308221
GPR[EPVS]-1659846308221
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846308223
GPR[SPVAP]-1659846308223
GPR[EPVAP]-1659846309350
GPR[EPVS]-1659846309350
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846309352
GPR[SPVAP]-1659846309352
GPR[EPVAP]-1659846310470
GPR[EPVS]-1659846310470
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846310471
GPR[SPVAP]-1659846310471
GPR[EPVAP]-1659846311586
GPR[EPVS]-1659846311586
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846311587
GPR[SPVAP]-1659846311587
GPR[EPVAP]-1659846312725
GPR[EPVS]-1659846312725
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846312727
GPR[SPVAP]-1659846312727
GPR[EPVAP]-1659846313828
GPR[EPVS]-1659846313828
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846313829
GPR[SPVAP]-1659846313829
GPR[EPVAP]-1659846314945
GPR[EPVS]-1659846314945
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846314946
GPR[SPVAP]-1659846314946
GPR[EPVAP]-1659846316075
GPR[EPVS]-1659846316075
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846316078
GPR[SPVAP]-1659846316078
GPR[EPVAP]-1659846317192
GPR[EPVS]-1659846317192
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846317194
GPR[SPVAP]-1659846317194
GPR[EPVAP]-1659846318295
GPR[EPVS]-1659846318295
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846318297
GPR[SPVAP]-1659846318297
GPR[EPVAP]-1659846319406
GPR[EPVS]-1659846319406
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659846319408
GPR[SPVAP]-1659846319408
GPR[EPVAP]-1659846320517
GPR[EPVS]-1659846320517
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846320519
GPR[SPVAP]-1659846320519
GPR[EPVAP]-1659846321637
GPR[EPVS]-1659846321637
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846321638
GPR[SPVAP]-1659846321638
GPR[EPVAP]-1659846322773
GPR[EPVS]-1659846322773
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846322775
GPR[SPVAP]-1659846322775
GPR[EPVAP]-1659846323888
GPR[EPVS]-1659846323888
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846323891
GPR[SPVAP]-1659846323891
GPR[EPVAP]-1659846325075
GPR[EPVS]-1659846325075
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846325085
GPR[SPVAP]-1659846325085
GPR[EPVAP]-1659846327480
GPR[EPVS]-1659846327480
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846327482
GPR[SPVAP]-1659846327482
GPR[EPVAP]-1659846328589
GPR[EPVS]-1659846328589
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846328590
GPR[SPVAP]-1659846328590
GPR[EPVAP]-1659846329706
GPR[EPVS]-1659846329706
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846329707
GPR[SPVAP]-1659846329707
GPR[EPVAP]-1659846330815
GPR[EPVS]-1659846330815
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846330816
GPR[SPVAP]-1659846330816
GPR[EPVAP]-1659846331915
GPR[EPVS]-1659846331915
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846331917
GPR[SPVAP]-1659846331917
GPR[EPVAP]-1659846333055
GPR[EPVS]-1659846333055
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846333057
GPR[SPVAP]-1659846333057
GPR[EPVAP]-1659846334189
GPR[EPVS]-1659846334189
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846334191
GPR[SPVAP]-1659846334191
GPR[EPVAP]-1659846335301
GPR[EPVS]-1659846335301
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846335302
GPR[SPVAP]-1659846335302
GPR[EPVAP]-1659846336403
GPR[EPVS]-1659846336403
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846336405
GPR[SPVAP]-1659846336405
GPR[EPVAP]-1659846337525
GPR[EPVS]-1659846337525
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846337526
GPR[SPVAP]-1659846337526
GPR[EPVAP]-1659846338645
GPR[EPVS]-1659846338645
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846338647
GPR[SPVAP]-1659846338647
GPR[EPVAP]-1659846339755
GPR[EPVS]-1659846339755
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846339756
GPR[SPVAP]-1659846339756
GPR[EPVAP]-1659846340867
GPR[EPVS]-1659846340867
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846340868
GPR[SPVAP]-1659846340868
GPR[EPVAP]-1659846342009
GPR[EPVS]-1659846342009
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846342011
GPR[SPVAP]-1659846342011
GPR[EPVAP]-1659846343132
GPR[EPVS]-1659846343132
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846343134
GPR[SPVAP]-1659846343134
GPR[EPVAP]-1659846344239
GPR[EPVS]-1659846344239
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846344241
GPR[SPVAP]-1659846344241
GPR[EPVAP]-1659846345351
GPR[EPVS]-1659846345351
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846345352
GPR[SPVAP]-1659846345352
GPR[EPVAP]-1659846346459
GPR[EPVS]-1659846346459
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846346464
GPR[SPVAP]-1659846346464
GPR[EPVAP]-1659846347570
GPR[EPVS]-1659846347570
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846347572
GPR[SPVAP]-1659846347572
GPR[EPVAP]-1659846348682
GPR[EPVS]-1659846348682
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846348684
GPR[SPVAP]-1659846348684
GPR[EPVAP]-1659846349789
GPR[EPVS]-1659846349789
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846349791
GPR[SPVAP]-1659846349791
GPR[EPVAP]-1659846350902
GPR[EPVS]-1659846350902
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846350903
GPR[SPVAP]-1659846350903
GPR[EPVAP]-1659846352020
GPR[EPVS]-1659846352020
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846352023
GPR[SPVAP]-1659846352023
GPR[EPVAP]-1659846353151
GPR[EPVS]-1659846353151
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846353153
GPR[SPVAP]-1659846353153
GPR[EPVAP]-1659846354268
GPR[EPVS]-1659846354268
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846354269
GPR[SPVAP]-1659846354269
GPR[EPVAP]-1659846355400
GPR[EPVS]-1659846355400
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846355402
GPR[SPVAP]-1659846355402
GPR[EPVAP]-1659846356530
GPR[EPVS]-1659846356530
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846356651
GPR[SPVAP]-1659846356651
GPR[EPVAP]-1659846357748
GPR[EPVS]-1659846357748
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846357750
GPR[SPVAP]-1659846357750
GPR[EPVAP]-1659846358863
GPR[EPVS]-1659846358863
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846358864
GPR[SPVAP]-1659846358864
GPR[EPVAP]-1659846359961
GPR[EPVS]-1659846359961
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846359963
GPR[SPVAP]-1659846359963
GPR[EPVAP]-1659846361060
GPR[EPVS]-1659846361060
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846361062
GPR[SPVAP]-1659846361062
GPR[EPVAP]-1659846362171
GPR[EPVS]-1659846362171
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846362174
GPR[SPVAP]-1659846362174
GPR[EPVAP]-1659846363283
GPR[EPVS]-1659846363283
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846363284
GPR[SPVAP]-1659846363284
GPR[EPVAP]-1659846364391
GPR[EPVS]-1659846364391
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846364393
GPR[SPVAP]-1659846364393
GPR[EPVAP]-1659846365497
GPR[EPVS]-1659846365497
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846365498
GPR[SPVAP]-1659846365498
GPR[EPVAP]-1659846366602
GPR[EPVS]-1659846366602
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846366604
GPR[SPVAP]-1659846366604
GPR[EPVAP]-1659846367721
GPR[EPVS]-1659846367721
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846367723
GPR[SPVAP]-1659846367723
GPR[EPVAP]-1659846368881
GPR[EPVS]-1659846368881
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846368882
GPR[SPVAP]-1659846368882
GPR[EPVAP]-1659846370008
GPR[EPVS]-1659846370008
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846370010
GPR[SPVAP]-1659846370010
GPR[EPVAP]-1659846371146
GPR[EPVS]-1659846371146
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846371148
GPR[SPVAP]-1659846371148
GPR[EPVAP]-1659846372260
GPR[EPVS]-1659846372260
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846372262
GPR[SPVAP]-1659846372262
GPR[EPVAP]-1659846373408
GPR[EPVS]-1659846373408
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846373409
GPR[SPVAP]-1659846373409
GPR[EPVAP]-1659846374524
GPR[EPVS]-1659846374524
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846374525
GPR[SPVAP]-1659846374525
GPR[EPVAP]-1659846375629
GPR[EPVS]-1659846375629
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846375630
GPR[SPVAP]-1659846375630
GPR[EPVAP]-1659846376769
GPR[EPVS]-1659846376769
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846376771
GPR[SPVAP]-1659846376771
GPR[EPVAP]-1659846378864
GPR[SPVATF]-1659846378864
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846380857
GPR[EPVS]-1659846380857
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846380859
GPR[SPVAP]-1659846380859
GPR[EPVAP]-1659846381993
GPR[EPVS]-1659846381993
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846381994
GPR[SPVAP]-1659846381994
GPR[EPVAP]-1659846383125
GPR[EPVS]-1659846383125
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846383126
GPR[SPVAP]-1659846383126
GPR[EPVAP]-1659846384236
GPR[EPVS]-1659846384236
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846384238
GPR[SPVAP]-1659846384238
GPR[EPVAP]-1659846385330
GPR[EPVS]-1659846385330
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846385332
GPR[SPVAP]-1659846385332
GPR[EPVAP]-1659846386452
GPR[EPVS]-1659846386452
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846386454
GPR[SPVAP]-1659846386454
GPR[EPVAP]-1659846387558
GPR[EPVS]-1659846387558
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846387560
GPR[SPVAP]-1659846387560
GPR[EPVAP]-1659846388681
GPR[EPVS]-1659846388681
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846388682
GPR[SPVAP]-1659846388682
GPR[EPVAP]-1659846389782
GPR[EPVS]-1659846389783
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846389784
GPR[SPVAP]-1659846389784
GPR[EPVAP]-1659846390894
GPR[EPVS]-1659846390895
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846390898
GPR[SPVAP]-1659846390898
GPR[EPVAP]-1659846392019
GPR[EPVS]-1659846392019
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846392022
GPR[SPVAP]-1659846392022
GPR[EPVAP]-1659846393128
GPR[EPVS]-1659846393128
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846393130
GPR[SPVAP]-1659846393130
GPR[EPVAP]-1659846394240
GPR[EPVS]-1659846394240
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846394245
GPR[SPVAP]-1659846394245
GPR[EPVAP]-1659846395356
GPR[EPVS]-1659846395356
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846395358
GPR[SPVAP]-1659846395358
GPR[EPVAP]-1659846396513
GPR[EPVS]-1659846396513
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846396514
GPR[SPVAP]-1659846396514
GPR[EPVAP]-1659846397624
GPR[EPVS]-1659846397624
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846397626
GPR[SPVAP]-1659846397626
GPR[EPVAP]-1659846398738
GPR[EPVS]-1659846398739
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846398740
GPR[SPVAP]-1659846398740
GPR[EPVAP]-1659846400053
GPR[EPVS]-1659846400053
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846400065
GPR[SPVAP]-1659846400065
GPR[EPVAP]-1659846402428
GPR[EPVS]-1659846402428
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846402430
GPR[SPVAP]-1659846402430
GPR[EPVAP]-1659846403535
GPR[EPVS]-1659846403535
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846403538
GPR[SPVAP]-1659846403538
GPR[EPVAP]-1659846404673
GPR[EPVS]-1659846404673
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846404675
GPR[SPVAP]-1659846404675
GPR[EPVAP]-1659846405781
GPR[EPVS]-1659846405781
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846405783
GPR[SPVAP]-1659846405783
GPR[EPVAP]-1659846406894
GPR[EPVS]-1659846406894
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846406896
GPR[SPVAP]-1659846406896
GPR[EPVAP]-1659846408013
GPR[EPVS]-1659846408013
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846408014
GPR[SPVAP]-1659846408014
GPR[EPVAP]-1659846409161
GPR[EPVS]-1659846409161
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846409162
GPR[SPVAP]-1659846409162
GPR[EPVAP]-1659846410283
GPR[EPVS]-1659846410283
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846410286
GPR[SPVAP]-1659846410286
GPR[EPVAP]-1659846411397
GPR[EPVS]-1659846411397
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846411400
GPR[SPVAP]-1659846411401
GPR[EPVAP]-1659846412525
GPR[EPVS]-1659846412525
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659846412528
GPR[SPVAP]-1659846412528
GPR[EPVAP]-1659846413634
GPR[EPVS]-1659846413634
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659846413635
GPR[SPVAP]-1659846413635
GPR[EPVAP]-1659846414772
GPR[EPVS]-1659846414772
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659846414773
GPR[SPVAP]-1659846414773
GPR[EPVAP]-1659846415904
GPR[EPVS]-1659846415904
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846415906
GPR[SPVAP]-1659846415906
GPR[EPVAP]-1659846417012
GPR[EPVS]-1659846417012
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846417013
GPR[SPVAP]-1659846417013
GPR[EPVAP]-1659846418136
GPR[EPVS]-1659846418136
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846418138
GPR[SPVAP]-1659846418138
GPR[EPVAP]-1659846419245
GPR[EPVS]-1659846419245
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846419247
GPR[SPVAP]-1659846419247
GPR[EPVAP]-1659846420370
GPR[EPVS]-1659846420370
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846420372
GPR[SPVAP]-1659846420372
GPR[EPVAP]-1659846421497
GPR[EPVS]-1659846421497
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846421498
GPR[SPVAP]-1659846421498
GPR[EPVAP]-1659846422635
GPR[EPVS]-1659846422635
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846422640
GPR[SPVAP]-1659846422640
GPR[EPVAP]-1659846423789
GPR[EPVS]-1659846423789
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846423791
GPR[SPVAP]-1659846423791
GPR[EPVAP]-1659846424921
GPR[EPVS]-1659846424921
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846424926
GPR[SPVAP]-1659846424926
GPR[EPVAP]-1659846426048
GPR[EPVS]-1659846426048
GPR[ESUN]-1659846426048
GPR[SSUN]-1659846426048
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659846426740
GPR[SSUN]-1659846426740
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846433379
GPR[SPVAP]-1659846433379
GPR[EPVAP]-1659846439815
GPR[SPVATF]-1659846439815
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846441818
GPR[EPVS]-1659846441818
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846441819
GPR[SPVAP]-1659846441819
GPR[EPVAP]-1659846442965
GPR[EPVS]-1659846442965
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846442967
GPR[SPVAP]-1659846442967
GPR[EPVAP]-1659846445068
GPR[SPVATF]-1659846445068
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846447053
GPR[EPVS]-1659846447053
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846447055
GPR[SPVAP]-1659846447055
GPR[EPVAP]-1659846448199
GPR[EPVS]-1659846448199
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846448201
GPR[SPVAP]-1659846448201
GPR[EPVAP]-1659846449317
GPR[EPVS]-1659846449317
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846449319
GPR[SPVAP]-1659846449319
GPR[EPVAP]-1659846450417
GPR[EPVS]-1659846450417
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846450419
GPR[SPVAP]-1659846450419
GPR[EPVAP]-1659846451535
GPR[EPVS]-1659846451535
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846451537
GPR[SPVAP]-1659846451537
GPR[EPVAP]-1659846452653
GPR[EPVS]-1659846452653
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846452654
GPR[SPVAP]-1659846452654
GPR[EPVAP]-1659846453770
GPR[EPVS]-1659846453770
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846453771
GPR[SPVAP]-1659846453771
GPR[EPVAP]-1659846454883
GPR[EPVS]-1659846454883
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846454886
GPR[SPVAP]-1659846454886
GPR[EPVAP]-1659846455985
GPR[EPVS]-1659846455986
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846455987
GPR[SPVAP]-1659846455987
GPR[EPVAP]-1659846457100
GPR[EPVS]-1659846457100
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846457102
GPR[SPVAP]-1659846457102
GPR[EPVAP]-1659846458231
GPR[EPVS]-1659846458231
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846458232
GPR[SPVAP]-1659846458232
GPR[EPVAP]-1659846459341
GPR[EPVS]-1659846459341
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846459343
GPR[SPVAP]-1659846459343
GPR[EPVAP]-1659846460504
GPR[EPVS]-1659846460504
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846460506
GPR[SPVAP]-1659846460506
GPR[EPVAP]-1659846461625
GPR[EPVS]-1659846461625
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846461626
GPR[SPVAP]-1659846461626
GPR[EPVAP]-1659846462758
GPR[EPVS]-1659846462758
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846462759
GPR[SPVAP]-1659846462759
GPR[EPVAP]-1659846463885
GPR[EPVS]-1659846463885
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846463887
GPR[SPVAP]-1659846463887
GPR[EPVAP]-1659846465000
GPR[EPVS]-1659846465000
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846465002
GPR[SPVAP]-1659846465002
GPR[EPVAP]-1659846466104
GPR[EPVS]-1659846466104
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846466106
GPR[SPVAP]-1659846466106
GPR[EPVAP]-1659846467217
GPR[EPVS]-1659846467217
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846467219
GPR[SPVAP]-1659846467219
GPR[EPVAP]-1659846468341
GPR[EPVS]-1659846468341
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846468343
GPR[SPVAP]-1659846468343
GPR[EPVAP]-1659846469445
GPR[EPVS]-1659846469445
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846469447
GPR[SPVAP]-1659846469447
GPR[EPVAP]-1659846470562
GPR[EPVS]-1659846470562
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846470564
GPR[SPVAP]-1659846470564
GPR[EPVAP]-1659846471672
GPR[EPVS]-1659846471672
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846471674
GPR[SPVAP]-1659846471674
GPR[EPVAP]-1659846474361
GPR[EPVS]-1659846474361
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846474363
GPR[SPVAP]-1659846474363
GPR[EPVAP]-1659846475493
GPR[EPVS]-1659846475493
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846475494
GPR[SPVAP]-1659846475494
GPR[EPVAP]-1659846476633
GPR[EPVS]-1659846476633
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846476634
GPR[SPVAP]-1659846476634
GPR[EPVAP]-1659846477750
GPR[EPVS]-1659846477750
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846477751
GPR[SPVAP]-1659846477751
GPR[EPVAP]-1659846478869
GPR[EPVS]-1659846478869
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846478871
GPR[SPVAP]-1659846478871
GPR[EPVAP]-1659846479981
GPR[EPVS]-1659846479981
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846479982
GPR[SPVAP]-1659846479982
GPR[EPVAP]-1659846481094
GPR[EPVS]-1659846481094
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846481096
GPR[SPVAP]-1659846481096
GPR[EPVAP]-1659846482205
GPR[EPVS]-1659846482205
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846482207
GPR[SPVAP]-1659846482207
GPR[EPVAP]-1659846483322
GPR[EPVS]-1659846483322
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846483323
GPR[SPVAP]-1659846483323
GPR[EPVAP]-1659846484434
GPR[EPVS]-1659846484435
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846484436
GPR[SPVAP]-1659846484436
GPR[EPVAP]-1659846485564
GPR[EPVS]-1659846485564
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846485566
GPR[SPVAP]-1659846485566
GPR[EPVAP]-1659846486684
GPR[EPVS]-1659846486684
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846486685
GPR[SPVAP]-1659846486685
GPR[EPVAP]-1659846487796
GPR[EPVS]-1659846487796
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846487798
GPR[SPVAP]-1659846487798
GPR[EPVAP]-1659846488904
GPR[EPVS]-1659846488904
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846488906
GPR[SPVAP]-1659846488906
GPR[EPVAP]-1659846490017
GPR[EPVS]-1659846490017
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846490019
GPR[SPVAP]-1659846490019
GPR[EPVAP]-1659846491129
GPR[EPVS]-1659846491129
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846491130
GPR[SPVAP]-1659846491130
GPR[EPVAP]-1659846492240
GPR[EPVS]-1659846492240
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846492241
GPR[SPVAP]-1659846492241
GPR[EPVAP]-1659846493383
GPR[EPVS]-1659846493383
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846493385
GPR[SPVAP]-1659846493385
GPR[EPVAP]-1659846494496
GPR[EPVS]-1659846494496
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846494497
GPR[SPVAP]-1659846494497
GPR[EPVAP]-1659846495605
GPR[EPVS]-1659846495605
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846495606
GPR[SPVAP]-1659846495606
GPR[EPVAP]-1659846496785
GPR[EPVS]-1659846496785
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846496786
GPR[SPVAP]-1659846496786
GPR[EPVAP]-1659846497885
GPR[EPVS]-1659846497885
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846497888
GPR[SPVAP]-1659846497888
GPR[EPVAP]-1659846499006
GPR[EPVS]-1659846499006
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846499008
GPR[SPVAP]-1659846499008
GPR[EPVAP]-1659846500117
GPR[EPVS]-1659846500117
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846500118
GPR[SPVAP]-1659846500118
GPR[EPVAP]-1659846501217
GPR[EPVS]-1659846501217
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846501219
GPR[SPVAP]-1659846501219
GPR[EPVAP]-1659846502334
GPR[EPVS]-1659846502334
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846502336
GPR[SPVAP]-1659846502336
GPR[EPVAP]-1659846503446
GPR[EPVS]-1659846503446
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846503449
GPR[SPVAP]-1659846503449
GPR[EPVAP]-1659846504566
GPR[EPVS]-1659846504566
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846504567
GPR[SPVAP]-1659846504567
GPR[EPVAP]-1659846505689
GPR[EPVS]-1659846505689
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846505694
GPR[SPVAP]-1659846505694
GPR[EPVAP]-1659846506814
GPR[EPVS]-1659846506814
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846506818
GPR[SPVAP]-1659846506818
GPR[EPVAP]-1659846507929
GPR[EPVS]-1659846507929
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846507930
GPR[SPVAP]-1659846507930
GPR[EPVAP]-1659846509052
GPR[EPVS]-1659846509052
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846509053
GPR[SPVAP]-1659846509053
GPR[EPVAP]-1659846510192
GPR[EPVS]-1659846510192
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846510194
GPR[SPVAP]-1659846510194
GPR[EPVAP]-1659846511304
GPR[EPVS]-1659846511304
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846511308
GPR[SPVAP]-1659846511308
GPR[EPVAP]-1659846512420
GPR[EPVS]-1659846512420
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846512421
GPR[SPVAP]-1659846512421
GPR[EPVAP]-1659846513543
GPR[EPVS]-1659846513543
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846513545
GPR[SPVAP]-1659846513545
GPR[EPVAP]-1659846514679
GPR[EPVS]-1659846514679
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846514681
GPR[SPVAP]-1659846514681
GPR[EPVAP]-1659846515786
GPR[EPVS]-1659846515786
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846515788
GPR[SPVAP]-1659846515788
GPR[EPVAP]-1659846516921
GPR[EPVS]-1659846516921
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846516923
GPR[SPVAP]-1659846516923
GPR[EPVAP]-1659846518028
GPR[EPVS]-1659846518028
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846518030
GPR[SPVAP]-1659846518030
GPR[EPVAP]-1659846519155
GPR[EPVS]-1659846519155
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846519158
GPR[SPVAP]-1659846519158
GPR[EPVAP]-1659846520268
GPR[EPVS]-1659846520268
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846520270
GPR[SPVAP]-1659846520270
GPR[EPVAP]-1659846521374
GPR[EPVS]-1659846521374
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846521376
GPR[SPVAP]-1659846521376
GPR[EPVAP]-1659846522521
GPR[EPVS]-1659846522521
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846522522
GPR[SPVAP]-1659846522522
GPR[EPVAP]-1659846523655
GPR[EPVS]-1659846523655
========
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846523661
GPR[SPVAP]-1659846523661
GPR[EPVAP]-1659846524777
GPR[EPVS]-1659846524777
========
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659846524781
GPR[SPVAP]-1659846524781
GPR[EPVAP]-1659846525891
GPR[EPVS]-1659846525891
GPR[ESUN]-1659846525892
GPR[SSUN]-1659846525892
org.apache.commons.math3.linear.EigenDecomposition,579
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

GPR[ESUN]-1659846532044
GPR[SSUN]-1659846532044
GPR[ESUN]-1659846532044
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659846532793
GPR[EFL]-1659846532796
GPR[SFP]-1659846532796
TIMEOUT : 600000
GPR[SSUN]-1659846532800
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659846534780
GPR[SPVAP]-1659846534780
GPR[EPVAP]-1659846541422
GPR[SPVATF]-1659846541422
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 0
GPR[EPVATF]-1659846543714
GPR[SPVATR]-1659846543715
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659846611626
GPR[EPVS]-1659846611626
GPR[PF]-1659846611626
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/9/patch_78833_1_ts_1659846611626.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM629094128171838311/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/9/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/9/patch_78833_1_ts_1659846611626.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659846611634
GPR[SPVAP]-1659846611634
GPR[EPVAP]-1659846613631
GPR[SPVATF]-1659846613631
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846615802
GPR[EPVS]-1659846615802
GPR[ESUN]-1659846615802
GPR[SSUN]-1659846615802
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846620262
GPR[SPVAP]-1659846620263
GPR[EPVAP]-1659846626756
GPR[SPVATF]-1659846626756
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846629006
GPR[EPVS]-1659846629006
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846629008
GPR[SPVAP]-1659846629008
GPR[EPVAP]-1659846631090
GPR[SPVATF]-1659846631090
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846633275
GPR[EPVS]-1659846633275
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846633276
GPR[SPVAP]-1659846633276
GPR[EPVAP]-1659846635377
GPR[SPVATF]-1659846635377
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846637525
GPR[EPVS]-1659846637525
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846637526
GPR[SPVAP]-1659846637526
GPR[EPVAP]-1659846639555
GPR[SPVATF]-1659846639555
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846641761
GPR[EPVS]-1659846641761
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846641762
GPR[SPVAP]-1659846641762
GPR[EPVAP]-1659846643821
GPR[SPVATF]-1659846643821
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846645951
GPR[EPVS]-1659846645951
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846645953
GPR[SPVAP]-1659846645953
GPR[EPVAP]-1659846648053
GPR[SPVATF]-1659846648053
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846650225
GPR[EPVS]-1659846650225
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846650226
GPR[SPVAP]-1659846650226
GPR[EPVAP]-1659846652293
GPR[SPVATF]-1659846652293
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846654465
GPR[EPVS]-1659846654465
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846654466
GPR[SPVAP]-1659846654466
GPR[EPVAP]-1659846656565
GPR[SPVATF]-1659846656565
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846658708
GPR[EPVS]-1659846658708
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846658710
GPR[SPVAP]-1659846658710
GPR[EPVAP]-1659846660767
GPR[SPVATF]-1659846660767
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846662928
GPR[EPVS]-1659846662928
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846662929
GPR[SPVAP]-1659846662929
GPR[EPVAP]-1659846664993
GPR[SPVATF]-1659846664993
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846667168
GPR[EPVS]-1659846667168
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846667169
GPR[SPVAP]-1659846667169
GPR[EPVAP]-1659846669225
GPR[SPVATF]-1659846669225
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846671382
GPR[EPVS]-1659846671382
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846671383
GPR[SPVAP]-1659846671383
GPR[EPVAP]-1659846673492
GPR[SPVATF]-1659846673492
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846675745
GPR[EPVS]-1659846675745
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846675746
GPR[SPVAP]-1659846675746
GPR[EPVAP]-1659846677778
GPR[SPVATF]-1659846677778
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846679922
GPR[EPVS]-1659846679922
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846679923
GPR[SPVAP]-1659846679923
GPR[EPVAP]-1659846681981
GPR[SPVATF]-1659846681981
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846684127
GPR[EPVS]-1659846684127
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846684128
GPR[SPVAP]-1659846684128
GPR[EPVAP]-1659846686162
GPR[SPVATF]-1659846686162
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846688304
GPR[EPVS]-1659846688304
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846688306
GPR[SPVAP]-1659846688306
GPR[EPVAP]-1659846690379
GPR[SPVATF]-1659846690379
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846694369
GPR[EPVS]-1659846694369
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846694370
GPR[SPVAP]-1659846694370
GPR[EPVAP]-1659846696439
GPR[SPVATF]-1659846696439
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846698573
GPR[EPVS]-1659846698573
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846698575
GPR[SPVAP]-1659846698575
GPR[EPVAP]-1659846700673
GPR[SPVATF]-1659846700673
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846702834
GPR[EPVS]-1659846702834
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846702836
GPR[SPVAP]-1659846702836
GPR[EPVAP]-1659846704897
GPR[SPVATF]-1659846704897
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846707037
GPR[EPVS]-1659846707037
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846707039
GPR[SPVAP]-1659846707039
GPR[EPVAP]-1659846709081
GPR[SPVATF]-1659846709081
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846711257
GPR[EPVS]-1659846711257
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846711259
GPR[SPVAP]-1659846711259
GPR[EPVAP]-1659846713290
GPR[SPVATF]-1659846713290
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846715528
GPR[EPVS]-1659846715528
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846715530
GPR[SPVAP]-1659846715530
GPR[EPVAP]-1659846717633
GPR[SPVATF]-1659846717633
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846719777
GPR[EPVS]-1659846719777
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846719779
GPR[SPVAP]-1659846719779
GPR[EPVAP]-1659846721893
GPR[SPVATF]-1659846721893
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846724094
GPR[EPVS]-1659846724094
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846724096
GPR[SPVAP]-1659846724096
GPR[EPVAP]-1659846726170
GPR[SPVATF]-1659846726170
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846728335
GPR[EPVS]-1659846728335
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846728336
GPR[SPVAP]-1659846728336
GPR[EPVAP]-1659846730390
GPR[SPVATF]-1659846730390
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846732511
GPR[EPVS]-1659846732511
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659846732512
GPR[SPVAP]-1659846732512
GPR[EPVAP]-1659846734533
GPR[SPVATF]-1659846734533
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846736688
GPR[EPVS]-1659846736688
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846736691
GPR[SPVAP]-1659846736691
GPR[EPVAP]-1659846738739
GPR[SPVATF]-1659846738739
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846740884
GPR[EPVS]-1659846740884
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846740886
GPR[SPVAP]-1659846740886
GPR[EPVAP]-1659846742988
GPR[SPVATF]-1659846742988
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846745203
GPR[EPVS]-1659846745203
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846745204
GPR[SPVAP]-1659846745204
GPR[EPVAP]-1659846747288
GPR[SPVATF]-1659846747288
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846749445
GPR[EPVS]-1659846749445
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659846749447
GPR[SPVAP]-1659846749447
GPR[EPVAP]-1659846751488
GPR[SPVATF]-1659846751488
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846753657
GPR[EPVS]-1659846753657
GPR[ESUN]-1659846753658
GPR[SSUN]-1659846753658
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846760722
GPR[SPVAP]-1659846760722
GPR[EPVAP]-1659846768976
GPR[SPVATF]-1659846768976
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846771023
GPR[EPVS]-1659846771023
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659846771024
GPR[SPVAP]-1659846771024
GPR[EPVAP]-1659846772145
GPR[EPVS]-1659846772145
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846772147
GPR[SPVAP]-1659846772147
GPR[EPVAP]-1659846773259
GPR[EPVS]-1659846773259
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846773261
GPR[SPVAP]-1659846773261
GPR[EPVAP]-1659846774388
GPR[EPVS]-1659846774388
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846774391
GPR[SPVAP]-1659846774391
GPR[EPVAP]-1659846775498
GPR[EPVS]-1659846775498
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846775499
GPR[SPVAP]-1659846775499
GPR[EPVAP]-1659846776653
GPR[EPVS]-1659846776653
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846776654
GPR[SPVAP]-1659846776654
GPR[EPVAP]-1659846777783
GPR[EPVS]-1659846777783
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846777786
GPR[SPVAP]-1659846777786
GPR[EPVAP]-1659846779851
GPR[SPVATF]-1659846779851
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846782004
GPR[EPVS]-1659846782004
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846782005
GPR[SPVAP]-1659846782005
GPR[EPVAP]-1659846783120
GPR[EPVS]-1659846783120
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846783121
GPR[SPVAP]-1659846783121
GPR[EPVAP]-1659846784225
GPR[EPVS]-1659846784225
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846784226
GPR[SPVAP]-1659846784226
GPR[EPVAP]-1659846785358
GPR[EPVS]-1659846785358
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846785360
GPR[SPVAP]-1659846785360
GPR[EPVAP]-1659846786509
GPR[EPVS]-1659846786509
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846786510
GPR[SPVAP]-1659846786510
GPR[EPVAP]-1659846787618
GPR[EPVS]-1659846787618
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846787619
GPR[SPVAP]-1659846787619
GPR[EPVAP]-1659846788736
GPR[EPVS]-1659846788736
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846788737
GPR[SPVAP]-1659846788737
GPR[EPVAP]-1659846789847
GPR[EPVS]-1659846789847
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846789849
GPR[SPVAP]-1659846789849
GPR[EPVAP]-1659846790976
GPR[EPVS]-1659846790977
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846790979
GPR[SPVAP]-1659846790979
GPR[EPVAP]-1659846792080
GPR[EPVS]-1659846792080
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846792082
GPR[SPVAP]-1659846792082
GPR[EPVAP]-1659846793240
GPR[EPVS]-1659846793240
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846793241
GPR[SPVAP]-1659846793241
GPR[EPVAP]-1659846794373
GPR[EPVS]-1659846794373
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846794375
GPR[SPVAP]-1659846794375
GPR[EPVAP]-1659846795490
GPR[EPVS]-1659846795490
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846795492
GPR[SPVAP]-1659846795492
GPR[EPVAP]-1659846796594
GPR[EPVS]-1659846796594
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846796596
GPR[SPVAP]-1659846796596
GPR[EPVAP]-1659846798743
GPR[SPVATF]-1659846798743
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846800750
GPR[EPVS]-1659846800750
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659846800752
GPR[SPVAP]-1659846800752
GPR[EPVAP]-1659846801853
GPR[EPVS]-1659846801853
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846801855
GPR[SPVAP]-1659846801855
GPR[EPVAP]-1659846802984
GPR[EPVS]-1659846802984
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846802987
GPR[SPVAP]-1659846802987
GPR[EPVAP]-1659846804108
GPR[EPVS]-1659846804108
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846804110
GPR[SPVAP]-1659846804110
GPR[EPVAP]-1659846805229
GPR[EPVS]-1659846805229
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846805231
GPR[SPVAP]-1659846805231
GPR[EPVAP]-1659846806341
GPR[EPVS]-1659846806341
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846806342
GPR[SPVAP]-1659846806342
GPR[EPVAP]-1659846807450
GPR[EPVS]-1659846807450
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846807451
GPR[SPVAP]-1659846807451
GPR[EPVAP]-1659846808555
GPR[EPVS]-1659846808555
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846808557
GPR[SPVAP]-1659846808557
GPR[EPVAP]-1659846809657
GPR[EPVS]-1659846809657
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846809659
GPR[SPVAP]-1659846809659
GPR[EPVAP]-1659846810789
GPR[EPVS]-1659846810789
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846810790
GPR[SPVAP]-1659846810790
GPR[EPVAP]-1659846811941
GPR[EPVS]-1659846811941
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846811943
GPR[SPVAP]-1659846811943
GPR[EPVAP]-1659846813075
GPR[EPVS]-1659846813075
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846813077
GPR[SPVAP]-1659846813077
GPR[EPVAP]-1659846814234
GPR[EPVS]-1659846814234
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846814236
GPR[SPVAP]-1659846814236
GPR[EPVAP]-1659846816324
GPR[SPVATF]-1659846816324
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846818306
GPR[EPVS]-1659846818306
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846818307
GPR[SPVAP]-1659846818307
GPR[EPVAP]-1659846819425
GPR[EPVS]-1659846819425
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846819427
GPR[SPVAP]-1659846819427
GPR[EPVAP]-1659846820532
GPR[EPVS]-1659846820532
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846820533
GPR[SPVAP]-1659846820533
GPR[EPVAP]-1659846821669
GPR[EPVS]-1659846821669
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846821670
GPR[SPVAP]-1659846821670
GPR[EPVAP]-1659846822790
GPR[EPVS]-1659846822790
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846822792
GPR[SPVAP]-1659846822792
GPR[EPVAP]-1659846823916
GPR[EPVS]-1659846823916
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846823917
GPR[SPVAP]-1659846823917
GPR[EPVAP]-1659846825039
GPR[EPVS]-1659846825039
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846825040
GPR[SPVAP]-1659846825040
GPR[EPVAP]-1659846826161
GPR[EPVS]-1659846826161
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846826164
GPR[SPVAP]-1659846826164
GPR[EPVAP]-1659846827287
GPR[EPVS]-1659846827287
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846827289
GPR[SPVAP]-1659846827290
GPR[EPVAP]-1659846828421
GPR[EPVS]-1659846828421
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846828423
GPR[SPVAP]-1659846828423
GPR[EPVAP]-1659846829536
GPR[EPVS]-1659846829536
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846829538
GPR[SPVAP]-1659846829538
GPR[EPVAP]-1659846830657
GPR[EPVS]-1659846830657
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846830658
GPR[SPVAP]-1659846830658
GPR[EPVAP]-1659846831768
GPR[EPVS]-1659846831768
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846831771
GPR[SPVAP]-1659846831771
GPR[EPVAP]-1659846832889
GPR[EPVS]-1659846832889
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846832891
GPR[SPVAP]-1659846832891
GPR[EPVAP]-1659846834000
GPR[EPVS]-1659846834000
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846834003
GPR[SPVAP]-1659846834003
GPR[EPVAP]-1659846835137
GPR[EPVS]-1659846835137
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846835148
GPR[SPVAP]-1659846835148
GPR[EPVAP]-1659846837928
GPR[EPVS]-1659846837928
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846837930
GPR[SPVAP]-1659846837930
GPR[EPVAP]-1659846839067
GPR[EPVS]-1659846839067
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846839070
GPR[SPVAP]-1659846839070
GPR[EPVAP]-1659846840181
GPR[EPVS]-1659846840181
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846840183
GPR[SPVAP]-1659846840183
GPR[EPVAP]-1659846841297
GPR[EPVS]-1659846841297
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846841299
GPR[SPVAP]-1659846841299
GPR[EPVAP]-1659846842399
GPR[EPVS]-1659846842399
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846842401
GPR[SPVAP]-1659846842401
GPR[EPVAP]-1659846843509
GPR[EPVS]-1659846843509
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846843510
GPR[SPVAP]-1659846843510
GPR[EPVAP]-1659846844654
GPR[EPVS]-1659846844654
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846844656
GPR[SPVAP]-1659846844656
GPR[EPVAP]-1659846845764
GPR[EPVS]-1659846845764
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846845766
GPR[SPVAP]-1659846845766
GPR[EPVAP]-1659846846878
GPR[EPVS]-1659846846878
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846846880
GPR[SPVAP]-1659846846880
GPR[EPVAP]-1659846847997
GPR[EPVS]-1659846847997
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846847999
GPR[SPVAP]-1659846847999
GPR[EPVAP]-1659846849100
GPR[EPVS]-1659846849100
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846849102
GPR[SPVAP]-1659846849102
GPR[EPVAP]-1659846850212
GPR[EPVS]-1659846850212
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846850213
GPR[SPVAP]-1659846850213
GPR[EPVAP]-1659846851323
GPR[EPVS]-1659846851323
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846851325
GPR[SPVAP]-1659846851325
GPR[EPVAP]-1659846853388
GPR[SPVATF]-1659846853388
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846855343
GPR[EPVS]-1659846855343
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846855345
GPR[SPVAP]-1659846855345
GPR[EPVAP]-1659846856454
GPR[EPVS]-1659846856454
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846856456
GPR[SPVAP]-1659846856456
GPR[EPVAP]-1659846857607
GPR[EPVS]-1659846857607
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846857609
GPR[SPVAP]-1659846857609
GPR[EPVAP]-1659846858711
GPR[EPVS]-1659846858711
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846858715
GPR[SPVAP]-1659846858715
GPR[EPVAP]-1659846859861
GPR[EPVS]-1659846859861
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846859863
GPR[SPVAP]-1659846859863
GPR[EPVAP]-1659846860977
GPR[EPVS]-1659846860977
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846860979
GPR[SPVAP]-1659846860979
GPR[EPVAP]-1659846862097
GPR[EPVS]-1659846862097
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846862099
GPR[SPVAP]-1659846862099
GPR[EPVAP]-1659846863215
GPR[EPVS]-1659846863215
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846863219
GPR[SPVAP]-1659846863219
GPR[EPVAP]-1659846864332
GPR[EPVS]-1659846864332
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846864337
GPR[SPVAP]-1659846864337
GPR[EPVAP]-1659846865486
GPR[EPVS]-1659846865486
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846865490
GPR[SPVAP]-1659846865490
GPR[EPVAP]-1659846866597
GPR[EPVS]-1659846866597
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846866598
GPR[SPVAP]-1659846866598
GPR[EPVAP]-1659846867698
GPR[EPVS]-1659846867698
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846867699
GPR[SPVAP]-1659846867699
GPR[EPVAP]-1659846868816
GPR[EPVS]-1659846868816
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846868818
GPR[SPVAP]-1659846868818
GPR[EPVAP]-1659846869944
GPR[EPVS]-1659846869944
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846869948
GPR[SPVAP]-1659846869948
GPR[EPVAP]-1659846871066
GPR[EPVS]-1659846871066
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846871068
GPR[SPVAP]-1659846871068
GPR[EPVAP]-1659846872177
GPR[EPVS]-1659846872177
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846872178
GPR[SPVAP]-1659846872178
GPR[EPVAP]-1659846873286
GPR[EPVS]-1659846873286
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846873288
GPR[SPVAP]-1659846873288
GPR[EPVAP]-1659846874396
GPR[EPVS]-1659846874396
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659846874399
GPR[SPVAP]-1659846874399
GPR[EPVAP]-1659846875530
GPR[EPVS]-1659846875530
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846875533
GPR[SPVAP]-1659846875533
GPR[EPVAP]-1659846876630
GPR[EPVS]-1659846876630
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846876632
GPR[SPVAP]-1659846876632
GPR[EPVAP]-1659846877736
GPR[EPVS]-1659846877736
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846877737
GPR[SPVAP]-1659846877737
GPR[EPVAP]-1659846878843
GPR[EPVS]-1659846878843
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846878849
GPR[SPVAP]-1659846878849
GPR[EPVAP]-1659846879958
GPR[EPVS]-1659846879958
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846879963
GPR[SPVAP]-1659846879963
GPR[EPVAP]-1659846881073
GPR[EPVS]-1659846881073
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846881074
GPR[SPVAP]-1659846881074
GPR[EPVAP]-1659846882254
GPR[EPVS]-1659846882254
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846882255
GPR[SPVAP]-1659846882255
GPR[EPVAP]-1659846883371
GPR[EPVS]-1659846883371
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846883373
GPR[SPVAP]-1659846883373
GPR[EPVAP]-1659846884485
GPR[EPVS]-1659846884485
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846884493
GPR[SPVAP]-1659846884493
GPR[EPVAP]-1659846885603
GPR[EPVS]-1659846885603
GPR[ESUN]-1659846885603
GPR[SSUN]-1659846885603
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846892494
GPR[SPVAP]-1659846892494
GPR[EPVAP]-1659846899135
GPR[SPVATF]-1659846899135
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846901177
GPR[EPVS]-1659846901177
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846901179
GPR[SPVAP]-1659846901179
GPR[EPVAP]-1659846902293
GPR[EPVS]-1659846902293
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846902295
GPR[SPVAP]-1659846902295
GPR[EPVAP]-1659846903403
GPR[EPVS]-1659846903403
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846903404
GPR[SPVAP]-1659846903404
GPR[EPVAP]-1659846905491
GPR[SPVATF]-1659846905491
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846907672
GPR[EPVS]-1659846907672
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659846907684
GPR[SPVAP]-1659846907684
GPR[EPVAP]-1659846910347
GPR[EPVS]-1659846910347
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846910349
GPR[SPVAP]-1659846910349
GPR[EPVAP]-1659846911467
GPR[EPVS]-1659846911467
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846911469
GPR[SPVAP]-1659846911469
GPR[EPVAP]-1659846912628
GPR[EPVS]-1659846912628
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846912630
GPR[SPVAP]-1659846912630
GPR[EPVAP]-1659846913755
GPR[EPVS]-1659846913755
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846913758
GPR[SPVAP]-1659846913758
GPR[EPVAP]-1659846914873
GPR[EPVS]-1659846914873
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846914875
GPR[SPVAP]-1659846914875
GPR[EPVAP]-1659846915996
GPR[EPVS]-1659846915996
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846915998
GPR[SPVAP]-1659846915998
GPR[EPVAP]-1659846917120
GPR[EPVS]-1659846917120
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846917121
GPR[SPVAP]-1659846917121
GPR[EPVAP]-1659846918252
GPR[EPVS]-1659846918252
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846918253
GPR[SPVAP]-1659846918253
GPR[EPVAP]-1659846919358
GPR[EPVS]-1659846919358
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846919359
GPR[SPVAP]-1659846919359
GPR[EPVAP]-1659846920495
GPR[EPVS]-1659846920495
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846920497
GPR[SPVAP]-1659846920497
GPR[EPVAP]-1659846921620
GPR[EPVS]-1659846921620
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846921621
GPR[SPVAP]-1659846921621
GPR[EPVAP]-1659846922737
GPR[EPVS]-1659846922737
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846922738
GPR[SPVAP]-1659846922738
GPR[EPVAP]-1659846923852
GPR[EPVS]-1659846923852
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846923854
GPR[SPVAP]-1659846923854
GPR[EPVAP]-1659846924987
GPR[EPVS]-1659846924987
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846924988
GPR[SPVAP]-1659846924988
GPR[EPVAP]-1659846926093
GPR[EPVS]-1659846926093
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846926095
GPR[SPVAP]-1659846926095
GPR[EPVAP]-1659846927213
GPR[EPVS]-1659846927213
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846927214
GPR[SPVAP]-1659846927214
GPR[EPVAP]-1659846928330
GPR[EPVS]-1659846928330
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846928331
GPR[SPVAP]-1659846928331
GPR[EPVAP]-1659846929441
GPR[EPVS]-1659846929441
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846929444
GPR[SPVAP]-1659846929444
GPR[EPVAP]-1659846930549
GPR[EPVS]-1659846930549
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846930551
GPR[SPVAP]-1659846930551
GPR[EPVAP]-1659846931653
GPR[EPVS]-1659846931653
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846931655
GPR[SPVAP]-1659846931655
GPR[EPVAP]-1659846932796
GPR[EPVS]-1659846932796
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659846932798
GPR[SPVAP]-1659846932798
GPR[EPVAP]-1659846933899
GPR[EPVS]-1659846933899
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846933901
GPR[SPVAP]-1659846933901
GPR[EPVAP]-1659846935018
GPR[EPVS]-1659846935018
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846935020
GPR[SPVAP]-1659846935020
GPR[EPVAP]-1659846936121
GPR[EPVS]-1659846936122
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846936123
GPR[SPVAP]-1659846936123
GPR[EPVAP]-1659846937225
GPR[EPVS]-1659846937225
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846937228
GPR[SPVAP]-1659846937228
GPR[EPVAP]-1659846938365
GPR[EPVS]-1659846938365
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846938366
GPR[SPVAP]-1659846938366
GPR[EPVAP]-1659846939468
GPR[EPVS]-1659846939468
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659846939470
GPR[SPVAP]-1659846939470
GPR[EPVAP]-1659846940610
GPR[EPVS]-1659846940610
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846940612
GPR[SPVAP]-1659846940612
GPR[EPVAP]-1659846941717
GPR[EPVS]-1659846941717
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846941718
GPR[SPVAP]-1659846941718
GPR[EPVAP]-1659846942819
GPR[EPVS]-1659846942819
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846942821
GPR[SPVAP]-1659846942821
GPR[EPVAP]-1659846943950
GPR[EPVS]-1659846943950
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846943951
GPR[SPVAP]-1659846943951
GPR[EPVAP]-1659846945092
GPR[EPVS]-1659846945092
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846945093
GPR[SPVAP]-1659846945093
GPR[EPVAP]-1659846946189
GPR[EPVS]-1659846946189
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846946190
GPR[SPVAP]-1659846946190
GPR[EPVAP]-1659846947311
GPR[EPVS]-1659846947311
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846947313
GPR[SPVAP]-1659846947313
GPR[EPVAP]-1659846948423
GPR[EPVS]-1659846948423
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846948424
GPR[SPVAP]-1659846948424
GPR[EPVAP]-1659846949528
GPR[EPVS]-1659846949528
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846949530
GPR[SPVAP]-1659846949530
GPR[EPVAP]-1659846950640
GPR[EPVS]-1659846950640
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846950642
GPR[SPVAP]-1659846950642
GPR[EPVAP]-1659846951769
GPR[EPVS]-1659846951769
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846951770
GPR[SPVAP]-1659846951770
GPR[EPVAP]-1659846952877
GPR[EPVS]-1659846952877
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846952879
GPR[SPVAP]-1659846952879
GPR[EPVAP]-1659846954000
GPR[EPVS]-1659846954000
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846954001
GPR[SPVAP]-1659846954001
GPR[EPVAP]-1659846955113
GPR[EPVS]-1659846955113
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846955114
GPR[SPVAP]-1659846955114
GPR[EPVAP]-1659846956219
GPR[EPVS]-1659846956219
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846956220
GPR[SPVAP]-1659846956220
GPR[EPVAP]-1659846957340
GPR[EPVS]-1659846957340
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846957342
GPR[SPVAP]-1659846957342
GPR[EPVAP]-1659846958452
GPR[EPVS]-1659846958452
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846958457
GPR[SPVAP]-1659846958457
GPR[EPVAP]-1659846959567
GPR[EPVS]-1659846959567
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846959569
GPR[SPVAP]-1659846959569
GPR[EPVAP]-1659846960712
GPR[EPVS]-1659846960712
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846960714
GPR[SPVAP]-1659846960714
GPR[EPVAP]-1659846961863
GPR[EPVS]-1659846961864
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846961865
GPR[SPVAP]-1659846961865
GPR[EPVAP]-1659846962970
GPR[EPVS]-1659846962970
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846962971
GPR[SPVAP]-1659846962971
GPR[EPVAP]-1659846964099
GPR[EPVS]-1659846964099
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846964103
GPR[SPVAP]-1659846964103
GPR[EPVAP]-1659846965212
GPR[EPVS]-1659846965212
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846965214
GPR[SPVAP]-1659846965214
GPR[EPVAP]-1659846966327
GPR[EPVS]-1659846966327
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846966329
GPR[SPVAP]-1659846966329
GPR[EPVAP]-1659846967442
GPR[EPVS]-1659846967442
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846967444
GPR[SPVAP]-1659846967444
GPR[EPVAP]-1659846968593
GPR[EPVS]-1659846968593
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846968596
GPR[SPVAP]-1659846968596
GPR[EPVAP]-1659846969723
GPR[EPVS]-1659846969723
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846969725
GPR[SPVAP]-1659846969725
GPR[EPVAP]-1659846970869
GPR[EPVS]-1659846970869
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846970870
GPR[SPVAP]-1659846970870
GPR[EPVAP]-1659846971969
GPR[EPVS]-1659846971969
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846971971
GPR[SPVAP]-1659846971971
GPR[EPVAP]-1659846973085
GPR[EPVS]-1659846973085
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846973087
GPR[SPVAP]-1659846973087
GPR[EPVAP]-1659846974196
GPR[EPVS]-1659846974196
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846974199
GPR[SPVAP]-1659846974199
GPR[EPVAP]-1659846975313
GPR[EPVS]-1659846975313
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846975314
GPR[SPVAP]-1659846975314
GPR[EPVAP]-1659846976431
GPR[EPVS]-1659846976431
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846976434
GPR[SPVAP]-1659846976434
GPR[EPVAP]-1659846977552
GPR[EPVS]-1659846977552
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846977554
GPR[SPVAP]-1659846977554
GPR[EPVAP]-1659846978695
GPR[EPVS]-1659846978695
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846978697
GPR[SPVAP]-1659846978697
GPR[EPVAP]-1659846979813
GPR[EPVS]-1659846979813
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846979814
GPR[SPVAP]-1659846979814
GPR[EPVAP]-1659846980927
GPR[EPVS]-1659846980927
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846980929
GPR[SPVAP]-1659846980929
GPR[EPVAP]-1659846982110
GPR[EPVS]-1659846982110
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846982120
GPR[SPVAP]-1659846982120
GPR[EPVAP]-1659846984688
GPR[EPVS]-1659846984688
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846984690
GPR[SPVAP]-1659846984690
GPR[EPVAP]-1659846985808
GPR[EPVS]-1659846985808
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846985809
GPR[SPVAP]-1659846985809
GPR[EPVAP]-1659846986920
GPR[EPVS]-1659846986920
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846986922
GPR[SPVAP]-1659846986922
GPR[EPVAP]-1659846988054
GPR[EPVS]-1659846988054
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846988055
GPR[SPVAP]-1659846988055
GPR[EPVAP]-1659846989152
GPR[EPVS]-1659846989152
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846989154
GPR[SPVAP]-1659846989154
GPR[EPVAP]-1659846990270
GPR[EPVS]-1659846990270
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846990273
GPR[SPVAP]-1659846990273
GPR[EPVAP]-1659846992344
GPR[SPVATF]-1659846992344
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659846994369
GPR[EPVS]-1659846994369
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846994371
GPR[SPVAP]-1659846994371
GPR[EPVAP]-1659846995486
GPR[EPVS]-1659846995486
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846995488
GPR[SPVAP]-1659846995488
GPR[EPVAP]-1659846996598
GPR[EPVS]-1659846996598
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846996599
GPR[SPVAP]-1659846996599
GPR[EPVAP]-1659846997700
GPR[EPVS]-1659846997700
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846997701
GPR[SPVAP]-1659846997701
GPR[EPVAP]-1659846998823
GPR[EPVS]-1659846998823
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846998825
GPR[SPVAP]-1659846998825
GPR[EPVAP]-1659846999944
GPR[EPVS]-1659846999944
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659846999946
GPR[SPVAP]-1659846999946
GPR[EPVAP]-1659847001057
GPR[EPVS]-1659847001057
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847001058
GPR[SPVAP]-1659847001058
GPR[EPVAP]-1659847002159
GPR[EPVS]-1659847002159
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847002161
GPR[SPVAP]-1659847002161
GPR[EPVAP]-1659847003260
GPR[EPVS]-1659847003260
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847003262
GPR[SPVAP]-1659847003262
GPR[EPVAP]-1659847004365
GPR[EPVS]-1659847004365
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847004368
GPR[SPVAP]-1659847004368
GPR[EPVAP]-1659847005475
GPR[EPVS]-1659847005475
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847005477
GPR[SPVAP]-1659847005477
GPR[EPVAP]-1659847006584
GPR[EPVS]-1659847006584
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847006586
GPR[SPVAP]-1659847006586
GPR[EPVAP]-1659847007701
GPR[EPVS]-1659847007701
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847007706
GPR[SPVAP]-1659847007706
GPR[EPVAP]-1659847008828
GPR[EPVS]-1659847008828
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847008830
GPR[SPVAP]-1659847008830
GPR[EPVAP]-1659847009940
GPR[EPVS]-1659847009940
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847009942
GPR[SPVAP]-1659847009942
GPR[EPVAP]-1659847011051
GPR[EPVS]-1659847011051
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847011052
GPR[SPVAP]-1659847011052
GPR[EPVAP]-1659847012160
GPR[EPVS]-1659847012160
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847012162
GPR[SPVAP]-1659847012162
GPR[EPVAP]-1659847013277
GPR[EPVS]-1659847013277
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847013279
GPR[SPVAP]-1659847013279
GPR[EPVAP]-1659847014404
GPR[EPVS]-1659847014404
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847014407
GPR[SPVAP]-1659847014407
GPR[EPVAP]-1659847015518
GPR[EPVS]-1659847015518
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847015520
GPR[SPVAP]-1659847015520
GPR[EPVAP]-1659847016627
GPR[EPVS]-1659847016627
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847016629
GPR[SPVAP]-1659847016629
GPR[EPVAP]-1659847017734
GPR[EPVS]-1659847017734
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847017736
GPR[SPVAP]-1659847017736
GPR[EPVAP]-1659847018845
GPR[EPVS]-1659847018845
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847018847
GPR[SPVAP]-1659847018847
GPR[EPVAP]-1659847019984
GPR[EPVS]-1659847019984
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847019985
GPR[SPVAP]-1659847019985
GPR[EPVAP]-1659847021093
GPR[EPVS]-1659847021093
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847021095
GPR[SPVAP]-1659847021095
GPR[EPVAP]-1659847022201
GPR[EPVS]-1659847022201
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847022203
GPR[SPVAP]-1659847022203
GPR[EPVAP]-1659847023330
GPR[EPVS]-1659847023330
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847023334
GPR[SPVAP]-1659847023334
GPR[EPVAP]-1659847024442
GPR[EPVS]-1659847024442
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659847024446
GPR[SPVAP]-1659847024446
GPR[EPVAP]-1659847025560
GPR[EPVS]-1659847025560
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659847025562
GPR[SPVAP]-1659847025562
GPR[EPVAP]-1659847026676
GPR[EPVS]-1659847026676
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659847026677
GPR[SPVAP]-1659847026677
GPR[EPVAP]-1659847027805
GPR[EPVS]-1659847027805
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847027807
GPR[SPVAP]-1659847027807
GPR[EPVAP]-1659847028909
GPR[EPVS]-1659847028909
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847028911
GPR[SPVAP]-1659847028911
GPR[EPVAP]-1659847030054
GPR[EPVS]-1659847030055
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847030056
GPR[SPVAP]-1659847030056
GPR[EPVAP]-1659847031162
GPR[EPVS]-1659847031162
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847031164
GPR[SPVAP]-1659847031164
GPR[EPVAP]-1659847032291
GPR[EPVS]-1659847032291
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847032293
GPR[SPVAP]-1659847032293
GPR[EPVAP]-1659847033401
GPR[EPVS]-1659847033401
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847033402
GPR[SPVAP]-1659847033402
GPR[EPVAP]-1659847034509
GPR[EPVS]-1659847034509
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847034515
GPR[SPVAP]-1659847034515
GPR[EPVAP]-1659847035620
GPR[EPVS]-1659847035620
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847035622
GPR[SPVAP]-1659847035622
GPR[EPVAP]-1659847036754
GPR[EPVS]-1659847036754
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847036759
GPR[SPVAP]-1659847036759
GPR[EPVAP]-1659847037881
GPR[EPVS]-1659847037881
GPR[ESUN]-1659847037882
GPR[SSUN]-1659847037882
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659847038544
GPR[SSUN]-1659847038544
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847045155
GPR[SPVAP]-1659847045155
GPR[EPVAP]-1659847051689
GPR[SPVATF]-1659847051689
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847053682
GPR[EPVS]-1659847053682
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847053684
GPR[SPVAP]-1659847053684
GPR[EPVAP]-1659847056766
GPR[EPVS]-1659847056766
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847056767
GPR[SPVAP]-1659847056767
GPR[EPVAP]-1659847058836
GPR[SPVATF]-1659847058837
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847061043
GPR[EPVS]-1659847061043
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847061045
GPR[SPVAP]-1659847061045
GPR[EPVAP]-1659847062167
GPR[EPVS]-1659847062167
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847062169
GPR[SPVAP]-1659847062169
GPR[EPVAP]-1659847063301
GPR[EPVS]-1659847063301
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847063302
GPR[SPVAP]-1659847063302
GPR[EPVAP]-1659847064419
GPR[EPVS]-1659847064419
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847064420
GPR[SPVAP]-1659847064420
GPR[EPVAP]-1659847065544
GPR[EPVS]-1659847065544
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847065546
GPR[SPVAP]-1659847065546
GPR[EPVAP]-1659847066657
GPR[EPVS]-1659847066657
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847066659
GPR[SPVAP]-1659847066659
GPR[EPVAP]-1659847067782
GPR[EPVS]-1659847067782
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847067784
GPR[SPVAP]-1659847067784
GPR[EPVAP]-1659847068901
GPR[EPVS]-1659847068901
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847068903
GPR[SPVAP]-1659847068903
GPR[EPVAP]-1659847070073
GPR[EPVS]-1659847070073
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847070076
GPR[SPVAP]-1659847070076
GPR[EPVAP]-1659847071183
GPR[EPVS]-1659847071183
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847071185
GPR[SPVAP]-1659847071185
GPR[EPVAP]-1659847072323
GPR[EPVS]-1659847072323
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847072325
GPR[SPVAP]-1659847072325
GPR[EPVAP]-1659847073432
GPR[EPVS]-1659847073432
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847073434
GPR[SPVAP]-1659847073434
GPR[EPVAP]-1659847074548
GPR[EPVS]-1659847074548
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847074550
GPR[SPVAP]-1659847074550
GPR[EPVAP]-1659847075681
GPR[EPVS]-1659847075681
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847075684
GPR[SPVAP]-1659847075684
GPR[EPVAP]-1659847076779
GPR[EPVS]-1659847076779
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847076781
GPR[SPVAP]-1659847076781
GPR[EPVAP]-1659847077896
GPR[EPVS]-1659847077896
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847077898
GPR[SPVAP]-1659847077898
GPR[EPVAP]-1659847079015
GPR[EPVS]-1659847079015
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847079017
GPR[SPVAP]-1659847079017
GPR[EPVAP]-1659847080144
GPR[EPVS]-1659847080144
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847080146
GPR[SPVAP]-1659847080146
GPR[EPVAP]-1659847081250
GPR[EPVS]-1659847081250
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847081252
GPR[SPVAP]-1659847081252
GPR[EPVAP]-1659847082360
GPR[EPVS]-1659847082360
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847082362
GPR[SPVAP]-1659847082362
GPR[EPVAP]-1659847083499
GPR[EPVS]-1659847083499
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847083500
GPR[SPVAP]-1659847083500
GPR[EPVAP]-1659847084621
GPR[EPVS]-1659847084621
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847084623
GPR[SPVAP]-1659847084623
GPR[EPVAP]-1659847085730
GPR[EPVS]-1659847085730
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847085732
GPR[SPVAP]-1659847085732
GPR[EPVAP]-1659847086843
GPR[EPVS]-1659847086843
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847086845
GPR[SPVAP]-1659847086845
GPR[EPVAP]-1659847087951
GPR[EPVS]-1659847087951
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847087952
GPR[SPVAP]-1659847087952
GPR[EPVAP]-1659847089093
GPR[EPVS]-1659847089093
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847089094
GPR[SPVAP]-1659847089094
GPR[EPVAP]-1659847090209
GPR[EPVS]-1659847090209
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847090211
GPR[SPVAP]-1659847090211
GPR[EPVAP]-1659847091378
GPR[EPVS]-1659847091378
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847091380
GPR[SPVAP]-1659847091380
GPR[EPVAP]-1659847092497
GPR[EPVS]-1659847092497
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847092499
GPR[SPVAP]-1659847092499
GPR[EPVAP]-1659847093600
GPR[EPVS]-1659847093600
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847093602
GPR[SPVAP]-1659847093602
GPR[EPVAP]-1659847094700
GPR[EPVS]-1659847094701
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847094703
GPR[SPVAP]-1659847094703
GPR[EPVAP]-1659847095811
GPR[EPVS]-1659847095811
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847095813
GPR[SPVAP]-1659847095813
GPR[EPVAP]-1659847096943
GPR[EPVS]-1659847096943
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847096944
GPR[SPVAP]-1659847096944
GPR[EPVAP]-1659847098051
GPR[EPVS]-1659847098051
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847098053
GPR[SPVAP]-1659847098053
GPR[EPVAP]-1659847099162
GPR[EPVS]-1659847099162
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847099164
GPR[SPVAP]-1659847099164
GPR[EPVAP]-1659847100288
GPR[EPVS]-1659847100288
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847100290
GPR[SPVAP]-1659847100290
GPR[EPVAP]-1659847101393
GPR[EPVS]-1659847101393
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847101395
GPR[SPVAP]-1659847101395
GPR[EPVAP]-1659847102502
GPR[EPVS]-1659847102503
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847102505
GPR[SPVAP]-1659847102505
GPR[EPVAP]-1659847103598
GPR[EPVS]-1659847103598
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847103599
GPR[SPVAP]-1659847103599
GPR[EPVAP]-1659847104710
GPR[EPVS]-1659847104710
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847104711
GPR[SPVAP]-1659847104711
GPR[EPVAP]-1659847105825
GPR[EPVS]-1659847105825
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847105826
GPR[SPVAP]-1659847105826
GPR[EPVAP]-1659847106941
GPR[EPVS]-1659847106941
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847106942
GPR[SPVAP]-1659847106942
GPR[EPVAP]-1659847108069
GPR[EPVS]-1659847108069
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847108071
GPR[SPVAP]-1659847108071
GPR[EPVAP]-1659847109193
GPR[EPVS]-1659847109193
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847109195
GPR[SPVAP]-1659847109195
GPR[EPVAP]-1659847110299
GPR[EPVS]-1659847110299
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847110303
GPR[SPVAP]-1659847110303
GPR[EPVAP]-1659847111445
GPR[EPVS]-1659847111445
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847111447
GPR[SPVAP]-1659847111447
GPR[EPVAP]-1659847112568
GPR[EPVS]-1659847112568
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847112570
GPR[SPVAP]-1659847112570
GPR[EPVAP]-1659847113693
GPR[EPVS]-1659847113693
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847113694
GPR[SPVAP]-1659847113694
GPR[EPVAP]-1659847114814
GPR[EPVS]-1659847114814
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847114815
GPR[SPVAP]-1659847114815
GPR[EPVAP]-1659847115945
GPR[EPVS]-1659847115945
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847115947
GPR[SPVAP]-1659847115947
GPR[EPVAP]-1659847117058
GPR[EPVS]-1659847117059
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847117060
GPR[SPVAP]-1659847117060
GPR[EPVAP]-1659847118182
GPR[EPVS]-1659847118182
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847118187
GPR[SPVAP]-1659847118187
GPR[EPVAP]-1659847119313
GPR[EPVS]-1659847119313
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847119316
GPR[SPVAP]-1659847119316
GPR[EPVAP]-1659847120417
GPR[EPVS]-1659847120417
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847120418
GPR[SPVAP]-1659847120418
GPR[EPVAP]-1659847121549
GPR[EPVS]-1659847121549
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847121550
GPR[SPVAP]-1659847121550
GPR[EPVAP]-1659847122705
GPR[EPVS]-1659847122705
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847122707
GPR[SPVAP]-1659847122707
GPR[EPVAP]-1659847123819
GPR[EPVS]-1659847123819
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847123823
GPR[SPVAP]-1659847123823
GPR[EPVAP]-1659847124974
GPR[EPVS]-1659847124974
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847124975
GPR[SPVAP]-1659847124975
GPR[EPVAP]-1659847126093
GPR[EPVS]-1659847126093
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847126095
GPR[SPVAP]-1659847126095
GPR[EPVAP]-1659847129029
GPR[EPVS]-1659847129029
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847129031
GPR[SPVAP]-1659847129031
GPR[EPVAP]-1659847130142
GPR[EPVS]-1659847130142
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847130144
GPR[SPVAP]-1659847130144
GPR[EPVAP]-1659847131257
GPR[EPVS]-1659847131257
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847131259
GPR[SPVAP]-1659847131259
GPR[EPVAP]-1659847132358
GPR[EPVS]-1659847132358
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847132360
GPR[SPVAP]-1659847132360
GPR[EPVAP]-1659847133491
GPR[EPVS]-1659847133491
GPR[ESUN]-1659847133491
GPR[SSUN]-1659847133491
GPR[ESUN]-1659847133491
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659847134449
GPR[EFL]-1659847134452
GPR[SFP]-1659847134452
TIMEOUT : 600000
GPR[SSUN]-1659847134456
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659847136409
GPR[SPVAP]-1659847136409
GPR[EPVAP]-1659847142951
GPR[SPVATF]-1659847142951
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 0
GPR[EPVATF]-1659847145135
GPR[SPVATR]-1659847145136
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659847211761
GPR[EPVS]-1659847211761
GPR[PF]-1659847211761
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/10/patch_77314_1_ts_1659847211761.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM3681136034778532921/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/10/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/10/patch_77314_1_ts_1659847211761.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659847211772
GPR[SPVAP]-1659847211772
GPR[EPVAP]-1659847213776
GPR[SPVATF]-1659847213776
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847215878
GPR[EPVS]-1659847215878
GPR[ESUN]-1659847215878
GPR[SSUN]-1659847215878
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847218190
GPR[SPVAP]-1659847218190
GPR[EPVAP]-1659847224657
GPR[SPVATF]-1659847224657
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847226750
GPR[EPVS]-1659847226750
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847226751
GPR[SPVAP]-1659847226751
GPR[EPVAP]-1659847228875
GPR[SPVATF]-1659847228875
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847230958
GPR[EPVS]-1659847230958
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847230960
GPR[SPVAP]-1659847230960
GPR[EPVAP]-1659847233055
GPR[SPVATF]-1659847233055
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847235157
GPR[EPVS]-1659847235157
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847235159
GPR[SPVAP]-1659847235159
GPR[EPVAP]-1659847237199
GPR[SPVATF]-1659847237199
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847239264
GPR[EPVS]-1659847239264
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847239266
GPR[SPVAP]-1659847239266
GPR[EPVAP]-1659847241289
GPR[SPVATF]-1659847241289
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847243441
GPR[EPVS]-1659847243441
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847243443
GPR[SPVAP]-1659847243443
GPR[EPVAP]-1659847245508
GPR[SPVATF]-1659847245508
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847247707
GPR[EPVS]-1659847247707
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847247709
GPR[SPVAP]-1659847247709
GPR[EPVAP]-1659847249826
GPR[SPVATF]-1659847249826
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847251925
GPR[EPVS]-1659847251925
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847251927
GPR[SPVAP]-1659847251927
GPR[EPVAP]-1659847253967
GPR[SPVATF]-1659847253967
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847256064
GPR[EPVS]-1659847256064
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847256066
GPR[SPVAP]-1659847256066
GPR[EPVAP]-1659847258120
GPR[SPVATF]-1659847258121
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847260212
GPR[EPVS]-1659847260212
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847260214
GPR[SPVAP]-1659847260214
GPR[EPVAP]-1659847262319
GPR[SPVATF]-1659847262319
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847264438
GPR[EPVS]-1659847264438
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847264440
GPR[SPVAP]-1659847264440
GPR[EPVAP]-1659847266466
GPR[SPVATF]-1659847266466
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847268538
GPR[EPVS]-1659847268538
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847268540
GPR[SPVAP]-1659847268540
GPR[EPVAP]-1659847270643
GPR[SPVATF]-1659847270643
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847272735
GPR[EPVS]-1659847272735
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847272736
GPR[SPVAP]-1659847272736
GPR[EPVAP]-1659847276328
GPR[SPVATF]-1659847276328
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847278416
GPR[EPVS]-1659847278416
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847278417
GPR[SPVAP]-1659847278417
GPR[EPVAP]-1659847280455
GPR[SPVATF]-1659847280455
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847282561
GPR[EPVS]-1659847282561
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847282563
GPR[SPVAP]-1659847282563
GPR[EPVAP]-1659847284615
GPR[SPVATF]-1659847284615
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847286723
GPR[EPVS]-1659847286723
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847286724
GPR[SPVAP]-1659847286724
GPR[EPVAP]-1659847288760
GPR[SPVATF]-1659847288760
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847290856
GPR[EPVS]-1659847290856
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847290858
GPR[SPVAP]-1659847290858
GPR[EPVAP]-1659847292885
GPR[SPVATF]-1659847292885
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847295003
GPR[EPVS]-1659847295003
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847295004
GPR[SPVAP]-1659847295004
GPR[EPVAP]-1659847297066
GPR[SPVATF]-1659847297066
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847299173
GPR[EPVS]-1659847299173
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847299174
GPR[SPVAP]-1659847299174
GPR[EPVAP]-1659847301253
GPR[SPVATF]-1659847301253
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847303326
GPR[EPVS]-1659847303326
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847303328
GPR[SPVAP]-1659847303328
GPR[EPVAP]-1659847305372
GPR[SPVATF]-1659847305372
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847307478
GPR[EPVS]-1659847307478
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847307479
GPR[SPVAP]-1659847307479
GPR[EPVAP]-1659847309525
GPR[SPVATF]-1659847309525
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847311620
GPR[EPVS]-1659847311620
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847311622
GPR[SPVAP]-1659847311622
GPR[EPVAP]-1659847313690
GPR[SPVATF]-1659847313690
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847315842
GPR[EPVS]-1659847315842
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847315843
GPR[SPVAP]-1659847315843
GPR[EPVAP]-1659847317892
GPR[SPVATF]-1659847317892
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847320020
GPR[EPVS]-1659847320020
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847320022
GPR[SPVAP]-1659847320022
GPR[EPVAP]-1659847322065
GPR[SPVATF]-1659847322065
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847324148
GPR[EPVS]-1659847324148
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847324150
GPR[SPVAP]-1659847324150
GPR[EPVAP]-1659847326212
GPR[SPVATF]-1659847326212
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847328300
GPR[EPVS]-1659847328300
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847328302
GPR[SPVAP]-1659847328302
GPR[EPVAP]-1659847330338
GPR[SPVATF]-1659847330338
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847332447
GPR[EPVS]-1659847332447
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847332449
GPR[SPVAP]-1659847332449
GPR[EPVAP]-1659847334501
GPR[SPVATF]-1659847334501
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847336654
GPR[EPVS]-1659847336654
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847336655
GPR[SPVAP]-1659847336655
GPR[EPVAP]-1659847338705
GPR[SPVATF]-1659847338705
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847340772
GPR[EPVS]-1659847340772
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847340774
GPR[SPVAP]-1659847340774
GPR[EPVAP]-1659847342810
GPR[SPVATF]-1659847342810
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847344933
GPR[EPVS]-1659847344933
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847344946
GPR[SPVAP]-1659847344946
GPR[EPVAP]-1659847348376
GPR[SPVATF]-1659847348376
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847350422
GPR[EPVS]-1659847350422
GPR[ESUN]-1659847350424
GPR[SSUN]-1659847350424
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847357341
GPR[SPVAP]-1659847357341
GPR[EPVAP]-1659847363952
GPR[SPVATF]-1659847363952
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847365961
GPR[EPVS]-1659847365961
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659847365963
GPR[SPVAP]-1659847365963
GPR[EPVAP]-1659847367085
GPR[EPVS]-1659847367085
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847367087
GPR[SPVAP]-1659847367087
GPR[EPVAP]-1659847368204
GPR[EPVS]-1659847368204
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847368206
GPR[SPVAP]-1659847368206
GPR[EPVAP]-1659847369339
GPR[EPVS]-1659847369339
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847369342
GPR[SPVAP]-1659847369342
GPR[EPVAP]-1659847370482
GPR[EPVS]-1659847370482
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847370483
GPR[SPVAP]-1659847370483
GPR[EPVAP]-1659847371584
GPR[EPVS]-1659847371584
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847371586
GPR[SPVAP]-1659847371586
GPR[EPVAP]-1659847372727
GPR[EPVS]-1659847372727
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847372730
GPR[SPVAP]-1659847372730
GPR[EPVAP]-1659847374880
GPR[SPVATF]-1659847374880
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847377029
GPR[EPVS]-1659847377029
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847377030
GPR[SPVAP]-1659847377031
GPR[EPVAP]-1659847378162
GPR[EPVS]-1659847378162
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847378163
GPR[SPVAP]-1659847378163
GPR[EPVAP]-1659847379277
GPR[EPVS]-1659847379277
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847379278
GPR[SPVAP]-1659847379278
GPR[EPVAP]-1659847380397
GPR[EPVS]-1659847380397
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847380399
GPR[SPVAP]-1659847380399
GPR[EPVAP]-1659847381507
GPR[EPVS]-1659847381507
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847381509
GPR[SPVAP]-1659847381509
GPR[EPVAP]-1659847382617
GPR[EPVS]-1659847382617
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847382618
GPR[SPVAP]-1659847382618
GPR[EPVAP]-1659847383731
GPR[EPVS]-1659847383731
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847383733
GPR[SPVAP]-1659847383733
GPR[EPVAP]-1659847384864
GPR[EPVS]-1659847384864
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847384866
GPR[SPVAP]-1659847384866
GPR[EPVAP]-1659847385981
GPR[EPVS]-1659847385981
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847385983
GPR[SPVAP]-1659847385983
GPR[EPVAP]-1659847387102
GPR[EPVS]-1659847387102
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847387104
GPR[SPVAP]-1659847387104
GPR[EPVAP]-1659847388207
GPR[EPVS]-1659847388207
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847388209
GPR[SPVAP]-1659847388209
GPR[EPVAP]-1659847389333
GPR[EPVS]-1659847389333
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847389335
GPR[SPVAP]-1659847389335
GPR[EPVAP]-1659847390465
GPR[EPVS]-1659847390465
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847390467
GPR[SPVAP]-1659847390467
GPR[EPVAP]-1659847391584
GPR[EPVS]-1659847391584
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847391586
GPR[SPVAP]-1659847391586
GPR[EPVAP]-1659847393684
GPR[SPVATF]-1659847393684
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847395706
GPR[EPVS]-1659847395706
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659847395707
GPR[SPVAP]-1659847395707
GPR[EPVAP]-1659847396818
GPR[EPVS]-1659847396818
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847396819
GPR[SPVAP]-1659847396819
GPR[EPVAP]-1659847397921
GPR[EPVS]-1659847397921
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847397923
GPR[SPVAP]-1659847397923
GPR[EPVAP]-1659847399035
GPR[EPVS]-1659847399035
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847399038
GPR[SPVAP]-1659847399038
GPR[EPVAP]-1659847400168
GPR[EPVS]-1659847400168
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847400170
GPR[SPVAP]-1659847400170
GPR[EPVAP]-1659847401287
GPR[EPVS]-1659847401287
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847401288
GPR[SPVAP]-1659847401288
GPR[EPVAP]-1659847402392
GPR[EPVS]-1659847402392
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847402394
GPR[SPVAP]-1659847402394
GPR[EPVAP]-1659847403513
GPR[EPVS]-1659847403513
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847403515
GPR[SPVAP]-1659847403515
GPR[EPVAP]-1659847404626
GPR[EPVS]-1659847404626
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847404628
GPR[SPVAP]-1659847404628
GPR[EPVAP]-1659847405729
GPR[EPVS]-1659847405729
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847405730
GPR[SPVAP]-1659847405730
GPR[EPVAP]-1659847406840
GPR[EPVS]-1659847406840
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847406842
GPR[SPVAP]-1659847406842
GPR[EPVAP]-1659847407992
GPR[EPVS]-1659847407992
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847407994
GPR[SPVAP]-1659847407994
GPR[EPVAP]-1659847409127
GPR[EPVS]-1659847409127
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847409128
GPR[SPVAP]-1659847409128
GPR[EPVAP]-1659847411233
GPR[SPVATF]-1659847411233
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847413255
GPR[EPVS]-1659847413255
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847413257
GPR[SPVAP]-1659847413257
GPR[EPVAP]-1659847414362
GPR[EPVS]-1659847414362
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847414364
GPR[SPVAP]-1659847414364
GPR[EPVAP]-1659847415477
GPR[EPVS]-1659847415477
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847415478
GPR[SPVAP]-1659847415478
GPR[EPVAP]-1659847416603
GPR[EPVS]-1659847416603
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847416605
GPR[SPVAP]-1659847416605
GPR[EPVAP]-1659847419495
GPR[EPVS]-1659847419495
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847419497
GPR[SPVAP]-1659847419497
GPR[EPVAP]-1659847420610
GPR[EPVS]-1659847420610
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847420612
GPR[SPVAP]-1659847420612
GPR[EPVAP]-1659847421745
GPR[EPVS]-1659847421745
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847421747
GPR[SPVAP]-1659847421747
GPR[EPVAP]-1659847422852
GPR[EPVS]-1659847422852
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847422855
GPR[SPVAP]-1659847422855
GPR[EPVAP]-1659847423961
GPR[EPVS]-1659847423961
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847423963
GPR[SPVAP]-1659847423963
GPR[EPVAP]-1659847425076
GPR[EPVS]-1659847425076
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847425078
GPR[SPVAP]-1659847425078
GPR[EPVAP]-1659847426177
GPR[EPVS]-1659847426177
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847426179
GPR[SPVAP]-1659847426179
GPR[EPVAP]-1659847427296
GPR[EPVS]-1659847427296
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847427298
GPR[SPVAP]-1659847427298
GPR[EPVAP]-1659847428403
GPR[EPVS]-1659847428403
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847428406
GPR[SPVAP]-1659847428406
GPR[EPVAP]-1659847429528
GPR[EPVS]-1659847429528
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847429529
GPR[SPVAP]-1659847429529
GPR[EPVAP]-1659847430665
GPR[EPVS]-1659847430665
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847430669
GPR[SPVAP]-1659847430669
GPR[EPVAP]-1659847431795
GPR[EPVS]-1659847431795
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847431798
GPR[SPVAP]-1659847431798
GPR[EPVAP]-1659847432911
GPR[EPVS]-1659847432911
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847432912
GPR[SPVAP]-1659847432912
GPR[EPVAP]-1659847434073
GPR[EPVS]-1659847434073
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847434075
GPR[SPVAP]-1659847434075
GPR[EPVAP]-1659847435180
GPR[EPVS]-1659847435180
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847435182
GPR[SPVAP]-1659847435182
GPR[EPVAP]-1659847436317
GPR[EPVS]-1659847436317
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847436319
GPR[SPVAP]-1659847436319
GPR[EPVAP]-1659847437453
GPR[EPVS]-1659847437453
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847437454
GPR[SPVAP]-1659847437454
GPR[EPVAP]-1659847438567
GPR[EPVS]-1659847438567
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847438569
GPR[SPVAP]-1659847438569
GPR[EPVAP]-1659847439683
GPR[EPVS]-1659847439683
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847439684
GPR[SPVAP]-1659847439684
GPR[EPVAP]-1659847440784
GPR[EPVS]-1659847440784
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847440785
GPR[SPVAP]-1659847440785
GPR[EPVAP]-1659847441898
GPR[EPVS]-1659847441898
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847441900
GPR[SPVAP]-1659847441900
GPR[EPVAP]-1659847443048
GPR[EPVS]-1659847443048
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847443049
GPR[SPVAP]-1659847443049
GPR[EPVAP]-1659847444160
GPR[EPVS]-1659847444160
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847444162
GPR[SPVAP]-1659847444162
GPR[EPVAP]-1659847445271
GPR[EPVS]-1659847445271
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847445273
GPR[SPVAP]-1659847445273
GPR[EPVAP]-1659847446373
GPR[EPVS]-1659847446373
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847446375
GPR[SPVAP]-1659847446375
GPR[EPVAP]-1659847448478
GPR[SPVATF]-1659847448478
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847450466
GPR[EPVS]-1659847450466
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847450467
GPR[SPVAP]-1659847450467
GPR[EPVAP]-1659847451577
GPR[EPVS]-1659847451577
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847451579
GPR[SPVAP]-1659847451579
GPR[EPVAP]-1659847452677
GPR[EPVS]-1659847452677
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847452679
GPR[SPVAP]-1659847452679
GPR[EPVAP]-1659847453784
GPR[EPVS]-1659847453784
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847453787
GPR[SPVAP]-1659847453787
GPR[EPVAP]-1659847454917
GPR[EPVS]-1659847454917
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847454919
GPR[SPVAP]-1659847454919
GPR[EPVAP]-1659847456043
GPR[EPVS]-1659847456043
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847456045
GPR[SPVAP]-1659847456045
GPR[EPVAP]-1659847457193
GPR[EPVS]-1659847457193
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847457194
GPR[SPVAP]-1659847457194
GPR[EPVAP]-1659847458321
GPR[EPVS]-1659847458321
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847458326
GPR[SPVAP]-1659847458326
GPR[EPVAP]-1659847459459
GPR[EPVS]-1659847459459
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847459464
GPR[SPVAP]-1659847459464
GPR[EPVAP]-1659847460585
GPR[EPVS]-1659847460585
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847460587
GPR[SPVAP]-1659847460587
GPR[EPVAP]-1659847461697
GPR[EPVS]-1659847461697
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847461699
GPR[SPVAP]-1659847461699
GPR[EPVAP]-1659847462833
GPR[EPVS]-1659847462833
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847462834
GPR[SPVAP]-1659847462834
GPR[EPVAP]-1659847463973
GPR[EPVS]-1659847463973
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847463974
GPR[SPVAP]-1659847463974
GPR[EPVAP]-1659847465107
GPR[EPVS]-1659847465107
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847465111
GPR[SPVAP]-1659847465111
GPR[EPVAP]-1659847466228
GPR[EPVS]-1659847466228
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847466230
GPR[SPVAP]-1659847466230
GPR[EPVAP]-1659847467338
GPR[EPVS]-1659847467338
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847467339
GPR[SPVAP]-1659847467339
GPR[EPVAP]-1659847468438
GPR[EPVS]-1659847468438
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847468440
GPR[SPVAP]-1659847468440
GPR[EPVAP]-1659847469551
GPR[EPVS]-1659847469551
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659847469553
GPR[SPVAP]-1659847469553
GPR[EPVAP]-1659847470662
GPR[EPVS]-1659847470662
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847470665
GPR[SPVAP]-1659847470665
GPR[EPVAP]-1659847471767
GPR[EPVS]-1659847471767
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847471768
GPR[SPVAP]-1659847471768
GPR[EPVAP]-1659847472869
GPR[EPVS]-1659847472869
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847472870
GPR[SPVAP]-1659847472870
GPR[EPVAP]-1659847473990
GPR[EPVS]-1659847473991
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847473996
GPR[SPVAP]-1659847473996
GPR[EPVAP]-1659847475103
GPR[EPVS]-1659847475103
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847475107
GPR[SPVAP]-1659847475107
GPR[EPVAP]-1659847476216
GPR[EPVS]-1659847476216
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847476217
GPR[SPVAP]-1659847476217
GPR[EPVAP]-1659847477337
GPR[EPVS]-1659847477337
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847477339
GPR[SPVAP]-1659847477339
GPR[EPVAP]-1659847478439
GPR[EPVS]-1659847478439
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847478441
GPR[SPVAP]-1659847478441
GPR[EPVAP]-1659847479560
GPR[EPVS]-1659847479560
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847479566
GPR[SPVAP]-1659847479566
GPR[EPVAP]-1659847480676
GPR[EPVS]-1659847480676
GPR[ESUN]-1659847480676
GPR[SSUN]-1659847480676
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847487373
GPR[SPVAP]-1659847487373
GPR[EPVAP]-1659847495444
GPR[SPVATF]-1659847495448
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847497457
GPR[EPVS]-1659847497457
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847497459
GPR[SPVAP]-1659847497459
GPR[EPVAP]-1659847498580
GPR[EPVS]-1659847498580
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847498582
GPR[SPVAP]-1659847498582
GPR[EPVAP]-1659847499721
GPR[EPVS]-1659847499721
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847499723
GPR[SPVAP]-1659847499723
GPR[EPVAP]-1659847501826
GPR[SPVATF]-1659847501826
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847503913
GPR[EPVS]-1659847503913
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659847503915
GPR[SPVAP]-1659847503915
GPR[EPVAP]-1659847505056
GPR[EPVS]-1659847505056
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847505057
GPR[SPVAP]-1659847505057
GPR[EPVAP]-1659847506171
GPR[EPVS]-1659847506171
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847506173
GPR[SPVAP]-1659847506173
GPR[EPVAP]-1659847507284
GPR[EPVS]-1659847507284
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847507286
GPR[SPVAP]-1659847507286
GPR[EPVAP]-1659847508429
GPR[EPVS]-1659847508429
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847508431
GPR[SPVAP]-1659847508431
GPR[EPVAP]-1659847509560
GPR[EPVS]-1659847509560
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847509562
GPR[SPVAP]-1659847509562
GPR[EPVAP]-1659847510692
GPR[EPVS]-1659847510692
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847510694
GPR[SPVAP]-1659847510694
GPR[EPVAP]-1659847511800
GPR[EPVS]-1659847511800
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847511803
GPR[SPVAP]-1659847511803
GPR[EPVAP]-1659847512931
GPR[EPVS]-1659847512931
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847512933
GPR[SPVAP]-1659847512933
GPR[EPVAP]-1659847514035
GPR[EPVS]-1659847514035
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847514037
GPR[SPVAP]-1659847514037
GPR[EPVAP]-1659847515137
GPR[EPVS]-1659847515137
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847515138
GPR[SPVAP]-1659847515138
GPR[EPVAP]-1659847516263
GPR[EPVS]-1659847516263
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847516264
GPR[SPVAP]-1659847516264
GPR[EPVAP]-1659847517398
GPR[EPVS]-1659847517398
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847517399
GPR[SPVAP]-1659847517399
GPR[EPVAP]-1659847518519
GPR[EPVS]-1659847518519
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847518521
GPR[SPVAP]-1659847518521
GPR[EPVAP]-1659847519637
GPR[EPVS]-1659847519637
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847519638
GPR[SPVAP]-1659847519638
GPR[EPVAP]-1659847520757
GPR[EPVS]-1659847520757
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847520758
GPR[SPVAP]-1659847520758
GPR[EPVAP]-1659847521877
GPR[EPVS]-1659847521877
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847521878
GPR[SPVAP]-1659847521878
GPR[EPVAP]-1659847522992
GPR[EPVS]-1659847522992
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847522993
GPR[SPVAP]-1659847522993
GPR[EPVAP]-1659847524109
GPR[EPVS]-1659847524109
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847524111
GPR[SPVAP]-1659847524111
GPR[EPVAP]-1659847525227
GPR[EPVS]-1659847525227
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847525229
GPR[SPVAP]-1659847525229
GPR[EPVAP]-1659847526347
GPR[EPVS]-1659847526347
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847526348
GPR[SPVAP]-1659847526348
GPR[EPVAP]-1659847527455
GPR[EPVS]-1659847527455
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659847527456
GPR[SPVAP]-1659847527457
GPR[EPVAP]-1659847528582
GPR[EPVS]-1659847528582
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847528583
GPR[SPVAP]-1659847528583
GPR[EPVAP]-1659847529696
GPR[EPVS]-1659847529696
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847529698
GPR[SPVAP]-1659847529698
GPR[EPVAP]-1659847530805
GPR[EPVS]-1659847530805
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847530807
GPR[SPVAP]-1659847530807
GPR[EPVAP]-1659847531948
GPR[EPVS]-1659847531948
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847531951
GPR[SPVAP]-1659847531951
GPR[EPVAP]-1659847533068
GPR[EPVS]-1659847533068
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847533070
GPR[SPVAP]-1659847533070
GPR[EPVAP]-1659847534252
GPR[EPVS]-1659847534252
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847534253
GPR[SPVAP]-1659847534253
GPR[EPVAP]-1659847535392
GPR[EPVS]-1659847535392
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847535394
GPR[SPVAP]-1659847535394
GPR[EPVAP]-1659847536498
GPR[EPVS]-1659847536498
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847536499
GPR[SPVAP]-1659847536499
GPR[EPVAP]-1659847537614
GPR[EPVS]-1659847537614
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847537615
GPR[SPVAP]-1659847537615
GPR[EPVAP]-1659847538728
GPR[EPVS]-1659847538728
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847538730
GPR[SPVAP]-1659847538730
GPR[EPVAP]-1659847539857
GPR[EPVS]-1659847539857
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847539859
GPR[SPVAP]-1659847539859
GPR[EPVAP]-1659847540982
GPR[EPVS]-1659847540982
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847540984
GPR[SPVAP]-1659847540984
GPR[EPVAP]-1659847542101
GPR[EPVS]-1659847542101
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847542103
GPR[SPVAP]-1659847542103
GPR[EPVAP]-1659847543207
GPR[EPVS]-1659847543207
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847543209
GPR[SPVAP]-1659847543209
GPR[EPVAP]-1659847544321
GPR[EPVS]-1659847544321
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847544322
GPR[SPVAP]-1659847544322
GPR[EPVAP]-1659847545429
GPR[EPVS]-1659847545429
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847545430
GPR[SPVAP]-1659847545430
GPR[EPVAP]-1659847546622
GPR[EPVS]-1659847546622
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847546624
GPR[SPVAP]-1659847546624
GPR[EPVAP]-1659847547749
GPR[EPVS]-1659847547749
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847547750
GPR[SPVAP]-1659847547750
GPR[EPVAP]-1659847548865
GPR[EPVS]-1659847548865
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847548867
GPR[SPVAP]-1659847548867
GPR[EPVAP]-1659847549980
GPR[EPVS]-1659847549980
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847549981
GPR[SPVAP]-1659847549981
GPR[EPVAP]-1659847551065
GPR[EPVS]-1659847551065
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847551067
GPR[SPVAP]-1659847551067
GPR[EPVAP]-1659847552178
GPR[EPVS]-1659847552178
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847552179
GPR[SPVAP]-1659847552179
GPR[EPVAP]-1659847553278
GPR[EPVS]-1659847553278
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847553283
GPR[SPVAP]-1659847553283
GPR[EPVAP]-1659847554384
GPR[EPVS]-1659847554384
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847554386
GPR[SPVAP]-1659847554386
GPR[EPVAP]-1659847555497
GPR[EPVS]-1659847555497
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847555498
GPR[SPVAP]-1659847555498
GPR[EPVAP]-1659847556621
GPR[EPVS]-1659847556621
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847556623
GPR[SPVAP]-1659847556623
GPR[EPVAP]-1659847557730
GPR[EPVS]-1659847557730
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847557732
GPR[SPVAP]-1659847557732
GPR[EPVAP]-1659847558845
GPR[EPVS]-1659847558845
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847558848
GPR[SPVAP]-1659847558848
GPR[EPVAP]-1659847560014
GPR[EPVS]-1659847560014
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847560016
GPR[SPVAP]-1659847560016
GPR[EPVAP]-1659847561125
GPR[EPVS]-1659847561125
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847561127
GPR[SPVAP]-1659847561127
GPR[EPVAP]-1659847562247
GPR[EPVS]-1659847562247
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847562249
GPR[SPVAP]-1659847562249
GPR[EPVAP]-1659847563374
GPR[EPVS]-1659847563374
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847563377
GPR[SPVAP]-1659847563377
GPR[EPVAP]-1659847566257
GPR[EPVS]-1659847566257
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847566259
GPR[SPVAP]-1659847566259
GPR[EPVAP]-1659847567356
GPR[EPVS]-1659847567356
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847567358
GPR[SPVAP]-1659847567358
GPR[EPVAP]-1659847568459
GPR[EPVS]-1659847568459
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847568461
GPR[SPVAP]-1659847568461
GPR[EPVAP]-1659847569578
GPR[EPVS]-1659847569578
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847569579
GPR[SPVAP]-1659847569579
GPR[EPVAP]-1659847570692
GPR[EPVS]-1659847570692
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847570695
GPR[SPVAP]-1659847570695
GPR[EPVAP]-1659847571801
GPR[EPVS]-1659847571801
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847571803
GPR[SPVAP]-1659847571803
GPR[EPVAP]-1659847572936
GPR[EPVS]-1659847572936
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847572938
GPR[SPVAP]-1659847572938
GPR[EPVAP]-1659847574051
GPR[EPVS]-1659847574051
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847574053
GPR[SPVAP]-1659847574053
GPR[EPVAP]-1659847575161
GPR[EPVS]-1659847575161
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847575163
GPR[SPVAP]-1659847575163
GPR[EPVAP]-1659847576275
GPR[EPVS]-1659847576275
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847576277
GPR[SPVAP]-1659847576277
GPR[EPVAP]-1659847577385
GPR[EPVS]-1659847577385
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847577387
GPR[SPVAP]-1659847577387
GPR[EPVAP]-1659847578488
GPR[EPVS]-1659847578488
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847578491
GPR[SPVAP]-1659847578491
GPR[EPVAP]-1659847579593
GPR[EPVS]-1659847579593
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847579595
GPR[SPVAP]-1659847579595
GPR[EPVAP]-1659847580689
GPR[EPVS]-1659847580689
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847580690
GPR[SPVAP]-1659847580690
GPR[EPVAP]-1659847581800
GPR[EPVS]-1659847581800
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847581802
GPR[SPVAP]-1659847581802
GPR[EPVAP]-1659847582905
GPR[EPVS]-1659847582905
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847582907
GPR[SPVAP]-1659847582907
GPR[EPVAP]-1659847584033
GPR[EPVS]-1659847584033
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847584035
GPR[SPVAP]-1659847584035
GPR[EPVAP]-1659847585141
GPR[EPVS]-1659847585141
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847585143
GPR[SPVAP]-1659847585143
GPR[EPVAP]-1659847587250
GPR[SPVATF]-1659847587250
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847589310
GPR[EPVS]-1659847589310
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847589312
GPR[SPVAP]-1659847589312
GPR[EPVAP]-1659847590444
GPR[EPVS]-1659847590444
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847590445
GPR[SPVAP]-1659847590445
GPR[EPVAP]-1659847591608
GPR[EPVS]-1659847591608
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847591610
GPR[SPVAP]-1659847591610
GPR[EPVAP]-1659847592722
GPR[EPVS]-1659847592722
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847592723
GPR[SPVAP]-1659847592723
GPR[EPVAP]-1659847593845
GPR[EPVS]-1659847593845
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847593847
GPR[SPVAP]-1659847593847
GPR[EPVAP]-1659847594951
GPR[EPVS]-1659847594951
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847594953
GPR[SPVAP]-1659847594953
GPR[EPVAP]-1659847596065
GPR[EPVS]-1659847596065
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847596066
GPR[SPVAP]-1659847596066
GPR[EPVAP]-1659847597180
GPR[EPVS]-1659847597180
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847597182
GPR[SPVAP]-1659847597182
GPR[EPVAP]-1659847598284
GPR[EPVS]-1659847598284
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847598287
GPR[SPVAP]-1659847598287
GPR[EPVAP]-1659847599401
GPR[EPVS]-1659847599401
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847599403
GPR[SPVAP]-1659847599403
GPR[EPVAP]-1659847600514
GPR[EPVS]-1659847600514
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847600517
GPR[SPVAP]-1659847600517
GPR[EPVAP]-1659847601616
GPR[EPVS]-1659847601616
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847601618
GPR[SPVAP]-1659847601618
GPR[EPVAP]-1659847602781
GPR[EPVS]-1659847602781
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847602785
GPR[SPVAP]-1659847602785
GPR[EPVAP]-1659847603900
GPR[EPVS]-1659847603900
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847603902
GPR[SPVAP]-1659847603902
GPR[EPVAP]-1659847605007
GPR[EPVS]-1659847605007
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847605009
GPR[SPVAP]-1659847605009
GPR[EPVAP]-1659847606129
GPR[EPVS]-1659847606129
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847606130
GPR[SPVAP]-1659847606130
GPR[EPVAP]-1659847607249
GPR[EPVS]-1659847607249
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847607251
GPR[SPVAP]-1659847607251
GPR[EPVAP]-1659847608379
GPR[EPVS]-1659847608379
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847608381
GPR[SPVAP]-1659847608381
GPR[EPVAP]-1659847609509
GPR[EPVS]-1659847609509
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847609511
GPR[SPVAP]-1659847609511
GPR[EPVAP]-1659847610621
GPR[EPVS]-1659847610621
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847610622
GPR[SPVAP]-1659847610622
GPR[EPVAP]-1659847611758
GPR[EPVS]-1659847611758
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847611760
GPR[SPVAP]-1659847611760
GPR[EPVAP]-1659847612873
GPR[EPVS]-1659847612873
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847612875
GPR[SPVAP]-1659847612875
GPR[EPVAP]-1659847613994
GPR[EPVS]-1659847613994
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847613997
GPR[SPVAP]-1659847613997
GPR[EPVAP]-1659847615104
GPR[EPVS]-1659847615104
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847615106
GPR[SPVAP]-1659847615106
GPR[EPVAP]-1659847616215
GPR[EPVS]-1659847616215
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847616217
GPR[SPVAP]-1659847616217
GPR[EPVAP]-1659847617333
GPR[EPVS]-1659847617333
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847617335
GPR[SPVAP]-1659847617335
GPR[EPVAP]-1659847618462
GPR[EPVS]-1659847618462
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847618466
GPR[SPVAP]-1659847618466
GPR[EPVAP]-1659847619574
GPR[EPVS]-1659847619574
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659847619577
GPR[SPVAP]-1659847619577
GPR[EPVAP]-1659847620676
GPR[EPVS]-1659847620676
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659847620678
GPR[SPVAP]-1659847620678
GPR[EPVAP]-1659847621819
GPR[EPVS]-1659847621819
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659847621820
GPR[SPVAP]-1659847621820
GPR[EPVAP]-1659847622946
GPR[EPVS]-1659847622946
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847622948
GPR[SPVAP]-1659847622948
GPR[EPVAP]-1659847624075
GPR[EPVS]-1659847624075
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847624076
GPR[SPVAP]-1659847624076
GPR[EPVAP]-1659847625222
GPR[EPVS]-1659847625222
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847625224
GPR[SPVAP]-1659847625224
GPR[EPVAP]-1659847626344
GPR[EPVS]-1659847626344
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847626346
GPR[SPVAP]-1659847626346
GPR[EPVAP]-1659847627454
GPR[EPVS]-1659847627454
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847627455
GPR[SPVAP]-1659847627455
GPR[EPVAP]-1659847628568
GPR[EPVS]-1659847628568
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847628570
GPR[SPVAP]-1659847628570
GPR[EPVAP]-1659847629664
GPR[EPVS]-1659847629664
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847629670
GPR[SPVAP]-1659847629670
GPR[EPVAP]-1659847630776
GPR[EPVS]-1659847630776
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847630779
GPR[SPVAP]-1659847630779
GPR[EPVAP]-1659847631893
GPR[EPVS]-1659847631893
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847631898
GPR[SPVAP]-1659847631898
GPR[EPVAP]-1659847633021
GPR[EPVS]-1659847633021
GPR[ESUN]-1659847633022
GPR[SSUN]-1659847633022
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659847633681
GPR[SSUN]-1659847633681
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847640816
GPR[SPVAP]-1659847640816
GPR[EPVAP]-1659847647464
GPR[SPVATF]-1659847647465
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847649469
GPR[EPVS]-1659847649469
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847649471
GPR[SPVAP]-1659847649471
GPR[EPVAP]-1659847650594
GPR[EPVS]-1659847650594
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847650596
GPR[SPVAP]-1659847650596
GPR[EPVAP]-1659847652657
GPR[SPVATF]-1659847652658
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847654718
GPR[EPVS]-1659847654718
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847654719
GPR[SPVAP]-1659847654719
GPR[EPVAP]-1659847655867
GPR[EPVS]-1659847655867
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847655868
GPR[SPVAP]-1659847655868
GPR[EPVAP]-1659847656980
GPR[EPVS]-1659847656980
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847656982
GPR[SPVAP]-1659847656982
GPR[EPVAP]-1659847658094
GPR[EPVS]-1659847658094
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847658095
GPR[SPVAP]-1659847658095
GPR[EPVAP]-1659847659208
GPR[EPVS]-1659847659208
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847659209
GPR[SPVAP]-1659847659209
GPR[EPVAP]-1659847660352
GPR[EPVS]-1659847660352
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847660354
GPR[SPVAP]-1659847660354
GPR[EPVAP]-1659847661483
GPR[EPVS]-1659847661483
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847661486
GPR[SPVAP]-1659847661486
GPR[EPVAP]-1659847662609
GPR[EPVS]-1659847662609
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847662612
GPR[SPVAP]-1659847662612
GPR[EPVAP]-1659847663749
GPR[EPVS]-1659847663749
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847663751
GPR[SPVAP]-1659847663751
GPR[EPVAP]-1659847664887
GPR[EPVS]-1659847664887
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847664889
GPR[SPVAP]-1659847664889
GPR[EPVAP]-1659847666007
GPR[EPVS]-1659847666007
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847666009
GPR[SPVAP]-1659847666009
GPR[EPVAP]-1659847667158
GPR[EPVS]-1659847667158
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847667160
GPR[SPVAP]-1659847667160
GPR[EPVAP]-1659847668300
GPR[EPVS]-1659847668300
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847668302
GPR[SPVAP]-1659847668302
GPR[EPVAP]-1659847669447
GPR[EPVS]-1659847669447
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847669449
GPR[SPVAP]-1659847669449
GPR[EPVAP]-1659847670561
GPR[EPVS]-1659847670561
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847670563
GPR[SPVAP]-1659847670563
GPR[EPVAP]-1659847671668
GPR[EPVS]-1659847671668
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847671670
GPR[SPVAP]-1659847671670
GPR[EPVAP]-1659847672790
GPR[EPVS]-1659847672790
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847672792
GPR[SPVAP]-1659847672792
GPR[EPVAP]-1659847673911
GPR[EPVS]-1659847673911
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847673912
GPR[SPVAP]-1659847673912
GPR[EPVAP]-1659847675034
GPR[EPVS]-1659847675034
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847675036
GPR[SPVAP]-1659847675036
GPR[EPVAP]-1659847676154
GPR[EPVS]-1659847676154
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847676156
GPR[SPVAP]-1659847676156
GPR[EPVAP]-1659847677267
GPR[EPVS]-1659847677267
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847677269
GPR[SPVAP]-1659847677269
GPR[EPVAP]-1659847678386
GPR[EPVS]-1659847678386
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847678388
GPR[SPVAP]-1659847678388
GPR[EPVAP]-1659847679501
GPR[EPVS]-1659847679501
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847679503
GPR[SPVAP]-1659847679503
GPR[EPVAP]-1659847680610
GPR[EPVS]-1659847680610
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847680615
GPR[SPVAP]-1659847680615
GPR[EPVAP]-1659847681741
GPR[EPVS]-1659847681741
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847681742
GPR[SPVAP]-1659847681742
GPR[EPVAP]-1659847682890
GPR[EPVS]-1659847682890
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847682892
GPR[SPVAP]-1659847682892
GPR[EPVAP]-1659847684008
GPR[EPVS]-1659847684008
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847684009
GPR[SPVAP]-1659847684009
GPR[EPVAP]-1659847685146
GPR[EPVS]-1659847685146
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847685148
GPR[SPVAP]-1659847685148
GPR[EPVAP]-1659847686274
GPR[EPVS]-1659847686274
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847686276
GPR[SPVAP]-1659847686276
GPR[EPVAP]-1659847687383
GPR[EPVS]-1659847687383
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847687385
GPR[SPVAP]-1659847687385
GPR[EPVAP]-1659847688487
GPR[EPVS]-1659847688487
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847688490
GPR[SPVAP]-1659847688490
GPR[EPVAP]-1659847689644
GPR[EPVS]-1659847689644
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847689645
GPR[SPVAP]-1659847689645
GPR[EPVAP]-1659847690754
GPR[EPVS]-1659847690754
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847690757
GPR[SPVAP]-1659847690757
GPR[EPVAP]-1659847691873
GPR[EPVS]-1659847691873
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847691874
GPR[SPVAP]-1659847691874
GPR[EPVAP]-1659847693011
GPR[EPVS]-1659847693011
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847693012
GPR[SPVAP]-1659847693012
GPR[EPVAP]-1659847694133
GPR[EPVS]-1659847694133
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847694135
GPR[SPVAP]-1659847694135
GPR[EPVAP]-1659847695237
GPR[EPVS]-1659847695237
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847695239
GPR[SPVAP]-1659847695239
GPR[EPVAP]-1659847696344
GPR[EPVS]-1659847696344
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847696346
GPR[SPVAP]-1659847696346
GPR[EPVAP]-1659847697469
GPR[EPVS]-1659847697469
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847697471
GPR[SPVAP]-1659847697471
GPR[EPVAP]-1659847698601
GPR[EPVS]-1659847698601
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847698603
GPR[SPVAP]-1659847698603
GPR[EPVAP]-1659847699741
GPR[EPVS]-1659847699741
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847699743
GPR[SPVAP]-1659847699743
GPR[EPVAP]-1659847700858
GPR[EPVS]-1659847700858
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847700860
GPR[SPVAP]-1659847700860
GPR[EPVAP]-1659847701974
GPR[EPVS]-1659847701974
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847701976
GPR[SPVAP]-1659847701976
GPR[EPVAP]-1659847703102
GPR[EPVS]-1659847703102
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847703110
GPR[SPVAP]-1659847703110
GPR[EPVAP]-1659847704216
GPR[EPVS]-1659847704216
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847704219
GPR[SPVAP]-1659847704219
GPR[EPVAP]-1659847705338
GPR[EPVS]-1659847705338
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847705340
GPR[SPVAP]-1659847705340
GPR[EPVAP]-1659847706457
GPR[EPVS]-1659847706457
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847706459
GPR[SPVAP]-1659847706459
GPR[EPVAP]-1659847707741
GPR[EPVS]-1659847707741
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847707750
GPR[SPVAP]-1659847707750
GPR[EPVAP]-1659847710062
GPR[EPVS]-1659847710062
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847710064
GPR[SPVAP]-1659847710064
GPR[EPVAP]-1659847711221
GPR[EPVS]-1659847711221
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847711223
GPR[SPVAP]-1659847711223
GPR[EPVAP]-1659847712365
GPR[EPVS]-1659847712365
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847712366
GPR[SPVAP]-1659847712366
GPR[EPVAP]-1659847713485
GPR[EPVS]-1659847713485
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847713489
GPR[SPVAP]-1659847713489
GPR[EPVAP]-1659847714602
GPR[EPVS]-1659847714602
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847714605
GPR[SPVAP]-1659847714605
GPR[EPVAP]-1659847715771
GPR[EPVS]-1659847715771
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847715772
GPR[SPVAP]-1659847715772
GPR[EPVAP]-1659847716894
GPR[EPVS]-1659847716894
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847716896
GPR[SPVAP]-1659847716896
GPR[EPVAP]-1659847718008
GPR[EPVS]-1659847718008
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847718010
GPR[SPVAP]-1659847718010
GPR[EPVAP]-1659847719118
GPR[EPVS]-1659847719118
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847719123
GPR[SPVAP]-1659847719123
GPR[EPVAP]-1659847720251
GPR[EPVS]-1659847720251
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847720252
GPR[SPVAP]-1659847720252
GPR[EPVAP]-1659847721371
GPR[EPVS]-1659847721371
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847721373
GPR[SPVAP]-1659847721373
GPR[EPVAP]-1659847722497
GPR[EPVS]-1659847722497
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847722498
GPR[SPVAP]-1659847722498
GPR[EPVAP]-1659847723609
GPR[EPVS]-1659847723609
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847723611
GPR[SPVAP]-1659847723611
GPR[EPVAP]-1659847724722
GPR[EPVS]-1659847724722
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847724731
GPR[SPVAP]-1659847724731
GPR[EPVAP]-1659847725856
GPR[EPVS]-1659847725856
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847725858
GPR[SPVAP]-1659847725858
GPR[EPVAP]-1659847726964
GPR[EPVS]-1659847726964
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847726966
GPR[SPVAP]-1659847726966
GPR[EPVAP]-1659847728077
GPR[EPVS]-1659847728077
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847728079
GPR[SPVAP]-1659847728079
GPR[EPVAP]-1659847729201
GPR[EPVS]-1659847729201
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847729202
GPR[SPVAP]-1659847729202
GPR[EPVAP]-1659847730326
GPR[EPVS]-1659847730326
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847730327
GPR[SPVAP]-1659847730327
GPR[EPVAP]-1659847731448
GPR[EPVS]-1659847731448
========
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847731458
GPR[SPVAP]-1659847731458
GPR[EPVAP]-1659847732566
GPR[EPVS]-1659847732567
========
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659847732571
GPR[SPVAP]-1659847732571
GPR[EPVAP]-1659847733689
GPR[EPVS]-1659847733689
GPR[ESUN]-1659847733690
GPR[SSUN]-1659847733690
org.apache.commons.math3.linear.EigenDecomposition,579
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

GPR[ESUN]-1659847740018
GPR[SSUN]-1659847740018
GPR[ESUN]-1659847740018
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659847740738
GPR[EFL]-1659847740741
GPR[SFP]-1659847740741
TIMEOUT : 600000
GPR[SSUN]-1659847740745
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659847742770
GPR[SPVAP]-1659847742770
GPR[EPVAP]-1659847749293
GPR[SPVATF]-1659847749293
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 0
GPR[EPVATF]-1659847751319
GPR[SPVATR]-1659847751320
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659847816305
GPR[EPVS]-1659847816305
GPR[PF]-1659847816305
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/11/patch_75568_1_ts_1659847816305.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM1448918537185335734/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/11/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/11/patch_75568_1_ts_1659847816305.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659847816314
GPR[SPVAP]-1659847816314
GPR[EPVAP]-1659847818316
GPR[SPVATF]-1659847818316
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847820310
GPR[EPVS]-1659847820310
GPR[ESUN]-1659847820310
GPR[SSUN]-1659847820310
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847822689
GPR[SPVAP]-1659847822689
GPR[EPVAP]-1659847829295
GPR[SPVATF]-1659847829295
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847831286
GPR[EPVS]-1659847831286
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847831287
GPR[SPVAP]-1659847831287
GPR[EPVAP]-1659847833374
GPR[SPVATF]-1659847833374
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847835346
GPR[EPVS]-1659847835346
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847835348
GPR[SPVAP]-1659847835348
GPR[EPVAP]-1659847837426
GPR[SPVATF]-1659847837426
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847839416
GPR[EPVS]-1659847839416
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847839418
GPR[SPVAP]-1659847839418
GPR[EPVAP]-1659847841544
GPR[SPVATF]-1659847841544
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847843570
GPR[EPVS]-1659847843570
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847843571
GPR[SPVAP]-1659847843571
GPR[EPVAP]-1659847845611
GPR[SPVATF]-1659847845611
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847847605
GPR[EPVS]-1659847847605
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847847607
GPR[SPVAP]-1659847847607
GPR[EPVAP]-1659847849708
GPR[SPVATF]-1659847849708
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847851678
GPR[EPVS]-1659847851678
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847851679
GPR[SPVAP]-1659847851679
GPR[EPVAP]-1659847853800
GPR[SPVATF]-1659847853800
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847857831
GPR[EPVS]-1659847857831
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847857832
GPR[SPVAP]-1659847857832
GPR[EPVAP]-1659847859875
GPR[SPVATF]-1659847859875
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847861837
GPR[EPVS]-1659847861837
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847861838
GPR[SPVAP]-1659847861838
GPR[EPVAP]-1659847863911
GPR[SPVATF]-1659847863911
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847865887
GPR[EPVS]-1659847865887
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847865888
GPR[SPVAP]-1659847865888
GPR[EPVAP]-1659847867944
GPR[SPVATF]-1659847867944
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847869941
GPR[EPVS]-1659847869941
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847869942
GPR[SPVAP]-1659847869942
GPR[EPVAP]-1659847872058
GPR[SPVATF]-1659847872058
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847874073
GPR[EPVS]-1659847874073
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847874075
GPR[SPVAP]-1659847874075
GPR[EPVAP]-1659847876144
GPR[SPVATF]-1659847876144
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847878182
GPR[EPVS]-1659847878182
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847878183
GPR[SPVAP]-1659847878183
GPR[EPVAP]-1659847880231
GPR[SPVATF]-1659847880231
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847882181
GPR[EPVS]-1659847882181
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847882183
GPR[SPVAP]-1659847882183
GPR[EPVAP]-1659847884222
GPR[SPVATF]-1659847884222
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847886206
GPR[EPVS]-1659847886206
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847886207
GPR[SPVAP]-1659847886207
GPR[EPVAP]-1659847888253
GPR[SPVATF]-1659847888253
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847890223
GPR[EPVS]-1659847890223
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847890225
GPR[SPVAP]-1659847890225
GPR[EPVAP]-1659847892302
GPR[SPVATF]-1659847892302
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847894286
GPR[EPVS]-1659847894286
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847894287
GPR[SPVAP]-1659847894287
GPR[EPVAP]-1659847896356
GPR[SPVATF]-1659847896356
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847898325
GPR[EPVS]-1659847898325
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847898326
GPR[SPVAP]-1659847898326
GPR[EPVAP]-1659847900377
GPR[SPVATF]-1659847900377
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847902404
GPR[EPVS]-1659847902404
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847902405
GPR[SPVAP]-1659847902405
GPR[EPVAP]-1659847904483
GPR[SPVATF]-1659847904483
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847906492
GPR[EPVS]-1659847906492
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847906494
GPR[SPVAP]-1659847906494
GPR[EPVAP]-1659847908557
GPR[SPVATF]-1659847908557
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847910514
GPR[EPVS]-1659847910514
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847910516
GPR[SPVAP]-1659847910516
GPR[EPVAP]-1659847912555
GPR[SPVATF]-1659847912555
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847914512
GPR[EPVS]-1659847914512
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847914514
GPR[SPVAP]-1659847914514
GPR[EPVAP]-1659847916612
GPR[SPVATF]-1659847916612
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847918593
GPR[EPVS]-1659847918593
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847918595
GPR[SPVAP]-1659847918595
GPR[EPVAP]-1659847920637
GPR[SPVATF]-1659847920637
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847922639
GPR[EPVS]-1659847922639
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847922640
GPR[SPVAP]-1659847922640
GPR[EPVAP]-1659847924681
GPR[SPVATF]-1659847924681
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847929029
GPR[EPVS]-1659847929029
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847929031
GPR[SPVAP]-1659847929031
GPR[EPVAP]-1659847931086
GPR[SPVATF]-1659847931086
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847933080
GPR[EPVS]-1659847933080
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659847933082
GPR[SPVAP]-1659847933082
GPR[EPVAP]-1659847935132
GPR[SPVATF]-1659847935132
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847937142
GPR[EPVS]-1659847937142
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847937144
GPR[SPVAP]-1659847937144
GPR[EPVAP]-1659847939221
GPR[SPVATF]-1659847939221
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847941210
GPR[EPVS]-1659847941210
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847941212
GPR[SPVAP]-1659847941212
GPR[EPVAP]-1659847943254
GPR[SPVATF]-1659847943254
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847945238
GPR[EPVS]-1659847945238
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847945240
GPR[SPVAP]-1659847945240
GPR[EPVAP]-1659847947273
GPR[SPVATF]-1659847947273
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847949270
GPR[EPVS]-1659847949270
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659847949272
GPR[SPVAP]-1659847949272
GPR[EPVAP]-1659847951345
GPR[SPVATF]-1659847951345
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847953324
GPR[EPVS]-1659847953324
GPR[ESUN]-1659847953326
GPR[SSUN]-1659847953326
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847960445
GPR[SPVAP]-1659847960446
GPR[EPVAP]-1659847967104
GPR[SPVATF]-1659847967104
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847969107
GPR[EPVS]-1659847969107
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659847969108
GPR[SPVAP]-1659847969108
GPR[EPVAP]-1659847970273
GPR[EPVS]-1659847970273
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847970275
GPR[SPVAP]-1659847970275
GPR[EPVAP]-1659847971383
GPR[EPVS]-1659847971383
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847971384
GPR[SPVAP]-1659847971384
GPR[EPVAP]-1659847972513
GPR[EPVS]-1659847972513
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847972516
GPR[SPVAP]-1659847972516
GPR[EPVAP]-1659847973619
GPR[EPVS]-1659847973619
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847973621
GPR[SPVAP]-1659847973621
GPR[EPVAP]-1659847974735
GPR[EPVS]-1659847974735
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847974736
GPR[SPVAP]-1659847974736
GPR[EPVAP]-1659847975874
GPR[EPVS]-1659847975874
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847975877
GPR[SPVAP]-1659847975877
GPR[EPVAP]-1659847977946
GPR[SPVATF]-1659847977946
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847979894
GPR[EPVS]-1659847979894
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847979896
GPR[SPVAP]-1659847979896
GPR[EPVAP]-1659847980985
GPR[EPVS]-1659847980985
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847980987
GPR[SPVAP]-1659847980987
GPR[EPVAP]-1659847982113
GPR[EPVS]-1659847982113
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847982115
GPR[SPVAP]-1659847982115
GPR[EPVAP]-1659847983225
GPR[EPVS]-1659847983225
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847983226
GPR[SPVAP]-1659847983226
GPR[EPVAP]-1659847984346
GPR[EPVS]-1659847984346
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847984348
GPR[SPVAP]-1659847984348
GPR[EPVAP]-1659847985528
GPR[EPVS]-1659847985528
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659847985529
GPR[SPVAP]-1659847985529
GPR[EPVAP]-1659847986648
GPR[EPVS]-1659847986648
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847986649
GPR[SPVAP]-1659847986649
GPR[EPVAP]-1659847987764
GPR[EPVS]-1659847987764
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847987765
GPR[SPVAP]-1659847987765
GPR[EPVAP]-1659847988907
GPR[EPVS]-1659847988907
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847988909
GPR[SPVAP]-1659847988909
GPR[EPVAP]-1659847990029
GPR[EPVS]-1659847990029
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847990031
GPR[SPVAP]-1659847990031
GPR[EPVAP]-1659847991162
GPR[EPVS]-1659847991162
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847991164
GPR[SPVAP]-1659847991164
GPR[EPVAP]-1659847992286
GPR[EPVS]-1659847992286
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847992287
GPR[SPVAP]-1659847992287
GPR[EPVAP]-1659847993390
GPR[EPVS]-1659847993390
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847993392
GPR[SPVAP]-1659847993392
GPR[EPVAP]-1659847994511
GPR[EPVS]-1659847994511
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659847994513
GPR[SPVAP]-1659847994513
GPR[EPVAP]-1659847996585
GPR[SPVATF]-1659847996585
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659847998545
GPR[EPVS]-1659847998545
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659847998546
GPR[SPVAP]-1659847998546
GPR[EPVAP]-1659848001226
GPR[EPVS]-1659848001226
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848001228
GPR[SPVAP]-1659848001228
GPR[EPVAP]-1659848002365
GPR[EPVS]-1659848002365
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848002367
GPR[SPVAP]-1659848002367
GPR[EPVAP]-1659848003491
GPR[EPVS]-1659848003491
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848003493
GPR[SPVAP]-1659848003493
GPR[EPVAP]-1659848004597
GPR[EPVS]-1659848004597
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848004599
GPR[SPVAP]-1659848004599
GPR[EPVAP]-1659848005709
GPR[EPVS]-1659848005709
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848005711
GPR[SPVAP]-1659848005711
GPR[EPVAP]-1659848006813
GPR[EPVS]-1659848006813
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848006815
GPR[SPVAP]-1659848006815
GPR[EPVAP]-1659848007921
GPR[EPVS]-1659848007921
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848007922
GPR[SPVAP]-1659848007922
GPR[EPVAP]-1659848009035
GPR[EPVS]-1659848009035
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848009037
GPR[SPVAP]-1659848009037
GPR[EPVAP]-1659848010148
GPR[EPVS]-1659848010148
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848010149
GPR[SPVAP]-1659848010149
GPR[EPVAP]-1659848011255
GPR[EPVS]-1659848011255
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848011258
GPR[SPVAP]-1659848011258
GPR[EPVAP]-1659848012407
GPR[EPVS]-1659848012407
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848012409
GPR[SPVAP]-1659848012409
GPR[EPVAP]-1659848013544
GPR[EPVS]-1659848013544
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848013545
GPR[SPVAP]-1659848013545
GPR[EPVAP]-1659848015629
GPR[SPVATF]-1659848015629
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848017612
GPR[EPVS]-1659848017612
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848017614
GPR[SPVAP]-1659848017614
GPR[EPVAP]-1659848018714
GPR[EPVS]-1659848018714
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848018716
GPR[SPVAP]-1659848018716
GPR[EPVAP]-1659848019840
GPR[EPVS]-1659848019840
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848019842
GPR[SPVAP]-1659848019842
GPR[EPVAP]-1659848020964
GPR[EPVS]-1659848020964
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848020966
GPR[SPVAP]-1659848020966
GPR[EPVAP]-1659848022065
GPR[EPVS]-1659848022065
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848022066
GPR[SPVAP]-1659848022066
GPR[EPVAP]-1659848023172
GPR[EPVS]-1659848023172
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848023174
GPR[SPVAP]-1659848023174
GPR[EPVAP]-1659848024292
GPR[EPVS]-1659848024292
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848024294
GPR[SPVAP]-1659848024294
GPR[EPVAP]-1659848025381
GPR[EPVS]-1659848025381
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848025384
GPR[SPVAP]-1659848025384
GPR[EPVAP]-1659848026497
GPR[EPVS]-1659848026497
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848026500
GPR[SPVAP]-1659848026500
GPR[EPVAP]-1659848027605
GPR[EPVS]-1659848027605
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848027607
GPR[SPVAP]-1659848027607
GPR[EPVAP]-1659848028730
GPR[EPVS]-1659848028730
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848028731
GPR[SPVAP]-1659848028731
GPR[EPVAP]-1659848029861
GPR[EPVS]-1659848029861
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848029862
GPR[SPVAP]-1659848029862
GPR[EPVAP]-1659848030959
GPR[EPVS]-1659848030959
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848030962
GPR[SPVAP]-1659848030962
GPR[EPVAP]-1659848032082
GPR[EPVS]-1659848032082
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848032084
GPR[SPVAP]-1659848032084
GPR[EPVAP]-1659848033187
GPR[EPVS]-1659848033187
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848033190
GPR[SPVAP]-1659848033190
GPR[EPVAP]-1659848034347
GPR[EPVS]-1659848034347
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848034350
GPR[SPVAP]-1659848034350
GPR[EPVAP]-1659848035461
GPR[EPVS]-1659848035461
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848035463
GPR[SPVAP]-1659848035463
GPR[EPVAP]-1659848036608
GPR[EPVS]-1659848036608
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848036611
GPR[SPVAP]-1659848036611
GPR[EPVAP]-1659848037768
GPR[EPVS]-1659848037768
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848037770
GPR[SPVAP]-1659848037770
GPR[EPVAP]-1659848038894
GPR[EPVS]-1659848038894
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848038896
GPR[SPVAP]-1659848038896
GPR[EPVAP]-1659848040093
GPR[EPVS]-1659848040093
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848040094
GPR[SPVAP]-1659848040094
GPR[EPVAP]-1659848041237
GPR[EPVS]-1659848041237
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848041238
GPR[SPVAP]-1659848041238
GPR[EPVAP]-1659848042385
GPR[EPVS]-1659848042385
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848042386
GPR[SPVAP]-1659848042386
GPR[EPVAP]-1659848043501
GPR[EPVS]-1659848043501
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848043503
GPR[SPVAP]-1659848043503
GPR[EPVAP]-1659848044619
GPR[EPVS]-1659848044619
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848044621
GPR[SPVAP]-1659848044621
GPR[EPVAP]-1659848045734
GPR[EPVS]-1659848045734
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848045735
GPR[SPVAP]-1659848045735
GPR[EPVAP]-1659848046842
GPR[EPVS]-1659848046842
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848046844
GPR[SPVAP]-1659848046844
GPR[EPVAP]-1659848047965
GPR[EPVS]-1659848047965
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848047967
GPR[SPVAP]-1659848047967
GPR[EPVAP]-1659848049112
GPR[EPVS]-1659848049112
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848049115
GPR[SPVAP]-1659848049115
GPR[EPVAP]-1659848051190
GPR[SPVATF]-1659848051190
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848053158
GPR[EPVS]-1659848053158
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848053160
GPR[SPVAP]-1659848053160
GPR[EPVAP]-1659848054272
GPR[EPVS]-1659848054272
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848054274
GPR[SPVAP]-1659848054274
GPR[EPVAP]-1659848055381
GPR[EPVS]-1659848055381
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848055382
GPR[SPVAP]-1659848055382
GPR[EPVAP]-1659848056498
GPR[EPVS]-1659848056498
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848056502
GPR[SPVAP]-1659848056502
GPR[EPVAP]-1659848057617
GPR[EPVS]-1659848057617
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848057619
GPR[SPVAP]-1659848057619
GPR[EPVAP]-1659848058737
GPR[EPVS]-1659848058737
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848058738
GPR[SPVAP]-1659848058738
GPR[EPVAP]-1659848059877
GPR[EPVS]-1659848059877
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848059879
GPR[SPVAP]-1659848059879
GPR[EPVAP]-1659848061004
GPR[EPVS]-1659848061004
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848061008
GPR[SPVAP]-1659848061008
GPR[EPVAP]-1659848062185
GPR[EPVS]-1659848062185
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848062190
GPR[SPVAP]-1659848062190
GPR[EPVAP]-1659848063308
GPR[EPVS]-1659848063308
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848063311
GPR[SPVAP]-1659848063311
GPR[EPVAP]-1659848064416
GPR[EPVS]-1659848064416
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848064419
GPR[SPVAP]-1659848064419
GPR[EPVAP]-1659848065524
GPR[EPVS]-1659848065524
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848065525
GPR[SPVAP]-1659848065525
GPR[EPVAP]-1659848066692
GPR[EPVS]-1659848066692
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848066694
GPR[SPVAP]-1659848066694
GPR[EPVAP]-1659848067811
GPR[EPVS]-1659848067811
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848067815
GPR[SPVAP]-1659848067815
GPR[EPVAP]-1659848068916
GPR[EPVS]-1659848068916
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848068917
GPR[SPVAP]-1659848068917
GPR[EPVAP]-1659848070059
GPR[EPVS]-1659848070059
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848070061
GPR[SPVAP]-1659848070061
GPR[EPVAP]-1659848071402
GPR[EPVS]-1659848071402
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848071410
GPR[SPVAP]-1659848071410
GPR[EPVAP]-1659848073540
GPR[EPVS]-1659848073540
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659848073542
GPR[SPVAP]-1659848073542
GPR[EPVAP]-1659848074669
GPR[EPVS]-1659848074669
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848074673
GPR[SPVAP]-1659848074673
GPR[EPVAP]-1659848075817
GPR[EPVS]-1659848075817
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848075818
GPR[SPVAP]-1659848075818
GPR[EPVAP]-1659848076941
GPR[EPVS]-1659848076941
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848076943
GPR[SPVAP]-1659848076943
GPR[EPVAP]-1659848078080
GPR[EPVS]-1659848078080
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848078087
GPR[SPVAP]-1659848078087
GPR[EPVAP]-1659848079226
GPR[EPVS]-1659848079226
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848079230
GPR[SPVAP]-1659848079230
GPR[EPVAP]-1659848080352
GPR[EPVS]-1659848080352
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848080354
GPR[SPVAP]-1659848080354
GPR[EPVAP]-1659848081464
GPR[EPVS]-1659848081464
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848081465
GPR[SPVAP]-1659848081465
GPR[EPVAP]-1659848082581
GPR[EPVS]-1659848082581
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848082584
GPR[SPVAP]-1659848082584
GPR[EPVAP]-1659848083688
GPR[EPVS]-1659848083688
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848083694
GPR[SPVAP]-1659848083694
GPR[EPVAP]-1659848084817
GPR[EPVS]-1659848084817
GPR[ESUN]-1659848084817
GPR[SSUN]-1659848084817
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848091585
GPR[SPVAP]-1659848091585
GPR[EPVAP]-1659848098118
GPR[SPVATF]-1659848098118
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848100170
GPR[EPVS]-1659848100170
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848100171
GPR[SPVAP]-1659848100171
GPR[EPVAP]-1659848101287
GPR[EPVS]-1659848101287
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848101288
GPR[SPVAP]-1659848101288
GPR[EPVAP]-1659848102410
GPR[EPVS]-1659848102411
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848102412
GPR[SPVAP]-1659848102412
GPR[EPVAP]-1659848104496
GPR[SPVATF]-1659848104496
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848106592
GPR[EPVS]-1659848106592
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659848106594
GPR[SPVAP]-1659848106594
GPR[EPVAP]-1659848107743
GPR[EPVS]-1659848107743
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848107745
GPR[SPVAP]-1659848107745
GPR[EPVAP]-1659848108857
GPR[EPVS]-1659848108857
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848108858
GPR[SPVAP]-1659848108858
GPR[EPVAP]-1659848109981
GPR[EPVS]-1659848109981
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848109983
GPR[SPVAP]-1659848109983
GPR[EPVAP]-1659848111100
GPR[EPVS]-1659848111100
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848111102
GPR[SPVAP]-1659848111102
GPR[EPVAP]-1659848112262
GPR[EPVS]-1659848112262
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848112264
GPR[SPVAP]-1659848112264
GPR[EPVAP]-1659848113380
GPR[EPVS]-1659848113380
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848113381
GPR[SPVAP]-1659848113381
GPR[EPVAP]-1659848114489
GPR[EPVS]-1659848114489
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848114491
GPR[SPVAP]-1659848114491
GPR[EPVAP]-1659848115603
GPR[EPVS]-1659848115603
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848115604
GPR[SPVAP]-1659848115604
GPR[EPVAP]-1659848116728
GPR[EPVS]-1659848116728
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848116730
GPR[SPVAP]-1659848116730
GPR[EPVAP]-1659848117841
GPR[EPVS]-1659848117841
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848117842
GPR[SPVAP]-1659848117842
GPR[EPVAP]-1659848118980
GPR[EPVS]-1659848118980
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848118982
GPR[SPVAP]-1659848118982
GPR[EPVAP]-1659848120114
GPR[EPVS]-1659848120114
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848120116
GPR[SPVAP]-1659848120116
GPR[EPVAP]-1659848121239
GPR[EPVS]-1659848121239
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848121240
GPR[SPVAP]-1659848121240
GPR[EPVAP]-1659848122365
GPR[EPVS]-1659848122365
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848122366
GPR[SPVAP]-1659848122366
GPR[EPVAP]-1659848123481
GPR[EPVS]-1659848123481
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848123483
GPR[SPVAP]-1659848123483
GPR[EPVAP]-1659848124609
GPR[EPVS]-1659848124609
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848124611
GPR[SPVAP]-1659848124611
GPR[EPVAP]-1659848125760
GPR[EPVS]-1659848125760
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848125765
GPR[SPVAP]-1659848125765
GPR[EPVAP]-1659848126871
GPR[EPVS]-1659848126871
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848126874
GPR[SPVAP]-1659848126874
GPR[EPVAP]-1659848128001
GPR[EPVS]-1659848128001
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848128003
GPR[SPVAP]-1659848128003
GPR[EPVAP]-1659848129105
GPR[EPVS]-1659848129105
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848129107
GPR[SPVAP]-1659848129107
GPR[EPVAP]-1659848130212
GPR[EPVS]-1659848130212
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659848130214
GPR[SPVAP]-1659848130214
GPR[EPVAP]-1659848131349
GPR[EPVS]-1659848131349
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848131351
GPR[SPVAP]-1659848131351
GPR[EPVAP]-1659848132453
GPR[EPVS]-1659848132453
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848132455
GPR[SPVAP]-1659848132455
GPR[EPVAP]-1659848133567
GPR[EPVS]-1659848133567
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848133570
GPR[SPVAP]-1659848133570
GPR[EPVAP]-1659848134682
GPR[EPVS]-1659848134682
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848134685
GPR[SPVAP]-1659848134685
GPR[EPVAP]-1659848135850
GPR[EPVS]-1659848135850
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848135852
GPR[SPVAP]-1659848135852
GPR[EPVAP]-1659848136990
GPR[EPVS]-1659848136990
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848136992
GPR[SPVAP]-1659848136992
GPR[EPVAP]-1659848138107
GPR[EPVS]-1659848138107
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848138108
GPR[SPVAP]-1659848138108
GPR[EPVAP]-1659848139223
GPR[EPVS]-1659848139223
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848139224
GPR[SPVAP]-1659848139224
GPR[EPVAP]-1659848140370
GPR[EPVS]-1659848140370
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848140372
GPR[SPVAP]-1659848140372
GPR[EPVAP]-1659848141479
GPR[EPVS]-1659848141479
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848141480
GPR[SPVAP]-1659848141480
GPR[EPVAP]-1659848142610
GPR[EPVS]-1659848142610
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848142611
GPR[SPVAP]-1659848142611
GPR[EPVAP]-1659848143774
GPR[EPVS]-1659848143774
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848143775
GPR[SPVAP]-1659848143775
GPR[EPVAP]-1659848144903
GPR[EPVS]-1659848144903
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848144905
GPR[SPVAP]-1659848144905
GPR[EPVAP]-1659848147844
GPR[EPVS]-1659848147844
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848147845
GPR[SPVAP]-1659848147845
GPR[EPVAP]-1659848148961
GPR[EPVS]-1659848148961
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848148962
GPR[SPVAP]-1659848148962
GPR[EPVAP]-1659848150079
GPR[EPVS]-1659848150079
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848150080
GPR[SPVAP]-1659848150080
GPR[EPVAP]-1659848151186
GPR[EPVS]-1659848151186
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848151188
GPR[SPVAP]-1659848151188
GPR[EPVAP]-1659848152308
GPR[EPVS]-1659848152308
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848152310
GPR[SPVAP]-1659848152310
GPR[EPVAP]-1659848153432
GPR[EPVS]-1659848153432
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848153433
GPR[SPVAP]-1659848153433
GPR[EPVAP]-1659848154543
GPR[EPVS]-1659848154543
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848154545
GPR[SPVAP]-1659848154545
GPR[EPVAP]-1659848155665
GPR[EPVS]-1659848155665
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848155666
GPR[SPVAP]-1659848155666
GPR[EPVAP]-1659848156812
GPR[EPVS]-1659848156812
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848156814
GPR[SPVAP]-1659848156814
GPR[EPVAP]-1659848157925
GPR[EPVS]-1659848157925
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848157930
GPR[SPVAP]-1659848157930
GPR[EPVAP]-1659848159052
GPR[EPVS]-1659848159052
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848159054
GPR[SPVAP]-1659848159054
GPR[EPVAP]-1659848160186
GPR[EPVS]-1659848160186
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848160188
GPR[SPVAP]-1659848160188
GPR[EPVAP]-1659848161292
GPR[EPVS]-1659848161292
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848161294
GPR[SPVAP]-1659848161294
GPR[EPVAP]-1659848162411
GPR[EPVS]-1659848162411
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848162412
GPR[SPVAP]-1659848162412
GPR[EPVAP]-1659848163533
GPR[EPVS]-1659848163533
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848163537
GPR[SPVAP]-1659848163537
GPR[EPVAP]-1659848164670
GPR[EPVS]-1659848164670
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848164671
GPR[SPVAP]-1659848164671
GPR[EPVAP]-1659848165800
GPR[EPVS]-1659848165800
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848165802
GPR[SPVAP]-1659848165802
GPR[EPVAP]-1659848166921
GPR[EPVS]-1659848166921
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848166923
GPR[SPVAP]-1659848166923
GPR[EPVAP]-1659848168059
GPR[EPVS]-1659848168059
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848168063
GPR[SPVAP]-1659848168063
GPR[EPVAP]-1659848169176
GPR[EPVS]-1659848169176
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848169178
GPR[SPVAP]-1659848169178
GPR[EPVAP]-1659848170287
GPR[EPVS]-1659848170287
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848170288
GPR[SPVAP]-1659848170288
GPR[EPVAP]-1659848171407
GPR[EPVS]-1659848171407
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848171408
GPR[SPVAP]-1659848171408
GPR[EPVAP]-1659848172533
GPR[EPVS]-1659848172533
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848172535
GPR[SPVAP]-1659848172535
GPR[EPVAP]-1659848173645
GPR[EPVS]-1659848173645
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848173650
GPR[SPVAP]-1659848173650
GPR[EPVAP]-1659848174814
GPR[EPVS]-1659848174814
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848174816
GPR[SPVAP]-1659848174816
GPR[EPVAP]-1659848175945
GPR[EPVS]-1659848175945
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848175948
GPR[SPVAP]-1659848175948
GPR[EPVAP]-1659848177141
GPR[EPVS]-1659848177141
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848177143
GPR[SPVAP]-1659848177143
GPR[EPVAP]-1659848178257
GPR[EPVS]-1659848178257
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848178259
GPR[SPVAP]-1659848178259
GPR[EPVAP]-1659848179380
GPR[EPVS]-1659848179380
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848179383
GPR[SPVAP]-1659848179383
GPR[EPVAP]-1659848180489
GPR[EPVS]-1659848180489
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848180491
GPR[SPVAP]-1659848180491
GPR[EPVAP]-1659848181608
GPR[EPVS]-1659848181608
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848181610
GPR[SPVAP]-1659848181610
GPR[EPVAP]-1659848182723
GPR[EPVS]-1659848182723
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848182726
GPR[SPVAP]-1659848182726
GPR[EPVAP]-1659848183849
GPR[EPVS]-1659848183849
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848183851
GPR[SPVAP]-1659848183851
GPR[EPVAP]-1659848184965
GPR[EPVS]-1659848184965
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848184967
GPR[SPVAP]-1659848184967
GPR[EPVAP]-1659848186077
GPR[EPVS]-1659848186077
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848186078
GPR[SPVAP]-1659848186078
GPR[EPVAP]-1659848187254
GPR[EPVS]-1659848187254
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848187256
GPR[SPVAP]-1659848187256
GPR[EPVAP]-1659848188433
GPR[EPVS]-1659848188433
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848188436
GPR[SPVAP]-1659848188436
GPR[EPVAP]-1659848190531
GPR[SPVATF]-1659848190531
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848192552
GPR[EPVS]-1659848192552
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848192554
GPR[SPVAP]-1659848192554
GPR[EPVAP]-1659848193667
GPR[EPVS]-1659848193667
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848193669
GPR[SPVAP]-1659848193669
GPR[EPVAP]-1659848194780
GPR[EPVS]-1659848194780
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848194782
GPR[SPVAP]-1659848194782
GPR[EPVAP]-1659848195917
GPR[EPVS]-1659848195917
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848195919
GPR[SPVAP]-1659848195919
GPR[EPVAP]-1659848197052
GPR[EPVS]-1659848197052
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848197055
GPR[SPVAP]-1659848197055
GPR[EPVAP]-1659848198209
GPR[EPVS]-1659848198209
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848198212
GPR[SPVAP]-1659848198212
GPR[EPVAP]-1659848199364
GPR[EPVS]-1659848199364
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848199366
GPR[SPVAP]-1659848199366
GPR[EPVAP]-1659848200499
GPR[EPVS]-1659848200499
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848200501
GPR[SPVAP]-1659848200501
GPR[EPVAP]-1659848201610
GPR[EPVS]-1659848201610
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848201613
GPR[SPVAP]-1659848201613
GPR[EPVAP]-1659848202762
GPR[EPVS]-1659848202762
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848202769
GPR[SPVAP]-1659848202769
GPR[EPVAP]-1659848203896
GPR[EPVS]-1659848203896
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848203899
GPR[SPVAP]-1659848203899
GPR[EPVAP]-1659848205011
GPR[EPVS]-1659848205011
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848205013
GPR[SPVAP]-1659848205013
GPR[EPVAP]-1659848206131
GPR[EPVS]-1659848206131
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848206135
GPR[SPVAP]-1659848206135
GPR[EPVAP]-1659848207272
GPR[EPVS]-1659848207272
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848207274
GPR[SPVAP]-1659848207275
GPR[EPVAP]-1659848208419
GPR[EPVS]-1659848208419
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848208420
GPR[SPVAP]-1659848208420
GPR[EPVAP]-1659848209533
GPR[EPVS]-1659848209533
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848209534
GPR[SPVAP]-1659848209534
GPR[EPVAP]-1659848210728
GPR[EPVS]-1659848210728
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848210730
GPR[SPVAP]-1659848210730
GPR[EPVAP]-1659848211875
GPR[EPVS]-1659848211875
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848211877
GPR[SPVAP]-1659848211877
GPR[EPVAP]-1659848213016
GPR[EPVS]-1659848213016
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848213019
GPR[SPVAP]-1659848213019
GPR[EPVAP]-1659848214134
GPR[EPVS]-1659848214134
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848214137
GPR[SPVAP]-1659848214137
GPR[EPVAP]-1659848215261
GPR[EPVS]-1659848215261
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848215263
GPR[SPVAP]-1659848215263
GPR[EPVAP]-1659848216372
GPR[EPVS]-1659848216372
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848216374
GPR[SPVAP]-1659848216374
GPR[EPVAP]-1659848217491
GPR[EPVS]-1659848217491
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848217494
GPR[SPVAP]-1659848217494
GPR[EPVAP]-1659848220603
GPR[EPVS]-1659848220603
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848220604
GPR[SPVAP]-1659848220604
GPR[EPVAP]-1659848221739
GPR[EPVS]-1659848221739
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848221740
GPR[SPVAP]-1659848221740
GPR[EPVAP]-1659848222841
GPR[EPVS]-1659848222841
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848222844
GPR[SPVAP]-1659848222844
GPR[EPVAP]-1659848223967
GPR[EPVS]-1659848223967
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848223971
GPR[SPVAP]-1659848223971
GPR[EPVAP]-1659848225082
GPR[EPVS]-1659848225082
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659848225085
GPR[SPVAP]-1659848225085
GPR[EPVAP]-1659848226238
GPR[EPVS]-1659848226238
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659848226239
GPR[SPVAP]-1659848226239
GPR[EPVAP]-1659848227353
GPR[EPVS]-1659848227353
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659848227354
GPR[SPVAP]-1659848227355
GPR[EPVAP]-1659848228504
GPR[EPVS]-1659848228504
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848228506
GPR[SPVAP]-1659848228506
GPR[EPVAP]-1659848229613
GPR[EPVS]-1659848229613
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848229615
GPR[SPVAP]-1659848229615
GPR[EPVAP]-1659848230719
GPR[EPVS]-1659848230719
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848230721
GPR[SPVAP]-1659848230721
GPR[EPVAP]-1659848231879
GPR[EPVS]-1659848231879
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848231880
GPR[SPVAP]-1659848231880
GPR[EPVAP]-1659848232987
GPR[EPVS]-1659848232987
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848232988
GPR[SPVAP]-1659848232988
GPR[EPVAP]-1659848234092
GPR[EPVS]-1659848234092
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848234094
GPR[SPVAP]-1659848234094
GPR[EPVAP]-1659848235196
GPR[EPVS]-1659848235196
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848235202
GPR[SPVAP]-1659848235202
GPR[EPVAP]-1659848236317
GPR[EPVS]-1659848236317
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848236320
GPR[SPVAP]-1659848236320
GPR[EPVAP]-1659848237428
GPR[EPVS]-1659848237428
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848237432
GPR[SPVAP]-1659848237432
GPR[EPVAP]-1659848238548
GPR[EPVS]-1659848238548
GPR[ESUN]-1659848238549
GPR[SSUN]-1659848238549
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659848239219
GPR[SSUN]-1659848239220
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848245855
GPR[SPVAP]-1659848245855
GPR[EPVAP]-1659848252374
GPR[SPVATF]-1659848252374
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848254381
GPR[EPVS]-1659848254381
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848254384
GPR[SPVAP]-1659848254384
GPR[EPVAP]-1659848255499
GPR[EPVS]-1659848255499
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848255505
GPR[SPVAP]-1659848255505
GPR[EPVAP]-1659848257605
GPR[SPVATF]-1659848257605
TESTING : org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM:   - org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848259558
GPR[EPVS]-1659848259558
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848259560
GPR[SPVAP]-1659848259560
GPR[EPVAP]-1659848260689
GPR[EPVS]-1659848260689
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848260691
GPR[SPVAP]-1659848260691
GPR[EPVAP]-1659848261831
GPR[EPVS]-1659848261831
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848261833
GPR[SPVAP]-1659848261833
GPR[EPVAP]-1659848262946
GPR[EPVS]-1659848262947
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848262948
GPR[SPVAP]-1659848262948
GPR[EPVAP]-1659848264065
GPR[EPVS]-1659848264065
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848264066
GPR[SPVAP]-1659848264066
GPR[EPVAP]-1659848265184
GPR[EPVS]-1659848265184
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848265186
GPR[SPVAP]-1659848265186
GPR[EPVAP]-1659848266306
GPR[EPVS]-1659848266306
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848266308
GPR[SPVAP]-1659848266308
GPR[EPVAP]-1659848267433
GPR[EPVS]-1659848267433
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848267435
GPR[SPVAP]-1659848267435
GPR[EPVAP]-1659848268548
GPR[EPVS]-1659848268548
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848268550
GPR[SPVAP]-1659848268550
GPR[EPVAP]-1659848269671
GPR[EPVS]-1659848269671
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848269673
GPR[SPVAP]-1659848269673
GPR[EPVAP]-1659848270780
GPR[EPVS]-1659848270780
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848270782
GPR[SPVAP]-1659848270782
GPR[EPVAP]-1659848271905
GPR[EPVS]-1659848271905
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848271907
GPR[SPVAP]-1659848271907
GPR[EPVAP]-1659848273053
GPR[EPVS]-1659848273053
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848273055
GPR[SPVAP]-1659848273055
GPR[EPVAP]-1659848274188
GPR[EPVS]-1659848274188
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848274190
GPR[SPVAP]-1659848274190
GPR[EPVAP]-1659848275316
GPR[EPVS]-1659848275316
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848275317
GPR[SPVAP]-1659848275317
GPR[EPVAP]-1659848276433
GPR[EPVS]-1659848276433
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848276435
GPR[SPVAP]-1659848276435
GPR[EPVAP]-1659848277546
GPR[EPVS]-1659848277546
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848277548
GPR[SPVAP]-1659848277548
GPR[EPVAP]-1659848278662
GPR[EPVS]-1659848278662
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848278664
GPR[SPVAP]-1659848278664
GPR[EPVAP]-1659848279782
GPR[EPVS]-1659848279782
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848279783
GPR[SPVAP]-1659848279783
GPR[EPVAP]-1659848280903
GPR[EPVS]-1659848280903
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848280905
GPR[SPVAP]-1659848280905
GPR[EPVAP]-1659848282014
GPR[EPVS]-1659848282014
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848282015
GPR[SPVAP]-1659848282015
GPR[EPVAP]-1659848283117
GPR[EPVS]-1659848283117
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848283119
GPR[SPVAP]-1659848283119
GPR[EPVAP]-1659848284236
GPR[EPVS]-1659848284236
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848284238
GPR[SPVAP]-1659848284238
GPR[EPVAP]-1659848285350
GPR[EPVS]-1659848285350
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848285351
GPR[SPVAP]-1659848285351
GPR[EPVAP]-1659848286460
GPR[EPVS]-1659848286460
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848286461
GPR[SPVAP]-1659848286461
GPR[EPVAP]-1659848287605
GPR[EPVS]-1659848287605
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848287607
GPR[SPVAP]-1659848287607
GPR[EPVAP]-1659848288730
GPR[EPVS]-1659848288730
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848288731
GPR[SPVAP]-1659848288731
GPR[EPVAP]-1659848289845
GPR[EPVS]-1659848289845
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848289847
GPR[SPVAP]-1659848289847
GPR[EPVAP]-1659848292403
GPR[EPVS]-1659848292403
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848292415
GPR[SPVAP]-1659848292415
GPR[EPVAP]-1659848293690
GPR[EPVS]-1659848293690
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848293692
GPR[SPVAP]-1659848293692
GPR[EPVAP]-1659848294803
GPR[EPVS]-1659848294803
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848294805
GPR[SPVAP]-1659848294805
GPR[EPVAP]-1659848295929
GPR[EPVS]-1659848295929
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848295930
GPR[SPVAP]-1659848295930
GPR[EPVAP]-1659848297081
GPR[EPVS]-1659848297081
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848297084
GPR[SPVAP]-1659848297084
GPR[EPVAP]-1659848298208
GPR[EPVS]-1659848298208
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848298210
GPR[SPVAP]-1659848298210
GPR[EPVAP]-1659848299325
GPR[EPVS]-1659848299325
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848299326
GPR[SPVAP]-1659848299326
GPR[EPVAP]-1659848300441
GPR[EPVS]-1659848300441
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848300443
GPR[SPVAP]-1659848300443
GPR[EPVAP]-1659848301553
GPR[EPVS]-1659848301553
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848301555
GPR[SPVAP]-1659848301555
GPR[EPVAP]-1659848302671
GPR[EPVS]-1659848302671
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848302674
GPR[SPVAP]-1659848302674
GPR[EPVAP]-1659848303782
GPR[EPVS]-1659848303782
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848303784
GPR[SPVAP]-1659848303784
GPR[EPVAP]-1659848304921
GPR[EPVS]-1659848304921
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848304923
GPR[SPVAP]-1659848304923
GPR[EPVAP]-1659848306036
GPR[EPVS]-1659848306036
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848306037
GPR[SPVAP]-1659848306037
GPR[EPVAP]-1659848307161
GPR[EPVS]-1659848307161
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848307163
GPR[SPVAP]-1659848307163
GPR[EPVAP]-1659848308284
GPR[EPVS]-1659848308284
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848308286
GPR[SPVAP]-1659848308286
GPR[EPVAP]-1659848309398
GPR[EPVS]-1659848309398
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848309400
GPR[SPVAP]-1659848309400
GPR[EPVAP]-1659848310505
GPR[EPVS]-1659848310505
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848310509
GPR[SPVAP]-1659848310509
GPR[EPVAP]-1659848311605
GPR[EPVS]-1659848311605
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848311606
GPR[SPVAP]-1659848311606
GPR[EPVAP]-1659848312718
GPR[EPVS]-1659848312718
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848312720
GPR[SPVAP]-1659848312720
GPR[EPVAP]-1659848313820
GPR[EPVS]-1659848313820
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848313821
GPR[SPVAP]-1659848313821
GPR[EPVAP]-1659848314920
GPR[EPVS]-1659848314920
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848314922
GPR[SPVAP]-1659848314922
GPR[EPVAP]-1659848316029
GPR[EPVS]-1659848316029
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848316031
GPR[SPVAP]-1659848316031
GPR[EPVAP]-1659848317143
GPR[EPVS]-1659848317143
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848317145
GPR[SPVAP]-1659848317145
GPR[EPVAP]-1659848318257
GPR[EPVS]-1659848318257
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848318262
GPR[SPVAP]-1659848318262
GPR[EPVAP]-1659848319372
GPR[EPVS]-1659848319372
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848319376
GPR[SPVAP]-1659848319376
GPR[EPVAP]-1659848320493
GPR[EPVS]-1659848320493
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848320495
GPR[SPVAP]-1659848320495
GPR[EPVAP]-1659848321605
GPR[EPVS]-1659848321605
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848321606
GPR[SPVAP]-1659848321606
GPR[EPVAP]-1659848322762
GPR[EPVS]-1659848322762
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848322765
GPR[SPVAP]-1659848322765
GPR[EPVAP]-1659848323872
GPR[EPVS]-1659848323872
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848323876
GPR[SPVAP]-1659848323876
GPR[EPVAP]-1659848325012
GPR[EPVS]-1659848325012
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848325013
GPR[SPVAP]-1659848325013
GPR[EPVAP]-1659848326126
GPR[EPVS]-1659848326126
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848326128
GPR[SPVAP]-1659848326128
GPR[EPVAP]-1659848327234
GPR[EPVS]-1659848327234
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848327236
GPR[SPVAP]-1659848327236
GPR[EPVAP]-1659848328349
GPR[EPVS]-1659848328349
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848328351
GPR[SPVAP]-1659848328351
GPR[EPVAP]-1659848329457
GPR[EPVS]-1659848329457
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848329459
GPR[SPVAP]-1659848329459
GPR[EPVAP]-1659848330574
GPR[EPVS]-1659848330574
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848330576
GPR[SPVAP]-1659848330576
GPR[EPVAP]-1659848331680
GPR[EPVS]-1659848331680
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848331684
GPR[SPVAP]-1659848331684
GPR[EPVAP]-1659848332821
GPR[EPVS]-1659848332821
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848332823
GPR[SPVAP]-1659848332823
GPR[EPVAP]-1659848333931
GPR[EPVS]-1659848333931
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848333933
GPR[SPVAP]-1659848333933
GPR[EPVAP]-1659848335079
GPR[EPVS]-1659848335079
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848335080
GPR[SPVAP]-1659848335080
GPR[EPVAP]-1659848336194
GPR[EPVS]-1659848336194
========
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848336200
GPR[SPVAP]-1659848336200
GPR[EPVAP]-1659848337301
GPR[EPVS]-1659848337301
========
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848337306
GPR[SPVAP]-1659848337306
GPR[EPVAP]-1659848338411
GPR[EPVS]-1659848338411
GPR[ESUN]-1659848338413
GPR[SSUN]-1659848338413
org.apache.commons.math3.linear.EigenDecomposition,579
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

UNKNOWN ASTNode type : catch (IndexOutOfBoundsException e) {
  checkIndex(index);
  checkIndex(index + n - 1);
}

GPR[ESUN]-1659848344584
GPR[SSUN]-1659848344584
GPR[ESUN]-1659848344584
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659848345256
GPR[EFL]-1659848345259
GPR[SFP]-1659848345259
TIMEOUT : 600000
GPR[SSUN]-1659848345263
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659848347292
GPR[SPVAP]-1659848347292
GPR[EPVAP]-1659848353856
GPR[SPVATF]-1659848353856
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 0
GPR[EPVATF]-1659848356206
GPR[SPVATR]-1659848356206
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659848421897
GPR[EPVS]-1659848421897
GPR[PF]-1659848421897
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/12/patch_76641_1_ts_1659848421897.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM5655957902139702449/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/12/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/12/patch_76641_1_ts_1659848421897.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659848421907
GPR[SPVAP]-1659848421907
GPR[EPVAP]-1659848423888
GPR[SPVATF]-1659848423888
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848426065
GPR[EPVS]-1659848426065
GPR[ESUN]-1659848426065
GPR[SSUN]-1659848426065
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659848428341
GPR[SPVAP]-1659848428341
GPR[EPVAP]-1659848434875
GPR[SPVATF]-1659848434875
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848437081
GPR[EPVS]-1659848437081
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659848437090
GPR[SPVAP]-1659848437090
GPR[EPVAP]-1659848440653
GPR[SPVATF]-1659848440653
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848442861
GPR[EPVS]-1659848442861
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659848442863
GPR[SPVAP]-1659848442863
GPR[EPVAP]-1659848445026
GPR[SPVATF]-1659848445026
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848447252
GPR[EPVS]-1659848447252
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659848447254
GPR[SPVAP]-1659848447254
GPR[EPVAP]-1659848449301
GPR[SPVATF]-1659848449301
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848451517
GPR[EPVS]-1659848451517
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659848451518
GPR[SPVAP]-1659848451518
GPR[EPVAP]-1659848453570
GPR[SPVATF]-1659848453570
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848455731
GPR[EPVS]-1659848455731
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659848455732
GPR[SPVAP]-1659848455732
GPR[EPVAP]-1659848457882
GPR[SPVATF]-1659848457883
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848460107
GPR[EPVS]-1659848460107
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659848460108
GPR[SPVAP]-1659848460108
GPR[EPVAP]-1659848462170
GPR[SPVATF]-1659848462170
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848464406
GPR[EPVS]-1659848464406
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659848464407
GPR[SPVAP]-1659848464407
GPR[EPVAP]-1659848466440
GPR[SPVATF]-1659848466441
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848468700
GPR[EPVS]-1659848468700
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659848468703
GPR[SPVAP]-1659848468703
GPR[EPVAP]-1659848470771
GPR[SPVATF]-1659848470771
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848472958
GPR[EPVS]-1659848472958
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659848472960
GPR[SPVAP]-1659848472960
GPR[EPVAP]-1659848475025
GPR[SPVATF]-1659848475025
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848477180
GPR[EPVS]-1659848477180
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659848477181
GPR[SPVAP]-1659848477181
GPR[EPVAP]-1659848479236
GPR[SPVATF]-1659848479236
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848481442
GPR[EPVS]-1659848481442
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659848481443
GPR[SPVAP]-1659848481443
GPR[EPVAP]-1659848483501
GPR[SPVATF]-1659848483501
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848485695
GPR[EPVS]-1659848485695
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659848485697
GPR[SPVAP]-1659848485697
GPR[EPVAP]-1659848487745
GPR[SPVATF]-1659848487745
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848489950
GPR[EPVS]-1659848489950
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659848489952
GPR[SPVAP]-1659848489952
GPR[EPVAP]-1659848492046
GPR[SPVATF]-1659848492046
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848494250
GPR[EPVS]-1659848494250
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659848494251
GPR[SPVAP]-1659848494251
GPR[EPVAP]-1659848496240
GPR[SPVATF]-1659848496240
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848498461
GPR[EPVS]-1659848498461
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659848498463
GPR[SPVAP]-1659848498463
GPR[EPVAP]-1659848500552
GPR[SPVATF]-1659848500552
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848502742
GPR[EPVS]-1659848502742
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659848502744
GPR[SPVAP]-1659848502744
GPR[EPVAP]-1659848504978
GPR[SPVATF]-1659848504978
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848507128
GPR[EPVS]-1659848507128
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659848507129
GPR[SPVAP]-1659848507129
GPR[EPVAP]-1659848509161
GPR[SPVATF]-1659848509161
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848512957
GPR[EPVS]-1659848512957
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659848512959
GPR[SPVAP]-1659848512959
GPR[EPVAP]-1659848515007
GPR[SPVATF]-1659848515007
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848517167
GPR[EPVS]-1659848517167
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659848517169
GPR[SPVAP]-1659848517169
GPR[EPVAP]-1659848519207
GPR[SPVATF]-1659848519207
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848521380
GPR[EPVS]-1659848521380
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659848521382
GPR[SPVAP]-1659848521382
GPR[EPVAP]-1659848523429
GPR[SPVATF]-1659848523429
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848525611
GPR[EPVS]-1659848525611
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659848525613
GPR[SPVAP]-1659848525613
GPR[EPVAP]-1659848527685
GPR[SPVATF]-1659848527685
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848529879
GPR[EPVS]-1659848529879
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659848529882
GPR[SPVAP]-1659848529882
GPR[EPVAP]-1659848531986
GPR[SPVATF]-1659848531986
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848534157
GPR[EPVS]-1659848534157
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659848534159
GPR[SPVAP]-1659848534159
GPR[EPVAP]-1659848536216
GPR[SPVATF]-1659848536216
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848538353
GPR[EPVS]-1659848538353
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659848538354
GPR[SPVAP]-1659848538354
GPR[EPVAP]-1659848540400
GPR[SPVATF]-1659848540400
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848542533
GPR[EPVS]-1659848542533
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659848542535
GPR[SPVAP]-1659848542535
GPR[EPVAP]-1659848544572
GPR[SPVATF]-1659848544572
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848546773
GPR[EPVS]-1659848546773
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659848546775
GPR[SPVAP]-1659848546775
GPR[EPVAP]-1659848548850
GPR[SPVATF]-1659848548850
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848551025
GPR[EPVS]-1659848551025
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659848551027
GPR[SPVAP]-1659848551027
GPR[EPVAP]-1659848553092
GPR[SPVATF]-1659848553092
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848555248
GPR[EPVS]-1659848555248
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659848555249
GPR[SPVAP]-1659848555249
GPR[EPVAP]-1659848557322
GPR[SPVATF]-1659848557322
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848559515
GPR[EPVS]-1659848559515
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659848559517
GPR[SPVAP]-1659848559517
GPR[EPVAP]-1659848561570
GPR[SPVATF]-1659848561570
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848563810
GPR[EPVS]-1659848563810
GPR[ESUN]-1659848563812
GPR[SSUN]-1659848563812
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848570886
GPR[SPVAP]-1659848570886
GPR[EPVAP]-1659848577943
GPR[SPVATF]-1659848577943
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848580140
GPR[EPVS]-1659848580140
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659848580142
GPR[SPVAP]-1659848580142
GPR[EPVAP]-1659848581315
GPR[EPVS]-1659848581315
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848581317
GPR[SPVAP]-1659848581317
GPR[EPVAP]-1659848584269
GPR[EPVS]-1659848584269
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848584270
GPR[SPVAP]-1659848584270
GPR[EPVAP]-1659848585452
GPR[EPVS]-1659848585452
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848585455
GPR[SPVAP]-1659848585455
GPR[EPVAP]-1659848586637
GPR[EPVS]-1659848586637
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848586638
GPR[SPVAP]-1659848586638
GPR[EPVAP]-1659848587825
GPR[EPVS]-1659848587825
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848587827
GPR[SPVAP]-1659848587827
GPR[EPVAP]-1659848588985
GPR[EPVS]-1659848588985
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848588988
GPR[SPVAP]-1659848588988
GPR[EPVAP]-1659848591171
GPR[SPVATF]-1659848591171
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848593506
GPR[EPVS]-1659848593506
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848593507
GPR[SPVAP]-1659848593507
GPR[EPVAP]-1659848594612
GPR[EPVS]-1659848594612
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848594613
GPR[SPVAP]-1659848594613
GPR[EPVAP]-1659848595733
GPR[EPVS]-1659848595733
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848595735
GPR[SPVAP]-1659848595735
GPR[EPVAP]-1659848596845
GPR[EPVS]-1659848596845
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848596847
GPR[SPVAP]-1659848596847
GPR[EPVAP]-1659848597966
GPR[EPVS]-1659848597966
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848597967
GPR[SPVAP]-1659848597967
GPR[EPVAP]-1659848599117
GPR[EPVS]-1659848599117
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848599119
GPR[SPVAP]-1659848599119
GPR[EPVAP]-1659848600246
GPR[EPVS]-1659848600246
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848600248
GPR[SPVAP]-1659848600248
GPR[EPVAP]-1659848601396
GPR[EPVS]-1659848601396
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848601398
GPR[SPVAP]-1659848601398
GPR[EPVAP]-1659848602514
GPR[EPVS]-1659848602514
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848602516
GPR[SPVAP]-1659848602516
GPR[EPVAP]-1659848603644
GPR[EPVS]-1659848603644
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848603646
GPR[SPVAP]-1659848603646
GPR[EPVAP]-1659848604761
GPR[EPVS]-1659848604761
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848604763
GPR[SPVAP]-1659848604763
GPR[EPVAP]-1659848605894
GPR[EPVS]-1659848605894
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848605896
GPR[SPVAP]-1659848605896
GPR[EPVAP]-1659848607017
GPR[EPVS]-1659848607017
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848607019
GPR[SPVAP]-1659848607019
GPR[EPVAP]-1659848608139
GPR[EPVS]-1659848608139
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848608141
GPR[SPVAP]-1659848608141
GPR[EPVAP]-1659848610238
GPR[SPVATF]-1659848610238
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848612224
GPR[EPVS]-1659848612224
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659848612226
GPR[SPVAP]-1659848612226
GPR[EPVAP]-1659848613357
GPR[EPVS]-1659848613357
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848613358
GPR[SPVAP]-1659848613358
GPR[EPVAP]-1659848614477
GPR[EPVS]-1659848614477
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848614479
GPR[SPVAP]-1659848614479
GPR[EPVAP]-1659848615601
GPR[EPVS]-1659848615601
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848615603
GPR[SPVAP]-1659848615603
GPR[EPVAP]-1659848616741
GPR[EPVS]-1659848616741
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848616744
GPR[SPVAP]-1659848616744
GPR[EPVAP]-1659848617841
GPR[EPVS]-1659848617841
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848617843
GPR[SPVAP]-1659848617843
GPR[EPVAP]-1659848618948
GPR[EPVS]-1659848618948
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848618950
GPR[SPVAP]-1659848618950
GPR[EPVAP]-1659848620072
GPR[EPVS]-1659848620073
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848620074
GPR[SPVAP]-1659848620074
GPR[EPVAP]-1659848621187
GPR[EPVS]-1659848621187
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848621189
GPR[SPVAP]-1659848621189
GPR[EPVAP]-1659848622336
GPR[EPVS]-1659848622336
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848622338
GPR[SPVAP]-1659848622338
GPR[EPVAP]-1659848623456
GPR[EPVS]-1659848623456
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848623458
GPR[SPVAP]-1659848623458
GPR[EPVAP]-1659848624576
GPR[EPVS]-1659848624576
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848624578
GPR[SPVAP]-1659848624578
GPR[EPVAP]-1659848625679
GPR[EPVS]-1659848625679
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848625680
GPR[SPVAP]-1659848625680
GPR[EPVAP]-1659848627718
GPR[SPVATF]-1659848627718
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848629709
GPR[EPVS]-1659848629709
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848629710
GPR[SPVAP]-1659848629710
GPR[EPVAP]-1659848630810
GPR[EPVS]-1659848630810
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848630811
GPR[SPVAP]-1659848630811
GPR[EPVAP]-1659848631927
GPR[EPVS]-1659848631927
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848631928
GPR[SPVAP]-1659848631928
GPR[EPVAP]-1659848633056
GPR[EPVS]-1659848633056
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848633058
GPR[SPVAP]-1659848633058
GPR[EPVAP]-1659848634165
GPR[EPVS]-1659848634165
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848634167
GPR[SPVAP]-1659848634167
GPR[EPVAP]-1659848635269
GPR[EPVS]-1659848635269
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848635271
GPR[SPVAP]-1659848635271
GPR[EPVAP]-1659848636385
GPR[EPVS]-1659848636385
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848636386
GPR[SPVAP]-1659848636386
GPR[EPVAP]-1659848637497
GPR[EPVS]-1659848637497
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848637500
GPR[SPVAP]-1659848637500
GPR[EPVAP]-1659848638605
GPR[EPVS]-1659848638605
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848638608
GPR[SPVAP]-1659848638608
GPR[EPVAP]-1659848639724
GPR[EPVS]-1659848639724
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848639726
GPR[SPVAP]-1659848639726
GPR[EPVAP]-1659848640835
GPR[EPVS]-1659848640835
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848640836
GPR[SPVAP]-1659848640836
GPR[EPVAP]-1659848641949
GPR[EPVS]-1659848641949
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848641951
GPR[SPVAP]-1659848641951
GPR[EPVAP]-1659848643089
GPR[EPVS]-1659848643089
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848643091
GPR[SPVAP]-1659848643091
GPR[EPVAP]-1659848644196
GPR[EPVS]-1659848644196
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848644197
GPR[SPVAP]-1659848644197
GPR[EPVAP]-1659848645308
GPR[EPVS]-1659848645308
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848645311
GPR[SPVAP]-1659848645311
GPR[EPVAP]-1659848646417
GPR[EPVS]-1659848646417
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848646420
GPR[SPVAP]-1659848646420
GPR[EPVAP]-1659848647525
GPR[EPVS]-1659848647525
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848647527
GPR[SPVAP]-1659848647527
GPR[EPVAP]-1659848648681
GPR[EPVS]-1659848648681
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848648684
GPR[SPVAP]-1659848648684
GPR[EPVAP]-1659848649780
GPR[EPVS]-1659848649780
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848649781
GPR[SPVAP]-1659848649781
GPR[EPVAP]-1659848650893
GPR[EPVS]-1659848650893
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848650895
GPR[SPVAP]-1659848650895
GPR[EPVAP]-1659848652004
GPR[EPVS]-1659848652004
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848652005
GPR[SPVAP]-1659848652005
GPR[EPVAP]-1659848653104
GPR[EPVS]-1659848653104
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848653105
GPR[SPVAP]-1659848653105
GPR[EPVAP]-1659848656049
GPR[EPVS]-1659848656049
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848656050
GPR[SPVAP]-1659848656050
GPR[EPVAP]-1659848657149
GPR[EPVS]-1659848657149
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848657150
GPR[SPVAP]-1659848657150
GPR[EPVAP]-1659848658270
GPR[EPVS]-1659848658270
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848658272
GPR[SPVAP]-1659848658272
GPR[EPVAP]-1659848659392
GPR[EPVS]-1659848659392
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848659393
GPR[SPVAP]-1659848659393
GPR[EPVAP]-1659848660510
GPR[EPVS]-1659848660510
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848660511
GPR[SPVAP]-1659848660511
GPR[EPVAP]-1659848661609
GPR[EPVS]-1659848661609
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848661611
GPR[SPVAP]-1659848661611
GPR[EPVAP]-1659848662716
GPR[EPVS]-1659848662716
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848662719
GPR[SPVAP]-1659848662719
GPR[EPVAP]-1659848664765
GPR[SPVATF]-1659848664765
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848666718
GPR[EPVS]-1659848666718
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848666720
GPR[SPVAP]-1659848666720
GPR[EPVAP]-1659848667885
GPR[EPVS]-1659848667885
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848667888
GPR[SPVAP]-1659848667888
GPR[EPVAP]-1659848668992
GPR[EPVS]-1659848668992
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848668994
GPR[SPVAP]-1659848668994
GPR[EPVAP]-1659848670104
GPR[EPVS]-1659848670104
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848670110
GPR[SPVAP]-1659848670110
GPR[EPVAP]-1659848671226
GPR[EPVS]-1659848671226
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848671230
GPR[SPVAP]-1659848671230
GPR[EPVAP]-1659848672373
GPR[EPVS]-1659848672373
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848672375
GPR[SPVAP]-1659848672375
GPR[EPVAP]-1659848673505
GPR[EPVS]-1659848673505
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848673506
GPR[SPVAP]-1659848673506
GPR[EPVAP]-1659848674633
GPR[EPVS]-1659848674633
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848674637
GPR[SPVAP]-1659848674637
GPR[EPVAP]-1659848675723
GPR[EPVS]-1659848675723
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848675727
GPR[SPVAP]-1659848675727
GPR[EPVAP]-1659848676825
GPR[EPVS]-1659848676825
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848676827
GPR[SPVAP]-1659848676827
GPR[EPVAP]-1659848677933
GPR[EPVS]-1659848677933
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848677935
GPR[SPVAP]-1659848677935
GPR[EPVAP]-1659848679040
GPR[EPVS]-1659848679040
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848679041
GPR[SPVAP]-1659848679041
GPR[EPVAP]-1659848680145
GPR[EPVS]-1659848680145
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848680147
GPR[SPVAP]-1659848680147
GPR[EPVAP]-1659848681265
GPR[EPVS]-1659848681265
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848681269
GPR[SPVAP]-1659848681269
GPR[EPVAP]-1659848682380
GPR[EPVS]-1659848682380
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848682381
GPR[SPVAP]-1659848682381
GPR[EPVAP]-1659848683489
GPR[EPVS]-1659848683489
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848683490
GPR[SPVAP]-1659848683490
GPR[EPVAP]-1659848684598
GPR[EPVS]-1659848684598
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848684600
GPR[SPVAP]-1659848684600
GPR[EPVAP]-1659848685707
GPR[EPVS]-1659848685707
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659848685708
GPR[SPVAP]-1659848685708
GPR[EPVAP]-1659848686821
GPR[EPVS]-1659848686821
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848686823
GPR[SPVAP]-1659848686823
GPR[EPVAP]-1659848687933
GPR[EPVS]-1659848687933
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848687934
GPR[SPVAP]-1659848687934
GPR[EPVAP]-1659848689066
GPR[EPVS]-1659848689066
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848689068
GPR[SPVAP]-1659848689068
GPR[EPVAP]-1659848690175
GPR[EPVS]-1659848690175
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848690181
GPR[SPVAP]-1659848690181
GPR[EPVAP]-1659848691289
GPR[EPVS]-1659848691289
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848691293
GPR[SPVAP]-1659848691293
GPR[EPVAP]-1659848692399
GPR[EPVS]-1659848692399
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848692400
GPR[SPVAP]-1659848692400
GPR[EPVAP]-1659848693512
GPR[EPVS]-1659848693512
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848693514
GPR[SPVAP]-1659848693514
GPR[EPVAP]-1659848694624
GPR[EPVS]-1659848694624
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848694627
GPR[SPVAP]-1659848694627
GPR[EPVAP]-1659848695772
GPR[EPVS]-1659848695772
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848695778
GPR[SPVAP]-1659848695778
GPR[EPVAP]-1659848696886
GPR[EPVS]-1659848696886
GPR[ESUN]-1659848696886
GPR[SSUN]-1659848696886
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848703613
GPR[SPVAP]-1659848703613
GPR[EPVAP]-1659848710085
GPR[SPVATF]-1659848710085
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848712110
GPR[EPVS]-1659848712110
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848712112
GPR[SPVAP]-1659848712112
GPR[EPVAP]-1659848713270
GPR[EPVS]-1659848713270
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848713272
GPR[SPVAP]-1659848713272
GPR[EPVAP]-1659848714374
GPR[EPVS]-1659848714374
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848714376
GPR[SPVAP]-1659848714376
GPR[EPVAP]-1659848716448
GPR[SPVATF]-1659848716448
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848718742
GPR[EPVS]-1659848718742
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659848718744
GPR[SPVAP]-1659848718744
GPR[EPVAP]-1659848719877
GPR[EPVS]-1659848719877
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848719879
GPR[SPVAP]-1659848719879
GPR[EPVAP]-1659848721020
GPR[EPVS]-1659848721020
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848721026
GPR[SPVAP]-1659848721026
GPR[EPVAP]-1659848722135
GPR[EPVS]-1659848722135
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848722137
GPR[SPVAP]-1659848722137
GPR[EPVAP]-1659848723253
GPR[EPVS]-1659848723253
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848723255
GPR[SPVAP]-1659848723255
GPR[EPVAP]-1659848724371
GPR[EPVS]-1659848724371
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848724373
GPR[SPVAP]-1659848724373
GPR[EPVAP]-1659848725506
GPR[EPVS]-1659848725506
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848725508
GPR[SPVAP]-1659848725508
GPR[EPVAP]-1659848726632
GPR[EPVS]-1659848726632
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848726634
GPR[SPVAP]-1659848726634
GPR[EPVAP]-1659848727756
GPR[EPVS]-1659848727756
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848727757
GPR[SPVAP]-1659848727757
GPR[EPVAP]-1659848730505
GPR[EPVS]-1659848730505
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848730506
GPR[SPVAP]-1659848730506
GPR[EPVAP]-1659848731648
GPR[EPVS]-1659848731648
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848731650
GPR[SPVAP]-1659848731650
GPR[EPVAP]-1659848732774
GPR[EPVS]-1659848732774
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848732776
GPR[SPVAP]-1659848732776
GPR[EPVAP]-1659848733901
GPR[EPVS]-1659848733901
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848733902
GPR[SPVAP]-1659848733902
GPR[EPVAP]-1659848735021
GPR[EPVS]-1659848735021
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848735022
GPR[SPVAP]-1659848735022
GPR[EPVAP]-1659848736152
GPR[EPVS]-1659848736152
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848736154
GPR[SPVAP]-1659848736154
GPR[EPVAP]-1659848737267
GPR[EPVS]-1659848737267
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848737269
GPR[SPVAP]-1659848737269
GPR[EPVAP]-1659848738389
GPR[EPVS]-1659848738389
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848738390
GPR[SPVAP]-1659848738390
GPR[EPVAP]-1659848739551
GPR[EPVS]-1659848739551
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848739552
GPR[SPVAP]-1659848739552
GPR[EPVAP]-1659848740702
GPR[EPVS]-1659848740702
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848740706
GPR[SPVAP]-1659848740706
GPR[EPVAP]-1659848741830
GPR[EPVS]-1659848741830
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848741832
GPR[SPVAP]-1659848741832
GPR[EPVAP]-1659848742943
GPR[EPVS]-1659848742943
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848742945
GPR[SPVAP]-1659848742945
GPR[EPVAP]-1659848744070
GPR[EPVS]-1659848744070
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659848744072
GPR[SPVAP]-1659848744072
GPR[EPVAP]-1659848745186
GPR[EPVS]-1659848745186
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848745187
GPR[SPVAP]-1659848745187
GPR[EPVAP]-1659848746293
GPR[EPVS]-1659848746293
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848746295
GPR[SPVAP]-1659848746295
GPR[EPVAP]-1659848747397
GPR[EPVS]-1659848747397
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848747400
GPR[SPVAP]-1659848747400
GPR[EPVAP]-1659848748534
GPR[EPVS]-1659848748534
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848748537
GPR[SPVAP]-1659848748537
GPR[EPVAP]-1659848749639
GPR[EPVS]-1659848749640
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848749641
GPR[SPVAP]-1659848749641
GPR[EPVAP]-1659848750769
GPR[EPVS]-1659848750769
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848750771
GPR[SPVAP]-1659848750771
GPR[EPVAP]-1659848751887
GPR[EPVS]-1659848751887
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848751888
GPR[SPVAP]-1659848751888
GPR[EPVAP]-1659848752993
GPR[EPVS]-1659848752993
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848752994
GPR[SPVAP]-1659848752994
GPR[EPVAP]-1659848754106
GPR[EPVS]-1659848754106
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848754108
GPR[SPVAP]-1659848754108
GPR[EPVAP]-1659848755223
GPR[EPVS]-1659848755223
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848755224
GPR[SPVAP]-1659848755224
GPR[EPVAP]-1659848756373
GPR[EPVS]-1659848756373
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848756374
GPR[SPVAP]-1659848756374
GPR[EPVAP]-1659848757528
GPR[EPVS]-1659848757528
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848757530
GPR[SPVAP]-1659848757530
GPR[EPVAP]-1659848758634
GPR[EPVS]-1659848758634
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848758636
GPR[SPVAP]-1659848758636
GPR[EPVAP]-1659848759746
GPR[EPVS]-1659848759746
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848759747
GPR[SPVAP]-1659848759747
GPR[EPVAP]-1659848760881
GPR[EPVS]-1659848760881
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848760882
GPR[SPVAP]-1659848760882
GPR[EPVAP]-1659848762035
GPR[EPVS]-1659848762035
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848762037
GPR[SPVAP]-1659848762037
GPR[EPVAP]-1659848763139
GPR[EPVS]-1659848763139
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848763140
GPR[SPVAP]-1659848763140
GPR[EPVAP]-1659848764243
GPR[EPVS]-1659848764243
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848764244
GPR[SPVAP]-1659848764244
GPR[EPVAP]-1659848765352
GPR[EPVS]-1659848765352
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848765353
GPR[SPVAP]-1659848765353
GPR[EPVAP]-1659848766465
GPR[EPVS]-1659848766465
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848766466
GPR[SPVAP]-1659848766466
GPR[EPVAP]-1659848767647
GPR[EPVS]-1659848767647
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848767648
GPR[SPVAP]-1659848767648
GPR[EPVAP]-1659848768766
GPR[EPVS]-1659848768766
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848768768
GPR[SPVAP]-1659848768768
GPR[EPVAP]-1659848769876
GPR[EPVS]-1659848769876
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848769881
GPR[SPVAP]-1659848769881
GPR[EPVAP]-1659848770981
GPR[EPVS]-1659848770981
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848770986
GPR[SPVAP]-1659848770986
GPR[EPVAP]-1659848772129
GPR[EPVS]-1659848772129
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848772131
GPR[SPVAP]-1659848772131
GPR[EPVAP]-1659848773265
GPR[EPVS]-1659848773265
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848773267
GPR[SPVAP]-1659848773267
GPR[EPVAP]-1659848774399
GPR[EPVS]-1659848774399
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848774401
GPR[SPVAP]-1659848774401
GPR[EPVAP]-1659848775520
GPR[EPVS]-1659848775520
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848775524
GPR[SPVAP]-1659848775524
GPR[EPVAP]-1659848776662
GPR[EPVS]-1659848776662
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848776663
GPR[SPVAP]-1659848776663
GPR[EPVAP]-1659848777788
GPR[EPVS]-1659848777788
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848777790
GPR[SPVAP]-1659848777790
GPR[EPVAP]-1659848778905
GPR[EPVS]-1659848778905
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848778907
GPR[SPVAP]-1659848778907
GPR[EPVAP]-1659848780032
GPR[EPVS]-1659848780032
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848780036
GPR[SPVAP]-1659848780036
GPR[EPVAP]-1659848781190
GPR[EPVS]-1659848781190
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848781192
GPR[SPVAP]-1659848781192
GPR[EPVAP]-1659848782297
GPR[EPVS]-1659848782297
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848782298
GPR[SPVAP]-1659848782298
GPR[EPVAP]-1659848783421
GPR[EPVS]-1659848783421
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848783422
GPR[SPVAP]-1659848783422
GPR[EPVAP]-1659848784530
GPR[EPVS]-1659848784530
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848784532
GPR[SPVAP]-1659848784532
GPR[EPVAP]-1659848785634
GPR[EPVS]-1659848785634
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848785638
GPR[SPVAP]-1659848785638
GPR[EPVAP]-1659848786737
GPR[EPVS]-1659848786737
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848786738
GPR[SPVAP]-1659848786738
GPR[EPVAP]-1659848787840
GPR[EPVS]-1659848787840
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848787843
GPR[SPVAP]-1659848787843
GPR[EPVAP]-1659848788969
GPR[EPVS]-1659848788969
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848788971
GPR[SPVAP]-1659848788971
GPR[EPVAP]-1659848790081
GPR[EPVS]-1659848790081
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848790082
GPR[SPVAP]-1659848790082
GPR[EPVAP]-1659848791187
GPR[EPVS]-1659848791187
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848791190
GPR[SPVAP]-1659848791190
GPR[EPVAP]-1659848792296
GPR[EPVS]-1659848792296
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848792297
GPR[SPVAP]-1659848792297
GPR[EPVAP]-1659848793434
GPR[EPVS]-1659848793434
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848793435
GPR[SPVAP]-1659848793435
GPR[EPVAP]-1659848794553
GPR[EPVS]-1659848794553
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848794555
GPR[SPVAP]-1659848794555
GPR[EPVAP]-1659848795660
GPR[EPVS]-1659848795660
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848795661
GPR[SPVAP]-1659848795661
GPR[EPVAP]-1659848796773
GPR[EPVS]-1659848796773
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848796775
GPR[SPVAP]-1659848796775
GPR[EPVAP]-1659848797891
GPR[EPVS]-1659848797891
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848797892
GPR[SPVAP]-1659848797892
GPR[EPVAP]-1659848799029
GPR[EPVS]-1659848799029
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848799031
GPR[SPVAP]-1659848799031
GPR[EPVAP]-1659848800144
GPR[EPVS]-1659848800144
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848800153
GPR[SPVAP]-1659848800153
GPR[EPVAP]-1659848803832
GPR[SPVATF]-1659848803832
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848805905
GPR[EPVS]-1659848805905
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848805907
GPR[SPVAP]-1659848805907
GPR[EPVAP]-1659848807035
GPR[EPVS]-1659848807035
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848807037
GPR[SPVAP]-1659848807037
GPR[EPVAP]-1659848808152
GPR[EPVS]-1659848808152
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848808154
GPR[SPVAP]-1659848808154
GPR[EPVAP]-1659848809265
GPR[EPVS]-1659848809265
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848809266
GPR[SPVAP]-1659848809266
GPR[EPVAP]-1659848810385
GPR[EPVS]-1659848810385
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848810387
GPR[SPVAP]-1659848810387
GPR[EPVAP]-1659848811519
GPR[EPVS]-1659848811519
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848811522
GPR[SPVAP]-1659848811522
GPR[EPVAP]-1659848812645
GPR[EPVS]-1659848812645
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848812647
GPR[SPVAP]-1659848812647
GPR[EPVAP]-1659848813756
GPR[EPVS]-1659848813756
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848813758
GPR[SPVAP]-1659848813758
GPR[EPVAP]-1659848814873
GPR[EPVS]-1659848814873
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848814875
GPR[SPVAP]-1659848814875
GPR[EPVAP]-1659848815992
GPR[EPVS]-1659848815992
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848815994
GPR[SPVAP]-1659848815994
GPR[EPVAP]-1659848817109
GPR[EPVS]-1659848817109
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848817111
GPR[SPVAP]-1659848817111
GPR[EPVAP]-1659848818209
GPR[EPVS]-1659848818209
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848818210
GPR[SPVAP]-1659848818210
GPR[EPVAP]-1659848819310
GPR[EPVS]-1659848819310
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848819314
GPR[SPVAP]-1659848819314
GPR[EPVAP]-1659848820415
GPR[EPVS]-1659848820415
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848820417
GPR[SPVAP]-1659848820417
GPR[EPVAP]-1659848821515
GPR[EPVS]-1659848821515
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848821517
GPR[SPVAP]-1659848821517
GPR[EPVAP]-1659848822633
GPR[EPVS]-1659848822633
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848822635
GPR[SPVAP]-1659848822635
GPR[EPVAP]-1659848823779
GPR[EPVS]-1659848823779
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848823781
GPR[SPVAP]-1659848823781
GPR[EPVAP]-1659848824896
GPR[EPVS]-1659848824896
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848824899
GPR[SPVAP]-1659848824899
GPR[EPVAP]-1659848826007
GPR[EPVS]-1659848826007
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848826009
GPR[SPVAP]-1659848826009
GPR[EPVAP]-1659848827133
GPR[EPVS]-1659848827133
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848827134
GPR[SPVAP]-1659848827134
GPR[EPVAP]-1659848828259
GPR[EPVS]-1659848828259
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848828262
GPR[SPVAP]-1659848828262
GPR[EPVAP]-1659848829373
GPR[EPVS]-1659848829373
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848829376
GPR[SPVAP]-1659848829376
GPR[EPVAP]-1659848830493
GPR[EPVS]-1659848830493
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848830495
GPR[SPVAP]-1659848830495
GPR[EPVAP]-1659848831624
GPR[EPVS]-1659848831624
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848831626
GPR[SPVAP]-1659848831626
GPR[EPVAP]-1659848832737
GPR[EPVS]-1659848832737
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848832738
GPR[SPVAP]-1659848832738
GPR[EPVAP]-1659848833864
GPR[EPVS]-1659848833864
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848833874
GPR[SPVAP]-1659848833874
GPR[EPVAP]-1659848835149
GPR[EPVS]-1659848835149
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848835153
GPR[SPVAP]-1659848835153
GPR[EPVAP]-1659848836262
GPR[EPVS]-1659848836262
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659848836265
GPR[SPVAP]-1659848836265
GPR[EPVAP]-1659848837377
GPR[EPVS]-1659848837377
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659848837379
GPR[SPVAP]-1659848837379
GPR[EPVAP]-1659848838516
GPR[EPVS]-1659848838516
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659848838518
GPR[SPVAP]-1659848838518
GPR[EPVAP]-1659848839633
GPR[EPVS]-1659848839633
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848839635
GPR[SPVAP]-1659848839635
GPR[EPVAP]-1659848840723
GPR[EPVS]-1659848840723
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848840724
GPR[SPVAP]-1659848840724
GPR[EPVAP]-1659848841837
GPR[EPVS]-1659848841837
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848841839
GPR[SPVAP]-1659848841839
GPR[EPVAP]-1659848842950
GPR[EPVS]-1659848842950
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848842952
GPR[SPVAP]-1659848842952
GPR[EPVAP]-1659848844076
GPR[EPVS]-1659848844076
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848844078
GPR[SPVAP]-1659848844078
GPR[EPVAP]-1659848845217
GPR[EPVS]-1659848845217
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659848845219
GPR[SPVAP]-1659848845219
GPR[EPVAP]-1659848846357
GPR[EPVS]-1659848846357
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848846363
GPR[SPVAP]-1659848846363
GPR[EPVAP]-1659848847472
GPR[EPVS]-1659848847472
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848847474
GPR[SPVAP]-1659848847474
GPR[EPVAP]-1659848848614
GPR[EPVS]-1659848848614
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659848848619
GPR[SPVAP]-1659848848619
GPR[EPVAP]-1659848849736
GPR[EPVS]-1659848849736
GPR[ESUN]-1659848849737
GPR[SSUN]-1659848849737
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659848850519
GPR[SSUN]-1659848850519
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848857188
GPR[SPVAP]-1659848857188
GPR[EPVAP]-1659848863722
GPR[SPVATF]-1659848863722
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848865735
GPR[EPVS]-1659848865735
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848865737
GPR[SPVAP]-1659848865737
GPR[EPVAP]-1659848866850
GPR[EPVS]-1659848866850
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848866852
GPR[SPVAP]-1659848866852
GPR[EPVAP]-1659848868904
GPR[SPVATF]-1659848868904
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659848871082
GPR[EPVS]-1659848871082
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848871084
GPR[SPVAP]-1659848871084
GPR[EPVAP]-1659848872221
GPR[EPVS]-1659848872221
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848872222
GPR[SPVAP]-1659848872222
GPR[EPVAP]-1659848874905
GPR[EPVS]-1659848874905
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848874906
GPR[SPVAP]-1659848874906
GPR[EPVAP]-1659848876010
GPR[EPVS]-1659848876010
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848876012
GPR[SPVAP]-1659848876012
GPR[EPVAP]-1659848877132
GPR[EPVS]-1659848877132
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848877134
GPR[SPVAP]-1659848877134
GPR[EPVAP]-1659848878245
GPR[EPVS]-1659848878245
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848878247
GPR[SPVAP]-1659848878247
GPR[EPVAP]-1659848879372
GPR[EPVS]-1659848879372
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848879374
GPR[SPVAP]-1659848879374
GPR[EPVAP]-1659848880524
GPR[EPVS]-1659848880524
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848880527
GPR[SPVAP]-1659848880527
GPR[EPVAP]-1659848881634
GPR[EPVS]-1659848881634
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848881636
GPR[SPVAP]-1659848881636
GPR[EPVAP]-1659848882770
GPR[EPVS]-1659848882770
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848882772
GPR[SPVAP]-1659848882772
GPR[EPVAP]-1659848883875
GPR[EPVS]-1659848883875
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848883876
GPR[SPVAP]-1659848883876
GPR[EPVAP]-1659848885002
GPR[EPVS]-1659848885003
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848885005
GPR[SPVAP]-1659848885005
GPR[EPVAP]-1659848886111
GPR[EPVS]-1659848886111
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848886112
GPR[SPVAP]-1659848886112
GPR[EPVAP]-1659848887255
GPR[EPVS]-1659848887255
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848887256
GPR[SPVAP]-1659848887256
GPR[EPVAP]-1659848888370
GPR[EPVS]-1659848888370
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848888372
GPR[SPVAP]-1659848888372
GPR[EPVAP]-1659848889482
GPR[EPVS]-1659848889482
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848889483
GPR[SPVAP]-1659848889483
GPR[EPVAP]-1659848890591
GPR[EPVS]-1659848890591
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848890593
GPR[SPVAP]-1659848890593
GPR[EPVAP]-1659848891705
GPR[EPVS]-1659848891705
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848891707
GPR[SPVAP]-1659848891707
GPR[EPVAP]-1659848892834
GPR[EPVS]-1659848892834
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848892835
GPR[SPVAP]-1659848892835
GPR[EPVAP]-1659848893964
GPR[EPVS]-1659848893964
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848893965
GPR[SPVAP]-1659848893965
GPR[EPVAP]-1659848895074
GPR[EPVS]-1659848895074
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848895076
GPR[SPVAP]-1659848895076
GPR[EPVAP]-1659848896168
GPR[EPVS]-1659848896168
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848896171
GPR[SPVAP]-1659848896171
GPR[EPVAP]-1659848897289
GPR[EPVS]-1659848897289
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848897291
GPR[SPVAP]-1659848897291
GPR[EPVAP]-1659848898389
GPR[EPVS]-1659848898389
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848898391
GPR[SPVAP]-1659848898391
GPR[EPVAP]-1659848899499
GPR[EPVS]-1659848899499
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848899501
GPR[SPVAP]-1659848899501
GPR[EPVAP]-1659848900629
GPR[EPVS]-1659848900629
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848900631
GPR[SPVAP]-1659848900631
GPR[EPVAP]-1659848901748
GPR[EPVS]-1659848901748
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848901750
GPR[SPVAP]-1659848901750
GPR[EPVAP]-1659848902853
GPR[EPVS]-1659848902853
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848902855
GPR[SPVAP]-1659848902855
GPR[EPVAP]-1659848903956
GPR[EPVS]-1659848903956
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848903957
GPR[SPVAP]-1659848903957
GPR[EPVAP]-1659848905079
GPR[EPVS]-1659848905079
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848905081
GPR[SPVAP]-1659848905081
GPR[EPVAP]-1659848906198
GPR[EPVS]-1659848906198
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848906201
GPR[SPVAP]-1659848906201
GPR[EPVAP]-1659848907349
GPR[EPVS]-1659848907349
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848907351
GPR[SPVAP]-1659848907351
GPR[EPVAP]-1659848908458
GPR[EPVS]-1659848908458
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848908459
GPR[SPVAP]-1659848908459
GPR[EPVAP]-1659848909608
GPR[EPVS]-1659848909608
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848909610
GPR[SPVAP]-1659848909610
GPR[EPVAP]-1659848910717
GPR[EPVS]-1659848910717
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848910719
GPR[SPVAP]-1659848910719
GPR[EPVAP]-1659848911838
GPR[EPVS]-1659848911838
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848911841
GPR[SPVAP]-1659848911841
GPR[EPVAP]-1659848912977
GPR[EPVS]-1659848912977
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848912979
GPR[SPVAP]-1659848912979
GPR[EPVAP]-1659848914094
GPR[EPVS]-1659848914094
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848914096
GPR[SPVAP]-1659848914096
GPR[EPVAP]-1659848915274
GPR[EPVS]-1659848915275
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848915276
GPR[SPVAP]-1659848915276
GPR[EPVAP]-1659848916383
GPR[EPVS]-1659848916383
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848916384
GPR[SPVAP]-1659848916384
GPR[EPVAP]-1659848917497
GPR[EPVS]-1659848917497
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848917498
GPR[SPVAP]-1659848917498
GPR[EPVAP]-1659848918606
GPR[EPVS]-1659848918606
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848918607
GPR[SPVAP]-1659848918607
GPR[EPVAP]-1659848919734
GPR[EPVS]-1659848919734
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848919735
GPR[SPVAP]-1659848919735
GPR[EPVAP]-1659848920830
GPR[EPVS]-1659848920830
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848920832
GPR[SPVAP]-1659848920832
GPR[EPVAP]-1659848921986
GPR[EPVS]-1659848921986
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848921990
GPR[SPVAP]-1659848921990
GPR[EPVAP]-1659848923088
GPR[EPVS]-1659848923088
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848923090
GPR[SPVAP]-1659848923090
GPR[EPVAP]-1659848924201
GPR[EPVS]-1659848924201
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848924203
GPR[SPVAP]-1659848924203
GPR[EPVAP]-1659848925339
GPR[EPVS]-1659848925339
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848925341
GPR[SPVAP]-1659848925341
GPR[EPVAP]-1659848926493
GPR[EPVS]-1659848926493
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848926495
GPR[SPVAP]-1659848926495
GPR[EPVAP]-1659848927620
GPR[EPVS]-1659848927620
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848927622
GPR[SPVAP]-1659848927622
GPR[EPVAP]-1659848928737
GPR[EPVS]-1659848928737
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848928739
GPR[SPVAP]-1659848928739
GPR[EPVAP]-1659848929850
GPR[EPVS]-1659848929850
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848929855
GPR[SPVAP]-1659848929855
GPR[EPVAP]-1659848930971
GPR[EPVS]-1659848930971
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848930975
GPR[SPVAP]-1659848930975
GPR[EPVAP]-1659848932077
GPR[EPVS]-1659848932077
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848932079
GPR[SPVAP]-1659848932079
GPR[EPVAP]-1659848933177
GPR[EPVS]-1659848933177
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848933178
GPR[SPVAP]-1659848933178
GPR[EPVAP]-1659848934275
GPR[EPVS]-1659848934275
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848934278
GPR[SPVAP]-1659848934278
GPR[EPVAP]-1659848935425
GPR[EPVS]-1659848935425
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848935430
GPR[SPVAP]-1659848935430
GPR[EPVAP]-1659848936563
GPR[EPVS]-1659848936563
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848936565
GPR[SPVAP]-1659848936565
GPR[EPVAP]-1659848937682
GPR[EPVS]-1659848937682
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848937684
GPR[SPVAP]-1659848937684
GPR[EPVAP]-1659848938801
GPR[EPVS]-1659848938801
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848938803
GPR[SPVAP]-1659848938803
GPR[EPVAP]-1659848939958
GPR[EPVS]-1659848939958
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848939961
GPR[SPVAP]-1659848939961
GPR[EPVAP]-1659848941087
GPR[EPVS]-1659848941087
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848941089
GPR[SPVAP]-1659848941089
GPR[EPVAP]-1659848942239
GPR[EPVS]-1659848942239
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848942241
GPR[SPVAP]-1659848942241
GPR[EPVAP]-1659848943337
GPR[EPVS]-1659848943337
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659848943339
GPR[SPVAP]-1659848943339
GPR[EPVAP]-1659848946265
GPR[EPVS]-1659848946265
Timeout!
MM Purify? true
GPR[SFL]-1659848947205
GPR[EFL]-1659848947208
GPR[SFP]-1659848947208
TIMEOUT : 600000
GPR[SSUN]-1659848947212
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659848949140
GPR[SPVAP]-1659848949140
GPR[EPVAP]-1659848955618
GPR[SPVATF]-1659848955618
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 0
GPR[EPVATF]-1659848958365
GPR[SPVATR]-1659848958365
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659849025797
GPR[EPVS]-1659849025797
GPR[PF]-1659849025797
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/13/patch_78594_1_ts_1659849025797.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM647767364050397105/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/13/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/13/patch_78594_1_ts_1659849025797.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659849025808
GPR[SPVAP]-1659849025808
GPR[EPVAP]-1659849027799
GPR[SPVATF]-1659849027799
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849030291
GPR[EPVS]-1659849030291
GPR[ESUN]-1659849030291
GPR[SSUN]-1659849030291
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849032624
GPR[SPVAP]-1659849032624
GPR[EPVAP]-1659849039232
GPR[SPVATF]-1659849039232
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849041728
GPR[EPVS]-1659849041728
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849041729
GPR[SPVAP]-1659849041729
GPR[EPVAP]-1659849043819
GPR[SPVATF]-1659849043819
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849046265
GPR[EPVS]-1659849046265
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849046267
GPR[SPVAP]-1659849046267
GPR[EPVAP]-1659849048392
GPR[SPVATF]-1659849048393
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849050860
GPR[EPVS]-1659849050860
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849050861
GPR[SPVAP]-1659849050861
GPR[EPVAP]-1659849052904
GPR[SPVATF]-1659849052904
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849055364
GPR[EPVS]-1659849055364
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849055366
GPR[SPVAP]-1659849055366
GPR[EPVAP]-1659849057421
GPR[SPVATF]-1659849057421
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849059902
GPR[EPVS]-1659849059902
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849059903
GPR[SPVAP]-1659849059903
GPR[EPVAP]-1659849061988
GPR[SPVATF]-1659849061988
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849064444
GPR[EPVS]-1659849064444
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849064446
GPR[SPVAP]-1659849064446
GPR[EPVAP]-1659849066543
GPR[SPVATF]-1659849066543
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849069016
GPR[EPVS]-1659849069016
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849069017
GPR[SPVAP]-1659849069017
GPR[EPVAP]-1659849071068
GPR[SPVATF]-1659849071068
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849073557
GPR[EPVS]-1659849073557
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849073559
GPR[SPVAP]-1659849073559
GPR[EPVAP]-1659849075618
GPR[SPVATF]-1659849075618
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849078107
GPR[EPVS]-1659849078107
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849078108
GPR[SPVAP]-1659849078108
GPR[EPVAP]-1659849080165
GPR[SPVATF]-1659849080165
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849082641
GPR[EPVS]-1659849082641
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849082643
GPR[SPVAP]-1659849082643
GPR[EPVAP]-1659849084746
GPR[SPVATF]-1659849084746
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849087200
GPR[EPVS]-1659849087200
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849087202
GPR[SPVAP]-1659849087202
GPR[EPVAP]-1659849089292
GPR[SPVATF]-1659849089292
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849093585
GPR[EPVS]-1659849093585
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849093587
GPR[SPVAP]-1659849093587
GPR[EPVAP]-1659849095676
GPR[SPVATF]-1659849095676
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849098163
GPR[EPVS]-1659849098163
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849098164
GPR[SPVAP]-1659849098164
GPR[EPVAP]-1659849100197
GPR[SPVATF]-1659849100197
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849102659
GPR[EPVS]-1659849102659
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849102660
GPR[SPVAP]-1659849102660
GPR[EPVAP]-1659849104721
GPR[SPVATF]-1659849104721
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849107262
GPR[EPVS]-1659849107262
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849107264
GPR[SPVAP]-1659849107264
GPR[EPVAP]-1659849109355
GPR[SPVATF]-1659849109355
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849111837
GPR[EPVS]-1659849111837
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849111839
GPR[SPVAP]-1659849111839
GPR[EPVAP]-1659849113865
GPR[SPVATF]-1659849113865
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849116352
GPR[EPVS]-1659849116352
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849116353
GPR[SPVAP]-1659849116353
GPR[EPVAP]-1659849118405
GPR[SPVATF]-1659849118405
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849120910
GPR[EPVS]-1659849120910
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849120911
GPR[SPVAP]-1659849120911
GPR[EPVAP]-1659849123016
GPR[SPVATF]-1659849123016
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849125488
GPR[EPVS]-1659849125488
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849125489
GPR[SPVAP]-1659849125489
GPR[EPVAP]-1659849127536
GPR[SPVATF]-1659849127536
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849130024
GPR[EPVS]-1659849130024
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849130026
GPR[SPVAP]-1659849130026
GPR[EPVAP]-1659849132122
GPR[SPVATF]-1659849132122
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849134572
GPR[EPVS]-1659849134572
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849134574
GPR[SPVAP]-1659849134574
GPR[EPVAP]-1659849136636
GPR[SPVATF]-1659849136636
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849139124
GPR[EPVS]-1659849139124
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849139126
GPR[SPVAP]-1659849139126
GPR[EPVAP]-1659849141202
GPR[SPVATF]-1659849141202
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849143640
GPR[EPVS]-1659849143640
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849143642
GPR[SPVAP]-1659849143642
GPR[EPVAP]-1659849145723
GPR[SPVATF]-1659849145723
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849148205
GPR[EPVS]-1659849148205
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849148207
GPR[SPVAP]-1659849148207
GPR[EPVAP]-1659849150285
GPR[SPVATF]-1659849150285
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849152758
GPR[EPVS]-1659849152758
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849152759
GPR[SPVAP]-1659849152759
GPR[EPVAP]-1659849154805
GPR[SPVATF]-1659849154805
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849157302
GPR[EPVS]-1659849157302
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849157303
GPR[SPVAP]-1659849157303
GPR[EPVAP]-1659849159385
GPR[SPVATF]-1659849159385
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849161866
GPR[EPVS]-1659849161866
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849161867
GPR[SPVAP]-1659849161867
GPR[EPVAP]-1659849165536
GPR[SPVATF]-1659849165536
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849168001
GPR[EPVS]-1659849168001
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849168003
GPR[SPVAP]-1659849168003
GPR[EPVAP]-1659849170051
GPR[SPVATF]-1659849170051
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849172539
GPR[EPVS]-1659849172539
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849172541
GPR[SPVAP]-1659849172541
GPR[EPVAP]-1659849174646
GPR[SPVATF]-1659849174646
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849177111
GPR[EPVS]-1659849177111
GPR[ESUN]-1659849177113
GPR[SSUN]-1659849177113
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849184207
GPR[SPVAP]-1659849184207
GPR[EPVAP]-1659849190736
GPR[SPVATF]-1659849190736
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849192874
GPR[EPVS]-1659849192874
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659849192876
GPR[SPVAP]-1659849192876
GPR[EPVAP]-1659849194001
GPR[EPVS]-1659849194001
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849194003
GPR[SPVAP]-1659849194003
GPR[EPVAP]-1659849195121
GPR[EPVS]-1659849195121
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849195123
GPR[SPVAP]-1659849195123
GPR[EPVAP]-1659849196237
GPR[EPVS]-1659849196237
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849196240
GPR[SPVAP]-1659849196240
GPR[EPVAP]-1659849197356
GPR[EPVS]-1659849197356
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849197357
GPR[SPVAP]-1659849197358
GPR[EPVAP]-1659849198478
GPR[EPVS]-1659849198478
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849198479
GPR[SPVAP]-1659849198479
GPR[EPVAP]-1659849199616
GPR[EPVS]-1659849199616
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849199619
GPR[SPVAP]-1659849199620
GPR[EPVAP]-1659849201700
GPR[SPVATF]-1659849201700
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849204162
GPR[EPVS]-1659849204162
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849204163
GPR[SPVAP]-1659849204163
GPR[EPVAP]-1659849205295
GPR[EPVS]-1659849205295
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849205297
GPR[SPVAP]-1659849205297
GPR[EPVAP]-1659849206409
GPR[EPVS]-1659849206409
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849206411
GPR[SPVAP]-1659849206411
GPR[EPVAP]-1659849207558
GPR[EPVS]-1659849207558
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849207560
GPR[SPVAP]-1659849207560
GPR[EPVAP]-1659849208669
GPR[EPVS]-1659849208669
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849208670
GPR[SPVAP]-1659849208670
GPR[EPVAP]-1659849209769
GPR[EPVS]-1659849209769
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849209777
GPR[SPVAP]-1659849209777
GPR[EPVAP]-1659849210912
GPR[EPVS]-1659849210912
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849210913
GPR[SPVAP]-1659849210913
GPR[EPVAP]-1659849212057
GPR[EPVS]-1659849212057
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849212063
GPR[SPVAP]-1659849212063
GPR[EPVAP]-1659849213189
GPR[EPVS]-1659849213189
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849213191
GPR[SPVAP]-1659849213191
GPR[EPVAP]-1659849214300
GPR[EPVS]-1659849214300
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849214302
GPR[SPVAP]-1659849214302
GPR[EPVAP]-1659849215421
GPR[EPVS]-1659849215421
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849215422
GPR[SPVAP]-1659849215422
GPR[EPVAP]-1659849216545
GPR[EPVS]-1659849216545
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849216547
GPR[SPVAP]-1659849216547
GPR[EPVAP]-1659849217659
GPR[EPVS]-1659849217659
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849217661
GPR[SPVAP]-1659849217661
GPR[EPVAP]-1659849218773
GPR[EPVS]-1659849218773
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849218775
GPR[SPVAP]-1659849218775
GPR[EPVAP]-1659849220863
GPR[SPVATF]-1659849220863
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849222961
GPR[EPVS]-1659849222961
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659849222962
GPR[SPVAP]-1659849222962
GPR[EPVAP]-1659849224078
GPR[EPVS]-1659849224078
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849224080
GPR[SPVAP]-1659849224080
GPR[EPVAP]-1659849225188
GPR[EPVS]-1659849225188
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849225190
GPR[SPVAP]-1659849225190
GPR[EPVAP]-1659849226300
GPR[EPVS]-1659849226300
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849226301
GPR[SPVAP]-1659849226301
GPR[EPVAP]-1659849227442
GPR[EPVS]-1659849227442
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849227445
GPR[SPVAP]-1659849227445
GPR[EPVAP]-1659849228558
GPR[EPVS]-1659849228558
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849228560
GPR[SPVAP]-1659849228560
GPR[EPVAP]-1659849229671
GPR[EPVS]-1659849229671
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849229672
GPR[SPVAP]-1659849229672
GPR[EPVAP]-1659849230805
GPR[EPVS]-1659849230805
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849230807
GPR[SPVAP]-1659849230807
GPR[EPVAP]-1659849231993
GPR[EPVS]-1659849231993
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849231995
GPR[SPVAP]-1659849231995
GPR[EPVAP]-1659849233086
GPR[EPVS]-1659849233087
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849233088
GPR[SPVAP]-1659849233088
GPR[EPVAP]-1659849234191
GPR[EPVS]-1659849234191
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849234193
GPR[SPVAP]-1659849234193
GPR[EPVAP]-1659849235459
GPR[EPVS]-1659849235459
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849235469
GPR[SPVAP]-1659849235469
GPR[EPVAP]-1659849238043
GPR[EPVS]-1659849238043
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849238045
GPR[SPVAP]-1659849238045
GPR[EPVAP]-1659849240153
GPR[SPVATF]-1659849240153
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849242197
GPR[EPVS]-1659849242197
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849242199
GPR[SPVAP]-1659849242199
GPR[EPVAP]-1659849243302
GPR[EPVS]-1659849243302
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849243303
GPR[SPVAP]-1659849243303
GPR[EPVAP]-1659849244413
GPR[EPVS]-1659849244413
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849244414
GPR[SPVAP]-1659849244414
GPR[EPVAP]-1659849245520
GPR[EPVS]-1659849245520
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849245521
GPR[SPVAP]-1659849245521
GPR[EPVAP]-1659849246630
GPR[EPVS]-1659849246630
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849246631
GPR[SPVAP]-1659849246631
GPR[EPVAP]-1659849247748
GPR[EPVS]-1659849247748
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849247749
GPR[SPVAP]-1659849247749
GPR[EPVAP]-1659849248892
GPR[EPVS]-1659849248892
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849248894
GPR[SPVAP]-1659849248894
GPR[EPVAP]-1659849249995
GPR[EPVS]-1659849249995
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849249998
GPR[SPVAP]-1659849249998
GPR[EPVAP]-1659849251143
GPR[EPVS]-1659849251143
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849251146
GPR[SPVAP]-1659849251146
GPR[EPVAP]-1659849252257
GPR[EPVS]-1659849252257
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849252259
GPR[SPVAP]-1659849252259
GPR[EPVAP]-1659849253371
GPR[EPVS]-1659849253371
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849253372
GPR[SPVAP]-1659849253372
GPR[EPVAP]-1659849254476
GPR[EPVS]-1659849254476
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849254478
GPR[SPVAP]-1659849254478
GPR[EPVAP]-1659849255611
GPR[EPVS]-1659849255611
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849255613
GPR[SPVAP]-1659849255613
GPR[EPVAP]-1659849256730
GPR[EPVS]-1659849256730
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849256731
GPR[SPVAP]-1659849256731
GPR[EPVAP]-1659849257843
GPR[EPVS]-1659849257843
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849257847
GPR[SPVAP]-1659849257847
GPR[EPVAP]-1659849258960
GPR[EPVS]-1659849258961
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849258964
GPR[SPVAP]-1659849258964
GPR[EPVAP]-1659849260085
GPR[EPVS]-1659849260085
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849260087
GPR[SPVAP]-1659849260087
GPR[EPVAP]-1659849261221
GPR[EPVS]-1659849261221
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849261223
GPR[SPVAP]-1659849261223
GPR[EPVAP]-1659849262345
GPR[EPVS]-1659849262345
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849262346
GPR[SPVAP]-1659849262347
GPR[EPVAP]-1659849263478
GPR[EPVS]-1659849263478
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849263480
GPR[SPVAP]-1659849263480
GPR[EPVAP]-1659849264599
GPR[EPVS]-1659849264599
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849264601
GPR[SPVAP]-1659849264601
GPR[EPVAP]-1659849265719
GPR[EPVS]-1659849265719
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849265721
GPR[SPVAP]-1659849265721
GPR[EPVAP]-1659849266839
GPR[EPVS]-1659849266839
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849266840
GPR[SPVAP]-1659849266840
GPR[EPVAP]-1659849267990
GPR[EPVS]-1659849267990
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849267991
GPR[SPVAP]-1659849267991
GPR[EPVAP]-1659849269109
GPR[EPVS]-1659849269109
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849269110
GPR[SPVAP]-1659849269110
GPR[EPVAP]-1659849270227
GPR[EPVS]-1659849270227
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849270229
GPR[SPVAP]-1659849270229
GPR[EPVAP]-1659849271337
GPR[EPVS]-1659849271337
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849271338
GPR[SPVAP]-1659849271338
GPR[EPVAP]-1659849272439
GPR[EPVS]-1659849272439
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849272440
GPR[SPVAP]-1659849272440
GPR[EPVAP]-1659849273544
GPR[EPVS]-1659849273544
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849273547
GPR[SPVAP]-1659849273547
GPR[EPVAP]-1659849275608
GPR[SPVATF]-1659849275608
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849277665
GPR[EPVS]-1659849277665
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849277667
GPR[SPVAP]-1659849277667
GPR[EPVAP]-1659849278768
GPR[EPVS]-1659849278768
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849278770
GPR[SPVAP]-1659849278770
GPR[EPVAP]-1659849279885
GPR[EPVS]-1659849279885
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849279887
GPR[SPVAP]-1659849279887
GPR[EPVAP]-1659849280996
GPR[EPVS]-1659849280996
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849280999
GPR[SPVAP]-1659849280999
GPR[EPVAP]-1659849282103
GPR[EPVS]-1659849282103
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849282106
GPR[SPVAP]-1659849282106
GPR[EPVAP]-1659849283221
GPR[EPVS]-1659849283221
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849283222
GPR[SPVAP]-1659849283222
GPR[EPVAP]-1659849284333
GPR[EPVS]-1659849284333
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849284335
GPR[SPVAP]-1659849284335
GPR[EPVAP]-1659849285449
GPR[EPVS]-1659849285449
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849285453
GPR[SPVAP]-1659849285453
GPR[EPVAP]-1659849286613
GPR[EPVS]-1659849286613
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849286618
GPR[SPVAP]-1659849286618
GPR[EPVAP]-1659849287719
GPR[EPVS]-1659849287719
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849287722
GPR[SPVAP]-1659849287722
GPR[EPVAP]-1659849288841
GPR[EPVS]-1659849288841
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849288843
GPR[SPVAP]-1659849288843
GPR[EPVAP]-1659849289949
GPR[EPVS]-1659849289949
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849289950
GPR[SPVAP]-1659849289950
GPR[EPVAP]-1659849291067
GPR[EPVS]-1659849291067
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849291068
GPR[SPVAP]-1659849291068
GPR[EPVAP]-1659849292133
GPR[EPVS]-1659849292133
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849292137
GPR[SPVAP]-1659849292137
GPR[EPVAP]-1659849293244
GPR[EPVS]-1659849293244
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849293245
GPR[SPVAP]-1659849293245
GPR[EPVAP]-1659849294349
GPR[EPVS]-1659849294349
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849294351
GPR[SPVAP]-1659849294351
GPR[EPVAP]-1659849295465
GPR[EPVS]-1659849295465
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849295466
GPR[SPVAP]-1659849295466
GPR[EPVAP]-1659849296561
GPR[EPVS]-1659849296561
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659849296562
GPR[SPVAP]-1659849296562
GPR[EPVAP]-1659849297664
GPR[EPVS]-1659849297664
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849297667
GPR[SPVAP]-1659849297667
GPR[EPVAP]-1659849298776
GPR[EPVS]-1659849298776
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849298778
GPR[SPVAP]-1659849298778
GPR[EPVAP]-1659849299885
GPR[EPVS]-1659849299885
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849299886
GPR[SPVAP]-1659849299886
GPR[EPVAP]-1659849300995
GPR[EPVS]-1659849300995
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849301001
GPR[SPVAP]-1659849301001
GPR[EPVAP]-1659849302124
GPR[EPVS]-1659849302124
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849302128
GPR[SPVAP]-1659849302128
GPR[EPVAP]-1659849303239
GPR[EPVS]-1659849303239
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849303240
GPR[SPVAP]-1659849303240
GPR[EPVAP]-1659849304365
GPR[EPVS]-1659849304365
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849304366
GPR[SPVAP]-1659849304366
GPR[EPVAP]-1659849305460
GPR[EPVS]-1659849305460
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849305463
GPR[SPVAP]-1659849305463
GPR[EPVAP]-1659849306575
GPR[EPVS]-1659849306575
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849306582
GPR[SPVAP]-1659849306582
GPR[EPVAP]-1659849307693
GPR[EPVS]-1659849307693
GPR[ESUN]-1659849307693
GPR[SSUN]-1659849307693
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849314940
GPR[SPVAP]-1659849314940
GPR[EPVAP]-1659849321369
GPR[SPVATF]-1659849321369
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849323418
GPR[EPVS]-1659849323418
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849323419
GPR[SPVAP]-1659849323419
GPR[EPVAP]-1659849324541
GPR[EPVS]-1659849324541
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849324542
GPR[SPVAP]-1659849324542
GPR[EPVAP]-1659849325648
GPR[EPVS]-1659849325648
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849325650
GPR[SPVAP]-1659849325650
GPR[EPVAP]-1659849327738
GPR[SPVATF]-1659849327738
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849330257
GPR[EPVS]-1659849330257
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659849330259
GPR[SPVAP]-1659849330259
GPR[EPVAP]-1659849331383
GPR[EPVS]-1659849331384
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849331385
GPR[SPVAP]-1659849331385
GPR[EPVAP]-1659849332490
GPR[EPVS]-1659849332490
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849332492
GPR[SPVAP]-1659849332492
GPR[EPVAP]-1659849333621
GPR[EPVS]-1659849333621
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849333624
GPR[SPVAP]-1659849333624
GPR[EPVAP]-1659849334737
GPR[EPVS]-1659849334737
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849334739
GPR[SPVAP]-1659849334739
GPR[EPVAP]-1659849335846
GPR[EPVS]-1659849335846
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849335847
GPR[SPVAP]-1659849335847
GPR[EPVAP]-1659849336968
GPR[EPVS]-1659849336969
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849336970
GPR[SPVAP]-1659849336970
GPR[EPVAP]-1659849338082
GPR[EPVS]-1659849338082
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849338084
GPR[SPVAP]-1659849338084
GPR[EPVAP]-1659849339230
GPR[EPVS]-1659849339230
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849339232
GPR[SPVAP]-1659849339232
GPR[EPVAP]-1659849340361
GPR[EPVS]-1659849340361
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849340362
GPR[SPVAP]-1659849340362
GPR[EPVAP]-1659849341475
GPR[EPVS]-1659849341475
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849341477
GPR[SPVAP]-1659849341477
GPR[EPVAP]-1659849342621
GPR[EPVS]-1659849342621
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849342623
GPR[SPVAP]-1659849342623
GPR[EPVAP]-1659849343741
GPR[EPVS]-1659849343741
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849343743
GPR[SPVAP]-1659849343743
GPR[EPVAP]-1659849344855
GPR[EPVS]-1659849344855
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849344856
GPR[SPVAP]-1659849344856
GPR[EPVAP]-1659849345967
GPR[EPVS]-1659849345967
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849345969
GPR[SPVAP]-1659849345969
GPR[EPVAP]-1659849347090
GPR[EPVS]-1659849347091
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849347092
GPR[SPVAP]-1659849347092
GPR[EPVAP]-1659849348201
GPR[EPVS]-1659849348201
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849348202
GPR[SPVAP]-1659849348202
GPR[EPVAP]-1659849349308
GPR[EPVS]-1659849349308
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849349309
GPR[SPVAP]-1659849349309
GPR[EPVAP]-1659849350427
GPR[EPVS]-1659849350427
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849350431
GPR[SPVAP]-1659849350431
GPR[EPVAP]-1659849351542
GPR[EPVS]-1659849351542
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849351544
GPR[SPVAP]-1659849351544
GPR[EPVAP]-1659849352658
GPR[EPVS]-1659849352658
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849352661
GPR[SPVAP]-1659849352661
GPR[EPVAP]-1659849353778
GPR[EPVS]-1659849353778
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659849353780
GPR[SPVAP]-1659849353780
GPR[EPVAP]-1659849354885
GPR[EPVS]-1659849354885
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849354887
GPR[SPVAP]-1659849354887
GPR[EPVAP]-1659849355998
GPR[EPVS]-1659849355998
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849356000
GPR[SPVAP]-1659849356000
GPR[EPVAP]-1659849357127
GPR[EPVS]-1659849357128
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849357130
GPR[SPVAP]-1659849357130
GPR[EPVAP]-1659849358232
GPR[EPVS]-1659849358232
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849358235
GPR[SPVAP]-1659849358236
GPR[EPVAP]-1659849359353
GPR[EPVS]-1659849359353
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849359355
GPR[SPVAP]-1659849359355
GPR[EPVAP]-1659849360494
GPR[EPVS]-1659849360494
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849360496
GPR[SPVAP]-1659849360496
GPR[EPVAP]-1659849361625
GPR[EPVS]-1659849361625
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849361627
GPR[SPVAP]-1659849361627
GPR[EPVAP]-1659849362735
GPR[EPVS]-1659849362735
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849362736
GPR[SPVAP]-1659849362736
GPR[EPVAP]-1659849363853
GPR[EPVS]-1659849363853
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849363855
GPR[SPVAP]-1659849363855
GPR[EPVAP]-1659849364965
GPR[EPVS]-1659849364965
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849364967
GPR[SPVAP]-1659849364967
GPR[EPVAP]-1659849366076
GPR[EPVS]-1659849366076
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849366078
GPR[SPVAP]-1659849366078
GPR[EPVAP]-1659849367210
GPR[EPVS]-1659849367210
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849367212
GPR[SPVAP]-1659849367212
GPR[EPVAP]-1659849368344
GPR[EPVS]-1659849368344
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849368346
GPR[SPVAP]-1659849368346
GPR[EPVAP]-1659849369447
GPR[EPVS]-1659849369447
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849369449
GPR[SPVAP]-1659849369449
GPR[EPVAP]-1659849370559
GPR[EPVS]-1659849370559
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849370561
GPR[SPVAP]-1659849370561
GPR[EPVAP]-1659849371683
GPR[EPVS]-1659849371683
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849371684
GPR[SPVAP]-1659849371684
GPR[EPVAP]-1659849372797
GPR[EPVS]-1659849372797
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849372798
GPR[SPVAP]-1659849372798
GPR[EPVAP]-1659849373920
GPR[EPVS]-1659849373920
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849373921
GPR[SPVAP]-1659849373921
GPR[EPVAP]-1659849375047
GPR[EPVS]-1659849375047
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849375048
GPR[SPVAP]-1659849375048
GPR[EPVAP]-1659849376153
GPR[EPVS]-1659849376153
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849376154
GPR[SPVAP]-1659849376155
GPR[EPVAP]-1659849377308
GPR[EPVS]-1659849377308
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849377309
GPR[SPVAP]-1659849377309
GPR[EPVAP]-1659849378424
GPR[EPVS]-1659849378424
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849378426
GPR[SPVAP]-1659849378426
GPR[EPVAP]-1659849379537
GPR[EPVS]-1659849379537
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849379542
GPR[SPVAP]-1659849379542
GPR[EPVAP]-1659849380656
GPR[EPVS]-1659849380656
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849380658
GPR[SPVAP]-1659849380658
GPR[EPVAP]-1659849381773
GPR[EPVS]-1659849381773
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849381775
GPR[SPVAP]-1659849381775
GPR[EPVAP]-1659849384650
GPR[EPVS]-1659849384650
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849384659
GPR[SPVAP]-1659849384659
GPR[EPVAP]-1659849385845
GPR[EPVS]-1659849385845
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849385847
GPR[SPVAP]-1659849385847
GPR[EPVAP]-1659849386953
GPR[EPVS]-1659849386953
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849386957
GPR[SPVAP]-1659849386957
GPR[EPVAP]-1659849388067
GPR[EPVS]-1659849388067
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849388069
GPR[SPVAP]-1659849388069
GPR[EPVAP]-1659849389187
GPR[EPVS]-1659849389187
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849389188
GPR[SPVAP]-1659849389188
GPR[EPVAP]-1659849390293
GPR[EPVS]-1659849390293
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849390294
GPR[SPVAP]-1659849390294
GPR[EPVAP]-1659849391421
GPR[EPVS]-1659849391421
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849391423
GPR[SPVAP]-1659849391423
GPR[EPVAP]-1659849392561
GPR[EPVS]-1659849392561
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849392563
GPR[SPVAP]-1659849392563
GPR[EPVAP]-1659849393661
GPR[EPVS]-1659849393661
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849393663
GPR[SPVAP]-1659849393663
GPR[EPVAP]-1659849394779
GPR[EPVS]-1659849394779
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849394780
GPR[SPVAP]-1659849394780
GPR[EPVAP]-1659849395891
GPR[EPVS]-1659849395891
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849395893
GPR[SPVAP]-1659849395893
GPR[EPVAP]-1659849397026
GPR[EPVS]-1659849397026
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849397030
GPR[SPVAP]-1659849397030
GPR[EPVAP]-1659849398144
GPR[EPVS]-1659849398144
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849398146
GPR[SPVAP]-1659849398146
GPR[EPVAP]-1659849399294
GPR[EPVS]-1659849399294
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849399297
GPR[SPVAP]-1659849399297
GPR[EPVAP]-1659849400393
GPR[EPVS]-1659849400393
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849400394
GPR[SPVAP]-1659849400395
GPR[EPVAP]-1659849401510
GPR[EPVS]-1659849401510
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849401512
GPR[SPVAP]-1659849401512
GPR[EPVAP]-1659849402604
GPR[EPVS]-1659849402604
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849402606
GPR[SPVAP]-1659849402606
GPR[EPVAP]-1659849403721
GPR[EPVS]-1659849403721
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849403723
GPR[SPVAP]-1659849403723
GPR[EPVAP]-1659849404830
GPR[EPVS]-1659849404830
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849404832
GPR[SPVAP]-1659849404832
GPR[EPVAP]-1659849405940
GPR[EPVS]-1659849405940
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849405942
GPR[SPVAP]-1659849405942
GPR[EPVAP]-1659849407045
GPR[EPVS]-1659849407045
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849407047
GPR[SPVAP]-1659849407047
GPR[EPVAP]-1659849408149
GPR[EPVS]-1659849408149
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849408150
GPR[SPVAP]-1659849408150
GPR[EPVAP]-1659849409249
GPR[EPVS]-1659849409249
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849409252
GPR[SPVAP]-1659849409252
GPR[EPVAP]-1659849410365
GPR[EPVS]-1659849410365
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849410366
GPR[SPVAP]-1659849410366
GPR[EPVAP]-1659849411489
GPR[EPVS]-1659849411489
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849411491
GPR[SPVAP]-1659849411491
GPR[EPVAP]-1659849413561
GPR[SPVATF]-1659849413561
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849415618
GPR[EPVS]-1659849415618
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849415619
GPR[SPVAP]-1659849415619
GPR[EPVAP]-1659849416777
GPR[EPVS]-1659849416777
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849416778
GPR[SPVAP]-1659849416778
GPR[EPVAP]-1659849417880
GPR[EPVS]-1659849417880
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849417881
GPR[SPVAP]-1659849417881
GPR[EPVAP]-1659849418993
GPR[EPVS]-1659849418993
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849418995
GPR[SPVAP]-1659849418995
GPR[EPVAP]-1659849420103
GPR[EPVS]-1659849420103
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849420104
GPR[SPVAP]-1659849420104
GPR[EPVAP]-1659849421209
GPR[EPVS]-1659849421209
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849421211
GPR[SPVAP]-1659849421211
GPR[EPVAP]-1659849422317
GPR[EPVS]-1659849422317
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849422319
GPR[SPVAP]-1659849422319
GPR[EPVAP]-1659849423419
GPR[EPVS]-1659849423419
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849423420
GPR[SPVAP]-1659849423420
GPR[EPVAP]-1659849424517
GPR[EPVS]-1659849424517
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849424519
GPR[SPVAP]-1659849424519
GPR[EPVAP]-1659849425630
GPR[EPVS]-1659849425630
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849425633
GPR[SPVAP]-1659849425633
GPR[EPVAP]-1659849426758
GPR[EPVS]-1659849426758
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849426761
GPR[SPVAP]-1659849426761
GPR[EPVAP]-1659849427865
GPR[EPVS]-1659849427865
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849427867
GPR[SPVAP]-1659849427867
GPR[EPVAP]-1659849428975
GPR[EPVS]-1659849428975
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849428979
GPR[SPVAP]-1659849428979
GPR[EPVAP]-1659849430085
GPR[EPVS]-1659849430085
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849430087
GPR[SPVAP]-1659849430087
GPR[EPVAP]-1659849431196
GPR[EPVS]-1659849431196
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849431199
GPR[SPVAP]-1659849431199
GPR[EPVAP]-1659849432347
GPR[EPVS]-1659849432347
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849432349
GPR[SPVAP]-1659849432349
GPR[EPVAP]-1659849433527
GPR[EPVS]-1659849433527
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849433529
GPR[SPVAP]-1659849433529
GPR[EPVAP]-1659849434652
GPR[EPVS]-1659849434652
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849434655
GPR[SPVAP]-1659849434655
GPR[EPVAP]-1659849435763
GPR[EPVS]-1659849435763
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849435765
GPR[SPVAP]-1659849435765
GPR[EPVAP]-1659849436876
GPR[EPVS]-1659849436876
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849436878
GPR[SPVAP]-1659849436878
GPR[EPVAP]-1659849437991
GPR[EPVS]-1659849437991
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849437994
GPR[SPVAP]-1659849437994
GPR[EPVAP]-1659849439112
GPR[EPVS]-1659849439112
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849439114
GPR[SPVAP]-1659849439114
GPR[EPVAP]-1659849440253
GPR[EPVS]-1659849440253
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849440255
GPR[SPVAP]-1659849440255
GPR[EPVAP]-1659849441365
GPR[EPVS]-1659849441365
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849441367
GPR[SPVAP]-1659849441367
GPR[EPVAP]-1659849442481
GPR[EPVS]-1659849442481
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849442482
GPR[SPVAP]-1659849442482
GPR[EPVAP]-1659849443612
GPR[EPVS]-1659849443612
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849443614
GPR[SPVAP]-1659849443614
GPR[EPVAP]-1659849444752
GPR[EPVS]-1659849444752
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849444756
GPR[SPVAP]-1659849444756
GPR[EPVAP]-1659849445879
GPR[EPVS]-1659849445879
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659849445882
GPR[SPVAP]-1659849445882
GPR[EPVAP]-1659849447001
GPR[EPVS]-1659849447001
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659849447003
GPR[SPVAP]-1659849447003
GPR[EPVAP]-1659849448114
GPR[EPVS]-1659849448114
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659849448115
GPR[SPVAP]-1659849448115
GPR[EPVAP]-1659849449249
GPR[EPVS]-1659849449249
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849449251
GPR[SPVAP]-1659849449251
GPR[EPVAP]-1659849450348
GPR[EPVS]-1659849450348
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849450350
GPR[SPVAP]-1659849450350
GPR[EPVAP]-1659849451466
GPR[EPVS]-1659849451466
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849451468
GPR[SPVAP]-1659849451468
GPR[EPVAP]-1659849452585
GPR[EPVS]-1659849452585
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849452587
GPR[SPVAP]-1659849452587
GPR[EPVAP]-1659849453692
GPR[EPVS]-1659849453692
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849453693
GPR[SPVAP]-1659849453693
GPR[EPVAP]-1659849454957
GPR[EPVS]-1659849454957
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849454966
GPR[SPVAP]-1659849454966
GPR[EPVAP]-1659849457499
GPR[EPVS]-1659849457499
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849457506
GPR[SPVAP]-1659849457506
GPR[EPVAP]-1659849458611
GPR[EPVS]-1659849458611
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849458613
GPR[SPVAP]-1659849458613
GPR[EPVAP]-1659849459734
GPR[EPVS]-1659849459734
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849459739
GPR[SPVAP]-1659849459739
GPR[EPVAP]-1659849460835
GPR[EPVS]-1659849460835
GPR[ESUN]-1659849460836
GPR[SSUN]-1659849460836
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659849461527
GPR[SSUN]-1659849461527
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849468114
GPR[SPVAP]-1659849468114
GPR[EPVAP]-1659849474583
GPR[SPVATF]-1659849474583
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849476630
GPR[EPVS]-1659849476630
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849476632
GPR[SPVAP]-1659849476632
GPR[EPVAP]-1659849477745
GPR[EPVS]-1659849477745
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849477746
GPR[SPVAP]-1659849477746
GPR[EPVAP]-1659849479816
GPR[SPVATF]-1659849479816
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849482317
GPR[EPVS]-1659849482317
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849482318
GPR[SPVAP]-1659849482318
GPR[EPVAP]-1659849483490
GPR[EPVS]-1659849483490
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849483491
GPR[SPVAP]-1659849483491
GPR[EPVAP]-1659849484627
GPR[EPVS]-1659849484627
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849484629
GPR[SPVAP]-1659849484629
GPR[EPVAP]-1659849485741
GPR[EPVS]-1659849485741
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849485742
GPR[SPVAP]-1659849485742
GPR[EPVAP]-1659849486860
GPR[EPVS]-1659849486860
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849486862
GPR[SPVAP]-1659849486862
GPR[EPVAP]-1659849487977
GPR[EPVS]-1659849487977
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849487979
GPR[SPVAP]-1659849487979
GPR[EPVAP]-1659849489088
GPR[EPVS]-1659849489088
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849489090
GPR[SPVAP]-1659849489090
GPR[EPVAP]-1659849490190
GPR[EPVS]-1659849490190
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849490193
GPR[SPVAP]-1659849490193
GPR[EPVAP]-1659849491301
GPR[EPVS]-1659849491301
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849491303
GPR[SPVAP]-1659849491303
GPR[EPVAP]-1659849492427
GPR[EPVS]-1659849492427
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849492429
GPR[SPVAP]-1659849492429
GPR[EPVAP]-1659849493547
GPR[EPVS]-1659849493547
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849493548
GPR[SPVAP]-1659849493548
GPR[EPVAP]-1659849494687
GPR[EPVS]-1659849494687
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849494689
GPR[SPVAP]-1659849494689
GPR[EPVAP]-1659849495823
GPR[EPVS]-1659849495823
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849495825
GPR[SPVAP]-1659849495825
GPR[EPVAP]-1659849496976
GPR[EPVS]-1659849496976
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849496978
GPR[SPVAP]-1659849496978
GPR[EPVAP]-1659849498077
GPR[EPVS]-1659849498077
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849498079
GPR[SPVAP]-1659849498079
GPR[EPVAP]-1659849499191
GPR[EPVS]-1659849499191
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849499192
GPR[SPVAP]-1659849499192
GPR[EPVAP]-1659849500311
GPR[EPVS]-1659849500311
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849500314
GPR[SPVAP]-1659849500314
GPR[EPVAP]-1659849501416
GPR[EPVS]-1659849501416
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849501418
GPR[SPVAP]-1659849501418
GPR[EPVAP]-1659849502540
GPR[EPVS]-1659849502540
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849502541
GPR[SPVAP]-1659849502541
GPR[EPVAP]-1659849503653
GPR[EPVS]-1659849503653
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849503655
GPR[SPVAP]-1659849503655
GPR[EPVAP]-1659849504762
GPR[EPVS]-1659849504762
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849504763
GPR[SPVAP]-1659849504763
GPR[EPVAP]-1659849505889
GPR[EPVS]-1659849505889
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849505891
GPR[SPVAP]-1659849505891
GPR[EPVAP]-1659849506996
GPR[EPVS]-1659849506996
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849506998
GPR[SPVAP]-1659849506998
GPR[EPVAP]-1659849508114
GPR[EPVS]-1659849508114
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849508115
GPR[SPVAP]-1659849508115
GPR[EPVAP]-1659849509220
GPR[EPVS]-1659849509220
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849509222
GPR[SPVAP]-1659849509222
GPR[EPVAP]-1659849510348
GPR[EPVS]-1659849510348
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849510349
GPR[SPVAP]-1659849510349
GPR[EPVAP]-1659849511470
GPR[EPVS]-1659849511470
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849511471
GPR[SPVAP]-1659849511471
GPR[EPVAP]-1659849512598
GPR[EPVS]-1659849512598
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849512600
GPR[SPVAP]-1659849512600
GPR[EPVAP]-1659849513725
GPR[EPVS]-1659849513725
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849513727
GPR[SPVAP]-1659849513727
GPR[EPVAP]-1659849514832
GPR[EPVS]-1659849514832
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849514834
GPR[SPVAP]-1659849514834
GPR[EPVAP]-1659849515947
GPR[EPVS]-1659849515947
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849515950
GPR[SPVAP]-1659849515950
GPR[EPVAP]-1659849517074
GPR[EPVS]-1659849517074
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849517075
GPR[SPVAP]-1659849517075
GPR[EPVAP]-1659849518213
GPR[EPVS]-1659849518213
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849518216
GPR[SPVAP]-1659849518216
GPR[EPVAP]-1659849519324
GPR[EPVS]-1659849519324
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849519326
GPR[SPVAP]-1659849519326
GPR[EPVAP]-1659849520469
GPR[EPVS]-1659849520469
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849520470
GPR[SPVAP]-1659849520470
GPR[EPVAP]-1659849521601
GPR[EPVS]-1659849521601
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849521603
GPR[SPVAP]-1659849521603
GPR[EPVAP]-1659849522728
GPR[EPVS]-1659849522728
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849522729
GPR[SPVAP]-1659849522729
GPR[EPVAP]-1659849523844
GPR[EPVS]-1659849523844
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849523846
GPR[SPVAP]-1659849523846
GPR[EPVAP]-1659849524972
GPR[EPVS]-1659849524972
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849524974
GPR[SPVAP]-1659849524974
GPR[EPVAP]-1659849526083
GPR[EPVS]-1659849526083
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849526084
GPR[SPVAP]-1659849526084
GPR[EPVAP]-1659849527373
GPR[EPVS]-1659849527373
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849527382
GPR[SPVAP]-1659849527382
GPR[EPVAP]-1659849529777
GPR[EPVS]-1659849529777
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849529778
GPR[SPVAP]-1659849529778
GPR[EPVAP]-1659849530908
GPR[EPVS]-1659849530908
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849530911
GPR[SPVAP]-1659849530911
GPR[EPVAP]-1659849532024
GPR[EPVS]-1659849532024
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849532025
GPR[SPVAP]-1659849532025
GPR[EPVAP]-1659849533143
GPR[EPVS]-1659849533143
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849533146
GPR[SPVAP]-1659849533146
GPR[EPVAP]-1659849534249
GPR[EPVS]-1659849534249
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849534251
GPR[SPVAP]-1659849534251
GPR[EPVAP]-1659849535358
GPR[EPVS]-1659849535358
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849535359
GPR[SPVAP]-1659849535359
GPR[EPVAP]-1659849536465
GPR[EPVS]-1659849536465
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849536466
GPR[SPVAP]-1659849536466
GPR[EPVAP]-1659849537571
GPR[EPVS]-1659849537571
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849537572
GPR[SPVAP]-1659849537572
GPR[EPVAP]-1659849538681
GPR[EPVS]-1659849538681
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849538684
GPR[SPVAP]-1659849538684
GPR[EPVAP]-1659849539799
GPR[EPVS]-1659849539799
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849539800
GPR[SPVAP]-1659849539800
GPR[EPVAP]-1659849540901
GPR[EPVS]-1659849540901
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849540906
GPR[SPVAP]-1659849540906
GPR[EPVAP]-1659849542019
GPR[EPVS]-1659849542019
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849542022
GPR[SPVAP]-1659849542022
GPR[EPVAP]-1659849543131
GPR[EPVS]-1659849543131
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849543133
GPR[SPVAP]-1659849543133
GPR[EPVAP]-1659849544270
GPR[EPVS]-1659849544270
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849544271
GPR[SPVAP]-1659849544271
GPR[EPVAP]-1659849545384
GPR[EPVS]-1659849545384
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849545386
GPR[SPVAP]-1659849545386
GPR[EPVAP]-1659849546495
GPR[EPVS]-1659849546495
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659849546499
GPR[SPVAP]-1659849546499
GPR[EPVAP]-1659849547617
GPR[EPVS]-1659849547617
Timeout!
MM Purify? true
GPR[SFL]-1659849548618
GPR[EFL]-1659849548622
GPR[SFP]-1659849548622
TIMEOUT : 600000
GPR[SSUN]-1659849548626
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659849550556
GPR[SPVAP]-1659849550556
GPR[EPVAP]-1659849557117
GPR[SPVATF]-1659849557117
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 0
GPR[EPVATF]-1659849559364
GPR[SPVATR]-1659849559365
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659849624915
GPR[EPVS]-1659849624915
GPR[PF]-1659849624915
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/14/patch_76298_1_ts_1659849624915.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM2437578019303904529/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/14/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/14/patch_76298_1_ts_1659849624915.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659849624927
GPR[SPVAP]-1659849624927
GPR[EPVAP]-1659849626921
GPR[SPVATF]-1659849626921
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849629273
GPR[EPVS]-1659849629273
GPR[ESUN]-1659849629274
GPR[SSUN]-1659849629274
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849631647
GPR[SPVAP]-1659849631647
GPR[EPVAP]-1659849638149
GPR[SPVATF]-1659849638149
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849640491
GPR[EPVS]-1659849640491
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849640493
GPR[SPVAP]-1659849640493
GPR[EPVAP]-1659849642636
GPR[SPVATF]-1659849642637
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849645000
GPR[EPVS]-1659849645000
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849645002
GPR[SPVAP]-1659849645002
GPR[EPVAP]-1659849647077
GPR[SPVATF]-1659849647077
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849649394
GPR[EPVS]-1659849649394
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849649395
GPR[SPVAP]-1659849649395
GPR[EPVAP]-1659849651467
GPR[SPVATF]-1659849651467
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849653758
GPR[EPVS]-1659849653758
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849653759
GPR[SPVAP]-1659849653759
GPR[EPVAP]-1659849655905
GPR[SPVATF]-1659849655905
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849658259
GPR[EPVS]-1659849658259
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849658261
GPR[SPVAP]-1659849658261
GPR[EPVAP]-1659849660348
GPR[SPVATF]-1659849660348
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849662635
GPR[EPVS]-1659849662635
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849662636
GPR[SPVAP]-1659849662636
GPR[EPVAP]-1659849664757
GPR[SPVATF]-1659849664757
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849667060
GPR[EPVS]-1659849667060
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849667062
GPR[SPVAP]-1659849667062
GPR[EPVAP]-1659849669127
GPR[SPVATF]-1659849669127
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849671516
GPR[EPVS]-1659849671516
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849671518
GPR[SPVAP]-1659849671518
GPR[EPVAP]-1659849673558
GPR[SPVATF]-1659849673558
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849678165
GPR[EPVS]-1659849678165
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849678166
GPR[SPVAP]-1659849678166
GPR[EPVAP]-1659849680213
GPR[SPVATF]-1659849680213
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849682544
GPR[EPVS]-1659849682544
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849682545
GPR[SPVAP]-1659849682545
GPR[EPVAP]-1659849684661
GPR[SPVATF]-1659849684661
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849686992
GPR[EPVS]-1659849686992
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849686994
GPR[SPVAP]-1659849686994
GPR[EPVAP]-1659849689054
GPR[SPVATF]-1659849689054
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849691386
GPR[EPVS]-1659849691386
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849691387
GPR[SPVAP]-1659849691387
GPR[EPVAP]-1659849693412
GPR[SPVATF]-1659849693412
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849695758
GPR[EPVS]-1659849695758
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849695760
GPR[SPVAP]-1659849695760
GPR[EPVAP]-1659849697831
GPR[SPVATF]-1659849697832
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849700153
GPR[EPVS]-1659849700153
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849700154
GPR[SPVAP]-1659849700154
GPR[EPVAP]-1659849702266
GPR[SPVATF]-1659849702266
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849704618
GPR[EPVS]-1659849704618
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849704619
GPR[SPVAP]-1659849704619
GPR[EPVAP]-1659849706702
GPR[SPVATF]-1659849706702
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849709009
GPR[EPVS]-1659849709009
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849709010
GPR[SPVAP]-1659849709010
GPR[EPVAP]-1659849711048
GPR[SPVATF]-1659849711048
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849713386
GPR[EPVS]-1659849713386
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849713388
GPR[SPVAP]-1659849713388
GPR[EPVAP]-1659849715433
GPR[SPVATF]-1659849715433
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849717770
GPR[EPVS]-1659849717770
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849717771
GPR[SPVAP]-1659849717771
GPR[EPVAP]-1659849719835
GPR[SPVATF]-1659849719835
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849722158
GPR[EPVS]-1659849722158
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849722159
GPR[SPVAP]-1659849722160
GPR[EPVAP]-1659849724261
GPR[SPVATF]-1659849724261
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849726578
GPR[EPVS]-1659849726578
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849726579
GPR[SPVAP]-1659849726579
GPR[EPVAP]-1659849728678
GPR[SPVATF]-1659849728678
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849731024
GPR[EPVS]-1659849731024
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849731025
GPR[SPVAP]-1659849731025
GPR[EPVAP]-1659849733140
GPR[SPVATF]-1659849733140
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849735489
GPR[EPVS]-1659849735489
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849735490
GPR[SPVAP]-1659849735490
GPR[EPVAP]-1659849737535
GPR[SPVATF]-1659849737535
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849739872
GPR[EPVS]-1659849739872
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849739875
GPR[SPVAP]-1659849739875
GPR[EPVAP]-1659849741970
GPR[SPVATF]-1659849741970
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849744278
GPR[EPVS]-1659849744278
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849744280
GPR[SPVAP]-1659849744280
GPR[EPVAP]-1659849746310
GPR[SPVATF]-1659849746310
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849750402
GPR[EPVS]-1659849750402
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659849750403
GPR[SPVAP]-1659849750403
GPR[EPVAP]-1659849752511
GPR[SPVATF]-1659849752511
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849754862
GPR[EPVS]-1659849754862
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849754864
GPR[SPVAP]-1659849754864
GPR[EPVAP]-1659849757013
GPR[SPVATF]-1659849757013
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849759348
GPR[EPVS]-1659849759348
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849759350
GPR[SPVAP]-1659849759350
GPR[EPVAP]-1659849761442
GPR[SPVATF]-1659849761442
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849763801
GPR[EPVS]-1659849763801
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849763803
GPR[SPVAP]-1659849763803
GPR[EPVAP]-1659849765865
GPR[SPVATF]-1659849765865
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849768162
GPR[EPVS]-1659849768162
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659849768164
GPR[SPVAP]-1659849768164
GPR[EPVAP]-1659849770199
GPR[SPVATF]-1659849770199
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849772507
GPR[EPVS]-1659849772507
GPR[ESUN]-1659849772511
GPR[SSUN]-1659849772511
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849779644
GPR[SPVAP]-1659849779644
GPR[EPVAP]-1659849786281
GPR[SPVATF]-1659849786281
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849788323
GPR[EPVS]-1659849788323
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659849788325
GPR[SPVAP]-1659849788325
GPR[EPVAP]-1659849789453
GPR[EPVS]-1659849789453
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849789455
GPR[SPVAP]-1659849789455
GPR[EPVAP]-1659849790569
GPR[EPVS]-1659849790569
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849790571
GPR[SPVAP]-1659849790571
GPR[EPVAP]-1659849791753
GPR[EPVS]-1659849791753
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849791756
GPR[SPVAP]-1659849791756
GPR[EPVAP]-1659849792875
GPR[EPVS]-1659849792875
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849792876
GPR[SPVAP]-1659849792876
GPR[EPVAP]-1659849794008
GPR[EPVS]-1659849794008
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849794009
GPR[SPVAP]-1659849794009
GPR[EPVAP]-1659849795173
GPR[EPVS]-1659849795173
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849795176
GPR[SPVAP]-1659849795176
GPR[EPVAP]-1659849797237
GPR[SPVATF]-1659849797237
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849799564
GPR[EPVS]-1659849799564
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849799566
GPR[SPVAP]-1659849799566
GPR[EPVAP]-1659849800684
GPR[EPVS]-1659849800684
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849800686
GPR[SPVAP]-1659849800686
GPR[EPVAP]-1659849801788
GPR[EPVS]-1659849801788
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849801789
GPR[SPVAP]-1659849801789
GPR[EPVAP]-1659849802893
GPR[EPVS]-1659849802893
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849802895
GPR[SPVAP]-1659849802895
GPR[EPVAP]-1659849804034
GPR[EPVS]-1659849804034
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849804036
GPR[SPVAP]-1659849804036
GPR[EPVAP]-1659849805156
GPR[EPVS]-1659849805156
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849805158
GPR[SPVAP]-1659849805158
GPR[EPVAP]-1659849806259
GPR[EPVS]-1659849806259
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849806261
GPR[SPVAP]-1659849806261
GPR[EPVAP]-1659849807394
GPR[EPVS]-1659849807394
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849807396
GPR[SPVAP]-1659849807396
GPR[EPVAP]-1659849808537
GPR[EPVS]-1659849808537
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849808539
GPR[SPVAP]-1659849808539
GPR[EPVAP]-1659849809649
GPR[EPVS]-1659849809649
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849809651
GPR[SPVAP]-1659849809651
GPR[EPVAP]-1659849810780
GPR[EPVS]-1659849810780
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849810782
GPR[SPVAP]-1659849810782
GPR[EPVAP]-1659849811956
GPR[EPVS]-1659849811956
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849811959
GPR[SPVAP]-1659849811959
GPR[EPVAP]-1659849813102
GPR[EPVS]-1659849813102
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849813104
GPR[SPVAP]-1659849813104
GPR[EPVAP]-1659849814239
GPR[EPVS]-1659849814239
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849814241
GPR[SPVAP]-1659849814241
GPR[EPVAP]-1659849816329
GPR[SPVATF]-1659849816329
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849818325
GPR[EPVS]-1659849818325
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659849818327
GPR[SPVAP]-1659849818327
GPR[EPVAP]-1659849821132
GPR[EPVS]-1659849821132
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849821134
GPR[SPVAP]-1659849821134
GPR[EPVAP]-1659849822235
GPR[EPVS]-1659849822235
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849822238
GPR[SPVAP]-1659849822238
GPR[EPVAP]-1659849823336
GPR[EPVS]-1659849823336
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849823338
GPR[SPVAP]-1659849823338
GPR[EPVAP]-1659849824446
GPR[EPVS]-1659849824446
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849824449
GPR[SPVAP]-1659849824449
GPR[EPVAP]-1659849825578
GPR[EPVS]-1659849825578
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849825580
GPR[SPVAP]-1659849825580
GPR[EPVAP]-1659849826680
GPR[EPVS]-1659849826681
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849826682
GPR[SPVAP]-1659849826682
GPR[EPVAP]-1659849827797
GPR[EPVS]-1659849827797
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849827798
GPR[SPVAP]-1659849827798
GPR[EPVAP]-1659849828930
GPR[EPVS]-1659849828930
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849828932
GPR[SPVAP]-1659849828932
GPR[EPVAP]-1659849830038
GPR[EPVS]-1659849830038
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849830040
GPR[SPVAP]-1659849830040
GPR[EPVAP]-1659849831161
GPR[EPVS]-1659849831161
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849831163
GPR[SPVAP]-1659849831163
GPR[EPVAP]-1659849832295
GPR[EPVS]-1659849832295
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849832297
GPR[SPVAP]-1659849832297
GPR[EPVAP]-1659849833424
GPR[EPVS]-1659849833424
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849833426
GPR[SPVAP]-1659849833426
GPR[EPVAP]-1659849835508
GPR[SPVATF]-1659849835508
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849837486
GPR[EPVS]-1659849837486
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849837487
GPR[SPVAP]-1659849837487
GPR[EPVAP]-1659849838595
GPR[EPVS]-1659849838595
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849838597
GPR[SPVAP]-1659849838597
GPR[EPVAP]-1659849839733
GPR[EPVS]-1659849839733
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849839734
GPR[SPVAP]-1659849839734
GPR[EPVAP]-1659849840885
GPR[EPVS]-1659849840885
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849840886
GPR[SPVAP]-1659849840886
GPR[EPVAP]-1659849842081
GPR[EPVS]-1659849842081
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849842083
GPR[SPVAP]-1659849842083
GPR[EPVAP]-1659849843216
GPR[EPVS]-1659849843216
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849843218
GPR[SPVAP]-1659849843218
GPR[EPVAP]-1659849844340
GPR[EPVS]-1659849844340
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849844341
GPR[SPVAP]-1659849844341
GPR[EPVAP]-1659849845480
GPR[EPVS]-1659849845480
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849845483
GPR[SPVAP]-1659849845483
GPR[EPVAP]-1659849846593
GPR[EPVS]-1659849846593
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849846596
GPR[SPVAP]-1659849846596
GPR[EPVAP]-1659849847740
GPR[EPVS]-1659849847740
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849847742
GPR[SPVAP]-1659849847742
GPR[EPVAP]-1659849848846
GPR[EPVS]-1659849848846
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849848847
GPR[SPVAP]-1659849848847
GPR[EPVAP]-1659849849948
GPR[EPVS]-1659849849948
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849849950
GPR[SPVAP]-1659849849950
GPR[EPVAP]-1659849851083
GPR[EPVS]-1659849851083
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849851086
GPR[SPVAP]-1659849851086
GPR[EPVAP]-1659849852190
GPR[EPVS]-1659849852190
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849852192
GPR[SPVAP]-1659849852192
GPR[EPVAP]-1659849853308
GPR[EPVS]-1659849853308
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849853311
GPR[SPVAP]-1659849853311
GPR[EPVAP]-1659849854429
GPR[EPVS]-1659849854429
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849854432
GPR[SPVAP]-1659849854432
GPR[EPVAP]-1659849855541
GPR[EPVS]-1659849855541
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849855543
GPR[SPVAP]-1659849855543
GPR[EPVAP]-1659849856654
GPR[EPVS]-1659849856654
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849856657
GPR[SPVAP]-1659849856657
GPR[EPVAP]-1659849857767
GPR[EPVS]-1659849857767
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849857769
GPR[SPVAP]-1659849857769
GPR[EPVAP]-1659849858942
GPR[EPVS]-1659849858942
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849858944
GPR[SPVAP]-1659849858944
GPR[EPVAP]-1659849860080
GPR[EPVS]-1659849860080
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849860082
GPR[SPVAP]-1659849860082
GPR[EPVAP]-1659849861197
GPR[EPVS]-1659849861197
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849861198
GPR[SPVAP]-1659849861198
GPR[EPVAP]-1659849862364
GPR[EPVS]-1659849862365
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849862366
GPR[SPVAP]-1659849862366
GPR[EPVAP]-1659849863477
GPR[EPVS]-1659849863477
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849863479
GPR[SPVAP]-1659849863479
GPR[EPVAP]-1659849864595
GPR[EPVS]-1659849864595
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849864597
GPR[SPVAP]-1659849864597
GPR[EPVAP]-1659849865705
GPR[EPVS]-1659849865705
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849865707
GPR[SPVAP]-1659849865707
GPR[EPVAP]-1659849866825
GPR[EPVS]-1659849866825
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849866826
GPR[SPVAP]-1659849866826
GPR[EPVAP]-1659849867934
GPR[EPVS]-1659849867934
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849867935
GPR[SPVAP]-1659849867935
GPR[EPVAP]-1659849869061
GPR[EPVS]-1659849869061
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849869064
GPR[SPVAP]-1659849869064
GPR[EPVAP]-1659849871131
GPR[SPVATF]-1659849871131
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849873157
GPR[EPVS]-1659849873157
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849873159
GPR[SPVAP]-1659849873159
GPR[EPVAP]-1659849874283
GPR[EPVS]-1659849874283
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849874285
GPR[SPVAP]-1659849874285
GPR[EPVAP]-1659849875405
GPR[EPVS]-1659849875405
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849875407
GPR[SPVAP]-1659849875407
GPR[EPVAP]-1659849876546
GPR[EPVS]-1659849876546
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849876550
GPR[SPVAP]-1659849876550
GPR[EPVAP]-1659849877659
GPR[EPVS]-1659849877659
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849877662
GPR[SPVAP]-1659849877662
GPR[EPVAP]-1659849878771
GPR[EPVS]-1659849878771
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849878773
GPR[SPVAP]-1659849878773
GPR[EPVAP]-1659849879884
GPR[EPVS]-1659849879884
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849879886
GPR[SPVAP]-1659849879886
GPR[EPVAP]-1659849881017
GPR[EPVS]-1659849881017
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849881021
GPR[SPVAP]-1659849881021
GPR[EPVAP]-1659849882135
GPR[EPVS]-1659849882135
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849882140
GPR[SPVAP]-1659849882140
GPR[EPVAP]-1659849883245
GPR[EPVS]-1659849883245
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849883248
GPR[SPVAP]-1659849883248
GPR[EPVAP]-1659849884400
GPR[EPVS]-1659849884400
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849884402
GPR[SPVAP]-1659849884402
GPR[EPVAP]-1659849885503
GPR[EPVS]-1659849885503
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849885504
GPR[SPVAP]-1659849885504
GPR[EPVAP]-1659849886619
GPR[EPVS]-1659849886619
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849886620
GPR[SPVAP]-1659849886620
GPR[EPVAP]-1659849887734
GPR[EPVS]-1659849887734
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849887739
GPR[SPVAP]-1659849887739
GPR[EPVAP]-1659849888838
GPR[EPVS]-1659849888838
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849888839
GPR[SPVAP]-1659849888839
GPR[EPVAP]-1659849889989
GPR[EPVS]-1659849889989
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849889990
GPR[SPVAP]-1659849889990
GPR[EPVAP]-1659849891089
GPR[EPVS]-1659849891089
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849891091
GPR[SPVAP]-1659849891091
GPR[EPVAP]-1659849892225
GPR[EPVS]-1659849892225
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659849892227
GPR[SPVAP]-1659849892227
GPR[EPVAP]-1659849893334
GPR[EPVS]-1659849893334
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849893343
GPR[SPVAP]-1659849893343
GPR[EPVAP]-1659849896109
GPR[EPVS]-1659849896109
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849896111
GPR[SPVAP]-1659849896111
GPR[EPVAP]-1659849897213
GPR[EPVS]-1659849897213
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849897214
GPR[SPVAP]-1659849897214
GPR[EPVAP]-1659849898325
GPR[EPVS]-1659849898325
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849898331
GPR[SPVAP]-1659849898331
GPR[EPVAP]-1659849899472
GPR[EPVS]-1659849899472
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849899476
GPR[SPVAP]-1659849899476
GPR[EPVAP]-1659849900573
GPR[EPVS]-1659849900573
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849900574
GPR[SPVAP]-1659849900574
GPR[EPVAP]-1659849901683
GPR[EPVS]-1659849901683
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849901684
GPR[SPVAP]-1659849901684
GPR[EPVAP]-1659849902801
GPR[EPVS]-1659849902801
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849902803
GPR[SPVAP]-1659849902803
GPR[EPVAP]-1659849903936
GPR[EPVS]-1659849903936
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849903942
GPR[SPVAP]-1659849903942
GPR[EPVAP]-1659849905113
GPR[EPVS]-1659849905113
GPR[ESUN]-1659849905113
GPR[SSUN]-1659849905113
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849911830
GPR[SPVAP]-1659849911830
GPR[EPVAP]-1659849918373
GPR[SPVATF]-1659849918373
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849920388
GPR[EPVS]-1659849920388
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849920390
GPR[SPVAP]-1659849920390
GPR[EPVAP]-1659849921527
GPR[EPVS]-1659849921527
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849921528
GPR[SPVAP]-1659849921528
GPR[EPVAP]-1659849922662
GPR[EPVS]-1659849922662
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849922664
GPR[SPVAP]-1659849922664
GPR[EPVAP]-1659849924723
GPR[SPVATF]-1659849924723
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659849927033
GPR[EPVS]-1659849927033
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659849927035
GPR[SPVAP]-1659849927035
GPR[EPVAP]-1659849928155
GPR[EPVS]-1659849928155
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849928157
GPR[SPVAP]-1659849928157
GPR[EPVAP]-1659849929267
GPR[EPVS]-1659849929267
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849929269
GPR[SPVAP]-1659849929269
GPR[EPVAP]-1659849930409
GPR[EPVS]-1659849930409
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849930411
GPR[SPVAP]-1659849930411
GPR[EPVAP]-1659849931517
GPR[EPVS]-1659849931517
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849931519
GPR[SPVAP]-1659849931519
GPR[EPVAP]-1659849932658
GPR[EPVS]-1659849932658
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849932660
GPR[SPVAP]-1659849932660
GPR[EPVAP]-1659849933767
GPR[EPVS]-1659849933767
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849933768
GPR[SPVAP]-1659849933768
GPR[EPVAP]-1659849934867
GPR[EPVS]-1659849934867
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849934869
GPR[SPVAP]-1659849934869
GPR[EPVAP]-1659849935980
GPR[EPVS]-1659849935981
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849935982
GPR[SPVAP]-1659849935982
GPR[EPVAP]-1659849937089
GPR[EPVS]-1659849937089
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849937090
GPR[SPVAP]-1659849937090
GPR[EPVAP]-1659849938224
GPR[EPVS]-1659849938224
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849938225
GPR[SPVAP]-1659849938225
GPR[EPVAP]-1659849939354
GPR[EPVS]-1659849939354
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849939355
GPR[SPVAP]-1659849939355
GPR[EPVAP]-1659849940513
GPR[EPVS]-1659849940513
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849940514
GPR[SPVAP]-1659849940514
GPR[EPVAP]-1659849941649
GPR[EPVS]-1659849941649
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849941650
GPR[SPVAP]-1659849941650
GPR[EPVAP]-1659849942800
GPR[EPVS]-1659849942800
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849942801
GPR[SPVAP]-1659849942801
GPR[EPVAP]-1659849943936
GPR[EPVS]-1659849943936
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849943938
GPR[SPVAP]-1659849943938
GPR[EPVAP]-1659849945081
GPR[EPVS]-1659849945081
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849945083
GPR[SPVAP]-1659849945083
GPR[EPVAP]-1659849946221
GPR[EPVS]-1659849946221
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849946222
GPR[SPVAP]-1659849946222
GPR[EPVAP]-1659849947353
GPR[EPVS]-1659849947353
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849947356
GPR[SPVAP]-1659849947356
GPR[EPVAP]-1659849948484
GPR[EPVS]-1659849948484
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849948485
GPR[SPVAP]-1659849948485
GPR[EPVAP]-1659849949617
GPR[EPVS]-1659849949617
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849949619
GPR[SPVAP]-1659849949619
GPR[EPVAP]-1659849950734
GPR[EPVS]-1659849950734
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659849950736
GPR[SPVAP]-1659849950736
GPR[EPVAP]-1659849951865
GPR[EPVS]-1659849951865
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849951866
GPR[SPVAP]-1659849951866
GPR[EPVAP]-1659849952990
GPR[EPVS]-1659849952990
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849952992
GPR[SPVAP]-1659849952992
GPR[EPVAP]-1659849954161
GPR[EPVS]-1659849954161
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849954163
GPR[SPVAP]-1659849954163
GPR[EPVAP]-1659849955314
GPR[EPVS]-1659849955314
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849955317
GPR[SPVAP]-1659849955317
GPR[EPVAP]-1659849956468
GPR[EPVS]-1659849956468
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849956470
GPR[SPVAP]-1659849956470
GPR[EPVAP]-1659849957594
GPR[EPVS]-1659849957594
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659849957596
GPR[SPVAP]-1659849957596
GPR[EPVAP]-1659849958719
GPR[EPVS]-1659849958719
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849958720
GPR[SPVAP]-1659849958720
GPR[EPVAP]-1659849959841
GPR[EPVS]-1659849959841
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849959842
GPR[SPVAP]-1659849959842
GPR[EPVAP]-1659849960978
GPR[EPVS]-1659849960978
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849960979
GPR[SPVAP]-1659849960979
GPR[EPVAP]-1659849962105
GPR[EPVS]-1659849962105
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849962107
GPR[SPVAP]-1659849962107
GPR[EPVAP]-1659849963241
GPR[EPVS]-1659849963241
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849963242
GPR[SPVAP]-1659849963242
GPR[EPVAP]-1659849964369
GPR[EPVS]-1659849964369
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849964370
GPR[SPVAP]-1659849964370
GPR[EPVAP]-1659849965568
GPR[EPVS]-1659849965568
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849965570
GPR[SPVAP]-1659849965570
GPR[EPVAP]-1659849968155
GPR[EPVS]-1659849968155
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849968157
GPR[SPVAP]-1659849968157
GPR[EPVAP]-1659849969267
GPR[EPVS]-1659849969267
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849969268
GPR[SPVAP]-1659849969268
GPR[EPVAP]-1659849970401
GPR[EPVS]-1659849970401
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849970402
GPR[SPVAP]-1659849970402
GPR[EPVAP]-1659849971527
GPR[EPVS]-1659849971527
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849971528
GPR[SPVAP]-1659849971528
GPR[EPVAP]-1659849972640
GPR[EPVS]-1659849972640
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849972642
GPR[SPVAP]-1659849972642
GPR[EPVAP]-1659849973756
GPR[EPVS]-1659849973756
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849973757
GPR[SPVAP]-1659849973757
GPR[EPVAP]-1659849974863
GPR[EPVS]-1659849974864
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849974865
GPR[SPVAP]-1659849974865
GPR[EPVAP]-1659849975989
GPR[EPVS]-1659849975989
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849975991
GPR[SPVAP]-1659849975991
GPR[EPVAP]-1659849977105
GPR[EPVS]-1659849977105
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849977107
GPR[SPVAP]-1659849977107
GPR[EPVAP]-1659849978213
GPR[EPVS]-1659849978213
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849978218
GPR[SPVAP]-1659849978218
GPR[EPVAP]-1659849979340
GPR[EPVS]-1659849979340
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849979342
GPR[SPVAP]-1659849979342
GPR[EPVAP]-1659849980475
GPR[EPVS]-1659849980475
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849980477
GPR[SPVAP]-1659849980477
GPR[EPVAP]-1659849981580
GPR[EPVS]-1659849981580
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849981582
GPR[SPVAP]-1659849981582
GPR[EPVAP]-1659849982697
GPR[EPVS]-1659849982697
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849982699
GPR[SPVAP]-1659849982699
GPR[EPVAP]-1659849983797
GPR[EPVS]-1659849983797
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849983801
GPR[SPVAP]-1659849983801
GPR[EPVAP]-1659849984920
GPR[EPVS]-1659849984920
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849984921
GPR[SPVAP]-1659849984921
GPR[EPVAP]-1659849986040
GPR[EPVS]-1659849986040
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849986042
GPR[SPVAP]-1659849986042
GPR[EPVAP]-1659849987155
GPR[EPVS]-1659849987155
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849987157
GPR[SPVAP]-1659849987157
GPR[EPVAP]-1659849988312
GPR[EPVS]-1659849988312
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849988315
GPR[SPVAP]-1659849988315
GPR[EPVAP]-1659849989427
GPR[EPVS]-1659849989427
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849989429
GPR[SPVAP]-1659849989429
GPR[EPVAP]-1659849990531
GPR[EPVS]-1659849990531
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849990533
GPR[SPVAP]-1659849990533
GPR[EPVAP]-1659849991639
GPR[EPVS]-1659849991639
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849991641
GPR[SPVAP]-1659849991641
GPR[EPVAP]-1659849992749
GPR[EPVS]-1659849992749
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849992751
GPR[SPVAP]-1659849992751
GPR[EPVAP]-1659849993876
GPR[EPVS]-1659849993876
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849993879
GPR[SPVAP]-1659849993879
GPR[EPVAP]-1659849994999
GPR[EPVS]-1659849994999
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849995001
GPR[SPVAP]-1659849995001
GPR[EPVAP]-1659849996143
GPR[EPVS]-1659849996143
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849996145
GPR[SPVAP]-1659849996145
GPR[EPVAP]-1659849997260
GPR[EPVS]-1659849997260
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849997262
GPR[SPVAP]-1659849997262
GPR[EPVAP]-1659849998367
GPR[EPVS]-1659849998367
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849998369
GPR[SPVAP]-1659849998369
GPR[EPVAP]-1659849999469
GPR[EPVS]-1659849999469
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659849999471
GPR[SPVAP]-1659849999471
GPR[EPVAP]-1659850000567
GPR[EPVS]-1659850000567
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850000569
GPR[SPVAP]-1659850000569
GPR[EPVAP]-1659850001711
GPR[EPVS]-1659850001711
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850001714
GPR[SPVAP]-1659850001714
GPR[EPVAP]-1659850002828
GPR[EPVS]-1659850002828
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850002830
GPR[SPVAP]-1659850002830
GPR[EPVAP]-1659850003943
GPR[EPVS]-1659850003943
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850003944
GPR[SPVAP]-1659850003944
GPR[EPVAP]-1659850005049
GPR[EPVS]-1659850005049
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850005050
GPR[SPVAP]-1659850005050
GPR[EPVAP]-1659850006184
GPR[EPVS]-1659850006184
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850006186
GPR[SPVAP]-1659850006186
GPR[EPVAP]-1659850007298
GPR[EPVS]-1659850007298
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850007299
GPR[SPVAP]-1659850007299
GPR[EPVAP]-1659850008417
GPR[EPVS]-1659850008417
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850008420
GPR[SPVAP]-1659850008420
GPR[EPVAP]-1659850010493
GPR[SPVATF]-1659850010493
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850012535
GPR[EPVS]-1659850012535
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850012537
GPR[SPVAP]-1659850012537
GPR[EPVAP]-1659850013659
GPR[EPVS]-1659850013659
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850013661
GPR[SPVAP]-1659850013661
GPR[EPVAP]-1659850014777
GPR[EPVS]-1659850014777
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850014779
GPR[SPVAP]-1659850014779
GPR[EPVAP]-1659850015889
GPR[EPVS]-1659850015889
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850015890
GPR[SPVAP]-1659850015890
GPR[EPVAP]-1659850016997
GPR[EPVS]-1659850016997
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850016999
GPR[SPVAP]-1659850016999
GPR[EPVAP]-1659850018102
GPR[EPVS]-1659850018102
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850018104
GPR[SPVAP]-1659850018104
GPR[EPVAP]-1659850019255
GPR[EPVS]-1659850019255
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850019256
GPR[SPVAP]-1659850019256
GPR[EPVAP]-1659850020374
GPR[EPVS]-1659850020374
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850020375
GPR[SPVAP]-1659850020375
GPR[EPVAP]-1659850021497
GPR[EPVS]-1659850021497
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850021498
GPR[SPVAP]-1659850021498
GPR[EPVAP]-1659850022625
GPR[EPVS]-1659850022625
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850022627
GPR[SPVAP]-1659850022627
GPR[EPVAP]-1659850023758
GPR[EPVS]-1659850023758
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850023760
GPR[SPVAP]-1659850023760
GPR[EPVAP]-1659850024875
GPR[EPVS]-1659850024875
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850024877
GPR[SPVAP]-1659850024877
GPR[EPVAP]-1659850026030
GPR[EPVS]-1659850026030
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850026035
GPR[SPVAP]-1659850026035
GPR[EPVAP]-1659850027144
GPR[EPVS]-1659850027144
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850027146
GPR[SPVAP]-1659850027146
GPR[EPVAP]-1659850028254
GPR[EPVS]-1659850028254
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850028256
GPR[SPVAP]-1659850028256
GPR[EPVAP]-1659850029391
GPR[EPVS]-1659850029391
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850029393
GPR[SPVAP]-1659850029393
GPR[EPVAP]-1659850030531
GPR[EPVS]-1659850030531
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850030533
GPR[SPVAP]-1659850030533
GPR[EPVAP]-1659850031647
GPR[EPVS]-1659850031647
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850031649
GPR[SPVAP]-1659850031649
GPR[EPVAP]-1659850032754
GPR[EPVS]-1659850032754
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850032756
GPR[SPVAP]-1659850032756
GPR[EPVAP]-1659850033896
GPR[EPVS]-1659850033896
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850033898
GPR[SPVAP]-1659850033898
GPR[EPVAP]-1659850035013
GPR[EPVS]-1659850035013
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850035015
GPR[SPVAP]-1659850035015
GPR[EPVAP]-1659850036137
GPR[EPVS]-1659850036137
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850036139
GPR[SPVAP]-1659850036139
GPR[EPVAP]-1659850037289
GPR[EPVS]-1659850037289
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850037291
GPR[SPVAP]-1659850037291
GPR[EPVAP]-1659850039980
GPR[EPVS]-1659850039980
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850039982
GPR[SPVAP]-1659850039982
GPR[EPVAP]-1659850041107
GPR[EPVS]-1659850041107
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850041109
GPR[SPVAP]-1659850041109
GPR[EPVAP]-1659850042225
GPR[EPVS]-1659850042225
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850042227
GPR[SPVAP]-1659850042227
GPR[EPVAP]-1659850043377
GPR[EPVS]-1659850043377
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850043381
GPR[SPVAP]-1659850043381
GPR[EPVAP]-1659850044508
GPR[EPVS]-1659850044508
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659850044511
GPR[SPVAP]-1659850044511
GPR[EPVAP]-1659850045623
GPR[EPVS]-1659850045623
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659850045625
GPR[SPVAP]-1659850045625
GPR[EPVAP]-1659850046744
GPR[EPVS]-1659850046744
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659850046746
GPR[SPVAP]-1659850046746
GPR[EPVAP]-1659850047876
GPR[EPVS]-1659850047876
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850047878
GPR[SPVAP]-1659850047878
GPR[EPVAP]-1659850049001
GPR[EPVS]-1659850049001
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850049003
GPR[SPVAP]-1659850049003
GPR[EPVAP]-1659850050110
GPR[EPVS]-1659850050110
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850050112
GPR[SPVAP]-1659850050112
GPR[EPVAP]-1659850051259
GPR[EPVS]-1659850051260
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850051261
GPR[SPVAP]-1659850051261
GPR[EPVAP]-1659850052370
GPR[EPVS]-1659850052370
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850052371
GPR[SPVAP]-1659850052371
GPR[EPVAP]-1659850053493
GPR[EPVS]-1659850053493
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850053494
GPR[SPVAP]-1659850053494
GPR[EPVAP]-1659850054601
GPR[EPVS]-1659850054601
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850054607
GPR[SPVAP]-1659850054607
GPR[EPVAP]-1659850055721
GPR[EPVS]-1659850055721
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850055723
GPR[SPVAP]-1659850055723
GPR[EPVAP]-1659850056846
GPR[EPVS]-1659850056846
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850056850
GPR[SPVAP]-1659850056850
GPR[EPVAP]-1659850057972
GPR[EPVS]-1659850057972
GPR[ESUN]-1659850057973
GPR[SSUN]-1659850057973
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659850058787
GPR[SSUN]-1659850058787
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850065554
GPR[SPVAP]-1659850065554
GPR[EPVAP]-1659850072162
GPR[SPVATF]-1659850072162
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850074180
GPR[EPVS]-1659850074180
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850074182
GPR[SPVAP]-1659850074182
GPR[EPVAP]-1659850075304
GPR[EPVS]-1659850075304
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850075306
GPR[SPVAP]-1659850075306
GPR[EPVAP]-1659850077447
GPR[SPVATF]-1659850077447
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850079797
GPR[EPVS]-1659850079797
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850079798
GPR[SPVAP]-1659850079798
GPR[EPVAP]-1659850080955
GPR[EPVS]-1659850080955
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850080956
GPR[SPVAP]-1659850080956
GPR[EPVAP]-1659850082089
GPR[EPVS]-1659850082089
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850082090
GPR[SPVAP]-1659850082090
GPR[EPVAP]-1659850083190
GPR[EPVS]-1659850083190
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850083192
GPR[SPVAP]-1659850083192
GPR[EPVAP]-1659850084295
GPR[EPVS]-1659850084295
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850084296
GPR[SPVAP]-1659850084296
GPR[EPVAP]-1659850085410
GPR[EPVS]-1659850085410
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850085412
GPR[SPVAP]-1659850085412
GPR[EPVAP]-1659850086532
GPR[EPVS]-1659850086532
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850086534
GPR[SPVAP]-1659850086534
GPR[EPVAP]-1659850087652
GPR[EPVS]-1659850087652
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850087655
GPR[SPVAP]-1659850087655
GPR[EPVAP]-1659850088772
GPR[EPVS]-1659850088772
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850088774
GPR[SPVAP]-1659850088774
GPR[EPVAP]-1659850089888
GPR[EPVS]-1659850089888
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850089890
GPR[SPVAP]-1659850089890
GPR[EPVAP]-1659850091059
GPR[EPVS]-1659850091059
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850091060
GPR[SPVAP]-1659850091060
GPR[EPVAP]-1659850092170
GPR[EPVS]-1659850092170
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850092172
GPR[SPVAP]-1659850092172
GPR[EPVAP]-1659850093326
GPR[EPVS]-1659850093326
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850093328
GPR[SPVAP]-1659850093328
GPR[EPVAP]-1659850094456
GPR[EPVS]-1659850094456
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850094457
GPR[SPVAP]-1659850094457
GPR[EPVAP]-1659850095577
GPR[EPVS]-1659850095577
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850095579
GPR[SPVAP]-1659850095579
GPR[EPVAP]-1659850096708
GPR[EPVS]-1659850096708
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850096709
GPR[SPVAP]-1659850096709
GPR[EPVAP]-1659850097864
GPR[EPVS]-1659850097864
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850097865
GPR[SPVAP]-1659850097865
GPR[EPVAP]-1659850098981
GPR[EPVS]-1659850098981
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850098983
GPR[SPVAP]-1659850098983
GPR[EPVAP]-1659850100144
GPR[EPVS]-1659850100144
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850100146
GPR[SPVAP]-1659850100146
GPR[EPVAP]-1659850101280
GPR[EPVS]-1659850101280
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850101282
GPR[SPVAP]-1659850101282
GPR[EPVAP]-1659850102397
GPR[EPVS]-1659850102397
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850102399
GPR[SPVAP]-1659850102399
GPR[EPVAP]-1659850103512
GPR[EPVS]-1659850103512
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850103514
GPR[SPVAP]-1659850103514
GPR[EPVAP]-1659850104652
GPR[EPVS]-1659850104652
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850104654
GPR[SPVAP]-1659850104654
GPR[EPVAP]-1659850105794
GPR[EPVS]-1659850105794
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850105796
GPR[SPVAP]-1659850105796
GPR[EPVAP]-1659850106904
GPR[EPVS]-1659850106904
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850106906
GPR[SPVAP]-1659850106906
GPR[EPVAP]-1659850108014
GPR[EPVS]-1659850108015
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850108017
GPR[SPVAP]-1659850108017
GPR[EPVAP]-1659850109124
GPR[EPVS]-1659850109124
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850109126
GPR[SPVAP]-1659850109126
GPR[EPVAP]-1659850111690
GPR[EPVS]-1659850111690
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850111699
GPR[SPVAP]-1659850111699
GPR[EPVAP]-1659850112893
GPR[EPVS]-1659850112893
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850112894
GPR[SPVAP]-1659850112894
GPR[EPVAP]-1659850114015
GPR[EPVS]-1659850114015
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850114017
GPR[SPVAP]-1659850114017
GPR[EPVAP]-1659850115149
GPR[EPVS]-1659850115149
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850115151
GPR[SPVAP]-1659850115151
GPR[EPVAP]-1659850116259
GPR[EPVS]-1659850116259
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850116260
GPR[SPVAP]-1659850116260
GPR[EPVAP]-1659850117421
GPR[EPVS]-1659850117421
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850117422
GPR[SPVAP]-1659850117422
GPR[EPVAP]-1659850118560
GPR[EPVS]-1659850118560
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850118562
GPR[SPVAP]-1659850118562
GPR[EPVAP]-1659850119675
GPR[EPVS]-1659850119675
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850119677
GPR[SPVAP]-1659850119677
GPR[EPVAP]-1659850120804
GPR[EPVS]-1659850120804
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850120807
GPR[SPVAP]-1659850120807
GPR[EPVAP]-1659850121921
GPR[EPVS]-1659850121921
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850121923
GPR[SPVAP]-1659850121923
GPR[EPVAP]-1659850123077
GPR[EPVS]-1659850123077
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850123079
GPR[SPVAP]-1659850123079
GPR[EPVAP]-1659850124198
GPR[EPVS]-1659850124198
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850124200
GPR[SPVAP]-1659850124200
GPR[EPVAP]-1659850125312
GPR[EPVS]-1659850125312
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850125314
GPR[SPVAP]-1659850125314
GPR[EPVAP]-1659850126431
GPR[EPVS]-1659850126431
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850126432
GPR[SPVAP]-1659850126432
GPR[EPVAP]-1659850127535
GPR[EPVS]-1659850127535
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850127537
GPR[SPVAP]-1659850127537
GPR[EPVAP]-1659850128673
GPR[EPVS]-1659850128673
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850128674
GPR[SPVAP]-1659850128674
GPR[EPVAP]-1659850129781
GPR[EPVS]-1659850129781
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850129782
GPR[SPVAP]-1659850129782
GPR[EPVAP]-1659850130898
GPR[EPVS]-1659850130898
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850130902
GPR[SPVAP]-1659850130902
GPR[EPVAP]-1659850132054
GPR[EPVS]-1659850132054
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850132056
GPR[SPVAP]-1659850132056
GPR[EPVAP]-1659850133177
GPR[EPVS]-1659850133177
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850133178
GPR[SPVAP]-1659850133178
GPR[EPVAP]-1659850134289
GPR[EPVS]-1659850134289
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850134290
GPR[SPVAP]-1659850134290
GPR[EPVAP]-1659850135404
GPR[EPVS]-1659850135404
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850135406
GPR[SPVAP]-1659850135406
GPR[EPVAP]-1659850136517
GPR[EPVS]-1659850136517
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850136520
GPR[SPVAP]-1659850136520
GPR[EPVAP]-1659850137648
GPR[EPVS]-1659850137648
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850137649
GPR[SPVAP]-1659850137649
GPR[EPVAP]-1659850138768
GPR[EPVS]-1659850138768
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850138773
GPR[SPVAP]-1659850138773
GPR[EPVAP]-1659850139915
GPR[EPVS]-1659850139915
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850139919
GPR[SPVAP]-1659850139919
GPR[EPVAP]-1659850141029
GPR[EPVS]-1659850141029
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850141031
GPR[SPVAP]-1659850141031
GPR[EPVAP]-1659850142148
GPR[EPVS]-1659850142148
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850142149
GPR[SPVAP]-1659850142149
GPR[EPVAP]-1659850143253
GPR[EPVS]-1659850143253
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850143256
GPR[SPVAP]-1659850143256
GPR[EPVAP]-1659850144401
GPR[EPVS]-1659850144401
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850144406
GPR[SPVAP]-1659850144406
GPR[EPVAP]-1659850145549
GPR[EPVS]-1659850145549
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850145551
GPR[SPVAP]-1659850145551
GPR[EPVAP]-1659850146683
GPR[EPVS]-1659850146683
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850146686
GPR[SPVAP]-1659850146686
GPR[EPVAP]-1659850147801
GPR[EPVS]-1659850147801
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850147803
GPR[SPVAP]-1659850147803
GPR[EPVAP]-1659850148928
GPR[EPVS]-1659850148929
GPR[ESUN]-1659850148929
GPR[SSUN]-1659850148929
GPR[ESUN]-1659850148929
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659850149986
GPR[EFL]-1659850149989
GPR[SFP]-1659850149989
TIMEOUT : 600000
GPR[SSUN]-1659850149993
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659850152003
GPR[SPVAP]-1659850152003
GPR[EPVAP]-1659850158627
GPR[SPVATF]-1659850158627
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 0
GPR[EPVATF]-1659850160834
GPR[SPVATR]-1659850160835
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659850227710
GPR[EPVS]-1659850227710
GPR[PF]-1659850227710
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/15/patch_77723_1_ts_1659850227710.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM353043541932556280/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/15/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/15/patch_77723_1_ts_1659850227710.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659850227718
GPR[SPVAP]-1659850227718
GPR[EPVAP]-1659850229717
GPR[SPVATF]-1659850229717
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850231835
GPR[EPVS]-1659850231835
GPR[ESUN]-1659850231836
GPR[SSUN]-1659850231836
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850234287
GPR[SPVAP]-1659850234287
GPR[EPVAP]-1659850240901
GPR[SPVATF]-1659850240901
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850243137
GPR[EPVS]-1659850243137
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850243139
GPR[SPVAP]-1659850243139
GPR[EPVAP]-1659850245259
GPR[SPVATF]-1659850245259
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850247370
GPR[EPVS]-1659850247370
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850247371
GPR[SPVAP]-1659850247371
GPR[EPVAP]-1659850249494
GPR[SPVATF]-1659850249494
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850251666
GPR[EPVS]-1659850251666
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850251667
GPR[SPVAP]-1659850251667
GPR[EPVAP]-1659850253722
GPR[SPVATF]-1659850253722
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850255871
GPR[EPVS]-1659850255871
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850255873
GPR[SPVAP]-1659850255873
GPR[EPVAP]-1659850259629
GPR[SPVATF]-1659850259629
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850261788
GPR[EPVS]-1659850261788
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850261790
GPR[SPVAP]-1659850261790
GPR[EPVAP]-1659850263855
GPR[SPVATF]-1659850263855
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850265981
GPR[EPVS]-1659850265981
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850265983
GPR[SPVAP]-1659850265983
GPR[EPVAP]-1659850268044
GPR[SPVATF]-1659850268044
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850270200
GPR[EPVS]-1659850270200
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850270202
GPR[SPVAP]-1659850270202
GPR[EPVAP]-1659850272260
GPR[SPVATF]-1659850272260
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850274424
GPR[EPVS]-1659850274424
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850274425
GPR[SPVAP]-1659850274425
GPR[EPVAP]-1659850276491
GPR[SPVATF]-1659850276491
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850278618
GPR[EPVS]-1659850278618
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850278620
GPR[SPVAP]-1659850278620
GPR[EPVAP]-1659850280715
GPR[SPVATF]-1659850280715
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850282872
GPR[EPVS]-1659850282872
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850282873
GPR[SPVAP]-1659850282873
GPR[EPVAP]-1659850284928
GPR[SPVATF]-1659850284928
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850287077
GPR[EPVS]-1659850287077
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850287080
GPR[SPVAP]-1659850287080
GPR[EPVAP]-1659850289157
GPR[SPVATF]-1659850289157
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850291264
GPR[EPVS]-1659850291264
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850291266
GPR[SPVAP]-1659850291266
GPR[EPVAP]-1659850293325
GPR[SPVATF]-1659850293325
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850295462
GPR[EPVS]-1659850295462
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850295463
GPR[SPVAP]-1659850295463
GPR[EPVAP]-1659850297517
GPR[SPVATF]-1659850297517
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850299684
GPR[EPVS]-1659850299684
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850299686
GPR[SPVAP]-1659850299686
GPR[EPVAP]-1659850301714
GPR[SPVATF]-1659850301714
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850303854
GPR[EPVS]-1659850303854
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850303855
GPR[SPVAP]-1659850303856
GPR[EPVAP]-1659850305940
GPR[SPVATF]-1659850305940
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850308129
GPR[EPVS]-1659850308129
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850308130
GPR[SPVAP]-1659850308130
GPR[EPVAP]-1659850310175
GPR[SPVATF]-1659850310175
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850312306
GPR[EPVS]-1659850312306
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850312307
GPR[SPVAP]-1659850312307
GPR[EPVAP]-1659850314337
GPR[SPVATF]-1659850314337
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850316486
GPR[EPVS]-1659850316486
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850316488
GPR[SPVAP]-1659850316488
GPR[EPVAP]-1659850318529
GPR[SPVATF]-1659850318529
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850320677
GPR[EPVS]-1659850320677
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850320679
GPR[SPVAP]-1659850320679
GPR[EPVAP]-1659850322740
GPR[SPVATF]-1659850322740
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850324853
GPR[EPVS]-1659850324853
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850324855
GPR[SPVAP]-1659850324855
GPR[EPVAP]-1659850326905
GPR[SPVATF]-1659850326905
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850329041
GPR[EPVS]-1659850329041
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850329043
GPR[SPVAP]-1659850329043
GPR[EPVAP]-1659850332854
GPR[SPVATF]-1659850332854
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850335037
GPR[EPVS]-1659850335037
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850335039
GPR[SPVAP]-1659850335039
GPR[EPVAP]-1659850337100
GPR[SPVATF]-1659850337100
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850339282
GPR[EPVS]-1659850339282
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850339283
GPR[SPVAP]-1659850339283
GPR[EPVAP]-1659850341311
GPR[SPVATF]-1659850341311
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850343489
GPR[EPVS]-1659850343489
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850343491
GPR[SPVAP]-1659850343491
GPR[EPVAP]-1659850345544
GPR[SPVATF]-1659850345544
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850347681
GPR[EPVS]-1659850347681
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850347682
GPR[SPVAP]-1659850347682
GPR[EPVAP]-1659850349751
GPR[SPVATF]-1659850349751
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850351924
GPR[EPVS]-1659850351924
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850351925
GPR[SPVAP]-1659850351925
GPR[EPVAP]-1659850354007
GPR[SPVATF]-1659850354007
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850356166
GPR[EPVS]-1659850356166
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850356168
GPR[SPVAP]-1659850356168
GPR[EPVAP]-1659850358249
GPR[SPVATF]-1659850358249
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850360390
GPR[EPVS]-1659850360390
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850360392
GPR[SPVAP]-1659850360392
GPR[EPVAP]-1659850362444
GPR[SPVATF]-1659850362444
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850364670
GPR[EPVS]-1659850364670
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850364672
GPR[SPVAP]-1659850364672
GPR[EPVAP]-1659850366728
GPR[SPVATF]-1659850366728
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850368869
GPR[EPVS]-1659850368869
GPR[ESUN]-1659850368870
GPR[SSUN]-1659850368870
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850376148
GPR[SPVAP]-1659850376148
GPR[EPVAP]-1659850382717
GPR[SPVATF]-1659850382717
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850384739
GPR[EPVS]-1659850384739
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659850384740
GPR[SPVAP]-1659850384740
GPR[EPVAP]-1659850385885
GPR[EPVS]-1659850385885
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850385887
GPR[SPVAP]-1659850385887
GPR[EPVAP]-1659850387005
GPR[EPVS]-1659850387005
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850387007
GPR[SPVAP]-1659850387007
GPR[EPVAP]-1659850388130
GPR[EPVS]-1659850388130
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850388132
GPR[SPVAP]-1659850388132
GPR[EPVAP]-1659850389257
GPR[EPVS]-1659850389257
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850389258
GPR[SPVAP]-1659850389258
GPR[EPVAP]-1659850390393
GPR[EPVS]-1659850390393
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850390395
GPR[SPVAP]-1659850390395
GPR[EPVAP]-1659850391541
GPR[EPVS]-1659850391541
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850391545
GPR[SPVAP]-1659850391545
GPR[EPVAP]-1659850393652
GPR[SPVATF]-1659850393652
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850395828
GPR[EPVS]-1659850395828
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850395830
GPR[SPVAP]-1659850395830
GPR[EPVAP]-1659850396943
GPR[EPVS]-1659850396943
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850396944
GPR[SPVAP]-1659850396944
GPR[EPVAP]-1659850398057
GPR[EPVS]-1659850398057
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850398058
GPR[SPVAP]-1659850398058
GPR[EPVAP]-1659850399171
GPR[EPVS]-1659850399171
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850399172
GPR[SPVAP]-1659850399172
GPR[EPVAP]-1659850400295
GPR[EPVS]-1659850400295
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850400297
GPR[SPVAP]-1659850400297
GPR[EPVAP]-1659850401406
GPR[EPVS]-1659850401406
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850401407
GPR[SPVAP]-1659850401407
GPR[EPVAP]-1659850404617
GPR[EPVS]-1659850404617
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850404619
GPR[SPVAP]-1659850404619
GPR[EPVAP]-1659850405774
GPR[EPVS]-1659850405774
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850405775
GPR[SPVAP]-1659850405775
GPR[EPVAP]-1659850406918
GPR[EPVS]-1659850406918
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850406920
GPR[SPVAP]-1659850406920
GPR[EPVAP]-1659850408062
GPR[EPVS]-1659850408062
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850408064
GPR[SPVAP]-1659850408064
GPR[EPVAP]-1659850409169
GPR[EPVS]-1659850409169
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850409170
GPR[SPVAP]-1659850409170
GPR[EPVAP]-1659850410309
GPR[EPVS]-1659850410309
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850410312
GPR[SPVAP]-1659850410312
GPR[EPVAP]-1659850411436
GPR[EPVS]-1659850411436
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850412115
GPR[SPVAP]-1659850412115
GPR[EPVAP]-1659850413261
GPR[EPVS]-1659850413261
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850413263
GPR[SPVAP]-1659850413263
GPR[EPVAP]-1659850415338
GPR[SPVATF]-1659850415338
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850417378
GPR[EPVS]-1659850417378
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659850417380
GPR[SPVAP]-1659850417380
GPR[EPVAP]-1659850418495
GPR[EPVS]-1659850418495
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850418497
GPR[SPVAP]-1659850418497
GPR[EPVAP]-1659850419595
GPR[EPVS]-1659850419595
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850419598
GPR[SPVAP]-1659850419598
GPR[EPVAP]-1659850420697
GPR[EPVS]-1659850420697
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850420700
GPR[SPVAP]-1659850420700
GPR[EPVAP]-1659850421804
GPR[EPVS]-1659850421804
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850421806
GPR[SPVAP]-1659850421806
GPR[EPVAP]-1659850422938
GPR[EPVS]-1659850422938
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850422939
GPR[SPVAP]-1659850422939
GPR[EPVAP]-1659850424065
GPR[EPVS]-1659850424065
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850424066
GPR[SPVAP]-1659850424066
GPR[EPVAP]-1659850425184
GPR[EPVS]-1659850425184
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850425185
GPR[SPVAP]-1659850425185
GPR[EPVAP]-1659850426300
GPR[EPVS]-1659850426301
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850426302
GPR[SPVAP]-1659850426302
GPR[EPVAP]-1659850427428
GPR[EPVS]-1659850427428
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850427430
GPR[SPVAP]-1659850427430
GPR[EPVAP]-1659850428581
GPR[EPVS]-1659850428581
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850428583
GPR[SPVAP]-1659850428583
GPR[EPVAP]-1659850429711
GPR[EPVS]-1659850429711
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850429714
GPR[SPVAP]-1659850429714
GPR[EPVAP]-1659850430838
GPR[EPVS]-1659850430838
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850430839
GPR[SPVAP]-1659850430839
GPR[EPVAP]-1659850432896
GPR[SPVATF]-1659850432896
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850434893
GPR[EPVS]-1659850434893
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850434894
GPR[SPVAP]-1659850434894
GPR[EPVAP]-1659850435998
GPR[EPVS]-1659850435998
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850436000
GPR[SPVAP]-1659850436000
GPR[EPVAP]-1659850437139
GPR[EPVS]-1659850437139
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850437140
GPR[SPVAP]-1659850437140
GPR[EPVAP]-1659850438249
GPR[EPVS]-1659850438249
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850438251
GPR[SPVAP]-1659850438251
GPR[EPVAP]-1659850439357
GPR[EPVS]-1659850439357
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850439358
GPR[SPVAP]-1659850439358
GPR[EPVAP]-1659850440486
GPR[EPVS]-1659850440486
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850440487
GPR[SPVAP]-1659850440487
GPR[EPVAP]-1659850441590
GPR[EPVS]-1659850441590
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850441591
GPR[SPVAP]-1659850441591
GPR[EPVAP]-1659850442727
GPR[EPVS]-1659850442727
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850442730
GPR[SPVAP]-1659850442730
GPR[EPVAP]-1659850443840
GPR[EPVS]-1659850443840
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850443843
GPR[SPVAP]-1659850443843
GPR[EPVAP]-1659850444958
GPR[EPVS]-1659850444959
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850444960
GPR[SPVAP]-1659850444960
GPR[EPVAP]-1659850446075
GPR[EPVS]-1659850446075
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850446077
GPR[SPVAP]-1659850446077
GPR[EPVAP]-1659850447203
GPR[EPVS]-1659850447203
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850447204
GPR[SPVAP]-1659850447204
GPR[EPVAP]-1659850448351
GPR[EPVS]-1659850448351
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850448353
GPR[SPVAP]-1659850448353
GPR[EPVAP]-1659850449481
GPR[EPVS]-1659850449481
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850449482
GPR[SPVAP]-1659850449482
GPR[EPVAP]-1659850450604
GPR[EPVS]-1659850450604
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850450607
GPR[SPVAP]-1659850450607
GPR[EPVAP]-1659850451734
GPR[EPVS]-1659850451735
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850451738
GPR[SPVAP]-1659850451738
GPR[EPVAP]-1659850452854
GPR[EPVS]-1659850452854
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850452855
GPR[SPVAP]-1659850452855
GPR[EPVAP]-1659850453978
GPR[EPVS]-1659850453978
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850453980
GPR[SPVAP]-1659850453980
GPR[EPVAP]-1659850455104
GPR[EPVS]-1659850455104
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850455106
GPR[SPVAP]-1659850455106
GPR[EPVAP]-1659850456220
GPR[EPVS]-1659850456220
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850456222
GPR[SPVAP]-1659850456222
GPR[EPVAP]-1659850457325
GPR[EPVS]-1659850457325
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850457326
GPR[SPVAP]-1659850457326
GPR[EPVAP]-1659850458427
GPR[EPVS]-1659850458427
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850458429
GPR[SPVAP]-1659850458429
GPR[EPVAP]-1659850459551
GPR[EPVS]-1659850459551
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850459552
GPR[SPVAP]-1659850459552
GPR[EPVAP]-1659850460670
GPR[EPVS]-1659850460670
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850460671
GPR[SPVAP]-1659850460671
GPR[EPVAP]-1659850461787
GPR[EPVS]-1659850461787
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850461788
GPR[SPVAP]-1659850461788
GPR[EPVAP]-1659850462908
GPR[EPVS]-1659850462908
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850462909
GPR[SPVAP]-1659850462910
GPR[EPVAP]-1659850464069
GPR[EPVS]-1659850464069
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850464071
GPR[SPVAP]-1659850464071
GPR[EPVAP]-1659850465185
GPR[EPVS]-1659850465185
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850465190
GPR[SPVAP]-1659850465190
GPR[EPVAP]-1659850466315
GPR[EPVS]-1659850466315
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850466318
GPR[SPVAP]-1659850466318
GPR[EPVAP]-1659850468396
GPR[SPVATF]-1659850468396
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850470445
GPR[EPVS]-1659850470445
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850470447
GPR[SPVAP]-1659850470447
GPR[EPVAP]-1659850471603
GPR[EPVS]-1659850471603
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850471605
GPR[SPVAP]-1659850471605
GPR[EPVAP]-1659850472719
GPR[EPVS]-1659850472719
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850472721
GPR[SPVAP]-1659850472721
GPR[EPVAP]-1659850473825
GPR[EPVS]-1659850473825
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850473829
GPR[SPVAP]-1659850473829
GPR[EPVAP]-1659850474952
GPR[EPVS]-1659850474952
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850474955
GPR[SPVAP]-1659850474955
GPR[EPVAP]-1659850476068
GPR[EPVS]-1659850476068
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850476070
GPR[SPVAP]-1659850476070
GPR[EPVAP]-1659850479223
GPR[EPVS]-1659850479223
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850479225
GPR[SPVAP]-1659850479225
GPR[EPVAP]-1659850480372
GPR[EPVS]-1659850480372
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850480376
GPR[SPVAP]-1659850480376
GPR[EPVAP]-1659850481493
GPR[EPVS]-1659850481493
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850481498
GPR[SPVAP]-1659850481498
GPR[EPVAP]-1659850482612
GPR[EPVS]-1659850482612
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850482615
GPR[SPVAP]-1659850482615
GPR[EPVAP]-1659850483747
GPR[EPVS]-1659850483747
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850483750
GPR[SPVAP]-1659850483750
GPR[EPVAP]-1659850484902
GPR[EPVS]-1659850484902
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850484904
GPR[SPVAP]-1659850484904
GPR[EPVAP]-1659850486023
GPR[EPVS]-1659850486023
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850486024
GPR[SPVAP]-1659850486024
GPR[EPVAP]-1659850487159
GPR[EPVS]-1659850487159
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850487163
GPR[SPVAP]-1659850487163
GPR[EPVAP]-1659850488290
GPR[EPVS]-1659850488290
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850488292
GPR[SPVAP]-1659850488292
GPR[EPVAP]-1659850489438
GPR[EPVS]-1659850489438
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850489439
GPR[SPVAP]-1659850489439
GPR[EPVAP]-1659850490549
GPR[EPVS]-1659850490549
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850490550
GPR[SPVAP]-1659850490550
GPR[EPVAP]-1659850491744
GPR[EPVS]-1659850491744
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659850491746
GPR[SPVAP]-1659850491746
GPR[EPVAP]-1659850492864
GPR[EPVS]-1659850492864
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850492867
GPR[SPVAP]-1659850492867
GPR[EPVAP]-1659850493990
GPR[EPVS]-1659850493990
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850493991
GPR[SPVAP]-1659850493991
GPR[EPVAP]-1659850495105
GPR[EPVS]-1659850495105
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850495107
GPR[SPVAP]-1659850495107
GPR[EPVAP]-1659850496220
GPR[EPVS]-1659850496220
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850496226
GPR[SPVAP]-1659850496226
GPR[EPVAP]-1659850497342
GPR[EPVS]-1659850497342
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850497346
GPR[SPVAP]-1659850497346
GPR[EPVAP]-1659850498461
GPR[EPVS]-1659850498461
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850498462
GPR[SPVAP]-1659850498462
GPR[EPVAP]-1659850499584
GPR[EPVS]-1659850499584
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850499585
GPR[SPVAP]-1659850499585
GPR[EPVAP]-1659850500712
GPR[EPVS]-1659850500712
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850500714
GPR[SPVAP]-1659850500714
GPR[EPVAP]-1659850501807
GPR[EPVS]-1659850501807
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850501814
GPR[SPVAP]-1659850501814
GPR[EPVAP]-1659850502959
GPR[EPVS]-1659850502959
GPR[ESUN]-1659850502959
GPR[SSUN]-1659850502959
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850509733
GPR[SPVAP]-1659850509733
GPR[EPVAP]-1659850516224
GPR[SPVATF]-1659850516224
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850518361
GPR[EPVS]-1659850518361
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850518364
GPR[SPVAP]-1659850518364
GPR[EPVAP]-1659850519485
GPR[EPVS]-1659850519485
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850519486
GPR[SPVAP]-1659850519486
GPR[EPVAP]-1659850520586
GPR[EPVS]-1659850520586
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850520588
GPR[SPVAP]-1659850520588
GPR[EPVAP]-1659850522664
GPR[SPVATF]-1659850522664
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850525064
GPR[EPVS]-1659850525064
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659850525066
GPR[SPVAP]-1659850525066
GPR[EPVAP]-1659850526209
GPR[EPVS]-1659850526209
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850526211
GPR[SPVAP]-1659850526211
GPR[EPVAP]-1659850527352
GPR[EPVS]-1659850527352
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850527355
GPR[SPVAP]-1659850527355
GPR[EPVAP]-1659850528483
GPR[EPVS]-1659850528483
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850528486
GPR[SPVAP]-1659850528486
GPR[EPVAP]-1659850529695
GPR[EPVS]-1659850529695
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850529705
GPR[SPVAP]-1659850529705
GPR[EPVAP]-1659850531022
GPR[EPVS]-1659850531022
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850531024
GPR[SPVAP]-1659850531024
GPR[EPVAP]-1659850532177
GPR[EPVS]-1659850532177
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850532178
GPR[SPVAP]-1659850532178
GPR[EPVAP]-1659850533287
GPR[EPVS]-1659850533287
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850533289
GPR[SPVAP]-1659850533289
GPR[EPVAP]-1659850534392
GPR[EPVS]-1659850534392
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850534394
GPR[SPVAP]-1659850534394
GPR[EPVAP]-1659850535548
GPR[EPVS]-1659850535548
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850535550
GPR[SPVAP]-1659850535550
GPR[EPVAP]-1659850536673
GPR[EPVS]-1659850536673
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850536674
GPR[SPVAP]-1659850536674
GPR[EPVAP]-1659850537806
GPR[EPVS]-1659850537806
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850537807
GPR[SPVAP]-1659850537807
GPR[EPVAP]-1659850538923
GPR[EPVS]-1659850538923
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850538924
GPR[SPVAP]-1659850538924
GPR[EPVAP]-1659850540025
GPR[EPVS]-1659850540025
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850540027
GPR[SPVAP]-1659850540027
GPR[EPVAP]-1659850541391
GPR[EPVS]-1659850541391
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850541392
GPR[SPVAP]-1659850541392
GPR[EPVAP]-1659850542510
GPR[EPVS]-1659850542510
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850542512
GPR[SPVAP]-1659850542512
GPR[EPVAP]-1659850543662
GPR[EPVS]-1659850543662
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850543663
GPR[SPVAP]-1659850543663
GPR[EPVAP]-1659850544802
GPR[EPVS]-1659850544802
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850544803
GPR[SPVAP]-1659850544803
GPR[EPVAP]-1659850545932
GPR[EPVS]-1659850545932
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850545935
GPR[SPVAP]-1659850545935
GPR[EPVAP]-1659850547053
GPR[EPVS]-1659850547053
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850547055
GPR[SPVAP]-1659850547055
GPR[EPVAP]-1659850548167
GPR[EPVS]-1659850548168
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850548170
GPR[SPVAP]-1659850548170
GPR[EPVAP]-1659850550533
GPR[EPVS]-1659850550533
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659850550539
GPR[SPVAP]-1659850550539
GPR[EPVAP]-1659850551815
GPR[EPVS]-1659850551815
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850551816
GPR[SPVAP]-1659850551816
GPR[EPVAP]-1659850552928
GPR[EPVS]-1659850552928
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850552930
GPR[SPVAP]-1659850552930
GPR[EPVAP]-1659850554089
GPR[EPVS]-1659850554089
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850554091
GPR[SPVAP]-1659850554091
GPR[EPVAP]-1659850555189
GPR[EPVS]-1659850555189
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850555193
GPR[SPVAP]-1659850555193
GPR[EPVAP]-1659850556295
GPR[EPVS]-1659850556295
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850556297
GPR[SPVAP]-1659850556297
GPR[EPVAP]-1659850557395
GPR[EPVS]-1659850557395
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850557397
GPR[SPVAP]-1659850557397
GPR[EPVAP]-1659850558522
GPR[EPVS]-1659850558522
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850558523
GPR[SPVAP]-1659850558523
GPR[EPVAP]-1659850559637
GPR[EPVS]-1659850559637
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850559638
GPR[SPVAP]-1659850559638
GPR[EPVAP]-1659850560774
GPR[EPVS]-1659850560774
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850560776
GPR[SPVAP]-1659850560776
GPR[EPVAP]-1659850561953
GPR[EPVS]-1659850561953
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850561954
GPR[SPVAP]-1659850561954
GPR[EPVAP]-1659850563106
GPR[EPVS]-1659850563107
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850563108
GPR[SPVAP]-1659850563108
GPR[EPVAP]-1659850564249
GPR[EPVS]-1659850564249
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850564250
GPR[SPVAP]-1659850564250
GPR[EPVAP]-1659850565373
GPR[EPVS]-1659850565373
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850565374
GPR[SPVAP]-1659850565374
GPR[EPVAP]-1659850566501
GPR[EPVS]-1659850566501
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850566502
GPR[SPVAP]-1659850566502
GPR[EPVAP]-1659850567611
GPR[EPVS]-1659850567611
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850567612
GPR[SPVAP]-1659850567612
GPR[EPVAP]-1659850568723
GPR[EPVS]-1659850568723
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850568724
GPR[SPVAP]-1659850568724
GPR[EPVAP]-1659850569859
GPR[EPVS]-1659850569859
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850569861
GPR[SPVAP]-1659850569861
GPR[EPVAP]-1659850570975
GPR[EPVS]-1659850570975
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850570977
GPR[SPVAP]-1659850570977
GPR[EPVAP]-1659850572087
GPR[EPVS]-1659850572087
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850572089
GPR[SPVAP]-1659850572089
GPR[EPVAP]-1659850573204
GPR[EPVS]-1659850573204
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850573205
GPR[SPVAP]-1659850573206
GPR[EPVAP]-1659850574325
GPR[EPVS]-1659850574325
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850574326
GPR[SPVAP]-1659850574326
GPR[EPVAP]-1659850575429
GPR[EPVS]-1659850575429
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850575431
GPR[SPVAP]-1659850575431
GPR[EPVAP]-1659850576541
GPR[EPVS]-1659850576541
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850576546
GPR[SPVAP]-1659850576546
GPR[EPVAP]-1659850577655
GPR[EPVS]-1659850577655
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850577658
GPR[SPVAP]-1659850577658
GPR[EPVAP]-1659850578835
GPR[EPVS]-1659850578835
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850578837
GPR[SPVAP]-1659850578837
GPR[EPVAP]-1659850579937
GPR[EPVS]-1659850579937
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850579938
GPR[SPVAP]-1659850579938
GPR[EPVAP]-1659850581053
GPR[EPVS]-1659850581053
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850581055
GPR[SPVAP]-1659850581055
GPR[EPVAP]-1659850582167
GPR[EPVS]-1659850582167
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850582171
GPR[SPVAP]-1659850582171
GPR[EPVAP]-1659850583280
GPR[EPVS]-1659850583280
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850583281
GPR[SPVAP]-1659850583281
GPR[EPVAP]-1659850584398
GPR[EPVS]-1659850584398
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850584400
GPR[SPVAP]-1659850584400
GPR[EPVAP]-1659850585504
GPR[EPVS]-1659850585504
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850585506
GPR[SPVAP]-1659850585506
GPR[EPVAP]-1659850586613
GPR[EPVS]-1659850586613
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850586616
GPR[SPVAP]-1659850586616
GPR[EPVAP]-1659850587732
GPR[EPVS]-1659850587732
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850587734
GPR[SPVAP]-1659850587734
GPR[EPVAP]-1659850588845
GPR[EPVS]-1659850588845
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850588847
GPR[SPVAP]-1659850588847
GPR[EPVAP]-1659850589967
GPR[EPVS]-1659850589967
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850589968
GPR[SPVAP]-1659850589968
GPR[EPVAP]-1659850591109
GPR[EPVS]-1659850591109
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850591110
GPR[SPVAP]-1659850591110
GPR[EPVAP]-1659850592228
GPR[EPVS]-1659850592228
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850592231
GPR[SPVAP]-1659850592231
GPR[EPVAP]-1659850593337
GPR[EPVS]-1659850593337
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850593338
GPR[SPVAP]-1659850593338
GPR[EPVAP]-1659850594489
GPR[EPVS]-1659850594489
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850594492
GPR[SPVAP]-1659850594492
GPR[EPVAP]-1659850595807
GPR[EPVS]-1659850595807
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850595810
GPR[SPVAP]-1659850595810
GPR[EPVAP]-1659850597119
GPR[EPVS]-1659850597119
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850597122
GPR[SPVAP]-1659850597122
GPR[EPVAP]-1659850598463
GPR[EPVS]-1659850598463
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850598472
GPR[SPVAP]-1659850598472
GPR[EPVAP]-1659850599777
GPR[EPVS]-1659850599777
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850599780
GPR[SPVAP]-1659850599780
GPR[EPVAP]-1659850601033
GPR[EPVS]-1659850601033
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850601035
GPR[SPVAP]-1659850601035
GPR[EPVAP]-1659850602154
GPR[EPVS]-1659850602155
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850602157
GPR[SPVAP]-1659850602157
GPR[EPVAP]-1659850603275
GPR[EPVS]-1659850603275
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850603276
GPR[SPVAP]-1659850603276
GPR[EPVAP]-1659850604389
GPR[EPVS]-1659850604389
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850604390
GPR[SPVAP]-1659850604390
GPR[EPVAP]-1659850605505
GPR[EPVS]-1659850605505
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850605506
GPR[SPVAP]-1659850605507
GPR[EPVAP]-1659850606650
GPR[EPVS]-1659850606650
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850606652
GPR[SPVAP]-1659850606652
GPR[EPVAP]-1659850607753
GPR[EPVS]-1659850607753
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850607755
GPR[SPVAP]-1659850607755
GPR[EPVAP]-1659850609857
GPR[SPVATF]-1659850609857
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850611889
GPR[EPVS]-1659850611889
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850611891
GPR[SPVAP]-1659850611891
GPR[EPVAP]-1659850613008
GPR[EPVS]-1659850613009
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850613010
GPR[SPVAP]-1659850613010
GPR[EPVAP]-1659850614125
GPR[EPVS]-1659850614125
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850614126
GPR[SPVAP]-1659850614126
GPR[EPVAP]-1659850615234
GPR[EPVS]-1659850615234
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850615236
GPR[SPVAP]-1659850615236
GPR[EPVAP]-1659850616360
GPR[EPVS]-1659850616360
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850616361
GPR[SPVAP]-1659850616361
GPR[EPVAP]-1659850617458
GPR[EPVS]-1659850617458
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850617460
GPR[SPVAP]-1659850617460
GPR[EPVAP]-1659850618580
GPR[EPVS]-1659850618580
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850618582
GPR[SPVAP]-1659850618582
GPR[EPVAP]-1659850619696
GPR[EPVS]-1659850619696
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850619698
GPR[SPVAP]-1659850619698
GPR[EPVAP]-1659850620818
GPR[EPVS]-1659850620818
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850620820
GPR[SPVAP]-1659850620820
GPR[EPVAP]-1659850623344
GPR[EPVS]-1659850623344
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850623348
GPR[SPVAP]-1659850623348
GPR[EPVAP]-1659850624480
GPR[EPVS]-1659850624480
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850624482
GPR[SPVAP]-1659850624482
GPR[EPVAP]-1659850625601
GPR[EPVS]-1659850625601
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850625602
GPR[SPVAP]-1659850625602
GPR[EPVAP]-1659850626736
GPR[EPVS]-1659850626736
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850626740
GPR[SPVAP]-1659850626740
GPR[EPVAP]-1659850627857
GPR[EPVS]-1659850627857
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850627859
GPR[SPVAP]-1659850627859
GPR[EPVAP]-1659850628959
GPR[EPVS]-1659850628959
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850628960
GPR[SPVAP]-1659850628960
GPR[EPVAP]-1659850630057
GPR[EPVS]-1659850630057
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850630058
GPR[SPVAP]-1659850630058
GPR[EPVAP]-1659850631187
GPR[EPVS]-1659850631187
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850631189
GPR[SPVAP]-1659850631189
GPR[EPVAP]-1659850632294
GPR[EPVS]-1659850632294
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850632296
GPR[SPVAP]-1659850632296
GPR[EPVAP]-1659850633396
GPR[EPVS]-1659850633396
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850633398
GPR[SPVAP]-1659850633398
GPR[EPVAP]-1659850634514
GPR[EPVS]-1659850634514
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850634516
GPR[SPVAP]-1659850634516
GPR[EPVAP]-1659850635636
GPR[EPVS]-1659850635636
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850635638
GPR[SPVAP]-1659850635638
GPR[EPVAP]-1659850636768
GPR[EPVS]-1659850636768
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850636769
GPR[SPVAP]-1659850636769
GPR[EPVAP]-1659850637899
GPR[EPVS]-1659850637899
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850637902
GPR[SPVAP]-1659850637902
GPR[EPVAP]-1659850639010
GPR[EPVS]-1659850639011
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850639012
GPR[SPVAP]-1659850639012
GPR[EPVAP]-1659850640132
GPR[EPVS]-1659850640132
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850640134
GPR[SPVAP]-1659850640134
GPR[EPVAP]-1659850641239
GPR[EPVS]-1659850641239
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850641242
GPR[SPVAP]-1659850641242
GPR[EPVAP]-1659850642340
GPR[EPVS]-1659850642340
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850642344
GPR[SPVAP]-1659850642344
GPR[EPVAP]-1659850643469
GPR[EPVS]-1659850643469
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659850643472
GPR[SPVAP]-1659850643472
GPR[EPVAP]-1659850644592
GPR[EPVS]-1659850644592
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659850644594
GPR[SPVAP]-1659850644594
GPR[EPVAP]-1659850645706
GPR[EPVS]-1659850645706
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659850645708
GPR[SPVAP]-1659850645708
GPR[EPVAP]-1659850646841
GPR[EPVS]-1659850646841
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850646843
GPR[SPVAP]-1659850646843
GPR[EPVAP]-1659850647947
GPR[EPVS]-1659850647947
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850647948
GPR[SPVAP]-1659850647948
GPR[EPVAP]-1659850649057
GPR[EPVS]-1659850649057
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850649059
GPR[SPVAP]-1659850649059
GPR[EPVAP]-1659850650181
GPR[EPVS]-1659850650181
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850650183
GPR[SPVAP]-1659850650183
GPR[EPVAP]-1659850651293
GPR[EPVS]-1659850651293
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850651295
GPR[SPVAP]-1659850651295
GPR[EPVAP]-1659850652397
GPR[EPVS]-1659850652397
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850652398
GPR[SPVAP]-1659850652398
GPR[EPVAP]-1659850653501
GPR[EPVS]-1659850653501
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850653506
GPR[SPVAP]-1659850653506
GPR[EPVAP]-1659850654617
GPR[EPVS]-1659850654617
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850654621
GPR[SPVAP]-1659850654621
GPR[EPVAP]-1659850655745
GPR[EPVS]-1659850655745
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850655749
GPR[SPVAP]-1659850655749
GPR[EPVAP]-1659850656850
GPR[EPVS]-1659850656851
GPR[ESUN]-1659850656851
GPR[SSUN]-1659850656851
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659850657527
GPR[SSUN]-1659850657527
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850664181
GPR[SPVAP]-1659850664181
GPR[EPVAP]-1659850670721
GPR[SPVATF]-1659850670721
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850672756
GPR[EPVS]-1659850672756
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850672758
GPR[SPVAP]-1659850672758
GPR[EPVAP]-1659850673886
GPR[EPVS]-1659850673886
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850673888
GPR[SPVAP]-1659850673888
GPR[EPVAP]-1659850675941
GPR[SPVATF]-1659850675941
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850678116
GPR[EPVS]-1659850678116
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850678126
GPR[SPVAP]-1659850678126
GPR[EPVAP]-1659850679292
GPR[EPVS]-1659850679292
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850679294
GPR[SPVAP]-1659850679294
GPR[EPVAP]-1659850680421
GPR[EPVS]-1659850680421
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850680422
GPR[SPVAP]-1659850680422
GPR[EPVAP]-1659850681528
GPR[EPVS]-1659850681528
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850681530
GPR[SPVAP]-1659850681530
GPR[EPVAP]-1659850682647
GPR[EPVS]-1659850682647
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850682648
GPR[SPVAP]-1659850682648
GPR[EPVAP]-1659850683759
GPR[EPVS]-1659850683759
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850683760
GPR[SPVAP]-1659850683760
GPR[EPVAP]-1659850684880
GPR[EPVS]-1659850684880
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850684883
GPR[SPVAP]-1659850684883
GPR[EPVAP]-1659850686021
GPR[EPVS]-1659850686021
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850686023
GPR[SPVAP]-1659850686023
GPR[EPVAP]-1659850687127
GPR[EPVS]-1659850687127
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850687129
GPR[SPVAP]-1659850687129
GPR[EPVAP]-1659850688255
GPR[EPVS]-1659850688255
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850688258
GPR[SPVAP]-1659850688258
GPR[EPVAP]-1659850689359
GPR[EPVS]-1659850689359
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850689361
GPR[SPVAP]-1659850689361
GPR[EPVAP]-1659850690486
GPR[EPVS]-1659850690486
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850690489
GPR[SPVAP]-1659850690489
GPR[EPVAP]-1659850691648
GPR[EPVS]-1659850691648
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850691650
GPR[SPVAP]-1659850691650
GPR[EPVAP]-1659850692981
GPR[EPVS]-1659850692981
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850692990
GPR[SPVAP]-1659850692990
GPR[EPVAP]-1659850695211
GPR[EPVS]-1659850695211
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850695213
GPR[SPVAP]-1659850695213
GPR[EPVAP]-1659850696316
GPR[EPVS]-1659850696316
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850696318
GPR[SPVAP]-1659850696318
GPR[EPVAP]-1659850697427
GPR[EPVS]-1659850697427
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850697429
GPR[SPVAP]-1659850697429
GPR[EPVAP]-1659850698553
GPR[EPVS]-1659850698553
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850698554
GPR[SPVAP]-1659850698554
GPR[EPVAP]-1659850699706
GPR[EPVS]-1659850699706
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850699708
GPR[SPVAP]-1659850699708
GPR[EPVAP]-1659850700847
GPR[EPVS]-1659850700847
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850700849
GPR[SPVAP]-1659850700849
GPR[EPVAP]-1659850701960
GPR[EPVS]-1659850701960
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850701961
GPR[SPVAP]-1659850701962
GPR[EPVAP]-1659850703058
GPR[EPVS]-1659850703058
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850703061
GPR[SPVAP]-1659850703061
GPR[EPVAP]-1659850704228
GPR[EPVS]-1659850704229
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850704231
GPR[SPVAP]-1659850704231
GPR[EPVAP]-1659850705352
GPR[EPVS]-1659850705352
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850705354
GPR[SPVAP]-1659850705354
GPR[EPVAP]-1659850706468
GPR[EPVS]-1659850706468
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850706470
GPR[SPVAP]-1659850706470
GPR[EPVAP]-1659850707584
GPR[EPVS]-1659850707584
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850707586
GPR[SPVAP]-1659850707586
GPR[EPVAP]-1659850708689
GPR[EPVS]-1659850708689
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850708691
GPR[SPVAP]-1659850708691
GPR[EPVAP]-1659850709816
GPR[EPVS]-1659850709816
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850709818
GPR[SPVAP]-1659850709818
GPR[EPVAP]-1659850710948
GPR[EPVS]-1659850710948
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850710949
GPR[SPVAP]-1659850710949
GPR[EPVAP]-1659850712062
GPR[EPVS]-1659850712062
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850712064
GPR[SPVAP]-1659850712064
GPR[EPVAP]-1659850713181
GPR[EPVS]-1659850713181
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850713183
GPR[SPVAP]-1659850713183
GPR[EPVAP]-1659850714280
GPR[EPVS]-1659850714280
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850714281
GPR[SPVAP]-1659850714281
GPR[EPVAP]-1659850715425
GPR[EPVS]-1659850715425
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850715430
GPR[SPVAP]-1659850715430
GPR[EPVAP]-1659850716593
GPR[EPVS]-1659850716593
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850716595
GPR[SPVAP]-1659850716595
GPR[EPVAP]-1659850717708
GPR[EPVS]-1659850717708
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850717709
GPR[SPVAP]-1659850717709
GPR[EPVAP]-1659850718839
GPR[EPVS]-1659850718839
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850718848
GPR[SPVAP]-1659850718848
GPR[EPVAP]-1659850719967
GPR[EPVS]-1659850719967
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850719969
GPR[SPVAP]-1659850719969
GPR[EPVAP]-1659850721109
GPR[EPVS]-1659850721109
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850721111
GPR[SPVAP]-1659850721111
GPR[EPVAP]-1659850722224
GPR[EPVS]-1659850722224
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850722226
GPR[SPVAP]-1659850722226
GPR[EPVAP]-1659850723333
GPR[EPVS]-1659850723333
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850723334
GPR[SPVAP]-1659850723334
GPR[EPVAP]-1659850724447
GPR[EPVS]-1659850724447
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850724448
GPR[SPVAP]-1659850724448
GPR[EPVAP]-1659850725558
GPR[EPVS]-1659850725558
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850725559
GPR[SPVAP]-1659850725559
GPR[EPVAP]-1659850726660
GPR[EPVS]-1659850726660
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850726661
GPR[SPVAP]-1659850726661
GPR[EPVAP]-1659850727782
GPR[EPVS]-1659850727782
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850727784
GPR[SPVAP]-1659850727784
GPR[EPVAP]-1659850728898
GPR[EPVS]-1659850728898
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850728910
GPR[SPVAP]-1659850728910
GPR[EPVAP]-1659850730074
GPR[EPVS]-1659850730074
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850730076
GPR[SPVAP]-1659850730076
GPR[EPVAP]-1659850731200
GPR[EPVS]-1659850731200
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850731202
GPR[SPVAP]-1659850731202
GPR[EPVAP]-1659850732326
GPR[EPVS]-1659850732326
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850732327
GPR[SPVAP]-1659850732327
GPR[EPVAP]-1659850733427
GPR[EPVS]-1659850733427
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850733429
GPR[SPVAP]-1659850733429
GPR[EPVAP]-1659850734548
GPR[EPVS]-1659850734548
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850734551
GPR[SPVAP]-1659850734551
GPR[EPVAP]-1659850735665
GPR[EPVS]-1659850735665
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850735667
GPR[SPVAP]-1659850735667
GPR[EPVAP]-1659850736773
GPR[EPVS]-1659850736773
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850736778
GPR[SPVAP]-1659850736778
GPR[EPVAP]-1659850737881
GPR[EPVS]-1659850737881
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850737885
GPR[SPVAP]-1659850737885
GPR[EPVAP]-1659850738995
GPR[EPVS]-1659850738995
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850738998
GPR[SPVAP]-1659850738998
GPR[EPVAP]-1659850740189
GPR[EPVS]-1659850740189
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850740190
GPR[SPVAP]-1659850740190
GPR[EPVAP]-1659850741419
GPR[EPVS]-1659850741419
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850741422
GPR[SPVAP]-1659850741422
GPR[EPVAP]-1659850742540
GPR[EPVS]-1659850742540
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850742544
GPR[SPVAP]-1659850742544
GPR[EPVAP]-1659850743661
GPR[EPVS]-1659850743661
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850743663
GPR[SPVAP]-1659850743663
GPR[EPVAP]-1659850744775
GPR[EPVS]-1659850744775
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850744776
GPR[SPVAP]-1659850744776
GPR[EPVAP]-1659850745891
GPR[EPVS]-1659850745891
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850745892
GPR[SPVAP]-1659850745892
GPR[EPVAP]-1659850747001
GPR[EPVS]-1659850747001
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850747004
GPR[SPVAP]-1659850747004
GPR[EPVAP]-1659850748113
GPR[EPVS]-1659850748113
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850748114
GPR[SPVAP]-1659850748115
GPR[EPVAP]-1659850749229
GPR[EPVS]-1659850749229
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659850749230
GPR[SPVAP]-1659850749230
GPR[EPVAP]-1659850750349
GPR[EPVS]-1659850750349
GPR[ESUN]-1659850750349
GPR[SSUN]-1659850750349
GPR[ESUN]-1659850750349
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659850751253
GPR[EFL]-1659850751255
GPR[SFP]-1659850751255
TIMEOUT : 600000
GPR[SSUN]-1659850751259
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659850753185
GPR[SPVAP]-1659850753185
GPR[EPVAP]-1659850759711
GPR[SPVATF]-1659850759711
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 0
GPR[EPVATF]-1659850761986
GPR[SPVATR]-1659850761986
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659850828003
GPR[EPVS]-1659850828003
GPR[PF]-1659850828003
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/16/patch_76753_1_ts_1659850828003.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM106203816518325499/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/16/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/16/patch_76753_1_ts_1659850828003.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659850828013
GPR[SPVAP]-1659850828013
GPR[EPVAP]-1659850830090
GPR[SPVATF]-1659850830090
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850832254
GPR[EPVS]-1659850832254
GPR[ESUN]-1659850832254
GPR[SSUN]-1659850832254
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850834471
GPR[SPVAP]-1659850834471
GPR[EPVAP]-1659850842649
GPR[SPVATF]-1659850842649
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850844845
GPR[EPVS]-1659850844845
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850844847
GPR[SPVAP]-1659850844847
GPR[EPVAP]-1659850846932
GPR[SPVATF]-1659850846932
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850849074
GPR[EPVS]-1659850849074
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850849076
GPR[SPVAP]-1659850849076
GPR[EPVAP]-1659850851176
GPR[SPVATF]-1659850851176
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850853345
GPR[EPVS]-1659850853345
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850853347
GPR[SPVAP]-1659850853347
GPR[EPVAP]-1659850855393
GPR[SPVATF]-1659850855393
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850857546
GPR[EPVS]-1659850857546
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850857548
GPR[SPVAP]-1659850857548
GPR[EPVAP]-1659850859569
GPR[SPVATF]-1659850859569
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850861720
GPR[EPVS]-1659850861720
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850861722
GPR[SPVAP]-1659850861722
GPR[EPVAP]-1659850863809
GPR[SPVATF]-1659850863809
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850865994
GPR[EPVS]-1659850865994
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850865996
GPR[SPVAP]-1659850865996
GPR[EPVAP]-1659850868073
GPR[SPVATF]-1659850868073
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850870210
GPR[EPVS]-1659850870210
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850870211
GPR[SPVAP]-1659850870211
GPR[EPVAP]-1659850872273
GPR[SPVATF]-1659850872273
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850874395
GPR[EPVS]-1659850874395
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850874397
GPR[SPVAP]-1659850874397
GPR[EPVAP]-1659850876477
GPR[SPVATF]-1659850876477
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850878600
GPR[EPVS]-1659850878600
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850878602
GPR[SPVAP]-1659850878602
GPR[EPVAP]-1659850880636
GPR[SPVATF]-1659850880636
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850882761
GPR[EPVS]-1659850882761
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850882763
GPR[SPVAP]-1659850882763
GPR[EPVAP]-1659850884800
GPR[SPVATF]-1659850884800
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850886968
GPR[EPVS]-1659850886968
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850886969
GPR[SPVAP]-1659850886969
GPR[EPVAP]-1659850889076
GPR[SPVATF]-1659850889076
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850891241
GPR[EPVS]-1659850891241
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850891243
GPR[SPVAP]-1659850891243
GPR[EPVAP]-1659850893295
GPR[SPVATF]-1659850893295
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850895426
GPR[EPVS]-1659850895426
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850895427
GPR[SPVAP]-1659850895427
GPR[EPVAP]-1659850897485
GPR[SPVATF]-1659850897485
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850899668
GPR[EPVS]-1659850899668
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850899670
GPR[SPVAP]-1659850899670
GPR[EPVAP]-1659850901702
GPR[SPVATF]-1659850901702
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850903814
GPR[EPVS]-1659850903814
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850903816
GPR[SPVAP]-1659850903816
GPR[EPVAP]-1659850905864
GPR[SPVATF]-1659850905864
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850908017
GPR[EPVS]-1659850908017
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850908018
GPR[SPVAP]-1659850908018
GPR[EPVAP]-1659850910106
GPR[SPVATF]-1659850910106
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850914230
GPR[EPVS]-1659850914230
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850914232
GPR[SPVAP]-1659850914232
GPR[EPVAP]-1659850916274
GPR[SPVATF]-1659850916274
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850918498
GPR[EPVS]-1659850918498
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850918499
GPR[SPVAP]-1659850918499
GPR[EPVAP]-1659850920577
GPR[SPVATF]-1659850920577
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850922714
GPR[EPVS]-1659850922714
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850922715
GPR[SPVAP]-1659850922715
GPR[EPVAP]-1659850924817
GPR[SPVATF]-1659850924817
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850926987
GPR[EPVS]-1659850926987
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850926988
GPR[SPVAP]-1659850926988
GPR[EPVAP]-1659850929029
GPR[SPVATF]-1659850929029
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850931218
GPR[EPVS]-1659850931218
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850931220
GPR[SPVAP]-1659850931220
GPR[EPVAP]-1659850933272
GPR[SPVATF]-1659850933272
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850935471
GPR[EPVS]-1659850935471
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850935473
GPR[SPVAP]-1659850935473
GPR[EPVAP]-1659850937528
GPR[SPVATF]-1659850937528
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850939689
GPR[EPVS]-1659850939689
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850939691
GPR[SPVAP]-1659850939691
GPR[EPVAP]-1659850941733
GPR[SPVATF]-1659850941733
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850943891
GPR[EPVS]-1659850943891
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850943892
GPR[SPVAP]-1659850943892
GPR[EPVAP]-1659850945952
GPR[SPVATF]-1659850945952
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850948064
GPR[EPVS]-1659850948064
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659850948066
GPR[SPVAP]-1659850948066
GPR[EPVAP]-1659850950131
GPR[SPVATF]-1659850950131
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850952243
GPR[EPVS]-1659850952243
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850952246
GPR[SPVAP]-1659850952246
GPR[EPVAP]-1659850954297
GPR[SPVATF]-1659850954297
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850956404
GPR[EPVS]-1659850956404
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850956406
GPR[SPVAP]-1659850956406
GPR[EPVAP]-1659850958469
GPR[SPVATF]-1659850958469
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850960650
GPR[EPVS]-1659850960650
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850960652
GPR[SPVAP]-1659850960652
GPR[EPVAP]-1659850962707
GPR[SPVATF]-1659850962707
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850964850
GPR[EPVS]-1659850964850
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659850964851
GPR[SPVAP]-1659850964852
GPR[EPVAP]-1659850966892
GPR[SPVATF]-1659850966892
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850969064
GPR[EPVS]-1659850969064
GPR[ESUN]-1659850969065
GPR[SSUN]-1659850969065
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850976157
GPR[SPVAP]-1659850976157
GPR[EPVAP]-1659850982737
GPR[SPVATF]-1659850982737
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850987048
GPR[EPVS]-1659850987048
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659850987049
GPR[SPVAP]-1659850987049
GPR[EPVAP]-1659850988162
GPR[EPVS]-1659850988162
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850988164
GPR[SPVAP]-1659850988164
GPR[EPVAP]-1659850989268
GPR[EPVS]-1659850989268
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850989271
GPR[SPVAP]-1659850989271
GPR[EPVAP]-1659850990382
GPR[EPVS]-1659850990382
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850990385
GPR[SPVAP]-1659850990385
GPR[EPVAP]-1659850991496
GPR[EPVS]-1659850991496
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850991498
GPR[SPVAP]-1659850991498
GPR[EPVAP]-1659850992641
GPR[EPVS]-1659850992641
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850992643
GPR[SPVAP]-1659850992643
GPR[EPVAP]-1659850993796
GPR[EPVS]-1659850993796
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850993799
GPR[SPVAP]-1659850993799
GPR[EPVAP]-1659850995875
GPR[SPVATF]-1659850995875
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659850998000
GPR[EPVS]-1659850998000
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659850998002
GPR[SPVAP]-1659850998002
GPR[EPVAP]-1659850999109
GPR[EPVS]-1659850999109
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659850999111
GPR[SPVAP]-1659850999111
GPR[EPVAP]-1659851000228
GPR[EPVS]-1659851000228
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851000230
GPR[SPVAP]-1659851000230
GPR[EPVAP]-1659851001334
GPR[EPVS]-1659851001334
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851001336
GPR[SPVAP]-1659851001336
GPR[EPVAP]-1659851002440
GPR[EPVS]-1659851002440
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851002441
GPR[SPVAP]-1659851002441
GPR[EPVAP]-1659851003555
GPR[EPVS]-1659851003555
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851003557
GPR[SPVAP]-1659851003557
GPR[EPVAP]-1659851004705
GPR[EPVS]-1659851004705
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851004707
GPR[SPVAP]-1659851004707
GPR[EPVAP]-1659851005812
GPR[EPVS]-1659851005812
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851005814
GPR[SPVAP]-1659851005814
GPR[EPVAP]-1659851006927
GPR[EPVS]-1659851006927
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851006929
GPR[SPVAP]-1659851006929
GPR[EPVAP]-1659851008036
GPR[EPVS]-1659851008036
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851008039
GPR[SPVAP]-1659851008039
GPR[EPVAP]-1659851009160
GPR[EPVS]-1659851009160
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851009162
GPR[SPVAP]-1659851009162
GPR[EPVAP]-1659851010271
GPR[EPVS]-1659851010271
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851010273
GPR[SPVAP]-1659851010273
GPR[EPVAP]-1659851011397
GPR[EPVS]-1659851011397
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851011399
GPR[SPVAP]-1659851011399
GPR[EPVAP]-1659851012514
GPR[EPVS]-1659851012515
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851012517
GPR[SPVAP]-1659851012517
GPR[EPVAP]-1659851014581
GPR[SPVATF]-1659851014581
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851016554
GPR[EPVS]-1659851016554
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659851016556
GPR[SPVAP]-1659851016556
GPR[EPVAP]-1659851017663
GPR[EPVS]-1659851017663
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851017665
GPR[SPVAP]-1659851017665
GPR[EPVAP]-1659851018783
GPR[EPVS]-1659851018783
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851018786
GPR[SPVAP]-1659851018786
GPR[EPVAP]-1659851019891
GPR[EPVS]-1659851019891
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851019894
GPR[SPVAP]-1659851019894
GPR[EPVAP]-1659851021003
GPR[EPVS]-1659851021003
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851021006
GPR[SPVAP]-1659851021006
GPR[EPVAP]-1659851022142
GPR[EPVS]-1659851022142
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851022143
GPR[SPVAP]-1659851022143
GPR[EPVAP]-1659851023244
GPR[EPVS]-1659851023244
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851023246
GPR[SPVAP]-1659851023246
GPR[EPVAP]-1659851024368
GPR[EPVS]-1659851024368
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851024370
GPR[SPVAP]-1659851024370
GPR[EPVAP]-1659851025490
GPR[EPVS]-1659851025491
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851025492
GPR[SPVAP]-1659851025492
GPR[EPVAP]-1659851026596
GPR[EPVS]-1659851026596
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851026598
GPR[SPVAP]-1659851026598
GPR[EPVAP]-1659851027709
GPR[EPVS]-1659851027709
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851027711
GPR[SPVAP]-1659851027711
GPR[EPVAP]-1659851028893
GPR[EPVS]-1659851028893
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851028895
GPR[SPVAP]-1659851028895
GPR[EPVAP]-1659851030004
GPR[EPVS]-1659851030005
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851030006
GPR[SPVAP]-1659851030006
GPR[EPVAP]-1659851032032
GPR[SPVATF]-1659851032032
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851034014
GPR[EPVS]-1659851034014
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851034015
GPR[SPVAP]-1659851034015
GPR[EPVAP]-1659851035122
GPR[EPVS]-1659851035122
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851035124
GPR[SPVAP]-1659851035124
GPR[EPVAP]-1659851036245
GPR[EPVS]-1659851036245
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851036247
GPR[SPVAP]-1659851036247
GPR[EPVAP]-1659851037364
GPR[EPVS]-1659851037364
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851037366
GPR[SPVAP]-1659851037366
GPR[EPVAP]-1659851038472
GPR[EPVS]-1659851038472
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851038473
GPR[SPVAP]-1659851038473
GPR[EPVAP]-1659851039604
GPR[EPVS]-1659851039604
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851039605
GPR[SPVAP]-1659851039605
GPR[EPVAP]-1659851040718
GPR[EPVS]-1659851040718
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851040720
GPR[SPVAP]-1659851040720
GPR[EPVAP]-1659851041831
GPR[EPVS]-1659851041831
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851041834
GPR[SPVAP]-1659851041834
GPR[EPVAP]-1659851042965
GPR[EPVS]-1659851042965
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851042968
GPR[SPVAP]-1659851042968
GPR[EPVAP]-1659851044067
GPR[EPVS]-1659851044067
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851044070
GPR[SPVAP]-1659851044070
GPR[EPVAP]-1659851045164
GPR[EPVS]-1659851045164
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851045166
GPR[SPVAP]-1659851045166
GPR[EPVAP]-1659851046278
GPR[EPVS]-1659851046278
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851046280
GPR[SPVAP]-1659851046280
GPR[EPVAP]-1659851047386
GPR[EPVS]-1659851047386
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851047389
GPR[SPVAP]-1659851047389
GPR[EPVAP]-1659851048521
GPR[EPVS]-1659851048521
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851048523
GPR[SPVAP]-1659851048523
GPR[EPVAP]-1659851049631
GPR[EPVS]-1659851049631
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851049634
GPR[SPVAP]-1659851049634
GPR[EPVAP]-1659851050731
GPR[EPVS]-1659851050731
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851050734
GPR[SPVAP]-1659851050734
GPR[EPVAP]-1659851051838
GPR[EPVS]-1659851051838
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851051840
GPR[SPVAP]-1659851051840
GPR[EPVAP]-1659851052956
GPR[EPVS]-1659851052956
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851052959
GPR[SPVAP]-1659851052959
GPR[EPVAP]-1659851054072
GPR[EPVS]-1659851054072
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851054074
GPR[SPVAP]-1659851054074
GPR[EPVAP]-1659851055190
GPR[EPVS]-1659851055190
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851055192
GPR[SPVAP]-1659851055192
GPR[EPVAP]-1659851056296
GPR[EPVS]-1659851056296
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851056298
GPR[SPVAP]-1659851056298
GPR[EPVAP]-1659851057416
GPR[EPVS]-1659851057416
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851057418
GPR[SPVAP]-1659851057418
GPR[EPVAP]-1659851060397
GPR[EPVS]-1659851060397
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851060406
GPR[SPVAP]-1659851060406
GPR[EPVAP]-1659851061534
GPR[EPVS]-1659851061534
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851061535
GPR[SPVAP]-1659851061535
GPR[EPVAP]-1659851062648
GPR[EPVS]-1659851062648
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851062650
GPR[SPVAP]-1659851062650
GPR[EPVAP]-1659851063774
GPR[EPVS]-1659851063774
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851063776
GPR[SPVAP]-1659851063776
GPR[EPVAP]-1659851064887
GPR[EPVS]-1659851064887
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851064888
GPR[SPVAP]-1659851064888
GPR[EPVAP]-1659851066049
GPR[EPVS]-1659851066049
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851066051
GPR[SPVAP]-1659851066051
GPR[EPVAP]-1659851067177
GPR[EPVS]-1659851067177
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851067179
GPR[SPVAP]-1659851067179
GPR[EPVAP]-1659851069273
GPR[SPVATF]-1659851069273
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851071282
GPR[EPVS]-1659851071282
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851071285
GPR[SPVAP]-1659851071285
GPR[EPVAP]-1659851072418
GPR[EPVS]-1659851072419
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851072421
GPR[SPVAP]-1659851072421
GPR[EPVAP]-1659851073551
GPR[EPVS]-1659851073551
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851073552
GPR[SPVAP]-1659851073552
GPR[EPVAP]-1659851074657
GPR[EPVS]-1659851074657
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851074660
GPR[SPVAP]-1659851074660
GPR[EPVAP]-1659851075772
GPR[EPVS]-1659851075772
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851075774
GPR[SPVAP]-1659851075774
GPR[EPVAP]-1659851076914
GPR[EPVS]-1659851076914
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851076916
GPR[SPVAP]-1659851076916
GPR[EPVAP]-1659851078017
GPR[EPVS]-1659851078017
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851078019
GPR[SPVAP]-1659851078019
GPR[EPVAP]-1659851079111
GPR[EPVS]-1659851079111
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851079116
GPR[SPVAP]-1659851079116
GPR[EPVAP]-1659851080243
GPR[EPVS]-1659851080243
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851080248
GPR[SPVAP]-1659851080248
GPR[EPVAP]-1659851081370
GPR[EPVS]-1659851081370
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851081373
GPR[SPVAP]-1659851081373
GPR[EPVAP]-1659851082469
GPR[EPVS]-1659851082469
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851082471
GPR[SPVAP]-1659851082471
GPR[EPVAP]-1659851083634
GPR[EPVS]-1659851083634
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851083636
GPR[SPVAP]-1659851083636
GPR[EPVAP]-1659851084755
GPR[EPVS]-1659851084755
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851084756
GPR[SPVAP]-1659851084756
GPR[EPVAP]-1659851085899
GPR[EPVS]-1659851085899
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851085903
GPR[SPVAP]-1659851085903
GPR[EPVAP]-1659851087003
GPR[EPVS]-1659851087003
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851087005
GPR[SPVAP]-1659851087005
GPR[EPVAP]-1659851088139
GPR[EPVS]-1659851088139
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851088142
GPR[SPVAP]-1659851088142
GPR[EPVAP]-1659851089251
GPR[EPVS]-1659851089251
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851089253
GPR[SPVAP]-1659851089253
GPR[EPVAP]-1659851090365
GPR[EPVS]-1659851090365
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659851090366
GPR[SPVAP]-1659851090366
GPR[EPVAP]-1659851091497
GPR[EPVS]-1659851091497
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851091499
GPR[SPVAP]-1659851091499
GPR[EPVAP]-1659851092633
GPR[EPVS]-1659851092633
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851092634
GPR[SPVAP]-1659851092634
GPR[EPVAP]-1659851093753
GPR[EPVS]-1659851093753
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851093755
GPR[SPVAP]-1659851093755
GPR[EPVAP]-1659851094869
GPR[EPVS]-1659851094869
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851094875
GPR[SPVAP]-1659851094875
GPR[EPVAP]-1659851095999
GPR[EPVS]-1659851095999
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851096004
GPR[SPVAP]-1659851096004
GPR[EPVAP]-1659851097117
GPR[EPVS]-1659851097117
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851097118
GPR[SPVAP]-1659851097118
GPR[EPVAP]-1659851098253
GPR[EPVS]-1659851098253
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851098254
GPR[SPVAP]-1659851098254
GPR[EPVAP]-1659851099373
GPR[EPVS]-1659851099373
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851099375
GPR[SPVAP]-1659851099375
GPR[EPVAP]-1659851100502
GPR[EPVS]-1659851100503
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851100509
GPR[SPVAP]-1659851100509
GPR[EPVAP]-1659851101617
GPR[EPVS]-1659851101617
GPR[ESUN]-1659851101617
GPR[SSUN]-1659851101617
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851108228
GPR[SPVAP]-1659851108228
GPR[EPVAP]-1659851114792
GPR[SPVATF]-1659851114792
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851116819
GPR[EPVS]-1659851116819
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851116821
GPR[SPVAP]-1659851116821
GPR[EPVAP]-1659851117939
GPR[EPVS]-1659851117939
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851117940
GPR[SPVAP]-1659851117940
GPR[EPVAP]-1659851119065
GPR[EPVS]-1659851119065
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851119067
GPR[SPVAP]-1659851119067
GPR[EPVAP]-1659851121145
GPR[SPVATF]-1659851121145
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851123289
GPR[EPVS]-1659851123289
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659851123291
GPR[SPVAP]-1659851123291
GPR[EPVAP]-1659851124417
GPR[EPVS]-1659851124417
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851124418
GPR[SPVAP]-1659851124418
GPR[EPVAP]-1659851125533
GPR[EPVS]-1659851125533
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851125535
GPR[SPVAP]-1659851125535
GPR[EPVAP]-1659851126634
GPR[EPVS]-1659851126634
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851126636
GPR[SPVAP]-1659851126636
GPR[EPVAP]-1659851127729
GPR[EPVS]-1659851127729
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851127731
GPR[SPVAP]-1659851127731
GPR[EPVAP]-1659851128871
GPR[EPVS]-1659851128871
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851128872
GPR[SPVAP]-1659851128872
GPR[EPVAP]-1659851129993
GPR[EPVS]-1659851129993
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851129995
GPR[SPVAP]-1659851129995
GPR[EPVAP]-1659851132463
GPR[EPVS]-1659851132463
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851132473
GPR[SPVAP]-1659851132473
GPR[EPVAP]-1659851133629
GPR[EPVS]-1659851133629
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851133631
GPR[SPVAP]-1659851133631
GPR[EPVAP]-1659851134760
GPR[EPVS]-1659851134760
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851134761
GPR[SPVAP]-1659851134761
GPR[EPVAP]-1659851135908
GPR[EPVS]-1659851135908
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851135910
GPR[SPVAP]-1659851135910
GPR[EPVAP]-1659851137044
GPR[EPVS]-1659851137044
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851137045
GPR[SPVAP]-1659851137045
GPR[EPVAP]-1659851138176
GPR[EPVS]-1659851138176
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851138177
GPR[SPVAP]-1659851138177
GPR[EPVAP]-1659851139288
GPR[EPVS]-1659851139288
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851139290
GPR[SPVAP]-1659851139290
GPR[EPVAP]-1659851140405
GPR[EPVS]-1659851140405
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851140406
GPR[SPVAP]-1659851140406
GPR[EPVAP]-1659851141533
GPR[EPVS]-1659851141533
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851141535
GPR[SPVAP]-1659851141535
GPR[EPVAP]-1659851142665
GPR[EPVS]-1659851142665
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851142667
GPR[SPVAP]-1659851142667
GPR[EPVAP]-1659851143798
GPR[EPVS]-1659851143798
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851143799
GPR[SPVAP]-1659851143799
GPR[EPVAP]-1659851144909
GPR[EPVS]-1659851144909
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851144912
GPR[SPVAP]-1659851144912
GPR[EPVAP]-1659851146046
GPR[EPVS]-1659851146046
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851146048
GPR[SPVAP]-1659851146048
GPR[EPVAP]-1659851147158
GPR[EPVS]-1659851147158
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851147160
GPR[SPVAP]-1659851147160
GPR[EPVAP]-1659851148273
GPR[EPVS]-1659851148273
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659851148274
GPR[SPVAP]-1659851148274
GPR[EPVAP]-1659851149391
GPR[EPVS]-1659851149391
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851149393
GPR[SPVAP]-1659851149393
GPR[EPVAP]-1659851150516
GPR[EPVS]-1659851150516
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851150518
GPR[SPVAP]-1659851150518
GPR[EPVAP]-1659851151624
GPR[EPVS]-1659851151624
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851151627
GPR[SPVAP]-1659851151627
GPR[EPVAP]-1659851152739
GPR[EPVS]-1659851152739
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851152743
GPR[SPVAP]-1659851152743
GPR[EPVAP]-1659851153844
GPR[EPVS]-1659851153844
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851153845
GPR[SPVAP]-1659851153845
GPR[EPVAP]-1659851154977
GPR[EPVS]-1659851154977
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851154978
GPR[SPVAP]-1659851154978
GPR[EPVAP]-1659851156109
GPR[EPVS]-1659851156109
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851156110
GPR[SPVAP]-1659851156110
GPR[EPVAP]-1659851157217
GPR[EPVS]-1659851157217
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851157219
GPR[SPVAP]-1659851157219
GPR[EPVAP]-1659851158325
GPR[EPVS]-1659851158325
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851158330
GPR[SPVAP]-1659851158330
GPR[EPVAP]-1659851159467
GPR[EPVS]-1659851159467
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851159468
GPR[SPVAP]-1659851159468
GPR[EPVAP]-1659851160625
GPR[EPVS]-1659851160625
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851160626
GPR[SPVAP]-1659851160626
GPR[EPVAP]-1659851161749
GPR[EPVS]-1659851161749
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851161750
GPR[SPVAP]-1659851161750
GPR[EPVAP]-1659851162857
GPR[EPVS]-1659851162857
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851162859
GPR[SPVAP]-1659851162859
GPR[EPVAP]-1659851163988
GPR[EPVS]-1659851163988
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851163990
GPR[SPVAP]-1659851163990
GPR[EPVAP]-1659851165117
GPR[EPVS]-1659851165117
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851165118
GPR[SPVAP]-1659851165118
GPR[EPVAP]-1659851166240
GPR[EPVS]-1659851166240
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851166242
GPR[SPVAP]-1659851166242
GPR[EPVAP]-1659851167396
GPR[EPVS]-1659851167396
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851167398
GPR[SPVAP]-1659851167398
GPR[EPVAP]-1659851168513
GPR[EPVS]-1659851168513
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851168515
GPR[SPVAP]-1659851168515
GPR[EPVAP]-1659851169624
GPR[EPVS]-1659851169624
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851169625
GPR[SPVAP]-1659851169625
GPR[EPVAP]-1659851170757
GPR[EPVS]-1659851170757
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851170759
GPR[SPVAP]-1659851170759
GPR[EPVAP]-1659851171862
GPR[EPVS]-1659851171862
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851171863
GPR[SPVAP]-1659851171863
GPR[EPVAP]-1659851172976
GPR[EPVS]-1659851172976
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851172978
GPR[SPVAP]-1659851172978
GPR[EPVAP]-1659851174121
GPR[EPVS]-1659851174121
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851174126
GPR[SPVAP]-1659851174126
GPR[EPVAP]-1659851175309
GPR[EPVS]-1659851175309
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851175311
GPR[SPVAP]-1659851175311
GPR[EPVAP]-1659851176418
GPR[EPVS]-1659851176419
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851176420
GPR[SPVAP]-1659851176420
GPR[EPVAP]-1659851177532
GPR[EPVS]-1659851177532
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851177534
GPR[SPVAP]-1659851177534
GPR[EPVAP]-1659851178653
GPR[EPVS]-1659851178653
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851178655
GPR[SPVAP]-1659851178655
GPR[EPVAP]-1659851179771
GPR[EPVS]-1659851179771
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851179775
GPR[SPVAP]-1659851179775
GPR[EPVAP]-1659851180893
GPR[EPVS]-1659851180893
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851180894
GPR[SPVAP]-1659851180894
GPR[EPVAP]-1659851182018
GPR[EPVS]-1659851182018
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851182019
GPR[SPVAP]-1659851182019
GPR[EPVAP]-1659851183154
GPR[EPVS]-1659851183154
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851183155
GPR[SPVAP]-1659851183155
GPR[EPVAP]-1659851184260
GPR[EPVS]-1659851184260
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851184263
GPR[SPVAP]-1659851184263
GPR[EPVAP]-1659851185380
GPR[EPVS]-1659851185380
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851185382
GPR[SPVAP]-1659851185382
GPR[EPVAP]-1659851186515
GPR[EPVS]-1659851186515
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851186516
GPR[SPVAP]-1659851186516
GPR[EPVAP]-1659851187652
GPR[EPVS]-1659851187652
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851187654
GPR[SPVAP]-1659851187654
GPR[EPVAP]-1659851188776
GPR[EPVS]-1659851188776
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851188778
GPR[SPVAP]-1659851188778
GPR[EPVAP]-1659851189905
GPR[EPVS]-1659851189905
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851189908
GPR[SPVAP]-1659851189908
GPR[EPVAP]-1659851191025
GPR[EPVS]-1659851191025
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851191027
GPR[SPVAP]-1659851191027
GPR[EPVAP]-1659851192136
GPR[EPVS]-1659851192136
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851192138
GPR[SPVAP]-1659851192138
GPR[EPVAP]-1659851193247
GPR[EPVS]-1659851193247
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851193248
GPR[SPVAP]-1659851193248
GPR[EPVAP]-1659851194379
GPR[EPVS]-1659851194379
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851194380
GPR[SPVAP]-1659851194380
GPR[EPVAP]-1659851195487
GPR[EPVS]-1659851195487
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851195489
GPR[SPVAP]-1659851195489
GPR[EPVAP]-1659851196589
GPR[EPVS]-1659851196589
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851196590
GPR[SPVAP]-1659851196590
GPR[EPVAP]-1659851197728
GPR[EPVS]-1659851197728
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851197730
GPR[SPVAP]-1659851197730
GPR[EPVAP]-1659851198841
GPR[EPVS]-1659851198841
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851198843
GPR[SPVAP]-1659851198843
GPR[EPVAP]-1659851199950
GPR[EPVS]-1659851199950
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851199952
GPR[SPVAP]-1659851199952
GPR[EPVAP]-1659851201066
GPR[EPVS]-1659851201066
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851201068
GPR[SPVAP]-1659851201068
GPR[EPVAP]-1659851202184
GPR[EPVS]-1659851202184
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851202192
GPR[SPVAP]-1659851202192
GPR[EPVAP]-1659851204782
GPR[EPVS]-1659851204782
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851204785
GPR[SPVAP]-1659851204785
GPR[EPVAP]-1659851205895
GPR[EPVS]-1659851205895
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851205897
GPR[SPVAP]-1659851205897
GPR[EPVAP]-1659851207998
GPR[SPVATF]-1659851207998
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851210071
GPR[EPVS]-1659851210071
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851210072
GPR[SPVAP]-1659851210072
GPR[EPVAP]-1659851211171
GPR[EPVS]-1659851211171
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851211173
GPR[SPVAP]-1659851211173
GPR[EPVAP]-1659851212307
GPR[EPVS]-1659851212307
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851212309
GPR[SPVAP]-1659851212309
GPR[EPVAP]-1659851213439
GPR[EPVS]-1659851213439
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851213441
GPR[SPVAP]-1659851213441
GPR[EPVAP]-1659851214562
GPR[EPVS]-1659851214562
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851214564
GPR[SPVAP]-1659851214564
GPR[EPVAP]-1659851215678
GPR[EPVS]-1659851215678
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851215680
GPR[SPVAP]-1659851215680
GPR[EPVAP]-1659851216787
GPR[EPVS]-1659851216787
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851216788
GPR[SPVAP]-1659851216788
GPR[EPVAP]-1659851217920
GPR[EPVS]-1659851217920
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851217921
GPR[SPVAP]-1659851217921
GPR[EPVAP]-1659851219096
GPR[EPVS]-1659851219096
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851219099
GPR[SPVAP]-1659851219099
GPR[EPVAP]-1659851220201
GPR[EPVS]-1659851220201
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851220204
GPR[SPVAP]-1659851220204
GPR[EPVAP]-1659851221317
GPR[EPVS]-1659851221317
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851221319
GPR[SPVAP]-1659851221319
GPR[EPVAP]-1659851222519
GPR[EPVS]-1659851222519
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851222521
GPR[SPVAP]-1659851222521
GPR[EPVAP]-1659851223682
GPR[EPVS]-1659851223682
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851223686
GPR[SPVAP]-1659851223686
GPR[EPVAP]-1659851224807
GPR[EPVS]-1659851224807
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851224809
GPR[SPVAP]-1659851224809
GPR[EPVAP]-1659851225960
GPR[EPVS]-1659851225960
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851225962
GPR[SPVAP]-1659851225962
GPR[EPVAP]-1659851227065
GPR[EPVS]-1659851227065
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851227066
GPR[SPVAP]-1659851227066
GPR[EPVAP]-1659851228201
GPR[EPVS]-1659851228201
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851228203
GPR[SPVAP]-1659851228203
GPR[EPVAP]-1659851229329
GPR[EPVS]-1659851229329
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851229331
GPR[SPVAP]-1659851229331
GPR[EPVAP]-1659851230471
GPR[EPVS]-1659851230471
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851230473
GPR[SPVAP]-1659851230473
GPR[EPVAP]-1659851231595
GPR[EPVS]-1659851231595
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851231597
GPR[SPVAP]-1659851231597
GPR[EPVAP]-1659851232728
GPR[EPVS]-1659851232728
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851232731
GPR[SPVAP]-1659851232731
GPR[EPVAP]-1659851233898
GPR[EPVS]-1659851233898
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851233900
GPR[SPVAP]-1659851233900
GPR[EPVAP]-1659851235048
GPR[EPVS]-1659851235048
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851235050
GPR[SPVAP]-1659851235050
GPR[EPVAP]-1659851236168
GPR[EPVS]-1659851236168
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851236170
GPR[SPVAP]-1659851236170
GPR[EPVAP]-1659851237295
GPR[EPVS]-1659851237295
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851237297
GPR[SPVAP]-1659851237297
GPR[EPVAP]-1659851238417
GPR[EPVS]-1659851238417
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851238419
GPR[SPVAP]-1659851238419
GPR[EPVAP]-1659851239529
GPR[EPVS]-1659851239529
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851239533
GPR[SPVAP]-1659851239533
GPR[EPVAP]-1659851240653
GPR[EPVS]-1659851240653
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659851240655
GPR[SPVAP]-1659851240655
GPR[EPVAP]-1659851241770
GPR[EPVS]-1659851241770
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659851241772
GPR[SPVAP]-1659851241772
GPR[EPVAP]-1659851242896
GPR[EPVS]-1659851242896
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659851242898
GPR[SPVAP]-1659851242898
GPR[EPVAP]-1659851244044
GPR[EPVS]-1659851244044
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851244047
GPR[SPVAP]-1659851244047
GPR[EPVAP]-1659851245160
GPR[EPVS]-1659851245160
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851245161
GPR[SPVAP]-1659851245161
GPR[EPVAP]-1659851246322
GPR[EPVS]-1659851246322
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851246324
GPR[SPVAP]-1659851246324
GPR[EPVAP]-1659851247493
GPR[EPVS]-1659851247493
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851247495
GPR[SPVAP]-1659851247495
GPR[EPVAP]-1659851248603
GPR[EPVS]-1659851248603
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851248604
GPR[SPVAP]-1659851248604
GPR[EPVAP]-1659851249712
GPR[EPVS]-1659851249712
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851249714
GPR[SPVAP]-1659851249714
GPR[EPVAP]-1659851250831
GPR[EPVS]-1659851250831
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851250837
GPR[SPVAP]-1659851250837
GPR[EPVAP]-1659851251989
GPR[EPVS]-1659851251989
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851251991
GPR[SPVAP]-1659851251991
GPR[EPVAP]-1659851253108
GPR[EPVS]-1659851253108
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851253113
GPR[SPVAP]-1659851253113
GPR[EPVAP]-1659851254220
GPR[EPVS]-1659851254220
GPR[ESUN]-1659851254221
GPR[SSUN]-1659851254221
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659851254875
GPR[SSUN]-1659851254875
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851261531
GPR[SPVAP]-1659851261531
GPR[EPVAP]-1659851268130
GPR[SPVATF]-1659851268130
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851270149
GPR[EPVS]-1659851270149
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851270151
GPR[SPVAP]-1659851270151
GPR[EPVAP]-1659851271275
GPR[EPVS]-1659851271275
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851271277
GPR[SPVAP]-1659851271277
GPR[EPVAP]-1659851273361
GPR[SPVATF]-1659851273361
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851277023
GPR[EPVS]-1659851277023
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851277025
GPR[SPVAP]-1659851277025
GPR[EPVAP]-1659851278151
GPR[EPVS]-1659851278151
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851278153
GPR[SPVAP]-1659851278153
GPR[EPVAP]-1659851279269
GPR[EPVS]-1659851279269
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851279271
GPR[SPVAP]-1659851279271
GPR[EPVAP]-1659851280395
GPR[EPVS]-1659851280395
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851280396
GPR[SPVAP]-1659851280396
GPR[EPVAP]-1659851281517
GPR[EPVS]-1659851281517
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851281518
GPR[SPVAP]-1659851281518
GPR[EPVAP]-1659851282621
GPR[EPVS]-1659851282621
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851282623
GPR[SPVAP]-1659851282623
GPR[EPVAP]-1659851283754
GPR[EPVS]-1659851283754
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851283756
GPR[SPVAP]-1659851283756
GPR[EPVAP]-1659851284880
GPR[EPVS]-1659851284880
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851284883
GPR[SPVAP]-1659851284883
GPR[EPVAP]-1659851286009
GPR[EPVS]-1659851286009
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851286011
GPR[SPVAP]-1659851286011
GPR[EPVAP]-1659851287143
GPR[EPVS]-1659851287143
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851287144
GPR[SPVAP]-1659851287144
GPR[EPVAP]-1659851288255
GPR[EPVS]-1659851288256
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851288257
GPR[SPVAP]-1659851288257
GPR[EPVAP]-1659851289401
GPR[EPVS]-1659851289401
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851289404
GPR[SPVAP]-1659851289404
GPR[EPVAP]-1659851290521
GPR[EPVS]-1659851290521
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851290523
GPR[SPVAP]-1659851290523
GPR[EPVAP]-1659851291635
GPR[EPVS]-1659851291635
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851291637
GPR[SPVAP]-1659851291637
GPR[EPVAP]-1659851292738
GPR[EPVS]-1659851292738
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851292741
GPR[SPVAP]-1659851292741
GPR[EPVAP]-1659851293849
GPR[EPVS]-1659851293849
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851293851
GPR[SPVAP]-1659851293851
GPR[EPVAP]-1659851294972
GPR[EPVS]-1659851294972
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851294974
GPR[SPVAP]-1659851294974
GPR[EPVAP]-1659851296099
GPR[EPVS]-1659851296099
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851296101
GPR[SPVAP]-1659851296101
GPR[EPVAP]-1659851297265
GPR[EPVS]-1659851297265
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851297266
GPR[SPVAP]-1659851297266
GPR[EPVAP]-1659851298400
GPR[EPVS]-1659851298400
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851298401
GPR[SPVAP]-1659851298401
GPR[EPVAP]-1659851299555
GPR[EPVS]-1659851299555
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851299557
GPR[SPVAP]-1659851299557
GPR[EPVAP]-1659851300680
GPR[EPVS]-1659851300680
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851300682
GPR[SPVAP]-1659851300682
GPR[EPVAP]-1659851301800
GPR[EPVS]-1659851301800
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851301803
GPR[SPVAP]-1659851301803
GPR[EPVAP]-1659851302903
GPR[EPVS]-1659851302903
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851302905
GPR[SPVAP]-1659851302905
GPR[EPVAP]-1659851304040
GPR[EPVS]-1659851304040
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851304042
GPR[SPVAP]-1659851304042
GPR[EPVAP]-1659851305144
GPR[EPVS]-1659851305144
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851305145
GPR[SPVAP]-1659851305145
GPR[EPVAP]-1659851306248
GPR[EPVS]-1659851306248
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851306250
GPR[SPVAP]-1659851306250
GPR[EPVAP]-1659851307356
GPR[EPVS]-1659851307356
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851307358
GPR[SPVAP]-1659851307358
GPR[EPVAP]-1659851308469
GPR[EPVS]-1659851308469
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851308471
GPR[SPVAP]-1659851308471
GPR[EPVAP]-1659851309582
GPR[EPVS]-1659851309582
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851309583
GPR[SPVAP]-1659851309583
GPR[EPVAP]-1659851310698
GPR[EPVS]-1659851310698
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851310700
GPR[SPVAP]-1659851310700
GPR[EPVAP]-1659851311816
GPR[EPVS]-1659851311816
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851311818
GPR[SPVAP]-1659851311818
GPR[EPVAP]-1659851312972
GPR[EPVS]-1659851312972
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851312974
GPR[SPVAP]-1659851312974
GPR[EPVAP]-1659851314097
GPR[EPVS]-1659851314097
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851314099
GPR[SPVAP]-1659851314099
GPR[EPVAP]-1659851315220
GPR[EPVS]-1659851315221
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851315222
GPR[SPVAP]-1659851315222
GPR[EPVAP]-1659851316333
GPR[EPVS]-1659851316333
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851316335
GPR[SPVAP]-1659851316335
GPR[EPVAP]-1659851317440
GPR[EPVS]-1659851317440
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851317442
GPR[SPVAP]-1659851317442
GPR[EPVAP]-1659851318565
GPR[EPVS]-1659851318565
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851318567
GPR[SPVAP]-1659851318567
GPR[EPVAP]-1659851319666
GPR[EPVS]-1659851319666
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851319668
GPR[SPVAP]-1659851319668
GPR[EPVAP]-1659851320813
GPR[EPVS]-1659851320813
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851320814
GPR[SPVAP]-1659851320814
GPR[EPVAP]-1659851321927
GPR[EPVS]-1659851321927
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851321929
GPR[SPVAP]-1659851321929
GPR[EPVAP]-1659851323054
GPR[EPVS]-1659851323054
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851323056
GPR[SPVAP]-1659851323056
GPR[EPVAP]-1659851324150
GPR[EPVS]-1659851324150
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851324151
GPR[SPVAP]-1659851324151
GPR[EPVAP]-1659851325258
GPR[EPVS]-1659851325258
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851325259
GPR[SPVAP]-1659851325259
GPR[EPVAP]-1659851326373
GPR[EPVS]-1659851326373
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851326377
GPR[SPVAP]-1659851326377
GPR[EPVAP]-1659851327474
GPR[EPVS]-1659851327474
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851327476
GPR[SPVAP]-1659851327476
GPR[EPVAP]-1659851328573
GPR[EPVS]-1659851328573
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851328575
GPR[SPVAP]-1659851328575
GPR[EPVAP]-1659851329685
GPR[EPVS]-1659851329685
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851329686
GPR[SPVAP]-1659851329686
GPR[EPVAP]-1659851330789
GPR[EPVS]-1659851330789
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851330790
GPR[SPVAP]-1659851330790
GPR[EPVAP]-1659851331899
GPR[EPVS]-1659851331899
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851331901
GPR[SPVAP]-1659851331901
GPR[EPVAP]-1659851333019
GPR[EPVS]-1659851333019
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851333020
GPR[SPVAP]-1659851333020
GPR[EPVAP]-1659851334121
GPR[EPVS]-1659851334121
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851334126
GPR[SPVAP]-1659851334126
GPR[EPVAP]-1659851335229
GPR[EPVS]-1659851335229
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851335233
GPR[SPVAP]-1659851335233
GPR[EPVAP]-1659851336340
GPR[EPVS]-1659851336340
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851336341
GPR[SPVAP]-1659851336341
GPR[EPVAP]-1659851337453
GPR[EPVS]-1659851337453
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851337454
GPR[SPVAP]-1659851337454
GPR[EPVAP]-1659851338577
GPR[EPVS]-1659851338577
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851338579
GPR[SPVAP]-1659851338579
GPR[EPVAP]-1659851339686
GPR[EPVS]-1659851339686
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851339690
GPR[SPVAP]-1659851339690
GPR[EPVAP]-1659851340795
GPR[EPVS]-1659851340795
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851340796
GPR[SPVAP]-1659851340796
GPR[EPVAP]-1659851341901
GPR[EPVS]-1659851341901
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851341903
GPR[SPVAP]-1659851341903
GPR[EPVAP]-1659851343017
GPR[EPVS]-1659851343017
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851343018
GPR[SPVAP]-1659851343018
GPR[EPVAP]-1659851344132
GPR[EPVS]-1659851344132
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851344134
GPR[SPVAP]-1659851344134
GPR[EPVAP]-1659851345240
GPR[EPVS]-1659851345240
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851345242
GPR[SPVAP]-1659851345242
GPR[EPVAP]-1659851346346
GPR[EPVS]-1659851346346
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851346348
GPR[SPVAP]-1659851346348
GPR[EPVAP]-1659851347463
GPR[EPVS]-1659851347463
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851347466
GPR[SPVAP]-1659851347466
GPR[EPVAP]-1659851348583
GPR[EPVS]-1659851348583
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851348585
GPR[SPVAP]-1659851348585
GPR[EPVAP]-1659851351336
GPR[EPVS]-1659851351336
Timeout!
MM Purify? true
GPR[SFL]-1659851352342
GPR[EFL]-1659851352345
GPR[SFP]-1659851352345
TIMEOUT : 600000
GPR[SSUN]-1659851352348
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659851354227
GPR[SPVAP]-1659851354227
GPR[EPVAP]-1659851360640
GPR[SPVATF]-1659851360640
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 0
GPR[EPVATF]-1659851363269
GPR[SPVATR]-1659851363270
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659851429806
GPR[EPVS]-1659851429806
GPR[PF]-1659851429806
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/17/patch_77464_1_ts_1659851429806.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM8616960045963084834/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/17/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/17/patch_77464_1_ts_1659851429806.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659851429815
GPR[SPVAP]-1659851429815
GPR[EPVAP]-1659851431840
GPR[SPVATF]-1659851431840
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851434398
GPR[EPVS]-1659851434398
GPR[ESUN]-1659851434398
GPR[SSUN]-1659851434398
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659851436755
GPR[SPVAP]-1659851436755
GPR[EPVAP]-1659851443288
GPR[SPVATF]-1659851443288
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851445846
GPR[EPVS]-1659851445846
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659851445848
GPR[SPVAP]-1659851445848
GPR[EPVAP]-1659851447889
GPR[SPVATF]-1659851447889
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851450426
GPR[EPVS]-1659851450426
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659851450428
GPR[SPVAP]-1659851450428
GPR[EPVAP]-1659851452500
GPR[SPVATF]-1659851452500
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851455091
GPR[EPVS]-1659851455091
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659851455092
GPR[SPVAP]-1659851455092
GPR[EPVAP]-1659851457138
GPR[SPVATF]-1659851457139
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851459677
GPR[EPVS]-1659851459677
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659851459678
GPR[SPVAP]-1659851459678
GPR[EPVAP]-1659851461763
GPR[SPVATF]-1659851461763
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851464363
GPR[EPVS]-1659851464363
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659851464365
GPR[SPVAP]-1659851464365
GPR[EPVAP]-1659851466437
GPR[SPVATF]-1659851466437
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851468996
GPR[EPVS]-1659851468996
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659851468998
GPR[SPVAP]-1659851468998
GPR[EPVAP]-1659851471086
GPR[SPVATF]-1659851471087
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851473633
GPR[EPVS]-1659851473633
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659851473635
GPR[SPVAP]-1659851473635
GPR[EPVAP]-1659851475669
GPR[SPVATF]-1659851475669
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851478172
GPR[EPVS]-1659851478172
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659851478174
GPR[SPVAP]-1659851478174
GPR[EPVAP]-1659851480210
GPR[SPVATF]-1659851480210
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851482727
GPR[EPVS]-1659851482727
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659851482728
GPR[SPVAP]-1659851482728
GPR[EPVAP]-1659851484781
GPR[SPVATF]-1659851484781
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851487270
GPR[EPVS]-1659851487270
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659851487272
GPR[SPVAP]-1659851487272
GPR[EPVAP]-1659851489353
GPR[SPVATF]-1659851489353
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851491897
GPR[EPVS]-1659851491897
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659851491899
GPR[SPVAP]-1659851491899
GPR[EPVAP]-1659851495782
GPR[SPVATF]-1659851495783
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851498393
GPR[EPVS]-1659851498393
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659851498394
GPR[SPVAP]-1659851498394
GPR[EPVAP]-1659851500484
GPR[SPVATF]-1659851500484
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851503018
GPR[EPVS]-1659851503018
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659851503020
GPR[SPVAP]-1659851503020
GPR[EPVAP]-1659851505043
GPR[SPVATF]-1659851505043
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851507580
GPR[EPVS]-1659851507580
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659851507582
GPR[SPVAP]-1659851507582
GPR[EPVAP]-1659851509616
GPR[SPVATF]-1659851509616
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851512147
GPR[EPVS]-1659851512147
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659851512148
GPR[SPVAP]-1659851512148
GPR[EPVAP]-1659851514213
GPR[SPVATF]-1659851514213
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851516769
GPR[EPVS]-1659851516769
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659851516771
GPR[SPVAP]-1659851516771
GPR[EPVAP]-1659851518857
GPR[SPVATF]-1659851518857
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851521373
GPR[EPVS]-1659851521373
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659851521375
GPR[SPVAP]-1659851521375
GPR[EPVAP]-1659851523429
GPR[SPVATF]-1659851523429
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851525975
GPR[EPVS]-1659851525975
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659851525977
GPR[SPVAP]-1659851525977
GPR[EPVAP]-1659851528030
GPR[SPVATF]-1659851528031
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851530616
GPR[EPVS]-1659851530616
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659851530617
GPR[SPVAP]-1659851530617
GPR[EPVAP]-1659851532660
GPR[SPVATF]-1659851532660
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851535193
GPR[EPVS]-1659851535193
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659851535194
GPR[SPVAP]-1659851535194
GPR[EPVAP]-1659851537269
GPR[SPVATF]-1659851537269
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851539835
GPR[EPVS]-1659851539835
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659851539837
GPR[SPVAP]-1659851539837
GPR[EPVAP]-1659851541983
GPR[SPVATF]-1659851541983
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851544479
GPR[EPVS]-1659851544479
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659851544480
GPR[SPVAP]-1659851544480
GPR[EPVAP]-1659851546601
GPR[SPVATF]-1659851546601
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851549141
GPR[EPVS]-1659851549141
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659851549143
GPR[SPVAP]-1659851549143
GPR[EPVAP]-1659851551183
GPR[SPVATF]-1659851551183
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851553694
GPR[EPVS]-1659851553694
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659851553696
GPR[SPVAP]-1659851553696
GPR[EPVAP]-1659851555777
GPR[SPVATF]-1659851555777
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851558310
GPR[EPVS]-1659851558310
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659851558312
GPR[SPVAP]-1659851558312
GPR[EPVAP]-1659851560340
GPR[SPVATF]-1659851560340
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851562830
GPR[EPVS]-1659851562830
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659851562832
GPR[SPVAP]-1659851562832
GPR[EPVAP]-1659851566906
GPR[SPVATF]-1659851566906
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851569445
GPR[EPVS]-1659851569445
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659851569446
GPR[SPVAP]-1659851569446
GPR[EPVAP]-1659851571534
GPR[SPVATF]-1659851571534
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851574078
GPR[EPVS]-1659851574078
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659851574079
GPR[SPVAP]-1659851574079
GPR[EPVAP]-1659851576120
GPR[SPVATF]-1659851576120
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851578660
GPR[EPVS]-1659851578660
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659851578662
GPR[SPVAP]-1659851578662
GPR[EPVAP]-1659851580711
GPR[SPVATF]-1659851580711
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851583261
GPR[EPVS]-1659851583261
GPR[ESUN]-1659851583263
GPR[SSUN]-1659851583263
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851590299
GPR[SPVAP]-1659851590299
GPR[EPVAP]-1659851596777
GPR[SPVATF]-1659851596777
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851599375
GPR[EPVS]-1659851599375
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659851599376
GPR[SPVAP]-1659851599376
GPR[EPVAP]-1659851600518
GPR[EPVS]-1659851600518
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851600520
GPR[SPVAP]-1659851600520
GPR[EPVAP]-1659851601641
GPR[EPVS]-1659851601641
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851601643
GPR[SPVAP]-1659851601643
GPR[EPVAP]-1659851602761
GPR[EPVS]-1659851602761
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851602763
GPR[SPVAP]-1659851602763
GPR[EPVAP]-1659851603876
GPR[EPVS]-1659851603876
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851603877
GPR[SPVAP]-1659851603877
GPR[EPVAP]-1659851605021
GPR[EPVS]-1659851605021
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851605022
GPR[SPVAP]-1659851605022
GPR[EPVAP]-1659851606128
GPR[EPVS]-1659851606128
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851606131
GPR[SPVAP]-1659851606131
GPR[EPVAP]-1659851608223
GPR[SPVATF]-1659851608223
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851610732
GPR[EPVS]-1659851610732
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851610733
GPR[SPVAP]-1659851610733
GPR[EPVAP]-1659851611837
GPR[EPVS]-1659851611837
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851611839
GPR[SPVAP]-1659851611839
GPR[EPVAP]-1659851613001
GPR[EPVS]-1659851613001
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851613003
GPR[SPVAP]-1659851613003
GPR[EPVAP]-1659851614130
GPR[EPVS]-1659851614130
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851614132
GPR[SPVAP]-1659851614132
GPR[EPVAP]-1659851615232
GPR[EPVS]-1659851615232
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851615234
GPR[SPVAP]-1659851615234
GPR[EPVAP]-1659851616357
GPR[EPVS]-1659851616357
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851616358
GPR[SPVAP]-1659851616358
GPR[EPVAP]-1659851617476
GPR[EPVS]-1659851617476
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851617478
GPR[SPVAP]-1659851617478
GPR[EPVAP]-1659851618601
GPR[EPVS]-1659851618601
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851618602
GPR[SPVAP]-1659851618602
GPR[EPVAP]-1659851619748
GPR[EPVS]-1659851619748
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851619751
GPR[SPVAP]-1659851619751
GPR[EPVAP]-1659851620867
GPR[EPVS]-1659851620867
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851620869
GPR[SPVAP]-1659851620869
GPR[EPVAP]-1659851621977
GPR[EPVS]-1659851621977
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851621980
GPR[SPVAP]-1659851621980
GPR[EPVAP]-1659851623096
GPR[EPVS]-1659851623096
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851623098
GPR[SPVAP]-1659851623098
GPR[EPVAP]-1659851624218
GPR[EPVS]-1659851624218
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851624220
GPR[SPVAP]-1659851624220
GPR[EPVAP]-1659851625348
GPR[EPVS]-1659851625348
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851625350
GPR[SPVAP]-1659851625350
GPR[EPVAP]-1659851627451
GPR[SPVATF]-1659851627451
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851629981
GPR[EPVS]-1659851629981
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659851629984
GPR[SPVAP]-1659851629984
GPR[EPVAP]-1659851631089
GPR[EPVS]-1659851631089
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851631091
GPR[SPVAP]-1659851631091
GPR[EPVAP]-1659851632221
GPR[EPVS]-1659851632221
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851632224
GPR[SPVAP]-1659851632224
GPR[EPVAP]-1659851633330
GPR[EPVS]-1659851633330
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851633332
GPR[SPVAP]-1659851633332
GPR[EPVAP]-1659851634447
GPR[EPVS]-1659851634447
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851634449
GPR[SPVAP]-1659851634449
GPR[EPVAP]-1659851635553
GPR[EPVS]-1659851635553
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851635554
GPR[SPVAP]-1659851635554
GPR[EPVAP]-1659851636662
GPR[EPVS]-1659851636662
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851636663
GPR[SPVAP]-1659851636664
GPR[EPVAP]-1659851637774
GPR[EPVS]-1659851637774
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851637775
GPR[SPVAP]-1659851637775
GPR[EPVAP]-1659851639061
GPR[EPVS]-1659851639061
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851639071
GPR[SPVAP]-1659851639071
GPR[EPVAP]-1659851641425
GPR[EPVS]-1659851641425
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851641426
GPR[SPVAP]-1659851641426
GPR[EPVAP]-1659851642552
GPR[EPVS]-1659851642552
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851642554
GPR[SPVAP]-1659851642554
GPR[EPVAP]-1659851643668
GPR[EPVS]-1659851643668
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851643670
GPR[SPVAP]-1659851643670
GPR[EPVAP]-1659851644804
GPR[EPVS]-1659851644804
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851644805
GPR[SPVAP]-1659851644805
GPR[EPVAP]-1659851646857
GPR[SPVATF]-1659851646857
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851649408
GPR[EPVS]-1659851649408
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851649410
GPR[SPVAP]-1659851649410
GPR[EPVAP]-1659851650523
GPR[EPVS]-1659851650523
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851650524
GPR[SPVAP]-1659851650524
GPR[EPVAP]-1659851651636
GPR[EPVS]-1659851651636
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851651638
GPR[SPVAP]-1659851651638
GPR[EPVAP]-1659851652773
GPR[EPVS]-1659851652773
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851652774
GPR[SPVAP]-1659851652774
GPR[EPVAP]-1659851653928
GPR[EPVS]-1659851653928
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851653929
GPR[SPVAP]-1659851653929
GPR[EPVAP]-1659851655060
GPR[EPVS]-1659851655060
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851655062
GPR[SPVAP]-1659851655062
GPR[EPVAP]-1659851656169
GPR[EPVS]-1659851656169
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851656170
GPR[SPVAP]-1659851656170
GPR[EPVAP]-1659851657277
GPR[EPVS]-1659851657277
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851657280
GPR[SPVAP]-1659851657280
GPR[EPVAP]-1659851658413
GPR[EPVS]-1659851658413
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851658415
GPR[SPVAP]-1659851658415
GPR[EPVAP]-1659851659523
GPR[EPVS]-1659851659523
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851659525
GPR[SPVAP]-1659851659525
GPR[EPVAP]-1659851660621
GPR[EPVS]-1659851660621
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851660622
GPR[SPVAP]-1659851660622
GPR[EPVAP]-1659851661729
GPR[EPVS]-1659851661729
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851661730
GPR[SPVAP]-1659851661730
GPR[EPVAP]-1659851662844
GPR[EPVS]-1659851662844
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851662847
GPR[SPVAP]-1659851662847
GPR[EPVAP]-1659851663957
GPR[EPVS]-1659851663957
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851663959
GPR[SPVAP]-1659851663959
GPR[EPVAP]-1659851665066
GPR[EPVS]-1659851665066
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851665069
GPR[SPVAP]-1659851665069
GPR[EPVAP]-1659851666193
GPR[EPVS]-1659851666193
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851666196
GPR[SPVAP]-1659851666196
GPR[EPVAP]-1659851667308
GPR[EPVS]-1659851667309
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851667310
GPR[SPVAP]-1659851667310
GPR[EPVAP]-1659851668412
GPR[EPVS]-1659851668412
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851668415
GPR[SPVAP]-1659851668415
GPR[EPVAP]-1659851669521
GPR[EPVS]-1659851669521
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851669523
GPR[SPVAP]-1659851669523
GPR[EPVAP]-1659851670623
GPR[EPVS]-1659851670623
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851670625
GPR[SPVAP]-1659851670625
GPR[EPVAP]-1659851671735
GPR[EPVS]-1659851671735
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851671736
GPR[SPVAP]-1659851671736
GPR[EPVAP]-1659851672848
GPR[EPVS]-1659851672848
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851672850
GPR[SPVAP]-1659851672850
GPR[EPVAP]-1659851673991
GPR[EPVS]-1659851673991
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851673992
GPR[SPVAP]-1659851673992
GPR[EPVAP]-1659851675112
GPR[EPVS]-1659851675112
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851675114
GPR[SPVAP]-1659851675114
GPR[EPVAP]-1659851676221
GPR[EPVS]-1659851676221
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851676223
GPR[SPVAP]-1659851676223
GPR[EPVAP]-1659851677327
GPR[EPVS]-1659851677327
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851677328
GPR[SPVAP]-1659851677328
GPR[EPVAP]-1659851678433
GPR[EPVS]-1659851678433
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851678434
GPR[SPVAP]-1659851678434
GPR[EPVAP]-1659851679542
GPR[EPVS]-1659851679542
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851679543
GPR[SPVAP]-1659851679543
GPR[EPVAP]-1659851680670
GPR[EPVS]-1659851680670
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851680673
GPR[SPVAP]-1659851680673
GPR[EPVAP]-1659851682795
GPR[SPVATF]-1659851682795
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851685328
GPR[EPVS]-1659851685328
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851685330
GPR[SPVAP]-1659851685330
GPR[EPVAP]-1659851686441
GPR[EPVS]-1659851686441
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851686444
GPR[SPVAP]-1659851686444
GPR[EPVAP]-1659851687545
GPR[EPVS]-1659851687545
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851687547
GPR[SPVAP]-1659851687547
GPR[EPVAP]-1659851688653
GPR[EPVS]-1659851688653
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851688656
GPR[SPVAP]-1659851688656
GPR[EPVAP]-1659851689783
GPR[EPVS]-1659851689783
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851689786
GPR[SPVAP]-1659851689786
GPR[EPVAP]-1659851690928
GPR[EPVS]-1659851690928
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851690930
GPR[SPVAP]-1659851690930
GPR[EPVAP]-1659851692049
GPR[EPVS]-1659851692049
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851692052
GPR[SPVAP]-1659851692052
GPR[EPVAP]-1659851693190
GPR[EPVS]-1659851693190
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851693194
GPR[SPVAP]-1659851693194
GPR[EPVAP]-1659851694306
GPR[EPVS]-1659851694306
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851694311
GPR[SPVAP]-1659851694311
GPR[EPVAP]-1659851695472
GPR[EPVS]-1659851695472
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851695474
GPR[SPVAP]-1659851695474
GPR[EPVAP]-1659851696545
GPR[EPVS]-1659851696545
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851696547
GPR[SPVAP]-1659851696547
GPR[EPVAP]-1659851697656
GPR[EPVS]-1659851697657
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851697659
GPR[SPVAP]-1659851697659
GPR[EPVAP]-1659851698782
GPR[EPVS]-1659851698782
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851698784
GPR[SPVAP]-1659851698784
GPR[EPVAP]-1659851699909
GPR[EPVS]-1659851699909
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851699914
GPR[SPVAP]-1659851699914
GPR[EPVAP]-1659851701034
GPR[EPVS]-1659851701034
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851701035
GPR[SPVAP]-1659851701035
GPR[EPVAP]-1659851702153
GPR[EPVS]-1659851702153
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851702154
GPR[SPVAP]-1659851702154
GPR[EPVAP]-1659851703261
GPR[EPVS]-1659851703261
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851703262
GPR[SPVAP]-1659851703262
GPR[EPVAP]-1659851704373
GPR[EPVS]-1659851704373
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659851704375
GPR[SPVAP]-1659851704375
GPR[EPVAP]-1659851705473
GPR[EPVS]-1659851705473
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851705475
GPR[SPVAP]-1659851705475
GPR[EPVAP]-1659851706583
GPR[EPVS]-1659851706583
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851706585
GPR[SPVAP]-1659851706585
GPR[EPVAP]-1659851707699
GPR[EPVS]-1659851707699
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851707700
GPR[SPVAP]-1659851707700
GPR[EPVAP]-1659851708809
GPR[EPVS]-1659851708809
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851708815
GPR[SPVAP]-1659851708815
GPR[EPVAP]-1659851709924
GPR[EPVS]-1659851709924
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851709929
GPR[SPVAP]-1659851709929
GPR[EPVAP]-1659851711054
GPR[EPVS]-1659851711055
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851711063
GPR[SPVAP]-1659851711063
GPR[EPVAP]-1659851713689
GPR[EPVS]-1659851713689
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851713691
GPR[SPVAP]-1659851713691
GPR[EPVAP]-1659851714831
GPR[EPVS]-1659851714831
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851714833
GPR[SPVAP]-1659851714833
GPR[EPVAP]-1659851715952
GPR[EPVS]-1659851715952
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851715958
GPR[SPVAP]-1659851715958
GPR[EPVAP]-1659851717084
GPR[EPVS]-1659851717084
GPR[ESUN]-1659851717084
GPR[SSUN]-1659851717084
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851723836
GPR[SPVAP]-1659851723836
GPR[EPVAP]-1659851730381
GPR[SPVATF]-1659851730381
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851732965
GPR[EPVS]-1659851732965
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851732967
GPR[SPVAP]-1659851732967
GPR[EPVAP]-1659851734109
GPR[EPVS]-1659851734109
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851734110
GPR[SPVAP]-1659851734110
GPR[EPVAP]-1659851735227
GPR[EPVS]-1659851735227
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851735228
GPR[SPVAP]-1659851735228
GPR[EPVAP]-1659851737344
GPR[SPVATF]-1659851737344
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851739888
GPR[EPVS]-1659851739888
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659851739890
GPR[SPVAP]-1659851739890
GPR[EPVAP]-1659851741024
GPR[EPVS]-1659851741024
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851741025
GPR[SPVAP]-1659851741025
GPR[EPVAP]-1659851742183
GPR[EPVS]-1659851742183
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851742185
GPR[SPVAP]-1659851742185
GPR[EPVAP]-1659851743335
GPR[EPVS]-1659851743336
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851743337
GPR[SPVAP]-1659851743337
GPR[EPVAP]-1659851744499
GPR[EPVS]-1659851744499
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851744501
GPR[SPVAP]-1659851744501
GPR[EPVAP]-1659851745651
GPR[EPVS]-1659851745651
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851745653
GPR[SPVAP]-1659851745653
GPR[EPVAP]-1659851746766
GPR[EPVS]-1659851746766
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851746767
GPR[SPVAP]-1659851746767
GPR[EPVAP]-1659851747883
GPR[EPVS]-1659851747883
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851747884
GPR[SPVAP]-1659851747884
GPR[EPVAP]-1659851748989
GPR[EPVS]-1659851748989
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851748990
GPR[SPVAP]-1659851748990
GPR[EPVAP]-1659851750136
GPR[EPVS]-1659851750136
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851750137
GPR[SPVAP]-1659851750137
GPR[EPVAP]-1659851751287
GPR[EPVS]-1659851751287
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851751289
GPR[SPVAP]-1659851751289
GPR[EPVAP]-1659851752405
GPR[EPVS]-1659851752405
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851752406
GPR[SPVAP]-1659851752406
GPR[EPVAP]-1659851753537
GPR[EPVS]-1659851753537
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851753538
GPR[SPVAP]-1659851753538
GPR[EPVAP]-1659851754636
GPR[EPVS]-1659851754636
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851754637
GPR[SPVAP]-1659851754637
GPR[EPVAP]-1659851755753
GPR[EPVS]-1659851755753
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851755755
GPR[SPVAP]-1659851755755
GPR[EPVAP]-1659851756862
GPR[EPVS]-1659851756863
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851756864
GPR[SPVAP]-1659851756864
GPR[EPVAP]-1659851757983
GPR[EPVS]-1659851757983
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851757984
GPR[SPVAP]-1659851757984
GPR[EPVAP]-1659851759113
GPR[EPVS]-1659851759113
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851759114
GPR[SPVAP]-1659851759114
GPR[EPVAP]-1659851760242
GPR[EPVS]-1659851760242
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851760245
GPR[SPVAP]-1659851760245
GPR[EPVAP]-1659851761342
GPR[EPVS]-1659851761342
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851761343
GPR[SPVAP]-1659851761343
GPR[EPVAP]-1659851762444
GPR[EPVS]-1659851762444
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851762446
GPR[SPVAP]-1659851762446
GPR[EPVAP]-1659851763557
GPR[EPVS]-1659851763557
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659851763558
GPR[SPVAP]-1659851763558
GPR[EPVAP]-1659851764651
GPR[EPVS]-1659851764651
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851764654
GPR[SPVAP]-1659851764654
GPR[EPVAP]-1659851765770
GPR[EPVS]-1659851765771
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851765772
GPR[SPVAP]-1659851765772
GPR[EPVAP]-1659851766874
GPR[EPVS]-1659851766874
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851766877
GPR[SPVAP]-1659851766877
GPR[EPVAP]-1659851767983
GPR[EPVS]-1659851767983
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851767986
GPR[SPVAP]-1659851767986
GPR[EPVAP]-1659851769115
GPR[EPVS]-1659851769115
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851769117
GPR[SPVAP]-1659851769117
GPR[EPVAP]-1659851770228
GPR[EPVS]-1659851770228
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851770229
GPR[SPVAP]-1659851770229
GPR[EPVAP]-1659851771348
GPR[EPVS]-1659851771348
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851771349
GPR[SPVAP]-1659851771349
GPR[EPVAP]-1659851772469
GPR[EPVS]-1659851772469
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851772470
GPR[SPVAP]-1659851772470
GPR[EPVAP]-1659851773588
GPR[EPVS]-1659851773588
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851773590
GPR[SPVAP]-1659851773590
GPR[EPVAP]-1659851774716
GPR[EPVS]-1659851774716
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851774717
GPR[SPVAP]-1659851774717
GPR[EPVAP]-1659851775855
GPR[EPVS]-1659851775855
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851775856
GPR[SPVAP]-1659851775856
GPR[EPVAP]-1659851776970
GPR[EPVS]-1659851776970
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851776972
GPR[SPVAP]-1659851776972
GPR[EPVAP]-1659851778112
GPR[EPVS]-1659851778112
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851778114
GPR[SPVAP]-1659851778114
GPR[EPVAP]-1659851779229
GPR[EPVS]-1659851779229
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851779230
GPR[SPVAP]-1659851779230
GPR[EPVAP]-1659851780357
GPR[EPVS]-1659851780357
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851780358
GPR[SPVAP]-1659851780358
GPR[EPVAP]-1659851781483
GPR[EPVS]-1659851781483
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851781484
GPR[SPVAP]-1659851781484
GPR[EPVAP]-1659851782625
GPR[EPVS]-1659851782625
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851782627
GPR[SPVAP]-1659851782627
GPR[EPVAP]-1659851785567
GPR[EPVS]-1659851785567
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851785568
GPR[SPVAP]-1659851785568
GPR[EPVAP]-1659851786664
GPR[EPVS]-1659851786664
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851786665
GPR[SPVAP]-1659851786665
GPR[EPVAP]-1659851787781
GPR[EPVS]-1659851787781
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851787782
GPR[SPVAP]-1659851787782
GPR[EPVAP]-1659851788904
GPR[EPVS]-1659851788904
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851788905
GPR[SPVAP]-1659851788905
GPR[EPVAP]-1659851790041
GPR[EPVS]-1659851790041
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851790043
GPR[SPVAP]-1659851790043
GPR[EPVAP]-1659851791169
GPR[EPVS]-1659851791169
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851791174
GPR[SPVAP]-1659851791174
GPR[EPVAP]-1659851792288
GPR[EPVS]-1659851792288
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851792290
GPR[SPVAP]-1659851792290
GPR[EPVAP]-1659851793427
GPR[EPVS]-1659851793427
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851793429
GPR[SPVAP]-1659851793429
GPR[EPVAP]-1659851794532
GPR[EPVS]-1659851794532
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851794534
GPR[SPVAP]-1659851794534
GPR[EPVAP]-1659851795685
GPR[EPVS]-1659851795685
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851795687
GPR[SPVAP]-1659851795687
GPR[EPVAP]-1659851796869
GPR[EPVS]-1659851796869
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851796872
GPR[SPVAP]-1659851796872
GPR[EPVAP]-1659851797979
GPR[EPVS]-1659851797979
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851797980
GPR[SPVAP]-1659851797980
GPR[EPVAP]-1659851799093
GPR[EPVS]-1659851799093
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851799094
GPR[SPVAP]-1659851799094
GPR[EPVAP]-1659851800212
GPR[EPVS]-1659851800212
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851800214
GPR[SPVAP]-1659851800214
GPR[EPVAP]-1659851801378
GPR[EPVS]-1659851801378
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851801381
GPR[SPVAP]-1659851801381
GPR[EPVAP]-1659851802492
GPR[EPVS]-1659851802492
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851802494
GPR[SPVAP]-1659851802494
GPR[EPVAP]-1659851803624
GPR[EPVS]-1659851803624
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851803625
GPR[SPVAP]-1659851803625
GPR[EPVAP]-1659851804736
GPR[EPVS]-1659851804737
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851804738
GPR[SPVAP]-1659851804738
GPR[EPVAP]-1659851805835
GPR[EPVS]-1659851805835
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851805837
GPR[SPVAP]-1659851805837
GPR[EPVAP]-1659851806941
GPR[EPVS]-1659851806941
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851806944
GPR[SPVAP]-1659851806944
GPR[EPVAP]-1659851808050
GPR[EPVS]-1659851808050
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851808052
GPR[SPVAP]-1659851808052
GPR[EPVAP]-1659851809162
GPR[EPVS]-1659851809162
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851809165
GPR[SPVAP]-1659851809165
GPR[EPVAP]-1659851810271
GPR[EPVS]-1659851810271
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851810273
GPR[SPVAP]-1659851810273
GPR[EPVAP]-1659851811376
GPR[EPVS]-1659851811376
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851811378
GPR[SPVAP]-1659851811378
GPR[EPVAP]-1659851812480
GPR[EPVS]-1659851812480
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851812482
GPR[SPVAP]-1659851812482
GPR[EPVAP]-1659851813588
GPR[EPVS]-1659851813588
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851813589
GPR[SPVAP]-1659851813589
GPR[EPVAP]-1659851814701
GPR[EPVS]-1659851814701
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851814702
GPR[SPVAP]-1659851814702
GPR[EPVAP]-1659851815807
GPR[EPVS]-1659851815807
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851815810
GPR[SPVAP]-1659851815810
GPR[EPVAP]-1659851816914
GPR[EPVS]-1659851816914
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851816915
GPR[SPVAP]-1659851816915
GPR[EPVAP]-1659851818016
GPR[EPVS]-1659851818016
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851818018
GPR[SPVAP]-1659851818018
GPR[EPVAP]-1659851819120
GPR[EPVS]-1659851819120
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851819122
GPR[SPVAP]-1659851819122
GPR[EPVAP]-1659851820220
GPR[EPVS]-1659851820220
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851820221
GPR[SPVAP]-1659851820221
GPR[EPVAP]-1659851821332
GPR[EPVS]-1659851821332
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851821334
GPR[SPVAP]-1659851821334
GPR[EPVAP]-1659851823429
GPR[SPVATF]-1659851823429
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851825977
GPR[EPVS]-1659851825977
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851825978
GPR[SPVAP]-1659851825978
GPR[EPVAP]-1659851827117
GPR[EPVS]-1659851827117
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851827118
GPR[SPVAP]-1659851827118
GPR[EPVAP]-1659851828244
GPR[EPVS]-1659851828244
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851828246
GPR[SPVAP]-1659851828246
GPR[EPVAP]-1659851829373
GPR[EPVS]-1659851829373
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851829375
GPR[SPVAP]-1659851829375
GPR[EPVAP]-1659851830476
GPR[EPVS]-1659851830476
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851830478
GPR[SPVAP]-1659851830478
GPR[EPVAP]-1659851831588
GPR[EPVS]-1659851831588
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851831590
GPR[SPVAP]-1659851831590
GPR[EPVAP]-1659851832703
GPR[EPVS]-1659851832703
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851832704
GPR[SPVAP]-1659851832704
GPR[EPVAP]-1659851833815
GPR[EPVS]-1659851833815
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851833816
GPR[SPVAP]-1659851833816
GPR[EPVAP]-1659851834932
GPR[EPVS]-1659851834932
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851834934
GPR[SPVAP]-1659851834934
GPR[EPVAP]-1659851836045
GPR[EPVS]-1659851836045
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851836047
GPR[SPVAP]-1659851836047
GPR[EPVAP]-1659851837150
GPR[EPVS]-1659851837151
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851837153
GPR[SPVAP]-1659851837153
GPR[EPVAP]-1659851838266
GPR[EPVS]-1659851838266
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851838267
GPR[SPVAP]-1659851838267
GPR[EPVAP]-1659851839366
GPR[EPVS]-1659851839366
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851839370
GPR[SPVAP]-1659851839370
GPR[EPVAP]-1659851840489
GPR[EPVS]-1659851840489
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851840491
GPR[SPVAP]-1659851840491
GPR[EPVAP]-1659851841615
GPR[EPVS]-1659851841615
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851841616
GPR[SPVAP]-1659851841616
GPR[EPVAP]-1659851842743
GPR[EPVS]-1659851842743
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851842745
GPR[SPVAP]-1659851842745
GPR[EPVAP]-1659851843851
GPR[EPVS]-1659851843851
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851843853
GPR[SPVAP]-1659851843853
GPR[EPVAP]-1659851844991
GPR[EPVS]-1659851844991
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851844993
GPR[SPVAP]-1659851844993
GPR[EPVAP]-1659851846099
GPR[EPVS]-1659851846099
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851846101
GPR[SPVAP]-1659851846101
GPR[EPVAP]-1659851847203
GPR[EPVS]-1659851847203
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851847205
GPR[SPVAP]-1659851847205
GPR[EPVAP]-1659851848311
GPR[EPVS]-1659851848311
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851848313
GPR[SPVAP]-1659851848313
GPR[EPVAP]-1659851849420
GPR[EPVS]-1659851849420
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851849422
GPR[SPVAP]-1659851849422
GPR[EPVAP]-1659851850525
GPR[EPVS]-1659851850525
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851850527
GPR[SPVAP]-1659851850527
GPR[EPVAP]-1659851851638
GPR[EPVS]-1659851851638
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851851639
GPR[SPVAP]-1659851851639
GPR[EPVAP]-1659851852742
GPR[EPVS]-1659851852742
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851852743
GPR[SPVAP]-1659851852743
GPR[EPVAP]-1659851853865
GPR[EPVS]-1659851853865
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851853868
GPR[SPVAP]-1659851853868
GPR[EPVAP]-1659851855005
GPR[EPVS]-1659851855005
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851855009
GPR[SPVAP]-1659851855009
GPR[EPVAP]-1659851857753
GPR[EPVS]-1659851857753
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659851857756
GPR[SPVAP]-1659851857756
GPR[EPVAP]-1659851858897
GPR[EPVS]-1659851858897
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659851858898
GPR[SPVAP]-1659851858898
GPR[EPVAP]-1659851860000
GPR[EPVS]-1659851860000
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659851860002
GPR[SPVAP]-1659851860003
GPR[EPVAP]-1659851861103
GPR[EPVS]-1659851861103
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851861105
GPR[SPVAP]-1659851861105
GPR[EPVAP]-1659851862234
GPR[EPVS]-1659851862234
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851862235
GPR[SPVAP]-1659851862235
GPR[EPVAP]-1659851863332
GPR[EPVS]-1659851863332
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851863334
GPR[SPVAP]-1659851863334
GPR[EPVAP]-1659851864476
GPR[EPVS]-1659851864476
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851864478
GPR[SPVAP]-1659851864478
GPR[EPVAP]-1659851865586
GPR[EPVS]-1659851865586
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851865587
GPR[SPVAP]-1659851865587
GPR[EPVAP]-1659851866704
GPR[EPVS]-1659851866704
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659851866707
GPR[SPVAP]-1659851866707
GPR[EPVAP]-1659851867849
GPR[EPVS]-1659851867849
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851867854
GPR[SPVAP]-1659851867854
GPR[EPVAP]-1659851868983
GPR[EPVS]-1659851868983
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851868986
GPR[SPVAP]-1659851868986
GPR[EPVAP]-1659851870101
GPR[EPVS]-1659851870101
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659851870105
GPR[SPVAP]-1659851870105
GPR[EPVAP]-1659851871227
GPR[EPVS]-1659851871227
GPR[ESUN]-1659851871227
GPR[SSUN]-1659851871227
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659851871792
GPR[SSUN]-1659851871792
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851878316
GPR[SPVAP]-1659851878316
GPR[EPVAP]-1659851884755
GPR[SPVATF]-1659851884755
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851887299
GPR[EPVS]-1659851887299
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851887302
GPR[SPVAP]-1659851887302
GPR[EPVAP]-1659851888439
GPR[EPVS]-1659851888439
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851888440
GPR[SPVAP]-1659851888440
GPR[EPVAP]-1659851890545
GPR[SPVATF]-1659851890545
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659851893037
GPR[EPVS]-1659851893037
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851893039
GPR[SPVAP]-1659851893039
GPR[EPVAP]-1659851894200
GPR[EPVS]-1659851894200
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851894201
GPR[SPVAP]-1659851894201
GPR[EPVAP]-1659851895337
GPR[EPVS]-1659851895337
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851895338
GPR[SPVAP]-1659851895338
GPR[EPVAP]-1659851896470
GPR[EPVS]-1659851896470
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851896472
GPR[SPVAP]-1659851896472
GPR[EPVAP]-1659851897579
GPR[EPVS]-1659851897579
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851897581
GPR[SPVAP]-1659851897581
GPR[EPVAP]-1659851898766
GPR[EPVS]-1659851898766
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851898768
GPR[SPVAP]-1659851898768
GPR[EPVAP]-1659851899876
GPR[EPVS]-1659851899876
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851899878
GPR[SPVAP]-1659851899878
GPR[EPVAP]-1659851900989
GPR[EPVS]-1659851900989
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851900991
GPR[SPVAP]-1659851900991
GPR[EPVAP]-1659851902097
GPR[EPVS]-1659851902097
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851902098
GPR[SPVAP]-1659851902098
GPR[EPVAP]-1659851903213
GPR[EPVS]-1659851903213
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851903214
GPR[SPVAP]-1659851903214
GPR[EPVAP]-1659851904320
GPR[EPVS]-1659851904320
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851904321
GPR[SPVAP]-1659851904321
GPR[EPVAP]-1659851905445
GPR[EPVS]-1659851905445
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851905447
GPR[SPVAP]-1659851905447
GPR[EPVAP]-1659851906582
GPR[EPVS]-1659851906582
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851906584
GPR[SPVAP]-1659851906584
GPR[EPVAP]-1659851907713
GPR[EPVS]-1659851907713
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851907714
GPR[SPVAP]-1659851907714
GPR[EPVAP]-1659851908823
GPR[EPVS]-1659851908823
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851908825
GPR[SPVAP]-1659851908825
GPR[EPVAP]-1659851909942
GPR[EPVS]-1659851909942
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851909944
GPR[SPVAP]-1659851909944
GPR[EPVAP]-1659851911050
GPR[EPVS]-1659851911050
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851911052
GPR[SPVAP]-1659851911052
GPR[EPVAP]-1659851912163
GPR[EPVS]-1659851912163
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851912164
GPR[SPVAP]-1659851912164
GPR[EPVAP]-1659851913289
GPR[EPVS]-1659851913289
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851913290
GPR[SPVAP]-1659851913290
GPR[EPVAP]-1659851914412
GPR[EPVS]-1659851914412
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851914414
GPR[SPVAP]-1659851914414
GPR[EPVAP]-1659851915543
GPR[EPVS]-1659851915543
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851915544
GPR[SPVAP]-1659851915544
GPR[EPVAP]-1659851916659
GPR[EPVS]-1659851916659
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851916662
GPR[SPVAP]-1659851916662
GPR[EPVAP]-1659851917770
GPR[EPVS]-1659851917770
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851917772
GPR[SPVAP]-1659851917772
GPR[EPVAP]-1659851918902
GPR[EPVS]-1659851918902
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851918904
GPR[SPVAP]-1659851918904
GPR[EPVAP]-1659851920026
GPR[EPVS]-1659851920026
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851920027
GPR[SPVAP]-1659851920027
GPR[EPVAP]-1659851921131
GPR[EPVS]-1659851921131
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851921134
GPR[SPVAP]-1659851921134
GPR[EPVAP]-1659851922253
GPR[EPVS]-1659851922253
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851922255
GPR[SPVAP]-1659851922255
GPR[EPVAP]-1659851923371
GPR[EPVS]-1659851923371
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851923373
GPR[SPVAP]-1659851923373
GPR[EPVAP]-1659851924475
GPR[EPVS]-1659851924475
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851924476
GPR[SPVAP]-1659851924476
GPR[EPVAP]-1659851925585
GPR[EPVS]-1659851925585
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851925587
GPR[SPVAP]-1659851925587
GPR[EPVAP]-1659851926694
GPR[EPVS]-1659851926695
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851926697
GPR[SPVAP]-1659851926697
GPR[EPVAP]-1659851927813
GPR[EPVS]-1659851927813
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851927814
GPR[SPVAP]-1659851927814
GPR[EPVAP]-1659851928943
GPR[EPVS]-1659851928943
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851928945
GPR[SPVAP]-1659851928945
GPR[EPVAP]-1659851930087
GPR[EPVS]-1659851930087
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851930095
GPR[SPVAP]-1659851930095
GPR[EPVAP]-1659851932921
GPR[EPVS]-1659851932921
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851932922
GPR[SPVAP]-1659851932922
GPR[EPVAP]-1659851934049
GPR[EPVS]-1659851934049
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851934051
GPR[SPVAP]-1659851934051
GPR[EPVAP]-1659851935160
GPR[EPVS]-1659851935160
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851935161
GPR[SPVAP]-1659851935161
GPR[EPVAP]-1659851936274
GPR[EPVS]-1659851936274
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851936276
GPR[SPVAP]-1659851936276
GPR[EPVAP]-1659851937385
GPR[EPVS]-1659851937385
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851937387
GPR[SPVAP]-1659851937387
GPR[EPVAP]-1659851938509
GPR[EPVS]-1659851938509
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851938510
GPR[SPVAP]-1659851938510
GPR[EPVAP]-1659851939661
GPR[EPVS]-1659851939661
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851939663
GPR[SPVAP]-1659851939663
GPR[EPVAP]-1659851940761
GPR[EPVS]-1659851940761
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851940762
GPR[SPVAP]-1659851940762
GPR[EPVAP]-1659851941879
GPR[EPVS]-1659851941879
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851941881
GPR[SPVAP]-1659851941881
GPR[EPVAP]-1659851942984
GPR[EPVS]-1659851942984
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851942986
GPR[SPVAP]-1659851942986
GPR[EPVAP]-1659851944097
GPR[EPVS]-1659851944097
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851944101
GPR[SPVAP]-1659851944101
GPR[EPVAP]-1659851945213
GPR[EPVS]-1659851945213
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851945214
GPR[SPVAP]-1659851945214
GPR[EPVAP]-1659851946360
GPR[EPVS]-1659851946360
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851946362
GPR[SPVAP]-1659851946362
GPR[EPVAP]-1659851947470
GPR[EPVS]-1659851947470
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851947471
GPR[SPVAP]-1659851947471
GPR[EPVAP]-1659851948580
GPR[EPVS]-1659851948580
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851948582
GPR[SPVAP]-1659851948582
GPR[EPVAP]-1659851949709
GPR[EPVS]-1659851949709
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851949711
GPR[SPVAP]-1659851949711
GPR[EPVAP]-1659851950826
GPR[EPVS]-1659851950826
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851950827
GPR[SPVAP]-1659851950827
GPR[EPVAP]-1659851951924
GPR[EPVS]-1659851951924
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659851951929
GPR[SPVAP]-1659851951929
GPR[EPVAP]-1659851953035
GPR[EPVS]-1659851953035
GPR[ESUN]-1659851953035
GPR[SSUN]-1659851953035
GPR[ESUN]-1659851953035
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659851954115
GPR[EFL]-1659851954118
GPR[SFP]-1659851954118
TIMEOUT : 600000
GPR[SSUN]-1659851954121
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659851956134
GPR[SPVAP]-1659851956134
GPR[EPVAP]-1659851962652
GPR[SPVATF]-1659851962652
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 0
GPR[EPVATF]-1659851964921
GPR[SPVATR]-1659851964922
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659852031923
GPR[EPVS]-1659852031923
GPR[PF]-1659852031923
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/18/patch_77809_1_ts_1659852031923.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM4019817550928549679/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/18/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/18/patch_77809_1_ts_1659852031923.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659852031933
GPR[SPVAP]-1659852031933
GPR[EPVAP]-1659852033927
GPR[SPVATF]-1659852033927
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852036062
GPR[EPVS]-1659852036062
GPR[ESUN]-1659852036062
GPR[SSUN]-1659852036062
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852038391
GPR[SPVAP]-1659852038391
GPR[EPVAP]-1659852044821
GPR[SPVATF]-1659852044821
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852047051
GPR[EPVS]-1659852047051
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852047052
GPR[SPVAP]-1659852047052
GPR[EPVAP]-1659852049135
GPR[SPVATF]-1659852049135
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852051298
GPR[EPVS]-1659852051298
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852051300
GPR[SPVAP]-1659852051300
GPR[EPVAP]-1659852053392
GPR[SPVATF]-1659852053392
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852055546
GPR[EPVS]-1659852055546
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852055547
GPR[SPVAP]-1659852055547
GPR[EPVAP]-1659852057565
GPR[SPVATF]-1659852057565
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852059702
GPR[EPVS]-1659852059702
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852059703
GPR[SPVAP]-1659852059703
GPR[EPVAP]-1659852061776
GPR[SPVATF]-1659852061776
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852063952
GPR[EPVS]-1659852063952
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852063954
GPR[SPVAP]-1659852063954
GPR[EPVAP]-1659852066067
GPR[SPVATF]-1659852066067
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852068245
GPR[EPVS]-1659852068245
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852068246
GPR[SPVAP]-1659852068246
GPR[EPVAP]-1659852070328
GPR[SPVATF]-1659852070328
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852072538
GPR[EPVS]-1659852072538
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852072540
GPR[SPVAP]-1659852072540
GPR[EPVAP]-1659852074709
GPR[SPVATF]-1659852074709
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852078777
GPR[EPVS]-1659852078777
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852078779
GPR[SPVAP]-1659852078779
GPR[EPVAP]-1659852080843
GPR[SPVATF]-1659852080843
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852082982
GPR[EPVS]-1659852082982
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852082983
GPR[SPVAP]-1659852082983
GPR[EPVAP]-1659852085042
GPR[SPVATF]-1659852085042
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852087149
GPR[EPVS]-1659852087149
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852087151
GPR[SPVAP]-1659852087151
GPR[EPVAP]-1659852089190
GPR[SPVATF]-1659852089190
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852091378
GPR[EPVS]-1659852091378
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852091379
GPR[SPVAP]-1659852091379
GPR[EPVAP]-1659852093439
GPR[SPVATF]-1659852093439
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852095566
GPR[EPVS]-1659852095566
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852095567
GPR[SPVAP]-1659852095567
GPR[EPVAP]-1659852097613
GPR[SPVATF]-1659852097613
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852099742
GPR[EPVS]-1659852099742
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852099744
GPR[SPVAP]-1659852099744
GPR[EPVAP]-1659852101780
GPR[SPVATF]-1659852101780
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852103923
GPR[EPVS]-1659852103923
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852103924
GPR[SPVAP]-1659852103924
GPR[EPVAP]-1659852105976
GPR[SPVATF]-1659852105976
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852108124
GPR[EPVS]-1659852108124
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852108126
GPR[SPVAP]-1659852108126
GPR[EPVAP]-1659852110249
GPR[SPVATF]-1659852110249
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852112428
GPR[EPVS]-1659852112428
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852112429
GPR[SPVAP]-1659852112429
GPR[EPVAP]-1659852114458
GPR[SPVATF]-1659852114458
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852116629
GPR[EPVS]-1659852116629
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852116630
GPR[SPVAP]-1659852116630
GPR[EPVAP]-1659852118682
GPR[SPVATF]-1659852118682
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852120789
GPR[EPVS]-1659852120789
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852120790
GPR[SPVAP]-1659852120790
GPR[EPVAP]-1659852122820
GPR[SPVATF]-1659852122820
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852125033
GPR[EPVS]-1659852125033
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852125035
GPR[SPVAP]-1659852125035
GPR[EPVAP]-1659852127089
GPR[SPVATF]-1659852127089
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852129230
GPR[EPVS]-1659852129230
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852129231
GPR[SPVAP]-1659852129231
GPR[EPVAP]-1659852131298
GPR[SPVATF]-1659852131298
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852133485
GPR[EPVS]-1659852133485
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852133487
GPR[SPVAP]-1659852133487
GPR[EPVAP]-1659852135556
GPR[SPVATF]-1659852135556
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852137708
GPR[EPVS]-1659852137708
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852137709
GPR[SPVAP]-1659852137709
GPR[EPVAP]-1659852139908
GPR[SPVATF]-1659852139908
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852142113
GPR[EPVS]-1659852142113
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852142114
GPR[SPVAP]-1659852142114
GPR[EPVAP]-1659852144161
GPR[SPVATF]-1659852144161
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852146340
GPR[EPVS]-1659852146340
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852146342
GPR[SPVAP]-1659852146342
GPR[EPVAP]-1659852149994
GPR[SPVATF]-1659852149994
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852152171
GPR[EPVS]-1659852152171
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852152173
GPR[SPVAP]-1659852152173
GPR[EPVAP]-1659852154245
GPR[SPVATF]-1659852154245
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852156385
GPR[EPVS]-1659852156385
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852156387
GPR[SPVAP]-1659852156388
GPR[EPVAP]-1659852158461
GPR[SPVATF]-1659852158461
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852160623
GPR[EPVS]-1659852160623
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852160624
GPR[SPVAP]-1659852160624
GPR[EPVAP]-1659852162725
GPR[SPVATF]-1659852162725
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852164897
GPR[EPVS]-1659852164897
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852164899
GPR[SPVAP]-1659852164899
GPR[EPVAP]-1659852166976
GPR[SPVATF]-1659852166976
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852169118
GPR[EPVS]-1659852169119
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852169120
GPR[SPVAP]-1659852169120
GPR[EPVAP]-1659852171184
GPR[SPVATF]-1659852171184
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852173457
GPR[EPVS]-1659852173457
GPR[ESUN]-1659852173459
GPR[SSUN]-1659852173459
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852180639
GPR[SPVAP]-1659852180639
GPR[EPVAP]-1659852187289
GPR[SPVATF]-1659852187289
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852189340
GPR[EPVS]-1659852189340
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659852189342
GPR[SPVAP]-1659852189342
GPR[EPVAP]-1659852190473
GPR[EPVS]-1659852190473
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852190476
GPR[SPVAP]-1659852190476
GPR[EPVAP]-1659852191617
GPR[EPVS]-1659852191617
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852191619
GPR[SPVAP]-1659852191619
GPR[EPVAP]-1659852192730
GPR[EPVS]-1659852192730
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852192733
GPR[SPVAP]-1659852192733
GPR[EPVAP]-1659852193868
GPR[EPVS]-1659852193868
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852193869
GPR[SPVAP]-1659852193869
GPR[EPVAP]-1659852195008
GPR[EPVS]-1659852195008
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852195009
GPR[SPVAP]-1659852195009
GPR[EPVAP]-1659852196153
GPR[EPVS]-1659852196153
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852196157
GPR[SPVAP]-1659852196157
GPR[EPVAP]-1659852198266
GPR[SPVATF]-1659852198266
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852200419
GPR[EPVS]-1659852200419
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852200420
GPR[SPVAP]-1659852200420
GPR[EPVAP]-1659852201529
GPR[EPVS]-1659852201529
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852201530
GPR[SPVAP]-1659852201530
GPR[EPVAP]-1659852202629
GPR[EPVS]-1659852202629
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852202630
GPR[SPVAP]-1659852202630
GPR[EPVAP]-1659852203740
GPR[EPVS]-1659852203740
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852203741
GPR[SPVAP]-1659852203741
GPR[EPVAP]-1659852204868
GPR[EPVS]-1659852204868
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852204870
GPR[SPVAP]-1659852204870
GPR[EPVAP]-1659852205979
GPR[EPVS]-1659852205979
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852205980
GPR[SPVAP]-1659852205980
GPR[EPVAP]-1659852207112
GPR[EPVS]-1659852207112
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852207114
GPR[SPVAP]-1659852207114
GPR[EPVAP]-1659852208242
GPR[EPVS]-1659852208243
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852208244
GPR[SPVAP]-1659852208244
GPR[EPVAP]-1659852209371
GPR[EPVS]-1659852209371
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852209373
GPR[SPVAP]-1659852209373
GPR[EPVAP]-1659852210484
GPR[EPVS]-1659852210484
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852210485
GPR[SPVAP]-1659852210485
GPR[EPVAP]-1659852211592
GPR[EPVS]-1659852211592
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852211594
GPR[SPVAP]-1659852211594
GPR[EPVAP]-1659852212697
GPR[EPVS]-1659852212697
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852212699
GPR[SPVAP]-1659852212699
GPR[EPVAP]-1659852213816
GPR[EPVS]-1659852213816
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852213818
GPR[SPVAP]-1659852213818
GPR[EPVAP]-1659852214926
GPR[EPVS]-1659852214926
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852214927
GPR[SPVAP]-1659852214927
GPR[EPVAP]-1659852216990
GPR[SPVATF]-1659852216990
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852218977
GPR[EPVS]-1659852218977
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659852218980
GPR[SPVAP]-1659852218980
GPR[EPVAP]-1659852220077
GPR[EPVS]-1659852220077
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852220079
GPR[SPVAP]-1659852220079
GPR[EPVAP]-1659852221193
GPR[EPVS]-1659852221193
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852221196
GPR[SPVAP]-1659852221196
GPR[EPVAP]-1659852222309
GPR[EPVS]-1659852222309
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852222311
GPR[SPVAP]-1659852222311
GPR[EPVAP]-1659852224836
GPR[EPVS]-1659852224836
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852224845
GPR[SPVAP]-1659852224845
GPR[EPVAP]-1659852226004
GPR[EPVS]-1659852226004
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852226005
GPR[SPVAP]-1659852226005
GPR[EPVAP]-1659852227107
GPR[EPVS]-1659852227107
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852227108
GPR[SPVAP]-1659852227108
GPR[EPVAP]-1659852228213
GPR[EPVS]-1659852228213
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852228215
GPR[SPVAP]-1659852228215
GPR[EPVAP]-1659852229322
GPR[EPVS]-1659852229322
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852229324
GPR[SPVAP]-1659852229324
GPR[EPVAP]-1659852230447
GPR[EPVS]-1659852230447
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852230449
GPR[SPVAP]-1659852230449
GPR[EPVAP]-1659852231591
GPR[EPVS]-1659852231591
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852231593
GPR[SPVAP]-1659852231593
GPR[EPVAP]-1659852232765
GPR[EPVS]-1659852232765
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852232767
GPR[SPVAP]-1659852232767
GPR[EPVAP]-1659852233912
GPR[EPVS]-1659852233912
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852233914
GPR[SPVAP]-1659852233914
GPR[EPVAP]-1659852236001
GPR[SPVATF]-1659852236001
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852238000
GPR[EPVS]-1659852238000
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852238002
GPR[SPVAP]-1659852238002
GPR[EPVAP]-1659852239104
GPR[EPVS]-1659852239104
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852239105
GPR[SPVAP]-1659852239105
GPR[EPVAP]-1659852240207
GPR[EPVS]-1659852240207
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852240208
GPR[SPVAP]-1659852240208
GPR[EPVAP]-1659852241336
GPR[EPVS]-1659852241336
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852241337
GPR[SPVAP]-1659852241337
GPR[EPVAP]-1659852242445
GPR[EPVS]-1659852242445
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852242446
GPR[SPVAP]-1659852242446
GPR[EPVAP]-1659852243567
GPR[EPVS]-1659852243567
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852243569
GPR[SPVAP]-1659852243569
GPR[EPVAP]-1659852244676
GPR[EPVS]-1659852244676
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852244677
GPR[SPVAP]-1659852244677
GPR[EPVAP]-1659852245784
GPR[EPVS]-1659852245784
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852245787
GPR[SPVAP]-1659852245787
GPR[EPVAP]-1659852246889
GPR[EPVS]-1659852246889
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852246892
GPR[SPVAP]-1659852246892
GPR[EPVAP]-1659852248020
GPR[EPVS]-1659852248020
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852248022
GPR[SPVAP]-1659852248022
GPR[EPVAP]-1659852249157
GPR[EPVS]-1659852249157
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852249159
GPR[SPVAP]-1659852249159
GPR[EPVAP]-1659852250291
GPR[EPVS]-1659852250291
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852250292
GPR[SPVAP]-1659852250292
GPR[EPVAP]-1659852251411
GPR[EPVS]-1659852251411
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852251413
GPR[SPVAP]-1659852251413
GPR[EPVAP]-1659852252527
GPR[EPVS]-1659852252527
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852252528
GPR[SPVAP]-1659852252528
GPR[EPVAP]-1659852253639
GPR[EPVS]-1659852253639
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852253642
GPR[SPVAP]-1659852253642
GPR[EPVAP]-1659852254769
GPR[EPVS]-1659852254769
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852254773
GPR[SPVAP]-1659852254773
GPR[EPVAP]-1659852255920
GPR[EPVS]-1659852255920
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852255922
GPR[SPVAP]-1659852255922
GPR[EPVAP]-1659852257037
GPR[EPVS]-1659852257037
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852257039
GPR[SPVAP]-1659852257039
GPR[EPVAP]-1659852258163
GPR[EPVS]-1659852258163
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852258164
GPR[SPVAP]-1659852258164
GPR[EPVAP]-1659852259269
GPR[EPVS]-1659852259269
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852259271
GPR[SPVAP]-1659852259271
GPR[EPVAP]-1659852260386
GPR[EPVS]-1659852260386
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852260388
GPR[SPVAP]-1659852260388
GPR[EPVAP]-1659852261516
GPR[EPVS]-1659852261516
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852261518
GPR[SPVAP]-1659852261518
GPR[EPVAP]-1659852262667
GPR[EPVS]-1659852262667
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852262668
GPR[SPVAP]-1659852262668
GPR[EPVAP]-1659852263781
GPR[EPVS]-1659852263781
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852263783
GPR[SPVAP]-1659852263783
GPR[EPVAP]-1659852264943
GPR[EPVS]-1659852264943
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852264945
GPR[SPVAP]-1659852264945
GPR[EPVAP]-1659852266072
GPR[EPVS]-1659852266072
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852266073
GPR[SPVAP]-1659852266073
GPR[EPVAP]-1659852267193
GPR[EPVS]-1659852267193
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852267195
GPR[SPVAP]-1659852267195
GPR[EPVAP]-1659852268318
GPR[EPVS]-1659852268318
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852268319
GPR[SPVAP]-1659852268319
GPR[EPVAP]-1659852269469
GPR[EPVS]-1659852269469
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852269472
GPR[SPVAP]-1659852269472
GPR[EPVAP]-1659852271604
GPR[SPVATF]-1659852271604
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852273604
GPR[EPVS]-1659852273604
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852273607
GPR[SPVAP]-1659852273607
GPR[EPVAP]-1659852274726
GPR[EPVS]-1659852274726
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852274729
GPR[SPVAP]-1659852274729
GPR[EPVAP]-1659852275845
GPR[EPVS]-1659852275845
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852275846
GPR[SPVAP]-1659852275846
GPR[EPVAP]-1659852276972
GPR[EPVS]-1659852276972
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852276976
GPR[SPVAP]-1659852276976
GPR[EPVAP]-1659852278115
GPR[EPVS]-1659852278115
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852278118
GPR[SPVAP]-1659852278118
GPR[EPVAP]-1659852279253
GPR[EPVS]-1659852279253
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852279254
GPR[SPVAP]-1659852279254
GPR[EPVAP]-1659852280411
GPR[EPVS]-1659852280411
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852280413
GPR[SPVAP]-1659852280413
GPR[EPVAP]-1659852281576
GPR[EPVS]-1659852281576
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852281581
GPR[SPVAP]-1659852281581
GPR[EPVAP]-1659852282722
GPR[EPVS]-1659852282722
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852282727
GPR[SPVAP]-1659852282727
GPR[EPVAP]-1659852283825
GPR[EPVS]-1659852283825
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852283827
GPR[SPVAP]-1659852283827
GPR[EPVAP]-1659852284947
GPR[EPVS]-1659852284947
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852284949
GPR[SPVAP]-1659852284949
GPR[EPVAP]-1659852286061
GPR[EPVS]-1659852286061
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852286062
GPR[SPVAP]-1659852286062
GPR[EPVAP]-1659852287186
GPR[EPVS]-1659852287186
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852287188
GPR[SPVAP]-1659852287188
GPR[EPVAP]-1659852288314
GPR[EPVS]-1659852288315
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852288319
GPR[SPVAP]-1659852288319
GPR[EPVAP]-1659852289439
GPR[EPVS]-1659852289439
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852289441
GPR[SPVAP]-1659852289441
GPR[EPVAP]-1659852290578
GPR[EPVS]-1659852290579
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852290580
GPR[SPVAP]-1659852290580
GPR[EPVAP]-1659852291750
GPR[EPVS]-1659852291750
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852291752
GPR[SPVAP]-1659852291752
GPR[EPVAP]-1659852292869
GPR[EPVS]-1659852292869
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659852292871
GPR[SPVAP]-1659852292871
GPR[EPVAP]-1659852293989
GPR[EPVS]-1659852293989
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852293991
GPR[SPVAP]-1659852293991
GPR[EPVAP]-1659852295143
GPR[EPVS]-1659852295143
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852295153
GPR[SPVAP]-1659852295153
GPR[EPVAP]-1659852297482
GPR[EPVS]-1659852297482
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852297484
GPR[SPVAP]-1659852297484
GPR[EPVAP]-1659852298593
GPR[EPVS]-1659852298593
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852298599
GPR[SPVAP]-1659852298599
GPR[EPVAP]-1659852299733
GPR[EPVS]-1659852299733
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852299737
GPR[SPVAP]-1659852299737
GPR[EPVAP]-1659852300861
GPR[EPVS]-1659852300861
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852300862
GPR[SPVAP]-1659852300862
GPR[EPVAP]-1659852301975
GPR[EPVS]-1659852301975
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852301977
GPR[SPVAP]-1659852301977
GPR[EPVAP]-1659852303141
GPR[EPVS]-1659852303141
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852303142
GPR[SPVAP]-1659852303142
GPR[EPVAP]-1659852304276
GPR[EPVS]-1659852304276
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852304282
GPR[SPVAP]-1659852304282
GPR[EPVAP]-1659852305409
GPR[EPVS]-1659852305409
GPR[ESUN]-1659852305409
GPR[SSUN]-1659852305409
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852312330
GPR[SPVAP]-1659852312330
GPR[EPVAP]-1659852318950
GPR[SPVATF]-1659852318950
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852320978
GPR[EPVS]-1659852320978
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852320980
GPR[SPVAP]-1659852320980
GPR[EPVAP]-1659852322111
GPR[EPVS]-1659852322111
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852322112
GPR[SPVAP]-1659852322112
GPR[EPVAP]-1659852323225
GPR[EPVS]-1659852323225
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852323226
GPR[SPVAP]-1659852323226
GPR[EPVAP]-1659852325283
GPR[SPVATF]-1659852325283
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852327457
GPR[EPVS]-1659852327457
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659852327458
GPR[SPVAP]-1659852327458
GPR[EPVAP]-1659852328588
GPR[EPVS]-1659852328588
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852328590
GPR[SPVAP]-1659852328590
GPR[EPVAP]-1659852329707
GPR[EPVS]-1659852329707
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852329708
GPR[SPVAP]-1659852329708
GPR[EPVAP]-1659852330819
GPR[EPVS]-1659852330819
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852330821
GPR[SPVAP]-1659852330821
GPR[EPVAP]-1659852331942
GPR[EPVS]-1659852331942
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852331945
GPR[SPVAP]-1659852331945
GPR[EPVAP]-1659852333088
GPR[EPVS]-1659852333088
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852333089
GPR[SPVAP]-1659852333089
GPR[EPVAP]-1659852334225
GPR[EPVS]-1659852334225
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852334226
GPR[SPVAP]-1659852334226
GPR[EPVAP]-1659852335369
GPR[EPVS]-1659852335369
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852335371
GPR[SPVAP]-1659852335371
GPR[EPVAP]-1659852336561
GPR[EPVS]-1659852336561
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852336563
GPR[SPVAP]-1659852336563
GPR[EPVAP]-1659852337685
GPR[EPVS]-1659852337685
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852337687
GPR[SPVAP]-1659852337687
GPR[EPVAP]-1659852338794
GPR[EPVS]-1659852338794
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852338796
GPR[SPVAP]-1659852338796
GPR[EPVAP]-1659852339961
GPR[EPVS]-1659852339961
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852339962
GPR[SPVAP]-1659852339962
GPR[EPVAP]-1659852341105
GPR[EPVS]-1659852341105
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852341106
GPR[SPVAP]-1659852341106
GPR[EPVAP]-1659852342219
GPR[EPVS]-1659852342219
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852342221
GPR[SPVAP]-1659852342221
GPR[EPVAP]-1659852343350
GPR[EPVS]-1659852343350
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852343351
GPR[SPVAP]-1659852343351
GPR[EPVAP]-1659852344476
GPR[EPVS]-1659852344476
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852344478
GPR[SPVAP]-1659852344478
GPR[EPVAP]-1659852345592
GPR[EPVS]-1659852345592
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852345594
GPR[SPVAP]-1659852345594
GPR[EPVAP]-1659852346760
GPR[EPVS]-1659852346760
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852346762
GPR[SPVAP]-1659852346762
GPR[EPVAP]-1659852347889
GPR[EPVS]-1659852347889
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852347891
GPR[SPVAP]-1659852347891
GPR[EPVAP]-1659852349004
GPR[EPVS]-1659852349004
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852349006
GPR[SPVAP]-1659852349006
GPR[EPVAP]-1659852350113
GPR[EPVS]-1659852350113
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852350115
GPR[SPVAP]-1659852350115
GPR[EPVAP]-1659852351224
GPR[EPVS]-1659852351224
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659852351226
GPR[SPVAP]-1659852351226
GPR[EPVAP]-1659852352315
GPR[EPVS]-1659852352315
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852352316
GPR[SPVAP]-1659852352316
GPR[EPVAP]-1659852353422
GPR[EPVS]-1659852353422
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852353424
GPR[SPVAP]-1659852353424
GPR[EPVAP]-1659852354538
GPR[EPVS]-1659852354538
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852354539
GPR[SPVAP]-1659852354539
GPR[EPVAP]-1659852355689
GPR[EPVS]-1659852355689
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852355691
GPR[SPVAP]-1659852355691
GPR[EPVAP]-1659852356809
GPR[EPVS]-1659852356809
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852356810
GPR[SPVAP]-1659852356810
GPR[EPVAP]-1659852357929
GPR[EPVS]-1659852357929
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852357931
GPR[SPVAP]-1659852357931
GPR[EPVAP]-1659852359031
GPR[EPVS]-1659852359031
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852359033
GPR[SPVAP]-1659852359033
GPR[EPVAP]-1659852360162
GPR[EPVS]-1659852360162
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852360163
GPR[SPVAP]-1659852360163
GPR[EPVAP]-1659852361284
GPR[EPVS]-1659852361284
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852361285
GPR[SPVAP]-1659852361285
GPR[EPVAP]-1659852362444
GPR[EPVS]-1659852362444
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852362445
GPR[SPVAP]-1659852362445
GPR[EPVAP]-1659852363569
GPR[EPVS]-1659852363569
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852363570
GPR[SPVAP]-1659852363570
GPR[EPVAP]-1659852364713
GPR[EPVS]-1659852364713
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852364714
GPR[SPVAP]-1659852364714
GPR[EPVAP]-1659852365836
GPR[EPVS]-1659852365836
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852365838
GPR[SPVAP]-1659852365838
GPR[EPVAP]-1659852366957
GPR[EPVS]-1659852366957
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852366958
GPR[SPVAP]-1659852366958
GPR[EPVAP]-1659852369551
GPR[EPVS]-1659852369551
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852369553
GPR[SPVAP]-1659852369553
GPR[EPVAP]-1659852370682
GPR[EPVS]-1659852370682
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852370683
GPR[SPVAP]-1659852370683
GPR[EPVAP]-1659852371793
GPR[EPVS]-1659852371793
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852371795
GPR[SPVAP]-1659852371795
GPR[EPVAP]-1659852372918
GPR[EPVS]-1659852372918
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852372919
GPR[SPVAP]-1659852372919
GPR[EPVAP]-1659852374054
GPR[EPVS]-1659852374055
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852374056
GPR[SPVAP]-1659852374056
GPR[EPVAP]-1659852375189
GPR[EPVS]-1659852375189
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852375190
GPR[SPVAP]-1659852375190
GPR[EPVAP]-1659852376325
GPR[EPVS]-1659852376325
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852376326
GPR[SPVAP]-1659852376326
GPR[EPVAP]-1659852377447
GPR[EPVS]-1659852377447
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852377449
GPR[SPVAP]-1659852377449
GPR[EPVAP]-1659852378565
GPR[EPVS]-1659852378565
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852378571
GPR[SPVAP]-1659852378571
GPR[EPVAP]-1659852379695
GPR[EPVS]-1659852379695
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852379697
GPR[SPVAP]-1659852379697
GPR[EPVAP]-1659852380815
GPR[EPVS]-1659852380815
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852380817
GPR[SPVAP]-1659852380817
GPR[EPVAP]-1659852381961
GPR[EPVS]-1659852381961
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852381962
GPR[SPVAP]-1659852381962
GPR[EPVAP]-1659852383075
GPR[EPVS]-1659852383075
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852383078
GPR[SPVAP]-1659852383078
GPR[EPVAP]-1659852384193
GPR[EPVS]-1659852384193
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852384197
GPR[SPVAP]-1659852384197
GPR[EPVAP]-1659852385312
GPR[EPVS]-1659852385312
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852385313
GPR[SPVAP]-1659852385313
GPR[EPVAP]-1659852386429
GPR[EPVS]-1659852386429
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852386431
GPR[SPVAP]-1659852386431
GPR[EPVAP]-1659852387544
GPR[EPVS]-1659852387544
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852387546
GPR[SPVAP]-1659852387546
GPR[EPVAP]-1659852388688
GPR[EPVS]-1659852388688
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852388690
GPR[SPVAP]-1659852388690
GPR[EPVAP]-1659852389803
GPR[EPVS]-1659852389803
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852389805
GPR[SPVAP]-1659852389805
GPR[EPVAP]-1659852390913
GPR[EPVS]-1659852390913
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852390915
GPR[SPVAP]-1659852390915
GPR[EPVAP]-1659852392019
GPR[EPVS]-1659852392019
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852392020
GPR[SPVAP]-1659852392020
GPR[EPVAP]-1659852393124
GPR[EPVS]-1659852393124
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852393126
GPR[SPVAP]-1659852393126
GPR[EPVAP]-1659852394241
GPR[EPVS]-1659852394241
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852394243
GPR[SPVAP]-1659852394243
GPR[EPVAP]-1659852395365
GPR[EPVS]-1659852395365
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852395366
GPR[SPVAP]-1659852395366
GPR[EPVAP]-1659852396480
GPR[EPVS]-1659852396480
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852396483
GPR[SPVAP]-1659852396483
GPR[EPVAP]-1659852397590
GPR[EPVS]-1659852397590
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852397592
GPR[SPVAP]-1659852397592
GPR[EPVAP]-1659852398716
GPR[EPVS]-1659852398716
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852398717
GPR[SPVAP]-1659852398717
GPR[EPVAP]-1659852399842
GPR[EPVS]-1659852399842
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852399843
GPR[SPVAP]-1659852399843
GPR[EPVAP]-1659852400952
GPR[EPVS]-1659852400952
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852400954
GPR[SPVAP]-1659852400954
GPR[EPVAP]-1659852402063
GPR[EPVS]-1659852402063
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852402065
GPR[SPVAP]-1659852402065
GPR[EPVAP]-1659852403190
GPR[EPVS]-1659852403190
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852403193
GPR[SPVAP]-1659852403193
GPR[EPVAP]-1659852404294
GPR[EPVS]-1659852404294
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852404295
GPR[SPVAP]-1659852404295
GPR[EPVAP]-1659852405399
GPR[EPVS]-1659852405399
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852405401
GPR[SPVAP]-1659852405401
GPR[EPVAP]-1659852406537
GPR[EPVS]-1659852406537
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852406540
GPR[SPVAP]-1659852406540
GPR[EPVAP]-1659852407641
GPR[EPVS]-1659852407641
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852407642
GPR[SPVAP]-1659852407642
GPR[EPVAP]-1659852408754
GPR[EPVS]-1659852408754
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852408757
GPR[SPVAP]-1659852408757
GPR[EPVAP]-1659852410882
GPR[SPVATF]-1659852410882
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852412940
GPR[EPVS]-1659852412940
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852412942
GPR[SPVAP]-1659852412942
GPR[EPVAP]-1659852414068
GPR[EPVS]-1659852414068
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852414070
GPR[SPVAP]-1659852414070
GPR[EPVAP]-1659852415196
GPR[EPVS]-1659852415196
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852415197
GPR[SPVAP]-1659852415198
GPR[EPVAP]-1659852416309
GPR[EPVS]-1659852416309
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852416311
GPR[SPVAP]-1659852416311
GPR[EPVAP]-1659852417523
GPR[EPVS]-1659852417523
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852417524
GPR[SPVAP]-1659852417524
GPR[EPVAP]-1659852418699
GPR[EPVS]-1659852418699
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852418701
GPR[SPVAP]-1659852418701
GPR[EPVAP]-1659852419821
GPR[EPVS]-1659852419821
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852419823
GPR[SPVAP]-1659852419823
GPR[EPVAP]-1659852420976
GPR[EPVS]-1659852420976
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852420978
GPR[SPVAP]-1659852420978
GPR[EPVAP]-1659852422088
GPR[EPVS]-1659852422088
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852422099
GPR[SPVAP]-1659852422099
GPR[EPVAP]-1659852423442
GPR[EPVS]-1659852423442
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852423444
GPR[SPVAP]-1659852423444
GPR[EPVAP]-1659852424583
GPR[EPVS]-1659852424583
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852424585
GPR[SPVAP]-1659852424585
GPR[EPVAP]-1659852425711
GPR[EPVS]-1659852425711
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852425713
GPR[SPVAP]-1659852425713
GPR[EPVAP]-1659852426840
GPR[EPVS]-1659852426840
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852426845
GPR[SPVAP]-1659852426845
GPR[EPVAP]-1659852427989
GPR[EPVS]-1659852427989
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852427991
GPR[SPVAP]-1659852427991
GPR[EPVAP]-1659852429095
GPR[EPVS]-1659852429095
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852429097
GPR[SPVAP]-1659852429097
GPR[EPVAP]-1659852430229
GPR[EPVS]-1659852430229
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852430231
GPR[SPVAP]-1659852430231
GPR[EPVAP]-1659852431375
GPR[EPVS]-1659852431375
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852431376
GPR[SPVAP]-1659852431376
GPR[EPVAP]-1659852432497
GPR[EPVS]-1659852432497
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852432499
GPR[SPVAP]-1659852432499
GPR[EPVAP]-1659852433878
GPR[EPVS]-1659852433878
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852433880
GPR[SPVAP]-1659852433880
GPR[EPVAP]-1659852434977
GPR[EPVS]-1659852434977
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852434986
GPR[SPVAP]-1659852434986
GPR[EPVAP]-1659852436144
GPR[EPVS]-1659852436144
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852436146
GPR[SPVAP]-1659852436146
GPR[EPVAP]-1659852437289
GPR[EPVS]-1659852437289
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852437291
GPR[SPVAP]-1659852437291
GPR[EPVAP]-1659852438433
GPR[EPVS]-1659852438433
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852438435
GPR[SPVAP]-1659852438435
GPR[EPVAP]-1659852439630
GPR[EPVS]-1659852439630
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852439641
GPR[SPVAP]-1659852439641
GPR[EPVAP]-1659852442059
GPR[EPVS]-1659852442059
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852442060
GPR[SPVAP]-1659852442060
GPR[EPVAP]-1659852443183
GPR[EPVS]-1659852443183
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852443186
GPR[SPVAP]-1659852443186
GPR[EPVAP]-1659852444303
GPR[EPVS]-1659852444303
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852444307
GPR[SPVAP]-1659852444307
GPR[EPVAP]-1659852445420
GPR[EPVS]-1659852445420
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659852445423
GPR[SPVAP]-1659852445423
GPR[EPVAP]-1659852446535
GPR[EPVS]-1659852446535
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659852446536
GPR[SPVAP]-1659852446536
GPR[EPVAP]-1659852447641
GPR[EPVS]-1659852447641
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659852447642
GPR[SPVAP]-1659852447642
GPR[EPVAP]-1659852448764
GPR[EPVS]-1659852448764
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852448767
GPR[SPVAP]-1659852448767
GPR[EPVAP]-1659852449886
GPR[EPVS]-1659852449886
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852449888
GPR[SPVAP]-1659852449888
GPR[EPVAP]-1659852450995
GPR[EPVS]-1659852450995
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852450998
GPR[SPVAP]-1659852450998
GPR[EPVAP]-1659852452133
GPR[EPVS]-1659852452133
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852452135
GPR[SPVAP]-1659852452135
GPR[EPVAP]-1659852453253
GPR[EPVS]-1659852453253
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852453254
GPR[SPVAP]-1659852453254
GPR[EPVAP]-1659852454363
GPR[EPVS]-1659852454363
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852454364
GPR[SPVAP]-1659852454364
GPR[EPVAP]-1659852455475
GPR[EPVS]-1659852455475
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852455481
GPR[SPVAP]-1659852455481
GPR[EPVAP]-1659852456597
GPR[EPVS]-1659852456597
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852456599
GPR[SPVAP]-1659852456599
GPR[EPVAP]-1659852457720
GPR[EPVS]-1659852457720
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852457724
GPR[SPVAP]-1659852457724
GPR[EPVAP]-1659852458837
GPR[EPVS]-1659852458837
GPR[ESUN]-1659852458838
GPR[SSUN]-1659852458838
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659852459584
GPR[SSUN]-1659852459584
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852466249
GPR[SPVAP]-1659852466249
GPR[EPVAP]-1659852472699
GPR[SPVATF]-1659852472699
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852474750
GPR[EPVS]-1659852474750
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852474752
GPR[SPVAP]-1659852474752
GPR[EPVAP]-1659852475921
GPR[EPVS]-1659852475921
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852475922
GPR[SPVAP]-1659852475922
GPR[EPVAP]-1659852477994
GPR[SPVATF]-1659852477994
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852480155
GPR[EPVS]-1659852480155
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852480156
GPR[SPVAP]-1659852480156
GPR[EPVAP]-1659852481665
GPR[EPVS]-1659852481665
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852481670
GPR[SPVAP]-1659852481670
GPR[EPVAP]-1659852483877
GPR[EPVS]-1659852483877
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852483879
GPR[SPVAP]-1659852483879
GPR[EPVAP]-1659852485613
GPR[EPVS]-1659852485613
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852485615
GPR[SPVAP]-1659852485615
GPR[EPVAP]-1659852486739
GPR[EPVS]-1659852486739
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852486740
GPR[SPVAP]-1659852486740
GPR[EPVAP]-1659852487854
GPR[EPVS]-1659852487854
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852487856
GPR[SPVAP]-1659852487856
GPR[EPVAP]-1659852488958
GPR[EPVS]-1659852488958
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852488960
GPR[SPVAP]-1659852488960
GPR[EPVAP]-1659852490057
GPR[EPVS]-1659852490057
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852490059
GPR[SPVAP]-1659852490059
GPR[EPVAP]-1659852491184
GPR[EPVS]-1659852491184
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852491186
GPR[SPVAP]-1659852491186
GPR[EPVAP]-1659852492328
GPR[EPVS]-1659852492328
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852492330
GPR[SPVAP]-1659852492330
GPR[EPVAP]-1659852493439
GPR[EPVS]-1659852493439
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852493440
GPR[SPVAP]-1659852493440
GPR[EPVAP]-1659852494568
GPR[EPVS]-1659852494568
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852494570
GPR[SPVAP]-1659852494570
GPR[EPVAP]-1659852495698
GPR[EPVS]-1659852495698
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852495699
GPR[SPVAP]-1659852495699
GPR[EPVAP]-1659852496815
GPR[EPVS]-1659852496815
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852496817
GPR[SPVAP]-1659852496817
GPR[EPVAP]-1659852497944
GPR[EPVS]-1659852497944
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852497946
GPR[SPVAP]-1659852497946
GPR[EPVAP]-1659852499052
GPR[EPVS]-1659852499052
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852499054
GPR[SPVAP]-1659852499054
GPR[EPVAP]-1659852500159
GPR[EPVS]-1659852500159
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852500161
GPR[SPVAP]-1659852500161
GPR[EPVAP]-1659852501289
GPR[EPVS]-1659852501289
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852501290
GPR[SPVAP]-1659852501290
GPR[EPVAP]-1659852502388
GPR[EPVS]-1659852502388
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852502390
GPR[SPVAP]-1659852502390
GPR[EPVAP]-1659852503513
GPR[EPVS]-1659852503513
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852503514
GPR[SPVAP]-1659852503514
GPR[EPVAP]-1659852504638
GPR[EPVS]-1659852504638
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852504639
GPR[SPVAP]-1659852504639
GPR[EPVAP]-1659852505749
GPR[EPVS]-1659852505749
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852505751
GPR[SPVAP]-1659852505751
GPR[EPVAP]-1659852506849
GPR[EPVS]-1659852506849
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852506851
GPR[SPVAP]-1659852506851
GPR[EPVAP]-1659852507952
GPR[EPVS]-1659852507952
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852507953
GPR[SPVAP]-1659852507953
GPR[EPVAP]-1659852509085
GPR[EPVS]-1659852509085
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852509087
GPR[SPVAP]-1659852509087
GPR[EPVAP]-1659852510186
GPR[EPVS]-1659852510186
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852510187
GPR[SPVAP]-1659852510187
GPR[EPVAP]-1659852511300
GPR[EPVS]-1659852511300
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852511301
GPR[SPVAP]-1659852511301
GPR[EPVAP]-1659852512438
GPR[EPVS]-1659852512438
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852512440
GPR[SPVAP]-1659852512440
GPR[EPVAP]-1659852513559
GPR[EPVS]-1659852513559
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852513561
GPR[SPVAP]-1659852513561
GPR[EPVAP]-1659852516214
GPR[EPVS]-1659852516215
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852516217
GPR[SPVAP]-1659852516217
GPR[EPVAP]-1659852517336
GPR[EPVS]-1659852517336
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852517338
GPR[SPVAP]-1659852517338
GPR[EPVAP]-1659852518443
GPR[EPVS]-1659852518443
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852518445
GPR[SPVAP]-1659852518445
GPR[EPVAP]-1659852519580
GPR[EPVS]-1659852519580
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852519581
GPR[SPVAP]-1659852519581
GPR[EPVAP]-1659852520692
GPR[EPVS]-1659852520692
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852520694
GPR[SPVAP]-1659852520694
GPR[EPVAP]-1659852521807
GPR[EPVS]-1659852521807
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852521809
GPR[SPVAP]-1659852521809
GPR[EPVAP]-1659852522962
GPR[EPVS]-1659852522962
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852522964
GPR[SPVAP]-1659852522964
GPR[EPVAP]-1659852524085
GPR[EPVS]-1659852524085
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852524087
GPR[SPVAP]-1659852524087
GPR[EPVAP]-1659852525181
GPR[EPVS]-1659852525181
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852525183
GPR[SPVAP]-1659852525183
GPR[EPVAP]-1659852526306
GPR[EPVS]-1659852526306
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852526308
GPR[SPVAP]-1659852526308
GPR[EPVAP]-1659852527425
GPR[EPVS]-1659852527425
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852527426
GPR[SPVAP]-1659852527426
GPR[EPVAP]-1659852528532
GPR[EPVS]-1659852528532
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852528534
GPR[SPVAP]-1659852528534
GPR[EPVAP]-1659852529639
GPR[EPVS]-1659852529639
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852529641
GPR[SPVAP]-1659852529641
GPR[EPVAP]-1659852530768
GPR[EPVS]-1659852530768
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852530770
GPR[SPVAP]-1659852530770
GPR[EPVAP]-1659852531876
GPR[EPVS]-1659852531876
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852531878
GPR[SPVAP]-1659852531878
GPR[EPVAP]-1659852532988
GPR[EPVS]-1659852532988
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852532995
GPR[SPVAP]-1659852532995
GPR[EPVAP]-1659852534118
GPR[EPVS]-1659852534118
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852534120
GPR[SPVAP]-1659852534120
GPR[EPVAP]-1659852535231
GPR[EPVS]-1659852535231
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852535233
GPR[SPVAP]-1659852535233
GPR[EPVAP]-1659852536345
GPR[EPVS]-1659852536345
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852536346
GPR[SPVAP]-1659852536346
GPR[EPVAP]-1659852537456
GPR[EPVS]-1659852537456
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852537458
GPR[SPVAP]-1659852537458
GPR[EPVAP]-1659852538563
GPR[EPVS]-1659852538563
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852538566
GPR[SPVAP]-1659852538566
GPR[EPVAP]-1659852539691
GPR[EPVS]-1659852539691
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852539692
GPR[SPVAP]-1659852539692
GPR[EPVAP]-1659852540846
GPR[EPVS]-1659852540846
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852540851
GPR[SPVAP]-1659852540851
GPR[EPVAP]-1659852541965
GPR[EPVS]-1659852541965
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852541968
GPR[SPVAP]-1659852541968
GPR[EPVAP]-1659852543079
GPR[EPVS]-1659852543079
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852543080
GPR[SPVAP]-1659852543080
GPR[EPVAP]-1659852544257
GPR[EPVS]-1659852544257
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852544259
GPR[SPVAP]-1659852544259
GPR[EPVAP]-1659852545349
GPR[EPVS]-1659852545349
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852545352
GPR[SPVAP]-1659852545352
GPR[EPVAP]-1659852546454
GPR[EPVS]-1659852546454
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852546458
GPR[SPVAP]-1659852546458
GPR[EPVAP]-1659852547570
GPR[EPVS]-1659852547570
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852547572
GPR[SPVAP]-1659852547572
GPR[EPVAP]-1659852548688
GPR[EPVS]-1659852548688
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852548690
GPR[SPVAP]-1659852548690
GPR[EPVAP]-1659852549792
GPR[EPVS]-1659852549792
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852549793
GPR[SPVAP]-1659852549793
GPR[EPVAP]-1659852550897
GPR[EPVS]-1659852550897
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852550899
GPR[SPVAP]-1659852550899
GPR[EPVAP]-1659852552034
GPR[EPVS]-1659852552034
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852552035
GPR[SPVAP]-1659852552035
GPR[EPVAP]-1659852553165
GPR[EPVS]-1659852553165
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659852553166
GPR[SPVAP]-1659852553166
GPR[EPVAP]-1659852554276
GPR[EPVS]-1659852554276
GPR[ESUN]-1659852554276
GPR[SSUN]-1659852554276
GPR[ESUN]-1659852554276
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659852555276
GPR[EFL]-1659852555280
GPR[SFP]-1659852555280
TIMEOUT : 600000
GPR[SSUN]-1659852555283
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659852557165
GPR[SPVAP]-1659852557165
GPR[EPVAP]-1659852563673
GPR[SPVATF]-1659852563673
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 0
GPR[EPVATF]-1659852565935
GPR[SPVATR]-1659852565935
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659852633117
GPR[EPVS]-1659852633117
GPR[PF]-1659852633117
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/19/patch_77841_1_ts_1659852633117.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM2802313422697007942/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/19/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/19/patch_77841_1_ts_1659852633117.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659852633128
GPR[SPVAP]-1659852633128
GPR[EPVAP]-1659852635173
GPR[SPVATF]-1659852635173
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852637375
GPR[EPVS]-1659852637375
GPR[ESUN]-1659852637375
GPR[SSUN]-1659852637375
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852639701
GPR[SPVAP]-1659852639701
GPR[EPVAP]-1659852646221
GPR[SPVATF]-1659852646221
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852648393
GPR[EPVS]-1659852648393
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852648395
GPR[SPVAP]-1659852648395
GPR[EPVAP]-1659852650465
GPR[SPVATF]-1659852650465
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852652623
GPR[EPVS]-1659852652624
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852652625
GPR[SPVAP]-1659852652625
GPR[EPVAP]-1659852654713
GPR[SPVATF]-1659852654713
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852656891
GPR[EPVS]-1659852656891
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852656893
GPR[SPVAP]-1659852656893
GPR[EPVAP]-1659852660144
GPR[SPVATF]-1659852660145
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852662290
GPR[EPVS]-1659852662290
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852662292
GPR[SPVAP]-1659852662292
GPR[EPVAP]-1659852664333
GPR[SPVATF]-1659852664333
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852666500
GPR[EPVS]-1659852666500
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852666501
GPR[SPVAP]-1659852666501
GPR[EPVAP]-1659852668660
GPR[SPVATF]-1659852668660
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852670827
GPR[EPVS]-1659852670827
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852670828
GPR[SPVAP]-1659852670828
GPR[EPVAP]-1659852672928
GPR[SPVATF]-1659852672928
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852675106
GPR[EPVS]-1659852675106
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852675108
GPR[SPVAP]-1659852675108
GPR[EPVAP]-1659852677172
GPR[SPVATF]-1659852677172
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852679360
GPR[EPVS]-1659852679360
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852679362
GPR[SPVAP]-1659852679362
GPR[EPVAP]-1659852681467
GPR[SPVATF]-1659852681467
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852683651
GPR[EPVS]-1659852683651
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852683653
GPR[SPVAP]-1659852683653
GPR[EPVAP]-1659852685680
GPR[SPVATF]-1659852685680
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852687886
GPR[EPVS]-1659852687886
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852687888
GPR[SPVAP]-1659852687888
GPR[EPVAP]-1659852689929
GPR[SPVATF]-1659852689930
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852692161
GPR[EPVS]-1659852692161
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852692162
GPR[SPVAP]-1659852692162
GPR[EPVAP]-1659852694261
GPR[SPVATF]-1659852694261
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852696428
GPR[EPVS]-1659852696428
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852696429
GPR[SPVAP]-1659852696429
GPR[EPVAP]-1659852698476
GPR[SPVATF]-1659852698476
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852700616
GPR[EPVS]-1659852700616
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852700618
GPR[SPVAP]-1659852700618
GPR[EPVAP]-1659852702675
GPR[SPVATF]-1659852702675
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852704850
GPR[EPVS]-1659852704850
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852704852
GPR[SPVAP]-1659852704852
GPR[EPVAP]-1659852706924
GPR[SPVATF]-1659852706924
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852709113
GPR[EPVS]-1659852709113
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852709115
GPR[SPVAP]-1659852709115
GPR[EPVAP]-1659852711157
GPR[SPVATF]-1659852711157
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852713346
GPR[EPVS]-1659852713346
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852713347
GPR[SPVAP]-1659852713347
GPR[EPVAP]-1659852715397
GPR[SPVATF]-1659852715397
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852717623
GPR[EPVS]-1659852717623
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852717625
GPR[SPVAP]-1659852717625
GPR[EPVAP]-1659852719767
GPR[SPVATF]-1659852719767
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852721935
GPR[EPVS]-1659852721935
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852721937
GPR[SPVAP]-1659852721937
GPR[EPVAP]-1659852724018
GPR[SPVATF]-1659852724018
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852726177
GPR[EPVS]-1659852726177
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852726178
GPR[SPVAP]-1659852726178
GPR[EPVAP]-1659852728231
GPR[SPVATF]-1659852728231
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852732163
GPR[EPVS]-1659852732163
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852732164
GPR[SPVAP]-1659852732164
GPR[EPVAP]-1659852734237
GPR[SPVATF]-1659852734237
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852736416
GPR[EPVS]-1659852736416
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852736417
GPR[SPVAP]-1659852736417
GPR[EPVAP]-1659852738492
GPR[SPVATF]-1659852738492
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852740664
GPR[EPVS]-1659852740664
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852740665
GPR[SPVAP]-1659852740665
GPR[EPVAP]-1659852742749
GPR[SPVATF]-1659852742749
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852744905
GPR[EPVS]-1659852744905
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852744907
GPR[SPVAP]-1659852744907
GPR[EPVAP]-1659852746949
GPR[SPVATF]-1659852746949
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852749172
GPR[EPVS]-1659852749172
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852749174
GPR[SPVAP]-1659852749174
GPR[EPVAP]-1659852751227
GPR[SPVATF]-1659852751227
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852753446
GPR[EPVS]-1659852753446
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659852753448
GPR[SPVAP]-1659852753448
GPR[EPVAP]-1659852755493
GPR[SPVATF]-1659852755493
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852757648
GPR[EPVS]-1659852757648
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852757650
GPR[SPVAP]-1659852757650
GPR[EPVAP]-1659852759683
GPR[SPVATF]-1659852759683
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852761856
GPR[EPVS]-1659852761856
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852761858
GPR[SPVAP]-1659852761858
GPR[EPVAP]-1659852763883
GPR[SPVATF]-1659852763883
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852766029
GPR[EPVS]-1659852766029
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852766030
GPR[SPVAP]-1659852766030
GPR[EPVAP]-1659852768145
GPR[SPVATF]-1659852768145
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852770349
GPR[EPVS]-1659852770349
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659852770351
GPR[SPVAP]-1659852770351
GPR[EPVAP]-1659852772401
GPR[SPVATF]-1659852772401
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852774584
GPR[EPVS]-1659852774584
GPR[ESUN]-1659852774586
GPR[SSUN]-1659852774586
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852781603
GPR[SPVAP]-1659852781603
GPR[EPVAP]-1659852788125
GPR[SPVATF]-1659852788125
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852790137
GPR[EPVS]-1659852790137
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659852790139
GPR[SPVAP]-1659852790139
GPR[EPVAP]-1659852791298
GPR[EPVS]-1659852791298
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852791300
GPR[SPVAP]-1659852791300
GPR[EPVAP]-1659852792416
GPR[EPVS]-1659852792417
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852792418
GPR[SPVAP]-1659852792418
GPR[EPVAP]-1659852793564
GPR[EPVS]-1659852793564
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852793567
GPR[SPVAP]-1659852793567
GPR[EPVAP]-1659852794671
GPR[EPVS]-1659852794671
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852794672
GPR[SPVAP]-1659852794672
GPR[EPVAP]-1659852795793
GPR[EPVS]-1659852795793
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852795794
GPR[SPVAP]-1659852795794
GPR[EPVAP]-1659852796930
GPR[EPVS]-1659852796930
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852796934
GPR[SPVAP]-1659852796934
GPR[EPVAP]-1659852799037
GPR[SPVATF]-1659852799037
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852801198
GPR[EPVS]-1659852801198
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852801200
GPR[SPVAP]-1659852801200
GPR[EPVAP]-1659852802304
GPR[EPVS]-1659852802304
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852802305
GPR[SPVAP]-1659852802305
GPR[EPVAP]-1659852803411
GPR[EPVS]-1659852803411
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852803412
GPR[SPVAP]-1659852803412
GPR[EPVAP]-1659852806208
GPR[EPVS]-1659852806208
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852806209
GPR[SPVAP]-1659852806209
GPR[EPVAP]-1659852807310
GPR[EPVS]-1659852807310
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852807312
GPR[SPVAP]-1659852807312
GPR[EPVAP]-1659852808413
GPR[EPVS]-1659852808413
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852808415
GPR[SPVAP]-1659852808415
GPR[EPVAP]-1659852809542
GPR[EPVS]-1659852809542
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852809544
GPR[SPVAP]-1659852809544
GPR[EPVAP]-1659852810682
GPR[EPVS]-1659852810682
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852810683
GPR[SPVAP]-1659852810683
GPR[EPVAP]-1659852811799
GPR[EPVS]-1659852811799
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852811802
GPR[SPVAP]-1659852811802
GPR[EPVAP]-1659852812912
GPR[EPVS]-1659852812912
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852812913
GPR[SPVAP]-1659852812913
GPR[EPVAP]-1659852814048
GPR[EPVS]-1659852814048
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852814050
GPR[SPVAP]-1659852814050
GPR[EPVAP]-1659852815191
GPR[EPVS]-1659852815191
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852815193
GPR[SPVAP]-1659852815193
GPR[EPVAP]-1659852816317
GPR[EPVS]-1659852816317
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852816319
GPR[SPVAP]-1659852816319
GPR[EPVAP]-1659852817435
GPR[EPVS]-1659852817435
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852817437
GPR[SPVAP]-1659852817437
GPR[EPVAP]-1659852819493
GPR[SPVATF]-1659852819493
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852821502
GPR[EPVS]-1659852821502
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659852821504
GPR[SPVAP]-1659852821504
GPR[EPVAP]-1659852822609
GPR[EPVS]-1659852822609
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852822611
GPR[SPVAP]-1659852822611
GPR[EPVAP]-1659852823718
GPR[EPVS]-1659852823718
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852823720
GPR[SPVAP]-1659852823720
GPR[EPVAP]-1659852824818
GPR[EPVS]-1659852824818
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852824820
GPR[SPVAP]-1659852824820
GPR[EPVAP]-1659852825945
GPR[EPVS]-1659852825945
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852825948
GPR[SPVAP]-1659852825948
GPR[EPVAP]-1659852827053
GPR[EPVS]-1659852827053
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852827054
GPR[SPVAP]-1659852827054
GPR[EPVAP]-1659852828168
GPR[EPVS]-1659852828168
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852828169
GPR[SPVAP]-1659852828169
GPR[EPVAP]-1659852829298
GPR[EPVS]-1659852829298
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852829299
GPR[SPVAP]-1659852829299
GPR[EPVAP]-1659852830417
GPR[EPVS]-1659852830417
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852830419
GPR[SPVAP]-1659852830419
GPR[EPVAP]-1659852831521
GPR[EPVS]-1659852831521
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852831523
GPR[SPVAP]-1659852831523
GPR[EPVAP]-1659852832621
GPR[EPVS]-1659852832621
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852832623
GPR[SPVAP]-1659852832623
GPR[EPVAP]-1659852833792
GPR[EPVS]-1659852833792
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852833795
GPR[SPVAP]-1659852833795
GPR[EPVAP]-1659852834924
GPR[EPVS]-1659852834924
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852834925
GPR[SPVAP]-1659852834925
GPR[EPVAP]-1659852836993
GPR[SPVATF]-1659852836993
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852838987
GPR[EPVS]-1659852838987
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852838989
GPR[SPVAP]-1659852838989
GPR[EPVAP]-1659852840097
GPR[EPVS]-1659852840097
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852840098
GPR[SPVAP]-1659852840098
GPR[EPVAP]-1659852841205
GPR[EPVS]-1659852841205
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852841207
GPR[SPVAP]-1659852841207
GPR[EPVAP]-1659852842312
GPR[EPVS]-1659852842312
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852842313
GPR[SPVAP]-1659852842313
GPR[EPVAP]-1659852843418
GPR[EPVS]-1659852843418
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852843420
GPR[SPVAP]-1659852843420
GPR[EPVAP]-1659852844522
GPR[EPVS]-1659852844522
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852844524
GPR[SPVAP]-1659852844524
GPR[EPVAP]-1659852845633
GPR[EPVS]-1659852845633
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852845634
GPR[SPVAP]-1659852845634
GPR[EPVAP]-1659852846715
GPR[EPVS]-1659852846715
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852846718
GPR[SPVAP]-1659852846718
GPR[EPVAP]-1659852847824
GPR[EPVS]-1659852847824
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852847827
GPR[SPVAP]-1659852847827
GPR[EPVAP]-1659852848934
GPR[EPVS]-1659852848934
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852848937
GPR[SPVAP]-1659852848937
GPR[EPVAP]-1659852850055
GPR[EPVS]-1659852850055
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852850057
GPR[SPVAP]-1659852850057
GPR[EPVAP]-1659852851161
GPR[EPVS]-1659852851161
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852851162
GPR[SPVAP]-1659852851162
GPR[EPVAP]-1659852852275
GPR[EPVS]-1659852852275
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852852278
GPR[SPVAP]-1659852852278
GPR[EPVAP]-1659852853390
GPR[EPVS]-1659852853390
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852853392
GPR[SPVAP]-1659852853392
GPR[EPVAP]-1659852854499
GPR[EPVS]-1659852854499
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852854502
GPR[SPVAP]-1659852854502
GPR[EPVAP]-1659852855609
GPR[EPVS]-1659852855609
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852855612
GPR[SPVAP]-1659852855612
GPR[EPVAP]-1659852856717
GPR[EPVS]-1659852856717
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852856720
GPR[SPVAP]-1659852856720
GPR[EPVAP]-1659852857837
GPR[EPVS]-1659852857837
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852857839
GPR[SPVAP]-1659852857839
GPR[EPVAP]-1659852858965
GPR[EPVS]-1659852858965
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852858967
GPR[SPVAP]-1659852858967
GPR[EPVAP]-1659852860109
GPR[EPVS]-1659852860109
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852860111
GPR[SPVAP]-1659852860111
GPR[EPVAP]-1659852861218
GPR[EPVS]-1659852861218
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852861219
GPR[SPVAP]-1659852861219
GPR[EPVAP]-1659852862321
GPR[EPVS]-1659852862321
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852862323
GPR[SPVAP]-1659852862323
GPR[EPVAP]-1659852863419
GPR[EPVS]-1659852863419
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852863421
GPR[SPVAP]-1659852863421
GPR[EPVAP]-1659852864529
GPR[EPVS]-1659852864529
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852864531
GPR[SPVAP]-1659852864531
GPR[EPVAP]-1659852865645
GPR[EPVS]-1659852865645
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852865646
GPR[SPVAP]-1659852865646
GPR[EPVAP]-1659852866749
GPR[EPVS]-1659852866749
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852866751
GPR[SPVAP]-1659852866751
GPR[EPVAP]-1659852867856
GPR[EPVS]-1659852867856
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852867857
GPR[SPVAP]-1659852867857
GPR[EPVAP]-1659852868994
GPR[EPVS]-1659852868994
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852868996
GPR[SPVAP]-1659852868996
GPR[EPVAP]-1659852870107
GPR[EPVS]-1659852870107
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852870109
GPR[SPVAP]-1659852870109
GPR[EPVAP]-1659852872177
GPR[SPVATF]-1659852872177
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852874143
GPR[EPVS]-1659852874143
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852874145
GPR[SPVAP]-1659852874145
GPR[EPVAP]-1659852875248
GPR[EPVS]-1659852875249
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852875251
GPR[SPVAP]-1659852875251
GPR[EPVAP]-1659852877597
GPR[EPVS]-1659852877597
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852877607
GPR[SPVAP]-1659852877607
GPR[EPVAP]-1659852878993
GPR[EPVS]-1659852878993
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852878997
GPR[SPVAP]-1659852878997
GPR[EPVAP]-1659852880124
GPR[EPVS]-1659852880124
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852880127
GPR[SPVAP]-1659852880127
GPR[EPVAP]-1659852881237
GPR[EPVS]-1659852881237
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852881239
GPR[SPVAP]-1659852881239
GPR[EPVAP]-1659852882411
GPR[EPVS]-1659852882412
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852882413
GPR[SPVAP]-1659852882413
GPR[EPVAP]-1659852883508
GPR[EPVS]-1659852883508
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852883513
GPR[SPVAP]-1659852883513
GPR[EPVAP]-1659852884620
GPR[EPVS]-1659852884620
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852884625
GPR[SPVAP]-1659852884625
GPR[EPVAP]-1659852885728
GPR[EPVS]-1659852885728
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852885730
GPR[SPVAP]-1659852885730
GPR[EPVAP]-1659852886833
GPR[EPVS]-1659852886833
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852886835
GPR[SPVAP]-1659852886835
GPR[EPVAP]-1659852887937
GPR[EPVS]-1659852887937
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852887939
GPR[SPVAP]-1659852887939
GPR[EPVAP]-1659852889051
GPR[EPVS]-1659852889051
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852889053
GPR[SPVAP]-1659852889053
GPR[EPVAP]-1659852890197
GPR[EPVS]-1659852890197
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852890203
GPR[SPVAP]-1659852890203
GPR[EPVAP]-1659852891319
GPR[EPVS]-1659852891319
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852891320
GPR[SPVAP]-1659852891320
GPR[EPVAP]-1659852892444
GPR[EPVS]-1659852892444
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852892446
GPR[SPVAP]-1659852892446
GPR[EPVAP]-1659852893557
GPR[EPVS]-1659852893557
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852893558
GPR[SPVAP]-1659852893558
GPR[EPVAP]-1659852894669
GPR[EPVS]-1659852894669
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659852894670
GPR[SPVAP]-1659852894670
GPR[EPVAP]-1659852895784
GPR[EPVS]-1659852895784
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852895786
GPR[SPVAP]-1659852895786
GPR[EPVAP]-1659852896898
GPR[EPVS]-1659852896898
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852896899
GPR[SPVAP]-1659852896899
GPR[EPVAP]-1659852898019
GPR[EPVS]-1659852898019
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852898020
GPR[SPVAP]-1659852898020
GPR[EPVAP]-1659852899123
GPR[EPVS]-1659852899123
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852899129
GPR[SPVAP]-1659852899129
GPR[EPVAP]-1659852900263
GPR[EPVS]-1659852900263
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852900268
GPR[SPVAP]-1659852900268
GPR[EPVAP]-1659852901379
GPR[EPVS]-1659852901379
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852901380
GPR[SPVAP]-1659852901380
GPR[EPVAP]-1659852902490
GPR[EPVS]-1659852902490
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852902492
GPR[SPVAP]-1659852902492
GPR[EPVAP]-1659852903617
GPR[EPVS]-1659852903617
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852903620
GPR[SPVAP]-1659852903620
GPR[EPVAP]-1659852904752
GPR[EPVS]-1659852904752
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852904757
GPR[SPVAP]-1659852904757
GPR[EPVAP]-1659852905870
GPR[EPVS]-1659852905870
GPR[ESUN]-1659852905871
GPR[SSUN]-1659852905871
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852912454
GPR[SPVAP]-1659852912454
GPR[EPVAP]-1659852918951
GPR[SPVATF]-1659852918951
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852921001
GPR[EPVS]-1659852921001
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852921003
GPR[SPVAP]-1659852921003
GPR[EPVAP]-1659852922088
GPR[EPVS]-1659852922088
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852922090
GPR[SPVAP]-1659852922090
GPR[EPVAP]-1659852923219
GPR[EPVS]-1659852923219
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852923220
GPR[SPVAP]-1659852923220
GPR[EPVAP]-1659852925290
GPR[SPVATF]-1659852925290
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659852927475
GPR[EPVS]-1659852927475
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659852927478
GPR[SPVAP]-1659852927478
GPR[EPVAP]-1659852928609
GPR[EPVS]-1659852928609
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852928611
GPR[SPVAP]-1659852928611
GPR[EPVAP]-1659852929716
GPR[EPVS]-1659852929716
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852929718
GPR[SPVAP]-1659852929718
GPR[EPVAP]-1659852930877
GPR[EPVS]-1659852930877
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852930879
GPR[SPVAP]-1659852930879
GPR[EPVAP]-1659852931981
GPR[EPVS]-1659852931981
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852931984
GPR[SPVAP]-1659852931984
GPR[EPVAP]-1659852933081
GPR[EPVS]-1659852933081
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852933082
GPR[SPVAP]-1659852933082
GPR[EPVAP]-1659852934185
GPR[EPVS]-1659852934185
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852934187
GPR[SPVAP]-1659852934187
GPR[EPVAP]-1659852935310
GPR[EPVS]-1659852935310
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852935311
GPR[SPVAP]-1659852935311
GPR[EPVAP]-1659852936412
GPR[EPVS]-1659852936412
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852936414
GPR[SPVAP]-1659852936414
GPR[EPVAP]-1659852937535
GPR[EPVS]-1659852937535
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852937536
GPR[SPVAP]-1659852937536
GPR[EPVAP]-1659852938649
GPR[EPVS]-1659852938649
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852938650
GPR[SPVAP]-1659852938650
GPR[EPVAP]-1659852939801
GPR[EPVS]-1659852939801
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852939802
GPR[SPVAP]-1659852939802
GPR[EPVAP]-1659852940925
GPR[EPVS]-1659852940925
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852940927
GPR[SPVAP]-1659852940927
GPR[EPVAP]-1659852942040
GPR[EPVS]-1659852942040
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852942042
GPR[SPVAP]-1659852942042
GPR[EPVAP]-1659852943164
GPR[EPVS]-1659852943164
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852943166
GPR[SPVAP]-1659852943166
GPR[EPVAP]-1659852944276
GPR[EPVS]-1659852944276
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852944277
GPR[SPVAP]-1659852944277
GPR[EPVAP]-1659852945408
GPR[EPVS]-1659852945408
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852945409
GPR[SPVAP]-1659852945409
GPR[EPVAP]-1659852946549
GPR[EPVS]-1659852946549
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852946551
GPR[SPVAP]-1659852946551
GPR[EPVAP]-1659852947665
GPR[EPVS]-1659852947665
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852947669
GPR[SPVAP]-1659852947669
GPR[EPVAP]-1659852950511
GPR[EPVS]-1659852950511
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852950513
GPR[SPVAP]-1659852950513
GPR[EPVAP]-1659852951610
GPR[EPVS]-1659852951610
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852951612
GPR[SPVAP]-1659852951612
GPR[EPVAP]-1659852952724
GPR[EPVS]-1659852952724
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659852952725
GPR[SPVAP]-1659852952725
GPR[EPVAP]-1659852953859
GPR[EPVS]-1659852953859
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852953861
GPR[SPVAP]-1659852953861
GPR[EPVAP]-1659852954980
GPR[EPVS]-1659852954980
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852954981
GPR[SPVAP]-1659852954981
GPR[EPVAP]-1659852956079
GPR[EPVS]-1659852956079
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852956081
GPR[SPVAP]-1659852956081
GPR[EPVAP]-1659852957199
GPR[EPVS]-1659852957199
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852957203
GPR[SPVAP]-1659852957203
GPR[EPVAP]-1659852958314
GPR[EPVS]-1659852958315
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852958316
GPR[SPVAP]-1659852958316
GPR[EPVAP]-1659852959458
GPR[EPVS]-1659852959458
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659852959460
GPR[SPVAP]-1659852959460
GPR[EPVAP]-1659852960559
GPR[EPVS]-1659852960559
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852960560
GPR[SPVAP]-1659852960560
GPR[EPVAP]-1659852961672
GPR[EPVS]-1659852961673
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852961674
GPR[SPVAP]-1659852961674
GPR[EPVAP]-1659852962786
GPR[EPVS]-1659852962786
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852962788
GPR[SPVAP]-1659852962788
GPR[EPVAP]-1659852963926
GPR[EPVS]-1659852963926
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852963928
GPR[SPVAP]-1659852963928
GPR[EPVAP]-1659852965056
GPR[EPVS]-1659852965056
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852965058
GPR[SPVAP]-1659852965058
GPR[EPVAP]-1659852966175
GPR[EPVS]-1659852966175
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852966176
GPR[SPVAP]-1659852966176
GPR[EPVAP]-1659852967299
GPR[EPVS]-1659852967299
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852967301
GPR[SPVAP]-1659852967301
GPR[EPVAP]-1659852968423
GPR[EPVS]-1659852968423
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852968425
GPR[SPVAP]-1659852968425
GPR[EPVAP]-1659852969548
GPR[EPVS]-1659852969548
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852969549
GPR[SPVAP]-1659852969549
GPR[EPVAP]-1659852970669
GPR[EPVS]-1659852970669
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852970670
GPR[SPVAP]-1659852970670
GPR[EPVAP]-1659852971786
GPR[EPVS]-1659852971786
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852971787
GPR[SPVAP]-1659852971787
GPR[EPVAP]-1659852972899
GPR[EPVS]-1659852972899
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852972901
GPR[SPVAP]-1659852972901
GPR[EPVAP]-1659852974009
GPR[EPVS]-1659852974009
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852974010
GPR[SPVAP]-1659852974010
GPR[EPVAP]-1659852975132
GPR[EPVS]-1659852975132
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852975134
GPR[SPVAP]-1659852975134
GPR[EPVAP]-1659852976255
GPR[EPVS]-1659852976255
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852976256
GPR[SPVAP]-1659852976256
GPR[EPVAP]-1659852977363
GPR[EPVS]-1659852977363
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852977365
GPR[SPVAP]-1659852977365
GPR[EPVAP]-1659852978487
GPR[EPVS]-1659852978487
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852978491
GPR[SPVAP]-1659852978491
GPR[EPVAP]-1659852979604
GPR[EPVS]-1659852979604
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852979606
GPR[SPVAP]-1659852979606
GPR[EPVAP]-1659852980755
GPR[EPVS]-1659852980755
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852980757
GPR[SPVAP]-1659852980757
GPR[EPVAP]-1659852981863
GPR[EPVS]-1659852981863
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852981865
GPR[SPVAP]-1659852981865
GPR[EPVAP]-1659852982982
GPR[EPVS]-1659852982982
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852982984
GPR[SPVAP]-1659852982984
GPR[EPVAP]-1659852984095
GPR[EPVS]-1659852984095
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852984098
GPR[SPVAP]-1659852984098
GPR[EPVAP]-1659852985219
GPR[EPVS]-1659852985219
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852985220
GPR[SPVAP]-1659852985220
GPR[EPVAP]-1659852986332
GPR[EPVS]-1659852986332
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852986333
GPR[SPVAP]-1659852986333
GPR[EPVAP]-1659852987445
GPR[EPVS]-1659852987445
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852987447
GPR[SPVAP]-1659852987447
GPR[EPVAP]-1659852988564
GPR[EPVS]-1659852988564
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852988567
GPR[SPVAP]-1659852988567
GPR[EPVAP]-1659852989685
GPR[EPVS]-1659852989685
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852989687
GPR[SPVAP]-1659852989687
GPR[EPVAP]-1659852990827
GPR[EPVS]-1659852990827
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852990828
GPR[SPVAP]-1659852990828
GPR[EPVAP]-1659852991953
GPR[EPVS]-1659852991953
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852991954
GPR[SPVAP]-1659852991954
GPR[EPVAP]-1659852993075
GPR[EPVS]-1659852993075
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852993076
GPR[SPVAP]-1659852993076
GPR[EPVAP]-1659852994203
GPR[EPVS]-1659852994203
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852994206
GPR[SPVAP]-1659852994206
GPR[EPVAP]-1659852995313
GPR[EPVS]-1659852995313
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852995315
GPR[SPVAP]-1659852995315
GPR[EPVAP]-1659852996420
GPR[EPVS]-1659852996421
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852996423
GPR[SPVAP]-1659852996423
GPR[EPVAP]-1659852997577
GPR[EPVS]-1659852997577
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852997579
GPR[SPVAP]-1659852997579
GPR[EPVAP]-1659852998671
GPR[EPVS]-1659852998672
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852998673
GPR[SPVAP]-1659852998673
GPR[EPVAP]-1659852999778
GPR[EPVS]-1659852999778
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659852999780
GPR[SPVAP]-1659852999780
GPR[EPVAP]-1659853000889
GPR[EPVS]-1659853000889
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853000891
GPR[SPVAP]-1659853000891
GPR[EPVAP]-1659853002006
GPR[EPVS]-1659853002006
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853002008
GPR[SPVAP]-1659853002008
GPR[EPVAP]-1659853003126
GPR[EPVS]-1659853003126
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853003128
GPR[SPVAP]-1659853003128
GPR[EPVAP]-1659853004226
GPR[EPVS]-1659853004226
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853004228
GPR[SPVAP]-1659853004228
GPR[EPVAP]-1659853005339
GPR[EPVS]-1659853005339
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853005341
GPR[SPVAP]-1659853005341
GPR[EPVAP]-1659853006455
GPR[EPVS]-1659853006455
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853006457
GPR[SPVAP]-1659853006457
GPR[EPVAP]-1659853007628
GPR[EPVS]-1659853007628
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853007630
GPR[SPVAP]-1659853007630
GPR[EPVAP]-1659853008765
GPR[EPVS]-1659853008765
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853008767
GPR[SPVAP]-1659853008767
GPR[EPVAP]-1659853010833
GPR[SPVATF]-1659853010834
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853012865
GPR[EPVS]-1659853012865
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853012867
GPR[SPVAP]-1659853012867
GPR[EPVAP]-1659853014030
GPR[EPVS]-1659853014030
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853014031
GPR[SPVAP]-1659853014031
GPR[EPVAP]-1659853015146
GPR[EPVS]-1659853015146
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853015148
GPR[SPVAP]-1659853015148
GPR[EPVAP]-1659853016269
GPR[EPVS]-1659853016269
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853016271
GPR[SPVAP]-1659853016271
GPR[EPVAP]-1659853017387
GPR[EPVS]-1659853017387
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853017388
GPR[SPVAP]-1659853017388
GPR[EPVAP]-1659853018491
GPR[EPVS]-1659853018491
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853018493
GPR[SPVAP]-1659853018493
GPR[EPVAP]-1659853019597
GPR[EPVS]-1659853019597
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853019598
GPR[SPVAP]-1659853019598
GPR[EPVAP]-1659853022425
GPR[EPVS]-1659853022425
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853022427
GPR[SPVAP]-1659853022427
GPR[EPVAP]-1659853023521
GPR[EPVS]-1659853023521
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853023523
GPR[SPVAP]-1659853023523
GPR[EPVAP]-1659853024626
GPR[EPVS]-1659853024626
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853024629
GPR[SPVAP]-1659853024629
GPR[EPVAP]-1659853025750
GPR[EPVS]-1659853025750
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853025753
GPR[SPVAP]-1659853025753
GPR[EPVAP]-1659853026877
GPR[EPVS]-1659853026877
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853026878
GPR[SPVAP]-1659853026878
GPR[EPVAP]-1659853027992
GPR[EPVS]-1659853027992
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853027997
GPR[SPVAP]-1659853027997
GPR[EPVAP]-1659853029131
GPR[EPVS]-1659853029131
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853029132
GPR[SPVAP]-1659853029132
GPR[EPVAP]-1659853030254
GPR[EPVS]-1659853030254
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853030256
GPR[SPVAP]-1659853030256
GPR[EPVAP]-1659853031379
GPR[EPVS]-1659853031379
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853031380
GPR[SPVAP]-1659853031380
GPR[EPVAP]-1659853032497
GPR[EPVS]-1659853032497
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853032499
GPR[SPVAP]-1659853032499
GPR[EPVAP]-1659853033621
GPR[EPVS]-1659853033621
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853033624
GPR[SPVAP]-1659853033624
GPR[EPVAP]-1659853034719
GPR[EPVS]-1659853034719
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853034722
GPR[SPVAP]-1659853034722
GPR[EPVAP]-1659853035843
GPR[EPVS]-1659853035843
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853035845
GPR[SPVAP]-1659853035845
GPR[EPVAP]-1659853036971
GPR[EPVS]-1659853036971
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853036973
GPR[SPVAP]-1659853036973
GPR[EPVAP]-1659853038095
GPR[EPVS]-1659853038095
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853038096
GPR[SPVAP]-1659853038096
GPR[EPVAP]-1659853039199
GPR[EPVS]-1659853039199
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853039201
GPR[SPVAP]-1659853039201
GPR[EPVAP]-1659853040369
GPR[EPVS]-1659853040369
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853040371
GPR[SPVAP]-1659853040371
GPR[EPVAP]-1659853041486
GPR[EPVS]-1659853041486
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853041488
GPR[SPVAP]-1659853041488
GPR[EPVAP]-1659853042613
GPR[EPVS]-1659853042613
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853042616
GPR[SPVAP]-1659853042616
GPR[EPVAP]-1659853043721
GPR[EPVS]-1659853043721
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853043725
GPR[SPVAP]-1659853043725
GPR[EPVAP]-1659853044833
GPR[EPVS]-1659853044833
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659853044835
GPR[SPVAP]-1659853044835
GPR[EPVAP]-1659853045939
GPR[EPVS]-1659853045939
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659853045940
GPR[SPVAP]-1659853045940
GPR[EPVAP]-1659853047072
GPR[EPVS]-1659853047072
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659853047073
GPR[SPVAP]-1659853047073
GPR[EPVAP]-1659853048177
GPR[EPVS]-1659853048177
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853048180
GPR[SPVAP]-1659853048180
GPR[EPVAP]-1659853049285
GPR[EPVS]-1659853049285
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853049286
GPR[SPVAP]-1659853049286
GPR[EPVAP]-1659853050398
GPR[EPVS]-1659853050398
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853050400
GPR[SPVAP]-1659853050400
GPR[EPVAP]-1659853051519
GPR[EPVS]-1659853051519
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853051521
GPR[SPVAP]-1659853051521
GPR[EPVAP]-1659853052636
GPR[EPVS]-1659853052636
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853052637
GPR[SPVAP]-1659853052637
GPR[EPVAP]-1659853053763
GPR[EPVS]-1659853053763
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853053766
GPR[SPVAP]-1659853053766
GPR[EPVAP]-1659853054935
GPR[EPVS]-1659853054935
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853054940
GPR[SPVAP]-1659853054940
GPR[EPVAP]-1659853056055
GPR[EPVS]-1659853056055
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853056057
GPR[SPVAP]-1659853056057
GPR[EPVAP]-1659853057170
GPR[EPVS]-1659853057170
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853057174
GPR[SPVAP]-1659853057174
GPR[EPVAP]-1659853058285
GPR[EPVS]-1659853058285
GPR[ESUN]-1659853058286
GPR[SSUN]-1659853058286
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659853058956
GPR[SSUN]-1659853058956
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853065522
GPR[SPVAP]-1659853065522
GPR[EPVAP]-1659853071968
GPR[SPVATF]-1659853071968
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853074034
GPR[EPVS]-1659853074034
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853074036
GPR[SPVAP]-1659853074036
GPR[EPVAP]-1659853075187
GPR[EPVS]-1659853075187
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853075189
GPR[SPVAP]-1659853075189
GPR[EPVAP]-1659853077264
GPR[SPVATF]-1659853077264
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853079465
GPR[EPVS]-1659853079465
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853079467
GPR[SPVAP]-1659853079467
GPR[EPVAP]-1659853080605
GPR[EPVS]-1659853080605
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853080606
GPR[SPVAP]-1659853080606
GPR[EPVAP]-1659853081760
GPR[EPVS]-1659853081760
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853081762
GPR[SPVAP]-1659853081762
GPR[EPVAP]-1659853082901
GPR[EPVS]-1659853082901
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853082902
GPR[SPVAP]-1659853082902
GPR[EPVAP]-1659853084007
GPR[EPVS]-1659853084007
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853084008
GPR[SPVAP]-1659853084008
GPR[EPVAP]-1659853085111
GPR[EPVS]-1659853085111
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853085112
GPR[SPVAP]-1659853085112
GPR[EPVAP]-1659853086278
GPR[EPVS]-1659853086278
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853086280
GPR[SPVAP]-1659853086280
GPR[EPVAP]-1659853087405
GPR[EPVS]-1659853087405
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853087408
GPR[SPVAP]-1659853087408
GPR[EPVAP]-1659853088515
GPR[EPVS]-1659853088515
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853088517
GPR[SPVAP]-1659853088517
GPR[EPVAP]-1659853089646
GPR[EPVS]-1659853089646
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853089648
GPR[SPVAP]-1659853089648
GPR[EPVAP]-1659853090788
GPR[EPVS]-1659853090788
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853090790
GPR[SPVAP]-1659853090790
GPR[EPVAP]-1659853091910
GPR[EPVS]-1659853091910
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853091912
GPR[SPVAP]-1659853091913
GPR[EPVAP]-1659853093052
GPR[EPVS]-1659853093052
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853093054
GPR[SPVAP]-1659853093054
GPR[EPVAP]-1659853094171
GPR[EPVS]-1659853094171
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853094172
GPR[SPVAP]-1659853094172
GPR[EPVAP]-1659853096939
GPR[EPVS]-1659853096939
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853096941
GPR[SPVAP]-1659853096941
GPR[EPVAP]-1659853098059
GPR[EPVS]-1659853098059
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853098061
GPR[SPVAP]-1659853098061
GPR[EPVAP]-1659853099175
GPR[EPVS]-1659853099175
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853099177
GPR[SPVAP]-1659853099177
GPR[EPVAP]-1659853100293
GPR[EPVS]-1659853100293
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853100294
GPR[SPVAP]-1659853100294
GPR[EPVAP]-1659853101394
GPR[EPVS]-1659853101394
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853101395
GPR[SPVAP]-1659853101395
GPR[EPVAP]-1659853102504
GPR[EPVS]-1659853102504
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853102506
GPR[SPVAP]-1659853102506
GPR[EPVAP]-1659853103615
GPR[EPVS]-1659853103615
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853103617
GPR[SPVAP]-1659853103617
GPR[EPVAP]-1659853104726
GPR[EPVS]-1659853104726
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853104728
GPR[SPVAP]-1659853104729
GPR[EPVAP]-1659853105837
GPR[EPVS]-1659853105837
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853105839
GPR[SPVAP]-1659853105839
GPR[EPVAP]-1659853106946
GPR[EPVS]-1659853106946
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853106948
GPR[SPVAP]-1659853106948
GPR[EPVAP]-1659853108073
GPR[EPVS]-1659853108073
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853108074
GPR[SPVAP]-1659853108074
GPR[EPVAP]-1659853109173
GPR[EPVS]-1659853109173
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853109174
GPR[SPVAP]-1659853109174
GPR[EPVAP]-1659853110309
GPR[EPVS]-1659853110309
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853110310
GPR[SPVAP]-1659853110310
GPR[EPVAP]-1659853111430
GPR[EPVS]-1659853111430
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853111431
GPR[SPVAP]-1659853111431
GPR[EPVAP]-1659853112557
GPR[EPVS]-1659853112557
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853112558
GPR[SPVAP]-1659853112558
GPR[EPVAP]-1659853113663
GPR[EPVS]-1659853113663
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853113665
GPR[SPVAP]-1659853113665
GPR[EPVAP]-1659853114764
GPR[EPVS]-1659853114764
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853114767
GPR[SPVAP]-1659853114767
GPR[EPVAP]-1659853115879
GPR[EPVS]-1659853115879
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853115880
GPR[SPVAP]-1659853115880
GPR[EPVAP]-1659853116992
GPR[EPVS]-1659853116992
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853116994
GPR[SPVAP]-1659853116994
GPR[EPVAP]-1659853118116
GPR[EPVS]-1659853118116
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853118118
GPR[SPVAP]-1659853118118
GPR[EPVAP]-1659853119235
GPR[EPVS]-1659853119235
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853119237
GPR[SPVAP]-1659853119237
GPR[EPVAP]-1659853120378
GPR[EPVS]-1659853120378
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853120380
GPR[SPVAP]-1659853120380
GPR[EPVAP]-1659853121524
GPR[EPVS]-1659853121524
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853121526
GPR[SPVAP]-1659853121526
GPR[EPVAP]-1659853122677
GPR[EPVS]-1659853122677
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853122679
GPR[SPVAP]-1659853122679
GPR[EPVAP]-1659853123793
GPR[EPVS]-1659853123793
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853123794
GPR[SPVAP]-1659853123794
GPR[EPVAP]-1659853124899
GPR[EPVS]-1659853124899
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853124900
GPR[SPVAP]-1659853124900
GPR[EPVAP]-1659853126008
GPR[EPVS]-1659853126008
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853126009
GPR[SPVAP]-1659853126009
GPR[EPVAP]-1659853127135
GPR[EPVS]-1659853127135
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853127137
GPR[SPVAP]-1659853127137
GPR[EPVAP]-1659853128274
GPR[EPVS]-1659853128274
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853128276
GPR[SPVAP]-1659853128276
GPR[EPVAP]-1659853129387
GPR[EPVS]-1659853129387
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853129388
GPR[SPVAP]-1659853129388
GPR[EPVAP]-1659853130515
GPR[EPVS]-1659853130515
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853130519
GPR[SPVAP]-1659853130519
GPR[EPVAP]-1659853131629
GPR[EPVS]-1659853131629
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853131631
GPR[SPVAP]-1659853131631
GPR[EPVAP]-1659853132742
GPR[EPVS]-1659853132742
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853132744
GPR[SPVAP]-1659853132744
GPR[EPVAP]-1659853133856
GPR[EPVS]-1659853133856
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853133858
GPR[SPVAP]-1659853133858
GPR[EPVAP]-1659853134977
GPR[EPVS]-1659853134977
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853134978
GPR[SPVAP]-1659853134978
GPR[EPVAP]-1659853136082
GPR[EPVS]-1659853136083
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853136085
GPR[SPVAP]-1659853136085
GPR[EPVAP]-1659853137193
GPR[EPVS]-1659853137193
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853137194
GPR[SPVAP]-1659853137194
GPR[EPVAP]-1659853138313
GPR[EPVS]-1659853138313
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853138318
GPR[SPVAP]-1659853138318
GPR[EPVAP]-1659853139430
GPR[EPVS]-1659853139430
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853139434
GPR[SPVAP]-1659853139434
GPR[EPVAP]-1659853140549
GPR[EPVS]-1659853140549
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853140550
GPR[SPVAP]-1659853140550
GPR[EPVAP]-1659853141661
GPR[EPVS]-1659853141661
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853141662
GPR[SPVAP]-1659853141662
GPR[EPVAP]-1659853142797
GPR[EPVS]-1659853142797
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853142799
GPR[SPVAP]-1659853142799
GPR[EPVAP]-1659853143930
GPR[EPVS]-1659853143930
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853143934
GPR[SPVAP]-1659853143934
GPR[EPVAP]-1659853145051
GPR[EPVS]-1659853145052
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853145054
GPR[SPVAP]-1659853145054
GPR[EPVAP]-1659853146204
GPR[EPVS]-1659853146204
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853146206
GPR[SPVAP]-1659853146206
GPR[EPVAP]-1659853147308
GPR[EPVS]-1659853147308
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853147310
GPR[SPVAP]-1659853147310
GPR[EPVAP]-1659853148418
GPR[EPVS]-1659853148418
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853148420
GPR[SPVAP]-1659853148420
GPR[EPVAP]-1659853149533
GPR[EPVS]-1659853149533
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853149535
GPR[SPVAP]-1659853149535
GPR[EPVAP]-1659853150693
GPR[EPVS]-1659853150693
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853150695
GPR[SPVAP]-1659853150695
GPR[EPVAP]-1659853151789
GPR[EPVS]-1659853151789
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853151791
GPR[SPVAP]-1659853151791
GPR[EPVAP]-1659853152917
GPR[EPVS]-1659853152917
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853152919
GPR[SPVAP]-1659853152919
GPR[EPVAP]-1659853154049
GPR[EPVS]-1659853154049
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853154050
GPR[SPVAP]-1659853154050
GPR[EPVAP]-1659853155164
GPR[EPVS]-1659853155164
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853155166
GPR[SPVAP]-1659853155166
GPR[EPVAP]-1659853156278
GPR[EPVS]-1659853156278
GPR[ESUN]-1659853156278
GPR[SSUN]-1659853156278
GPR[ESUN]-1659853156278
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659853157203
GPR[EFL]-1659853157206
GPR[SFP]-1659853157206
TIMEOUT : 600000
GPR[SSUN]-1659853157210
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659853159166
GPR[SPVAP]-1659853159166
GPR[EPVAP]-1659853165644
GPR[SPVATF]-1659853165644
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 0
GPR[EPVATF]-1659853169337
GPR[SPVATR]-1659853169338
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659853234898
GPR[EPVS]-1659853234898
GPR[PF]-1659853234898
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/20/patch_77695_1_ts_1659853234898.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM6731107634641202200/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/20/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/20/patch_77695_1_ts_1659853234898.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659853234908
GPR[SPVAP]-1659853234908
GPR[EPVAP]-1659853236900
GPR[SPVATF]-1659853236900
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853240070
GPR[EPVS]-1659853240070
GPR[ESUN]-1659853240071
GPR[SSUN]-1659853240071
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853243333
GPR[SPVAP]-1659853243333
GPR[EPVAP]-1659853249818
GPR[SPVATF]-1659853249818
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853251838
GPR[EPVS]-1659853251838
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853251840
GPR[SPVAP]-1659853251840
GPR[EPVAP]-1659853253944
GPR[SPVATF]-1659853253944
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853255962
GPR[EPVS]-1659853255962
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853255963
GPR[SPVAP]-1659853255963
GPR[EPVAP]-1659853258038
GPR[SPVATF]-1659853258038
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853259994
GPR[EPVS]-1659853259994
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853259996
GPR[SPVAP]-1659853259996
GPR[EPVAP]-1659853262057
GPR[SPVATF]-1659853262057
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853264014
GPR[EPVS]-1659853264014
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853264016
GPR[SPVAP]-1659853264016
GPR[EPVAP]-1659853266078
GPR[SPVATF]-1659853266078
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853268050
GPR[EPVS]-1659853268050
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853268051
GPR[SPVAP]-1659853268051
GPR[EPVAP]-1659853270120
GPR[SPVATF]-1659853270120
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853272105
GPR[EPVS]-1659853272105
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853272107
GPR[SPVAP]-1659853272107
GPR[EPVAP]-1659853274175
GPR[SPVATF]-1659853274175
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853276129
GPR[EPVS]-1659853276129
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853276130
GPR[SPVAP]-1659853276130
GPR[EPVAP]-1659853278171
GPR[SPVATF]-1659853278171
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853280150
GPR[EPVS]-1659853280150
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853280151
GPR[SPVAP]-1659853280151
GPR[EPVAP]-1659853282207
GPR[SPVATF]-1659853282207
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853284177
GPR[EPVS]-1659853284177
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853284179
GPR[SPVAP]-1659853284179
GPR[EPVAP]-1659853286239
GPR[SPVATF]-1659853286239
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853288206
GPR[EPVS]-1659853288206
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853288208
GPR[SPVAP]-1659853288208
GPR[EPVAP]-1659853290287
GPR[SPVATF]-1659853290287
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853292251
GPR[EPVS]-1659853292251
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853292253
GPR[SPVAP]-1659853292253
GPR[EPVAP]-1659853294340
GPR[SPVATF]-1659853294340
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853296351
GPR[EPVS]-1659853296351
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853296353
GPR[SPVAP]-1659853296353
GPR[EPVAP]-1659853298468
GPR[SPVATF]-1659853298468
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853300482
GPR[EPVS]-1659853300482
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853300484
GPR[SPVAP]-1659853300484
GPR[EPVAP]-1659853302529
GPR[SPVATF]-1659853302529
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853304546
GPR[EPVS]-1659853304546
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853304548
GPR[SPVAP]-1659853304548
GPR[EPVAP]-1659853306613
GPR[SPVATF]-1659853306613
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853308570
GPR[EPVS]-1659853308570
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853308571
GPR[SPVAP]-1659853308571
GPR[EPVAP]-1659853310608
GPR[SPVATF]-1659853310608
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853314317
GPR[EPVS]-1659853314317
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853314319
GPR[SPVAP]-1659853314319
GPR[EPVAP]-1659853316369
GPR[SPVATF]-1659853316369
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853318349
GPR[EPVS]-1659853318349
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853318352
GPR[SPVAP]-1659853318352
GPR[EPVAP]-1659853320456
GPR[SPVATF]-1659853320456
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853322450
GPR[EPVS]-1659853322450
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853322451
GPR[SPVAP]-1659853322451
GPR[EPVAP]-1659853324473
GPR[SPVATF]-1659853324473
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853326438
GPR[EPVS]-1659853326438
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853326440
GPR[SPVAP]-1659853326440
GPR[EPVAP]-1659853328497
GPR[SPVATF]-1659853328497
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853330506
GPR[EPVS]-1659853330506
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853330507
GPR[SPVAP]-1659853330507
GPR[EPVAP]-1659853332584
GPR[SPVATF]-1659853332584
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853334553
GPR[EPVS]-1659853334553
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853334554
GPR[SPVAP]-1659853334554
GPR[EPVAP]-1659853336617
GPR[SPVATF]-1659853336617
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853338612
GPR[EPVS]-1659853338612
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853338613
GPR[SPVAP]-1659853338613
GPR[EPVAP]-1659853340665
GPR[SPVATF]-1659853340665
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853343244
GPR[EPVS]-1659853343244
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853343246
GPR[SPVAP]-1659853343246
GPR[EPVAP]-1659853345307
GPR[SPVATF]-1659853345307
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853347322
GPR[EPVS]-1659853347322
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853347323
GPR[SPVAP]-1659853347323
GPR[EPVAP]-1659853349411
GPR[SPVATF]-1659853349411
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853351373
GPR[EPVS]-1659853351373
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853351375
GPR[SPVAP]-1659853351375
GPR[EPVAP]-1659853353429
GPR[SPVATF]-1659853353429
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853355389
GPR[EPVS]-1659853355389
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853355390
GPR[SPVAP]-1659853355390
GPR[EPVAP]-1659853357456
GPR[SPVATF]-1659853357456
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853359427
GPR[EPVS]-1659853359427
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853359428
GPR[SPVAP]-1659853359428
GPR[EPVAP]-1659853361481
GPR[SPVATF]-1659853361481
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853363451
GPR[EPVS]-1659853363451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853363453
GPR[SPVAP]-1659853363453
GPR[EPVAP]-1659853365508
GPR[SPVATF]-1659853365508
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853367485
GPR[EPVS]-1659853367485
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853367487
GPR[SPVAP]-1659853367487
GPR[EPVAP]-1659853369593
GPR[SPVATF]-1659853369593
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853371577
GPR[EPVS]-1659853371577
GPR[ESUN]-1659853371579
GPR[SSUN]-1659853371579
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853378567
GPR[SPVAP]-1659853378567
GPR[EPVAP]-1659853385159
GPR[SPVATF]-1659853385159
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853389028
GPR[EPVS]-1659853389028
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659853389030
GPR[SPVAP]-1659853389030
GPR[EPVAP]-1659853390149
GPR[EPVS]-1659853390149
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853390150
GPR[SPVAP]-1659853390150
GPR[EPVAP]-1659853391255
GPR[EPVS]-1659853391255
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853391257
GPR[SPVAP]-1659853391257
GPR[EPVAP]-1659853392375
GPR[EPVS]-1659853392375
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853392378
GPR[SPVAP]-1659853392378
GPR[EPVAP]-1659853393487
GPR[EPVS]-1659853393487
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853393488
GPR[SPVAP]-1659853393488
GPR[EPVAP]-1659853394680
GPR[EPVS]-1659853394680
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853394681
GPR[SPVAP]-1659853394681
GPR[EPVAP]-1659853395813
GPR[EPVS]-1659853395813
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853395817
GPR[SPVAP]-1659853395817
GPR[EPVAP]-1659853397907
GPR[SPVATF]-1659853397907
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853399905
GPR[EPVS]-1659853399905
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853399906
GPR[SPVAP]-1659853399906
GPR[EPVAP]-1659853401023
GPR[EPVS]-1659853401023
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853401024
GPR[SPVAP]-1659853401024
GPR[EPVAP]-1659853402136
GPR[EPVS]-1659853402136
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853402137
GPR[SPVAP]-1659853402137
GPR[EPVAP]-1659853403246
GPR[EPVS]-1659853403246
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853403247
GPR[SPVAP]-1659853403247
GPR[EPVAP]-1659853404371
GPR[EPVS]-1659853404371
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853404373
GPR[SPVAP]-1659853404373
GPR[EPVAP]-1659853405485
GPR[EPVS]-1659853405485
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853405486
GPR[SPVAP]-1659853405486
GPR[EPVAP]-1659853406597
GPR[EPVS]-1659853406597
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853406598
GPR[SPVAP]-1659853406598
GPR[EPVAP]-1659853407741
GPR[EPVS]-1659853407741
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853407743
GPR[SPVAP]-1659853407743
GPR[EPVAP]-1659853408877
GPR[EPVS]-1659853408877
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853408878
GPR[SPVAP]-1659853408878
GPR[EPVAP]-1659853410006
GPR[EPVS]-1659853410006
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853410007
GPR[SPVAP]-1659853410007
GPR[EPVAP]-1659853411105
GPR[EPVS]-1659853411105
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853411107
GPR[SPVAP]-1659853411107
GPR[EPVAP]-1659853412256
GPR[EPVS]-1659853412256
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853412258
GPR[SPVAP]-1659853412258
GPR[EPVAP]-1659853413370
GPR[EPVS]-1659853413370
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853413372
GPR[SPVAP]-1659853413372
GPR[EPVAP]-1659853414485
GPR[EPVS]-1659853414485
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853414487
GPR[SPVAP]-1659853414487
GPR[EPVAP]-1659853416553
GPR[SPVATF]-1659853416553
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853418505
GPR[EPVS]-1659853418505
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659853418507
GPR[SPVAP]-1659853418507
GPR[EPVAP]-1659853419618
GPR[EPVS]-1659853419618
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853419619
GPR[SPVAP]-1659853419619
GPR[EPVAP]-1659853420717
GPR[EPVS]-1659853420717
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853420720
GPR[SPVAP]-1659853420720
GPR[EPVAP]-1659853421831
GPR[EPVS]-1659853421831
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853421833
GPR[SPVAP]-1659853421833
GPR[EPVAP]-1659853422941
GPR[EPVS]-1659853422941
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853422944
GPR[SPVAP]-1659853422944
GPR[EPVAP]-1659853424051
GPR[EPVS]-1659853424051
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853424052
GPR[SPVAP]-1659853424052
GPR[EPVAP]-1659853425160
GPR[EPVS]-1659853425160
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853425162
GPR[SPVAP]-1659853425162
GPR[EPVAP]-1659853426265
GPR[EPVS]-1659853426265
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853426266
GPR[SPVAP]-1659853426266
GPR[EPVAP]-1659853427386
GPR[EPVS]-1659853427386
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853427388
GPR[SPVAP]-1659853427388
GPR[EPVAP]-1659853428506
GPR[EPVS]-1659853428506
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853428507
GPR[SPVAP]-1659853428507
GPR[EPVAP]-1659853429635
GPR[EPVS]-1659853429635
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853429638
GPR[SPVAP]-1659853429638
GPR[EPVAP]-1659853430749
GPR[EPVS]-1659853430749
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853430751
GPR[SPVAP]-1659853430751
GPR[EPVAP]-1659853431912
GPR[EPVS]-1659853431912
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853431913
GPR[SPVAP]-1659853431913
GPR[EPVAP]-1659853434003
GPR[SPVATF]-1659853434003
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853436008
GPR[EPVS]-1659853436008
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853436010
GPR[SPVAP]-1659853436010
GPR[EPVAP]-1659853437129
GPR[EPVS]-1659853437129
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853437130
GPR[SPVAP]-1659853437130
GPR[EPVAP]-1659853438255
GPR[EPVS]-1659853438255
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853438257
GPR[SPVAP]-1659853438257
GPR[EPVAP]-1659853439365
GPR[EPVS]-1659853439365
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853439366
GPR[SPVAP]-1659853439366
GPR[EPVAP]-1659853440549
GPR[EPVS]-1659853440549
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853440550
GPR[SPVAP]-1659853440550
GPR[EPVAP]-1659853441669
GPR[EPVS]-1659853441669
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853441671
GPR[SPVAP]-1659853441671
GPR[EPVAP]-1659853442776
GPR[EPVS]-1659853442776
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853442777
GPR[SPVAP]-1659853442777
GPR[EPVAP]-1659853443885
GPR[EPVS]-1659853443885
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853443888
GPR[SPVAP]-1659853443888
GPR[EPVAP]-1659853444996
GPR[EPVS]-1659853444996
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853444998
GPR[SPVAP]-1659853444998
GPR[EPVAP]-1659853446138
GPR[EPVS]-1659853446138
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853446140
GPR[SPVAP]-1659853446140
GPR[EPVAP]-1659853447249
GPR[EPVS]-1659853447249
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853447251
GPR[SPVAP]-1659853447251
GPR[EPVAP]-1659853448379
GPR[EPVS]-1659853448379
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853448380
GPR[SPVAP]-1659853448380
GPR[EPVAP]-1659853449487
GPR[EPVS]-1659853449487
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853449489
GPR[SPVAP]-1659853449489
GPR[EPVAP]-1659853450615
GPR[EPVS]-1659853450615
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853450617
GPR[SPVAP]-1659853450617
GPR[EPVAP]-1659853451728
GPR[EPVS]-1659853451728
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853451731
GPR[SPVAP]-1659853451731
GPR[EPVAP]-1659853452846
GPR[EPVS]-1659853452846
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853452850
GPR[SPVAP]-1659853452850
GPR[EPVAP]-1659853453957
GPR[EPVS]-1659853453957
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853453959
GPR[SPVAP]-1659853453959
GPR[EPVAP]-1659853455074
GPR[EPVS]-1659853455074
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853455077
GPR[SPVAP]-1659853455077
GPR[EPVAP]-1659853456182
GPR[EPVS]-1659853456182
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853456184
GPR[SPVAP]-1659853456184
GPR[EPVAP]-1659853457344
GPR[EPVS]-1659853457344
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853457346
GPR[SPVAP]-1659853457346
GPR[EPVAP]-1659853460387
GPR[EPVS]-1659853460387
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853460389
GPR[SPVAP]-1659853460389
GPR[EPVAP]-1659853461501
GPR[EPVS]-1659853461501
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853461503
GPR[SPVAP]-1659853461503
GPR[EPVAP]-1659853462618
GPR[EPVS]-1659853462618
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853462619
GPR[SPVAP]-1659853462619
GPR[EPVAP]-1659853463729
GPR[EPVS]-1659853463729
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853463731
GPR[SPVAP]-1659853463731
GPR[EPVAP]-1659853464840
GPR[EPVS]-1659853464840
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853464841
GPR[SPVAP]-1659853464841
GPR[EPVAP]-1659853465953
GPR[EPVS]-1659853465953
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853465954
GPR[SPVAP]-1659853465954
GPR[EPVAP]-1659853467071
GPR[EPVS]-1659853467071
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853467072
GPR[SPVAP]-1659853467072
GPR[EPVAP]-1659853468197
GPR[EPVS]-1659853468197
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853468198
GPR[SPVAP]-1659853468198
GPR[EPVAP]-1659853469303
GPR[EPVS]-1659853469303
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853469306
GPR[SPVAP]-1659853469306
GPR[EPVAP]-1659853471407
GPR[SPVATF]-1659853471407
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853473384
GPR[EPVS]-1659853473384
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853473386
GPR[SPVAP]-1659853473386
GPR[EPVAP]-1659853474502
GPR[EPVS]-1659853474502
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853474504
GPR[SPVAP]-1659853474504
GPR[EPVAP]-1659853475603
GPR[EPVS]-1659853475603
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853475605
GPR[SPVAP]-1659853475605
GPR[EPVAP]-1659853476729
GPR[EPVS]-1659853476729
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853476732
GPR[SPVAP]-1659853476732
GPR[EPVAP]-1659853477840
GPR[EPVS]-1659853477840
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853477843
GPR[SPVAP]-1659853477843
GPR[EPVAP]-1659853478964
GPR[EPVS]-1659853478964
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853478966
GPR[SPVAP]-1659853478966
GPR[EPVAP]-1659853480163
GPR[EPVS]-1659853480163
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853480165
GPR[SPVAP]-1659853480165
GPR[EPVAP]-1659853481309
GPR[EPVS]-1659853481309
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853481313
GPR[SPVAP]-1659853481313
GPR[EPVAP]-1659853482420
GPR[EPVS]-1659853482420
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853482425
GPR[SPVAP]-1659853482425
GPR[EPVAP]-1659853483551
GPR[EPVS]-1659853483551
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853483554
GPR[SPVAP]-1659853483554
GPR[EPVAP]-1659853484665
GPR[EPVS]-1659853484665
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853484669
GPR[SPVAP]-1659853484669
GPR[EPVAP]-1659853485783
GPR[EPVS]-1659853485783
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853485784
GPR[SPVAP]-1659853485784
GPR[EPVAP]-1659853486933
GPR[EPVS]-1659853486933
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853486935
GPR[SPVAP]-1659853486935
GPR[EPVAP]-1659853488060
GPR[EPVS]-1659853488060
========
 final double[][] d=new double[m.getRowDimension()][historySize];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853488064
GPR[SPVAP]-1659853488064
GPR[EPVAP]-1659853489174
GPR[EPVS]-1659853489174
========
d=d;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853489175
GPR[SPVAP]-1659853489175
GPR[EPVAP]-1659853490297
GPR[EPVS]-1659853490297
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853490299
GPR[SPVAP]-1659853490299
GPR[EPVAP]-1659853491413
GPR[EPVS]-1659853491413
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853491415
GPR[SPVAP]-1659853491415
GPR[EPVAP]-1659853492563
GPR[EPVS]-1659853492563
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659853492565
GPR[SPVAP]-1659853492565
GPR[EPVAP]-1659853493677
GPR[EPVS]-1659853493677
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853493679
GPR[SPVAP]-1659853493679
GPR[EPVAP]-1659853494791
GPR[EPVS]-1659853494791
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853494792
GPR[SPVAP]-1659853494792
GPR[EPVAP]-1659853495916
GPR[EPVS]-1659853495916
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853495918
GPR[SPVAP]-1659853495918
GPR[EPVAP]-1659853497032
GPR[EPVS]-1659853497032
========
 final double[][] d=new double[m.getRowDimension()][(int)((cc-cc)/cc+1)];
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853497038
GPR[SPVAP]-1659853497038
GPR[EPVAP]-1659853498147
GPR[EPVS]-1659853498147
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853498151
GPR[SPVAP]-1659853498151
GPR[EPVAP]-1659853499297
GPR[EPVS]-1659853499297
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853499298
GPR[SPVAP]-1659853499298
GPR[EPVAP]-1659853500413
GPR[EPVS]-1659853500413
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853500414
GPR[SPVAP]-1659853500415
GPR[EPVAP]-1659853501583
GPR[EPVS]-1659853501583
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853501585
GPR[SPVAP]-1659853501585
GPR[EPVAP]-1659853502718
GPR[EPVS]-1659853502718
========
 final double[][] d=new double[m.getRowDimension()][1];
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853502724
GPR[SPVAP]-1659853502724
GPR[EPVAP]-1659853503835
GPR[EPVS]-1659853503835
GPR[ESUN]-1659853503835
GPR[SSUN]-1659853503835
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1110
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853510432
GPR[SPVAP]-1659853510432
GPR[EPVAP]-1659853516964
GPR[SPVATF]-1659853516964
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853518991
GPR[EPVS]-1659853518991
========
for(int i=0;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853518992
GPR[SPVAP]-1659853518992
GPR[EPVAP]-1659853520119
GPR[EPVS]-1659853520119
========
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853520121
GPR[SPVAP]-1659853520121
GPR[EPVAP]-1659853521233
GPR[EPVS]-1659853521233
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853521234
GPR[SPVAP]-1659853521234
GPR[EPVAP]-1659853523304
GPR[SPVATF]-1659853523304
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853525278
GPR[EPVS]-1659853525278
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659853525279
GPR[SPVAP]-1659853525279
GPR[EPVAP]-1659853526403
GPR[EPVS]-1659853526403
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853526405
GPR[SPVAP]-1659853526405
GPR[EPVAP]-1659853527532
GPR[EPVS]-1659853527532
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853527533
GPR[SPVAP]-1659853527533
GPR[EPVAP]-1659853528651
GPR[EPVS]-1659853528651
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=weightMatrix.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853528654
GPR[SPVAP]-1659853528654
GPR[EPVAP]-1659853529756
GPR[EPVS]-1659853529756
========
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853529759
GPR[SPVAP]-1659853529759
GPR[EPVAP]-1659853532580
GPR[EPVS]-1659853532580
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853532581
GPR[SPVAP]-1659853532581
GPR[EPVAP]-1659853533684
GPR[EPVS]-1659853533684
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853533686
GPR[SPVAP]-1659853533686
GPR[EPVAP]-1659853534791
GPR[EPVS]-1659853534791
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853534792
GPR[SPVAP]-1659853534792
GPR[EPVAP]-1659853535901
GPR[EPVS]-1659853535901
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853535903
GPR[SPVAP]-1659853535903
GPR[EPVAP]-1659853537004
GPR[EPVS]-1659853537004
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853537006
GPR[SPVAP]-1659853537006
GPR[EPVAP]-1659853538148
GPR[EPVS]-1659853538148
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853538149
GPR[SPVAP]-1659853538149
GPR[EPVAP]-1659853539267
GPR[EPVS]-1659853539267
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853539268
GPR[SPVAP]-1659853539268
GPR[EPVAP]-1659853540377
GPR[EPVS]-1659853540377
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853540378
GPR[SPVAP]-1659853540378
GPR[EPVAP]-1659853541505
GPR[EPVS]-1659853541505
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853541506
GPR[SPVAP]-1659853541506
GPR[EPVAP]-1659853542619
GPR[EPVS]-1659853542619
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853542620
GPR[SPVAP]-1659853542620
GPR[EPVAP]-1659853543721
GPR[EPVS]-1659853543721
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853543722
GPR[SPVAP]-1659853543722
GPR[EPVAP]-1659853544811
GPR[EPVS]-1659853544811
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853544813
GPR[SPVAP]-1659853544813
GPR[EPVAP]-1659853545925
GPR[EPVS]-1659853545925
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853545927
GPR[SPVAP]-1659853545927
GPR[EPVAP]-1659853547029
GPR[EPVS]-1659853547029
========
for(int i=0;k<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853547032
GPR[SPVAP]-1659853547032
GPR[EPVAP]-1659853548141
GPR[EPVS]-1659853548141
========
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853548142
GPR[SPVAP]-1659853548142
GPR[EPVAP]-1659853549270
GPR[EPVS]-1659853549270
========
for(int i=0;c<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853549271
GPR[SPVAP]-1659853549271
GPR[EPVAP]-1659853550387
GPR[EPVS]-1659853550387
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659853550388
GPR[SPVAP]-1659853550388
GPR[EPVAP]-1659853551496
GPR[EPVS]-1659853551496
========
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853551498
GPR[SPVAP]-1659853551498
GPR[EPVAP]-1659853552610
GPR[EPVS]-1659853552610
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853552612
GPR[SPVAP]-1659853552612
GPR[EPVAP]-1659853553742
GPR[EPVS]-1659853553742
========
for(int i=0;m<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853553744
GPR[SPVAP]-1659853553744
GPR[EPVAP]-1659853554909
GPR[EPVS]-1659853554909
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853554912
GPR[SPVAP]-1659853554912
GPR[EPVAP]-1659853556021
GPR[EPVS]-1659853556021
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853556022
GPR[SPVAP]-1659853556022
GPR[EPVAP]-1659853557126
GPR[EPVS]-1659853557126
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853557127
GPR[SPVAP]-1659853557127
GPR[EPVAP]-1659853558226
GPR[EPVS]-1659853558226
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853558227
GPR[SPVAP]-1659853558227
GPR[EPVAP]-1659853559333
GPR[EPVS]-1659853559333
========
for(int i=0;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853559334
GPR[SPVAP]-1659853559334
GPR[EPVAP]-1659853560476
GPR[EPVS]-1659853560476
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853560477
GPR[SPVAP]-1659853560477
GPR[EPVAP]-1659853561605
GPR[EPVS]-1659853561605
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853561607
GPR[SPVAP]-1659853561607
GPR[EPVAP]-1659853562767
GPR[EPVS]-1659853562767
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853562768
GPR[SPVAP]-1659853562768
GPR[EPVAP]-1659853563881
GPR[EPVS]-1659853563881
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853563882
GPR[SPVAP]-1659853563882
GPR[EPVAP]-1659853564990
GPR[EPVS]-1659853564990
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853564992
GPR[SPVAP]-1659853564992
GPR[EPVAP]-1659853566097
GPR[EPVS]-1659853566097
========
for(int i=0;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853566098
GPR[SPVAP]-1659853566098
GPR[EPVAP]-1659853567227
GPR[EPVS]-1659853567227
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853567229
GPR[SPVAP]-1659853567229
GPR[EPVAP]-1659853568342
GPR[EPVS]-1659853568342
========
for(int i=0;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853568344
GPR[SPVAP]-1659853568344
GPR[EPVAP]-1659853569457
GPR[EPVS]-1659853569457
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853569458
GPR[SPVAP]-1659853569458
GPR[EPVAP]-1659853570569
GPR[EPVS]-1659853570569
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853570570
GPR[SPVAP]-1659853570570
GPR[EPVAP]-1659853571672
GPR[EPVS]-1659853571672
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853571673
GPR[SPVAP]-1659853571673
GPR[EPVAP]-1659853572781
GPR[EPVS]-1659853572781
========
for(int i=0;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853572782
GPR[SPVAP]-1659853572782
GPR[EPVAP]-1659853573897
GPR[EPVS]-1659853573897
========
for(int i=maxIterations;q<m.getColumnDimension();i++){
++maxIterations;
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853573899
GPR[SPVAP]-1659853573899
GPR[EPVAP]-1659853575004
GPR[EPVS]-1659853575004
========
for(int i=0;i<m.getColumnDimension();i++){
s/=realEigenvalues[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853575006
GPR[SPVAP]-1659853575006
GPR[EPVAP]-1659853576129
GPR[EPVS]-1659853576129
========
for(int i=0;i<m.getColumnDimension();i++){
scale*=FastMath.PI;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853576135
GPR[SPVAP]-1659853576135
GPR[EPVAP]-1659853577243
GPR[EPVS]-1659853577243
========
for(int i=0;row<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853577246
GPR[SPVAP]-1659853577246
GPR[EPVAP]-1659853578361
GPR[EPVS]-1659853578361
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.binomialCoefficient(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853578363
GPR[SPVAP]-1659853578363
GPR[EPVAP]-1659853579495
GPR[EPVS]-1659853579495
========
for(int i=0;j<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853579496
GPR[SPVAP]-1659853579496
GPR[EPVAP]-1659853580608
GPR[EPVS]-1659853580608
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853580610
GPR[SPVAP]-1659853580610
GPR[EPVAP]-1659853581790
GPR[EPVS]-1659853581790
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853581794
GPR[SPVAP]-1659853581794
GPR[EPVAP]-1659853582900
GPR[EPVS]-1659853582900
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853582902
GPR[SPVAP]-1659853582902
GPR[EPVAP]-1659853584017
GPR[EPVS]-1659853584017
========
for(int i=0;i<m.getColumnDimension();i++){
xn*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853584018
GPR[SPVAP]-1659853584018
GPR[EPVAP]-1659853585121
GPR[EPVS]-1659853585121
========
for(int i=0;length<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853585123
GPR[SPVAP]-1659853585123
GPR[EPVAP]-1659853586229
GPR[EPVS]-1659853586229
========
for(int i=0;g<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853586232
GPR[SPVAP]-1659853586232
GPR[EPVAP]-1659853587343
GPR[EPVS]-1659853587343
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853587345
GPR[SPVAP]-1659853587345
GPR[EPVAP]-1659853588458
GPR[EPVS]-1659853588458
========
for(int i=0;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853588460
GPR[SPVAP]-1659853588460
GPR[EPVAP]-1659853589577
GPR[EPVS]-1659853589577
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
xk*=operand[operandOffset];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853589578
GPR[SPVAP]-1659853589578
GPR[EPVAP]-1659853590693
GPR[EPVS]-1659853590693
========
for(int i=0;i<m.getColumnDimension();i++){
dataR[i]*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853590695
GPR[SPVAP]-1659853590695
GPR[EPVAP]-1659853591799
GPR[EPVS]-1659853591799
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=cc-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853591802
GPR[SPVAP]-1659853591802
GPR[EPVAP]-1659853592927
GPR[EPVS]-1659853592927
========
for(int i=0;i<m.getColumnDimension();i++){
coefficient*=maxIterations-i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853592929
GPR[SPVAP]-1659853592929
GPR[EPVAP]-1659853594038
GPR[EPVS]-1659853594038
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853594041
GPR[SPVAP]-1659853594041
GPR[EPVAP]-1659853595163
GPR[EPVS]-1659853595163
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853595165
GPR[SPVAP]-1659853595165
GPR[EPVAP]-1659853596289
GPR[EPVS]-1659853596289
========
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853596291
GPR[SPVAP]-1659853596291
GPR[EPVAP]-1659853597406
GPR[EPVS]-1659853597406
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853597408
GPR[SPVAP]-1659853597408
GPR[EPVAP]-1659853598519
GPR[EPVS]-1659853598519
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853598521
GPR[SPVAP]-1659853598521
GPR[EPVAP]-1659853599644
GPR[EPVS]-1659853599644
========
for(int i=0;i<m.getColumnDimension();i++){
System.arraycopy(interpolator.polynomials[i],0,polynomials[i],0,dimension);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853599646
GPR[SPVAP]-1659853599646
GPR[EPVAP]-1659853600773
GPR[EPVS]-1659853600773
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853600775
GPR[SPVAP]-1659853600775
GPR[EPVAP]-1659853601925
GPR[EPVS]-1659853601925
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853601926
GPR[SPVAP]-1659853601926
GPR[EPVAP]-1659853604658
GPR[EPVS]-1659853604658
========
for(int i=0;i<m.getColumnDimension();i++){
orders[i]=1;
orders[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853604660
GPR[SPVAP]-1659853604660
GPR[EPVAP]-1659853605776
GPR[EPVS]-1659853605776
========
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853605778
GPR[SPVAP]-1659853605778
GPR[EPVAP]-1659853606885
GPR[EPVS]-1659853606886
========
for(int i=0;i<m.getColumnDimension();i++){
subVector[d]=i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853606887
GPR[SPVAP]-1659853606887
GPR[EPVAP]-1659853608015
GPR[EPVS]-1659853608015
========
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853608017
GPR[SPVAP]-1659853608017
GPR[EPVAP]-1659853610130
GPR[SPVATF]-1659853610130
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853612154
GPR[EPVS]-1659853612154
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853612156
GPR[SPVAP]-1659853612156
GPR[EPVAP]-1659853613273
GPR[EPVS]-1659853613273
========
for(int i=0;i<m.getColumnDimension();i++){
remainder[i]=0;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853613275
GPR[SPVAP]-1659853613275
GPR[EPVAP]-1659853614380
GPR[EPVS]-1659853614380
========
for(int i=0;i<m.getColumnDimension();i++){
dividend[i]=mant[i];
remainder[i]=0;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853614382
GPR[SPVAP]-1659853614382
GPR[EPVAP]-1659853615482
GPR[EPVS]-1659853615482
========
for(int i=maxIterations;j<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853615483
GPR[SPVAP]-1659853615483
GPR[EPVAP]-1659853616596
GPR[EPVS]-1659853616596
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853616599
GPR[SPVAP]-1659853616599
GPR[EPVAP]-1659853617712
GPR[EPVS]-1659853617712
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853617714
GPR[SPVAP]-1659853617714
GPR[EPVAP]-1659853618843
GPR[EPVS]-1659853618843
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[1]=m[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853618845
GPR[SPVAP]-1659853618845
GPR[EPVAP]-1659853619957
GPR[EPVS]-1659853619957
========
for(int i=0;i<m.getColumnDimension();i++){
coefficients[0]=y[i];
coefficients[1]=m[i];

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853619958
GPR[SPVAP]-1659853619958
GPR[EPVAP]-1659853621077
GPR[EPVS]-1659853621077
========
for(int i=0;i<m.getColumnDimension();i++){
points[i]=points[i]*cc+cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853621079
GPR[SPVAP]-1659853621079
GPR[EPVAP]-1659853622197
GPR[EPVS]-1659853622197
========
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853622199
GPR[SPVAP]-1659853622199
GPR[EPVAP]-1659853623306
GPR[EPVS]-1659853623306
========
for(int i=0;i<m.getColumnDimension();i++){
if(index==-1){
throw new MathIllegalArgumentException(LocalizedFormats.DIFFERENT_ORIG_AND_PERMUTED_DATA);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853623308
GPR[SPVAP]-1659853623308
GPR[EPVAP]-1659853624427
GPR[EPVS]-1659853624427
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853624429
GPR[SPVAP]-1659853624429
GPR[EPVAP]-1659853625537
GPR[EPVS]-1659853625537
========
for(int i=0;i<m.getColumnDimension();i++){
tS*=size[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853625541
GPR[SPVAP]-1659853625541
GPR[EPVAP]-1659853626664
GPR[EPVS]-1659853626664
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853626665
GPR[SPVAP]-1659853626665
GPR[EPVAP]-1659853627780
GPR[EPVS]-1659853627780
========
for(int i=0;i<m.getColumnDimension();i++){
count-=maxIterations;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853627782
GPR[SPVAP]-1659853627782
GPR[EPVAP]-1659853628908
GPR[EPVS]-1659853628908
========
for(int i=0;i<m.getColumnDimension();i++){
--maxIterations;
count-=maxIterations;

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853628910
GPR[SPVAP]-1659853628910
GPR[EPVAP]-1659853630034
GPR[EPVS]-1659853630034
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853630036
GPR[SPVAP]-1659853630036
GPR[EPVAP]-1659853631167
GPR[EPVS]-1659853631167
========
for(int i=0;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853631169
GPR[SPVAP]-1659853631169
GPR[EPVAP]-1659853632272
GPR[EPVS]-1659853632272
========
for(int i=maxIterations;l<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853632274
GPR[SPVAP]-1659853632274
GPR[EPVAP]-1659853633385
GPR[EPVS]-1659853633385
========
for(int i=0;i<m.getColumnDimension();i++){
valueCoeff*=cc-statisticsSigmaHistory.get(i);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853633386
GPR[SPVAP]-1659853633386
GPR[EPVAP]-1659853634502
GPR[EPVS]-1659853634502
========
for(int i=0;j<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853634505
GPR[SPVAP]-1659853634505
GPR[EPVAP]-1659853635618
GPR[EPVS]-1659853635618
========
for(int i=0;key<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853635619
GPR[SPVAP]-1659853635619
GPR[EPVAP]-1659853636751
GPR[EPVS]-1659853636751
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853636753
GPR[SPVAP]-1659853636753
GPR[EPVAP]-1659853637866
GPR[EPVS]-1659853637866
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853637868
GPR[SPVAP]-1659853637868
GPR[EPVAP]-1659853638985
GPR[EPVS]-1659853638985
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853638987
GPR[SPVAP]-1659853638987
GPR[EPVAP]-1659853640089
GPR[EPVS]-1659853640089
========
for(int i=0;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853640092
GPR[SPVAP]-1659853640092
GPR[EPVAP]-1659853641210
GPR[EPVS]-1659853641210
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853641214
GPR[SPVAP]-1659853641214
GPR[EPVAP]-1659853642313
GPR[EPVS]-1659853642313
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659853642316
GPR[SPVAP]-1659853642316
GPR[EPVAP]-1659853643458
GPR[EPVS]-1659853643458
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659853643459
GPR[SPVAP]-1659853643459
GPR[EPVAP]-1659853644566
GPR[EPVS]-1659853644566
========
for(int i=0;r<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659853644568
GPR[SPVAP]-1659853644568
GPR[EPVAP]-1659853645669
GPR[EPVS]-1659853645669
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=b.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853645672
GPR[SPVAP]-1659853645672
GPR[EPVAP]-1659853646787
GPR[EPVS]-1659853646787
========
for(int i=0;col<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853646788
GPR[SPVAP]-1659853646788
GPR[EPVAP]-1659853647892
GPR[EPVS]-1659853647892
========
for(int i=0;r<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853647894
GPR[SPVAP]-1659853647894
GPR[EPVAP]-1659853649017
GPR[EPVS]-1659853649017
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853649019
GPR[SPVAP]-1659853649019
GPR[EPVAP]-1659853650141
GPR[EPVS]-1659853650141
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853650143
GPR[SPVAP]-1659853650143
GPR[EPVAP]-1659853651270
GPR[EPVS]-1659853651270
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853651271
GPR[SPVAP]-1659853651271
GPR[EPVAP]-1659853652385
GPR[EPVS]-1659853652385
========
for(int i=0;r<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853652390
GPR[SPVAP]-1659853652390
GPR[EPVAP]-1659853653490
GPR[EPVS]-1659853653490
========
for(int i=maxIterations;idxStep<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853653493
GPR[SPVAP]-1659853653493
GPR[EPVAP]-1659853654606
GPR[EPVS]-1659853654606
========
for(int i=maxIterations;varEnd<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853654611
GPR[SPVAP]-1659853654611
GPR[EPVAP]-1659853655719
GPR[EPVS]-1659853655719
GPR[ESUN]-1659853655720
GPR[SSUN]-1659853655720
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1111
GPR[ESUN]-1659853656373
GPR[SSUN]-1659853656373
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1113
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853663012
GPR[SPVAP]-1659853663012
GPR[EPVAP]-1659853669551
GPR[SPVATF]-1659853669551
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853671561
GPR[EPVS]-1659853671561
========
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853671564
GPR[SPVAP]-1659853671564
GPR[EPVAP]-1659853672683
GPR[EPVS]-1659853672683
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853672685
GPR[SPVAP]-1659853672685
GPR[EPVAP]-1659853674821
GPR[SPVATF]-1659853674821
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853678998
GPR[EPVS]-1659853678998
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853678999
GPR[SPVAP]-1659853678999
GPR[EPVAP]-1659853680109
GPR[EPVS]-1659853680109
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853680110
GPR[SPVAP]-1659853680110
GPR[EPVAP]-1659853681227
GPR[EPVS]-1659853681227
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853681228
GPR[SPVAP]-1659853681228
GPR[EPVAP]-1659853682357
GPR[EPVS]-1659853682357
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853682359
GPR[SPVAP]-1659853682359
GPR[EPVAP]-1659853683469
GPR[EPVS]-1659853683469
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853683470
GPR[SPVAP]-1659853683470
GPR[EPVAP]-1659853684580
GPR[EPVS]-1659853684580
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853684581
GPR[SPVAP]-1659853684581
GPR[EPVAP]-1659853685706
GPR[EPVS]-1659853685707
========
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853685709
GPR[SPVAP]-1659853685709
GPR[EPVAP]-1659853686831
GPR[EPVS]-1659853686831
========
cc=cc-cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853686834
GPR[SPVAP]-1659853686834
GPR[EPVAP]-1659853687957
GPR[EPVS]-1659853687957
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853687959
GPR[SPVAP]-1659853687959
GPR[EPVAP]-1659853689111
GPR[EPVS]-1659853689111
========
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853689113
GPR[SPVAP]-1659853689113
GPR[EPVAP]-1659853690247
GPR[EPVS]-1659853690247
========
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853690249
GPR[SPVAP]-1659853690249
GPR[EPVAP]-1659853691404
GPR[EPVS]-1659853691404
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853691406
GPR[SPVAP]-1659853691406
GPR[EPVAP]-1659853692569
GPR[EPVS]-1659853692569
========
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853692570
GPR[SPVAP]-1659853692570
GPR[EPVAP]-1659853693684
GPR[EPVS]-1659853693684
========
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853693686
GPR[SPVAP]-1659853693686
GPR[EPVAP]-1659853694818
GPR[EPVS]-1659853694818
========
setSeed(19650218);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853694820
GPR[SPVAP]-1659853694820
GPR[EPVAP]-1659853695918
GPR[EPVS]-1659853695918
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853695920
GPR[SPVAP]-1659853695920
GPR[EPVAP]-1659853697031
GPR[EPVS]-1659853697031
========
split(FACT[i],sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853697033
GPR[SPVAP]-1659853697033
GPR[EPVAP]-1659853698158
GPR[EPVS]-1659853698158
========
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853698159
GPR[SPVAP]-1659853698159
GPR[EPVAP]-1659853699281
GPR[EPVS]-1659853699281
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853699282
GPR[SPVAP]-1659853699282
GPR[EPVAP]-1659853700415
GPR[EPVS]-1659853700415
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853700417
GPR[SPVAP]-1659853700417
GPR[EPVAP]-1659853701517
GPR[EPVS]-1659853701517
========
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853701519
GPR[SPVAP]-1659853701519
GPR[EPVAP]-1659853702633
GPR[EPVS]-1659853702633
========
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853702635
GPR[SPVAP]-1659853702635
GPR[EPVAP]-1659853703745
GPR[EPVS]-1659853703745
========
for(int i=0;i<m.getColumnDimension();i++){
value+=cc;
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853703747
GPR[SPVAP]-1659853703747
GPR[EPVAP]-1659853704859
GPR[EPVS]-1659853704859
========
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853704861
GPR[SPVAP]-1659853704861
GPR[EPVAP]-1659853705973
GPR[EPVS]-1659853705973
========
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853705974
GPR[SPVAP]-1659853705974
GPR[EPVAP]-1659853707075
GPR[EPVS]-1659853707075
========
d[2][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853707077
GPR[SPVAP]-1659853707077
GPR[EPVAP]-1659853708200
GPR[EPVS]-1659853708200
========
d[3][maxIterations]=cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853708201
GPR[SPVAP]-1659853708201
GPR[EPVAP]-1659853709319
GPR[EPVS]-1659853709319
========
cc-=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853709321
GPR[SPVAP]-1659853709321
GPR[EPVAP]-1659853710439
GPR[EPVS]-1659853710439
========
maxIterations++;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853710440
GPR[SPVAP]-1659853710440
GPR[EPVAP]-1659853711548
GPR[EPVS]-1659853711548
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853711550
GPR[SPVAP]-1659853711550
GPR[EPVAP]-1659853712670
GPR[EPVS]-1659853712670
========
cc=sigma[maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853712673
GPR[SPVAP]-1659853712673
GPR[EPVAP]-1659853713788
GPR[EPVS]-1659853713788
========
if(cc==0.0){
maxIterations+=maxIterations-maxIterations;
continue;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853713790
GPR[SPVAP]-1659853713790
GPR[EPVAP]-1659853714897
GPR[EPVS]-1659853714897
========
maxIterations=maxIterations;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853714899
GPR[SPVAP]-1659853714899
GPR[EPVAP]-1659853716063
GPR[EPVS]-1659853716063
========
if(i>internalArray.length){
expandTo(newSize);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853716064
GPR[SPVAP]-1659853716064
GPR[EPVAP]-1659853717183
GPR[EPVS]-1659853717183
========
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853717185
GPR[SPVAP]-1659853717185
GPR[EPVAP]-1659853718375
GPR[EPVS]-1659853718375
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853718377
GPR[SPVAP]-1659853718377
GPR[EPVAP]-1659853719511
GPR[EPVS]-1659853719511
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853719513
GPR[SPVAP]-1659853719513
GPR[EPVAP]-1659853720638
GPR[EPVS]-1659853720638
========
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853720641
GPR[SPVAP]-1659853720641
GPR[EPVAP]-1659853721813
GPR[EPVS]-1659853721813
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853721814
GPR[SPVAP]-1659853721814
GPR[EPVAP]-1659853722925
GPR[EPVS]-1659853722925
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853722927
GPR[SPVAP]-1659853722927
GPR[EPVAP]-1659853724056
GPR[EPVS]-1659853724056
========
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853724058
GPR[SPVAP]-1659853724058
GPR[EPVAP]-1659853725187
GPR[EPVS]-1659853725187
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853725189
GPR[SPVAP]-1659853725189
GPR[EPVAP]-1659853726297
GPR[EPVS]-1659853726297
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853726298
GPR[SPVAP]-1659853726298
GPR[EPVAP]-1659853727410
GPR[EPVS]-1659853727411
========
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853727412
GPR[SPVAP]-1659853727412
GPR[EPVAP]-1659853728509
GPR[EPVS]-1659853728509
========
sigma[i]=FastMath.sqrt(ltI[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853728513
GPR[SPVAP]-1659853728513
GPR[EPVAP]-1659853729621
GPR[EPVS]-1659853729621
========
if(i<0){
i=-i-2;
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853729624
GPR[SPVAP]-1659853729624
GPR[EPVAP]-1659853730733
GPR[EPVS]-1659853730733
========
maxIterations-=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853730735
GPR[SPVAP]-1659853730735
GPR[EPVAP]-1659853731841
GPR[EPVS]-1659853731841
========
maxIterations+=((maxIterations*100)-maxIterations)%rsize;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853731842
GPR[SPVAP]-1659853731842
GPR[EPVAP]-1659853732961
GPR[EPVS]-1659853732961
========
for(int i=0;i<m.getColumnDimension();i++){
if(i>maxIterations+2){
matrixT[i][i-3]=0.0;
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853732963
GPR[SPVAP]-1659853732963
GPR[EPVAP]-1659853734075
GPR[EPVS]-1659853734075
========
sigma[maxIterations]=work[i];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853734077
GPR[SPVAP]-1659853734077
GPR[EPVAP]-1659853735193
GPR[EPVS]-1659853735193
========
sigma[i]=value;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853735194
GPR[SPVAP]-1659853735194
GPR[EPVAP]-1659853736322
GPR[EPVS]-1659853736322
========
sigma[maxIterations-1]=sigma[n];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853736327
GPR[SPVAP]-1659853736327
GPR[EPVAP]-1659853737433
GPR[EPVS]-1659853737433
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853737437
GPR[SPVAP]-1659853737437
GPR[EPVAP]-1659853738549
GPR[EPVS]-1659853738549
========
for(int i=0;i<m.getColumnDimension();i++){
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853738551
GPR[SPVAP]-1659853738551
GPR[EPVAP]-1659853739654
GPR[EPVS]-1659853739654
========
for(int i=0;i<m.getColumnDimension();i++){
c[i]=y[i];
if(FastMath.abs(cc-sigma[i])<cc){
nearest=i;
min_dist=FastMath.abs(cc-sigma[i]);
}

d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853739655
GPR[SPVAP]-1659853739655
GPR[EPVAP]-1659853740759
GPR[EPVS]-1659853740759
========
cc=Math.max(biglsq,cc*(cc*d5));
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853740763
GPR[SPVAP]-1659853740763
GPR[EPVAP]-1659853741887
GPR[EPVS]-1659853741887
========
d[maxIterations][i-1]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getReal();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853741891
GPR[SPVAP]-1659853741891
GPR[EPVAP]-1659853743053
GPR[EPVS]-1659853743053
========
d[maxIterations][i]=cdiv(cc*cc-cc*cc+cc*cc,x*cc-z*sa-q*ra,cc,cc).getImaginary();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853743054
GPR[SPVAP]-1659853743054
GPR[EPVAP]-1659853744178
GPR[EPVS]-1659853744178
========
sigma[maxIterations]=cc*cc+cc-cc*stopTolX;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853744180
GPR[SPVAP]-1659853744180
GPR[EPVAP]-1659853745365
GPR[EPVS]-1659853745365
========
sigma[maxIterations]=FastMath.abs(sigma[i]-sigma[i]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853745367
GPR[SPVAP]-1659853745367
GPR[EPVAP]-1659853746471
GPR[EPVS]-1659853746471
========
d[maxIterations][maxIterations]=(cc*cc-cc*cc)/cc;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853746473
GPR[SPVAP]-1659853746473
GPR[EPVAP]-1659853747587
GPR[EPVS]-1659853747587
========
if(i==0){
throw new NoDataException(LocalizedFormats.AT_LEAST_ONE_ROW);
}
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853747589
GPR[SPVAP]-1659853747589
GPR[EPVAP]-1659853748907
GPR[EPVS]-1659853748907
========
d=m.getData();
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853748918
GPR[SPVAP]-1659853748918
GPR[EPVAP]-1659853751073
GPR[EPVS]-1659853751073
========
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853751076
GPR[SPVAP]-1659853751076
GPR[EPVAP]-1659853752182
GPR[EPVS]-1659853752183
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853752185
GPR[SPVAP]-1659853752185
GPR[EPVAP]-1659853753325
GPR[EPVS]-1659853753325
========
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853753327
GPR[SPVAP]-1659853753327
GPR[EPVAP]-1659853754454
GPR[EPVS]-1659853754454
========
for(int i=0;i<getHeight();i++){
d[i][0]=tableau.getEntry(i,maxIterations);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853754455
GPR[SPVAP]-1659853754455
GPR[EPVAP]-1659853755565
GPR[EPVS]-1659853755565
========
cc+=cc*d1;
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853755571
GPR[SPVAP]-1659853755571
GPR[EPVAP]-1659853756673
GPR[EPVS]-1659853756673
========
isMinimize=MatrixUtils.isSymmetric(B,10*B.getRowDimension());
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}
return new Array2DRowRealMatrix(d,false);

========
MM Copying to MM
GPR[SPVS]-1659853756677
GPR[SPVAP]-1659853756677
GPR[EPVAP]-1659853757837
GPR[EPVS]-1659853757837
GPR[ESUN]-1659853757837
GPR[SSUN]-1659853757837
GPR[ESUN]-1659853757837
MM timeout
Timeout!
MM Purify? true
GPR[SFL]-1659853758789
GPR[EFL]-1659853758792
GPR[SFP]-1659853758792
TIMEOUT : 600000
GPR[SSUN]-1659853758795
org.apache.commons.math3.optim.BaseOptimizer,93
========
return evaluations.getCount();

========
MM Copying to MM
GPR[SPVS]-1659853760765
GPR[SPVAP]-1659853760765
GPR[EPVAP]-1659853767270
GPR[SPVATF]-1659853767270
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 0
GPR[EPVATF]-1659853769255
GPR[SPVATR]-1659853769255
TESTING : math_6
MM messageFailing tests: 0
GPR[EPVATR]-1659853836116
GPR[EPVS]-1659853836116
GPR[PF]-1659853836116
sourceFile  script/workingdir/SimFix/math/math_6_buggy/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
location   script/workingdir/SimFix/math/math_6_buggy
MM Out patch at /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/21/patch_77329_1_ts_1659853836116.diff
MM Command diff diff -w -b  --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java --label=/src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java /tmp/tmpDirMM3390333383741225654/BaseOptimizer.java  /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/21/1_BaseOptimizer.java  --unified=3  > /experiment_home///results/SimFix/Math/6/seed_260/patch/math/6/21/patch_77329_1_ts_1659853836116.diff
MMOut command diff: []
========
return iterations.getMaximalCount();

========
MM Copying to MM
GPR[SPVS]-1659853836127
GPR[SPVAP]-1659853836127
GPR[EPVAP]-1659853838141
GPR[SPVATF]-1659853838141
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853840088
GPR[EPVS]-1659853840088
GPR[ESUN]-1659853840088
GPR[SSUN]-1659853840088
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,451
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853842304
GPR[SPVAP]-1659853842304
GPR[EPVAP]-1659853848939
GPR[SPVATF]-1659853848939
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853851004
GPR[EPVS]-1659853851004
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853851006
GPR[SPVAP]-1659853851006
GPR[EPVAP]-1659853853111
GPR[SPVATF]-1659853853111
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853855065
GPR[EPVS]-1659853855065
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853855067
GPR[SPVAP]-1659853855067
GPR[EPVAP]-1659853857153
GPR[SPVATF]-1659853857153
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853859124
GPR[EPVS]-1659853859124
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853859126
GPR[SPVAP]-1659853859126
GPR[EPVAP]-1659853861192
GPR[SPVATF]-1659853861192
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853863162
GPR[EPVS]-1659853863162
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853863163
GPR[SPVAP]-1659853863163
GPR[EPVAP]-1659853865205
GPR[SPVATF]-1659853865205
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853867151
GPR[EPVS]-1659853867151
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853867152
GPR[SPVAP]-1659853867152
GPR[EPVAP]-1659853869214
GPR[SPVATF]-1659853869214
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853871162
GPR[EPVS]-1659853871162
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853871163
GPR[SPVAP]-1659853871163
GPR[EPVAP]-1659853873264
GPR[SPVATF]-1659853873264
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853875209
GPR[EPVS]-1659853875209
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853875211
GPR[SPVAP]-1659853875211
GPR[EPVAP]-1659853877253
GPR[SPVATF]-1659853877253
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853879221
GPR[EPVS]-1659853879221
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853879222
GPR[SPVAP]-1659853879222
GPR[EPVAP]-1659853881268
GPR[SPVATF]-1659853881268
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853883240
GPR[EPVS]-1659853883240
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853883242
GPR[SPVAP]-1659853883242
GPR[EPVAP]-1659853885327
GPR[SPVATF]-1659853885327
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853887308
GPR[EPVS]-1659853887308
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853887310
GPR[SPVAP]-1659853887310
GPR[EPVAP]-1659853889380
GPR[SPVATF]-1659853889380
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853891329
GPR[EPVS]-1659853891329
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853891330
GPR[SPVAP]-1659853891330
GPR[EPVAP]-1659853895144
GPR[SPVATF]-1659853895144
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853897066
GPR[EPVS]-1659853897066
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853897068
GPR[SPVAP]-1659853897068
GPR[EPVAP]-1659853899139
GPR[SPVATF]-1659853899139
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853901105
GPR[EPVS]-1659853901105
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853901106
GPR[SPVAP]-1659853901106
GPR[EPVAP]-1659853903155
GPR[SPVATF]-1659853903155
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853905102
GPR[EPVS]-1659853905102
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853905103
GPR[SPVAP]-1659853905103
GPR[EPVAP]-1659853907170
GPR[SPVATF]-1659853907170
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853909120
GPR[EPVS]-1659853909120
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853909122
GPR[SPVAP]-1659853909122
GPR[EPVAP]-1659853911178
GPR[SPVATF]-1659853911178
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853913136
GPR[EPVS]-1659853913136
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853913137
GPR[SPVAP]-1659853913137
GPR[EPVAP]-1659853915190
GPR[SPVATF]-1659853915190
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853917148
GPR[EPVS]-1659853917148
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853917150
GPR[SPVAP]-1659853917150
GPR[EPVAP]-1659853919220
GPR[SPVATF]-1659853919220
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853921174
GPR[EPVS]-1659853921174
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853921175
GPR[SPVAP]-1659853921175
GPR[EPVAP]-1659853923251
GPR[SPVATF]-1659853923251
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853925204
GPR[EPVS]-1659853925204
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853925205
GPR[SPVAP]-1659853925205
GPR[EPVAP]-1659853927238
GPR[SPVATF]-1659853927238
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853929206
GPR[EPVS]-1659853929206
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853929207
GPR[SPVAP]-1659853929207
GPR[EPVAP]-1659853931251
GPR[SPVATF]-1659853931251
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853933212
GPR[EPVS]-1659853933212
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853933213
GPR[SPVAP]-1659853933213
GPR[EPVAP]-1659853935261
GPR[SPVATF]-1659853935261
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853937213
GPR[EPVS]-1659853937213
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853937215
GPR[SPVAP]-1659853937215
GPR[EPVAP]-1659853939336
GPR[SPVATF]-1659853939336
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853941267
GPR[EPVS]-1659853941267
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853941268
GPR[SPVAP]-1659853941268
GPR[EPVAP]-1659853943353
GPR[SPVATF]-1659853943353
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853945337
GPR[EPVS]-1659853945337
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853945339
GPR[SPVAP]-1659853945339
GPR[EPVAP]-1659853947450
GPR[SPVATF]-1659853947450
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853949433
GPR[EPVS]-1659853949433
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
break;
}

========
MM Copying to MM
GPR[SPVS]-1659853949435
GPR[SPVAP]-1659853949435
GPR[EPVAP]-1659853951481
GPR[SPVATF]-1659853951481
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853953439
GPR[EPVS]-1659853953439
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853953440
GPR[SPVAP]-1659853953440
GPR[EPVAP]-1659853955478
GPR[SPVATF]-1659853955478
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853957436
GPR[EPVS]-1659853957436
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853957438
GPR[SPVAP]-1659853957438
GPR[EPVAP]-1659853959525
GPR[SPVATF]-1659853959525
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853961472
GPR[EPVS]-1659853961472
========
if(bestValue<(isMinimize?stopFitness:-stopFitness)){
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853961474
GPR[SPVAP]-1659853961474
GPR[EPVAP]-1659853963510
GPR[SPVATF]-1659853963510
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853965496
GPR[EPVS]-1659853965496
========
if(bestFitness<(isMinimize?stopFitness:-stopFitness)){
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);
bestValue=stopFitness;
lastResult=optimum;
optimum=new PointValuePair(fitfun.repair(bestArx.getColumn(0)),isMinimize?stopFitness:-bestFitness);

break;
}

========
MM Copying to MM
GPR[SPVS]-1659853965498
GPR[SPVAP]-1659853965498
GPR[EPVAP]-1659853969285
GPR[SPVATF]-1659853969285
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853971248
GPR[EPVS]-1659853971248
GPR[ESUN]-1659853971250
GPR[SSUN]-1659853971250
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer,1109
UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (ConvergenceException oe) {
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

UNKNOWN ASTNode type : catch (RuntimeException mue) {
  lastException=mue;
  optima[i]=null;
}

========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853978345
GPR[SPVAP]-1659853978345
GPR[EPVAP]-1659853984870
GPR[SPVATF]-1659853984870
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853986845
GPR[EPVS]-1659853986845
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i);
}

========
MM Copying to MM
GPR[SPVS]-1659853986847
GPR[SPVAP]-1659853986847
GPR[EPVAP]-1659853987983
GPR[EPVS]-1659853987983
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<root.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853987985
GPR[SPVAP]-1659853987985
GPR[EPVAP]-1659853989095
GPR[EPVS]-1659853989095
========
 final double[][] d=new double[m.getRowDimension()][1];
cc+=cc*d1;
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853989097
GPR[SPVAP]-1659853989097
GPR[EPVAP]-1659853990209
GPR[EPVS]-1659853990209
========
 final double[][] d=new double[m.getRowDimension()][getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853990212
GPR[SPVAP]-1659853990212
GPR[EPVAP]-1659853991329
GPR[EPVS]-1659853991329
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(maxIterations,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853991330
GPR[SPVAP]-1659853991330
GPR[EPVAP]-1659853992469
GPR[EPVS]-1659853992469
========
MatrixUtils.checkRowIndex(this,maxIterations);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853992471
GPR[SPVAP]-1659853992471
GPR[EPVAP]-1659853993607
GPR[EPVS]-1659853993607
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853993611
GPR[SPVAP]-1659853993611
GPR[EPVAP]-1659853995697
GPR[SPVATF]-1659853995697
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659853997638
GPR[EPVS]-1659853997638
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853997640
GPR[SPVAP]-1659853997640
GPR[EPVAP]-1659853998745
GPR[EPVS]-1659853998745
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659853998746
GPR[SPVAP]-1659853998746
GPR[EPVAP]-1659853999849
GPR[EPVS]-1659853999849
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659853999850
GPR[SPVAP]-1659853999850
GPR[EPVAP]-1659854000950
GPR[EPVS]-1659854000950
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854000951
GPR[SPVAP]-1659854000951
GPR[EPVAP]-1659854002048
GPR[EPVS]-1659854002048
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659854002050
GPR[SPVAP]-1659854002050
GPR[EPVAP]-1659854003166
GPR[EPVS]-1659854003166
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getRowDimension();i++){
d[i][0]=n.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659854003167
GPR[SPVAP]-1659854003167
GPR[EPVAP]-1659854004321
GPR[EPVS]-1659854004321
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
tmpCol[i]=m.getEntry(i,maxIterations);
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854004323
GPR[SPVAP]-1659854004323
GPR[EPVAP]-1659854005435
GPR[EPVS]-1659854005435
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<matrix.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854005437
GPR[SPVAP]-1659854005437
GPR[EPVAP]-1659854006561
GPR[EPVS]-1659854006561
========
 final double[][] d=new double[m.getRowDimension()][1];
checkRowIndex(maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854006562
GPR[SPVAP]-1659854006562
GPR[EPVAP]-1659854007693
GPR[EPVS]-1659854007693
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854007695
GPR[SPVAP]-1659854007695
GPR[EPVAP]-1659854008799
GPR[EPVS]-1659854008799
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854008801
GPR[SPVAP]-1659854008801
GPR[EPVAP]-1659854009905
GPR[EPVS]-1659854009905
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkRowIndex(this,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854009907
GPR[SPVAP]-1659854009907
GPR[EPVAP]-1659854011013
GPR[EPVS]-1659854011013
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=index;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854011015
GPR[SPVAP]-1659854011015
GPR[EPVAP]-1659854012128
GPR[EPVS]-1659854012128
========
 final double[][] d=new double[m.getRowDimension()][m.getColumnDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854012130
GPR[SPVAP]-1659854012130
GPR[EPVAP]-1659854014226
GPR[SPVATF]-1659854014226
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659854016236
GPR[EPVS]-1659854016236
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=i<=maxIterations-maxIterations?m.getEntry(i,i):null;
}

========
MM Copying to MM
GPR[SPVS]-1659854016238
GPR[SPVAP]-1659854016238
GPR[EPVAP]-1659854017377
GPR[EPVS]-1659854017377
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getWidth();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854017379
GPR[SPVAP]-1659854017379
GPR[EPVAP]-1659854018501
GPR[EPVS]-1659854018501
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854018504
GPR[SPVAP]-1659854018504
GPR[EPVAP]-1659854019633
GPR[EPVS]-1659854019633
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m1.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854019635
GPR[SPVAP]-1659854019635
GPR[EPVAP]-1659854020740
GPR[EPVS]-1659854020740
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getArtificialVariableOffset();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854020743
GPR[SPVAP]-1659854020743
GPR[EPVAP]-1659854021873
GPR[EPVS]-1659854021873
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkAdditionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854021874
GPR[SPVAP]-1659854021874
GPR[EPVAP]-1659854023002
GPR[EPVS]-1659854023002
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubtractionCompatible(this,m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854023003
GPR[SPVAP]-1659854023003
GPR[EPVAP]-1659854024120
GPR[EPVS]-1659854024120
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854024122
GPR[SPVAP]-1659854024122
GPR[EPVAP]-1659854025240
GPR[EPVS]-1659854025240
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=tableau.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854025242
GPR[SPVAP]-1659854025242
GPR[EPVAP]-1659854026356
GPR[EPVS]-1659854026356
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getHeight();i++){
d[i][0]=m.getEntry(i,maxIterations);
}

========
MM Copying to MM
GPR[SPVS]-1659854026358
GPR[SPVAP]-1659854026358
GPR[EPVAP]-1659854027468
GPR[EPVS]-1659854027468
========
cc-=cc*d1;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854027471
GPR[SPVAP]-1659854027471
GPR[EPVAP]-1659854028590
GPR[EPVS]-1659854028590
========
 final double[][] d=new double[m.getRowDimension()][maxIterations];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854028591
GPR[SPVAP]-1659854028591
GPR[EPVAP]-1659854029704
GPR[EPVS]-1659854029704
========
 final double[][] d=new double[m.getRowDimension()][m.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854029706
GPR[SPVAP]-1659854029706
GPR[EPVAP]-1659854031797
GPR[SPVATF]-1659854031797
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659854033730
GPR[EPVS]-1659854033730
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=mat.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854033731
GPR[SPVAP]-1659854033731
GPR[EPVAP]-1659854034836
GPR[EPVS]-1659854034836
========
split(FACT[i],sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854034837
GPR[SPVAP]-1659854034837
GPR[EPVAP]-1659854035948
GPR[EPVS]-1659854035948
========
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854035950
GPR[SPVAP]-1659854035950
GPR[EPVAP]-1659854037059
GPR[EPVS]-1659854037059
========
split(FACT[i],sigma);
splitReciprocal(sigma,sigma);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854037061
GPR[SPVAP]-1659854037061
GPR[EPVAP]-1659854038173
GPR[EPVS]-1659854038173
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getOriginalNumDecisionVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854038174
GPR[SPVAP]-1659854038174
GPR[EPVAP]-1659854039373
GPR[EPVS]-1659854039373
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumSlackVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854039382
GPR[SPVAP]-1659854039382
GPR[EPVAP]-1659854041977
GPR[EPVS]-1659854041977
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getNumArtificialVariables();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854041978
GPR[SPVAP]-1659854041978
GPR[EPVAP]-1659854043099
GPR[EPVS]-1659854043099
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getLength();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854043102
GPR[SPVAP]-1659854043102
GPR[EPVAP]-1659854044211
GPR[EPVS]-1659854044211
========
MatrixUtils.checkMultiplicationCompatible(this,m);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854044214
GPR[SPVAP]-1659854044214
GPR[EPVAP]-1659854045317
GPR[EPVS]-1659854045317
========
new double[2][0]=COSINE_TABLE_A[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854045319
GPR[SPVAP]-1659854045319
GPR[EPVAP]-1659854046448
GPR[EPVS]-1659854046448
========
new double[2][1]=COSINE_TABLE_B[maxIterations];
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854046450
GPR[SPVAP]-1659854046450
GPR[EPVAP]-1659854047549
GPR[EPVS]-1659854047549
========
splitReciprocal(new double[2],new double[2]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854047550
GPR[SPVAP]-1659854047550
GPR[EPVAP]-1659854048651
GPR[EPVS]-1659854048651
========
 final double[][] d=new double[m.getRowDimension()][1];
checkAdditionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854048654
GPR[SPVAP]-1659854048654
GPR[EPVAP]-1659854049761
GPR[EPVS]-1659854049761
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubtractionCompatible(m);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854049763
GPR[SPVAP]-1659854049763
GPR[EPVAP]-1659854050875
GPR[EPVS]-1659854050875
========
if(i==-1){
throw new OutOfRangeException(cc,sigma[0],xval[xval.length-1]);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854050878
GPR[SPVAP]-1659854050878
GPR[EPVAP]-1659854051977
GPR[EPVS]-1659854051977
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854051981
GPR[SPVAP]-1659854051981
GPR[EPVAP]-1659854053135
GPR[EPVS]-1659854053135
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854053137
GPR[SPVAP]-1659854053137
GPR[EPVAP]-1659854054246
GPR[EPVS]-1659854054246
========
 final double[][] d=new double[observations.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854054249
GPR[SPVAP]-1659854054249
GPR[EPVAP]-1659854055385
GPR[EPVS]-1659854055385
========
 final double[][] d=new double[m.getRowDimension()][1];
checkDimension(maxIterations,d[0]);
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854055387
GPR[SPVAP]-1659854055387
GPR[EPVAP]-1659854056492
GPR[EPVS]-1659854056492
========
if(i>internalArray.length){
expandTo(newSize);
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854056494
GPR[SPVAP]-1659854056494
GPR[EPVAP]-1659854057609
GPR[EPVS]-1659854057609
========
maxIterations=maxIterations;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854057610
GPR[SPVAP]-1659854057610
GPR[EPVAP]-1659854058714
GPR[EPVS]-1659854058714
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854058715
GPR[SPVAP]-1659854058715
GPR[EPVAP]-1659854059821
GPR[EPVS]-1659854059821
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854059822
GPR[SPVAP]-1659854059822
GPR[EPVAP]-1659854060925
GPR[EPVS]-1659854060925
========
 final double[][] d=new double[m.getRowDimension()][1];
checkSubMatrixIndex(maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854060926
GPR[SPVAP]-1659854060926
GPR[EPVAP]-1659854062039
GPR[EPVS]-1659854062039
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854062040
GPR[SPVAP]-1659854062040
GPR[EPVAP]-1659854063173
GPR[EPVS]-1659854063173
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=0;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854063174
GPR[SPVAP]-1659854063174
GPR[EPVAP]-1659854064292
GPR[EPVS]-1659854064292
========
 final double[][] d=new double[m.getRowDimension()][1];
MatrixUtils.checkSubMatrixIndex(this,maxIterations,maxIterations,maxIterations,maxIterations);
for(int i=maxIterations;i<=m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854064293
GPR[SPVAP]-1659854064293
GPR[EPVAP]-1659854065407
GPR[EPVS]-1659854065407
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=isActiveCMA?0:1;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854065408
GPR[SPVAP]-1659854065408
GPR[EPVAP]-1659854066516
GPR[EPVS]-1659854066516
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
++i;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854066519
GPR[SPVAP]-1659854066519
GPR[EPVAP]-1659854068571
GPR[SPVATF]-1659854068571
TESTING : org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM:   - org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2_purify_6
MM: Failing tests: 1
MM: Running ant (run.dev.tests)................................................ OK
MM: Running ant (compile.tests)................................................ OK
GPR[EPVATF]-1659854070512
GPR[EPVS]-1659854070512
========
if(i>=polynomials.length){
i--;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854070514
GPR[SPVAP]-1659854070514
GPR[EPVAP]-1659854071617
GPR[EPVS]-1659854071617
========
sigma[maxIterations]=0;
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854071619
GPR[SPVAP]-1659854071619
GPR[EPVAP]-1659854072729
GPR[EPVS]-1659854072729
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
interpolatedSecondaryDerivatives[i]=interpolator.interpolatedSecondaryDerivatives[i].clone();
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854072731
GPR[SPVAP]-1659854072731
GPR[EPVAP]-1659854073847
GPR[EPVS]-1659854073847
========
 final double[][] d=new double[m.getRowDimension()][this.getRowDimension()];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854073850
GPR[SPVAP]-1659854073850
GPR[EPVAP]-1659854074969
GPR[EPVS]-1659854074969
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<getSize();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854074971
GPR[SPVAP]-1659854074971
GPR[EPVAP]-1659854076077
GPR[EPVS]-1659854076077
========
sigma[i]=FastMath.sqrt(ltI[i]);
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854076079
GPR[SPVAP]-1659854076079
GPR[EPVAP]-1659854077193
GPR[EPVS]-1659854077193
========
if(i<0){
i=-i-2;
}
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854077195
GPR[SPVAP]-1659854077195
GPR[EPVAP]-1659854078319
GPR[EPVS]-1659854078319
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
power*=cc;
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854078323
GPR[SPVAP]-1659854078323
GPR[EPVAP]-1659854079477
GPR[EPVS]-1659854079477
========
 final double[][] d=new double[m.getRowDimension()][dimension];
for(int i=0;i<m.getColumnDimension();i++){
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854079482
GPR[SPVAP]-1659854079482
GPR[EPVAP]-1659854080603
GPR[EPVS]-1659854080603
========
 final double[][] d=new double[m.getRowDimension()][1];
for(int i=0;i<m.getColumnDimension();i++){
if(singularValues[i]>cc){
a=1/singularValues[i];
}else {
a=0;
}
d[i][0]=m.getEntry(i,i);
}

========
MM Copying to MM
GPR[SPVS]-1659854080606
GPR[SPVAP]-1659854080606
GPR[EPVAP]-1659854081716
GPR[EPVS]-1659854081716
#
# A fatal error has been detected by the Java Runtime Environment:
#
#  SIGSEGV (0xb) at pc=0x00007fab1a0a84a6, pid=1126780, tid=140373168703232
#
# JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops)
# Problematic frame:
# J 6307 C2 cofix.core.parser.node.expr.InfixExpr.simplify(Ljava/util/Map;Ljava/util/Map;)Ljava/lang/String; (207 bytes) @ 0x00007fab1a0a84a6 [0x00007fab1a0a8260+0x246]
#
# Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
#
# An error report file with more information is saved as:
# script/workingdir/SimFix/math/math_6_buggy/hs_err_pid1126780.log
#
# If you would like to submit a bug report, please visit:
#   http://bugreport.java.com/bugreport/crash.jsp
#
End running Math/6 results at /experiment_home///results/SimFix/Math/6/seed_260/
\n\nNode: host-66\n
\n\nDate: Sat 06 Aug 2022 11:34:41 PM PDT\n
Removing checked out dir script/workingdir/SimFix/math/math_6_buggy
GPR[SSLE]-1659854081757
GPR[ESLE]-1659854141763
