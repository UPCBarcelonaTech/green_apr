Sleep 1m start
GPR[SSLI]-1659828662360
GPR[ESLI]-1659828722396
Running Nopol Closure 12b with approach: smt
Timezone: America/Los_Angeles
Seed 260
OS: linux
Creating out dir /experiment_home///results/Nopol/Closure/12/seed_260/
The file script/workingdir/Nopol/Closure_12 does not exist!
script/workingdir/Nopol/Closure_12
script/workingdir/Nopol/Closure_12
classpath:  script/workingdir/Nopol/Closure_12/build/classes:script/workingdir/Nopol/Closure_12/lib/args4j.jar:script/workingdir/Nopol/Closure_12/lib/guava.jar:script/workingdir/Nopol/Closure_12/lib/json.jar:script/workingdir/Nopol/Closure_12/lib/jsr305.jar:script/workingdir/Nopol/Closure_12/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_12/build/lib/rhino.jar:script/workingdir/Nopol/Closure_12/lib/ant.jar:script/workingdir/Nopol/Closure_12/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_12/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_12/lib/jarjar.jar:script/workingdir/Nopol/Closure_12/lib/junit.jar:script/workingdir/Nopol/Closure_12/build/test
Src java:  /src
Classes Java:  /build/classes
Src Test:  /test
Classes Test:  /build/test
GPR[SSLB]-1659828743992
GPR[ESLB]-1659828803997
Calling Nopol:
Classpath to pass script/workingdir/Nopol/Closure_12//build/classes:script/workingdir/Nopol/Closure_12//build/test:script/workingdir/Nopol/Closure_12/build/classes:script/workingdir/Nopol/Closure_12/lib/args4j.jar:script/workingdir/Nopol/Closure_12/lib/guava.jar:script/workingdir/Nopol/Closure_12/lib/json.jar:script/workingdir/Nopol/Closure_12/lib/jsr305.jar:script/workingdir/Nopol/Closure_12/lib/protobuf-java.jar:script/workingdir/Nopol/Closure_12/build/lib/rhino.jar:script/workingdir/Nopol/Closure_12/lib/ant.jar:script/workingdir/Nopol/Closure_12/lib/ant-launcher.jar:script/workingdir/Nopol/Closure_12/lib/caja-r4314.jar:script/workingdir/Nopol/Closure_12/lib/jarjar.jar:script/workingdir/Nopol/Closure_12/lib/junit.jar:script/workingdir/Nopol/Closure_12/build/test
Node: host-46
Date init: Sat 06 Aug 2022 04:33:24 PM PDT
OAR_JOB_ID: 3720517
[0] INFO NoPol - Source files: [script/workingdir/Nopol/Closure_12/src]
[1] INFO NoPol - Classpath: [file:script/workingdir/Nopol/Closure_12/build/classes/, file:script/workingdir/Nopol/Closure_12/build/test/, file:script/workingdir/Nopol/Closure_12/build/classes/, file:script/workingdir/Nopol/Closure_12/lib/args4j.jar, file:script/workingdir/Nopol/Closure_12/lib/guava.jar, file:script/workingdir/Nopol/Closure_12/lib/json.jar, file:script/workingdir/Nopol/Closure_12/lib/jsr305.jar, file:script/workingdir/Nopol/Closure_12/lib/protobuf-java.jar, file:script/workingdir/Nopol/Closure_12/build/lib/rhino.jar, file:script/workingdir/Nopol/Closure_12/lib/ant.jar, file:script/workingdir/Nopol/Closure_12/lib/ant-launcher.jar, file:script/workingdir/Nopol/Closure_12/lib/caja-r4314.jar, file:script/workingdir/Nopol/Closure_12/lib/jarjar.jar, file:script/workingdir/Nopol/Closure_12/lib/junit.jar, file:script/workingdir/Nopol/Closure_12/build/test/]
[1] INFO NoPol - Statement type: PRE_THEN_COND
[1] INFO NoPol - Args: [com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest]
[3] INFO NoPol - Config: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=PRE_THEN_COND, synthesis=SMT, oracle=ANGELIC, solver=Z3, solverPath='script/../tools//libs/z3_for_linux', projectSources=[script/workingdir/Nopol/Closure_12/src], projectClasspath='[Ljava.net.URL;@28c97a5', projectTests=[com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64Test, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.Base64VLQTest, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV1Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapConsumerV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV1Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV2Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.debugging.sourcemap.SourceMapGeneratorV3Test, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasExternalsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasKeywordsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AliasStringsTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AmbiguatePropertiesTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstParallelizerTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.AstValidatorTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.BasicErrorManagerTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.CallGraphTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.ChainCallsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccessControlsTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckAccidentalSemicolonTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckDebuggerStatementTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalNamesTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckGlobalThisTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingGetCssNameTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckMissingReturnTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckPathsBetweenNodesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckProvidesTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRegExpTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckRequiresForConstructorsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckSideEffectsTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CheckUnreachableCodeTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.CleanupPassesTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodeRemovalTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureCodingConventionTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureOptimizePrimitivesTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.ClosureReverseAbstractInterpreterTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CoalesceVariableNamesTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CodePrinterTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapseAnonymousFunctionsTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapsePropertiesTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CollapseVariableDeclarationsTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CombinedCompilerPassTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CommandLineRunnerTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerOptionsTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.CompilerTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConcreteTypeTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ConstCheckTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlFlowAnalysisTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ControlStructureCheckTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.ConvertToDottedPropertiesTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CreateSyntheticBlocksTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleCodeMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.CrossModuleMethodMotionTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DataFlowAnalysisTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DeadAssignmentsEliminationTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefaultCodingConventionTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DefinitionsRemoverTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DenormalizeTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DevirtualizePrototypeMethodsTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DiagnosticGroupTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DisambiguatePropertiesTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.DotFormatterTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExpandJqueryAliasesTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExploitAssignsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExportTestFunctionsTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExpressionDecomposerTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExternExportsPassTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.ExtractPrototypeMemberDeclarationsTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FixedPointGraphTraversalTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionArgumentInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionInjectorTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionNamesTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionRewriterTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionToBlockMutatorTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.FunctionTypeBuilderTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherRawExportsTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GatherSideEffectSubexpressionsCallbackTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GenerateExportsTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalNamespaceTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GlobalVarReferenceMapTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GoogleCodingConventionTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.GroupVariableDeclarationsTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.IgnoreCajaPropertiesTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InferJSDocInfoTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineCostEstimatorTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineFunctionsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlineObjectLiteralsTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlinePropertiesTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineSimpleMethodsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesConstantsTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InlineVariablesTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.InstrumentFunctionsTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.IntegrationTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSCompilerSourceExcerptProviderTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleGraphTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JSModuleTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageExtractorTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.JsMessageVisitorTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LightweightMessageFormatterTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LinkedFlowScopeTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LiveVariableAnalysisTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.LooseTypeCheckTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MakeDeclaredNamesUniqueTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MarkNoSideEffectCallsTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MaybeReachingVariableUseTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MemoizedScopeCreatorTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MinimizeExitPointsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MoveFunctionDeclarationsTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.MustBeReachingVariableDefTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnalyzerTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsMappedTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NameAnonymousFunctionsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeIteratorsTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeTraversalTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NodeUtilTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.NormalizeTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPostprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.ObjectPropertyStringPreprocessTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeArgumentsArrayTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeCallsTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeParametersTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.OptimizeReturnsTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.ParallelCompilerPassTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeCollectPropertyAssignmentsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldConstantsTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeFoldWithTypesTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeIntegrationTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeOptimizationsPassTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeRemoveDeadCodeTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSimplifyRegExpTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PhaseOptimizerTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.PrepareAstTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessClosurePrimitivesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessCommonJSModulesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessDefinesTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.ProcessTweaksTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.PureFunctionIdentifierTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RecordFunctionInformationTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveTryCatchTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedClassPropertiesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedNamesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RemoveUnusedVarsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLabelsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenameLocalVarsTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePropertiesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenamePrototypesTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.RenameVarsTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReorderConstantExpressionTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceCssNamesTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceIdGeneratorsTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceMessagesTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.ReplaceStringsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RescopeGlobalSymbolsTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RhinoErrorReporterTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.RuntimeTypeCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.SanityCheckTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.ScopedAliasesTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.SemanticReverseAbstractInterpreterTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.ShadowVariablesTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SideEffectsAnalysisTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleDefinitionFinderTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SimpleFunctionAliasAnalysisTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceInformationAnnotatorTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SourceMapTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.SpecializeModuleTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StatementFusionTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StrictModeCheckTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.StripCodeTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SymbolTableTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.SyntacticScopeCreatorTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TightenTypesTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TransformAMDToCJSModuleTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckFunctionCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeCheckTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeInferenceTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypeValidatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.TypedScopeCreatorTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.UnreachableCodeEliminationTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VarCheckTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableMapTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableReferenceCheckTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.VariableVisibilityAnalysisTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.XtbMessageBundleTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.DepsFileParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileLineParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFileParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.JsFunctionParserTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.deps.SortedDependenciesTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphColoringTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphPrunerTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphReachabilityTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.GraphTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.graph.StandardUnionFindTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLConversionTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.JsonMLValidationTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.jsonml.SecureCompilerTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.IRFactoryTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocInfoParserTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.JsDocTokenStreamTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.parsing.ParserTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.jscomp.regex.CharRangesTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.IRTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.JSDocInfoTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.NodeTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.BooleanLiteralSetTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.EnumElementTypeTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionParamBuilderTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.FunctionTypeTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeRegistryTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.JSTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.NamedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.ParameterizedTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.PrototypeObjectTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.RecordTypeTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.TernaryValueTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeBuilderTest, com.google.javascript.rhino.jstype.UnionTypeTest, com.google.javascript.rhino.jstype.UnionTypeTest], complianceLevel=7, outputFolder=/experiment_home///results/Nopol/Closure/12/seed_260/, json=true}
[3] INFO NoPol - Available processors (cores): 36
[8] INFO NoPol - Free memory: 1 GB
[8] INFO NoPol - Maximum memory: 7 GB
[8] INFO NoPol - Total memory available to JVM: 1 GB
[9] INFO NoPol - Java version: 1.8.0_45
[10] INFO NoPol - JAVA_HOME: /experiment_home/jdk1.8.0_45/
[10] INFO NoPol - PATH: /experiment_home/foo/bin:/experiment_home/perl5/bin:/experiment_home/jdk1.8.0_45//bin:/experiment_home/maven/apache-maven-3.6.0/bin:/experiment_home/commands/:/experiment_home/gradle/gradle-5.4.1/bin/:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games:/opt/dell/srvadmin/bin:/usr/local/cuda/bin:/opt/rocm/bin:/grid5000/code/bin:/experiment_home/defects4j/framework/bin
GPR[SSUP]-1659828809419
GPR[ESUP]-1659828809419
GPR[SFL]-1659828809419
GPR[EFL]-1659828853534
GPR[SFP]-1659828853534
GPR[SSUN]-1659828855362
-283827935
GPR[SPVATF]-1659828856100
GPR[EPVATF]-1659828856138
[51321] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828856138
GPR[SSUN]-1659828856138
-1966087783
GPR[ESUN]-1659828856364
GPR[SSUN]-1659828856365
-1966087783
GPR[SPVATF]-1659828856583
GPR[EPVATF]-1659828856617
[51801] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828856618
GPR[SSUN]-1659828856618
-1659631726
GPR[ESUN]-1659828856827
GPR[SSUN]-1659828856827
130004992
GPR[ESUN]-1659828859297
GPR[SSUN]-1659828859297
130004992
GPR[SPVATF]-1659828859490
GPR[EPVATF]-1659828859518
[54701] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828859518
GPR[SSUN]-1659828859518
130004992
GPR[ESUN]-1659828859708
GPR[SSUN]-1659828859708
-1966087783
GPR[SPVATF]-1659828859917
GPR[EPVATF]-1659828859939
[55122] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828859939
GPR[SSUN]-1659828859939
-1966087783
GPR[SPVATF]-1659828860144
GPR[EPVATF]-1659828860169
[55352] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828860169
GPR[SSUN]-1659828860169
890942016
GPR[ESUN]-1659828860381
GPR[SSUN]-1659828860381
890942016
GPR[SPVATF]-1659828860585
GPR[EPVATF]-1659828860609
[55792] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828860609
GPR[SSUN]-1659828860609
890942016
GPR[SPVATF]-1659828860822
GPR[EPVATF]-1659828860844
[56027] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828860844
GPR[EPVATF]-1659828860864
[56048] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828860865
GPR[SSUN]-1659828860865
890942016
GPR[ESUN]-1659828861077
GPR[SSUN]-1659828861077
890942016
GPR[ESUN]-1659828861279
GPR[SSUN]-1659828861279
-1966087783
GPR[ESUN]-1659828861479
GPR[SSUN]-1659828861479
-1966087783
GPR[SPVATF]-1659828861690
GPR[EPVATF]-1659828861709
[56892] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828861710
GPR[EPVATF]-1659828861729
[56912] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828861730
GPR[SSUN]-1659828861730
-1966087783
GPR[ESUN]-1659828861945
GPR[SSUN]-1659828861945
-1966087783
GPR[SPVATF]-1659828862143
GPR[EPVATF]-1659828862165
[57348] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828862166
GPR[EPVATF]-1659828862185
[57368] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828862185
GPR[SSUN]-1659828862185
-1966087783
GPR[ESUN]-1659828862389
GPR[SSUN]-1659828862389
-1966087783
GPR[ESUN]-1659828862589
GPR[SSUN]-1659828862589
-1966087783
GPR[ESUN]-1659828862793
GPR[SSUN]-1659828862793
80988634
GPR[ESUN]-1659828862978
GPR[SSUN]-1659828862978
1613130706
GPR[ESUN]-1659828863202
GPR[SSUN]-1659828863202
1613130706
GPR[ESUN]-1659828863423
GPR[SSUN]-1659828863423
1613130706
GPR[SPVATF]-1659828863650
GPR[EPVATF]-1659828863861
[59044] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828863861
GPR[SSUN]-1659828863861
234947553
GPR[ESUN]-1659828864072
GPR[SSUN]-1659828864072
234947553
GPR[SPVATF]-1659828864273
GPR[EPVATF]-1659828864292
[59476] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828864293
GPR[EPVATF]-1659828864311
[59494] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828864311
GPR[SSUN]-1659828864311
234947553
GPR[ESUN]-1659828864520
GPR[SSUN]-1659828864520
234947553
GPR[SPVATF]-1659828864721
GPR[EPVATF]-1659828864738
[59921] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828864739
GPR[EPVATF]-1659828864755
[59938] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828864755
GPR[SSUN]-1659828864755
234947553
GPR[SPVATF]-1659828864968
GPR[EPVATF]-1659828864983
[60167] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828864984
GPR[SSUN]-1659828864984
234947553
GPR[ESUN]-1659828865473
GPR[SSUN]-1659828865473
234947553
GPR[ESUN]-1659828866051
GPR[SSUN]-1659828866051
234947553
GPR[SPVATF]-1659828866602
GPR[EPVATF]-1659828866661
[61844] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828866661
GPR[SSUN]-1659828866661
234947553
GPR[SPVATF]-1659828867191
GPR[EPVATF]-1659828867261
[62444] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828867261
GPR[SSUN]-1659828867261
234947553
GPR[SPVATF]-1659828867500
GPR[EPVATF]-1659828867518
[62701] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828867518
GPR[SSUN]-1659828867518
234947553
GPR[ESUN]-1659828867718
GPR[SSUN]-1659828867718
234947553
GPR[ESUN]-1659828867913
GPR[SSUN]-1659828867913
234947553
GPR[SPVATF]-1659828868108
GPR[EPVATF]-1659828868124
[63308] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828868125
GPR[SSUN]-1659828868125
234947553
GPR[SPVATF]-1659828868328
GPR[EPVATF]-1659828868344
[63527] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828868344
GPR[SSUN]-1659828868344
234947553
GPR[ESUN]-1659828868561
GPR[SSUN]-1659828868561
234947553
GPR[SPVATF]-1659828868764
GPR[EPVATF]-1659828868780
[63963] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828868780
GPR[SSUN]-1659828868780
234947553
GPR[SPVATF]-1659828868981
GPR[EPVATF]-1659828868998
[64181] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828868998
GPR[SSUN]-1659828868998
234947553
GPR[ESUN]-1659828869216
GPR[SSUN]-1659828869216
890942016
GPR[SPVATF]-1659828869429
GPR[EPVATF]-1659828869449
[64632] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828869450
GPR[EPVATF]-1659828869468
[64651] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828869469
GPR[SSUN]-1659828869469
890942016
GPR[SPVATF]-1659828869675
GPR[EPVATF]-1659828869698
[64881] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828869698
GPR[SSUN]-1659828869698
890942016
GPR[ESUN]-1659828869903
GPR[SSUN]-1659828869903
890942016
GPR[SPVATF]-1659828870098
GPR[EPVATF]-1659828870117
[65301] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828870118
GPR[SSUN]-1659828870118
890942016
GPR[SPVATF]-1659828870322
GPR[EPVATF]-1659828870340
[65523] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828870340
GPR[EPVATF]-1659828870361
[65544] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828870361
GPR[SSUN]-1659828870361
890942016
GPR[SPVATF]-1659828870564
GPR[EPVATF]-1659828870582
[65765] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828870582
GPR[SSUN]-1659828870582
890942016
GPR[SPVATF]-1659828870784
GPR[EPVATF]-1659828870807
[65990] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828870807
GPR[EPVATF]-1659828870828
[66011] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828870828
GPR[SSUN]-1659828870828
890942016
GPR[ESUN]-1659828871039
GPR[SSUN]-1659828871039
890942016
GPR[SPVATF]-1659828871250
GPR[EPVATF]-1659828871272
[66455] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828871272
GPR[SSUN]-1659828871272
890942016
GPR[SPVATF]-1659828871484
GPR[EPVATF]-1659828871503
[66686] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828871503
GPR[SSUN]-1659828871503
890942016
GPR[SPVATF]-1659828871700
GPR[EPVATF]-1659828871719
[66902] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828871719
GPR[SSUN]-1659828871719
890942016
GPR[ESUN]-1659828871922
GPR[SSUN]-1659828871922
1613130706
GPR[SPVATF]-1659828872157
GPR[EPVATF]-1659828873313
[68496] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828873313
GPR[EPVATF]-1659828873500
[68683] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828873500
GPR[SSUN]-1659828873500
1613130706
GPR[SPVATF]-1659828873740
GPR[EPVATF]-1659828873934
[69117] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828873934
GPR[SSUN]-1659828873934
1613130706
GPR[SPVATF]-1659828874171
GPR[EPVATF]-1659828874354
[69537] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828874355
GPR[EPVATF]-1659828874533
[69716] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828874533
GPR[SSUN]-1659828874533
2433571
GPR[ESUN]-1659828874792
GPR[SSUN]-1659828874792
-128675625
GPR[SPVATF]-1659828875049
GPR[EPVATF]-1659828875480
GPR[SPS]-1659828875480
[71623] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:400.
GPR[EPS]-1659828876440
GPR[SPVATF]-1659828876440
GPR[EPVATF]-1659828876852
GPR[SPS]-1659828876852
GPR[EPS]-1659828885464
GPR[ESUN]-1659828885464
GPR[SSUN]-1659828885464
-128675625
GPR[ESUN]-1659828885960
GPR[SSUN]-1659828885960
1207178244
GPR[ESUN]-1659828886178
GPR[SSUN]-1659828886178
2433571
GPR[SPVATF]-1659828886432
GPR[EPVATF]-1659828886828
GPR[SPS]-1659828886828
[83605] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1462.
GPR[EPS]-1659828888422
GPR[ESUN]-1659828888423
GPR[SSUN]-1659828888423
2433571
GPR[SPVATF]-1659828888681
GPR[EPVATF]-1659828889120
GPR[SPS]-1659828889120
GPR[EPS]-1659828890423
GPR[SPVATR]-1659828890423
[85606] INFO TestPatch - Applying patch: com.google.javascript.rhino.Node:1433: PRECONDITION node2.type <= 47
[86034] INFO TestPatch - Running test suite to check the patch "node2.type <= 47" is working
GPR[EPVATR]-1659828891078
[86262] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659828891079
[86290] INFO NoPol - --- a/src/com/google/javascript/rhino/Node.java
+++ b/src/com/google/javascript/rhino/Node.java
@@ -1432,7 +1432,9 @@
       if (diff != null) {
-        return "Node tree inequality:" +
-            "\nTree1:\n" + toStringTree() +
-            "\n\nTree2:\n" + node2.toStringTree() +
-            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
-            "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        if (node2.type <= 47) {
+          return "Node tree inequality:" +
+          "\nTree1:\n" + toStringTree() +
+          "\n\nTree2:\n" + node2.toStringTree() +
+          "\n\nSubtree1: " + diff.nodeA.toStringTree() +
+          "\n\nSubtree2: " + diff.nodeB.toStringTree();
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_81688_1ts_1659828891107.diff
GPR[ESUN]-1659828891108
GPR[SSUN]-1659828891108
80988634
GPR[ESUN]-1659828891323
GPR[SSUN]-1659828891323
80988634
GPR[ESUN]-1659828891506
GPR[SSUN]-1659828891506
80988634
GPR[ESUN]-1659828891698
GPR[SSUN]-1659828891698
-1516948592
GPR[ESUN]-1659828891886
GPR[SSUN]-1659828891886
-1516948592
GPR[SPVATF]-1659828892074
GPR[EPVATF]-1659828892505
GPR[SPS]-1659828892505
[88185] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:206.
GPR[EPS]-1659828893002
GPR[ESUN]-1659828893002
GPR[SSUN]-1659828893002
1613130706
GPR[SPVATF]-1659828893244
GPR[EPVATF]-1659828893427
[88611] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828893428
GPR[EPVATF]-1659828893613
[88796] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828893614
GPR[SSUN]-1659828893614
1613130706
GPR[SPVATF]-1659828893845
GPR[EPVATF]-1659828894038
[89221] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828894038
GPR[EPVATF]-1659828894229
[89412] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828894229
GPR[SSUN]-1659828894229
1613130706
GPR[ESUN]-1659828894446
GPR[SSUN]-1659828894446
1613130706
GPR[ESUN]-1659828894661
GPR[SSUN]-1659828894661
1613130706
GPR[ESUN]-1659828894927
GPR[SSUN]-1659828894927
1613130706
GPR[ESUN]-1659828895139
GPR[SSUN]-1659828895139
1613130706
GPR[SPVATF]-1659828895357
GPR[EPVATF]-1659828895549
[90732] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828895549
GPR[EPVATF]-1659828895746
[90929] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828895746
GPR[SSUN]-1659828895746
-1516948592
GPR[ESUN]-1659828895949
GPR[SSUN]-1659828895949
1613130706
GPR[SPVATF]-1659828896184
GPR[EPVATF]-1659828896371
[91554] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828896371
GPR[SSUN]-1659828896371
1613130706
GPR[ESUN]-1659828896588
GPR[SSUN]-1659828896588
1613130706
GPR[SPVATF]-1659828896812
GPR[EPVATF]-1659828896998
[92182] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828896999
GPR[EPVATF]-1659828897179
[92363] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828897180
GPR[SSUN]-1659828897180
1613130706
GPR[ESUN]-1659828897411
GPR[SSUN]-1659828897411
1613130706
GPR[SPVATF]-1659828897642
GPR[EPVATF]-1659828897817
[93000] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828897818
GPR[EPVATF]-1659828897996
[93180] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828897997
GPR[SSUN]-1659828897997
-1966087783
GPR[ESUN]-1659828898203
GPR[SSUN]-1659828898203
-1966087783
GPR[SPVATF]-1659828898406
GPR[EPVATF]-1659828898427
[93611] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828898428
GPR[EPVATF]-1659828898448
[93631] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828898448
GPR[SSUN]-1659828898448
-1966087783
GPR[SPVATF]-1659828898691
GPR[EPVATF]-1659828898713
[93896] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828898713
GPR[SSUN]-1659828898713
80988634
GPR[ESUN]-1659828898902
GPR[SSUN]-1659828898902
-1516948592
GPR[SPVATF]-1659828899099
GPR[EPVATF]-1659828899530
GPR[SPS]-1659828899530
[95821] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:224.
GPR[EPS]-1659828900638
GPR[SPVATF]-1659828900638
GPR[EPVATF]-1659828901118
GPR[SPS]-1659828901118
GPR[EPS]-1659828923646
GPR[ESUN]-1659828923646
GPR[SSUN]-1659828923646
-1516948592
GPR[ESUN]-1659828923886
GPR[SSUN]-1659828923886
-1516948592
GPR[SPVATF]-1659828924079
GPR[EPVATF]-1659828924478
GPR[SPS]-1659828924478
[120150] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:219.
GPR[EPS]-1659828924967
GPR[SPVATF]-1659828924967
GPR[EPVATF]-1659828925398
GPR[SPS]-1659828925398
[121061] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:219.
GPR[EPS]-1659828925878
GPR[ESUN]-1659828925878
GPR[SSUN]-1659828925878
-1516948592
GPR[SPVATF]-1659828926166
GPR[EPVATF]-1659828926619
GPR[SPS]-1659828926619
[122301] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:216.
GPR[EPS]-1659828927118
GPR[SPVATF]-1659828927119
GPR[EPVATF]-1659828927525
GPR[SPS]-1659828927525
[123187] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:216.
GPR[EPS]-1659828928004
GPR[ESUN]-1659828928004
GPR[SSUN]-1659828928004
-1516948592
GPR[SPVATF]-1659828928197
GPR[EPVATF]-1659828928627
GPR[SPS]-1659828928627
[124313] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:214.
GPR[EPS]-1659828929130
GPR[ESUN]-1659828929130
GPR[SSUN]-1659828929131
-1516948592
GPR[SPVATF]-1659828929334
GPR[EPVATF]-1659828929770
GPR[SPS]-1659828929770
[125437] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:211.
GPR[EPS]-1659828930254
GPR[SPVATF]-1659828930254
GPR[EPVATF]-1659828930793
GPR[SPS]-1659828930793
[126454] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:211.
GPR[EPS]-1659828931271
GPR[ESUN]-1659828931271
GPR[SSUN]-1659828931271
-1516948592
GPR[SPVATF]-1659828931473
GPR[EPVATF]-1659828931898
GPR[SPS]-1659828931898
[127583] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:208.
GPR[EPS]-1659828932400
GPR[ESUN]-1659828932400
GPR[SSUN]-1659828932400
-1516948592
GPR[SPVATF]-1659828932591
GPR[EPVATF]-1659828933787
GPR[SPS]-1659828933787
[129631] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:205.
GPR[EPS]-1659828934448
GPR[SPVATF]-1659828934448
GPR[EPVATF]-1659828934871
GPR[SPS]-1659828934871
[130556] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:205.
GPR[EPS]-1659828935373
GPR[ESUN]-1659828935373
GPR[SSUN]-1659828935373
-1516948592
GPR[SPVATF]-1659828935564
GPR[EPVATF]-1659828935991
GPR[SPS]-1659828935991
[131669] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:201.
GPR[EPS]-1659828936486
GPR[SPVATF]-1659828936486
GPR[EPVATF]-1659828936911
GPR[SPS]-1659828936911
GPR[EPS]-1659828952969
GPR[ESUN]-1659828952969
GPR[SSUN]-1659828952969
-1516948592
GPR[ESUN]-1659828953264
GPR[SSUN]-1659828953264
-1516948592
GPR[SPVATF]-1659828953464
GPR[EPVATF]-1659828953918
GPR[SPS]-1659828953918
[149579] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:124.
GPR[EPS]-1659828954396
GPR[ESUN]-1659828954396
GPR[SSUN]-1659828954396
-1516948592
GPR[ESUN]-1659828954578
GPR[SSUN]-1659828954578
-1516948592
GPR[SPVATF]-1659828954773
GPR[EPVATF]-1659828955199
GPR[SPS]-1659828955199
[150889] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:122.
GPR[EPS]-1659828955706
GPR[ESUN]-1659828955706
GPR[SSUN]-1659828955706
-1966087783
GPR[SPVATF]-1659828955914
GPR[EPVATF]-1659828955940
[151123] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828955940
GPR[EPVATF]-1659828955965
[151148] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828955965
GPR[SSUN]-1659828955965
-1966087783
GPR[SPVATF]-1659828956177
GPR[EPVATF]-1659828956202
[151385] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828956202
GPR[EPVATF]-1659828956227
[151410] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828956227
GPR[SSUN]-1659828956227
-1966087783
GPR[SPVATF]-1659828956437
GPR[EPVATF]-1659828956463
[151646] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828956463
GPR[EPVATF]-1659828956486
[151669] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828956486
GPR[SSUN]-1659828956486
-1966087783
GPR[ESUN]-1659828956690
GPR[SSUN]-1659828956690
-1966087783
GPR[ESUN]-1659828956896
GPR[SSUN]-1659828956896
-1966087783
GPR[SPVATF]-1659828957095
GPR[EPVATF]-1659828957116
[152300] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828957117
GPR[EPVATF]-1659828957140
[152323] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828957140
GPR[SSUN]-1659828957140
-1966087783
GPR[SPVATF]-1659828957347
GPR[EPVATF]-1659828957371
[152554] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659828957371
GPR[EPVATF]-1659828957394
[152577] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828957394
GPR[SSUN]-1659828957395
-1966087783
GPR[ESUN]-1659828957602
GPR[SSUN]-1659828957602
-1966087783
GPR[SPVATF]-1659828957800
GPR[EPVATF]-1659828957822
[153005] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828957822
GPR[SSUN]-1659828957822
-1119592721
GPR[SPVATF]-1659828958125
GPR[EPVATF]-1659828958530
GPR[SPS]-1659828958531
[154289] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:431.
GPR[EPS]-1659828959106
GPR[ESUN]-1659828959106
GPR[SSUN]-1659828959106
2433571
GPR[SPVATF]-1659828959363
GPR[EPVATF]-1659828959798
GPR[SPS]-1659828959798
[155680] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1449.
GPR[EPS]-1659828960497
GPR[ESUN]-1659828960497
GPR[SSUN]-1659828960497
-128675625
GPR[SPVATF]-1659828960750
GPR[EPVATF]-1659828961180
GPR[SPS]-1659828961180
[156965] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:521.
GPR[EPS]-1659828961782
GPR[SPVATF]-1659828961782
GPR[EPVATF]-1659828962214
GPR[SPS]-1659828962214
GPR[EPS]-1659828976167
GPR[ESUN]-1659828976167
GPR[SSUN]-1659828976167
-1119592721
GPR[SPVATF]-1659828976417
GPR[EPVATF]-1659828976849
GPR[SPS]-1659828976849
[174851] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:343.
GPR[EPS]-1659828979668
GPR[ESUN]-1659828979668
GPR[SSUN]-1659828979668
948429589
GPR[SPVATF]-1659828979914
GPR[EPVATF]-1659828980473
GPR[SPS]-1659828980473
[176246] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:575.
GPR[EPS]-1659828981063
GPR[ESUN]-1659828981063
GPR[SSUN]-1659828981063
-1966087783
GPR[SPVATF]-1659828981273
GPR[EPVATF]-1659828981297
[176480] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828981297
GPR[SSUN]-1659828981297
-1966087783
GPR[ESUN]-1659828981497
GPR[SSUN]-1659828981497
-1966087783
GPR[SPVATF]-1659828981697
GPR[EPVATF]-1659828981722
[176905] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828981722
GPR[SSUN]-1659828981722
-1966087783
GPR[ESUN]-1659828981923
GPR[SSUN]-1659828981923
-1966087783
GPR[ESUN]-1659828982114
GPR[SSUN]-1659828982114
-1966087783
GPR[SPVATF]-1659828982311
GPR[EPVATF]-1659828982334
[177517] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828982334
GPR[SSUN]-1659828982334
-1966087783
GPR[SPVATF]-1659828982534
GPR[EPVATF]-1659828982558
[177742] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659828982559
GPR[SSUN]-1659828982559
-128675625
GPR[SPVATF]-1659828982804
GPR[EPVATF]-1659828983257
GPR[SPS]-1659828983257
[179004] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:166.
GPR[EPS]-1659828983821
GPR[ESUN]-1659828983822
GPR[SSUN]-1659828983822
-1516948592
GPR[SPVATF]-1659828984064
GPR[EPVATF]-1659828984497
GPR[SPS]-1659828984497
[180250] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:148.
GPR[EPS]-1659828985067
GPR[SPVATF]-1659828985067
GPR[EPVATF]-1659828985519
GPR[SPS]-1659828985519
[181196] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:148.
GPR[EPS]-1659828986013
GPR[ESUN]-1659828986013
GPR[SSUN]-1659828986013
-128675625
GPR[SPVATF]-1659828986259
GPR[EPVATF]-1659828986688
GPR[SPS]-1659828986688
[182450] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:424.
GPR[EPS]-1659828987267
GPR[SPVATF]-1659828987268
GPR[EPVATF]-1659828987703
GPR[SPS]-1659828987703
[183489] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:424.
GPR[EPS]-1659828988306
GPR[ESUN]-1659828988306
GPR[SSUN]-1659828988306
-128675625
GPR[SPVATF]-1659828988561
GPR[EPVATF]-1659828989014
GPR[SPS]-1659828989014
[184811] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:423.
GPR[EPS]-1659828989628
GPR[ESUN]-1659828989628
GPR[SSUN]-1659828989628
-128675625
GPR[SPVATF]-1659828989892
GPR[EPVATF]-1659828990393
GPR[SPS]-1659828990393
[186303] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:422.
GPR[EPS]-1659828991120
GPR[ESUN]-1659828991120
GPR[SSUN]-1659828991120
-128675625
GPR[SPVATF]-1659828991364
GPR[EPVATF]-1659828991808
GPR[SPS]-1659828991808
[187579] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:419.
GPR[EPS]-1659828992396
GPR[ESUN]-1659828992396
GPR[SSUN]-1659828992396
-128675625
GPR[SPVATF]-1659828992659
GPR[EPVATF]-1659828993087
GPR[SPS]-1659828993087
[188857] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:418.
GPR[EPS]-1659828993674
GPR[ESUN]-1659828993674
GPR[SSUN]-1659828993674
-128675625
GPR[SPVATF]-1659828993915
GPR[EPVATF]-1659828994407
GPR[SPS]-1659828994407
[190354] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:416.
GPR[EPS]-1659828995171
GPR[ESUN]-1659828995171
GPR[SSUN]-1659828995171
-128675625
GPR[ESUN]-1659828995436
GPR[SSUN]-1659828995436
-1119592721
GPR[SPVATF]-1659828995672
GPR[EPVATF]-1659828996119
GPR[SPS]-1659828996119
[191990] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:400.
GPR[EPS]-1659828996807
GPR[ESUN]-1659828996807
GPR[SSUN]-1659828996807
-1119592721
GPR[ESUN]-1659828997056
GPR[SSUN]-1659828997056
-128675625
GPR[ESUN]-1659828997320
GPR[SSUN]-1659828997320
-128675625
GPR[SPVATF]-1659828997574
GPR[EPVATF]-1659828998026
GPR[SPS]-1659828998026
[193788] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:290.
GPR[EPS]-1659828998605
GPR[SPVATF]-1659828998605
GPR[EPVATF]-1659828999018
GPR[SPS]-1659828999018
[194789] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:290.
GPR[EPS]-1659828999606
GPR[ESUN]-1659828999606
GPR[SSUN]-1659828999606
-128675625
GPR[ESUN]-1659828999859
GPR[SSUN]-1659828999859
-1966087783
GPR[SPVATF]-1659829000059
GPR[EPVATF]-1659829000079
[195262] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829000079
GPR[SSUN]-1659829000079
-128675625
GPR[ESUN]-1659829000329
GPR[SSUN]-1659829000329
-128675625
GPR[SPVATF]-1659829000585
GPR[EPVATF]-1659829001833
GPR[SPS]-1659829001833
[197720] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:427.
GPR[EPS]-1659829002537
GPR[ESUN]-1659829002537
GPR[SSUN]-1659829002537
-128675625
GPR[SPVATF]-1659829002781
GPR[EPVATF]-1659829003248
GPR[SPS]-1659829003248
[199016] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:426.
GPR[EPS]-1659829003833
GPR[ESUN]-1659829003833
GPR[SSUN]-1659829003833
-128675625
GPR[ESUN]-1659829004087
GPR[SSUN]-1659829004087
2433571
GPR[SPVATF]-1659829004343
GPR[EPVATF]-1659829004779
GPR[SPS]-1659829004779
[200656] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:968.
GPR[EPS]-1659829005473
GPR[ESUN]-1659829005473
GPR[SSUN]-1659829005473
80988634
GPR[ESUN]-1659829005664
GPR[SSUN]-1659829005664
-1119592721
GPR[ESUN]-1659829005903
GPR[SSUN]-1659829005903
-1966087783
GPR[SPVATF]-1659829006104
GPR[EPVATF]-1659829006122
[201305] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829006122
GPR[SSUN]-1659829006122
-1966087783
GPR[SPVATF]-1659829006319
GPR[EPVATF]-1659829006339
[201522] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829006339
GPR[SSUN]-1659829006339
-1966087783
GPR[SPVATF]-1659829006542
GPR[EPVATF]-1659829006564
[201747] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829006564
GPR[SSUN]-1659829006565
-1966087783
GPR[SPVATF]-1659829006776
GPR[EPVATF]-1659829006857
[202040] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829006857
GPR[SSUN]-1659829006857
-1966087783
GPR[SPVATF]-1659829007068
GPR[EPVATF]-1659829007085
[202268] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829007085
GPR[SSUN]-1659829007085
-1966087783
GPR[SPVATF]-1659829007292
GPR[EPVATF]-1659829007310
[202493] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829007310
GPR[EPVATF]-1659829007326
[202509] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829007326
GPR[SSUN]-1659829007326
-1966087783
GPR[ESUN]-1659829007521
GPR[SSUN]-1659829007521
2433571
GPR[SPVATF]-1659829007758
GPR[EPVATF]-1659829008228
GPR[SPS]-1659829008228
[204084] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:965.
GPR[EPS]-1659829008901
GPR[SPVATF]-1659829008901
GPR[EPVATF]-1659829009342
GPR[SPS]-1659829009342
[205199] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:965.
GPR[EPS]-1659829010016
GPR[ESUN]-1659829010016
GPR[SSUN]-1659829010016
2433571
GPR[SPVATF]-1659829010260
GPR[EPVATF]-1659829010684
GPR[SPS]-1659829010684
[206480] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:961.
GPR[EPS]-1659829011297
GPR[ESUN]-1659829011297
GPR[SSUN]-1659829011297
2433571
GPR[ESUN]-1659829011524
GPR[SSUN]-1659829011524
2433571
GPR[ESUN]-1659829011829
GPR[SSUN]-1659829011829
-675467674
GPR[ESUN]-1659829012003
GPR[SSUN]-1659829012003
2433571
GPR[SPVATF]-1659829012258
GPR[EPVATF]-1659829012669
GPR[SPS]-1659829012669
[209733] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:972.
GPR[EPS]-1659829014550
GPR[ESUN]-1659829014550
GPR[SSUN]-1659829014550
2433571
GPR[SPVATF]-1659829015222
GPR[EPVATF]-1659829015922
GPR[SPS]-1659829015922
[211776] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:971.
GPR[EPS]-1659829016593
GPR[ESUN]-1659829016593
GPR[SSUN]-1659829016593
-128675625
GPR[SPVATF]-1659829016855
GPR[EPVATF]-1659829017275
GPR[SPS]-1659829017275
[213034] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:455.
GPR[EPS]-1659829017851
GPR[ESUN]-1659829017851
GPR[SSUN]-1659829017851
160819208
GPR[SPVATF]-1659829018105
GPR[EPVATF]-1659829018555
GPR[SPS]-1659829018555
[214403] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:849.
GPR[EPS]-1659829019220
GPR[ESUN]-1659829019220
GPR[SSUN]-1659829019220
160819208
GPR[SPVATF]-1659829019476
GPR[EPVATF]-1659829019912
GPR[SPS]-1659829019912
[215693] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:848.
GPR[EPS]-1659829020510
GPR[ESUN]-1659829020510
GPR[SSUN]-1659829020510
160819208
GPR[SPVATF]-1659829020776
GPR[EPVATF]-1659829021217
GPR[SPS]-1659829021217
[216987] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:847.
GPR[EPS]-1659829021804
GPR[SPVATF]-1659829021805
GPR[EPVATF]-1659829022238
GPR[SPS]-1659829022238
[218012] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:847.
GPR[EPS]-1659829022829
GPR[ESUN]-1659829022829
GPR[SSUN]-1659829022829
160819208
GPR[SPVATF]-1659829023090
GPR[EPVATF]-1659829023531
GPR[SPS]-1659829023531
[219343] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:761.
GPR[EPS]-1659829024160
GPR[ESUN]-1659829024160
GPR[SSUN]-1659829024160
-1119592721
GPR[SPVATF]-1659829024414
GPR[EPVATF]-1659829024823
GPR[SPS]-1659829024823
[220699] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:435.
GPR[EPS]-1659829025516
GPR[SPVATF]-1659829025516
GPR[EPVATF]-1659829025961
GPR[SPS]-1659829025961
[222504] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:435.
GPR[EPS]-1659829027321
GPR[ESUN]-1659829027321
GPR[SSUN]-1659829027321
-128675625
GPR[ESUN]-1659829027597
GPR[SSUN]-1659829027597
-128675625
GPR[SPVATF]-1659829027839
GPR[EPVATF]-1659829028334
GPR[SPS]-1659829028334
[224311] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:454.
GPR[EPS]-1659829029128
GPR[SPVATF]-1659829029128
GPR[EPVATF]-1659829029565
GPR[SPS]-1659829029565
[225333] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:454.
GPR[EPS]-1659829030150
GPR[ESUN]-1659829030150
GPR[SSUN]-1659829030150
-128675625
GPR[ESUN]-1659829030393
GPR[SSUN]-1659829030393
-1684326478
GPR[SPVATF]-1659829030639
GPR[EPVATF]-1659829031080
GPR[SPS]-1659829031080
[226870] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:189.
GPR[EPS]-1659829031687
GPR[ESUN]-1659829031687
GPR[SSUN]-1659829031687
-1684326478
GPR[SPVATF]-1659829031934
GPR[EPVATF]-1659829032371
GPR[SPS]-1659829032371
[228180] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:150.
GPR[EPS]-1659829032997
GPR[ESUN]-1659829032997
GPR[SSUN]-1659829032997
-1684326478
GPR[SPVATF]-1659829033237
GPR[EPVATF]-1659829033691
GPR[SPS]-1659829033691
[229590] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MakeDeclaredNamesUnique:148.
GPR[EPS]-1659829034407
GPR[ESUN]-1659829034407
GPR[SSUN]-1659829034407
-1684326478
GPR[ESUN]-1659829034650
GPR[SSUN]-1659829034650
-1684326478
GPR[ESUN]-1659829034881
GPR[SSUN]-1659829034881
-1119592721
GPR[ESUN]-1659829035136
GPR[SSUN]-1659829035136
-1119592721
GPR[ESUN]-1659829035373
GPR[SSUN]-1659829035373
-1119592721
GPR[SPVATF]-1659829035606
GPR[EPVATF]-1659829036031
GPR[SPS]-1659829036031
[231770] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$Definition:79.
GPR[EPS]-1659829036587
GPR[SPVATF]-1659829036587
GPR[EPVATF]-1659829037009
GPR[SPS]-1659829037009
[232742] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$Definition:79.
GPR[EPS]-1659829037559
GPR[ESUN]-1659829037559
GPR[SSUN]-1659829037559
1965452846
GPR[ESUN]-1659829037785
GPR[SSUN]-1659829037785
1965452846
GPR[SPVATF]-1659829038000
GPR[EPVATF]-1659829038434
GPR[SPS]-1659829038434
[234172] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph$AnnotatedLinkedDirectedGraphEdge:578.
GPR[EPS]-1659829038989
GPR[ESUN]-1659829038989
GPR[SSUN]-1659829038989
1965452846
GPR[ESUN]-1659829039207
GPR[SSUN]-1659829039207
-1516948592
GPR[ESUN]-1659829039389
GPR[SSUN]-1659829039389
-1516948592
GPR[ESUN]-1659829039570
GPR[SSUN]-1659829039570
-1516948592
GPR[SPVATF]-1659829039754
GPR[EPVATF]-1659829040189
GPR[SPS]-1659829040189
[235959] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:147.
GPR[EPS]-1659829040776
GPR[ESUN]-1659829040776
GPR[SSUN]-1659829040776
-1516948592
GPR[SPVATF]-1659829040968
GPR[EPVATF]-1659829041390
GPR[SPS]-1659829041390
[237028] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:146.
GPR[EPS]-1659829041845
GPR[SPVATF]-1659829041846
GPR[EPVATF]-1659829042267
GPR[SPS]-1659829042267
[237924] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:146.
GPR[EPS]-1659829042741
GPR[ESUN]-1659829042741
GPR[SSUN]-1659829042741
-1516948592
GPR[ESUN]-1659829042935
GPR[SSUN]-1659829042935
-1516948592
GPR[SPVATF]-1659829043131
GPR[EPVATF]-1659829043560
GPR[SPS]-1659829043560
[239219] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:142.
GPR[EPS]-1659829044036
GPR[SPVATF]-1659829044036
GPR[EPVATF]-1659829044498
GPR[SPS]-1659829044498
[240178] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:142.
GPR[EPS]-1659829044995
GPR[ESUN]-1659829044995
GPR[SSUN]-1659829044995
1965452846
GPR[ESUN]-1659829045219
GPR[SSUN]-1659829045219
1965452846
GPR[SPVATF]-1659829045430
GPR[EPVATF]-1659829045880
GPR[SPS]-1659829045880
[241647] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:316.
GPR[EPS]-1659829046464
GPR[ESUN]-1659829046464
GPR[SSUN]-1659829046464
-128675625
GPR[SPVATF]-1659829046716
GPR[EPVATF]-1659829047156
GPR[SPS]-1659829047156
[242906] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:448.
GPR[EPS]-1659829047723
GPR[ESUN]-1659829047724
GPR[SSUN]-1659829047724
-1516948592
GPR[ESUN]-1659829047920
GPR[SSUN]-1659829047920
-1516948592
GPR[SPVATF]-1659829048109
GPR[EPVATF]-1659829048546
GPR[SPS]-1659829048546
[244444] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:152.
GPR[EPS]-1659829049261
GPR[ESUN]-1659829049261
GPR[SSUN]-1659829049261
-1516948592
GPR[SPVATF]-1659829049474
GPR[EPVATF]-1659829049940
GPR[SPS]-1659829049940
[245656] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:141.
GPR[EPS]-1659829050473
GPR[ESUN]-1659829050473
GPR[SSUN]-1659829050473
-1516948592
GPR[SPVATF]-1659829050680
GPR[EPVATF]-1659829051168
GPR[SPS]-1659829051168
[246892] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:140.
GPR[EPS]-1659829051709
GPR[ESUN]-1659829051709
GPR[SSUN]-1659829051709
-1516948592
GPR[ESUN]-1659829051912
GPR[SSUN]-1659829051912
-1516948592
GPR[SPVATF]-1659829052097
GPR[EPVATF]-1659829052573
GPR[SPS]-1659829052573
[248265] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:136.
GPR[EPS]-1659829053082
GPR[ESUN]-1659829053082
GPR[SSUN]-1659829053082
-1516948592
GPR[SPVATF]-1659829053289
GPR[EPVATF]-1659829053780
GPR[SPS]-1659829053780
[250353] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:135.
GPR[EPS]-1659829055170
GPR[ESUN]-1659829055171
GPR[SSUN]-1659829055171
-1516948592
GPR[ESUN]-1659829055629
GPR[SSUN]-1659829055629
-1516948592
GPR[SPVATF]-1659829055834
GPR[EPVATF]-1659829056337
GPR[SPS]-1659829056337
[252285] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:131.
GPR[EPS]-1659829057102
GPR[ESUN]-1659829057102
GPR[SSUN]-1659829057102
-1516948592
GPR[SPVATF]-1659829057306
GPR[EPVATF]-1659829057744
GPR[SPS]-1659829057744
[253438] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:130.
GPR[EPS]-1659829058255
GPR[ESUN]-1659829058255
GPR[SSUN]-1659829058255
-1516948592
GPR[SPVATF]-1659829058472
GPR[EPVATF]-1659829058931
GPR[SPS]-1659829058931
[254612] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CheckPathsBetweenNodes:129.
GPR[EPS]-1659829059429
GPR[ESUN]-1659829059429
GPR[SSUN]-1659829059429
1965452846
GPR[ESUN]-1659829059673
GPR[SSUN]-1659829059673
1965452846
GPR[ESUN]-1659829059909
GPR[SSUN]-1659829059909
1965452846
GPR[SPVATF]-1659829060131
GPR[EPVATF]-1659829060580
GPR[SPS]-1659829060580
[256369] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:315.
GPR[EPS]-1659829061187
GPR[ESUN]-1659829061187
GPR[SSUN]-1659829061187
1965452846
GPR[SPVATF]-1659829061413
GPR[EPVATF]-1659829061870
GPR[SPS]-1659829061870
[257669] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.LinkedDirectedGraph:314.
GPR[EPS]-1659829062486
GPR[ESUN]-1659829062486
GPR[SSUN]-1659829062486
1965452846
GPR[ESUN]-1659829062717
GPR[SSUN]-1659829062717
160819208
GPR[SPVATF]-1659829062977
GPR[EPVATF]-1659829063450
GPR[SPS]-1659829063450
[259391] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:754.
GPR[EPS]-1659829064208
GPR[ESUN]-1659829064208
GPR[SSUN]-1659829064208
948429589
GPR[SPVATF]-1659829064472
GPR[EPVATF]-1659829064941
GPR[SPS]-1659829064941
[260738] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:302.
GPR[EPS]-1659829065555
GPR[ESUN]-1659829065555
GPR[SSUN]-1659829065555
948429589
GPR[ESUN]-1659829065815
GPR[SSUN]-1659829065815
948429589
GPR[SPVATF]-1659829066087
GPR[EPVATF]-1659829066554
GPR[SPS]-1659829066554
[262340] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:300.
GPR[EPS]-1659829067157
GPR[ESUN]-1659829067157
GPR[SSUN]-1659829067157
948429589
GPR[ESUN]-1659829067418
GPR[SSUN]-1659829067418
948429589
GPR[SPVATF]-1659829067673
GPR[EPVATF]-1659829068147
GPR[SPS]-1659829068147
[263947] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:298.
GPR[EPS]-1659829068764
GPR[ESUN]-1659829068764
GPR[SSUN]-1659829068764
948429589
GPR[ESUN]-1659829069020
GPR[SSUN]-1659829069020
69062959
GPR[ESUN]-1659829069236
GPR[SSUN]-1659829069236
69062959
GPR[ESUN]-1659829069447
GPR[SSUN]-1659829069447
69062959
GPR[ESUN]-1659829069651
GPR[SSUN]-1659829069651
69062959
GPR[SPVATF]-1659829069861
GPR[EPVATF]-1659829070332
GPR[SPS]-1659829070332
[266055] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:350.
GPR[EPS]-1659829070872
GPR[ESUN]-1659829070872
GPR[SSUN]-1659829070872
69062959
GPR[SPVATF]-1659829071077
GPR[EPVATF]-1659829071571
GPR[SPS]-1659829071571
[267298] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:349.
GPR[EPS]-1659829072115
GPR[ESUN]-1659829072115
GPR[SSUN]-1659829072115
69062959
GPR[ESUN]-1659829072325
GPR[SSUN]-1659829072325
69062959
GPR[ESUN]-1659829072538
GPR[SSUN]-1659829072538
69062959
GPR[SPVATF]-1659829072877
GPR[EPVATF]-1659829073379
GPR[SPS]-1659829073379
[269118] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:341.
GPR[EPS]-1659829073935
GPR[ESUN]-1659829073935
GPR[SSUN]-1659829073935
69062959
GPR[SPVATF]-1659829074141
GPR[EPVATF]-1659829074654
GPR[SPS]-1659829074654
[270360] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:340.
GPR[EPS]-1659829075177
GPR[ESUN]-1659829075177
GPR[SSUN]-1659829075177
69062959
GPR[SPVATF]-1659829075381
GPR[EPVATF]-1659829075850
GPR[SPS]-1659829075850
[271565] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:339.
GPR[EPS]-1659829076382
GPR[ESUN]-1659829076382
GPR[SSUN]-1659829076382
69062959
GPR[SPVATF]-1659829076588
GPR[EPVATF]-1659829077055
GPR[SPS]-1659829077055
[272783] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:338.
GPR[EPS]-1659829077600
GPR[ESUN]-1659829077600
GPR[SSUN]-1659829077600
69062959
GPR[ESUN]-1659829077811
GPR[SSUN]-1659829077811
69062959
GPR[SPVATF]-1659829078010
GPR[EPVATF]-1659829078476
GPR[SPS]-1659829078476
[274213] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:280.
GPR[EPS]-1659829079030
GPR[ESUN]-1659829079030
GPR[SSUN]-1659829079030
69062959
GPR[SPVATF]-1659829079242
GPR[EPVATF]-1659829079719
GPR[SPS]-1659829079719
[275405] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:278.
GPR[EPS]-1659829080222
GPR[ESUN]-1659829080222
GPR[SSUN]-1659829080222
69062959
GPR[ESUN]-1659829080433
GPR[SSUN]-1659829080433
69062959
GPR[SPVATF]-1659829080640
GPR[EPVATF]-1659829081144
GPR[SPS]-1659829081144
[276852] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:270.
GPR[EPS]-1659829081669
GPR[ESUN]-1659829081669
GPR[SSUN]-1659829081669
69062959
GPR[SPVATF]-1659829081872
GPR[EPVATF]-1659829082532
GPR[SPS]-1659829082532
[278249] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:268.
GPR[EPS]-1659829083066
GPR[ESUN]-1659829083066
GPR[SSUN]-1659829083066
69062959
GPR[SPVATF]-1659829083277
GPR[EPVATF]-1659829083728
GPR[SPS]-1659829083728
[279464] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:267.
GPR[EPS]-1659829084281
GPR[SPVATF]-1659829084282
GPR[EPVATF]-1659829084762
GPR[SPS]-1659829084762
[280879] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:267.
GPR[EPS]-1659829085696
GPR[ESUN]-1659829085696
GPR[SSUN]-1659829085696
69062959
GPR[ESUN]-1659829086233
GPR[SSUN]-1659829086233
69062959
GPR[SPVATF]-1659829086834
GPR[EPVATF]-1659829087802
GPR[SPS]-1659829087802
[284367] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:259.
GPR[EPS]-1659829089184
GPR[ESUN]-1659829089184
GPR[SSUN]-1659829089184
69062959
GPR[SPVATF]-1659829089391
GPR[EPVATF]-1659829089968
GPR[SPS]-1659829089968
[286021] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:257.
GPR[EPS]-1659829090838
GPR[ESUN]-1659829090838
GPR[SSUN]-1659829090838
69062959
GPR[ESUN]-1659829091033
GPR[SSUN]-1659829091033
69062959
GPR[SPVATF]-1659829091231
GPR[EPVATF]-1659829091759
GPR[SPS]-1659829091759
[287448] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:249.
GPR[EPS]-1659829092265
GPR[ESUN]-1659829092265
GPR[SSUN]-1659829092265
69062959
GPR[SPVATF]-1659829092468
GPR[EPVATF]-1659829092937
GPR[SPS]-1659829092937
[288640] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:247.
GPR[EPS]-1659829093457
GPR[ESUN]-1659829093457
GPR[SSUN]-1659829093457
69062959
GPR[SPVATF]-1659829093660
GPR[EPVATF]-1659829094104
GPR[SPS]-1659829094104
[289823] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:246.
GPR[EPS]-1659829094640
GPR[SPVATF]-1659829094640
GPR[EPVATF]-1659829095082
GPR[SPS]-1659829095082
[290774] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.graph.Graph:246.
GPR[EPS]-1659829095591
GPR[ESUN]-1659829095591
GPR[SSUN]-1659829095591
-128675625
GPR[ESUN]-1659829095854
GPR[SSUN]-1659829095854
-128675625
GPR[ESUN]-1659829096113
GPR[SSUN]-1659829096113
-128675625
GPR[SPVATF]-1659829096367
GPR[EPVATF]-1659829096845
GPR[SPS]-1659829096845
[292619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:431.
GPR[EPS]-1659829097436
GPR[ESUN]-1659829097436
GPR[SSUN]-1659829097436
-128675625
GPR[SPVATF]-1659829097702
GPR[EPVATF]-1659829098185
GPR[SPS]-1659829098185
[294103] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:414.
GPR[EPS]-1659829098920
GPR[SPVATF]-1659829098920
GPR[EPVATF]-1659829099359
GPR[SPS]-1659829099359
[295114] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:414.
GPR[EPS]-1659829099931
GPR[ESUN]-1659829099932
GPR[SSUN]-1659829099932
-128675625
GPR[ESUN]-1659829100187
GPR[SSUN]-1659829100187
-128675625
GPR[ESUN]-1659829100415
GPR[SSUN]-1659829100415
-128675625
GPR[ESUN]-1659829100634
GPR[SSUN]-1659829100634
-128675625
GPR[SPVATF]-1659829100858
GPR[EPVATF]-1659829101273
GPR[SPS]-1659829101273
[296980] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:386.
GPR[EPS]-1659829101797
GPR[SPVATF]-1659829101797
GPR[EPVATF]-1659829102254
GPR[SPS]-1659829102254
[297968] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:386.
GPR[EPS]-1659829102785
GPR[ESUN]-1659829102786
GPR[SSUN]-1659829102786
-128675625
GPR[SPVATF]-1659829103019
GPR[EPVATF]-1659829103447
GPR[SPS]-1659829103447
[299168] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:165.
GPR[EPS]-1659829103985
GPR[SPVATF]-1659829103985
GPR[EPVATF]-1659829104450
GPR[SPS]-1659829104450
[300829] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:165.
GPR[EPS]-1659829105646
GPR[ESUN]-1659829105646
GPR[SSUN]-1659829105646
-128675625
GPR[SPVATF]-1659829105874
GPR[EPVATF]-1659829106307
GPR[SPS]-1659829106307
GPR[EPS]-1659829111850
GPR[ESUN]-1659829111850
GPR[SSUN]-1659829111850
-132053243
GPR[SPVATF]-1659829112060
GPR[EPVATF]-1659829112082
[307265] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829112082
GPR[SSUN]-1659829112082
-132053243
GPR[SPVATF]-1659829112278
GPR[EPVATF]-1659829112298
[307481] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829112298
GPR[SSUN]-1659829112298
-132053243
GPR[SPVATF]-1659829112504
GPR[EPVATF]-1659829112521
[307705] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829112522
GPR[SSUN]-1659829112522
160819208
GPR[SPVATF]-1659829112767
GPR[EPVATF]-1659829113242
GPR[SPS]-1659829113242
[309076] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:758.
GPR[EPS]-1659829113893
GPR[SPVATF]-1659829113893
GPR[EPVATF]-1659829114342
GPR[SPS]-1659829114342
[310150] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:758.
GPR[EPS]-1659829114967
GPR[ESUN]-1659829114967
GPR[SSUN]-1659829114967
-132053243
GPR[SPVATF]-1659829115169
GPR[EPVATF]-1659829115190
[310373] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829115190
GPR[EPVATF]-1659829115210
[310393] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829115210
GPR[SSUN]-1659829115210
-132053243
GPR[ESUN]-1659829115632
GPR[SSUN]-1659829115632
80988634
GPR[ESUN]-1659829115812
GPR[SSUN]-1659829115812
-128675625
GPR[SPVATF]-1659829116068
GPR[EPVATF]-1659829116513
GPR[SPS]-1659829116513
[312405] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:358.
GPR[EPS]-1659829117222
GPR[SPVATF]-1659829117222
GPR[EPVATF]-1659829117694
GPR[SPS]-1659829117694
GPR[EPS]-1659829130699
GPR[ESUN]-1659829130699
GPR[SSUN]-1659829130699
160819208
GPR[ESUN]-1659829130961
GPR[SSUN]-1659829130961
160819208
GPR[SPVATF]-1659829131210
GPR[EPVATF]-1659829131701
GPR[SPS]-1659829131702
[327490] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:548.
GPR[EPS]-1659829132307
GPR[ESUN]-1659829132307
GPR[SSUN]-1659829132307
160819208
GPR[ESUN]-1659829132553
GPR[SSUN]-1659829132553
160819208
GPR[SPVATF]-1659829132797
GPR[EPVATF]-1659829133285
GPR[SPS]-1659829133285
[329076] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:335.
GPR[EPS]-1659829133893
GPR[ESUN]-1659829133893
GPR[SSUN]-1659829133894
-132053243
GPR[ESUN]-1659829134087
GPR[SSUN]-1659829134087
-132053243
GPR[SPVATF]-1659829134288
GPR[EPVATF]-1659829134311
[329494] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829134311
GPR[EPVATF]-1659829134330
[329514] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829134331
GPR[SSUN]-1659829134331
-132053243
GPR[ESUN]-1659829134533
GPR[SSUN]-1659829134533
-132053243
GPR[ESUN]-1659829134741
GPR[SSUN]-1659829134741
-132053243
GPR[ESUN]-1659829134959
GPR[SSUN]-1659829134959
-132053243
GPR[SPVATF]-1659829135302
GPR[EPVATF]-1659829135322
[330505] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829135322
GPR[EPVATF]-1659829135351
[330534] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829135351
GPR[SSUN]-1659829135351
-132053243
GPR[SPVATF]-1659829135566
GPR[EPVATF]-1659829135587
[330770] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829135587
GPR[SSUN]-1659829135587
2433571
GPR[ESUN]-1659829135840
GPR[SSUN]-1659829135840
-128675625
GPR[SPVATF]-1659829136086
GPR[EPVATF]-1659829136591
GPR[SPS]-1659829136591
[332358] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:347.
GPR[EPS]-1659829137175
GPR[SPVATF]-1659829137175
GPR[EPVATF]-1659829137655
GPR[SPS]-1659829137656
GPR[EPS]-1659829165719
GPR[ESUN]-1659829165719
GPR[SSUN]-1659829165719
-128675625
GPR[ESUN]-1659829166094
GPR[SSUN]-1659829166094
-132053243
GPR[SPVATF]-1659829166302
GPR[EPVATF]-1659829166325
[361508] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829166326
GPR[EPVATF]-1659829166349
[361532] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829166349
GPR[SSUN]-1659829166349
-128675625
GPR[SPVATF]-1659829166598
GPR[EPVATF]-1659829167092
GPR[SPS]-1659829167092
[362904] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:519.
GPR[EPS]-1659829167721
GPR[ESUN]-1659829167721
GPR[SSUN]-1659829167721
80988634
GPR[ESUN]-1659829167899
GPR[SSUN]-1659829167899
-132053243
GPR[SPVATF]-1659829168091
GPR[EPVATF]-1659829168112
[363295] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829168112
GPR[SSUN]-1659829168112
-132053243
GPR[SPVATF]-1659829168316
GPR[EPVATF]-1659829168334
[363517] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829168334
GPR[SSUN]-1659829168334
-128675625
GPR[SPVATF]-1659829168597
GPR[EPVATF]-1659829169076
GPR[SPS]-1659829169076
[364885] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:340.
GPR[EPS]-1659829169702
GPR[SPVATF]-1659829169703
GPR[EPVATF]-1659829170199
GPR[SPS]-1659829170199
GPR[EPS]-1659829179812
GPR[ESUN]-1659829179812
GPR[SSUN]-1659829179812
-128675625
GPR[SPVATF]-1659829180419
GPR[EPVATF]-1659829180902
GPR[SPS]-1659829180902
[376696] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:335.
GPR[EPS]-1659829181513
GPR[SPVATF]-1659829181514
GPR[EPVATF]-1659829181976
GPR[SPS]-1659829181976
GPR[EPS]-1659829193404
GPR[ESUN]-1659829193404
GPR[SSUN]-1659829193404
160819208
GPR[SPVATF]-1659829193667
GPR[EPVATF]-1659829194100
GPR[SPS]-1659829194100
[389916] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:840.
GPR[EPS]-1659829194733
GPR[SPVATF]-1659829194734
GPR[EPVATF]-1659829195212
GPR[SPS]-1659829195212
[391013] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:840.
GPR[EPS]-1659829195830
GPR[ESUN]-1659829195830
GPR[SSUN]-1659829195830
160819208
GPR[ESUN]-1659829196101
GPR[SSUN]-1659829196101
160819208
GPR[SPVATF]-1659829196369
GPR[EPVATF]-1659829196852
GPR[SPS]-1659829196852
[392671] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:837.
GPR[EPS]-1659829197488
GPR[ESUN]-1659829197488
GPR[SSUN]-1659829197488
-128675625
GPR[SPVATF]-1659829197908
GPR[EPVATF]-1659829198379
GPR[SPS]-1659829198379
[394141] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:326.
GPR[EPS]-1659829198958
GPR[SPVATF]-1659829198958
GPR[EPVATF]-1659829199453
GPR[SPS]-1659829199453
GPR[EPS]-1659829212515
GPR[ESUN]-1659829212515
GPR[SSUN]-1659829212515
-128675625
GPR[SPVATF]-1659829212777
GPR[EPVATF]-1659829213303
GPR[SPS]-1659829213303
[409100] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:319.
GPR[EPS]-1659829213917
GPR[SPVATF]-1659829213917
GPR[EPVATF]-1659829214401
GPR[SPS]-1659829214401
GPR[EPS]-1659829226451
GPR[ESUN]-1659829226451
GPR[SSUN]-1659829226451
-128675625
GPR[SPVATF]-1659829226752
GPR[EPVATF]-1659829227222
GPR[SPS]-1659829227222
[423034] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:312.
GPR[EPS]-1659829227851
GPR[SPVATF]-1659829227851
GPR[EPVATF]-1659829228558
GPR[SPS]-1659829228558
GPR[EPS]-1659829240498
GPR[ESUN]-1659829240498
GPR[SSUN]-1659829240498
-128675625
GPR[ESUN]-1659829241204
GPR[SSUN]-1659829241204
-128675625
GPR[SPVATF]-1659829241490
GPR[EPVATF]-1659829242019
GPR[SPS]-1659829242019
[437758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:518.
GPR[EPS]-1659829242575
GPR[ESUN]-1659829242575
GPR[SSUN]-1659829242575
-128675625
GPR[ESUN]-1659829242818
GPR[SSUN]-1659829242818
-128675625
GPR[SPVATF]-1659829243069
GPR[EPVATF]-1659829243572
GPR[SPS]-1659829243572
[439350] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:499.
GPR[EPS]-1659829244167
GPR[ESUN]-1659829244167
GPR[SSUN]-1659829244167
-128675625
GPR[SPVATF]-1659829244440
GPR[EPVATF]-1659829244986
GPR[SPS]-1659829244986
[440781] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables:498.
GPR[EPS]-1659829245598
GPR[ESUN]-1659829245598
GPR[SSUN]-1659829245599
-1119592721
GPR[SPVATF]-1659829245864
GPR[EPVATF]-1659829246396
GPR[SPS]-1659829246396
[442173] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:402.
GPR[EPS]-1659829246990
GPR[ESUN]-1659829246990
GPR[SSUN]-1659829246990
-546582215
GPR[ESUN]-1659829247211
GPR[SSUN]-1659829247211
-546582215
GPR[SPVATF]-1659829247430
GPR[EPVATF]-1659829248156
GPR[SPS]-1659829248156
[443900] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:159.
GPR[EPS]-1659829248717
GPR[ESUN]-1659829248717
GPR[SSUN]-1659829248717
-546582215
GPR[SPVATF]-1659829248960
GPR[EPVATF]-1659829249509
GPR[SPS]-1659829249509
[445273] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:158.
GPR[EPS]-1659829250090
GPR[ESUN]-1659829250090
GPR[SSUN]-1659829250090
-546582215
GPR[ESUN]-1659829250319
GPR[SSUN]-1659829250319
-546582215
GPR[ESUN]-1659829250551
GPR[SSUN]-1659829250551
-546582215
GPR[SPVATF]-1659829250769
GPR[EPVATF]-1659829251322
GPR[SPS]-1659829251322
[447952] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:151.
GPR[EPS]-1659829252769
GPR[ESUN]-1659829252769
GPR[SSUN]-1659829252769
-546582215
GPR[SPVATF]-1659829253010
GPR[EPVATF]-1659829253576
GPR[SPS]-1659829253576
[449478] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.SyntacticScopeCreator:150.
GPR[EPS]-1659829254295
GPR[ESUN]-1659829254295
GPR[SSUN]-1659829254295
-132053243
GPR[ESUN]-1659829254500
GPR[SSUN]-1659829254500
-132053243
GPR[SPVATF]-1659829254702
GPR[EPVATF]-1659829254723
[449906] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829254723
GPR[EPVATF]-1659829254744
[449927] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829254744
GPR[SSUN]-1659829254744
-132053243
GPR[ESUN]-1659829254954
GPR[SSUN]-1659829254954
80988634
GPR[ESUN]-1659829255149
GPR[SSUN]-1659829255149
-128675625
GPR[ESUN]-1659829255421
GPR[SSUN]-1659829255421
-128675625
GPR[SPVATF]-1659829255688
GPR[EPVATF]-1659829256225
GPR[SPS]-1659829256225
GPR[EPS]-1659829265926
GPR[ESUN]-1659829265926
GPR[SSUN]-1659829265926
-128675625
GPR[SPVATF]-1659829266157
GPR[EPVATF]-1659829266634
GPR[SPS]-1659829266634
GPR[EPS]-1659829290325
GPR[SPVATF]-1659829290325
GPR[EPVATF]-1659829290806
GPR[SPS]-1659829290806
GPR[EPS]-1659829315040
GPR[ESUN]-1659829315040
GPR[SSUN]-1659829315040
-128675625
GPR[ESUN]-1659829315616
GPR[SSUN]-1659829315616
-128675625
GPR[ESUN]-1659829315874
GPR[SSUN]-1659829315874
-128675625
GPR[SPVATF]-1659829316132
GPR[EPVATF]-1659829316643
GPR[SPS]-1659829316643
[512427] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:447.
GPR[EPS]-1659829317244
GPR[SPVATF]-1659829317244
GPR[EPVATF]-1659829317698
GPR[SPS]-1659829317699
[513496] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate$3:447.
GPR[EPS]-1659829318313
GPR[ESUN]-1659829318313
GPR[SSUN]-1659829318313
-128675625
GPR[SPVATF]-1659829318588
GPR[EPVATF]-1659829319043
GPR[SPS]-1659829319043
GPR[EPS]-1659829342839
GPR[ESUN]-1659829342839
GPR[SSUN]-1659829342839
-128675625
GPR[ESUN]-1659829343069
GPR[SSUN]-1659829343069
-128675625
GPR[SPVATF]-1659829343290
GPR[EPVATF]-1659829343732
GPR[SPS]-1659829343732
GPR[EPS]-1659829351193
GPR[ESUN]-1659829351193
GPR[SSUN]-1659829351193
-128675625
GPR[ESUN]-1659829351484
GPR[SSUN]-1659829351484
-128675625
GPR[ESUN]-1659829351749
GPR[SSUN]-1659829351749
-128675625
GPR[SPVATF]-1659829351997
GPR[EPVATF]-1659829352481
GPR[SPS]-1659829352481
GPR[EPS]-1659829364962
GPR[ESUN]-1659829364962
GPR[SSUN]-1659829364962
-128675625
GPR[ESUN]-1659829365235
GPR[SSUN]-1659829365235
-128675625
GPR[SPVATF]-1659829365514
GPR[EPVATF]-1659829366035
GPR[SPS]-1659829366035
[561809] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:305.
GPR[EPS]-1659829366626
GPR[SPVATF]-1659829366626
GPR[EPVATF]-1659829367145
GPR[SPS]-1659829367145
GPR[EPS]-1659829384282
GPR[ESUN]-1659829384282
GPR[SSUN]-1659829384282
-128675625
GPR[SPVATF]-1659829384893
GPR[EPVATF]-1659829385421
GPR[SPS]-1659829385421
[581252] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:299.
GPR[EPS]-1659829386069
GPR[SPVATF]-1659829386069
GPR[EPVATF]-1659829386604
GPR[SPS]-1659829386604
GPR[EPS]-1659829397484
GPR[ESUN]-1659829397484
GPR[SSUN]-1659829397484
-128675625
GPR[SPVATF]-1659829397754
GPR[EPVATF]-1659829398282
GPR[SPS]-1659829398282
GPR[EPS]-1659829411398
GPR[ESUN]-1659829411398
GPR[SSUN]-1659829411398
-128675625
GPR[SPVATF]-1659829411745
GPR[EPVATF]-1659829412310
GPR[SPS]-1659829412310
GPR[EPS]-1659829419581
GPR[ESUN]-1659829419581
GPR[SSUN]-1659829419581
-128675625
GPR[SPVATF]-1659829419811
GPR[EPVATF]-1659829420340
GPR[SPS]-1659829420340
[616047] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:289.
GPR[EPS]-1659829420864
GPR[ESUN]-1659829420864
GPR[SSUN]-1659829420864
-132053243
GPR[SPVATF]-1659829421050
GPR[EPVATF]-1659829421069
[616252] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829421069
GPR[SSUN]-1659829421069
-132053243
GPR[SPVATF]-1659829421253
GPR[EPVATF]-1659829421272
[616455] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829421272
GPR[SSUN]-1659829421272
-132053243
GPR[SPVATF]-1659829421457
GPR[EPVATF]-1659829421475
[616658] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829421475
GPR[SSUN]-1659829421475
-132053243
GPR[SPVATF]-1659829421659
GPR[EPVATF]-1659829421678
[616861] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829421678
GPR[SSUN]-1659829421678
-132053243
GPR[SPVATF]-1659829421861
GPR[EPVATF]-1659829421880
[617063] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829421880
GPR[SSUN]-1659829421880
-132053243
GPR[ESUN]-1659829422067
GPR[SSUN]-1659829422067
-1765952779
GPR[ESUN]-1659829422495
GPR[SSUN]-1659829422495
-1765952779
GPR[ESUN]-1659829422964
GPR[SSUN]-1659829422964
-1765952779
GPR[SPVATF]-1659829423383
GPR[EPVATF]-1659829423919
GPR[SPS]-1659829423919
[619696] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:292.
GPR[EPS]-1659829424513
GPR[ESUN]-1659829424513
GPR[SSUN]-1659829424513
-1765952779
GPR[ESUN]-1659829424766
GPR[SSUN]-1659829424766
2433571
GPR[SPVATF]-1659829425032
GPR[EPVATF]-1659829425634
GPR[SPS]-1659829425634
[621515] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:997.
GPR[EPS]-1659829426332
GPR[ESUN]-1659829426333
GPR[SSUN]-1659829426333
2433571
GPR[SPVATF]-1659829426748
GPR[EPVATF]-1659829427381
GPR[SPS]-1659829427381
[623254] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:996.
GPR[EPS]-1659829428071
GPR[ESUN]-1659829428071
GPR[SSUN]-1659829428071
2433571
GPR[SPVATF]-1659829428324
GPR[EPVATF]-1659829428929
GPR[SPS]-1659829428929
[624773] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int LAST_PROP = 55;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                switch (type) {
                    default :
                        boolean spoonDefaultValue = false;
                        try {
                            spoonDefaultValue = true;
                        } catch (java.lang.Exception __NopolProcessorException) {
                        }
                        boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                        if (fr.inria.lille.commons.trace.RuntimeValues.instance(159).isEnabled()) {
                            fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectionStarts();
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                            try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                            if (com.google.javascript.rhino.Node.this.last!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.parent!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.next!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            if (com.google.javascript.rhino.Node.this.first!=null) {
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                                try{fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                            }
                            fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectOutput(runtimeAngelicValue);
                            fr.inria.lille.commons.trace.RuntimeValues.instance(159).collectionEnds();
                        }
                        if (runtimeAngelicValue)
                            value = x.toString();

                        break;
                }
                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[624774] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659829429591
GPR[SSUN]-1659829429591
2433571
GPR[SPVATF]-1659829429861
GPR[EPVATF]-1659829430520
GPR[SPS]-1659829430520
[626324] ERROR ConstraintModelBuilder - Unable to compile the change: 
public class Node implements java.lang.Cloneable , java.io.Serializable {
    private static final long serialVersionUID = 1L;

    public static final int SOURCENAME_PROP = 16;

    public static final int JSDOC_INFO_PROP = 29;

    public static final int VAR_ARGS_NAME = 30;

    public static final int INCRDECR_PROP = 32;

    public static final int PARENTHESIZED_PROP = 35;

    public static final int QUOTED_PROP = 36;

    public static final int OPT_ARG_NAME = 37;

    public static final int SYNTHETIC_BLOCK_PROP = 38;

    public static final int EMPTY_BLOCK = 39;

    public static final int ORIGINALNAME_PROP = 40;

    public static final int BRACELESS_TYPE = 41;

    public static final int SIDE_EFFECT_FLAGS = 42;

    public static final int IS_CONSTANT_NAME = 43;

    public static final int IS_OPTIONAL_PARAM = 44;

    public static final int IS_VAR_ARGS_PARAM = 45;

    public static final int IS_NAMESPACE = 46;

    public static final int IS_DISPATCHER = 47;

    public static final int DIRECTIVES = 48;

    public static final int DIRECT_EVAL = 49;

    public static final int FREE_CALL = 50;

    public static final int STATIC_SOURCE_FILE = 51;

    public static final int LENGTH = 52;

    public static final int INPUT_ID = 53;

    public static final int SLASH_V = 54;

    public static final int INFERRED_FUNCTION = 55;

    public static final int LAST_PROP = 55;

    public static final int DECR_FLAG = 0x1;

    public static final int POST_FLAG = 0x2;

    private static final java.lang.String propToString(int propType) {
        switch (propType) {
            case com.google.javascript.rhino.Node.BRACELESS_TYPE :
                return "braceless_type";
            case com.google.javascript.rhino.Node.VAR_ARGS_NAME :
                return "var_args_name";
            case com.google.javascript.rhino.Node.SOURCENAME_PROP :
                return "sourcename";
            case com.google.javascript.rhino.Node.JSDOC_INFO_PROP :
                return "jsdoc_info";
            case com.google.javascript.rhino.Node.INCRDECR_PROP :
                return "incrdecr";
            case com.google.javascript.rhino.Node.PARENTHESIZED_PROP :
                return "parenthesized";
            case com.google.javascript.rhino.Node.QUOTED_PROP :
                return "quoted";
            case com.google.javascript.rhino.Node.OPT_ARG_NAME :
                return "opt_arg";
            case com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP :
                return "synthetic";
            case com.google.javascript.rhino.Node.EMPTY_BLOCK :
                return "empty_block";
            case com.google.javascript.rhino.Node.ORIGINALNAME_PROP :
                return "originalname";
            case com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS :
                return "side_effect_flags";
            case com.google.javascript.rhino.Node.IS_CONSTANT_NAME :
                return "is_constant_name";
            case com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM :
                return "is_optional_param";
            case com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM :
                return "is_var_args_param";
            case com.google.javascript.rhino.Node.IS_NAMESPACE :
                return "is_namespace";
            case com.google.javascript.rhino.Node.IS_DISPATCHER :
                return "is_dispatcher";
            case com.google.javascript.rhino.Node.DIRECTIVES :
                return "directives";
            case com.google.javascript.rhino.Node.DIRECT_EVAL :
                return "direct_eval";
            case com.google.javascript.rhino.Node.FREE_CALL :
                return "free_call";
            case com.google.javascript.rhino.Node.STATIC_SOURCE_FILE :
                return "source_file";
            case com.google.javascript.rhino.Node.INPUT_ID :
                return "input_id";
            case com.google.javascript.rhino.Node.LENGTH :
                return "length";
            case com.google.javascript.rhino.Node.SLASH_V :
                return "slash_v";
            case com.google.javascript.rhino.Node.INFERRED_FUNCTION :
                return "inferred";
            default :
                throw new java.lang.IllegalStateException("unexpect prop id " + propType);
        }
    }

    private static class NumberNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        NumberNode(double number) {
            super(com.google.javascript.rhino.Token.NUMBER);
            this.number = number;
        }

        public NumberNode(double number, int lineno, int charno) {
            super(com.google.javascript.rhino.Token.NUMBER, lineno, charno);
            this.number = number;
        }

        @java.lang.Override
        public double getDouble() {
            return this.number;
        }

        @java.lang.Override
        public void setDouble(double d) {
            this.number = d;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            boolean equivalent = super.isEquivalentTo(node, compareJsType, recurse);
            if (equivalent) {
                double thisValue = getDouble();
                double thatValue = ((com.google.javascript.rhino.Node.NumberNode) (node)).getDouble();
                if (thisValue == thatValue) {
                    return (thisValue != 0.0) || ((1 / thisValue) == (1 / thatValue));
                }
            }
            return false;
        }

        private double number;
    }

    private static class StringNode extends com.google.javascript.rhino.Node {
        private static final long serialVersionUID = 1L;

        StringNode(int type, java.lang.String str) {
            super(type);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        StringNode(int type, java.lang.String str, int lineno, int charno) {
            super(type, lineno, charno);
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        public java.lang.String getString() {
            return this.str;
        }

        @java.lang.Override
        public void setString(java.lang.String str) {
            if (null == str) {
                throw new java.lang.IllegalArgumentException("StringNode: str is null");
            }
            this.str = str;
        }

        @java.lang.Override
        boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
            return super.isEquivalentTo(node, compareJsType, recurse) && this.str.equals(((com.google.javascript.rhino.Node.StringNode) (node)).str);
        }

        @java.lang.Override
        public boolean isQuotedString() {
            return getBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP);
        }

        @java.lang.Override
        public void setQuotedString() {
            putBooleanProp(com.google.javascript.rhino.Node.QUOTED_PROP, true);
        }

        private java.lang.String str;
    }

    private interface PropListItem {
        public abstract int getType();

        public abstract com.google.javascript.rhino.Node.PropListItem getNext();

        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);

        public abstract java.lang.Object getObjectValue();

        public abstract int getIntValue();
    }

    private abstract static class AbstractPropListItem implements com.google.javascript.rhino.Node.PropListItem , java.io.Serializable {
        private static final long serialVersionUID = 1L;

        private final com.google.javascript.rhino.Node.PropListItem next;

        private final int propType;

        AbstractPropListItem(int propType, com.google.javascript.rhino.Node.PropListItem next) {
            this.propType = propType;
            this.next = next;
        }

        @java.lang.Override
        public int getType() {
            return propType;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem getNext() {
            return next;
        }

        @java.lang.Override
        public abstract com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next);
    }

    private static class ObjectPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        private final java.lang.Object objectValue;

        ObjectPropListItem(int propType, java.lang.Object objectValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.objectValue = objectValue;
        }

        @java.lang.Override
        public int getIntValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            return objectValue;
        }

        @java.lang.Override
        public java.lang.String toString() {
            return objectValue == null ? "null" : objectValue.toString();
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.ObjectPropListItem(getType(), objectValue, next);
        }
    }

    private static class IntPropListItem extends com.google.javascript.rhino.Node.AbstractPropListItem {
        private static final long serialVersionUID = 1L;

        final int intValue;

        IntPropListItem(int propType, int intValue, com.google.javascript.rhino.Node.PropListItem next) {
            super(propType, next);
            this.intValue = intValue;
        }

        @java.lang.Override
        public int getIntValue() {
            return intValue;
        }

        @java.lang.Override
        public java.lang.Object getObjectValue() {
            throw new java.lang.UnsupportedOperationException();
        }

        @java.lang.Override
        public java.lang.String toString() {
            return java.lang.String.valueOf(intValue);
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node.PropListItem chain(com.google.javascript.rhino.Node.PropListItem next) {
            return new com.google.javascript.rhino.Node.IntPropListItem(getType(), intValue, next);
        }
    }

    public Node(int nodeType) {
        type = nodeType;
        parent = null;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null, "new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(child.next == null, "new child has existing sibling");
        type = nodeType;
        parent = null;
        first = last = child;
        child.next = null;
        child.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null, "first new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(left.next == null, "first new child has existing sibling");
        com.google.common.base.Preconditions.checkArgument(right.parent == null, "second new child has existing parent");
        com.google.common.base.Preconditions.checkArgument(right.next == null, "second new child has existing sibling");
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = right;
        left.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = right;
        mid.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right) {
        com.google.common.base.Preconditions.checkArgument(left.parent == null);
        com.google.common.base.Preconditions.checkArgument(left.next == null);
        com.google.common.base.Preconditions.checkArgument(mid.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid.next == null);
        com.google.common.base.Preconditions.checkArgument(mid2.parent == null);
        com.google.common.base.Preconditions.checkArgument(mid2.next == null);
        com.google.common.base.Preconditions.checkArgument(right.parent == null);
        com.google.common.base.Preconditions.checkArgument(right.next == null);
        type = nodeType;
        parent = null;
        first = left;
        last = right;
        left.next = mid;
        left.parent = this;
        mid.next = mid2;
        mid.parent = this;
        mid2.next = right;
        mid2.parent = this;
        right.next = null;
        right.parent = this;
        sourcePosition = -1;
    }

    public Node(int nodeType, int lineno, int charno) {
        type = nodeType;
        parent = null;
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node child, int lineno, int charno) {
        this(nodeType, child);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node left, com.google.javascript.rhino.Node mid, com.google.javascript.rhino.Node mid2, com.google.javascript.rhino.Node right, int lineno, int charno) {
        this(nodeType, left, mid, mid2, right);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children, int lineno, int charno) {
        this(nodeType, children);
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public Node(int nodeType, com.google.javascript.rhino.Node[] children) {
        this.type = nodeType;
        parent = null;
        if (children.length != 0) {
            this.first = children[0];
            this.last = children[children.length - 1];
            for (int i = 1; i < children.length; i++) {
                if (null != children[i - 1].next) {
                    throw new java.lang.IllegalArgumentException("duplicate child");
                }
                children[i - 1].next = children[i];
                com.google.common.base.Preconditions.checkArgument(children[i - 1].parent == null);
                children[i - 1].parent = this;
            }
            com.google.common.base.Preconditions.checkArgument(children[children.length - 1].parent == null);
            children[children.length - 1].parent = this;
            if (null != this.last.next) {
                throw new java.lang.IllegalArgumentException("duplicate child");
            }
        }
    }

    public static com.google.javascript.rhino.Node newNumber(double number) {
        return new com.google.javascript.rhino.Node.NumberNode(number);
    }

    public static com.google.javascript.rhino.Node newNumber(double number, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.NumberNode(number, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str) {
        return new com.google.javascript.rhino.Node.StringNode(type, str);
    }

    public static com.google.javascript.rhino.Node newString(java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(com.google.javascript.rhino.Token.STRING, str, lineno, charno);
    }

    public static com.google.javascript.rhino.Node newString(int type, java.lang.String str, int lineno, int charno) {
        return new com.google.javascript.rhino.Node.StringNode(type, str, lineno, charno);
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public boolean hasChildren() {
        return first != null;
    }

    public com.google.javascript.rhino.Node getFirstChild() {
        return first;
    }

    public com.google.javascript.rhino.Node getLastChild() {
        return last;
    }

    public com.google.javascript.rhino.Node getNext() {
        return next;
    }

    public com.google.javascript.rhino.Node getChildBefore(com.google.javascript.rhino.Node child) {
        if (child == first) {
            return null;
        }
        com.google.javascript.rhino.Node n = first;
        while (n.next != child) {
            n = n.next;
            if (n == null) {
                throw new java.lang.RuntimeException("node is not a child");
            }
        } 
        return n;
    }

    public com.google.javascript.rhino.Node getChildAtIndex(int i) {
        com.google.javascript.rhino.Node n = first;
        while (i > 0) {
            n = n.next;
            i--;
        } 
        return n;
    }

    public int getIndexOfChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node n = first;
        int i = 0;
        while (n != null) {
            if (child == n) {
                return i;
            }
            n = n.next;
            i++;
        } 
        return -1;
    }

    public com.google.javascript.rhino.Node getLastSibling() {
        com.google.javascript.rhino.Node n = this;
        while (n.next != null) {
            n = n.next;
        } 
        return n;
    }

    public void addChildToFront(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = first;
        first = child;
        if (last == null) {
            last = child;
        }
    }

    public void addChildToBack(com.google.javascript.rhino.Node child) {
        com.google.common.base.Preconditions.checkArgument(child.parent == null);
        com.google.common.base.Preconditions.checkArgument(child.next == null);
        child.parent = this;
        child.next = null;
        if (last == null) {
            first = last = child;
            return;
        }
        last.next = child;
        last = child;
    }

    public void addChildrenToFront(com.google.javascript.rhino.Node children) {
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSib = children.getLastSibling();
        lastSib.next = first;
        first = children;
        if (last == null) {
            last = lastSib;
        }
    }

    public void addChildrenToBack(com.google.javascript.rhino.Node children) {
        addChildrenAfter(children, getLastChild());
    }

    public void addChildBefore(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node != null) && (node.parent == this), "The existing child node of the parent should not be null.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        if (first == node) {
            newChild.parent = this;
            newChild.next = first;
            first = newChild;
            return;
        }
        com.google.javascript.rhino.Node prev = getChildBefore(node);
        addChildAfter(newChild, prev);
    }

    public void addChildAfter(com.google.javascript.rhino.Node newChild, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        addChildrenAfter(newChild, node);
    }

    public void addChildrenAfter(com.google.javascript.rhino.Node children, com.google.javascript.rhino.Node node) {
        com.google.common.base.Preconditions.checkArgument((node == null) || (node.parent == this));
        for (com.google.javascript.rhino.Node child = children; child != null; child = child.next) {
            com.google.common.base.Preconditions.checkArgument(child.parent == null);
            child.parent = this;
        }
        com.google.javascript.rhino.Node lastSibling = children.getLastSibling();
        if (node != null) {
            com.google.javascript.rhino.Node oldNext = node.next;
            node.next = children;
            lastSibling.next = oldNext;
            if (node == last) {
                last = lastSibling;
            }
        } else {
            if (first != null) {
                lastSibling.next = first;
            } else {
                last = lastSibling;
            }
            first = children;
        }
    }

    public void removeChild(com.google.javascript.rhino.Node child) {
        com.google.javascript.rhino.Node prev = getChildBefore(child);
        if (prev == null) {
            first = first.next;
        } else {
            prev.next = child.next;
        }
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChild(com.google.javascript.rhino.Node child, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(child);
        newChild.next = child.next;
        newChild.parent = this;
        if (child == first) {
            first = newChild;
        } else {
            com.google.javascript.rhino.Node prev = getChildBefore(child);
            prev.next = newChild;
        }
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    public void replaceChildAfter(com.google.javascript.rhino.Node prevChild, com.google.javascript.rhino.Node newChild) {
        com.google.common.base.Preconditions.checkArgument(prevChild.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(newChild.next == null, "The new child node has siblings.");
        com.google.common.base.Preconditions.checkArgument(newChild.parent == null, "The new child node already has a parent.");
        newChild.copyInformationFrom(prevChild);
        com.google.javascript.rhino.Node child = prevChild.next;
        newChild.next = child.next;
        newChild.parent = this;
        prevChild.next = newChild;
        if (child == last) {
            last = newChild;
        }
        child.next = null;
        child.parent = null;
    }

    @com.google.common.annotations.VisibleForTesting
    com.google.javascript.rhino.Node.PropListItem lookupProperty(int propType) {
        com.google.javascript.rhino.Node.PropListItem x = propListHead;
        while ((x != null) && (propType != x.getType())) {
            x = x.getNext();
        } 
        return x;
    }

    public com.google.javascript.rhino.Node clonePropsFrom(com.google.javascript.rhino.Node other) {
        com.google.common.base.Preconditions.checkState(this.propListHead == null, "Node has existing properties.");
        this.propListHead = other.propListHead;
        return this;
    }

    public void removeProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem result = removeProp(propListHead, propType);
        if (result != propListHead) {
            propListHead = result;
        }
    }

    private com.google.javascript.rhino.Node.PropListItem removeProp(com.google.javascript.rhino.Node.PropListItem item, int propType) {
        if (item == null) {
            return null;
        } else if (item.getType() == propType) {
            return item.getNext();
        } else {
            com.google.javascript.rhino.Node.PropListItem result = removeProp(item.getNext(), propType);
            if (result != item.getNext()) {
                return item.chain(result);
            } else {
                return item;
            }
        }
    }

    public java.lang.Object getProp(int propType) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            return getSourceFileName();
        }
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return null;
        }
        return item.getObjectValue();
    }

    public boolean getBooleanProp(int propType) {
        return getIntProp(propType) != 0;
    }

    public int getIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            return 0;
        }
        return item.getIntValue();
    }

    public int getExistingIntProp(int propType) {
        com.google.javascript.rhino.Node.PropListItem item = lookupProperty(propType);
        if (item == null) {
            throw new java.lang.IllegalStateException("missing prop: " + propType);
        }
        return item.getIntValue();
    }

    public void putProp(int propType, java.lang.Object value) {
        if (propType == com.google.javascript.rhino.Node.SOURCENAME_PROP) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(((java.lang.String) (value)), false));
            return;
        }
        removeProp(propType);
        if (value != null) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    public void putBooleanProp(int propType, boolean value) {
        putIntProp(propType, value ? 1 : 0);
    }

    public void putIntProp(int propType, int value) {
        removeProp(propType);
        if (value != 0) {
            propListHead = createProp(propType, value, propListHead);
        }
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, java.lang.Object value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.ObjectPropListItem(propType, value, next);
    }

    com.google.javascript.rhino.Node.PropListItem createProp(int propType, int value, com.google.javascript.rhino.Node.PropListItem next) {
        return new com.google.javascript.rhino.Node.IntPropListItem(propType, value, next);
    }

    private int[] getSortedPropTypes() {
        int count = 0;
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count++;
        }
        int[] keys = new int[count];
        for (com.google.javascript.rhino.Node.PropListItem x = propListHead; x != null; x = x.getNext()) {
            count--;
            keys[count] = x.getType();
        }
        java.util.Arrays.sort(keys);
        return keys;
    }

    public double getDouble() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a number node");
        }
    }

    public void setDouble(double s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.NUMBER) {
            throw new java.lang.IllegalStateException("Number node not created with Node.newNumber");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public java.lang.String getString() throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    public void setString(java.lang.String s) throws java.lang.UnsupportedOperationException {
        if (this.getType() == com.google.javascript.rhino.Token.STRING) {
            throw new java.lang.IllegalStateException("String node not created with Node.newString");
        } else {
            throw new java.lang.UnsupportedOperationException(this + " is not a string node");
        }
    }

    @java.lang.Override
    public java.lang.String toString() {
        return toString(true, true, true);
    }

    public java.lang.String toString(boolean printSource, boolean printAnnotations, boolean printType) {
        java.lang.StringBuilder sb = new java.lang.StringBuilder();
        toString(sb, printSource, printAnnotations, printType);
        return sb.toString();
    }

    private void toString(java.lang.StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {
        sb.append(com.google.javascript.rhino.Token.name(type));
        if (this instanceof com.google.javascript.rhino.Node.StringNode) {
            sb.append(' ');
            sb.append(getString());
        } else if (type == com.google.javascript.rhino.Token.FUNCTION) {
            sb.append(' ');
            if ((first == null) || (first.getType() != com.google.javascript.rhino.Token.NAME)) {
                sb.append("<invalid>");
            } else {
                sb.append(first.getString());
            }
        } else if (type == com.google.javascript.rhino.Token.NUMBER) {
            sb.append(' ');
            sb.append(getDouble());
        }
        if (printSource) {
            int lineno = getLineno();
            if (lineno != (-1)) {
                sb.append(' ');
                sb.append(lineno);
            }
        }
        if (printAnnotations) {
            int[] keys = getSortedPropTypes();
            for (int i = 0; i < keys.length; i++) {
                int type = keys[i];
                com.google.javascript.rhino.Node.PropListItem x = lookupProperty(type);
                sb.append(" [");
                sb.append(com.google.javascript.rhino.Node.propToString(type));
                sb.append(": ");
                java.lang.String value;
                boolean spoonDefaultValue = false;
                try {
                    spoonDefaultValue = true;
                } catch (java.lang.Exception __NopolProcessorException) {
                }
                boolean runtimeAngelicValue = fr.inria.lille.repair.nopol.synth.AngelicExecution.angelicValue(spoonDefaultValue);
                if (fr.inria.lille.commons.trace.RuntimeValues.instance(160).isEnabled()) {
                    fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectionStarts();
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.ORIGINALNAME_PROP",com.google.javascript.rhino.Node.ORIGINALNAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.COLUMN_MASK",com.google.javascript.rhino.Node.COLUMN_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.next",com.google.javascript.rhino.Node.this.next);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.IS_CONSTANT_NAME",com.google.javascript.rhino.Node.IS_CONSTANT_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM",com.google.javascript.rhino.Node.IS_VAR_ARGS_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("type",type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL",com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.POST_FLAG",com.google.javascript.rhino.Node.POST_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.DIRECT_EVAL",com.google.javascript.rhino.Node.DIRECT_EVAL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.sourcePosition",com.google.javascript.rhino.Node.this.sourcePosition);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.STATIC_SOURCE_FILE",com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK",com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.INFERRED_FUNCTION",com.google.javascript.rhino.Node.INFERRED_FUNCTION);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.JSDOC_INFO_PROP",com.google.javascript.rhino.Node.JSDOC_INFO_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.COLUMN_BITS",com.google.javascript.rhino.Node.COLUMN_BITS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.DECR_FLAG",com.google.javascript.rhino.Node.DECR_FLAG);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.SLASH_V",com.google.javascript.rhino.Node.SLASH_V);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.BRACELESS_TYPE",com.google.javascript.rhino.Node.BRACELESS_TYPE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.OPT_ARG_NAME",com.google.javascript.rhino.Node.OPT_ARG_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS",com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.FLAG_NO_THROWS",com.google.javascript.rhino.Node.FLAG_NO_THROWS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.type",com.google.javascript.rhino.Node.this.type);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.QUOTED_PROP",com.google.javascript.rhino.Node.QUOTED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.IS_DISPATCHER",com.google.javascript.rhino.Node.IS_DISPATCHER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.propListHead",com.google.javascript.rhino.Node.this.propListHead);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("keys",keys);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.first",com.google.javascript.rhino.Node.this.first);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.DIRECTIVES",com.google.javascript.rhino.Node.DIRECTIVES);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("sb",sb);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.VAR_ARGS_NAME",com.google.javascript.rhino.Node.VAR_ARGS_NAME);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS",com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.LENGTH",com.google.javascript.rhino.Node.LENGTH);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("printAnnotations",printAnnotations);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.INPUT_ID",com.google.javascript.rhino.Node.INPUT_ID);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER",com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.PARENTHESIZED_PROP",com.google.javascript.rhino.Node.PARENTHESIZED_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.jsType",com.google.javascript.rhino.Node.this.jsType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.last",com.google.javascript.rhino.Node.this.last);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("printType",printType);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.parent",com.google.javascript.rhino.Node.this.parent);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM",com.google.javascript.rhino.Node.IS_OPTIONAL_PARAM);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP",com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.IS_NAMESPACE",com.google.javascript.rhino.Node.IS_NAMESPACE);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.LAST_PROP",com.google.javascript.rhino.Node.LAST_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED",com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.SOURCENAME_PROP",com.google.javascript.rhino.Node.SOURCENAME_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("printSource",printSource);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.NO_SIDE_EFFECTS",com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("x",x);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.EMPTY_BLOCK",com.google.javascript.rhino.Node.EMPTY_BLOCK);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.FREE_CALL",com.google.javascript.rhino.Node.FREE_CALL);} catch (Exception ex1) {ex1.printStackTrace();};
                    try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.INCRDECR_PROP",com.google.javascript.rhino.Node.INCRDECR_PROP);} catch (Exception ex1) {ex1.printStackTrace();};
                    if (com.google.javascript.rhino.Node.this.last!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.last.getParent()",com.google.javascript.rhino.Node.this.last.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.last.getType()",com.google.javascript.rhino.Node.this.last.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.last.getFirstChild()",com.google.javascript.rhino.Node.this.last.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.last.getJSType()",com.google.javascript.rhino.Node.this.last.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.last.getNext()",com.google.javascript.rhino.Node.this.last.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.last.getLastChild()",com.google.javascript.rhino.Node.this.last.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.last.getSourcePosition()",com.google.javascript.rhino.Node.this.last.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.last.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.parent!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.parent.getParent()",com.google.javascript.rhino.Node.this.parent.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.parent.getType()",com.google.javascript.rhino.Node.this.parent.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.parent.getFirstChild()",com.google.javascript.rhino.Node.this.parent.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.parent.getJSType()",com.google.javascript.rhino.Node.this.parent.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.parent.getNext()",com.google.javascript.rhino.Node.this.parent.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.parent.getLastChild()",com.google.javascript.rhino.Node.this.parent.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.parent.getSourcePosition()",com.google.javascript.rhino.Node.this.parent.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.parent.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.next!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.next.getParent()",com.google.javascript.rhino.Node.this.next.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.next.getType()",com.google.javascript.rhino.Node.this.next.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.next.getFirstChild()",com.google.javascript.rhino.Node.this.next.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.next.getJSType()",com.google.javascript.rhino.Node.this.next.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.next.getNext()",com.google.javascript.rhino.Node.this.next.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.next.getLastChild()",com.google.javascript.rhino.Node.this.next.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.next.getSourcePosition()",com.google.javascript.rhino.Node.this.next.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.next.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    if (com.google.javascript.rhino.Node.this.first!=null) {
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.first.getParent()",com.google.javascript.rhino.Node.this.first.getParent());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.first.getType()",com.google.javascript.rhino.Node.this.first.getType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.first.getFirstChild()",com.google.javascript.rhino.Node.this.first.getFirstChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.first.getJSType()",com.google.javascript.rhino.Node.this.first.getJSType());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.first.getNext()",com.google.javascript.rhino.Node.this.first.getNext());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.first.getLastChild()",com.google.javascript.rhino.Node.this.first.getLastChild());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.first.getSourcePosition()",com.google.javascript.rhino.Node.this.first.getSourcePosition());} catch (Exception ex1) {ex1.printStackTrace();};
                        try{fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectInput("com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting()",com.google.javascript.rhino.Node.this.first.getPropListHeadForTesting());} catch (Exception ex1) {ex1.printStackTrace();};
                    }
                    fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectOutput(runtimeAngelicValue);
                    fr.inria.lille.commons.trace.RuntimeValues.instance(160).collectionEnds();
                }
                if (runtimeAngelicValue)
                    switch (type) {
                        default :
                            value = x.toString();
                            break;
                    }

                sb.append(value);
                sb.append(']');
            }
        }
        if (printType) {
            if (jsType != null) {
                java.lang.String jsTypeString = jsType.toString();
                if (jsTypeString != null) {
                    sb.append(" : ");
                    sb.append(jsTypeString);
                }
            }
        }
    }

    public java.lang.String toStringTree() {
        return toStringTreeImpl();
    }

    private java.lang.String toStringTreeImpl() {
        try {
            java.lang.StringBuilder s = new java.lang.StringBuilder();
            appendStringTree(s);
            return s.toString();
        } catch (java.io.IOException e) {
            throw new java.lang.RuntimeException("Should not happen\n" + e);
        }
    }

    public void appendStringTree(java.lang.Appendable appendable) throws java.io.IOException {
        com.google.javascript.rhino.Node.toStringTreeHelper(this, 0, appendable);
    }

    private static void toStringTreeHelper(com.google.javascript.rhino.Node n, int level, java.lang.Appendable sb) throws java.io.IOException {
        for (int i = 0; i != level; ++i) {
            sb.append("    ");
        }
        sb.append(n.toString());
        sb.append('\n');
        for (com.google.javascript.rhino.Node cursor = n.getFirstChild(); cursor != null; cursor = cursor.getNext()) {
            com.google.javascript.rhino.Node.toStringTreeHelper(cursor, level + 1, sb);
        }
    }

    int type;

    com.google.javascript.rhino.Node next;

    private com.google.javascript.rhino.Node first;

    private com.google.javascript.rhino.Node last;

    private com.google.javascript.rhino.Node.PropListItem propListHead;

    public static final int COLUMN_BITS = 12;

    public static final int MAX_COLUMN_NUMBER = (1 << com.google.javascript.rhino.Node.COLUMN_BITS) - 1;

    public static final int COLUMN_MASK = com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER;

    private int sourcePosition;

    private com.google.javascript.rhino.jstype.JSType jsType;

    private com.google.javascript.rhino.Node parent;

    public void setStaticSourceFile(com.google.javascript.rhino.jstype.StaticSourceFile file) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, file);
    }

    public void setSourceFileForTesting(java.lang.String name) {
        this.putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, new com.google.javascript.rhino.jstype.SimpleSourceFile(name, false));
    }

    public java.lang.String getSourceFileName() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? null : file.getName();
    }

    public com.google.javascript.rhino.jstype.StaticSourceFile getStaticSourceFile() {
        return ((com.google.javascript.rhino.jstype.StaticSourceFile) (this.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE)));
    }

    public void setInputId(com.google.javascript.rhino.InputId inputId) {
        this.putProp(com.google.javascript.rhino.Node.INPUT_ID, inputId);
    }

    public com.google.javascript.rhino.InputId getInputId() {
        return ((com.google.javascript.rhino.InputId) (this.getProp(com.google.javascript.rhino.Node.INPUT_ID)));
    }

    public boolean isFromExterns() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        return file == null ? false : file.isExtern();
    }

    public int getLength() {
        return getIntProp(com.google.javascript.rhino.Node.LENGTH);
    }

    public void setLength(int length) {
        putIntProp(com.google.javascript.rhino.Node.LENGTH, length);
    }

    public int getLineno() {
        return com.google.javascript.rhino.Node.extractLineno(sourcePosition);
    }

    public int getCharno() {
        return com.google.javascript.rhino.Node.extractCharno(sourcePosition);
    }

    public int getSourceOffset() {
        com.google.javascript.rhino.jstype.StaticSourceFile file = getStaticSourceFile();
        if (file == null) {
            return -1;
        }
        int lineno = getLineno();
        if (lineno == (-1)) {
            return -1;
        }
        return file.getLineOffset(lineno) + getCharno();
    }

    public int getSourcePosition() {
        return sourcePosition;
    }

    public void setLineno(int lineno) {
        int charno = getCharno();
        if (charno == (-1)) {
            charno = 0;
        }
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(lineno, charno);
    }

    public void setCharno(int charno) {
        sourcePosition = com.google.javascript.rhino.Node.mergeLineCharNo(getLineno(), charno);
    }

    public void setSourceEncodedPosition(int sourcePosition) {
        this.sourcePosition = sourcePosition;
    }

    public void setSourceEncodedPositionForTree(int sourcePosition) {
        this.sourcePosition = sourcePosition;
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.setSourceEncodedPositionForTree(sourcePosition);
        }
    }

    protected static int mergeLineCharNo(int lineno, int charno) {
        if ((lineno < 0) || (charno < 0)) {
            return -1;
        } else if ((charno & (~com.google.javascript.rhino.Node.COLUMN_MASK)) != 0) {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | com.google.javascript.rhino.Node.COLUMN_MASK;
        } else {
            return (lineno << com.google.javascript.rhino.Node.COLUMN_BITS) | (charno & com.google.javascript.rhino.Node.COLUMN_MASK);
        }
    }

    protected static int extractLineno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo >>> com.google.javascript.rhino.Node.COLUMN_BITS;
        }
    }

    protected static int extractCharno(int lineCharNo) {
        if (lineCharNo == (-1)) {
            return -1;
        } else {
            return lineCharNo & com.google.javascript.rhino.Node.COLUMN_MASK;
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> children() {
        if (first == null) {
            return java.util.Collections.emptySet();
        } else {
            return new com.google.javascript.rhino.Node.SiblingNodeIterable(first);
        }
    }

    public java.lang.Iterable<com.google.javascript.rhino.Node> siblings() {
        return new com.google.javascript.rhino.Node.SiblingNodeIterable(this);
    }

    private static final class SiblingNodeIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> , java.util.Iterator<com.google.javascript.rhino.Node> {
        private final com.google.javascript.rhino.Node start;

        private com.google.javascript.rhino.Node current;

        private boolean used;

        SiblingNodeIterable(com.google.javascript.rhino.Node start) {
            this.start = start;
            this.current = start;
            this.used = false;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            if (!used) {
                used = true;
                return this;
            } else {
                return new com.google.javascript.rhino.Node.SiblingNodeIterable(start).iterator();
            }
        }

        @java.lang.Override
        public boolean hasNext() {
            return current != null;
        }

        @java.lang.Override
        public com.google.javascript.rhino.Node next() {
            if (current == null) {
                throw new java.util.NoSuchElementException();
            }
            try {
                return current;
            } finally {
                current = current.getNext();
            }
        }

        @java.lang.Override
        public void remove() {
            throw new java.lang.UnsupportedOperationException();
        }
    }

    com.google.javascript.rhino.Node.PropListItem getPropListHeadForTesting() {
        return propListHead;
    }

    public com.google.javascript.rhino.Node getParent() {
        return parent;
    }

    public com.google.javascript.rhino.Node getAncestor(int level) {
        com.google.common.base.Preconditions.checkArgument(level >= 0);
        com.google.javascript.rhino.Node node = this;
        while ((node != null) && ((level--) > 0)) {
            node = node.getParent();
        } 
        return node;
    }

    public com.google.javascript.rhino.Node.AncestorIterable getAncestors() {
        return new com.google.javascript.rhino.Node.AncestorIterable(this.getParent());
    }

    public static class AncestorIterable implements java.lang.Iterable<com.google.javascript.rhino.Node> {
        private com.google.javascript.rhino.Node cur;

        AncestorIterable(com.google.javascript.rhino.Node cur) {
            this.cur = cur;
        }

        @java.lang.Override
        public java.util.Iterator<com.google.javascript.rhino.Node> iterator() {
            return new java.util.Iterator<com.google.javascript.rhino.Node>() {
                @java.lang.Override
                public boolean hasNext() {
                    return cur != null;
                }

                @java.lang.Override
                public com.google.javascript.rhino.Node next() {
                    if (!hasNext()) {
                        throw new java.util.NoSuchElementException();
                    }
                    com.google.javascript.rhino.Node n = cur;
                    cur = cur.getParent();
                    return n;
                }

                @java.lang.Override
                public void remove() {
                    throw new java.lang.UnsupportedOperationException();
                }
            };
        }
    }

    public boolean hasOneChild() {
        return (first != null) && (first == last);
    }

    public boolean hasMoreThanOneChild() {
        return (first != null) && (first != last);
    }

    public int getChildCount() {
        int c = 0;
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.next) {
            c++;
        }
        return c;
    }

    public boolean hasChild(com.google.javascript.rhino.Node child) {
        for (com.google.javascript.rhino.Node n = first; n != null; n = n.getNext()) {
            if (child == n) {
                return true;
            }
        }
        return false;
    }

    public java.lang.String checkTreeEquals(com.google.javascript.rhino.Node node2) {
        com.google.javascript.rhino.Node.NodeMismatch diff = checkTreeEqualsImpl(node2);
        if (diff != null) {
            return ((((((("Node tree inequality:" + "\nTree1:\n") + toStringTree()) + "\n\nTree2:\n") + node2.toStringTree()) + "\n\nSubtree1: ") + diff.nodeA.toStringTree()) + "\n\nSubtree2: ") + diff.nodeB.toStringTree();
        }
        return null;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, false, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            if (node2 == null) {
                throw new java.lang.IllegalStateException();
            }
            res = n.checkTreeEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    com.google.javascript.rhino.Node.NodeMismatch checkTreeTypeAwareEqualsImpl(com.google.javascript.rhino.Node node2) {
        if (!isEquivalentTo(node2, true, false)) {
            return new com.google.javascript.rhino.Node.NodeMismatch(this, node2);
        }
        com.google.javascript.rhino.Node.NodeMismatch res = null;
        com.google.javascript.rhino.Node n;
        com.google.javascript.rhino.Node n2;
        for (n = first, n2 = node2.first; (res == null) && (n != null); n = n.next , n2 = n2.next) {
            res = n.checkTreeTypeAwareEqualsImpl(n2);
            if (res != null) {
                return res;
            }
        }
        return res;
    }

    public boolean isEquivalentTo(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, false, true);
    }

    public boolean isEquivalentToTyped(com.google.javascript.rhino.Node node) {
        return isEquivalentTo(node, true, true);
    }

    boolean isEquivalentTo(com.google.javascript.rhino.Node node, boolean compareJsType, boolean recurse) {
        if (((type != node.getType()) || (getChildCount() != node.getChildCount())) || (this.getClass() != node.getClass())) {
            return false;
        }
        if (compareJsType && (!com.google.javascript.rhino.jstype.JSType.isEquivalent(jsType, node.getJSType()))) {
            return false;
        }
        if ((type == com.google.javascript.rhino.Token.INC) || (type == com.google.javascript.rhino.Token.DEC)) {
            int post1 = this.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            int post2 = node.getIntProp(com.google.javascript.rhino.Node.INCRDECR_PROP);
            if (post1 != post2) {
                return false;
            }
        } else if ((type == com.google.javascript.rhino.Token.STRING) || (type == com.google.javascript.rhino.Token.STRING_KEY)) {
            if (type == com.google.javascript.rhino.Token.STRING_KEY) {
                int quoted1 = this.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                int quoted2 = node.getIntProp(com.google.javascript.rhino.Node.QUOTED_PROP);
                if (quoted1 != quoted2) {
                    return false;
                }
            }
            int slashV1 = this.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            int slashV2 = node.getIntProp(com.google.javascript.rhino.Node.SLASH_V);
            if (slashV1 != slashV2) {
                return false;
            }
        } else if (type == com.google.javascript.rhino.Token.CALL) {
            if (this.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL) != node.getBooleanProp(com.google.javascript.rhino.Node.FREE_CALL)) {
                return false;
            }
        }
        if (recurse) {
            com.google.javascript.rhino.Node n;
            com.google.javascript.rhino.Node n2;
            for (n = first, n2 = node.first; n != null; n = n.next , n2 = n2.next) {
                if (!n.isEquivalentTo(n2, compareJsType, true)) {
                    return false;
                }
            }
        }
        return true;
    }

    public java.lang.String getQualifiedName() {
        if (type == com.google.javascript.rhino.Token.NAME) {
            java.lang.String name = getString();
            return name.isEmpty() ? null : name;
        } else if (type == com.google.javascript.rhino.Token.GETPROP) {
            java.lang.String left = getFirstChild().getQualifiedName();
            if (left == null) {
                return null;
            }
            return (left + ".") + getLastChild().getString();
        } else if (type == com.google.javascript.rhino.Token.THIS) {
            return "this";
        } else {
            return null;
        }
    }

    public boolean isQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.THIS :
                return true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isQualifiedName();
            default :
                return false;
        }
    }

    public boolean isUnscopedQualifiedName() {
        switch (getType()) {
            case com.google.javascript.rhino.Token.NAME :
                return getString().isEmpty() ? false : true;
            case com.google.javascript.rhino.Token.GETPROP :
                return getFirstChild().isUnscopedQualifiedName();
            default :
                return false;
        }
    }

    public com.google.javascript.rhino.Node detachFromParent() {
        com.google.common.base.Preconditions.checkState(parent != null);
        parent.removeChild(this);
        return this;
    }

    public com.google.javascript.rhino.Node removeFirstChild() {
        com.google.javascript.rhino.Node child = first;
        if (child != null) {
            removeChild(child);
        }
        return child;
    }

    public com.google.javascript.rhino.Node removeChildren() {
        com.google.javascript.rhino.Node children = first;
        for (com.google.javascript.rhino.Node child = first; child != null; child = child.getNext()) {
            child.parent = null;
        }
        first = null;
        last = null;
        return children;
    }

    public void detachChildren() {
        for (com.google.javascript.rhino.Node child = first; child != null;) {
            com.google.javascript.rhino.Node nextChild = child.getNext();
            child.parent = null;
            child.next = null;
            child = nextChild;
        }
        first = null;
        last = null;
    }

    public com.google.javascript.rhino.Node removeChildAfter(com.google.javascript.rhino.Node prev) {
        com.google.common.base.Preconditions.checkArgument(prev.parent == this, "prev is not a child of this node.");
        com.google.common.base.Preconditions.checkArgument(prev.next != null, "no next sibling.");
        com.google.javascript.rhino.Node child = prev.next;
        prev.next = child.next;
        if (child == last) {
            last = prev;
        }
        child.next = null;
        child.parent = null;
        return child;
    }

    public com.google.javascript.rhino.Node cloneNode() {
        com.google.javascript.rhino.Node result;
        try {
            result = ((com.google.javascript.rhino.Node) (super.clone()));
            result.next = null;
            result.first = null;
            result.last = null;
            result.parent = null;
        } catch (java.lang.CloneNotSupportedException e) {
            throw new java.lang.RuntimeException(e.getMessage());
        }
        return result;
    }

    public com.google.javascript.rhino.Node cloneTree() {
        com.google.javascript.rhino.Node result = cloneNode();
        for (com.google.javascript.rhino.Node n2 = getFirstChild(); n2 != null; n2 = n2.getNext()) {
            com.google.javascript.rhino.Node n2clone = n2.cloneTree();
            n2clone.parent = result;
            if (result.last != null) {
                result.last.next = n2clone;
            }
            if (result.first == null) {
                result.first = n2clone;
            }
            result.last = n2clone;
        }
        return result;
    }

    public com.google.javascript.rhino.Node copyInformationFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        } else if (getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.SOURCENAME_PROP, other.getProp(com.google.javascript.rhino.Node.SOURCENAME_PROP));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node copyInformationFromForTree(com.google.javascript.rhino.Node other) {
        copyInformationFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.copyInformationFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoFrom(com.google.javascript.rhino.Node other) {
        putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
        sourcePosition = other.sourcePosition;
        return this;
    }

    public com.google.javascript.rhino.Node srcref(com.google.javascript.rhino.Node other) {
        return useSourceInfoFrom(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.Node srcrefTree(com.google.javascript.rhino.Node other) {
        return useSourceInfoFromForTree(other);
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFrom(com.google.javascript.rhino.Node other) {
        if (getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP) == null) {
            putProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP, other.getProp(com.google.javascript.rhino.Node.ORIGINALNAME_PROP));
        }
        if (getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE) == null) {
            putProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE, other.getProp(com.google.javascript.rhino.Node.STATIC_SOURCE_FILE));
            sourcePosition = other.sourcePosition;
        }
        return this;
    }

    public com.google.javascript.rhino.Node useSourceInfoIfMissingFromForTree(com.google.javascript.rhino.Node other) {
        useSourceInfoIfMissingFrom(other);
        for (com.google.javascript.rhino.Node child = getFirstChild(); child != null; child = child.getNext()) {
            child.useSourceInfoIfMissingFromForTree(other);
        }
        return this;
    }

    public com.google.javascript.rhino.jstype.JSType getJSType() {
        return jsType;
    }

    public void setJSType(com.google.javascript.rhino.jstype.JSType jsType) {
        this.jsType = jsType;
    }

    public com.google.javascript.rhino.Node.FileLevelJsDocBuilder getJsDocBuilderForNode() {
        return new com.google.javascript.rhino.Node.FileLevelJsDocBuilder();
    }

    public class FileLevelJsDocBuilder {
        public void append(java.lang.String fileLevelComment) {
            com.google.javascript.rhino.JSDocInfo jsDocInfo = getJSDocInfo();
            if (jsDocInfo == null) {
                jsDocInfo = new com.google.javascript.rhino.JSDocInfo(false);
            }
            java.lang.String license = jsDocInfo.getLicense();
            if (license == null) {
                license = "";
            }
            jsDocInfo.setLicense(license + fileLevelComment);
            setJSDocInfo(jsDocInfo);
        }
    }

    public com.google.javascript.rhino.JSDocInfo getJSDocInfo() {
        return ((com.google.javascript.rhino.JSDocInfo) (getProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP)));
    }

    public void setJSDocInfo(com.google.javascript.rhino.JSDocInfo info) {
        putProp(com.google.javascript.rhino.Node.JSDOC_INFO_PROP, info);
    }

    public void setVarArgs(boolean varArgs) {
        putBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME, varArgs);
    }

    public boolean isVarArgs() {
        return getBooleanProp(com.google.javascript.rhino.Node.VAR_ARGS_NAME);
    }

    public void setOptionalArg(boolean optionalArg) {
        putBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME, optionalArg);
    }

    public boolean isOptionalArg() {
        return getBooleanProp(com.google.javascript.rhino.Node.OPT_ARG_NAME);
    }

    public void setIsSyntheticBlock(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP, val);
    }

    public boolean isSyntheticBlock() {
        return getBooleanProp(com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
    }

    public void setDirectives(java.util.Set<java.lang.String> val) {
        putProp(com.google.javascript.rhino.Node.DIRECTIVES, val);
    }

    @java.lang.SuppressWarnings("unchecked")
    public java.util.Set<java.lang.String> getDirectives() {
        return ((java.util.Set<java.lang.String>) (getProp(com.google.javascript.rhino.Node.DIRECTIVES)));
    }

    public void addSuppression(java.lang.String warning) {
        if (getJSDocInfo() == null) {
            setJSDocInfo(new com.google.javascript.rhino.JSDocInfo(false));
        }
        getJSDocInfo().addSuppression(warning);
    }

    public void setWasEmptyNode(boolean val) {
        putBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK, val);
    }

    public boolean wasEmptyNode() {
        return getBooleanProp(com.google.javascript.rhino.Node.EMPTY_BLOCK);
    }

    public static final int FLAG_GLOBAL_STATE_UNMODIFIED = 1;

    public static final int FLAG_THIS_UNMODIFIED = 2;

    public static final int FLAG_ARGUMENTS_UNMODIFIED = 4;

    public static final int FLAG_NO_THROWS = 8;

    public static final int FLAG_LOCAL_RESULTS = 16;

    public static final int SIDE_EFFECTS_FLAGS_MASK = 31;

    public static final int SIDE_EFFECTS_ALL = 0;

    public static final int NO_SIDE_EFFECTS = ((com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS;

    public void setSideEffectFlags(int flags) {
        com.google.common.base.Preconditions.checkArgument((getType() == com.google.javascript.rhino.Token.CALL) || (getType() == com.google.javascript.rhino.Token.NEW), "setIsNoSideEffectsCall only supports CALL and NEW nodes, got " + com.google.javascript.rhino.Token.name(getType()));
        putIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS, flags);
    }

    public void setSideEffectFlags(com.google.javascript.rhino.Node.SideEffectFlags flags) {
        setSideEffectFlags(flags.valueOf());
    }

    public int getSideEffectFlags() {
        return getIntProp(com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
    }

    public static class SideEffectFlags {
        private int value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;

        public SideEffectFlags() {
        }

        public SideEffectFlags(int value) {
            this.value = value;
        }

        public int valueOf() {
            return value;
        }

        public void setAllFlags() {
            value = com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearAllFlags() {
            value = com.google.javascript.rhino.Node.NO_SIDE_EFFECTS | com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS;
        }

        public boolean areAllFlagsSet() {
            return value == com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL;
        }

        public void clearSideEffectFlags() {
            value |= com.google.javascript.rhino.Node.NO_SIDE_EFFECTS;
        }

        public void setMutatesGlobalState() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setThrows() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_NO_THROWS);
        }

        public void setMutatesThis() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
        }

        public void setMutatesArguments() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
        }

        public void setReturnsTainted() {
            removeFlag(com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
        }

        private void removeFlag(int flag) {
            value &= ~flag;
        }
    }

    public boolean isOnlyModifiesThisCall() {
        return areBitFlagsSet(getSideEffectFlags() & com.google.javascript.rhino.Node.NO_SIDE_EFFECTS, (com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED | com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED) | com.google.javascript.rhino.Node.FLAG_NO_THROWS);
    }

    public boolean isNoSideEffectsCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
    }

    public boolean isLocalResultCall() {
        return areBitFlagsSet(getSideEffectFlags(), com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
    }

    private boolean areBitFlagsSet(int value, int flags) {
        return (value & flags) == flags;
    }

    public boolean isQuotedString() {
        return false;
    }

    public void setQuotedString() {
        throw new java.lang.IllegalStateException("not a StringNode");
    }

    static class NodeMismatch {
        final com.google.javascript.rhino.Node nodeA;

        final com.google.javascript.rhino.Node nodeB;

        NodeMismatch(com.google.javascript.rhino.Node nodeA, com.google.javascript.rhino.Node nodeB) {
            this.nodeA = nodeA;
            this.nodeB = nodeB;
        }

        @java.lang.Override
        public boolean equals(java.lang.Object object) {
            if (object instanceof com.google.javascript.rhino.Node.NodeMismatch) {
                com.google.javascript.rhino.Node.NodeMismatch that = ((com.google.javascript.rhino.Node.NodeMismatch) (object));
                return that.nodeA.equals(this.nodeA) && that.nodeB.equals(this.nodeB);
            }
            return false;
        }

        @java.lang.Override
        public int hashCode() {
            return com.google.common.base.Objects.hashCode(nodeA, nodeB);
        }
    }

    public boolean isAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ADD;
    }

    public boolean isAnd() {
        return this.getType() == com.google.javascript.rhino.Token.AND;
    }

    public boolean isArrayLit() {
        return this.getType() == com.google.javascript.rhino.Token.ARRAYLIT;
    }

    public boolean isAssign() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN;
    }

    public boolean isAssignAdd() {
        return this.getType() == com.google.javascript.rhino.Token.ASSIGN_ADD;
    }

    public boolean isBlock() {
        return this.getType() == com.google.javascript.rhino.Token.BLOCK;
    }

    public boolean isBreak() {
        return this.getType() == com.google.javascript.rhino.Token.BREAK;
    }

    public boolean isCall() {
        return this.getType() == com.google.javascript.rhino.Token.CALL;
    }

    public boolean isCase() {
        return this.getType() == com.google.javascript.rhino.Token.CASE;
    }

    public boolean isCatch() {
        return this.getType() == com.google.javascript.rhino.Token.CATCH;
    }

    public boolean isComma() {
        return this.getType() == com.google.javascript.rhino.Token.COMMA;
    }

    public boolean isContinue() {
        return this.getType() == com.google.javascript.rhino.Token.CONTINUE;
    }

    public boolean isDebugger() {
        return this.getType() == com.google.javascript.rhino.Token.DEBUGGER;
    }

    public boolean isDec() {
        return this.getType() == com.google.javascript.rhino.Token.DEC;
    }

    public boolean isDefaultCase() {
        return this.getType() == com.google.javascript.rhino.Token.DEFAULT_CASE;
    }

    public boolean isDelProp() {
        return this.getType() == com.google.javascript.rhino.Token.DELPROP;
    }

    public boolean isDo() {
        return this.getType() == com.google.javascript.rhino.Token.DO;
    }

    public boolean isEmpty() {
        return this.getType() == com.google.javascript.rhino.Token.EMPTY;
    }

    public boolean isExprResult() {
        return this.getType() == com.google.javascript.rhino.Token.EXPR_RESULT;
    }

    public boolean isFalse() {
        return this.getType() == com.google.javascript.rhino.Token.FALSE;
    }

    public boolean isFor() {
        return this.getType() == com.google.javascript.rhino.Token.FOR;
    }

    public boolean isFunction() {
        return this.getType() == com.google.javascript.rhino.Token.FUNCTION;
    }

    public boolean isGetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.GETTER_DEF;
    }

    public boolean isGetElem() {
        return this.getType() == com.google.javascript.rhino.Token.GETELEM;
    }

    public boolean isGetProp() {
        return this.getType() == com.google.javascript.rhino.Token.GETPROP;
    }

    public boolean isHook() {
        return this.getType() == com.google.javascript.rhino.Token.HOOK;
    }

    public boolean isIf() {
        return this.getType() == com.google.javascript.rhino.Token.IF;
    }

    public boolean isIn() {
        return this.getType() == com.google.javascript.rhino.Token.IN;
    }

    public boolean isInc() {
        return this.getType() == com.google.javascript.rhino.Token.INC;
    }

    public boolean isInstanceOf() {
        return this.getType() == com.google.javascript.rhino.Token.INSTANCEOF;
    }

    public boolean isLabel() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL;
    }

    public boolean isLabelName() {
        return this.getType() == com.google.javascript.rhino.Token.LABEL_NAME;
    }

    public boolean isName() {
        return this.getType() == com.google.javascript.rhino.Token.NAME;
    }

    public boolean isNE() {
        return this.getType() == com.google.javascript.rhino.Token.NE;
    }

    public boolean isNew() {
        return this.getType() == com.google.javascript.rhino.Token.NEW;
    }

    public boolean isNot() {
        return this.getType() == com.google.javascript.rhino.Token.NOT;
    }

    public boolean isNull() {
        return this.getType() == com.google.javascript.rhino.Token.NULL;
    }

    public boolean isNumber() {
        return this.getType() == com.google.javascript.rhino.Token.NUMBER;
    }

    public boolean isObjectLit() {
        return this.getType() == com.google.javascript.rhino.Token.OBJECTLIT;
    }

    public boolean isOr() {
        return this.getType() == com.google.javascript.rhino.Token.OR;
    }

    public boolean isParamList() {
        return this.getType() == com.google.javascript.rhino.Token.PARAM_LIST;
    }

    public boolean isRegExp() {
        return this.getType() == com.google.javascript.rhino.Token.REGEXP;
    }

    public boolean isReturn() {
        return this.getType() == com.google.javascript.rhino.Token.RETURN;
    }

    public boolean isScript() {
        return this.getType() == com.google.javascript.rhino.Token.SCRIPT;
    }

    public boolean isSetterDef() {
        return this.getType() == com.google.javascript.rhino.Token.SETTER_DEF;
    }

    public boolean isString() {
        return this.getType() == com.google.javascript.rhino.Token.STRING;
    }

    public boolean isStringKey() {
        return this.getType() == com.google.javascript.rhino.Token.STRING_KEY;
    }

    public boolean isSwitch() {
        return this.getType() == com.google.javascript.rhino.Token.SWITCH;
    }

    public boolean isThis() {
        return this.getType() == com.google.javascript.rhino.Token.THIS;
    }

    public boolean isThrow() {
        return this.getType() == com.google.javascript.rhino.Token.THROW;
    }

    public boolean isTrue() {
        return this.getType() == com.google.javascript.rhino.Token.TRUE;
    }

    public boolean isTry() {
        return this.getType() == com.google.javascript.rhino.Token.TRY;
    }

    public boolean isTypeOf() {
        return this.getType() == com.google.javascript.rhino.Token.TYPEOF;
    }

    public boolean isVar() {
        return this.getType() == com.google.javascript.rhino.Token.VAR;
    }

    public boolean isVoid() {
        return this.getType() == com.google.javascript.rhino.Token.VOID;
    }

    public boolean isWhile() {
        return this.getType() == com.google.javascript.rhino.Token.WHILE;
    }

    public boolean isWith() {
        return this.getType() == com.google.javascript.rhino.Token.WITH;
    }
}
[626324] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: xxl.java.compiler.DynamicCompilationException: Aborting: dynamic compilation failed
GPR[ESUN]-1659829431141
GPR[SSUN]-1659829431141
2433571
GPR[SPVATF]-1659829431378
GPR[EPVATF]-1659829432017
GPR[SPS]-1659829432017
[627866] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:989.
GPR[EPS]-1659829432684
GPR[ESUN]-1659829432684
GPR[SSUN]-1659829432684
2433571
GPR[SPVATF]-1659829432928
GPR[EPVATF]-1659829433553
GPR[SPS]-1659829433553
[629537] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:988.
GPR[EPS]-1659829434354
GPR[ESUN]-1659829434354
GPR[SSUN]-1659829434354
2433571
GPR[SPVATF]-1659829434597
GPR[EPVATF]-1659829435280
GPR[SPS]-1659829435280
[632000] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:987.
GPR[EPS]-1659829436817
GPR[ESUN]-1659829436817
GPR[SSUN]-1659829436817
2433571
GPR[ESUN]-1659829437092
GPR[SSUN]-1659829437092
2433571
GPR[ESUN]-1659829437351
GPR[SSUN]-1659829437351
2433571
GPR[SPVATF]-1659829437606
GPR[EPVATF]-1659829438278
GPR[SPS]-1659829438278
[634109] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:978.
GPR[EPS]-1659829438926
GPR[ESUN]-1659829438927
GPR[SSUN]-1659829438927
2433571
GPR[SPVATF]-1659829439194
GPR[EPVATF]-1659829439785
GPR[SPS]-1659829439785
[635885] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:977.
GPR[EPS]-1659829440702
GPR[ESUN]-1659829440702
GPR[SSUN]-1659829440702
2433571
GPR[SPVATF]-1659829440986
GPR[EPVATF]-1659829441628
GPR[SPS]-1659829441628
[637493] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:890.
GPR[EPS]-1659829442310
GPR[ESUN]-1659829442310
GPR[SSUN]-1659829442310
2433571
GPR[SPVATF]-1659829442553
GPR[EPVATF]-1659829443030
GPR[SPS]-1659829443030
[638883] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:889.
GPR[EPS]-1659829443700
GPR[ESUN]-1659829443700
GPR[SSUN]-1659829443700
2433571
GPR[SPVATF]-1659829443944
GPR[EPVATF]-1659829444445
GPR[SPS]-1659829444445
[640701] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:884.
GPR[EPS]-1659829445518
GPR[ESUN]-1659829445518
GPR[SSUN]-1659829445518
2433571
GPR[ESUN]-1659829445772
GPR[SSUN]-1659829445772
2433571
GPR[ESUN]-1659829446017
GPR[SSUN]-1659829446017
2433571
GPR[ESUN]-1659829446275
GPR[SSUN]-1659829446275
881600600
GPR[ESUN]-1659829446483
GPR[SSUN]-1659829446483
-1966087783
GPR[ESUN]-1659829446695
GPR[SSUN]-1659829446695
-1966087783
GPR[SPVATF]-1659829446902
GPR[EPVATF]-1659829446929
[642112] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829446929
GPR[EPVATF]-1659829446952
[642135] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829446952
GPR[SSUN]-1659829446952
80988634
GPR[ESUN]-1659829447150
GPR[SSUN]-1659829447150
-1119592721
GPR[SPVATF]-1659829447442
GPR[EPVATF]-1659829447934
GPR[SPS]-1659829447934
[645171] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:399.
GPR[EPS]-1659829449988
GPR[SPVATF]-1659829449988
GPR[EPVATF]-1659829450450
GPR[SPS]-1659829450450
[646254] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:399.
GPR[EPS]-1659829451071
GPR[ESUN]-1659829451071
GPR[SSUN]-1659829451071
-1119592721
GPR[ESUN]-1659829451330
GPR[SSUN]-1659829451330
-1119592721
GPR[ESUN]-1659829451580
GPR[SSUN]-1659829451580
160819208
GPR[SPVATF]-1659829451833
GPR[EPVATF]-1659829452328
GPR[SPS]-1659829452328
[648142] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:757.
GPR[EPS]-1659829452959
GPR[SPVATF]-1659829452960
GPR[EPVATF]-1659829453458
GPR[SPS]-1659829453458
[649288] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:757.
GPR[EPS]-1659829454105
GPR[ESUN]-1659829454105
GPR[SSUN]-1659829454105
160819208
GPR[SPVATF]-1659829454376
GPR[EPVATF]-1659829454998
GPR[SPS]-1659829454998
[650819] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:751.
GPR[EPS]-1659829455636
GPR[SPVATF]-1659829455636
GPR[EPVATF]-1659829456163
GPR[SPS]-1659829456163
[651947] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:751.
GPR[EPS]-1659829456764
GPR[ESUN]-1659829456764
GPR[SSUN]-1659829456764
160819208
GPR[ESUN]-1659829457021
GPR[SSUN]-1659829457021
160819208
GPR[SPVATF]-1659829457286
GPR[EPVATF]-1659829457770
GPR[SPS]-1659829457770
GPR[EPS]-1659829689072
GPR[ESUN]-1659829689072
GPR[SSUN]-1659829689072
160819208
GPR[ESUN]-1659829689827
GPR[SSUN]-1659829689827
160819208
GPR[SPVATF]-1659829690100
GPR[EPVATF]-1659829690590
GPR[SPS]-1659829690590
GPR[EPS]-1659829722942
GPR[ESUN]-1659829722942
GPR[SSUN]-1659829722942
160819208
GPR[SPVATF]-1659829723207
GPR[EPVATF]-1659829723695
GPR[SPS]-1659829723695
[919489] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:287.
GPR[EPS]-1659829724306
GPR[ESUN]-1659829724306
GPR[SSUN]-1659829724306
160819208
GPR[SPVATF]-1659829724566
GPR[EPVATF]-1659829725054
GPR[SPS]-1659829725054
[920849] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:286.
GPR[EPS]-1659829725666
GPR[ESUN]-1659829725666
GPR[SSUN]-1659829725666
160819208
GPR[SPVATF]-1659829725926
GPR[EPVATF]-1659829726398
GPR[SPS]-1659829726398
[922222] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:285.
GPR[EPS]-1659829727039
GPR[SPVATF]-1659829727040
GPR[EPVATF]-1659829727569
GPR[SPS]-1659829727569
[923377] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:285.
GPR[EPS]-1659829728194
GPR[ESUN]-1659829728194
GPR[SSUN]-1659829728194
160819208
GPR[ESUN]-1659829728449
GPR[SSUN]-1659829728449
160819208
GPR[SPVATF]-1659829728714
GPR[EPVATF]-1659829729224
GPR[SPS]-1659829729224
[925173] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:230.
GPR[EPS]-1659829729990
GPR[ESUN]-1659829729990
GPR[SSUN]-1659829729990
2433571
GPR[SPVATF]-1659829730255
GPR[EPVATF]-1659829730784
GPR[SPS]-1659829730784
[926608] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1041.
GPR[EPS]-1659829731425
GPR[ESUN]-1659829731425
GPR[SSUN]-1659829731425
2433571
GPR[SPVATF]-1659829731682
GPR[EPVATF]-1659829732182
GPR[SPS]-1659829732182
[928065] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1034.
GPR[EPS]-1659829732882
GPR[ESUN]-1659829732883
GPR[SSUN]-1659829732883
2433571
GPR[ESUN]-1659829733145
GPR[SSUN]-1659829733145
2433571
GPR[ESUN]-1659829733409
GPR[SSUN]-1659829733409
2433571
GPR[SPVATF]-1659829733673
GPR[EPVATF]-1659829734220
GPR[SPS]-1659829734220
[930017] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1038.
GPR[EPS]-1659829734834
GPR[ESUN]-1659829734834
GPR[SSUN]-1659829734834
2433571
GPR[SPVATF]-1659829735066
GPR[EPVATF]-1659829735562
GPR[SPS]-1659829735563
[931315] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1037.
GPR[EPS]-1659829736132
GPR[ESUN]-1659829736133
GPR[SSUN]-1659829736133
2433571
GPR[SPVATF]-1659829736361
GPR[EPVATF]-1659829736868
GPR[SPS]-1659829736868
[932632] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1036.
GPR[EPS]-1659829737449
GPR[ESUN]-1659829737449
GPR[SSUN]-1659829737449
2433571
GPR[SPVATF]-1659829737833
GPR[EPVATF]-1659829738366
GPR[SPS]-1659829738366
[935449] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1033.
GPR[EPS]-1659829740266
GPR[ESUN]-1659829740266
GPR[SSUN]-1659829740266
2433571
GPR[ESUN]-1659829740865
GPR[SSUN]-1659829740865
2433571
GPR[SPVATF]-1659829741293
GPR[EPVATF]-1659829742253
GPR[SPS]-1659829742253
[938087] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1028.
GPR[EPS]-1659829742904
GPR[ESUN]-1659829742904
GPR[SSUN]-1659829742904
2433571
GPR[ESUN]-1659829743151
GPR[SSUN]-1659829743151
2433571
GPR[SPVATF]-1659829743390
GPR[EPVATF]-1659829743944
GPR[SPS]-1659829743944
[939758] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1020.
GPR[EPS]-1659829744576
GPR[ESUN]-1659829744576
GPR[SSUN]-1659829744576
2433571
GPR[ESUN]-1659829744812
GPR[SSUN]-1659829744812
2433571
GPR[ESUN]-1659829745050
GPR[SSUN]-1659829745050
-718432441
GPR[SPVATF]-1659829745272
GPR[EPVATF]-1659829745816
GPR[SPS]-1659829745816
[941694] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:158.
GPR[EPS]-1659829746511
GPR[ESUN]-1659829746511
GPR[SSUN]-1659829746511
-718432441
GPR[SPVATF]-1659829746732
GPR[EPVATF]-1659829747292
GPR[SPS]-1659829747292
[943342] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:157.
GPR[EPS]-1659829748159
GPR[ESUN]-1659829748160
GPR[SSUN]-1659829748160
-718432441
GPR[SPVATF]-1659829748393
GPR[EPVATF]-1659829748991
GPR[SPS]-1659829748991
[945007] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:156.
GPR[EPS]-1659829749824
GPR[ESUN]-1659829749824
GPR[SSUN]-1659829749824
-718432441
GPR[SPVATF]-1659829750136
GPR[EPVATF]-1659829750765
GPR[SPS]-1659829750765
[946665] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:155.
GPR[EPS]-1659829751482
GPR[ESUN]-1659829751482
GPR[SSUN]-1659829751482
-718432441
GPR[SPVATF]-1659829751762
GPR[EPVATF]-1659829753294
GPR[SPS]-1659829753294
[949510] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:154.
GPR[EPS]-1659829754328
GPR[ESUN]-1659829754328
GPR[SSUN]-1659829754328
-718432441
GPR[SPVATF]-1659829754569
GPR[EPVATF]-1659829755450
GPR[SPS]-1659829755450
[951352] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:153.
GPR[EPS]-1659829756169
GPR[ESUN]-1659829756169
GPR[SSUN]-1659829756169
-718432441
GPR[SPVATF]-1659829756407
GPR[EPVATF]-1659829756941
GPR[SPS]-1659829756941
[952833] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:142.
GPR[EPS]-1659829757650
GPR[ESUN]-1659829757650
GPR[SSUN]-1659829757650
160819208
GPR[SPVATF]-1659829757910
GPR[EPVATF]-1659829758420
GPR[SPS]-1659829758420
[954247] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:750.
GPR[EPS]-1659829759064
GPR[SPVATF]-1659829759064
GPR[EPVATF]-1659829759569
GPR[SPS]-1659829759569
[955382] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:750.
GPR[EPS]-1659829760199
GPR[ESUN]-1659829760199
GPR[SSUN]-1659829760199
-1765952779
GPR[SPVATF]-1659829760451
GPR[EPVATF]-1659829760958
GPR[SPS]-1659829760958
GPR[EPS]-1659829762658
GPR[SPVATR]-1659829762658
[957841] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MaybeReachingVariableUse:228: PRECONDITION com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()
[958195] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659829763707
[958890] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659829763708
[958893] INFO NoPol - --- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -227,3 +227,5 @@
           if (!conditional) {
-            removeFromUseIfLocal(name.getString(), output);
+            if (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()) {
+              removeFromUseIfLocal(name.getString(), output);
+            }
           }

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_954291_2ts_1659829763710.diff
GPR[ESUN]-1659829763711
GPR[SSUN]-1659829763711
-1765952779
GPR[ESUN]-1659829763960
GPR[SSUN]-1659829763960
-1765952779
GPR[SPVATF]-1659829764205
GPR[EPVATF]-1659829764710
GPR[SPS]-1659829764710
GPR[EPS]-1659829766371
GPR[SPVATR]-1659829766371
[961554] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MaybeReachingVariableUse:236: PRECONDITION com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()
[961905] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659829767406
[962589] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659829767406
[962591] INFO NoPol - --- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -235,3 +235,5 @@
 
-          computeMayUse(name.getNext(), cfgNode, output, conditional);
+          if (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()) {
+            computeMayUse(name.getNext(), cfgNode, output, conditional);
+          }
         } else {

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_957989_3ts_1659829767408.diff
GPR[ESUN]-1659829767408
GPR[SSUN]-1659829767408
-1765952779
GPR[SPVATF]-1659829767659
GPR[EPVATF]-1659829768145
GPR[SPS]-1659829768145
[963934] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:232.
GPR[EPS]-1659829768751
GPR[SPVATF]-1659829768752
GPR[EPVATF]-1659829769238
GPR[SPS]-1659829769238
[965009] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:232.
GPR[EPS]-1659829769826
GPR[ESUN]-1659829769826
GPR[SSUN]-1659829769826
-1765952779
GPR[SPVATF]-1659829770060
GPR[EPVATF]-1659829770587
GPR[SPS]-1659829770588
GPR[EPS]-1659829772169
GPR[SPVATR]-1659829772169
[967352] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MaybeReachingVariableUse:227: PRECONDITION com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()
[967728] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659829773252
[968435] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659829773252
[968437] INFO NoPol - --- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -226,4 +226,6 @@
           Node name = n.getFirstChild();
-          if (!conditional) {
-            removeFromUseIfLocal(name.getString(), output);
+          if (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()) {
+            if (!conditional) {
+              removeFromUseIfLocal(name.getString(), output);
+            }
           }

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_963835_4ts_1659829773254.diff
GPR[SPVATF]-1659829773255
GPR[EPVATF]-1659829773978
GPR[SPS]-1659829773978
GPR[EPS]-1659829775651
GPR[SPVATR]-1659829775651
[970834] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MaybeReachingVariableUse:227: CONDITIONAL (!conditional) && (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty())
[971197] INFO TestPatch - Running test suite to check the patch "(!conditional) && (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty())" is working
GPR[EPVATR]-1659829776740
[971923] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659829776741
[971926] INFO NoPol - --- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -226,3 +226,3 @@
           Node name = n.getFirstChild();
-          if (!conditional) {
+          if ((!conditional) && (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty())) {
             removeFromUseIfLocal(name.getString(), output);

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_967324_5ts_1659829776743.diff
GPR[ESUN]-1659829776744
GPR[SSUN]-1659829776744
-1765952779
GPR[ESUN]-1659829776993
GPR[SSUN]-1659829776993
80988634
GPR[ESUN]-1659829777194
GPR[SSUN]-1659829777194
948429589
GPR[SPVATF]-1659829777457
GPR[EPVATF]-1659829777990
GPR[SPS]-1659829777990
[973766] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:321.
GPR[EPS]-1659829778583
GPR[ESUN]-1659829778583
GPR[SSUN]-1659829778583
948429589
GPR[ESUN]-1659829778840
GPR[SSUN]-1659829778840
948429589
GPR[SPVATF]-1659829779101
GPR[EPVATF]-1659829779656
GPR[SPS]-1659829779656
[975479] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:319.
GPR[EPS]-1659829780296
GPR[ESUN]-1659829780296
GPR[SSUN]-1659829780296
948429589
GPR[ESUN]-1659829780536
GPR[SSUN]-1659829780536
948429589
GPR[SPVATF]-1659829780805
GPR[EPVATF]-1659829781341
GPR[SPS]-1659829781341
[977153] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.DataFlowAnalysis:317.
GPR[EPS]-1659829781970
GPR[ESUN]-1659829781970
GPR[SSUN]-1659829781970
948429589
GPR[ESUN]-1659829782225
GPR[SSUN]-1659829782225
2433571
GPR[SPVATF]-1659829782665
GPR[EPVATF]-1659829783197
GPR[SPS]-1659829783197
[979064] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:959.
GPR[EPS]-1659829783881
GPR[ESUN]-1659829783881
GPR[SSUN]-1659829783881
2433571
GPR[SPVATF]-1659829784138
GPR[EPVATF]-1659829784696
GPR[SPS]-1659829784696
[980554] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:958.
GPR[EPS]-1659829785371
GPR[ESUN]-1659829785371
GPR[SSUN]-1659829785371
2433571
GPR[SPVATF]-1659829785624
GPR[EPVATF]-1659829786188
GPR[SPS]-1659829786188
[982073] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1002.
GPR[EPS]-1659829786890
GPR[SPVATF]-1659829786890
GPR[EPVATF]-1659829787461
GPR[SPS]-1659829787461
[983316] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1002.
GPR[EPS]-1659829788133
GPR[ESUN]-1659829788133
GPR[SSUN]-1659829788133
2433571
GPR[SPVATF]-1659829788391
GPR[EPVATF]-1659829788957
GPR[SPS]-1659829788957
[984846] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:984.
GPR[EPS]-1659829789663
GPR[ESUN]-1659829789663
GPR[SSUN]-1659829789663
2433571
GPR[ESUN]-1659829789919
GPR[SSUN]-1659829789919
2433571
GPR[SPVATF]-1659829790177
GPR[EPVATF]-1659829790908
GPR[SPS]-1659829790908
[986806] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:976.
GPR[EPS]-1659829791623
GPR[SPVATF]-1659829791624
GPR[EPVATF]-1659829792198
GPR[SPS]-1659829792198
[988048] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:976.
GPR[EPS]-1659829792865
GPR[ESUN]-1659829792865
GPR[SSUN]-1659829792865
2433571
GPR[ESUN]-1659829793099
GPR[SSUN]-1659829793099
2433571
GPR[ESUN]-1659829793352
GPR[SSUN]-1659829793352
2433571
GPR[ESUN]-1659829793601
GPR[SSUN]-1659829793601
2433571
GPR[SPVATF]-1659829793854
GPR[EPVATF]-1659829794427
GPR[SPS]-1659829794427
[990292] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:893.
GPR[EPS]-1659829795109
GPR[ESUN]-1659829795109
GPR[SSUN]-1659829795109
2433571
GPR[SPVATF]-1659829795372
GPR[EPVATF]-1659829795972
GPR[SPS]-1659829795972
[991821] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:888.
GPR[EPS]-1659829796638
GPR[ESUN]-1659829796638
GPR[SSUN]-1659829796638
2433571
GPR[ESUN]-1659829796902
GPR[SSUN]-1659829796902
2433571
GPR[SPVATF]-1659829797165
GPR[EPVATF]-1659829797787
GPR[SPS]-1659829797787
[993824] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:883.
GPR[EPS]-1659829798641
GPR[ESUN]-1659829798641
GPR[SSUN]-1659829798641
2433571
GPR[ESUN]-1659829798903
GPR[SSUN]-1659829798903
1187751237
GPR[ESUN]-1659829799210
GPR[SSUN]-1659829799210
1187751237
GPR[SPVATF]-1659829799521
GPR[EPVATF]-1659829800159
GPR[SPS]-1659829800159
[996121] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2768.
GPR[EPS]-1659829800938
GPR[ESUN]-1659829800938
GPR[SSUN]-1659829800939
1187751237
GPR[ESUN]-1659829801243
GPR[SSUN]-1659829801244
1187751237
GPR[SPVATF]-1659829801553
GPR[EPVATF]-1659829802175
GPR[SPS]-1659829802175
[998116] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2759.
GPR[EPS]-1659829802933
GPR[ESUN]-1659829802933
GPR[SSUN]-1659829802933
-1117079791
GPR[ESUN]-1659829803159
GPR[SSUN]-1659829803159
-1117079791
GPR[SPVATF]-1659829803376
GPR[EPVATF]-1659829803993
GPR[SPS]-1659829803993
[999719] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:540.
GPR[EPS]-1659829804536
GPR[ESUN]-1659829804536
GPR[SSUN]-1659829804536
-1117079791
GPR[SPVATF]-1659829804753
GPR[EPVATF]-1659829806398
GPR[SPS]-1659829806398
[1002145] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:539.
GPR[EPS]-1659829806963
GPR[ESUN]-1659829806963
GPR[SSUN]-1659829806963
-1117079791
GPR[SPVATF]-1659829807182
GPR[EPVATF]-1659829808500
GPR[SPS]-1659829808500
[1004227] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:538.
GPR[EPS]-1659829809044
GPR[ESUN]-1659829809044
GPR[SSUN]-1659829809044
-1117079791
GPR[SPVATF]-1659829809289
GPR[EPVATF]-1659829809830
GPR[SPS]-1659829809830
[1005876] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:537.
GPR[EPS]-1659829810693
GPR[ESUN]-1659829810693
GPR[SSUN]-1659829810693
-1117079791
GPR[SPVATF]-1659829810903
GPR[EPVATF]-1659829811434
GPR[SPS]-1659829811434
[1007154] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:522.
GPR[EPS]-1659829811971
GPR[ESUN]-1659829811971
GPR[SSUN]-1659829811971
-1117079791
GPR[SPVATF]-1659829812184
GPR[EPVATF]-1659829812667
GPR[SPS]-1659829812667
[1008326] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:521.
GPR[EPS]-1659829813143
GPR[ESUN]-1659829813143
GPR[SSUN]-1659829813143
1187751237
GPR[ESUN]-1659829813418
GPR[SSUN]-1659829813418
1187751237
GPR[SPVATF]-1659829813684
GPR[EPVATF]-1659829814151
GPR[SPS]-1659829814151
[1011381] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:2750.
GPR[EPS]-1659829816198
GPR[ESUN]-1659829816198
GPR[SSUN]-1659829816198
-718432441
GPR[SPVATF]-1659829816674
GPR[EPVATF]-1659829817198
GPR[SPS]-1659829817198
[1013459] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:145.
GPR[EPS]-1659829818276
GPR[SPVATF]-1659829818276
GPR[EPVATF]-1659829818735
GPR[SPS]-1659829818735
[1014668] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:145.
GPR[EPS]-1659829819485
GPR[ESUN]-1659829819485
GPR[SSUN]-1659829819485
-718432441
GPR[SPVATF]-1659829819734
GPR[EPVATF]-1659829820235
GPR[SPS]-1659829820235
[1016128] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:141.
GPR[EPS]-1659829820945
GPR[SPVATF]-1659829820946
GPR[EPVATF]-1659829821448
GPR[SPS]-1659829821448
[1017292] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:141.
GPR[EPS]-1659829822109
GPR[ESUN]-1659829822109
GPR[SSUN]-1659829822109
-718432441
GPR[ESUN]-1659829822334
GPR[SSUN]-1659829822334
-718432441
GPR[SPVATF]-1659829822550
GPR[EPVATF]-1659829823104
GPR[SPS]-1659829823104
[1018989] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:136.
GPR[EPS]-1659829823806
GPR[ESUN]-1659829823806
GPR[SSUN]-1659829823806
-718432441
GPR[SPVATF]-1659829824048
GPR[EPVATF]-1659829824561
GPR[SPS]-1659829824561
[1020608] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:135.
GPR[EPS]-1659829825425
GPR[ESUN]-1659829825426
GPR[SSUN]-1659829825426
-718432441
GPR[SPVATF]-1659829825658
GPR[EPVATF]-1659829826140
GPR[SPS]-1659829826140
[1022050] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:133.
GPR[EPS]-1659829826867
GPR[ESUN]-1659829826867
GPR[SSUN]-1659829826867
-718432441
GPR[SPVATF]-1659829827110
GPR[EPVATF]-1659829827585
GPR[SPS]-1659829827585
[1023419] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.CodeGenerator:131.
GPR[EPS]-1659829828236
GPR[ESUN]-1659829828236
GPR[SSUN]-1659829828236
-128675625
GPR[SPVATF]-1659829828497
GPR[EPVATF]-1659829829011
GPR[SPS]-1659829829011
[1024773] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$Candidate:282.
GPR[EPS]-1659829829590
GPR[SPVATF]-1659829829590
GPR[EPVATF]-1659829830092
GPR[SPS]-1659829830092
GPR[EPS]-1659829864008
GPR[ESUN]-1659829864008
GPR[SSUN]-1659829864008
-128675625
GPR[ESUN]-1659829864272
GPR[SSUN]-1659829864272
-1119592721
GPR[ESUN]-1659829864526
GPR[SSUN]-1659829864526
-128675625
GPR[SPVATF]-1659829864795
GPR[EPVATF]-1659829865326
GPR[SPS]-1659829865326
GPR[EPS]-1659829883277
GPR[ESUN]-1659829883277
GPR[SSUN]-1659829883277
-128675625
GPR[ESUN]-1659829883939
GPR[SSUN]-1659829883939
-128675625
GPR[SPVATF]-1659829884206
GPR[EPVATF]-1659829884747
GPR[SPS]-1659829884747
GPR[EPS]-1659829894212
GPR[SPVATF]-1659829894213
GPR[EPVATF]-1659829894967
GPR[SPS]-1659829894967
GPR[EPS]-1659829912027
GPR[ESUN]-1659829912027
GPR[SSUN]-1659829912027
-1119592721
GPR[SPVATF]-1659829912291
GPR[EPVATF]-1659829912903
GPR[SPS]-1659829912903
[1108669] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:286.
GPR[EPS]-1659829913486
GPR[ESUN]-1659829913486
GPR[SSUN]-1659829913486
-1119592721
GPR[SPVATF]-1659829913740
GPR[EPVATF]-1659829914348
GPR[SPS]-1659829914348
[1110156] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:284.
GPR[EPS]-1659829914973
GPR[ESUN]-1659829914973
GPR[SSUN]-1659829914973
-1119592721
GPR[SPVATF]-1659829915237
GPR[EPVATF]-1659829915858
GPR[SPS]-1659829915858
[1111667] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:283.
GPR[EPS]-1659829916484
GPR[ESUN]-1659829916484
GPR[SSUN]-1659829916484
-1119592721
GPR[ESUN]-1659829916750
GPR[SSUN]-1659829916750
2433571
GPR[SPVATF]-1659829917199
GPR[EPVATF]-1659829917873
GPR[SPS]-1659829917873
[1113745] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:970.
GPR[EPS]-1659829918562
GPR[SPVATF]-1659829918562
GPR[EPVATF]-1659829919224
GPR[SPS]-1659829919224
[1115108] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:970.
GPR[EPS]-1659829919925
GPR[ESUN]-1659829919925
GPR[SSUN]-1659829919925
-1119592721
GPR[SPVATF]-1659829920176
GPR[EPVATF]-1659829920835
GPR[SPS]-1659829920835
[1116617] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:434.
GPR[EPS]-1659829921434
GPR[ESUN]-1659829921434
GPR[SSUN]-1659829921434
-1765952779
GPR[SPVATF]-1659829921677
GPR[EPVATF]-1659829922358
GPR[SPS]-1659829922358
[1118112] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:219.
GPR[EPS]-1659829922929
GPR[ESUN]-1659829922930
GPR[SSUN]-1659829922930
-1765952779
GPR[SPVATF]-1659829923184
GPR[EPVATF]-1659829923885
GPR[SPS]-1659829923885
[1119688] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:218.
GPR[EPS]-1659829924505
GPR[SPVATF]-1659829924505
GPR[EPVATF]-1659829925209
GPR[SPS]-1659829925209
[1120975] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:218.
GPR[EPS]-1659829925792
GPR[ESUN]-1659829925792
GPR[SSUN]-1659829925792
-1765952779
GPR[SPVATF]-1659829926031
GPR[EPVATF]-1659829926750
GPR[SPS]-1659829926750
[1123619] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:217.
GPR[EPS]-1659829928436
GPR[ESUN]-1659829928436
GPR[SSUN]-1659829928436
-1119592721
GPR[SPVATF]-1659829928706
GPR[EPVATF]-1659829929410
GPR[SPS]-1659829929410
[1125183] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:273.
GPR[EPS]-1659829930000
GPR[ESUN]-1659829930000
GPR[SSUN]-1659829930000
-1119592721
GPR[SPVATF]-1659829930237
GPR[EPVATF]-1659829930927
GPR[SPS]-1659829930927
[1126876] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:272.
GPR[EPS]-1659829931693
GPR[ESUN]-1659829931693
GPR[SSUN]-1659829931693
-1966087783
GPR[SPVATF]-1659829931908
GPR[EPVATF]-1659829931962
[1127145] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[SPVATF]-1659829931962
GPR[EPVATF]-1659829932009
[1127192] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: failingTestCasesValidated: nothing to repair, no failing test cases
GPR[ESUN]-1659829932009
GPR[SSUN]-1659829932009
-1966087783
GPR[ESUN]-1659829932211
GPR[SSUN]-1659829932211
2433571
GPR[SPVATF]-1659829932488
GPR[EPVATF]-1659829933145
GPR[SPS]-1659829933145
[1129058] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:960.
GPR[EPS]-1659829933875
GPR[SPVATF]-1659829933875
GPR[EPVATF]-1659829934468
GPR[SPS]-1659829934468
[1130350] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:960.
GPR[EPS]-1659829935167
GPR[ESUN]-1659829935167
GPR[SSUN]-1659829935167
80988634
GPR[ESUN]-1659829935356
GPR[SSUN]-1659829935356
2433571
GPR[ESUN]-1659829935620
GPR[SSUN]-1659829935620
2433571
GPR[SPVATF]-1659829935859
GPR[EPVATF]-1659829936418
GPR[SPS]-1659829936418
[1132263] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1001.
GPR[EPS]-1659829937081
GPR[SPVATF]-1659829937081
GPR[EPVATF]-1659829937604
GPR[SPS]-1659829937604
[1133597] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:1001.
GPR[EPS]-1659829938414
GPR[ESUN]-1659829938414
GPR[SSUN]-1659829938414
2433571
GPR[SPVATF]-1659829938673
GPR[EPVATF]-1659829939192
GPR[SPS]-1659829939192
[1135086] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:982.
GPR[EPS]-1659829939903
GPR[SPVATF]-1659829939903
GPR[EPVATF]-1659829940467
GPR[SPS]-1659829940467
[1136369] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:982.
GPR[EPS]-1659829941186
GPR[ESUN]-1659829941186
GPR[SSUN]-1659829941186
2433571
GPR[SPVATF]-1659829941448
GPR[EPVATF]-1659829941989
GPR[SPS]-1659829941989
[1137865] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:974.
GPR[EPS]-1659829942682
GPR[SPVATF]-1659829942682
GPR[EPVATF]-1659829943237
GPR[SPS]-1659829943237
[1139481] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:974.
GPR[EPS]-1659829944298
GPR[ESUN]-1659829944298
GPR[SSUN]-1659829944299
2433571
GPR[SPVATF]-1659829944556
GPR[EPVATF]-1659829945090
GPR[SPS]-1659829945090
[1140958] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659829945775
GPR[SPVATF]-1659829945776
GPR[EPVATF]-1659829946459
GPR[SPS]-1659829946459
[1142384] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:957.
GPR[EPS]-1659829947201
GPR[ESUN]-1659829947201
GPR[SSUN]-1659829947201
2433571
GPR[SPVATF]-1659829947459
GPR[EPVATF]-1659829948011
GPR[SPS]-1659829948011
[1143894] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:956.
GPR[EPS]-1659829948711
GPR[ESUN]-1659829948711
GPR[SSUN]-1659829948711
2433571
GPR[ESUN]-1659829948972
GPR[SSUN]-1659829948972
2433571
GPR[SPVATF]-1659829949220
GPR[EPVATF]-1659829949761
GPR[SPS]-1659829949761
[1145623] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.rhino.Node:947.
GPR[EPS]-1659829950440
GPR[ESUN]-1659829950440
GPR[SSUN]-1659829950440
2433571
GPR[ESUN]-1659829950696
GPR[SSUN]-1659829950696
-1119592721
GPR[SPVATF]-1659829950943
GPR[EPVATF]-1659829951491
GPR[SPS]-1659829951491
[1147293] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:430.
GPR[EPS]-1659829952110
GPR[SPVATF]-1659829952110
GPR[EPVATF]-1659829952675
GPR[SPS]-1659829952675
GPR[EPS]-1659829954887
GPR[SPVATR]-1659829954887
[1150070] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:430: CONDITIONAL (def.unknownDependencies) || (1 <= com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.size())
[1150449] INFO TestPatch - Running test suite to check the patch "(def.unknownDependencies) || (1 <= com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.size())" is working
GPR[EPVATR]-1659829956250
[1151433] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659829956250
[1151435] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -429,3 +429,3 @@
   boolean dependsOnOuterScopeVars(Definition def) {
-    if (def.unknownDependencies) {
+    if ((def.unknownDependencies) || (1 <= com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.size())) {
       return true;

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1146833_6ts_1659829956252.diff
GPR[ESUN]-1659829956253
GPR[SSUN]-1659829956253
-1117079791
GPR[ESUN]-1659829956478
GPR[SSUN]-1659829956478
-1117079791
GPR[SPVATF]-1659829956702
GPR[EPVATF]-1659829957271
GPR[SPS]-1659829957271
[1153014] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:531.
GPR[EPS]-1659829957831
GPR[SPVATF]-1659829957831
GPR[EPVATF]-1659829958422
GPR[SPS]-1659829958423
[1155147] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:531.
GPR[EPS]-1659829959964
GPR[ESUN]-1659829959964
GPR[SSUN]-1659829959964
-1117079791
GPR[SPVATF]-1659829960595
GPR[EPVATF]-1659829961412
GPR[SPS]-1659829961412
[1157148] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:526.
GPR[EPS]-1659829961965
GPR[SPVATF]-1659829961965
GPR[EPVATF]-1659829962583
GPR[SPS]-1659829962583
[1158315] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:526.
GPR[EPS]-1659829963132
GPR[ESUN]-1659829963132
GPR[SSUN]-1659829963132
-1117079791
GPR[SPVATF]-1659829963360
GPR[EPVATF]-1659829964012
GPR[SPS]-1659829964012
[1159745] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:520.
GPR[EPS]-1659829964562
GPR[SPVATF]-1659829964562
GPR[EPVATF]-1659829965207
GPR[SPS]-1659829965207
[1161097] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:520.
GPR[EPS]-1659829965914
GPR[ESUN]-1659829965914
GPR[SSUN]-1659829965914
-1117079791
GPR[SPVATF]-1659829966109
GPR[EPVATF]-1659829966722
GPR[SPS]-1659829966722
[1162381] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:519.
GPR[EPS]-1659829967198
GPR[ESUN]-1659829967198
GPR[SSUN]-1659829967198
-1117079791
GPR[SPVATF]-1659829967395
GPR[EPVATF]-1659829968008
GPR[SPS]-1659829968008
[1163668] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:518.
GPR[EPS]-1659829968485
GPR[ESUN]-1659829968485
GPR[SSUN]-1659829968485
-1117079791
GPR[ESUN]-1659829968678
GPR[SSUN]-1659829968678
-1117079791
GPR[ESUN]-1659829968872
GPR[SSUN]-1659829968872
-1117079791
GPR[SPVATF]-1659829969062
GPR[EPVATF]-1659829969698
GPR[SPS]-1659829969698
[1165729] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:512.
GPR[EPS]-1659829970546
GPR[ESUN]-1659829970546
GPR[SSUN]-1659829970546
-1117079791
GPR[SPVATF]-1659829970864
GPR[EPVATF]-1659829971563
GPR[SPS]-1659829971563
[1167286] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:511.
GPR[EPS]-1659829972103
GPR[ESUN]-1659829972103
GPR[SSUN]-1659829972103
-1117079791
GPR[SPVATF]-1659829972333
GPR[EPVATF]-1659829973052
GPR[SPS]-1659829973052
[1168783] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:510.
GPR[EPS]-1659829973600
GPR[ESUN]-1659829973600
GPR[SSUN]-1659829973600
-1117079791
GPR[SPVATF]-1659829973830
GPR[EPVATF]-1659829974513
GPR[SPS]-1659829974513
[1170175] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:509.
GPR[EPS]-1659829974992
GPR[ESUN]-1659829974993
GPR[SSUN]-1659829974993
-1117079791
GPR[ESUN]-1659829975189
GPR[SSUN]-1659829975189
-1117079791
GPR[SPVATF]-1659829975382
GPR[EPVATF]-1659829976082
GPR[SPS]-1659829976082
[1171813] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.AstValidator:134.
GPR[EPS]-1659829976630
GPR[ESUN]-1659829976631
GPR[SSUN]-1659829976631
-128675625
GPR[SPVATF]-1659829977073
GPR[EPVATF]-1659829977780
GPR[SPS]-1659829977780
[1173564] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:224.
GPR[EPS]-1659829978381
GPR[ESUN]-1659829978382
GPR[SSUN]-1659829978382
-1119592721
GPR[SPVATF]-1659829978646
GPR[EPVATF]-1659829979338
GPR[SPS]-1659829979338
[1175046] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:281.
GPR[EPS]-1659829979864
GPR[SPVATF]-1659829979864
GPR[EPVATF]-1659829980524
GPR[SPS]-1659829980524
[1176285] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:281.
GPR[EPS]-1659829981103
GPR[ESUN]-1659829981103
GPR[SSUN]-1659829981103
-1765952779
GPR[SPVATF]-1659829981342
GPR[EPVATF]-1659829982050
GPR[SPS]-1659829982050
[1177838] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:258.
GPR[EPS]-1659829982655
GPR[ESUN]-1659829982655
GPR[SSUN]-1659829982655
-1765952779
GPR[SPVATF]-1659829982905
GPR[EPVATF]-1659829983617
GPR[SPS]-1659829983617
GPR[EPS]-1659829985657
GPR[SPVATR]-1659829985657
[1180840] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MaybeReachingVariableUse:276: PRECONDITION com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()
[1181204] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659829988178
[1183361] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659829988178
[1183363] INFO NoPol - --- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -275,3 +275,5 @@
     if (!escaped.contains(var)) {
-      use.mayUseMap.removeAll(var);
+      if (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()) {
+        use.mayUseMap.removeAll(var);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1178761_7ts_1659829988180.diff
GPR[ESUN]-1659829988181
GPR[SSUN]-1659829988181
1187751237
GPR[SPVATF]-1659829988479
GPR[EPVATF]-1659829989246
GPR[SPS]-1659829989246
[1185453] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.NodeUtil:1616.
GPR[EPS]-1659829990270
GPR[ESUN]-1659829990270
GPR[SSUN]-1659829990270
-1765952779
GPR[ESUN]-1659829990530
GPR[SSUN]-1659829990530
-1765952779
GPR[SPVATF]-1659829990760
GPR[EPVATF]-1659829992197
GPR[SPS]-1659829992197
[1187994] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:216.
GPR[EPS]-1659829992811
GPR[SPVATF]-1659829992811
GPR[EPVATF]-1659829993366
GPR[SPS]-1659829993366
[1189156] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:216.
GPR[EPS]-1659829993973
GPR[ESUN]-1659829993974
GPR[SSUN]-1659829993974
-1765952779
GPR[SPVATF]-1659829994227
GPR[EPVATF]-1659829994768
GPR[SPS]-1659829994768
[1190571] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:214.
GPR[EPS]-1659829995388
GPR[ESUN]-1659829995388
GPR[SSUN]-1659829995388
-1765952779
GPR[ESUN]-1659829995642
GPR[SSUN]-1659829995642
-1765952779
GPR[ESUN]-1659829995870
GPR[SSUN]-1659829995870
-1765952779
GPR[SPVATF]-1659829996097
GPR[EPVATF]-1659829996608
GPR[SPS]-1659829996609
GPR[EPS]-1659829998542
GPR[SPVATR]-1659829998542
[1193725] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MaybeReachingVariableUse:275: PRECONDITION com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()
[1194086] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659829999746
[1194929] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659829999746
[1194930] INFO NoPol - --- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -274,4 +274,6 @@
     }
-    if (!escaped.contains(var)) {
-      use.mayUseMap.removeAll(var);
+    if (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()) {
+      if (!escaped.contains(var)) {
+        use.mayUseMap.removeAll(var);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1190328_8ts_1659829999747.diff
GPR[SPVATF]-1659829999748
GPR[EPVATF]-1659830000290
GPR[SPS]-1659830000290
GPR[EPS]-1659830002009
GPR[SPVATR]-1659830002009
[1197192] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MaybeReachingVariableUse:275: CONDITIONAL com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()
[1197543] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659830003199
[1198382] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659830003199
[1198384] INFO NoPol - --- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -274,3 +274,3 @@
     }
-    if (!escaped.contains(var)) {
+    if (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.isEmpty()) {
       use.mayUseMap.removeAll(var);

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1193782_9ts_1659830003201.diff
GPR[ESUN]-1659830003202
GPR[SSUN]-1659830003202
160819208
GPR[SPVATF]-1659830003464
GPR[EPVATF]-1659830003973
GPR[SPS]-1659830003973
[1200275] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.ControlFlowAnalysis:515.
GPR[EPS]-1659830005092
GPR[ESUN]-1659830005092
GPR[SSUN]-1659830005092
-1765952779
GPR[SPVATF]-1659830005344
GPR[EPVATF]-1659830005828
GPR[SPS]-1659830005828
[1201618] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:272.
GPR[EPS]-1659830006435
GPR[SPVATF]-1659830006435
GPR[EPVATF]-1659830006975
GPR[SPS]-1659830006975
GPR[EPS]-1659830008825
GPR[SPVATR]-1659830008825
[1204008] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MaybeReachingVariableUse:272: CONDITIONAL (0) != (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size())
[1204385] INFO TestPatch - Running test suite to check the patch "(0) != (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size())" is working
GPR[EPVATR]-1659830010091
[1205274] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659830010091
[1205275] INFO NoPol - --- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -271,3 +271,3 @@
     Var var = jsScope.getVar(name);
-    if (var == null || var.scope != jsScope) {
+    if ((0) != (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size())) {
       return;

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1200673_10ts_1659830010092.diff
GPR[ESUN]-1659830010093
GPR[SSUN]-1659830010093
-1765952779
GPR[ESUN]-1659830010328
GPR[SSUN]-1659830010328
-128675625
GPR[SPVATF]-1659830010597
GPR[EPVATF]-1659830011121
GPR[SPS]-1659830011121
GPR[EPS]-1659830027353
GPR[SPVATF]-1659830027354
GPR[EPVATF]-1659830027914
GPR[SPS]-1659830027914
GPR[EPS]-1659830038489
GPR[ESUN]-1659830038489
GPR[SSUN]-1659830038489
-128675625
GPR[ESUN]-1659830038751
GPR[SSUN]-1659830038751
-128675625
GPR[SPVATF]-1659830038994
GPR[EPVATF]-1659830039495
GPR[SPS]-1659830039495
[1235320] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:228.
GPR[EPS]-1659830040137
GPR[SPVATF]-1659830040137
GPR[EPVATF]-1659830040666
GPR[SPS]-1659830040666
GPR[EPS]-1659830050370
GPR[ESUN]-1659830050370
GPR[SSUN]-1659830050370
-128675625
GPR[ESUN]-1659830050644
GPR[SSUN]-1659830050644
1852376448
GPR[SPVATF]-1659830050893
GPR[EPVATF]-1659830051465
GPR[SPS]-1659830051465
[1247232] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MarkNoSideEffectCalls$GatherNoSideEffectFunctions:158.
GPR[EPS]-1659830052049
GPR[ESUN]-1659830052049
GPR[SSUN]-1659830052049
-1119592721
GPR[ESUN]-1659830052305
GPR[SSUN]-1659830052305
-1119592721
GPR[SPVATF]-1659830052558
GPR[EPVATF]-1659830053126
GPR[SPS]-1659830053126
[1248919] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:397.
GPR[EPS]-1659830053736
GPR[SPVATF]-1659830053737
GPR[EPVATF]-1659830054323
GPR[SPS]-1659830054323
[1250077] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef$1:397.
GPR[EPS]-1659830054894
GPR[ESUN]-1659830054894
GPR[SSUN]-1659830054894
-1119592721
GPR[ESUN]-1659830055157
GPR[SSUN]-1659830055157
-1119592721
GPR[SPVATF]-1659830055423
GPR[EPVATF]-1659830056041
GPR[SPS]-1659830056041
[1251856] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:393.
GPR[EPS]-1659830056673
GPR[ESUN]-1659830056673
GPR[SSUN]-1659830056673
-1119592721
GPR[SPVATF]-1659830056930
GPR[EPVATF]-1659830057568
GPR[SPS]-1659830057568
[1253379] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:353.
GPR[EPS]-1659830058196
GPR[ESUN]-1659830058196
GPR[SSUN]-1659830058196
-1119592721
GPR[ESUN]-1659830058439
GPR[SSUN]-1659830058439
-1119592721
GPR[SPVATF]-1659830058825
GPR[EPVATF]-1659830059486
GPR[SPS]-1659830059486
[1255282] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:271.
GPR[EPS]-1659830060099
GPR[SPVATF]-1659830060099
GPR[EPVATF]-1659830060748
GPR[SPS]-1659830060748
[1256522] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:271.
GPR[EPS]-1659830061339
GPR[ESUN]-1659830061339
GPR[SSUN]-1659830061339
-1119592721
GPR[SPVATF]-1659830061607
GPR[EPVATF]-1659830062238
GPR[SPS]-1659830062238
[1258029] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:270.
GPR[EPS]-1659830062846
GPR[ESUN]-1659830062846
GPR[SSUN]-1659830062846
-128675625
GPR[SPVATF]-1659830063128
GPR[EPVATF]-1659830063771
GPR[SPS]-1659830063771
[1259763] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:221.
GPR[EPS]-1659830064580
GPR[SPVATF]-1659830064580
GPR[EPVATF]-1659830065249
GPR[SPS]-1659830065249
GPR[EPS]-1659830072034
GPR[ESUN]-1659830072034
GPR[SSUN]-1659830072034
-128675625
GPR[SPVATF]-1659830072311
GPR[EPVATF]-1659830073026
GPR[SPS]-1659830073026
[1268813] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates$1:216.
GPR[EPS]-1659830073631
GPR[SPVATF]-1659830073631
GPR[EPVATF]-1659830074515
GPR[SPS]-1659830074515
GPR[EPS]-1659830081892
GPR[ESUN]-1659830081892
GPR[SSUN]-1659830081892
-1119592721
GPR[SPVATF]-1659830082154
GPR[EPVATF]-1659830082873
GPR[SPS]-1659830082873
GPR[EPS]-1659830085015
GPR[SPVATR]-1659830085015
[1280198] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:355: PRECONDITION com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()
[1280571] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659830086427
[1281610] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659830086427
[1281612] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -354,3 +354,5 @@
         }
-        def.reachingDef.put(var, definition);
+        if (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()) {
+          def.reachingDef.put(var, definition);
+        }
       }

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1277010_11ts_1659830086429.diff
GPR[ESUN]-1659830086430
GPR[SSUN]-1659830086430
-1119592721
GPR[SPVATF]-1659830086690
GPR[EPVATF]-1659830087376
GPR[SPS]-1659830087376
[1283350] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:352.
GPR[EPS]-1659830088167
GPR[SPVATF]-1659830088168
GPR[EPVATF]-1659830088924
GPR[SPS]-1659830088924
[1284754] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:352.
GPR[EPS]-1659830089571
GPR[ESUN]-1659830089571
GPR[SSUN]-1659830089571
-1119592721
GPR[ESUN]-1659830089833
GPR[SSUN]-1659830089833
-1119592721
GPR[SPVATF]-1659830090089
GPR[EPVATF]-1659830090778
GPR[SPS]-1659830090778
GPR[EPS]-1659830092954
GPR[SPVATR]-1659830092954
[1288137] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:348: PRECONDITION com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()
[1288521] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659830094347
[1289530] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659830094347
[1289532] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -347,10 +347,12 @@
     if (!escaped.contains(var)) {
-      if (node == null) {
-        def.reachingDef.put(var, null);
-      } else {
-        Definition definition = new Definition(node);
-        if (rValue != null) {
-          computeDependence(definition, rValue);
+      if (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()) {
+        if (node == null) {
+          def.reachingDef.put(var, null);
+        } else {
+          Definition definition = new Definition(node);
+          if (rValue != null) {
+            computeDependence(definition, rValue);
+          }
+          def.reachingDef.put(var, definition);
         }
-        def.reachingDef.put(var, definition);
       }

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1284930_12ts_1659830094349.diff
GPR[SPVATF]-1659830094350
GPR[EPVATF]-1659830095041
GPR[SPS]-1659830095041
GPR[EPS]-1659830097490
GPR[SPVATR]-1659830097490
[1292673] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:348: CONDITIONAL (!(com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty())) || (node == null)
[1293052] INFO TestPatch - Running test suite to check the patch "(!(com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty())) || (node == null)" is working
GPR[EPVATR]-1659830098886
[1294069] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659830098887
[1294072] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -347,3 +347,3 @@
     if (!escaped.contains(var)) {
-      if (node == null) {
+      if ((!(com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty())) || (node == null)) {
         def.reachingDef.put(var, null);

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1289470_13ts_1659830098889.diff
GPR[ESUN]-1659830098889
GPR[SSUN]-1659830098889
-1765952779
GPR[SPVATF]-1659830099142
GPR[EPVATF]-1659830099833
GPR[SPS]-1659830099833
GPR[EPS]-1659830102115
GPR[SPVATR]-1659830102115
[1297298] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MaybeReachingVariableUse:261: PRECONDITION com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= name.length()
[1297676] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= name.length()" is working
GPR[EPVATR]-1659830104670
[1299853] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659830104670
[1299855] INFO NoPol - --- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -260,3 +260,5 @@
     if (!escaped.contains(var)) {
-      use.mayUseMap.put(var, node);
+      if (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= name.length()) {
+        use.mayUseMap.put(var, node);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1295253_14ts_1659830104672.diff
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104673
GPR[ESUN]-1659830104673
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
GPR[ESUN]-1659830104674
GPR[SSUN]-1659830104674
1537627151
GPR[ESUN]-1659830104907
GPR[SSUN]-1659830104908
-1345859678
GPR[ESUN]-1659830105345
GPR[SSUN]-1659830105345
-1345859678
GPR[ESUN]-1659830105993
GPR[SSUN]-1659830105993
-1345859678
GPR[SPVATF]-1659830106785
GPR[EPVATF]-1659830107877
GPR[SPS]-1659830107877
[1303742] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1000.
GPR[EPS]-1659830108559
GPR[ESUN]-1659830108559
GPR[SSUN]-1659830108559
-1345859678
GPR[SPVATF]-1659830108859
GPR[EPVATF]-1659830109813
GPR[SPS]-1659830109813
[1305960] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:998.
GPR[EPS]-1659830110777
GPR[ESUN]-1659830110777
GPR[SSUN]-1659830110777
-1345859678
GPR[SPVATF]-1659830111052
GPR[EPVATF]-1659830111760
GPR[SPS]-1659830111760
[1307612] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:997.
GPR[EPS]-1659830112429
GPR[ESUN]-1659830112429
GPR[SSUN]-1659830112429
-1345859678
GPR[SPVATF]-1659830112692
GPR[EPVATF]-1659830113252
GPR[SPS]-1659830113252
[1309082] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:996.
GPR[EPS]-1659830113899
GPR[ESUN]-1659830113899
GPR[SSUN]-1659830113899
-1345859678
GPR[SPVATF]-1659830114159
GPR[EPVATF]-1659830114703
GPR[SPS]-1659830114703
[1310731] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:995.
GPR[EPS]-1659830115548
GPR[SPVATF]-1659830115548
GPR[EPVATF]-1659830116112
GPR[SPS]-1659830116112
[1311989] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:995.
GPR[EPS]-1659830116806
GPR[ESUN]-1659830116806
GPR[SSUN]-1659830116806
-1345859678
GPR[ESUN]-1659830117085
GPR[SSUN]-1659830117085
-1345859678
GPR[SPVATF]-1659830117362
GPR[EPVATF]-1659830117953
GPR[SPS]-1659830117953
[1313822] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:523.
GPR[EPS]-1659830118639
GPR[ESUN]-1659830118639
GPR[SSUN]-1659830118640
-1345859678
GPR[SPVATF]-1659830118911
GPR[EPVATF]-1659830119485
GPR[SPS]-1659830119485
[1315357] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:517.
GPR[EPS]-1659830120174
GPR[SPVATF]-1659830120175
GPR[EPVATF]-1659830120703
GPR[SPS]-1659830120703
[1316473] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:517.
GPR[EPS]-1659830121290
GPR[ESUN]-1659830121290
GPR[SSUN]-1659830121290
-1345859678
GPR[ESUN]-1659830121531
GPR[SSUN]-1659830121531
-1345859678
GPR[ESUN]-1659830121771
GPR[SSUN]-1659830121771
-1119592721
GPR[ESUN]-1659830121991
GPR[SSUN]-1659830121991
-1119592721
GPR[SPVATF]-1659830122209
GPR[EPVATF]-1659830122735
GPR[SPS]-1659830122735
GPR[EPS]-1659830125352
GPR[SPVATR]-1659830125352
[1320535] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:347: PRECONDITION com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()
[1320898] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659830126595
[1321778] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659830126595
[1321780] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -346,11 +346,13 @@
 
-    if (!escaped.contains(var)) {
-      if (node == null) {
-        def.reachingDef.put(var, null);
-      } else {
-        Definition definition = new Definition(node);
-        if (rValue != null) {
-          computeDependence(definition, rValue);
+    if (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()) {
+      if (!escaped.contains(var)) {
+        if (node == null) {
+          def.reachingDef.put(var, null);
+        } else {
+          Definition definition = new Definition(node);
+          if (rValue != null) {
+            computeDependence(definition, rValue);
+          }
+          def.reachingDef.put(var, definition);
         }
-        def.reachingDef.put(var, definition);
       }

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1317178_15ts_1659830126597.diff
GPR[SPVATF]-1659830126598
GPR[EPVATF]-1659830127213
GPR[SPS]-1659830127213
GPR[EPS]-1659830129198
GPR[SPVATR]-1659830129198
[1324381] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:347: CONDITIONAL com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()
[1324753] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()" is working
GPR[EPVATR]-1659830130687
[1325870] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659830130688
[1325873] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -346,3 +346,3 @@
 
-    if (!escaped.contains(var)) {
+    if (com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.isEmpty()) {
       if (node == null) {

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1321271_16ts_1659830130690.diff
GPR[ESUN]-1659830130690
GPR[SSUN]-1659830130690
-1119592721
GPR[ESUN]-1659830130932
GPR[SSUN]-1659830130932
-1119592721
GPR[SPVATF]-1659830131201
GPR[EPVATF]-1659830131842
GPR[SPS]-1659830131842
[1327628] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:342.
GPR[EPS]-1659830132445
GPR[SPVATF]-1659830132446
GPR[EPVATF]-1659830133090
GPR[SPS]-1659830133090
[1328880] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:342.
GPR[EPS]-1659830133697
GPR[ESUN]-1659830133697
GPR[SSUN]-1659830133697
-1119592721
GPR[SPVATF]-1659830133953
GPR[EPVATF]-1659830134609
GPR[SPS]-1659830134609
[1330413] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:339.
GPR[EPS]-1659830135230
GPR[SPVATF]-1659830135231
GPR[EPVATF]-1659830135860
GPR[SPS]-1659830135861
[1331674] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:339.
GPR[EPS]-1659830136491
GPR[ESUN]-1659830136491
GPR[SSUN]-1659830136491
-1119592721
GPR[ESUN]-1659830136738
GPR[SSUN]-1659830136738
-1119592721
GPR[SPVATF]-1659830136995
GPR[EPVATF]-1659830137639
GPR[SPS]-1659830137639
[1333457] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:337.
GPR[EPS]-1659830138274
GPR[ESUN]-1659830138274
GPR[SSUN]-1659830138274
-1765952779
GPR[ESUN]-1659830138524
GPR[SSUN]-1659830138524
-1765952779
GPR[SPVATF]-1659830138762
GPR[EPVATF]-1659830139437
GPR[SPS]-1659830139437
GPR[EPS]-1659830141876
GPR[SPVATR]-1659830141876
[1337059] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MaybeReachingVariableUse:260: PRECONDITION com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= 1
[1337394] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= 1" is working
GPR[EPVATR]-1659830143347
[1338530] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659830143347
[1338532] INFO NoPol - --- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -259,4 +259,6 @@
     }
-    if (!escaped.contains(var)) {
-      use.mayUseMap.put(var, node);
+    if (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= 1) {
+      if (!escaped.contains(var)) {
+        use.mayUseMap.put(var, node);
+      }
     }

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1333930_17ts_1659830143349.diff
GPR[SPVATF]-1659830143350
GPR[EPVATF]-1659830144070
GPR[SPS]-1659830144070
GPR[EPS]-1659830149229
GPR[ESUN]-1659830149229
GPR[SSUN]-1659830149229
-1119592721
GPR[SPVATF]-1659830149501
GPR[EPVATF]-1659830150181
GPR[SPS]-1659830150181
[1345959] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:333.
GPR[EPS]-1659830150776
GPR[SPVATF]-1659830150777
GPR[EPVATF]-1659830151477
GPR[SPS]-1659830151477
GPR[EPS]-1659830153963
GPR[SPVATR]-1659830153963
[1349146] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MustBeReachingVariableDef:333: CONDITIONAL (0 < com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.size()) || ((var == null))
[1349513] INFO TestPatch - Running test suite to check the patch "(0 < com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.size()) || ((var == null))" is working
GPR[EPVATR]-1659830155419
[1350602] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659830155419
[1350604] INFO NoPol - --- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java
@@ -332,3 +332,3 @@
     // that we might not traverse.
-    if (var == null || var.scope != jsScope) {
+    if ((0 < com.google.javascript.jscomp.MustBeReachingVariableDef.this.escaped.size()) || ((var == null))) {
       return;

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1346002_18ts_1659830155421.diff
GPR[ESUN]-1659830155421
GPR[SSUN]-1659830155421
-1119592721
GPR[ESUN]-1659830155674
GPR[SSUN]-1659830155674
-128675625
GPR[SPVATF]-1659830155944
GPR[EPVATF]-1659830156640
GPR[SPS]-1659830156640
[1352429] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.FlowSensitiveInlineVariables$GatherCandiates:202.
GPR[EPS]-1659830157246
GPR[ESUN]-1659830157246
GPR[SSUN]-1659830157246
-1765952779
GPR[ESUN]-1659830157489
GPR[SSUN]-1659830157489
-1765952779
GPR[SPVATF]-1659830157726
GPR[EPVATF]-1659830158387
GPR[SPS]-1659830158387
GPR[EPS]-1659830160947
GPR[SPVATR]-1659830160947
[1356130] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MaybeReachingVariableUse:172: PRECONDITION com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= 1
[1356502] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= 1" is working
GPR[EPVATR]-1659830162558
[1357741] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659830162558
[1357743] INFO NoPol - --- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -171,3 +171,5 @@
       case Token.NAME:
-        addToUseIfLocal(n.getString(), cfgNode, output);
+        if (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= 1) {
+          addToUseIfLocal(n.getString(), cfgNode, output);
+        }
         return;

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1353141_19ts_1659830162560.diff
GPR[ESUN]-1659830162561
GPR[SSUN]-1659830162561
-1765952779
GPR[SPVATF]-1659830162811
GPR[EPVATF]-1659830163530
GPR[SPS]-1659830163530
[1359337] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MaybeReachingVariableUse:257.
GPR[EPS]-1659830164154
GPR[SPVATF]-1659830164155
GPR[EPVATF]-1659830164857
GPR[SPS]-1659830164857
GPR[EPS]-1659830167448
GPR[SPVATR]-1659830167448
[1362631] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MaybeReachingVariableUse:257: CONDITIONAL (((var == null) || (var.scope != jsScope)) && (use.mayUseMap!=null)) || (1 < com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size())
[1362990] INFO TestPatch - Running test suite to check the patch "(((var == null) || (var.scope != jsScope)) && (use.mayUseMap!=null)) || (1 < com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size())" is working
GPR[EPVATR]-1659830169065
[1364248] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659830169065
[1364250] INFO NoPol - --- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -256,3 +256,3 @@
     Var var = jsScope.getVar(name);
-    if (var == null || var.scope != jsScope) {
+    if ((((var == null) || (var.scope != jsScope)) && (use.mayUseMap!=null)) || (1 < com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size())) {
       return;

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1359648_20ts_1659830169067.diff
GPR[ESUN]-1659830169067
GPR[SSUN]-1659830169067
-1765952779
GPR[ESUN]-1659830169308
GPR[SSUN]-1659830169308
GPR[ESUN]-1659830169308
GPR[SSUN]-1659830169308
-1765952779
GPR[SPVATF]-1659830169561
GPR[EPVATF]-1659830170273
GPR[SPS]-1659830170273
GPR[EPS]-1659830172956
GPR[SPVATR]-1659830172956
[1368139] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MaybeReachingVariableUse:244: PRECONDITION com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= 1
[1368490] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= 1" is working
GPR[EPVATR]-1659830174592
[1369775] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659830174593
[1369777] INFO NoPol - --- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -243,3 +243,5 @@
           for (Node c = n.getLastChild(); c != null; c = n.getChildBefore(c)) {
-            computeMayUse(c, cfgNode, output, conditional);
+            if (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= 1) {
+              computeMayUse(c, cfgNode, output, conditional);
+            }
           }

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1365175_21ts_1659830174594.diff
GPR[ESUN]-1659830174594
GPR[SSUN]-1659830174594
-1119592721
GPR[ESUN]-1659830174852
GPR[SSUN]-1659830174852
-1119592721
GPR[ESUN]-1659830175111
GPR[SSUN]-1659830175112
-1119592721
GPR[ESUN]-1659830175357
GPR[SSUN]-1659830175357
-1119592721
GPR[SPVATF]-1659830175589
GPR[EPVATF]-1659830176304
GPR[SPS]-1659830176304
[1372111] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:418.
GPR[EPS]-1659830176928
GPR[ESUN]-1659830176928
GPR[SSUN]-1659830176929
-1765952779
GPR[ESUN]-1659830177388
GPR[SSUN]-1659830177388
-1765952779
GPR[SPVATF]-1659830178181
GPR[EPVATF]-1659830179482
GPR[SPS]-1659830179482
GPR[EPS]-1659830182104
GPR[SPVATR]-1659830182104
[1377287] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MaybeReachingVariableUse:243: PRECONDITION com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= 1
[1377620] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= 1" is working
GPR[EPVATR]-1659830183767
[1378951] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659830183768
[1378952] INFO NoPol - --- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -242,4 +242,6 @@
            */
-          for (Node c = n.getLastChild(); c != null; c = n.getChildBefore(c)) {
-            computeMayUse(c, cfgNode, output, conditional);
+          if (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= 1) {
+            for (Node c = n.getLastChild(); c != null; c = n.getChildBefore(c)) {
+              computeMayUse(c, cfgNode, output, conditional);
+            }
           }

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1374350_22ts_1659830183769.diff
GPR[ESUN]-1659830183770
GPR[SSUN]-1659830183770
-1765952779
GPR[SPVATF]-1659830184016
GPR[EPVATF]-1659830184727
GPR[SPS]-1659830184727
GPR[EPS]-1659830187396
GPR[SPVATR]-1659830187396
[1382579] INFO TestPatch - Applying patch: com.google.javascript.jscomp.MaybeReachingVariableUse:225: PRECONDITION com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= 1
[1382928] INFO TestPatch - Running test suite to check the patch "com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= 1" is working
GPR[EPVATR]-1659830189071
[1384254] INFO NoPol - ----PATCH FOUND----
GPR[PF]-1659830189072
[1384257] INFO NoPol - --- a/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
+++ b/src/com/google/javascript/jscomp/MaybeReachingVariableUse.java
@@ -224,23 +224,25 @@
       default:
-        if (NodeUtil.isAssignmentOp(n) && n.getFirstChild().isName()) {
-          Node name = n.getFirstChild();
-          if (!conditional) {
-            removeFromUseIfLocal(name.getString(), output);
+        if (com.google.javascript.jscomp.MaybeReachingVariableUse.this.escaped.size() <= 1) {
+          if (NodeUtil.isAssignmentOp(n) && n.getFirstChild().isName()) {
+            Node name = n.getFirstChild();
+            if (!conditional) {
+              removeFromUseIfLocal(name.getString(), output);
+            }
+            
+            // In case of a += "Hello". There is a read of a.
+            if (!n.isAssign()) {
+              addToUseIfLocal(name.getString(), cfgNode, output);
+            }
+            
+            computeMayUse(name.getNext(), cfgNode, output, conditional);
+          } else {
+            /*
+            * We want to traverse in reverse order because we want the LAST
+            * definition in the sub-tree....
+            * But we have no better way to traverse in reverse other :'(
+            */
+            for (Node c = n.getLastChild(); c != null; c = n.getChildBefore(c)) {
+              computeMayUse(c, cfgNode, output, conditional);
+            }
           }
-
-          // In case of a += "Hello". There is a read of a.
-          if (!n.isAssign()) {
-            addToUseIfLocal(name.getString(), cfgNode, output);
-          }
-
-          computeMayUse(name.getNext(), cfgNode, output, conditional);
-        } else {
-          /*
-           * We want to traverse in reverse order because we want the LAST
-           * definition in the sub-tree....
-           * But we have no better way to traverse in reverse other :'(
-           */
-          for (Node c = n.getLastChild(); c != null; c = n.getChildBefore(c)) {
-            computeMayUse(c, cfgNode, output, conditional);
-          }
         }

Saving patch at /experiment_home///results/Nopol/Closure/12/seed_260/patch_1379655_23ts_1659830189074.diff
GPR[SPVATF]-1659830189074
GPR[EPVATF]-1659830189778
GPR[SPS]-1659830189778
GPR[EPS]-1659830209156
GPR[ESUN]-1659830209156
GPR[SSUN]-1659830209156
-1119592721
GPR[SPVATF]-1659830209439
GPR[EPVATF]-1659830210140
GPR[SPS]-1659830210140
[1405978] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:315.
GPR[EPS]-1659830210795
GPR[ESUN]-1659830210795
GPR[SSUN]-1659830210795
-1119592721
GPR[ESUN]-1659830211049
GPR[SSUN]-1659830211049
-1119592721
GPR[SPVATF]-1659830211301
GPR[EPVATF]-1659830211898
GPR[SPS]-1659830211898
[1407703] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:314.
GPR[EPS]-1659830212521
GPR[ESUN]-1659830212521
GPR[SSUN]-1659830212521
-1119592721
GPR[SPVATF]-1659830212784
GPR[EPVATF]-1659830213386
GPR[SPS]-1659830213386
[1409197] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:305.
GPR[EPS]-1659830214014
GPR[SPVATF]-1659830214014
GPR[EPVATF]-1659830214587
GPR[SPS]-1659830214587
[1410368] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:305.
GPR[EPS]-1659830215185
GPR[ESUN]-1659830215185
GPR[SSUN]-1659830215185
-1119592721
GPR[SPVATF]-1659830215404
GPR[EPVATF]-1659830215959
GPR[SPS]-1659830215959
[1411915] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:300.
GPR[EPS]-1659830216732
GPR[SPVATF]-1659830216732
GPR[EPVATF]-1659830217258
GPR[SPS]-1659830217258
[1413084] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:300.
GPR[EPS]-1659830217901
GPR[ESUN]-1659830217901
GPR[SSUN]-1659830217901
-1119592721
GPR[SPVATF]-1659830218157
GPR[EPVATF]-1659830218702
GPR[SPS]-1659830218702
[1414478] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:280.
GPR[EPS]-1659830219295
GPR[SPVATF]-1659830219295
GPR[EPVATF]-1659830219874
GPR[SPS]-1659830219874
[1415643] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.MustBeReachingVariableDef:280.
GPR[EPS]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
GPR[ESUN]-1659830220460
GPR[SSUN]-1659830220460
1537627151
GPR[ESUN]-1659830220683
GPR[SSUN]-1659830220683
-1345859678
GPR[ESUN]-1659830220949
GPR[SSUN]-1659830220949
-1345859678
GPR[SPVATF]-1659830221222
GPR[EPVATF]-1659830221791
GPR[SPS]-1659830221791
[1417665] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1012.
GPR[EPS]-1659830222482
GPR[SPVATF]-1659830222482
GPR[EPVATF]-1659830223063
GPR[SPS]-1659830223063
[1418933] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1012.
GPR[EPS]-1659830223750
GPR[ESUN]-1659830223750
GPR[SSUN]-1659830223750
-1345859678
GPR[SPVATF]-1659830224053
GPR[EPVATF]-1659830224665
GPR[SPS]-1659830224665
[1420540] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1005.
GPR[EPS]-1659830225357
GPR[SPVATF]-1659830225357
GPR[EPVATF]-1659830225957
GPR[SPS]-1659830225957
[1421989] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1005.
GPR[EPS]-1659830226806
GPR[ESUN]-1659830226806
GPR[SSUN]-1659830226806
-1345859678
GPR[ESUN]-1659830227088
GPR[SSUN]-1659830227089
-1345859678
GPR[SPVATF]-1659830227350
GPR[EPVATF]-1659830227917
GPR[SPS]-1659830227917
[1423819] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:1002.
GPR[EPS]-1659830228636
GPR[ESUN]-1659830228636
GPR[SSUN]-1659830228636
-1345859678
GPR[SPVATF]-1659830228904
GPR[EPVATF]-1659830229484
GPR[SPS]-1659830229484
[1425346] INFO SMTNopolSynthesizer - Not enough specifications: 0. A trivial patch is "true" or "false", please write new tests specifying SourceLocation com.google.javascript.jscomp.parsing.IRFactory$TransformDispatcher:992.
GPR[EPS]-1659830230163
GPR[ESUN]-1659830230163
GPR[SSUN]-1659830230163
-1345859678
GPR[ESUN]-1659830230427
GPR[SSUN]-1659830230427
-1345859678
GPR[ESUN]-1659830230716
GPR[SSUN]-1659830230716
-1345859678
GPR[ESUN]-1659830230993
GPR[SSUN]-1659830230993
-718432441
GPR[SPVATF]-1659830231223
GPR[EPVATF]-1659830231803
GPR[SPS]-1659830231803
[1762140] ERROR NoPol - Error ExecutionException java.util.concurrent.ExecutionException: java.lang.RuntimeException: java.util.concurrent.TimeoutException
GPR[ESUN]-1659830566957
GPR[SSUN]-1659830566957
GPR[ESUN]-1659830573346
GPR[SSUN]-1659830573346
GPR[ESUN]-1659830573347
GPR[SSUN]-1659830573347
1207178244
GPR[ESUN]-1659845296514
GPR[SSUN]-1659845296514
\n\nNode: host-46\n
\n\nDate: Sat 06 Aug 2022 09:34:14 PM PDT\n
End running Nopol Closure/12 results at /experiment_home///results/Nopol/Closure/12/seed_260/
Removing checked out dir script/workingdir/Nopol/Closure_12
GPR[SSLE]-1659846854789
GPR[ESLE]-1659846914793
